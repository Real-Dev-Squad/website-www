window.EmberENV = {
  ...(window.EmberENV || {}),
  ...{
    FEATURES: {},
    _APPLICATION_TEMPLATE_WRAPPER: false,
    _DEFAULT_ASYNC_OBSERVERS: true,
    _JQUERY_INTEGRATION: false,
    _TEMPLATE_ONLY_GLIMMER_COMPONENTS: true,
  },
};
var runningTests = false;
var loader, define, requireModule, require, requirejs;

(function (global) {
  'use strict';

  function dict() {
    var obj = Object.create(null);
    obj['__'] = undefined;
    delete obj['__'];
    return obj;
  }

  // Save off the original values of these globals, so we can restore them if someone asks us to
  var oldGlobals = {
    loader: loader,
    define: define,
    requireModule: requireModule,
    require: require,
    requirejs: requirejs,
  };

  requirejs = require = requireModule = function (id) {
    var pending = [];
    var mod = findModule(id, '(require)', pending);

    for (var i = pending.length - 1; i >= 0; i--) {
      pending[i].exports();
    }

    return mod.module.exports;
  };

  loader = {
    noConflict: function (aliases) {
      var oldName, newName;

      for (oldName in aliases) {
        if (aliases.hasOwnProperty(oldName)) {
          if (oldGlobals.hasOwnProperty(oldName)) {
            newName = aliases[oldName];

            global[newName] = global[oldName];
            global[oldName] = oldGlobals[oldName];
          }
        }
      }
    },
    // Option to enable or disable the generation of default exports
    makeDefaultExport: true,
  };

  var registry = dict();
  var seen = dict();

  var uuid = 0;

  function unsupportedModule(length) {
    throw new Error(
      'an unsupported module was defined, expected `define(id, deps, module)` instead got: `' +
        length +
        '` arguments to define`',
    );
  }

  var defaultDeps = ['require', 'exports', 'module'];

  function Module(id, deps, callback, alias) {
    this.uuid = uuid++;
    this.id = id;
    this.deps = !deps.length && callback.length ? defaultDeps : deps;
    this.module = { exports: {} };
    this.callback = callback;
    this.hasExportsAsDep = false;
    this.isAlias = alias;
    this.reified = new Array(deps.length);

    /*
       Each module normally passes through these states, in order:
         new       : initial state
         pending   : this module is scheduled to be executed
         reifying  : this module's dependencies are being executed
         reified   : this module's dependencies finished executing successfully
         errored   : this module's dependencies failed to execute
         finalized : this module executed successfully
     */
    this.state = 'new';
  }

  Module.prototype.makeDefaultExport = function () {
    var exports = this.module.exports;
    if (
      exports !== null &&
      (typeof exports === 'object' || typeof exports === 'function') &&
      exports['default'] === undefined &&
      Object.isExtensible(exports)
    ) {
      exports['default'] = exports;
    }
  };

  Module.prototype.exports = function () {
    // if finalized, there is no work to do. If reifying, there is a
    // circular dependency so we must return our (partial) exports.
    if (this.state === 'finalized' || this.state === 'reifying') {
      return this.module.exports;
    }

    if (loader.wrapModules) {
      this.callback = loader.wrapModules(this.id, this.callback);
    }

    this.reify();

    var result = this.callback.apply(this, this.reified);
    this.reified.length = 0;
    this.state = 'finalized';

    if (!(this.hasExportsAsDep && result === undefined)) {
      this.module.exports = result;
    }
    if (loader.makeDefaultExport) {
      this.makeDefaultExport();
    }
    return this.module.exports;
  };

  Module.prototype.unsee = function () {
    this.state = 'new';
    this.module = { exports: {} };
  };

  Module.prototype.reify = function () {
    if (this.state === 'reified') {
      return;
    }
    this.state = 'reifying';
    try {
      this.reified = this._reify();
      this.state = 'reified';
    } finally {
      if (this.state === 'reifying') {
        this.state = 'errored';
      }
    }
  };

  Module.prototype._reify = function () {
    var reified = this.reified.slice();
    for (var i = 0; i < reified.length; i++) {
      var mod = reified[i];
      reified[i] = mod.exports ? mod.exports : mod.module.exports();
    }
    return reified;
  };

  Module.prototype.findDeps = function (pending) {
    if (this.state !== 'new') {
      return;
    }

    this.state = 'pending';

    var deps = this.deps;

    for (var i = 0; i < deps.length; i++) {
      var dep = deps[i];
      var entry = (this.reified[i] = { exports: undefined, module: undefined });
      if (dep === 'exports') {
        this.hasExportsAsDep = true;
        entry.exports = this.module.exports;
      } else if (dep === 'require') {
        entry.exports = this.makeRequire();
      } else if (dep === 'module') {
        entry.exports = this.module;
      } else {
        entry.module = findModule(resolve(dep, this.id), this.id, pending);
      }
    }
  };

  Module.prototype.makeRequire = function () {
    var id = this.id;
    var r = function (dep) {
      return require(resolve(dep, id));
    };
    r['default'] = r;
    r.moduleId = id;
    r.has = function (dep) {
      return has(resolve(dep, id));
    };
    return r;
  };

  define = function (id, deps, callback) {
    var module = registry[id];

    // If a module for this id has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    if (arguments.length < 2) {
      unsupportedModule(arguments.length);
    }

    if (!Array.isArray(deps)) {
      callback = deps;
      deps = [];
    }

    if (callback instanceof Alias) {
      registry[id] = new Module(callback.id, deps, callback, true);
    } else {
      registry[id] = new Module(id, deps, callback, false);
    }
  };

  define.exports = function (name, defaultExport) {
    var module = registry[name];

    // If a module for this name has already been defined and is in any state
    // other than `new` (meaning it has been or is currently being required),
    // then we return early to avoid redefinition.
    if (module && module.state !== 'new') {
      return;
    }

    module = new Module(name, [], noop, null);
    module.module.exports = defaultExport;
    module.state = 'finalized';
    registry[name] = module;

    return module;
  };

  function noop() {}
  // we don't support all of AMD
  // define.amd = {};

  function Alias(id) {
    this.id = id;
  }

  define.alias = function (id, target) {
    if (arguments.length === 2) {
      return define(target, new Alias(id));
    }

    return new Alias(id);
  };

  function missingModule(id, referrer) {
    throw new Error(
      'Could not find module `' + id + '` imported from `' + referrer + '`',
    );
  }

  function findModule(id, referrer, pending) {
    var mod = registry[id] || registry[id + '/index'];

    while (mod && mod.isAlias) {
      mod = registry[mod.id] || registry[mod.id + '/index'];
    }

    if (!mod) {
      missingModule(id, referrer);
    }

    if (pending && mod.state !== 'pending' && mod.state !== 'finalized') {
      mod.findDeps(pending);
      pending.push(mod);
    }
    return mod;
  }

  function resolve(child, id) {
    if (child.charAt(0) !== '.') {
      return child;
    }

    var parts = child.split('/');
    var nameParts = id.split('/');
    var parentBase = nameParts.slice(0, -1);

    for (var i = 0, l = parts.length; i < l; i++) {
      var part = parts[i];

      if (part === '..') {
        if (parentBase.length === 0) {
          throw new Error('Cannot access parent module of root');
        }
        parentBase.pop();
      } else if (part === '.') {
        continue;
      } else {
        parentBase.push(part);
      }
    }

    return parentBase.join('/');
  }

  function has(id) {
    return !!(registry[id] || registry[id + '/index']);
  }

  requirejs.entries = requirejs._eak_seen = registry;
  requirejs.has = has;
  requirejs.unsee = function (id) {
    findModule(id, '(unsee)', false).unsee();
  };

  requirejs.clear = function () {
    requirejs.entries = requirejs._eak_seen = registry = dict();
    seen = dict();
  };

  // This code primes the JS engine for good performance by warming the
  // JIT compiler for these functions.
  define('foo', function () {});
  define('foo/bar', [], function () {});
  define('foo/asdf', ['module', 'exports', 'require'], function (
    module,
    exports,
    require,
  ) {
    if (require.has('foo/bar')) {
      require('foo/bar');
    }
  });
  define('foo/baz', [], define.alias('foo'));
  define('foo/quz', define.alias('foo'));
  define.alias('foo', 'foo/qux');
  define('foo/bar', [
    'foo',
    './quz',
    './baz',
    './asdf',
    './bar',
    '../foo',
  ], function () {});
  define('foo/main', ['foo/bar'], function () {});
  define.exports('foo/exports', {});

  require('foo/exports');
  require('foo/main');
  require.unsee('foo/bar');

  requirejs.clear();

  if (
    typeof exports === 'object' &&
    typeof module === 'object' &&
    module.exports
  ) {
    module.exports = { require: require, define: define };
  }
})(this);
/*!
 * jQuery JavaScript Library v3.6.3
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2022-12-20T21:28Z
 */
(function (global, factory) {
  'use strict';

  if (typeof module === 'object' && typeof module.exports === 'object') {
    // For CommonJS and CommonJS-like environments where a proper `window`
    // is present, execute the factory and get jQuery.
    // For environments that do not have a `window` with a `document`
    // (such as Node.js), expose a factory as module.exports.
    // This accentuates the need for the creation of a real `window`.
    // e.g. var jQuery = require("jquery")(window);
    // See ticket trac-14549 for more info.
    module.exports = global.document
      ? factory(global, true)
      : function (w) {
          if (!w.document) {
            throw new Error('jQuery requires a window with a document');
          }
          return factory(w);
        };
  } else {
    factory(global);
  }

  // Pass this if window is not defined yet
})(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
  // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
  // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
  // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
  // enough that all such attempts are guarded in a try block.
  'use strict';

  var arr = [];

  var getProto = Object.getPrototypeOf;

  var slice = arr.slice;

  var flat = arr.flat
    ? function (array) {
        return arr.flat.call(array);
      }
    : function (array) {
        return arr.concat.apply([], array);
      };

  var push = arr.push;

  var indexOf = arr.indexOf;

  var class2type = {};

  var toString = class2type.toString;

  var hasOwn = class2type.hasOwnProperty;

  var fnToString = hasOwn.toString;

  var ObjectFunctionString = fnToString.call(Object);

  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    // Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
    // Plus for old WebKit, typeof returns "function" for HTML collections
    // (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
    return (
      typeof obj === 'function' &&
      typeof obj.nodeType !== 'number' &&
      typeof obj.item !== 'function'
    );
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var document = window.document;

  var preservedScriptAttributes = {
    type: true,
    src: true,
    nonce: true,
    noModule: true,
  };

  function DOMEval(code, node, doc) {
    doc = doc || document;

    var i,
      val,
      script = doc.createElement('script');

    script.text = code;
    if (node) {
      for (i in preservedScriptAttributes) {
        // Support: Firefox 64+, Edge 18+
        // Some browsers don't support the "nonce" property on scripts.
        // On the other hand, just using `getAttribute` is not enough as
        // the `nonce` attribute is reset to an empty string whenever it
        // becomes browsing-context connected.
        // See https://github.com/whatwg/html/issues/2369
        // See https://html.spec.whatwg.org/#nonce-attributes
        // The `node.getAttribute` check was added for the sake of
        // `jQuery.globalEval` so that it can fake a nonce-containing node
        // via an object.
        val = node[i] || (node.getAttribute && node.getAttribute(i));
        if (val) {
          script.setAttribute(i, val);
        }
      }
    }
    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + '';
    }

    // Support: Android <=2.3 only (functionish RegExp)
    return typeof obj === 'object' || typeof obj === 'function'
      ? class2type[toString.call(obj)] || 'object'
      : typeof obj;
  }
  /* global Symbol */
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module

  var version = '3.6.3',
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    };

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,

    constructor: jQuery,

    // The default length of a jQuery object is 0
    length: 0,

    toArray: function () {
      return slice.call(this);
    },

    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function (num) {
      // Return all the elements in a clean array
      if (num == null) {
        return slice.call(this);
      }

      // Return just the one element from the set
      return num < 0 ? this[num + this.length] : this[num];
    },

    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);

      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;

      // Return the newly-formed element set
      return ret;
    },

    // Execute a callback for every element in the matched set.
    each: function (callback) {
      return jQuery.each(this, callback);
    },

    map: function (callback) {
      return this.pushStack(
        jQuery.map(this, function (elem, i) {
          return callback.call(elem, i, elem);
        }),
      );
    },

    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },

    first: function () {
      return this.eq(0);
    },

    last: function () {
      return this.eq(-1);
    },

    even: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return (i + 1) % 2;
        }),
      );
    },

    odd: function () {
      return this.pushStack(
        jQuery.grep(this, function (_elem, i) {
          return i % 2;
        }),
      );
    },

    eq: function (i) {
      var len = this.length,
        j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },

    end: function () {
      return this.prevObject || this.constructor();
    },

    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice,
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;

      // Skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !isFunction(target)) {
      target = {};
    }

    // Extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          copy = options[name];

          // Prevent Object.prototype pollution
          // Prevent never-ending loop
          if (name === '__proto__' || target === copy) {
            continue;
          }

          // Recurse if we're merging plain objects or arrays
          if (
            deep &&
            copy &&
            (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))
          ) {
            src = target[name];

            // Ensure proper type for the source value
            if (copyIsArray && !Array.isArray(src)) {
              clone = [];
            } else if (!copyIsArray && !jQuery.isPlainObject(src)) {
              clone = {};
            } else {
              clone = src;
            }
            copyIsArray = false;

            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);

            // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }

    // Return the modified object
    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),

    // Assume jQuery is ready without the ready module
    isReady: true,

    error: function (msg) {
      throw new Error(msg);
    },

    noop: function () {},

    isPlainObject: function (obj) {
      var proto, Ctor;

      // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects
      if (!obj || toString.call(obj) !== '[object Object]') {
        return false;
      }

      proto = getProto(obj);

      // Objects with no prototype (e.g., `Object.create( null )`) are plain
      if (!proto) {
        return true;
      }

      // Objects with prototype are plain iff they were constructed by a global Object function
      Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
      return (
        typeof Ctor === 'function' &&
        fnToString.call(Ctor) === ObjectFunctionString
      );
    },

    isEmptyObject: function (obj) {
      var name;

      for (name in obj) {
        return false;
      }
      return true;
    },

    // Evaluates a script in a provided context; falls back to the global one
    // if not specified.
    globalEval: function (code, options, doc) {
      DOMEval(code, { nonce: options && options.nonce }, doc);
    },

    each: function (obj, callback) {
      var length,
        i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;
        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },

    // results is for internal usage only
    makeArray: function (arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },

    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },

    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function (first, second) {
      var len = +second.length,
        j = 0,
        i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;

      return first;
    },

    grep: function (elems, callback, invert) {
      var callbackInverse,
        matches = [],
        i = 0,
        length = elems.length,
        callbackExpect = !invert;

      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },

    // arg is for internal usage only
    map: function (elems, callback, arg) {
      var length,
        value,
        i = 0,
        ret = [];

      // Go through the array, translating each of the items to their new values
      if (isArrayLike(elems)) {
        length = elems.length;
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }

        // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      }

      // Flatten any nested arrays
      return flat(ret);
    },

    // A global GUID counter for objects
    guid: 1,

    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support,
  });

  if (typeof Symbol === 'function') {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  }

  // Populate the class2type map
  jQuery.each(
    'Boolean Number String Function Array Date RegExp Object Error Symbol'.split(
      ' ',
    ),
    function (_i, name) {
      class2type['[object ' + name + ']'] = name.toLowerCase();
    },
  );

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && 'length' in obj && obj.length,
      type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return (
      type === 'array' ||
      length === 0 ||
      (typeof length === 'number' && length > 0 && length - 1 in obj)
    );
  }
  var Sizzle =
    /*!
     * Sizzle CSS Selector Engine v2.3.9
     * https://sizzlejs.com/
     *
     * Copyright JS Foundation and other contributors
     * Released under the MIT license
     * https://js.foundation/
     *
     * Date: 2022-12-19
     */
    (function (window) {
      var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
        setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
        expando = 'sizzle' + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        nonnativeSelectorCache = createCache(),
        sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // Instance methods
        hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        pushNative = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
        // https://jsperf.com/thor-indexof-vs-for/5
        indexOf = function (list, elem) {
          var i = 0,
            len = list.length;
          for (; i < len; i++) {
            if (list[i] === elem) {
              return i;
            }
          }
          return -1;
        },
        booleans =
          'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|' +
          'ismap|loop|multiple|open|readonly|required|scoped',
        // Regular expressions

        // http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = '[\\x20\\t\\r\\n\\f]',
        // https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
        identifier =
          '(?:\\\\[\\da-fA-F]{1,6}' +
          whitespace +
          '?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+',
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes =
          '\\[' +
          whitespace +
          '*(' +
          identifier +
          ')(?:' +
          whitespace +
          // Operator (capture 2)
          '*([*^$|!~]?=)' +
          whitespace +
          // "Attribute values must be CSS identifiers [capture 5]
          // or strings [capture 3 or capture 4]"
          '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' +
          identifier +
          '))|)' +
          whitespace +
          '*\\]',
        pseudos =
          ':(' +
          identifier +
          ')(?:\\((' +
          // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
          // 1. quoted (capture 3; capture 4 or capture 5)
          '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' +
          // 2. simple (capture 6)
          '((?:\\\\.|[^\\\\()[\\]]|' +
          attributes +
          ')*)|' +
          // 3. anything else (capture 2)
          '.*' +
          ')\\)|)',
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rwhitespace = new RegExp(whitespace + '+', 'g'),
        rtrim = new RegExp(
          '^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$',
          'g',
        ),
        rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'),
        rcombinators = new RegExp(
          '^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*',
        ),
        rdescend = new RegExp(whitespace + '|>'),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp('^' + identifier + '$'),
        matchExpr = {
          ID: new RegExp('^#(' + identifier + ')'),
          CLASS: new RegExp('^\\.(' + identifier + ')'),
          TAG: new RegExp('^(' + identifier + '|[*])'),
          ATTR: new RegExp('^' + attributes),
          PSEUDO: new RegExp('^' + pseudos),
          CHILD: new RegExp(
            '^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' +
              whitespace +
              '*(even|odd|(([+-]|)(\\d*)n|)' +
              whitespace +
              '*(?:([+-]|)' +
              whitespace +
              '*(\\d+)|))' +
              whitespace +
              '*\\)|)',
            'i',
          ),
          bool: new RegExp('^(?:' + booleans + ')$', 'i'),

          // For use in libraries implementing .is()
          // We use this for POS matching in `select`
          needsContext: new RegExp(
            '^' +
              whitespace +
              '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' +
              whitespace +
              '*((?:-\\d)?\\d*)' +
              whitespace +
              '*\\)|)(?=[^-]|$)',
            'i',
          ),
        },
        rhtml = /HTML$/i,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
        // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp(
          '\\\\[\\da-fA-F]{1,6}' + whitespace + '?|\\\\([^\\r\\n\\f])',
          'g',
        ),
        funescape = function (escape, nonHex) {
          var high = '0x' + escape.slice(1) - 0x10000;

          return nonHex
            ? // Strip the backslash prefix from a non-hex escape sequence
              nonHex
            : // Replace a hexadecimal escape sequence with the encoded Unicode code point
            // Support: IE <=11+
            // For values outside the Basic Multilingual Plane (BMP), manually construct a
            // surrogate pair
            high < 0
            ? String.fromCharCode(high + 0x10000)
            : String.fromCharCode(
                (high >> 10) | 0xd800,
                (high & 0x3ff) | 0xdc00,
              );
        },
        // CSS string/identifier serialization
        // https://drafts.csswg.org/cssom/#common-serializing-idioms
        rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function (ch, asCodePoint) {
          if (asCodePoint) {
            // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
            if (ch === '\0') {
              return '\uFFFD';
            }

            // Control characters and (dependent upon position) numbers get escaped as code points
            return (
              ch.slice(0, -1) +
              '\\' +
              ch.charCodeAt(ch.length - 1).toString(16) +
              ' '
            );
          }

          // Other potentially-special ASCII characters get backslash-escaped
          return '\\' + ch;
        },
        // Used for iframes
        // See setDocument()
        // Removing the function wrapper causes a "Permission Denied"
        // error in IE
        unloadHandler = function () {
          setDocument();
        },
        inDisabledFieldset = addCombinator(
          function (elem) {
            return (
              elem.disabled === true &&
              elem.nodeName.toLowerCase() === 'fieldset'
            );
          },
          { dir: 'parentNode', next: 'legend' },
        );

      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(
          (arr = slice.call(preferredDoc.childNodes)),
          preferredDoc.childNodes,
        );

        // Support: Android<4.0
        // Detect silently failing push.apply
        // eslint-disable-next-line no-unused-expressions
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length
            ? // Leverage slice if possible
              function (target, els) {
                pushNative.apply(target, slice.call(els));
              }
            : // Support: IE<9
              // Otherwise append directly
              function (target, els) {
                var j = target.length,
                  i = 0;

                // Can't trust NodeList.length
                while ((target[j++] = els[i++])) {}
                target.length = j - 1;
              },
        };
      }

      function Sizzle(selector, context, results, seed) {
        var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
          nodeType = context ? context.nodeType : 9;

        results = results || [];

        // Return early from calls with invalid selector or context
        if (
          typeof selector !== 'string' ||
          !selector ||
          (nodeType !== 1 && nodeType !== 9 && nodeType !== 11)
        ) {
          return results;
        }

        // Try to shortcut find operations (as opposed to filters) in HTML documents
        if (!seed) {
          setDocument(context);
          context = context || document;

          if (documentIsHTML) {
            // If the selector is sufficiently simple, try using a "get*By*" DOM method
            // (excepting DocumentFragment context, where the methods don't exist)
            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
              // ID selector
              if ((m = match[1])) {
                // Document context
                if (nodeType === 9) {
                  if ((elem = context.getElementById(m))) {
                    // Support: IE, Opera, Webkit
                    // TODO: identify versions
                    // getElementById can match elements by name instead of ID
                    if (elem.id === m) {
                      results.push(elem);
                      return results;
                    }
                  } else {
                    return results;
                  }

                  // Element context
                } else {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (
                    newContext &&
                    (elem = newContext.getElementById(m)) &&
                    contains(context, elem) &&
                    elem.id === m
                  ) {
                    results.push(elem);
                    return results;
                  }
                }

                // Type selector
              } else if (match[2]) {
                push.apply(results, context.getElementsByTagName(selector));
                return results;

                // Class selector
              } else if (
                (m = match[3]) &&
                support.getElementsByClassName &&
                context.getElementsByClassName
              ) {
                push.apply(results, context.getElementsByClassName(m));
                return results;
              }
            }

            // Take advantage of querySelectorAll
            if (
              support.qsa &&
              !nonnativeSelectorCache[selector + ' '] &&
              (!rbuggyQSA || !rbuggyQSA.test(selector)) &&
              // Support: IE 8 only
              // Exclude object elements
              (nodeType !== 1 || context.nodeName.toLowerCase() !== 'object')
            ) {
              newSelector = selector;
              newContext = context;

              // qSA considers elements outside a scoping root when evaluating child or
              // descendant combinators, which is not what we want.
              // In such cases, we work around the behavior by prefixing every selector in the
              // list with an ID selector referencing the scope context.
              // The technique has to be used as well when a leading combinator is used
              // as such selectors are not recognized by querySelectorAll.
              // Thanks to Andrew Dupont for this technique.
              if (
                nodeType === 1 &&
                (rdescend.test(selector) || rcombinators.test(selector))
              ) {
                // Expand context for sibling selectors
                newContext =
                  (rsibling.test(selector) &&
                    testContext(context.parentNode)) ||
                  context;

                // We can use :scope instead of the ID hack if the browser
                // supports it & if we're not changing the context.
                if (newContext !== context || !support.scope) {
                  // Capture the context ID, setting it first if necessary
                  if ((nid = context.getAttribute('id'))) {
                    nid = nid.replace(rcssescape, fcssescape);
                  } else {
                    context.setAttribute('id', (nid = expando));
                  }
                }

                // Prefix every selector in the list
                groups = tokenize(selector);
                i = groups.length;
                while (i--) {
                  groups[i] =
                    (nid ? '#' + nid : ':scope') + ' ' + toSelector(groups[i]);
                }
                newSelector = groups.join(',');
              }

              try {
                // `qSA` may not throw for unrecognized parts using forgiving parsing:
                // https://drafts.csswg.org/selectors/#forgiving-selector
                // like the `:has()` pseudo-class:
                // https://drafts.csswg.org/selectors/#relational
                // `CSS.supports` is still expected to return `false` then:
                // https://drafts.csswg.org/css-conditional-4/#typedef-supports-selector-fn
                // https://drafts.csswg.org/css-conditional-4/#dfn-support-selector
                if (
                  support.cssSupportsSelector &&
                  // eslint-disable-next-line no-undef
                  !CSS.supports('selector(:is(' + newSelector + '))')
                ) {
                  // Support: IE 11+
                  // Throw to get to the same code path as an error directly in qSA.
                  // Note: once we only support browser supporting
                  // `CSS.supports('selector(...)')`, we can most likely drop
                  // the `try-catch`. IE doesn't implement the API.
                  throw new Error();
                }

                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
                nonnativeSelectorCache(selector, true);
              } finally {
                if (nid === expando) {
                  context.removeAttribute('id');
                }
              }
            }
          }
        }

        // All others
        return select(selector.replace(rtrim, '$1'), context, results, seed);
      }

      /**
       * Create key-value caches of limited size
       * @returns {function(string, object)} Returns the Object data after storing it on itself with
       *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
       *	deleting the oldest entry
       */
      function createCache() {
        var keys = [];

        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + ' ') > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return (cache[key + ' '] = value);
        }
        return cache;
      }

      /**
       * Mark a function for special use by Sizzle
       * @param {Function} fn The function to mark
       */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }

      /**
       * Support testing using an element
       * @param {Function} fn Passed the created element and returns a boolean result
       */
      function assert(fn) {
        var el = document.createElement('fieldset');

        try {
          return !!fn(el);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (el.parentNode) {
            el.parentNode.removeChild(el);
          }

          // release memory in IE
          el = null;
        }
      }

      /**
       * Adds the same handler for all of the specified attrs
       * @param {String} attrs Pipe-separated list of attributes
       * @param {Function} handler The method that will be applied
       */
      function addHandle(attrs, handler) {
        var arr = attrs.split('|'),
          i = arr.length;

        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }

      /**
       * Checks document order of two siblings
       * @param {Element} a
       * @param {Element} b
       * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
       */
      function siblingCheck(a, b) {
        var cur = b && a,
          diff =
            cur &&
            a.nodeType === 1 &&
            b.nodeType === 1 &&
            a.sourceIndex - b.sourceIndex;

        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }

        // Check if b follows a
        if (cur) {
          while ((cur = cur.nextSibling)) {
            if (cur === b) {
              return -1;
            }
          }
        }

        return a ? 1 : -1;
      }

      /**
       * Returns a function to use in pseudos for input types
       * @param {String} type
       */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for buttons
       * @param {String} type
       */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === 'input' || name === 'button') && elem.type === type;
        };
      }

      /**
       * Returns a function to use in pseudos for :enabled/:disabled
       * @param {Boolean} disabled true for :disabled; false for :enabled
       */
      function createDisabledPseudo(disabled) {
        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
        return function (elem) {
          // Only certain elements can match :enabled or :disabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
          // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
          if ('form' in elem) {
            // Check for inherited disabledness on relevant non-disabled elements:
            // * listed form-associated elements in a disabled fieldset
            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
            // * option elements in a disabled optgroup
            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
            // All such elements have a "form" property.
            if (elem.parentNode && elem.disabled === false) {
              // Option elements defer to a parent optgroup if present
              if ('label' in elem) {
                if ('label' in elem.parentNode) {
                  return elem.parentNode.disabled === disabled;
                } else {
                  return elem.disabled === disabled;
                }
              }

              // Support: IE 6 - 11
              // Use the isDisabled shortcut property to check for disabled fieldset ancestors
              return (
                elem.isDisabled === disabled ||
                // Where there is no isDisabled, check manually
                /* jshint -W018 */
                (elem.isDisabled !== !disabled &&
                  inDisabledFieldset(elem) === disabled)
              );
            }

            return elem.disabled === disabled;

            // Try to winnow out elements that can't be disabled before trusting the disabled property.
            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
            // even exist on them, let alone have a boolean value.
          } else if ('label' in elem) {
            return elem.disabled === disabled;
          }

          // Remaining elements are neither :enabled nor :disabled
          return false;
        };
      }

      /**
       * Returns a function to use in pseudos for positionals
       * @param {Function} fn
       */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length;

            // Match elements found at the specified indexes
            while (i--) {
              if (seed[(j = matchIndexes[i])]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }

      /**
       * Checks a node for validity as a Sizzle context
       * @param {Element|Object=} context
       * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
       */
      function testContext(context) {
        return (
          context &&
          typeof context.getElementsByTagName !== 'undefined' &&
          context
        );
      }

      // Expose support vars for convenience
      support = Sizzle.support = {};

      /**
       * Detects XML nodes
       * @param {Element|Object} elem An element or a document
       * @returns {Boolean} True iff elem is a non-HTML XML node
       */
      isXML = Sizzle.isXML = function (elem) {
        var namespace = elem && elem.namespaceURI,
          docElem = elem && (elem.ownerDocument || elem).documentElement;

        // Support: IE <=8
        // Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
        // https://bugs.jquery.com/ticket/4833
        return !rhtml.test(
          namespace || (docElem && docElem.nodeName) || 'HTML',
        );
      };

      /**
       * Sets document-related variables once based on the current document
       * @param {Element|Object} [doc] An element or document object to use to set the document
       * @returns {Object} Returns the current document
       */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc;

        // Return early if doc is invalid or already selected
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (doc == document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }

        // Update global variables
        document = doc;
        docElem = document.documentElement;
        documentIsHTML = !isXML(document);

        // Support: IE 9 - 11+, Edge 12 - 18+
        // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if (
          preferredDoc != document &&
          (subWindow = document.defaultView) &&
          subWindow.top !== subWindow
        ) {
          // Support: IE 11, Edge
          if (subWindow.addEventListener) {
            subWindow.addEventListener('unload', unloadHandler, false);

            // Support: IE 9 - 10 only
          } else if (subWindow.attachEvent) {
            subWindow.attachEvent('onunload', unloadHandler);
          }
        }

        // Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
        // Safari 4 - 5 only, Opera <=11.6 - 12.x only
        // IE/Edge & older browsers don't support the :scope pseudo-class.
        // Support: Safari 6.0 only
        // Safari 6.0 supports :scope but it's an alias of :root there.
        support.scope = assert(function (el) {
          docElem.appendChild(el).appendChild(document.createElement('div'));
          return (
            typeof el.querySelectorAll !== 'undefined' &&
            !el.querySelectorAll(':scope fieldset div').length
          );
        });

        // Support: Chrome 105+, Firefox 104+, Safari 15.4+
        // Make sure forgiving mode is not used in `CSS.supports( "selector(...)" )`.
        //
        // `:is()` uses a forgiving selector list as an argument and is widely
        // implemented, so it's a good one to test against.
        support.cssSupportsSelector = assert(function () {
          /* eslint-disable no-undef */

          return (
            CSS.supports('selector(*)') &&
            // Support: Firefox 78-81 only
            // In old Firefox, `:is()` didn't use forgiving parsing. In that case,
            // fail this test as there's no selector to test against that.
            // `CSS.supports` uses unforgiving parsing
            document.querySelectorAll(':is(:jqfake)') &&
            // `*` is needed as Safari & newer Chrome implemented something in between
            // for `:has()` - it throws in `qSA` if it only contains an unsupported
            // argument but multiple ones, one of which is supported, are fine.
            // We want to play safe in case `:is()` gets the same treatment.
            !CSS.supports('selector(:is(*,:jqfake))')
          );

          /* eslint-enable */
        });

        /* Attributes
	---------------------------------------------------------------------- */

        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties
        // (excepting IE8 booleans)
        support.attributes = assert(function (el) {
          el.className = 'i';
          return !el.getAttribute('className');
        });

        /* getElement(s)By*
	---------------------------------------------------------------------- */

        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (el) {
          el.appendChild(document.createComment(''));
          return !el.getElementsByTagName('*').length;
        });

        // Support: IE<9
        support.getElementsByClassName = rnative.test(
          document.getElementsByClassName,
        );

        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programmatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (el) {
          docElem.appendChild(el).id = expando;
          return (
            !document.getElementsByName ||
            !document.getElementsByName(expando).length
          );
        });

        // ID filter and find
        if (support.getById) {
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute('id') === attrId;
            };
          };
          Expr.find['ID'] = function (id, context) {
            if (
              typeof context.getElementById !== 'undefined' &&
              documentIsHTML
            ) {
              var elem = context.getElementById(id);
              return elem ? [elem] : [];
            }
          };
        } else {
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node =
                typeof elem.getAttributeNode !== 'undefined' &&
                elem.getAttributeNode('id');
              return node && node.value === attrId;
            };
          };

          // Support: IE 6 - 7 only
          // getElementById is not reliable as a find shortcut
          Expr.find['ID'] = function (id, context) {
            if (
              typeof context.getElementById !== 'undefined' &&
              documentIsHTML
            ) {
              var node,
                i,
                elems,
                elem = context.getElementById(id);

              if (elem) {
                // Verify the id attribute
                node = elem.getAttributeNode('id');
                if (node && node.value === id) {
                  return [elem];
                }

                // Fall back on getElementsByName
                elems = context.getElementsByName(id);
                i = 0;
                while ((elem = elems[i++])) {
                  node = elem.getAttributeNode('id');
                  if (node && node.value === id) {
                    return [elem];
                  }
                }
              }

              return [];
            }
          };
        }

        // Tag
        Expr.find['TAG'] = support.getElementsByTagName
          ? function (tag, context) {
              if (typeof context.getElementsByTagName !== 'undefined') {
                return context.getElementsByTagName(tag);

                // DocumentFragment nodes don't have gEBTN
              } else if (support.qsa) {
                return context.querySelectorAll(tag);
              }
            }
          : function (tag, context) {
              var elem,
                tmp = [],
                i = 0,
                // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                results = context.getElementsByTagName(tag);

              // Filter out possible comments
              if (tag === '*') {
                while ((elem = results[i++])) {
                  if (elem.nodeType === 1) {
                    tmp.push(elem);
                  }
                }

                return tmp;
              }
              return results;
            };

        // Class
        Expr.find['CLASS'] =
          support.getElementsByClassName &&
          function (className, context) {
            if (
              typeof context.getElementsByClassName !== 'undefined' &&
              documentIsHTML
            ) {
              return context.getElementsByClassName(className);
            }
          };

        /* QSA/matchesSelector
	---------------------------------------------------------------------- */

        // QSA and matchesSelector support

        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];

        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See https://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];

        if ((support.qsa = rnative.test(document.querySelectorAll))) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (el) {
            var input;

            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // https://bugs.jquery.com/ticket/12359
            docElem.appendChild(el).innerHTML =
              "<a id='" +
              expando +
              "'></a>" +
              "<select id='" +
              expando +
              "-\r\\' msallowcapture=''>" +
              "<option selected=''></option></select>";

            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (el.querySelectorAll("[msallowcapture^='']").length) {
              rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
            }

            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!el.querySelectorAll('[selected]').length) {
              rbuggyQSA.push(
                '\\[' + whitespace + '*(?:value|' + booleans + ')',
              );
            }

            // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
            if (!el.querySelectorAll('[id~=' + expando + '-]').length) {
              rbuggyQSA.push('~=');
            }

            // Support: IE 11+, Edge 15 - 18+
            // IE 11/Edge don't find elements on a `[name='']` query in some cases.
            // Adding a temporary attribute to the document before the selection works
            // around the issue.
            // Interestingly, IE 10 & older don't seem to have the issue.
            input = document.createElement('input');
            input.setAttribute('name', '');
            el.appendChild(input);
            if (!el.querySelectorAll("[name='']").length) {
              rbuggyQSA.push(
                '\\[' +
                  whitespace +
                  '*name' +
                  whitespace +
                  '*=' +
                  whitespace +
                  '*(?:\'\'|"")',
              );
            }

            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!el.querySelectorAll(':checked').length) {
              rbuggyQSA.push(':checked');
            }

            // Support: Safari 8+, iOS 8+
            // https://bugs.webkit.org/show_bug.cgi?id=136851
            // In-page `selector#id sibling-combinator selector` fails
            if (!el.querySelectorAll('a#' + expando + '+*').length) {
              rbuggyQSA.push('.#.+[+~]');
            }

            // Support: Firefox <=3.6 - 5 only
            // Old Firefox doesn't throw on a badly-escaped identifier.
            el.querySelectorAll('\\\f');
            rbuggyQSA.push('[\\r\\n\\f]');
          });

          assert(function (el) {
            el.innerHTML =
              "<a href='' disabled='disabled'></a>" +
              "<select disabled='disabled'><option/></select>";

            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = document.createElement('input');
            input.setAttribute('type', 'hidden');
            el.appendChild(input).setAttribute('name', 'D');

            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (el.querySelectorAll('[name=d]').length) {
              rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
            }

            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (el.querySelectorAll(':enabled').length !== 2) {
              rbuggyQSA.push(':enabled', ':disabled');
            }

            // Support: IE9-11+
            // IE's :disabled selector does not pick up the children of disabled fieldsets
            docElem.appendChild(el).disabled = true;
            if (el.querySelectorAll(':disabled').length !== 2) {
              rbuggyQSA.push(':enabled', ':disabled');
            }

            // Support: Opera 10 - 11 only
            // Opera 10-11 does not throw on post-comma invalid pseudos
            el.querySelectorAll('*,:x');
            rbuggyQSA.push(',.*:');
          });
        }

        if (
          (support.matchesSelector = rnative.test(
            (matches =
              docElem.matches ||
              docElem.webkitMatchesSelector ||
              docElem.mozMatchesSelector ||
              docElem.oMatchesSelector ||
              docElem.msMatchesSelector),
          ))
        ) {
          assert(function (el) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(el, '*');

            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(el, "[s!='']:x");
            rbuggyMatches.push('!=', pseudos);
          });
        }

        if (!support.cssSupportsSelector) {
          // Support: Chrome 105+, Safari 15.4+
          // `:has()` uses a forgiving selector list as an argument so our regular
          // `try-catch` mechanism fails to catch `:has()` with arguments not supported
          // natively like `:has(:contains("Foo"))`. Where supported & spec-compliant,
          // we now use `CSS.supports("selector(:is(SELECTOR_TO_BE_TESTED))")`, but
          // outside that we mark `:has` as buggy.
          rbuggyQSA.push(':has');
        }

        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
        rbuggyMatches =
          rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));

        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);

        // Element contains another
        // Purposefully self-exclusive
        // As in, an element does not contain itself
        contains =
          hasCompare || rnative.test(docElem.contains)
            ? function (a, b) {
                // Support: IE <9 only
                // IE doesn't have `contains` on `document` so we need to check for
                // `documentElement` presence.
                // We need to fall back to `a` when `documentElement` is missing
                // as `ownerDocument` of elements within `<template/>` may have
                // a null one - a default behavior of all modern browsers.
                var adown = (a.nodeType === 9 && a.documentElement) || a,
                  bup = b && b.parentNode;
                return (
                  a === bup ||
                  !!(
                    bup &&
                    bup.nodeType === 1 &&
                    (adown.contains
                      ? adown.contains(bup)
                      : a.compareDocumentPosition &&
                        a.compareDocumentPosition(bup) & 16)
                  )
                );
              }
            : function (a, b) {
                if (b) {
                  while ((b = b.parentNode)) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };

        /* Sorting
	---------------------------------------------------------------------- */

        // Document order sorting
        sortOrder = hasCompare
          ? function (a, b) {
              // Flag for duplicate removal
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              // Sort on method existence if only one input has compareDocumentPosition
              var compare =
                !a.compareDocumentPosition - !b.compareDocumentPosition;
              if (compare) {
                return compare;
              }

              // Calculate position if both inputs belong to the same document
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              compare =
                (a.ownerDocument || a) == (b.ownerDocument || b)
                  ? a.compareDocumentPosition(b)
                  : // Otherwise we know they are disconnected
                    1;

              // Disconnected nodes
              if (
                compare & 1 ||
                (!support.sortDetached &&
                  b.compareDocumentPosition(a) === compare)
              ) {
                // Choose the first element that is related to our preferred document
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  a == document ||
                  (a.ownerDocument == preferredDoc && contains(preferredDoc, a))
                ) {
                  return -1;
                }

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (
                  b == document ||
                  (b.ownerDocument == preferredDoc && contains(preferredDoc, b))
                ) {
                  return 1;
                }

                // Maintain original order
                return sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;
              }

              return compare & 4 ? -1 : 1;
            }
          : function (a, b) {
              // Exit early if the nodes are identical
              if (a === b) {
                hasDuplicate = true;
                return 0;
              }

              var cur,
                i = 0,
                aup = a.parentNode,
                bup = b.parentNode,
                ap = [a],
                bp = [b];

              // Parentless nodes are either documents or disconnected
              if (!aup || !bup) {
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                return a == document
                  ? -1
                  : b == document
                  ? 1
                  : /* eslint-enable eqeqeq */
                  aup
                  ? -1
                  : bup
                  ? 1
                  : sortInput
                  ? indexOf(sortInput, a) - indexOf(sortInput, b)
                  : 0;

                // If the nodes are siblings, we can do a quick check
              } else if (aup === bup) {
                return siblingCheck(a, b);
              }

              // Otherwise we need full lists of their ancestors for comparison
              cur = a;
              while ((cur = cur.parentNode)) {
                ap.unshift(cur);
              }
              cur = b;
              while ((cur = cur.parentNode)) {
                bp.unshift(cur);
              }

              // Walk down the tree looking for a discrepancy
              while (ap[i] === bp[i]) {
                i++;
              }

              return i
                ? // Do a sibling check if the nodes have a common ancestor
                  siblingCheck(ap[i], bp[i])
                : // Otherwise nodes in our document sort first
                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                /* eslint-disable eqeqeq */
                ap[i] == preferredDoc
                ? -1
                : bp[i] == preferredDoc
                ? 1
                : /* eslint-enable eqeqeq */
                  0;
            };

        return document;
      };

      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements);
      };

      Sizzle.matchesSelector = function (elem, expr) {
        setDocument(elem);

        if (
          support.matchesSelector &&
          documentIsHTML &&
          !nonnativeSelectorCache[expr + ' '] &&
          (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
          (!rbuggyQSA || !rbuggyQSA.test(expr))
        ) {
          try {
            var ret = matches.call(elem, expr);

            // IE 9's matchesSelector returns false on disconnected nodes
            if (
              ret ||
              support.disconnectedMatch ||
              // As well, disconnected nodes are said to be in a document
              // fragment in IE 9
              (elem.document && elem.document.nodeType !== 11)
            ) {
              return ret;
            }
          } catch (e) {
            nonnativeSelectorCache(expr, true);
          }
        }

        return Sizzle(expr, document, null, [elem]).length > 0;
      };

      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((context.ownerDocument || context) != document) {
          setDocument(context);
        }
        return contains(context, elem);
      };

      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        // Support: IE 11+, Edge 17 - 18+
        // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
        // two documents; shallow comparisons work.
        // eslint-disable-next-line eqeqeq
        if ((elem.ownerDocument || elem) != document) {
          setDocument(elem);
        }

        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val =
            fn && hasOwn.call(Expr.attrHandle, name.toLowerCase())
              ? fn(elem, name, !documentIsHTML)
              : undefined;

        return val !== undefined
          ? val
          : support.attributes || !documentIsHTML
          ? elem.getAttribute(name)
          : (val = elem.getAttributeNode(name)) && val.specified
          ? val.value
          : null;
      };

      Sizzle.escape = function (sel) {
        return (sel + '').replace(rcssescape, fcssescape);
      };

      Sizzle.error = function (msg) {
        throw new Error('Syntax error, unrecognized expression: ' + msg);
      };

      /**
       * Document sorting and removing duplicates
       * @param {ArrayLike} results
       */
      Sizzle.uniqueSort = function (results) {
        var elem,
          duplicates = [],
          j = 0,
          i = 0;

        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);

        if (hasDuplicate) {
          while ((elem = results[i++])) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }

        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;

        return results;
      };

      /**
       * Utility function for retrieving the text value of an array of DOM nodes
       * @param {Array|Element} elem
       */
      getText = Sizzle.getText = function (elem) {
        var node,
          ret = '',
          i = 0,
          nodeType = elem.nodeType;

        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while ((node = elem[i++])) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === 'string') {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }

        // Do not include comment or processing instruction nodes

        return ret;
      };

      Expr = Sizzle.selectors = {
        // Can be adjusted by the user
        cacheLength: 50,

        createPseudo: markFunction,

        match: matchExpr,

        attrHandle: {},

        find: {},

        relative: {
          '>': { dir: 'parentNode', first: true },
          ' ': { dir: 'parentNode' },
          '+': { dir: 'previousSibling', first: true },
          '~': { dir: 'previousSibling' },
        },

        preFilter: {
          ATTR: function (match) {
            match[1] = match[1].replace(runescape, funescape);

            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || '').replace(
              runescape,
              funescape,
            );

            if (match[2] === '~=') {
              match[3] = ' ' + match[3] + ' ';
            }

            return match.slice(0, 4);
          },

          CHILD: function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();

            if (match[1].slice(0, 3) === 'nth') {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }

              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4]
                ? match[5] + (match[6] || 1)
                : 2 * (match[3] === 'even' || match[3] === 'odd'));
              match[5] = +(match[7] + match[8] || match[3] === 'odd');

              // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }

            return match;
          },

          PSEUDO: function (match) {
            var excess,
              unquoted = !match[6] && match[2];

            if (matchExpr['CHILD'].test(match[0])) {
              return null;
            }

            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || '';

              // Strip excess characters from unquoted arguments
            } else if (
              unquoted &&
              rpseudo.test(unquoted) &&
              // Get excess from tokenize (recursively)
              (excess = tokenize(unquoted, true)) &&
              // advance to the next closing parenthesis
              (excess =
                unquoted.indexOf(')', unquoted.length - excess) -
                unquoted.length)
            ) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }

            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          },
        },

        filter: {
          TAG: function (nodeNameSelector) {
            var nodeName = nodeNameSelector
              .replace(runescape, funescape)
              .toLowerCase();
            return nodeNameSelector === '*'
              ? function () {
                  return true;
                }
              : function (elem) {
                  return (
                    elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                  );
                };
          },

          CLASS: function (className) {
            var pattern = classCache[className + ' '];

            return (
              pattern ||
              ((pattern = new RegExp(
                '(^|' + whitespace + ')' + className + '(' + whitespace + '|$)',
              )) &&
                classCache(className, function (elem) {
                  return pattern.test(
                    (typeof elem.className === 'string' && elem.className) ||
                      (typeof elem.getAttribute !== 'undefined' &&
                        elem.getAttribute('class')) ||
                      '',
                  );
                }))
            );
          },

          ATTR: function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);

              if (result == null) {
                return operator === '!=';
              }
              if (!operator) {
                return true;
              }

              result += '';

              /* eslint-disable max-len */

              return operator === '='
                ? result === check
                : operator === '!='
                ? result !== check
                : operator === '^='
                ? check && result.indexOf(check) === 0
                : operator === '*='
                ? check && result.indexOf(check) > -1
                : operator === '$='
                ? check && result.slice(-check.length) === check
                : operator === '~='
                ? (' ' + result.replace(rwhitespace, ' ') + ' ').indexOf(
                    check,
                  ) > -1
                : operator === '|='
                ? result === check ||
                  result.slice(0, check.length + 1) === check + '-'
                : false;
              /* eslint-enable max-len */
            };
          },

          CHILD: function (type, what, _argument, first, last) {
            var simple = type.slice(0, 3) !== 'nth',
              forward = type.slice(-4) !== 'last',
              ofType = what === 'of-type';

            return first === 1 && last === 0
              ? // Shortcut for :nth-*(n)
                function (elem) {
                  return !!elem.parentNode;
                }
              : function (elem, _context, xml) {
                  var cache,
                    uniqueCache,
                    outerCache,
                    node,
                    nodeIndex,
                    start,
                    dir =
                      simple !== forward ? 'nextSibling' : 'previousSibling',
                    parent = elem.parentNode,
                    name = ofType && elem.nodeName.toLowerCase(),
                    useCache = !xml && !ofType,
                    diff = false;

                  if (parent) {
                    // :(first|last|only)-(child|of-type)
                    if (simple) {
                      while (dir) {
                        node = elem;
                        while ((node = node[dir])) {
                          if (
                            ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1
                          ) {
                            return false;
                          }
                        }

                        // Reverse direction for :only-* (if we haven't yet done so)
                        start = dir =
                          type === 'only' && !start && 'nextSibling';
                      }
                      return true;
                    }

                    start = [forward ? parent.firstChild : parent.lastChild];

                    // non-xml :nth-child(...) stores cache data on `parent`
                    if (forward && useCache) {
                      // Seek `elem` from a previously-cached index

                      // ...in a gzip-friendly way
                      node = parent;
                      outerCache = node[expando] || (node[expando] = {});

                      // Support: IE <9 only
                      // Defend against cloned attroperties (jQuery gh-1709)
                      uniqueCache =
                        outerCache[node.uniqueID] ||
                        (outerCache[node.uniqueID] = {});

                      cache = uniqueCache[type] || [];
                      nodeIndex = cache[0] === dirruns && cache[1];
                      diff = nodeIndex && cache[2];
                      node = nodeIndex && parent.childNodes[nodeIndex];

                      while (
                        (node =
                          (++nodeIndex && node && node[dir]) ||
                          // Fallback to seeking `elem` from the start
                          (diff = nodeIndex = 0) ||
                          start.pop())
                      ) {
                        // When found, cache indexes on `parent` and break
                        if (node.nodeType === 1 && ++diff && node === elem) {
                          uniqueCache[type] = [dirruns, nodeIndex, diff];
                          break;
                        }
                      }
                    } else {
                      // Use previously-cached element index if available
                      if (useCache) {
                        // ...in a gzip-friendly way
                        node = elem;
                        outerCache = node[expando] || (node[expando] = {});

                        // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)
                        uniqueCache =
                          outerCache[node.uniqueID] ||
                          (outerCache[node.uniqueID] = {});

                        cache = uniqueCache[type] || [];
                        nodeIndex = cache[0] === dirruns && cache[1];
                        diff = nodeIndex;
                      }

                      // xml :nth-child(...)
                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                      if (diff === false) {
                        // Use the same loop as above to seek `elem` from the start
                        while (
                          (node =
                            (++nodeIndex && node && node[dir]) ||
                            (diff = nodeIndex = 0) ||
                            start.pop())
                        ) {
                          if (
                            (ofType
                              ? node.nodeName.toLowerCase() === name
                              : node.nodeType === 1) &&
                            ++diff
                          ) {
                            // Cache the index of each encountered element
                            if (useCache) {
                              outerCache =
                                node[expando] || (node[expando] = {});

                              // Support: IE <9 only
                              // Defend against cloned attroperties (jQuery gh-1709)
                              uniqueCache =
                                outerCache[node.uniqueID] ||
                                (outerCache[node.uniqueID] = {});

                              uniqueCache[type] = [dirruns, diff];
                            }

                            if (node === elem) {
                              break;
                            }
                          }
                        }
                      }
                    }

                    // Incorporate the offset, then check against cycle size
                    diff -= last;
                    return (
                      diff === first ||
                      (diff % first === 0 && diff / first >= 0)
                    );
                  }
                };
          },

          PSEUDO: function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args,
              fn =
                Expr.pseudos[pseudo] ||
                Expr.setFilters[pseudo.toLowerCase()] ||
                Sizzle.error('unsupported pseudo: ' + pseudo);

            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }

            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [pseudo, pseudo, '', argument];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())
                ? markFunction(function (seed, matches) {
                    var idx,
                      matched = fn(seed, argument),
                      i = matched.length;
                    while (i--) {
                      idx = indexOf(seed, matched[i]);
                      seed[idx] = !(matches[idx] = matched[i]);
                    }
                  })
                : function (elem) {
                    return fn(elem, 0, args);
                  };
            }

            return fn;
          },
        },

        pseudos: {
          // Potentially complex pseudos
          not: markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, '$1'));

            return matcher[expando]
              ? markFunction(function (seed, matches, _context, xml) {
                  var elem,
                    unmatched = matcher(seed, null, xml, []),
                    i = seed.length;

                  // Match elements unmatched by `matcher`
                  while (i--) {
                    if ((elem = unmatched[i])) {
                      seed[i] = !(matches[i] = elem);
                    }
                  }
                })
              : function (elem, _context, xml) {
                  input[0] = elem;
                  matcher(input, null, xml, results);

                  // Don't keep the element (issue #299)
                  input[0] = null;
                  return !results.pop();
                };
          }),

          has: markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),

          contains: markFunction(function (text) {
            text = text.replace(runescape, funescape);
            return function (elem) {
              return (elem.textContent || getText(elem)).indexOf(text) > -1;
            };
          }),

          // "Whether an element is represented by a :lang() selector
          // is based solely on the element's language value
          // being equal to the identifier C,
          // or beginning with the identifier C immediately followed by "-".
          // The matching of C against the element's language value is performed case-insensitively.
          // The identifier C does not have to be a valid language name."
          // http://www.w3.org/TR/selectors/#lang-pseudo
          lang: markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || '')) {
              Sizzle.error('unsupported lang: ' + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (
                  (elemLang = documentIsHTML
                    ? elem.lang
                    : elem.getAttribute('xml:lang') ||
                      elem.getAttribute('lang'))
                ) {
                  elemLang = elemLang.toLowerCase();
                  return (
                    elemLang === lang || elemLang.indexOf(lang + '-') === 0
                  );
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),

          // Miscellaneous
          target: function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },

          root: function (elem) {
            return elem === docElem;
          },

          focus: function (elem) {
            return (
              elem === document.activeElement &&
              (!document.hasFocus || document.hasFocus()) &&
              !!(elem.type || elem.href || ~elem.tabIndex)
            );
          },

          // Boolean properties
          enabled: createDisabledPseudo(false),
          disabled: createDisabledPseudo(true),

          checked: function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return (
              (nodeName === 'input' && !!elem.checked) ||
              (nodeName === 'option' && !!elem.selected)
            );
          },

          selected: function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              // eslint-disable-next-line no-unused-expressions
              elem.parentNode.selectedIndex;
            }

            return elem.selected === true;
          },

          // Contents
          empty: function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },

          parent: function (elem) {
            return !Expr.pseudos['empty'](elem);
          },

          // Element/input types
          header: function (elem) {
            return rheader.test(elem.nodeName);
          },

          input: function (elem) {
            return rinputs.test(elem.nodeName);
          },

          button: function (elem) {
            var name = elem.nodeName.toLowerCase();
            return (
              (name === 'input' && elem.type === 'button') || name === 'button'
            );
          },

          text: function (elem) {
            var attr;
            return (
              elem.nodeName.toLowerCase() === 'input' &&
              elem.type === 'text' &&
              // Support: IE <10 only
              // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
              ((attr = elem.getAttribute('type')) == null ||
                attr.toLowerCase() === 'text')
            );
          },

          // Position-in-collection
          first: createPositionalPseudo(function () {
            return [0];
          }),

          last: createPositionalPseudo(function (_matchIndexes, length) {
            return [length - 1];
          }),

          eq: createPositionalPseudo(function (
            _matchIndexes,
            length,
            argument,
          ) {
            return [argument < 0 ? argument + length : argument];
          }),

          even: createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          odd: createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          lt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i =
              argument < 0
                ? argument + length
                : argument > length
                ? length
                : argument;
            for (; --i >= 0; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),

          gt: createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length; ) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
        },
      };

      Expr.pseudos['nth'] = Expr.pseudos['eq'];

      // Add button/input type pseudos
      for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true,
      }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in { submit: true, reset: true }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }

      // Easy API for creating new setFilters
      function setFilters() {}
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();

      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + ' '];

        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }

        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;

        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push((tokens = []));
          }

          matched = false;

          // Combinators
          if ((match = rcombinators.exec(soFar))) {
            matched = match.shift();
            tokens.push({
              value: matched,

              // Cast descendant combinators to space
              type: match[0].replace(rtrim, ' '),
            });
            soFar = soFar.slice(matched.length);
          }

          // Filters
          for (type in Expr.filter) {
            if (
              (match = matchExpr[type].exec(soFar)) &&
              (!preFilters[type] || (match = preFilters[type](match)))
            ) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match,
              });
              soFar = soFar.slice(matched.length);
            }
          }

          if (!matched) {
            break;
          }
        }

        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly
          ? soFar.length
          : soFar
          ? Sizzle.error(selector)
          : // Cache the tokens
            tokenCache(selector, groups).slice(0);
      };

      function toSelector(tokens) {
        var i = 0,
          len = tokens.length,
          selector = '';
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }

      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === 'parentNode',
          doneName = done++;

        return combinator.first
          ? // Check against closest ancestor/preceding element
            function (elem, context, xml) {
              while ((elem = elem[dir])) {
                if (elem.nodeType === 1 || checkNonElements) {
                  return matcher(elem, context, xml);
                }
              }
              return false;
            }
          : // Check against all ancestor/preceding elements
            function (elem, context, xml) {
              var oldCache,
                uniqueCache,
                outerCache,
                newCache = [dirruns, doneName];

              // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
              if (xml) {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    if (matcher(elem, context, xml)) {
                      return true;
                    }
                  }
                }
              } else {
                while ((elem = elem[dir])) {
                  if (elem.nodeType === 1 || checkNonElements) {
                    outerCache = elem[expando] || (elem[expando] = {});

                    // Support: IE <9 only
                    // Defend against cloned attroperties (jQuery gh-1709)
                    uniqueCache =
                      outerCache[elem.uniqueID] ||
                      (outerCache[elem.uniqueID] = {});

                    if (skip && skip === elem.nodeName.toLowerCase()) {
                      elem = elem[dir] || elem;
                    } else if (
                      (oldCache = uniqueCache[key]) &&
                      oldCache[0] === dirruns &&
                      oldCache[1] === doneName
                    ) {
                      // Assign to newCache so results back-propagate to previous elements
                      return (newCache[2] = oldCache[2]);
                    } else {
                      // Reuse newcache so results back-propagate to previous elements
                      uniqueCache[key] = newCache;

                      // A match means we're done; a fail means we have to keep checking
                      if ((newCache[2] = matcher(elem, context, xml))) {
                        return true;
                      }
                    }
                  }
                }
              }
              return false;
            };
      }

      function elementMatcher(matchers) {
        return matchers.length > 1
          ? function (elem, context, xml) {
              var i = matchers.length;
              while (i--) {
                if (!matchers[i](elem, context, xml)) {
                  return false;
                }
              }
              return true;
            }
          : matchers[0];
      }

      function multipleContexts(selector, contexts, results) {
        var i = 0,
          len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }

      function condense(unmatched, map, filter, context, xml) {
        var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

        for (; i < len; i++) {
          if ((elem = unmatched[i])) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }

        return newUnmatched;
      }

      function setMatcher(
        preFilter,
        selector,
        matcher,
        postFilter,
        postFinder,
        postSelector,
      ) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function (seed, results, context, xml) {
          var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
            elems =
              seed ||
              multipleContexts(
                selector || '*',
                context.nodeType ? [context] : context,
                [],
              ),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn =
              preFilter && (seed || !selector)
                ? condense(elems, preMap, preFilter, context, xml)
                : elems,
            matcherOut = matcher
              ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                postFinder || (seed ? preFilter : preexisting || postFilter)
                ? // ...intermediate processing is necessary
                  []
                : // ...otherwise use results directly
                  results
              : matcherIn;

          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }

          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);

            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if ((elem = temp[i])) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }

          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if ((elem = matcherOut[i])) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push((matcherIn[i] = elem));
                  }
                }
                postFinder(null, (matcherOut = []), temp, xml);
              }

              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if (
                  (elem = matcherOut[i]) &&
                  (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1
                ) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }

            // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(
              matcherOut === results
                ? matcherOut.splice(preexisting, matcherOut.length)
                : matcherOut,
            );
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }

      function matcherFromTokens(tokens) {
        var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[' '],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(
            function (elem) {
              return elem === checkContext;
            },
            implicitRelative,
            true,
          ),
          matchAnyContext = addCombinator(
            function (elem) {
              return indexOf(checkContext, elem) > -1;
            },
            implicitRelative,
            true,
          ),
          matchers = [
            function (elem, context, xml) {
              var ret =
                (!leadingRelative && (xml || context !== outermostContext)) ||
                ((checkContext = context).nodeType
                  ? matchContext(elem, context, xml)
                  : matchAnyContext(elem, context, xml));

              // Avoid hanging onto element (issue #299)
              checkContext = null;
              return ret;
            },
          ];

        for (; i < len; i++) {
          if ((matcher = Expr.relative[tokens[i].type])) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(
              null,
              tokens[i].matches,
            );

            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(
                i > 1 && elementMatcher(matchers),
                i > 1 &&
                  toSelector(
                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                    tokens
                      .slice(0, i - 1)
                      .concat({ value: tokens[i - 2].type === ' ' ? '*' : '' }),
                  ).replace(rtrim, '$1'),
                matcher,
                i < j && matcherFromTokens(tokens.slice(i, j)),
                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                j < len && toSelector(tokens),
              );
            }
            matchers.push(matcher);
          }
        }

        return elementMatcher(matchers);
      }

      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function (seed, context, xml, results, outermost) {
            var elem,
              j,
              matcher,
              matchedCount = 0,
              i = '0',
              unmatched = seed && [],
              setMatched = [],
              contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || (byElement && Expr.find['TAG']('*', outermost)),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = (dirruns +=
                contextBackup == null ? 1 : Math.random() || 0.1),
              len = elems.length;

            if (outermost) {
              // Support: IE 11+, Edge 17 - 18+
              // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
              // two documents; shallow comparisons work.
              // eslint-disable-next-line eqeqeq
              outermostContext = context == document || context || outermost;
            }

            // Add elements passing elementMatchers directly to results
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;

                // Support: IE 11+, Edge 17 - 18+
                // IE/Edge sometimes throw a "Permission denied" error when strict-comparing
                // two documents; shallow comparisons work.
                // eslint-disable-next-line eqeqeq
                if (!context && elem.ownerDocument != document) {
                  setDocument(elem);
                  xml = !documentIsHTML;
                }
                while ((matcher = elementMatchers[j++])) {
                  if (matcher(elem, context || document, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }

              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if ((elem = !matcher && elem)) {
                  matchedCount--;
                }

                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }

            // `i` is now the count of elements visited above, and adding it to `matchedCount`
            // makes the latter nonnegative.
            matchedCount += i;

            // Apply set filters to unmatched elements
            // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
            // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
            // no element matchers and no seed.
            // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
            // case, which will result in a "00" `matchedCount` that differs from `i` but is also
            // numerically zero.
            if (bySet && i !== matchedCount) {
              j = 0;
              while ((matcher = setMatchers[j++])) {
                matcher(unmatched, setMatched, context, xml);
              }

              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }

                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }

              // Add matches to results
              push.apply(results, setMatched);

              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (
                outermost &&
                !seed &&
                setMatched.length > 0 &&
                matchedCount + setMatchers.length > 1
              ) {
                Sizzle.uniqueSort(results);
              }
            }

            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }

            return unmatched;
          };

        return bySet ? markFunction(superMatcher) : superMatcher;
      }

      compile = Sizzle.compile = function (
        selector,
        match /* Internal Use Only */,
      ) {
        var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + ' '];

        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }

          // Cache the compiled function
          cached = compilerCache(
            selector,
            matcherFromGroupMatchers(elementMatchers, setMatchers),
          );

          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };

      /**
       * A low-level selection function that works with Sizzle's compiled
       *  selector functions
       * @param {String|Function} selector A selector or a pre-compiled
       *  selector function built with Sizzle.compile
       * @param {Element} context
       * @param {Array} [results]
       * @param {Array} [seed] A set of elements to match against
       */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === 'function' && selector,
          match = !seed && tokenize((selector = compiled.selector || selector));

        results = results || [];

        // Try to minimize operations if there is only one selector in the list and no seed
        // (the latter of which guarantees us context)
        if (match.length === 1) {
          // Reduce context if the leading compound selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (
            tokens.length > 2 &&
            (token = tokens[0]).type === 'ID' &&
            context.nodeType === 9 &&
            documentIsHTML &&
            Expr.relative[tokens[1].type]
          ) {
            context = (Expr.find['ID'](
              token.matches[0].replace(runescape, funescape),
              context,
            ) || [])[0];
            if (!context) {
              return results;

              // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }

            selector = selector.slice(tokens.shift().value.length);
          }

          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];

            // Abort if we hit a combinator
            if (Expr.relative[(type = token.type)]) {
              break;
            }
            if ((find = Expr.find[type])) {
              // Search, expanding context for leading sibling combinators
              if (
                (seed = find(
                  token.matches[0].replace(runescape, funescape),
                  (rsibling.test(tokens[0].type) &&
                    testContext(context.parentNode)) ||
                    context,
                ))
              ) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }

                break;
              }
            }
          }
        }

        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(
          seed,
          context,
          !documentIsHTML,
          results,
          !context ||
            (rsibling.test(selector) && testContext(context.parentNode)) ||
            context,
        );
        return results;
      };

      // One-time assignments

      // Sort stability
      support.sortStable =
        expando.split('').sort(sortOrder).join('') === expando;

      // Support: Chrome 14-35+
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;

      // Initialize against the default document
      setDocument();

      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (el) {
        // Should return 1, but returns 4 (following)
        return (
          el.compareDocumentPosition(document.createElement('fieldset')) & 1
        );
      });

      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (
        !assert(function (el) {
          el.innerHTML = "<a href='#'></a>";
          return el.firstChild.getAttribute('href') === '#';
        })
      ) {
        addHandle('type|href|height|width', function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(
              name,
              name.toLowerCase() === 'type' ? 1 : 2,
            );
          }
        });
      }

      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (
        !support.attributes ||
        !assert(function (el) {
          el.innerHTML = '<input/>';
          el.firstChild.setAttribute('value', '');
          return el.firstChild.getAttribute('value') === '';
        })
      ) {
        addHandle('value', function (elem, _name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === 'input') {
            return elem.defaultValue;
          }
        });
      }

      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (
        !assert(function (el) {
          return el.getAttribute('disabled') == null;
        })
      ) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true
              ? name.toLowerCase()
              : (val = elem.getAttributeNode(name)) && val.specified
              ? val.value
              : null;
          }
        });
      }

      return Sizzle;
    })(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;

  // Deprecated
  jQuery.expr[':'] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function (elem, dir, until) {
    var matched = [],
      truncate = until !== undefined;

    while ((elem = elem[dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }
        matched.push(elem);
      }
    }
    return matched;
  };

  var siblings = function (n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }
  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }

    // Single element
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return (elem === qualifier) !== not;
      });
    }

    // Arraylike of elements (jQuery, arguments, Array)
    if (typeof qualifier !== 'string') {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    }

    // Filtered directly for both simple and complex selectors
    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ':not(' + expr + ')';
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(
      expr,
      jQuery.grep(elems, function (elem) {
        return elem.nodeType === 1;
      }),
    );
  };

  jQuery.fn.extend({
    find: function (selector) {
      var i,
        ret,
        len = this.length,
        self = this;

      if (typeof selector !== 'string') {
        return this.pushStack(
          jQuery(selector).filter(function () {
            for (i = 0; i < len; i++) {
              if (jQuery.contains(self[i], this)) {
                return true;
              }
            }
          }),
        );
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(
        this,

        // If this is a positional/relative selector, check membership in the returned set
        // so $("p:first").is("p:last") won't return true for a doc with two "p".
        typeof selector === 'string' && rneedsContext.test(selector)
          ? jQuery(selector)
          : selector || [],
        false,
      ).length;
    },
  });

  // Initialize a jQuery object

  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
    // Strict HTML recognition (trac-11290: must start with <)
    // Shortcut simple #id case for speed
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
    init = (jQuery.fn.init = function (selector, context, root) {
      var match, elem;

      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }

      // Method init() accepts an alternate rootjQuery
      // so migrate can support jQuery.sub (gh-2101)
      root = root || rootjQuery;

      // Handle HTML strings
      if (typeof selector === 'string') {
        if (
          selector[0] === '<' &&
          selector[selector.length - 1] === '>' &&
          selector.length >= 3
        ) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [null, selector, null];
        } else {
          match = rquickExpr.exec(selector);
        }

        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;

            // Option to run scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(
              this,
              jQuery.parseHTML(
                match[1],
                context && context.nodeType
                  ? context.ownerDocument || context
                  : document,
                true,
              ),
            );

            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (isFunction(this[match])) {
                  this[match](context[match]);

                  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }

            return this;

            // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);

            if (elem) {
              // Inject the element directly into the jQuery object
              this[0] = elem;
              this.length = 1;
            }
            return this;
          }

          // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || root).find(selector);

          // HANDLE: $(expr, context)
          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }

        // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this[0] = selector;
        this.length = 1;
        return this;

        // HANDLE: $(function)
        // Shortcut for document ready
      } else if (isFunction(selector)) {
        return root.ready !== undefined
          ? root.ready(selector)
          : // Execute immediately if ready is not present
            selector(jQuery);
      }

      return jQuery.makeArray(selector, this);
    });

  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;

  // Initialize central reference
  rootjQuery = jQuery(document);

  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // Methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true,
    };

  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this),
        l = targets.length;

      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },

    closest: function (selectors, context) {
      var cur,
        i = 0,
        l = this.length,
        matched = [],
        targets = typeof selectors !== 'string' && jQuery(selectors);

      // Positional selectors never match, since there's no _selection_ context
      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (
              cur.nodeType < 11 &&
              (targets
                ? targets.index(cur) > -1
                : // Don't pass non-elements to Sizzle
                  cur.nodeType === 1 &&
                  jQuery.find.matchesSelector(cur, selectors))
            ) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(
        matched.length > 1 ? jQuery.uniqueSort(matched) : matched,
      );
    },

    // Determine the position of an element within the set
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode
          ? this.first().prevAll().length
          : -1;
      }

      // Index in selector
      if (typeof elem === 'string') {
        return indexOf.call(jQuery(elem), this[0]);
      }

      // Locate the position of the desired element
      return indexOf.call(
        this,

        // If it receives a jQuery object, the first element is used
        elem.jquery ? elem[0] : elem,
      );
    },

    add: function (selector, context) {
      return this.pushStack(
        jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))),
      );
    },

    addBack: function (selector) {
      return this.add(
        selector == null ? this.prevObject : this.prevObject.filter(selector),
      );
    },
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}
    return cur;
  }

  jQuery.each(
    {
      parent: function (elem) {
        var parent = elem.parentNode;
        return parent && parent.nodeType !== 11 ? parent : null;
      },
      parents: function (elem) {
        return dir(elem, 'parentNode');
      },
      parentsUntil: function (elem, _i, until) {
        return dir(elem, 'parentNode', until);
      },
      next: function (elem) {
        return sibling(elem, 'nextSibling');
      },
      prev: function (elem) {
        return sibling(elem, 'previousSibling');
      },
      nextAll: function (elem) {
        return dir(elem, 'nextSibling');
      },
      prevAll: function (elem) {
        return dir(elem, 'previousSibling');
      },
      nextUntil: function (elem, _i, until) {
        return dir(elem, 'nextSibling', until);
      },
      prevUntil: function (elem, _i, until) {
        return dir(elem, 'previousSibling', until);
      },
      siblings: function (elem) {
        return siblings((elem.parentNode || {}).firstChild, elem);
      },
      children: function (elem) {
        return siblings(elem.firstChild);
      },
      contents: function (elem) {
        if (
          elem.contentDocument != null &&
          // Support: IE 11+
          // <object> elements with no `data` attribute has an object
          // `contentDocument` with a `null` prototype.
          getProto(elem.contentDocument)
        ) {
          return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if (nodeName(elem, 'template')) {
          elem = elem.content || elem;
        }

        return jQuery.merge([], elem.childNodes);
      },
    },
    function (name, fn) {
      jQuery.fn[name] = function (until, selector) {
        var matched = jQuery.map(this, fn, until);

        if (name.slice(-5) !== 'Until') {
          selector = until;
        }

        if (selector && typeof selector === 'string') {
          matched = jQuery.filter(selector, matched);
        }

        if (this.length > 1) {
          // Remove duplicates
          if (!guaranteedUnique[name]) {
            jQuery.uniqueSort(matched);
          }

          // Reverse order for parents* and prev-derivatives
          if (rparentsprev.test(name)) {
            matched.reverse();
          }
        }

        return this.pushStack(matched);
      };
    },
  );
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

  // Convert String-formatted options into Object-formatted ones
  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }

  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options =
      typeof options === 'string'
        ? createOptions(options)
        : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
      firing,
      // Last fire value for non-forgettable lists
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to prevent firing
      locked,
      // Actual callback list
      list = [],
      // Queue of execution data for repeatable lists
      queue = [],
      // Index of currently firing callback (modified by add/remove as needed)
      firingIndex = -1,
      // Fire callbacks
      fire = function () {
        // Enforce single-firing
        locked = locked || options.once;

        // Execute callbacks for all pending executions,
        // respecting firingIndex overrides and runtime changes
        fired = firing = true;
        for (; queue.length; firingIndex = -1) {
          memory = queue.shift();
          while (++firingIndex < list.length) {
            // Run callback and check for early termination
            if (
              list[firingIndex].apply(memory[0], memory[1]) === false &&
              options.stopOnFalse
            ) {
              // Jump to end and forget the data so .add doesn't re-fire
              firingIndex = list.length;
              memory = false;
            }
          }
        }

        // Forget the data if we're done with it
        if (!options.memory) {
          memory = false;
        }

        firing = false;

        // Clean up if we're done firing for good
        if (locked) {
          // Keep an empty list if we have data for future add calls
          if (memory) {
            list = [];

            // Otherwise, this object is spent
          } else {
            list = '';
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function () {
          if (list) {
            // If we have memory from a past run, we should fire after adding
            if (memory && !firing) {
              firingIndex = list.length - 1;
              queue.push(memory);
            }

            (function add(args) {
              jQuery.each(args, function (_, arg) {
                if (isFunction(arg)) {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && toType(arg) !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            })(arguments);

            if (memory && !firing) {
              fire();
            }
          }
          return this;
        },

        // Remove a callback from the list
        remove: function () {
          jQuery.each(arguments, function (_, arg) {
            var index;
            while ((index = jQuery.inArray(arg, list, index)) > -1) {
              list.splice(index, 1);

              // Handle firing indexes
              if (index <= firingIndex) {
                firingIndex--;
              }
            }
          });
          return this;
        },

        // Check if a given callback is in the list.
        // If no argument is given, return whether or not list has callbacks attached.
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
        },

        // Remove all callbacks from the list
        empty: function () {
          if (list) {
            list = [];
          }
          return this;
        },

        // Disable .fire and .add
        // Abort any current/pending executions
        // Clear all callbacks and values
        disable: function () {
          locked = queue = [];
          list = memory = '';
          return this;
        },
        disabled: function () {
          return !list;
        },

        // Disable .fire
        // Also disable .add unless we have memory (since it would have no effect)
        // Abort any pending executions
        lock: function () {
          locked = queue = [];
          if (!memory && !firing) {
            list = memory = '';
          }
          return this;
        },
        locked: function () {
          return !!locked;
        },

        // Call all callbacks with the given context and arguments
        fireWith: function (context, args) {
          if (!locked) {
            args = args || [];
            args = [context, args.slice ? args.slice() : args];
            queue.push(args);
            if (!firing) {
              fire();
            }
          }
          return this;
        },

        // Call all the callbacks with the given arguments
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },

        // To know if the callbacks have already been called at least once
        fired: function () {
          return !!fired;
        },
      };

    return self;
  };

  function Identity(v) {
    return v;
  }
  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction((method = value.promise))) {
        method.call(value).done(resolve).fail(reject);

        // Other thenables
      } else if (value && isFunction((method = value.then))) {
        method.call(value, resolve, reject);

        // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      }

      // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.
    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          // action, add listener, callbacks,
          // ... .then handlers, argument index, [final state]
          [
            'notify',
            'progress',
            jQuery.Callbacks('memory'),
            jQuery.Callbacks('memory'),
            2,
          ],
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            jQuery.Callbacks('once memory'),
            0,
            'resolved',
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            jQuery.Callbacks('once memory'),
            1,
            'rejected',
          ],
        ],
        state = 'pending',
        promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          catch: function (fn) {
            return promise.then(null, fn);
          },

          // Keep pipe for back-compat
          pipe: function (/* fnDone, fnFail, fnProgress */) {
            var fns = arguments;

            return jQuery
              .Deferred(function (newDefer) {
                jQuery.each(tuples, function (_i, tuple) {
                  // Map tuples (progress, done, fail) to arguments (done, fail, progress)
                  var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]];

                  // deferred.progress(function() { bind to newDefer or newDefer.notify })
                  // deferred.done(function() { bind to newDefer or newDefer.resolve })
                  // deferred.fail(function() { bind to newDefer or newDefer.reject })
                  deferred[tuple[1]](function () {
                    var returned = fn && fn.apply(this, arguments);
                    if (returned && isFunction(returned.promise)) {
                      returned
                        .promise()
                        .progress(newDefer.notify)
                        .done(newDefer.resolve)
                        .fail(newDefer.reject);
                    } else {
                      newDefer[tuple[0] + 'With'](
                        this,
                        fn ? [returned] : arguments,
                      );
                    }
                  });
                });
                fns = null;
              })
              .promise();
          },
          then: function (onFulfilled, onRejected, onProgress) {
            var maxDepth = 0;
            function resolve(depth, deferred, handler, special) {
              return function () {
                var that = this,
                  args = arguments,
                  mightThrow = function () {
                    var returned, then;

                    // Support: Promises/A+ section 2.3.3.3.3
                    // https://promisesaplus.com/#point-59
                    // Ignore double-resolution attempts
                    if (depth < maxDepth) {
                      return;
                    }

                    returned = handler.apply(that, args);

                    // Support: Promises/A+ section 2.3.1
                    // https://promisesaplus.com/#point-48
                    if (returned === deferred.promise()) {
                      throw new TypeError('Thenable self-resolution');
                    }

                    // Support: Promises/A+ sections 2.3.3.1, 3.5
                    // https://promisesaplus.com/#point-54
                    // https://promisesaplus.com/#point-75
                    // Retrieve `then` only once
                    then =
                      returned &&
                      // Support: Promises/A+ section 2.3.4
                      // https://promisesaplus.com/#point-64
                      // Only check objects and functions for thenability
                      (typeof returned === 'object' ||
                        typeof returned === 'function') &&
                      returned.then;

                    // Handle a returned thenable
                    if (isFunction(then)) {
                      // Special processors (notify) just wait for resolution
                      if (special) {
                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special),
                        );

                        // Normal processors (resolve) also hook into progress
                      } else {
                        // ...and disregard older resolution values
                        maxDepth++;

                        then.call(
                          returned,
                          resolve(maxDepth, deferred, Identity, special),
                          resolve(maxDepth, deferred, Thrower, special),
                          resolve(
                            maxDepth,
                            deferred,
                            Identity,
                            deferred.notifyWith,
                          ),
                        );
                      }

                      // Handle all other returned values
                    } else {
                      // Only substitute handlers pass on context
                      // and multiple values (non-spec behavior)
                      if (handler !== Identity) {
                        that = undefined;
                        args = [returned];
                      }

                      // Process the value(s)
                      // Default process is resolve
                      (special || deferred.resolveWith)(that, args);
                    }
                  },
                  // Only normal processors (resolve) catch and reject exceptions
                  process = special
                    ? mightThrow
                    : function () {
                        try {
                          mightThrow();
                        } catch (e) {
                          if (jQuery.Deferred.exceptionHook) {
                            jQuery.Deferred.exceptionHook(
                              e,
                              process.stackTrace,
                            );
                          }

                          // Support: Promises/A+ section 2.3.3.3.4.1
                          // https://promisesaplus.com/#point-61
                          // Ignore post-resolution exceptions
                          if (depth + 1 >= maxDepth) {
                            // Only substitute handlers pass on context
                            // and multiple values (non-spec behavior)
                            if (handler !== Thrower) {
                              that = undefined;
                              args = [e];
                            }

                            deferred.rejectWith(that, args);
                          }
                        }
                      };

                // Support: Promises/A+ section 2.3.3.3.1
                // https://promisesaplus.com/#point-57
                // Re-resolve promises immediately to dodge false rejection from
                // subsequent errors
                if (depth) {
                  process();
                } else {
                  // Call an optional hook to record the stack, in case of exception
                  // since it's otherwise lost when execution goes async
                  if (jQuery.Deferred.getStackHook) {
                    process.stackTrace = jQuery.Deferred.getStackHook();
                  }
                  window.setTimeout(process);
                }
              };
            }

            return jQuery
              .Deferred(function (newDefer) {
                // progress_handlers.add( ... )
                tuples[0][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onProgress) ? onProgress : Identity,
                    newDefer.notifyWith,
                  ),
                );

                // fulfilled_handlers.add( ... )
                tuples[1][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onFulfilled) ? onFulfilled : Identity,
                  ),
                );

                // rejected_handlers.add( ... )
                tuples[2][3].add(
                  resolve(
                    0,
                    newDefer,
                    isFunction(onRejected) ? onRejected : Thrower,
                  ),
                );
              })
              .promise();
          },

          // Get a promise for this deferred
          // If obj is provided, the promise aspect is added to the object
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          },
        },
        deferred = {};

      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
          stateString = tuple[5];

        // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add
        promise[tuple[1]] = list.add;

        // Handle state
        if (stateString) {
          list.add(
            function () {
              // state = "resolved" (i.e., fulfilled)
              // state = "rejected"
              state = stateString;
            },

            // rejected_callbacks.disable
            // fulfilled_callbacks.disable
            tuples[3 - i][2].disable,

            // rejected_handlers.disable
            // fulfilled_handlers.disable
            tuples[3 - i][3].disable,

            // progress_callbacks.lock
            tuples[0][2].lock,

            // progress_handlers.lock
            tuples[0][3].lock,
          );
        }

        // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire
        list.add(tuple[3].fire);

        // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](
            this === deferred ? undefined : this,
            arguments,
          );
          return this;
        };

        // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith
        deferred[tuple[0] + 'With'] = list.fireWith;
      });

      // Make the deferred a promise
      promise.promise(deferred);

      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }

      // All done!
      return deferred;
    },

    // Deferred helper
    when: function (singleValue) {
      var // count of uncompleted subordinates
        remaining = arguments.length,
        // count of unprocessed arguments
        i = remaining,
        // subordinate fulfillment data
        resolveContexts = Array(i),
        resolveValues = slice.call(arguments),
        // the primary Deferred
        primary = jQuery.Deferred(),
        // subordinate callback factory
        updateFunc = function (i) {
          return function (value) {
            resolveContexts[i] = this;
            resolveValues[i] =
              arguments.length > 1 ? slice.call(arguments) : value;
            if (!--remaining) {
              primary.resolveWith(resolveContexts, resolveValues);
            }
          };
        };

      // Single- and empty arguments are adopted like Promise.resolve
      if (remaining <= 1) {
        adoptValue(
          singleValue,
          primary.done(updateFunc(i)).resolve,
          primary.reject,
          !remaining,
        );

        // Use .then() to unwrap secondary thenables (cf. gh-3000)
        if (
          primary.state() === 'pending' ||
          isFunction(resolveValues[i] && resolveValues[i].then)
        ) {
          return primary.then();
        }
      }

      // Multiple arguments are aggregated like Promise.all array elements
      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), primary.reject);
      }

      return primary.promise();
    },
  });

  // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.
  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (
      window.console &&
      window.console.warn &&
      error &&
      rerrorNames.test(error.name)
    ) {
      window.console.warn(
        'jQuery.Deferred exception: ' + error.message,
        error.stack,
        stack,
      );
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  };

  // The deferred used on DOM ready
  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList
      .then(fn)

      // Wrap jQuery.readyException in a function so that the lookup
      // happens at the time of error handling instead of callback
      // registration.
      .catch(function (error) {
        jQuery.readyException(error);
      });

    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,

    // A counter to track how many items to wait for before
    // the ready event fires. See trac-6781
    readyWait: 1,

    // Handle when the DOM is ready
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }

      // Remember that the DOM is ready
      jQuery.isReady = true;

      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }

      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
    },
  });

  jQuery.ready.then = readyList.then;

  // The ready event handler and self cleanup method
  function completed() {
    document.removeEventListener('DOMContentLoaded', completed);
    window.removeEventListener('load', completed);
    jQuery.ready();
  }

  // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon
  if (
    document.readyState === 'complete' ||
    (document.readyState !== 'loading' && !document.documentElement.doScroll)
  ) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document.addEventListener('DOMContentLoaded', completed);

    // A fallback to window.onload, that will always work
    window.addEventListener('load', completed);
  }

  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
      len = elems.length,
      bulk = key == null;

    // Sets many values
    if (toType(key) === 'object') {
      chainable = true;
      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      }

      // Sets one value
    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null;

          // ...except when executing function values
        } else {
          bulk = fn;
          fn = function (elem, _key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(
            elems[i],
            key,
            raw ? value : value.call(elems[i], i, fn(elems[i], key)),
          );
        }
      }
    }

    if (chainable) {
      return elems;
    }

    // Gets
    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  };

  // Matches dashed string for camelizing
  var rmsPrefix = /^-ms-/,
    rdashAlpha = /-([a-z])/g;

  // Used by camelCase as callback to replace()
  function fcamelCase(_all, letter) {
    return letter.toUpperCase();
  }

  // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (trac-9572)
  function camelCase(string) {
    return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
  }
  var acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;

  Data.prototype = {
    cache: function (owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando];

      // If not, create one
      if (!value) {
        value = {};

        // We can accept data for non-element nodes in modern browsers,
        // but we should not, see trac-8335.
        // Always return an empty object.
        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value;

            // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true,
            });
          }
        }
      }

      return value;
    },
    set: function (owner, data, value) {
      var prop,
        cache = this.cache(owner);

      // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)
      if (typeof data === 'string') {
        cache[camelCase(data)] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }
      return cache;
    },
    get: function (owner, key) {
      return key === undefined
        ? this.cache(owner)
        : // Always use camelCase key (gh-2257)
          owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function (owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (
        key === undefined ||
        (key && typeof key === 'string' && value === undefined)
      ) {
        return this.get(owner, key);
      }

      // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i,
        cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key);

          // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace
          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      }

      // Remove the expando if there's no more data
      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function (owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    },
  };
  var dataPriv = new Data();

  var dataUser = new Data();

  //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
    rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === 'true') {
      return true;
    }

    if (data === 'false') {
      return false;
    }

    if (data === 'null') {
      return null;
    }

    // Only convert to a number if it doesn't change the string
    if (data === +data + '') {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name;

    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$&').toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === 'string') {
        try {
          data = getData(data);
        } catch (e) {}

        // Make sure we set the data so it isn't changed later
        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }

  jQuery.extend({
    hasData: function (elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },

    data: function (elem, name, data) {
      return dataUser.access(elem, name, data);
    },

    removeData: function (elem, name) {
      dataUser.remove(elem, name);
    },

    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function (elem, name, data) {
      return dataPriv.access(elem, name, data);
    },

    _removeData: function (elem, name) {
      dataPriv.remove(elem, name);
    },
  });

  jQuery.fn.extend({
    data: function (key, value) {
      var i,
        name,
        data,
        elem = this[0],
        attrs = elem && elem.attributes;

      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, 'hasDataAttrs')) {
            i = attrs.length;
            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (trac-14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf('data-') === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            dataPriv.set(elem, 'hasDataAttrs', true);
          }
        }

        return data;
      }

      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(
        this,
        function (value) {
          var data;

          // The calling jQuery object (element matches) is not empty
          // (and therefore has an element appears at this[ 0 ]) and the
          // `value` parameter was not undefined. An empty jQuery object
          // will result in `undefined` for elem = this[ 0 ] which will
          // throw an exception if an attempt to read a data cache is made.
          if (elem && value === undefined) {
            // Attempt to get data from the cache
            // The key will always be camelCased in Data
            data = dataUser.get(elem, key);
            if (data !== undefined) {
              return data;
            }

            // Attempt to "discover" the data in
            // HTML5 custom data-* attrs
            data = dataAttr(elem, key);
            if (data !== undefined) {
              return data;
            }

            // We tried really hard, but the data doesn't exist.
            return;
          }

          // Set the data...
          this.each(function () {
            // We always store the camelCased key
            dataUser.set(this, key, value);
          });
        },
        null,
        value,
        arguments.length > 1,
        null,
        true,
      );
    },

    removeData: function (key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    },
  });

  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;

      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = dataPriv.get(elem, type);

        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },

    dequeue: function (elem, type) {
      type = type || 'fx';

      var queue = jQuery.queue(elem, type),
        startLength = queue.length,
        fn = queue.shift(),
        hooks = jQuery._queueHooks(elem, type),
        next = function () {
          jQuery.dequeue(elem, type);
        };

      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }

        // Clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },

    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return (
        dataPriv.get(elem, key) ||
        dataPriv.access(elem, key, {
          empty: jQuery.Callbacks('once memory').add(function () {
            dataPriv.remove(elem, [type + 'queue', key]);
          }),
        })
      );
    },
  });

  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;

      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined
        ? this
        : this.each(function () {
            var queue = jQuery.queue(this, type, data);

            // Ensure a hooks for this queue
            jQuery._queueHooks(this, type);

            if (type === 'fx' && queue[0] !== 'inprogress') {
              jQuery.dequeue(this, type);
            }
          });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },

    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function (type, obj) {
      var tmp,
        count = 1,
        defer = jQuery.Deferred(),
        elements = this,
        i = this.length,
        resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };

      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';

      while (i--) {
        tmp = dataPriv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    },
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

  var rcssNum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i');

  var cssExpand = ['Top', 'Right', 'Bottom', 'Left'];

  var documentElement = document.documentElement;

  var isAttached = function (elem) {
      return jQuery.contains(elem.ownerDocument, elem);
    },
    composed = { composed: true };

  // Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
  // Check attachment across shadow DOM boundaries when possible (gh-3504)
  // Support: iOS 10.0-10.2 only
  // Early iOS 10 versions support `attachShadow` but not `getRootNode`,
  // leading to errors. We need to check for `getRootNode`.
  if (documentElement.getRootNode) {
    isAttached = function (elem) {
      return (
        jQuery.contains(elem.ownerDocument, elem) ||
        elem.getRootNode(composed) === elem.ownerDocument
      );
    };
  }
  var isHiddenWithinTree = function (elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;

    // Inline style trumps all
    return (
      elem.style.display === 'none' ||
      (elem.style.display === '' &&
        // Otherwise, check computed style
        // Support: Firefox <=43 - 45
        // Disconnected elements can have computed display: none, so first confirm that elem is
        // in the document.
        isAttached(elem) &&
        jQuery.css(elem, 'display') === 'none')
    );
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
      scale,
      maxIterations = 20,
      currentValue = tween
        ? function () {
            return tween.cur();
          }
        : function () {
            return jQuery.css(elem, prop, '');
          },
      initial = currentValue(),
      unit =
        (valueParts && valueParts[3]) || (jQuery.cssNumber[prop] ? '' : 'px'),
      // Starting value computation is required for potential unit mismatches
      initialInUnit =
        elem.nodeType &&
        (jQuery.cssNumber[prop] || (unit !== 'px' && +initial)) &&
        rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2;

      // Trust units reported by jQuery.css
      unit = unit || initialInUnit[3];

      // Iteratively approximate from a nonzero starting point
      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);
        if (
          (1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <=
          0
        ) {
          maxIterations = 0;
        }
        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit);

      // Make sure we update the tween properties later on
      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0;

      // Apply relative offset (+=/-=) if specified
      adjusted = valueParts[1]
        ? initialInUnit + (valueParts[1] + 1) * valueParts[2]
        : +valueParts[2];
      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }
    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
      doc = elem.ownerDocument,
      nodeName = elem.nodeName,
      display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, 'display');

    temp.parentNode.removeChild(temp);

    if (display === 'none') {
      display = 'block';
    }
    defaultDisplayMap[nodeName] = display;

    return display;
  }

  function showHide(elements, show) {
    var display,
      elem,
      values = [],
      index = 0,
      length = elements.length;

    // Determine new display value for elements that need to change
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }

      display = elem.style.display;
      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === 'none') {
          values[index] = dataPriv.get(elem, 'display') || null;
          if (!values[index]) {
            elem.style.display = '';
          }
        }
        if (elem.style.display === '' && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== 'none') {
          values[index] = 'none';

          // Remember what we're overwriting
          dataPriv.set(elem, 'display', display);
        }
      }
    }

    // Set the display of the elements in a second loop to avoid constant reflow
    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    },
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;

  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]*)/i;

  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i;

  (function () {
    var fragment = document.createDocumentFragment(),
      div = fragment.appendChild(document.createElement('div')),
      input = document.createElement('input');

    // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (trac-11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (trac-14901)
    input.setAttribute('type', 'radio');
    input.setAttribute('checked', 'checked');
    input.setAttribute('name', 't');

    div.appendChild(input);

    // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

    // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    div.innerHTML = '<textarea>x</textarea>';
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;

    // Support: IE <=9 only
    // IE <=9 replaces <option> tags with their contents when inserted outside of
    // the select element.
    div.innerHTML = '<option></option>';
    support.option = !!div.lastChild;
  })();

  // We have to close these tags to support XHTML (trac-13200)
  var wrapMap = {
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, '<table>', '</table>'],
    col: [2, '<table><colgroup>', '</colgroup></table>'],
    tr: [2, '<table><tbody>', '</tbody></table>'],
    td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],

    _default: [0, '', ''],
  };

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption =
    wrapMap.thead;
  wrapMap.th = wrapMap.td;

  // Support: IE <=9 only
  if (!support.option) {
    wrapMap.optgroup = wrapMap.option = [
      1,
      "<select multiple='multiple'>",
      '</select>',
    ];
  }

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (trac-15151)
    var ret;

    if (typeof context.getElementsByTagName !== 'undefined') {
      ret = context.getElementsByTagName(tag || '*');
    } else if (typeof context.querySelectorAll !== 'undefined') {
      ret = context.querySelectorAll(tag || '*');
    } else {
      ret = [];
    }

    if (tag === undefined || (tag && nodeName(context, tag))) {
      return jQuery.merge([context], ret);
    }

    return ret;
  }

  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0,
      l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(
        elems[i],
        'globalEval',
        !refElements || dataPriv.get(refElements[i], 'globalEval'),
      );
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
      tmp,
      tag,
      wrap,
      attached,
      j,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i = 0,
      l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === 'object') {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

          // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem));

          // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement('div'));

          // Deserialize a standard representation
          tag = (rtagName.exec(elem) || ['', ''])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

          // Descend through wrappers to the right content
          j = wrap[0];
          while (j--) {
            tmp = tmp.lastChild;
          }

          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, tmp.childNodes);

          // Remember the top-level container
          tmp = fragment.firstChild;

          // Ensure the created nodes are orphaned (trac-12392)
          tmp.textContent = '';
        }
      }
    }

    // Remove wrapper from fragment
    fragment.textContent = '';

    i = 0;
    while ((elem = nodes[i++])) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }
        continue;
      }

      attached = isAttached(elem);

      // Append to fragment
      tmp = getAll(fragment.appendChild(elem), 'script');

      // Preserve script evaluation history
      if (attached) {
        setGlobalEval(tmp);
      }

      // Capture executables
      if (scripts) {
        j = 0;
        while ((elem = tmp[j++])) {
          if (rscriptType.test(elem.type || '')) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  }

  // Support: IE <=9 - 11+
  // focus() and blur() are asynchronous, except when they are no-op.
  // So expect focus to be synchronous when the element is already active,
  // and blur to be synchronous when the element is not already active.
  // (focus and blur are always synchronous in other supported browsers,
  // this just defines when we can count on it).
  function expectSync(elem, type) {
    return (elem === safeActiveElement()) === (type === 'focus');
  }

  // Support: IE <=9 only
  // Accessing document.activeElement can throw unexpectedly
  // https://bugs.jquery.com/ticket/13393
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {}
  }

  function on(elem, types, selector, data, fn, one) {
    var origFn, type;

    // Types can be a map of types/handlers
    if (typeof types === 'object') {
      // ( types-Object, selector, data )
      if (typeof selector !== 'string') {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }
      for (type in types) {
        on(elem, type, selector, data, types[type], one);
      }
      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === 'string') {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }
    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;
      fn = function (event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      };

      // Use same guid so caller can remove using origFn
      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }
    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }

  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */
  jQuery.event = {
    global: {},

    add: function (elem, types, handler, data, selector) {
      var handleObjIn,
        eventHandle,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.get(elem);

      // Only attach events to objects that accept data
      if (!acceptData(elem)) {
        return;
      }

      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }

      // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)
      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      }

      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }

      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== 'undefined' &&
            jQuery.event.triggered !== e.type
            ? jQuery.event.dispatch.apply(elem, arguments)
            : undefined;
        };
      }

      // Handle multiple events separated by a space
      types = (types || '').match(rnothtmlwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();

        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }

        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};

        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;

        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};

        // handleObj is passed to all event handlers
        handleObj = jQuery.extend(
          {
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            needsContext:
              selector && jQuery.expr.match.needsContext.test(selector),
            namespace: namespaces.join('.'),
          },
          handleObjIn,
        );

        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;

          // Only use addEventListener if the special events handler returns false
          if (
            !special.setup ||
            special.setup.call(elem, data, namespaces, eventHandle) === false
          ) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }

        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }

        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },

    // Detach an event or set of events from an element
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j,
        origCount,
        tmp,
        events,
        t,
        handleObj,
        special,
        handlers,
        type,
        namespaces,
        origType,
        elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      }

      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(rnothtmlwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();

        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp =
          tmp[2] &&
          new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');

        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];

          if (
            (mappedTypes || origType === handleObj.origType) &&
            (!handler || handler.guid === handleObj.guid) &&
            (!tmp || tmp.test(handleObj.namespace)) &&
            (!selector ||
              selector === handleObj.selector ||
              (selector === '**' && handleObj.selector))
          ) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }

        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (
            !special.teardown ||
            special.teardown.call(elem, namespaces, elemData.handle) === false
          ) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      }

      // Remove data and the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, 'handle events');
      }
    },

    dispatch: function (nativeEvent) {
      var i,
        j,
        ret,
        matched,
        handleObj,
        handlerQueue,
        args = new Array(arguments.length),
        // Make a writable jQuery.Event from the native event object
        event = jQuery.event.fix(nativeEvent),
        handlers =
          (dataPriv.get(this, 'events') || Object.create(null))[event.type] ||
          [],
        special = jQuery.event.special[event.type] || {};

      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this;

      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (
        special.preDispatch &&
        special.preDispatch.call(this, event) === false
      ) {
        return;
      }

      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);

      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;

        j = 0;
        while (
          (handleObj = matched.handlers[j++]) &&
          !event.isImmediatePropagationStopped()
        ) {
          // If the event is namespaced, then each handler is only invoked if it is
          // specially universal or its namespaces are a superset of the event's.
          if (
            !event.rnamespace ||
            handleObj.namespace === false ||
            event.rnamespace.test(handleObj.namespace)
          ) {
            event.handleObj = handleObj;
            event.data = handleObj.data;

            ret = (
              (jQuery.event.special[handleObj.origType] || {}).handle ||
              handleObj.handler
            ).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }

      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },

    handlers: function (event, handlers) {
      var i,
        handleObj,
        sel,
        matchedHandlers,
        matchedSelectors,
        handlerQueue = [],
        delegateCount = handlers.delegateCount,
        cur = event.target;

      // Find delegate handlers
      if (
        delegateCount &&
        // Support: IE <=9
        // Black-hole SVG <use> instance trees (trac-13180)
        cur.nodeType &&
        // Support: Firefox <=42
        // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
        // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
        // Support: IE 11 only
        // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
        !(event.type === 'click' && event.button >= 1)
      ) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (trac-13208)
          // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
          if (
            cur.nodeType === 1 &&
            !(event.type === 'click' && cur.disabled === true)
          ) {
            matchedHandlers = [];
            matchedSelectors = {};
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];

              // Don't conflict with Object.prototype properties (trac-13203)
              sel = handleObj.selector + ' ';

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext
                  ? jQuery(sel, this).index(cur) > -1
                  : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }
            if (matchedHandlers.length) {
              handlerQueue.push({ elem: cur, handlers: matchedHandlers });
            }
          }
        }
      }

      // Add the remaining (directly-bound) handlers
      cur = this;
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: handlers.slice(delegateCount),
        });
      }

      return handlerQueue;
    },

    addProp: function (name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,

        get: isFunction(hook)
          ? function () {
              if (this.originalEvent) {
                return hook(this.originalEvent);
              }
            }
          : function () {
              if (this.originalEvent) {
                return this.originalEvent[name];
              }
            },

        set: function (value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value,
          });
        },
      });
    },

    fix: function (originalEvent) {
      return originalEvent[jQuery.expando]
        ? originalEvent
        : new jQuery.Event(originalEvent);
    },

    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true,
      },
      click: {
        // Utilize native event to ensure correct state for checkable inputs
        setup: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Claim the first handler
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, 'input')
          ) {
            // dataPriv.set( el, "click", ... )
            leverageNative(el, 'click', returnTrue);
          }

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function (data) {
          // For mutual compressibility with _default, replace `this` access with a local var.
          // `|| data` is dead code meant only to preserve the variable through minification.
          var el = this || data;

          // Force setup before triggering a click
          if (
            rcheckableType.test(el.type) &&
            el.click &&
            nodeName(el, 'input')
          ) {
            leverageNative(el, 'click');
          }

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // For cross-browser consistency, suppress native .click() on links
        // Also prevent it if we're currently inside a leveraged native-event stack
        _default: function (event) {
          var target = event.target;
          return (
            (rcheckableType.test(target.type) &&
              target.click &&
              nodeName(target, 'input') &&
              dataPriv.get(target, 'click')) ||
            nodeName(target, 'a')
          );
        },
      },

      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        },
      },
    },
  };

  // Ensure the presence of an event listener that handles manually-triggered
  // synthetic events by interrupting progress until reinvoked in response to
  // *native* events that it fires directly, ensuring that state changes have
  // already occurred before other listeners are invoked.
  function leverageNative(el, type, expectSync) {
    // Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
    if (!expectSync) {
      if (dataPriv.get(el, type) === undefined) {
        jQuery.event.add(el, type, returnTrue);
      }
      return;
    }

    // Register the controller as a special universal handler for all event namespaces
    dataPriv.set(el, type, false);
    jQuery.event.add(el, type, {
      namespace: false,
      handler: function (event) {
        var notAsync,
          result,
          saved = dataPriv.get(this, type);

        if (event.isTrigger & 1 && this[type]) {
          // Interrupt processing of the outer synthetic .trigger()ed event
          // Saved data should be false in such cases, but might be a leftover capture object
          // from an async native handler (gh-4350)
          if (!saved.length) {
            // Store arguments for use when handling the inner native event
            // There will always be at least one argument (an event object), so this array
            // will not be confused with a leftover capture object.
            saved = slice.call(arguments);
            dataPriv.set(this, type, saved);

            // Trigger the native event and capture its result
            // Support: IE <=9 - 11+
            // focus() and blur() are asynchronous
            notAsync = expectSync(this, type);
            this[type]();
            result = dataPriv.get(this, type);
            if (saved !== result || notAsync) {
              dataPriv.set(this, type, false);
            } else {
              result = {};
            }
            if (saved !== result) {
              // Cancel the outer synthetic event
              event.stopImmediatePropagation();
              event.preventDefault();

              // Support: Chrome 86+
              // In Chrome, if an element having a focusout handler is blurred by
              // clicking outside of it, it invokes the handler synchronously. If
              // that handler calls `.remove()` on the element, the data is cleared,
              // leaving `result` undefined. We need to guard against this.
              return result && result.value;
            }

            // If this is an inner synthetic event for an event with a bubbling surrogate
            // (focus or blur), assume that the surrogate already propagated from triggering the
            // native event and prevent that from happening again here.
            // This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
            // bubbling surrogate propagates *after* the non-bubbling base), but that seems
            // less bad than duplication.
          } else if ((jQuery.event.special[type] || {}).delegateType) {
            event.stopPropagation();
          }

          // If this is a native event triggered above, everything is now in order
          // Fire an inner synthetic event with the original arguments
        } else if (saved.length) {
          // ...and capture the result
          dataPriv.set(this, type, {
            value: jQuery.event.trigger(
              // Support: IE <=9 - 11+
              // Extend with the prototype to reset the above stopImmediatePropagation()
              jQuery.extend(saved[0], jQuery.Event.prototype),
              saved.slice(1),
              this,
            ),
          });

          // Abort handling of the native event
          event.stopImmediatePropagation();
        }
      },
    });
  }

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }

    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;

      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented =
        src.defaultPrevented ||
        (src.defaultPrevented === undefined &&
          // Support: Android <=2.3 only
          src.returnValue === false)
          ? returnTrue
          : returnFalse;

      // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (trac-504, trac-13143)
      this.target =
        src.target && src.target.nodeType === 3
          ? src.target.parentNode
          : src.target;

      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget;

      // Event type
    } else {
      this.type = src;
    }

    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }

    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = (src && src.timeStamp) || Date.now();

    // Mark it as fixed
    this[jQuery.expando] = true;
  };

  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,

    preventDefault: function () {
      var e = this.originalEvent;

      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;

      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;

      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    },
  };

  // Includes all common event props including KeyEvent and MouseEvent specific props
  jQuery.each(
    {
      altKey: true,
      bubbles: true,
      cancelable: true,
      changedTouches: true,
      ctrlKey: true,
      detail: true,
      eventPhase: true,
      metaKey: true,
      pageX: true,
      pageY: true,
      shiftKey: true,
      view: true,
      char: true,
      code: true,
      charCode: true,
      key: true,
      keyCode: true,
      button: true,
      buttons: true,
      clientX: true,
      clientY: true,
      offsetX: true,
      offsetY: true,
      pointerId: true,
      pointerType: true,
      screenX: true,
      screenY: true,
      targetTouches: true,
      toElement: true,
      touches: true,
      which: true,
    },
    jQuery.event.addProp,
  );

  jQuery.each(
    { focus: 'focusin', blur: 'focusout' },
    function (type, delegateType) {
      jQuery.event.special[type] = {
        // Utilize native event if possible so blur/focus sequence is correct
        setup: function () {
          // Claim the first handler
          // dataPriv.set( this, "focus", ... )
          // dataPriv.set( this, "blur", ... )
          leverageNative(this, type, expectSync);

          // Return false to allow normal processing in the caller
          return false;
        },
        trigger: function () {
          // Force setup before trigger
          leverageNative(this, type);

          // Return non-false to allow normal event-path propagation
          return true;
        },

        // Suppress native focus or blur if we're currently inside
        // a leveraged native-event stack
        _default: function (event) {
          return dataPriv.get(event.target, type);
        },

        delegateType: delegateType,
      };
    },
  );

  // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).
  jQuery.each(
    {
      mouseenter: 'mouseover',
      mouseleave: 'mouseout',
      pointerenter: 'pointerover',
      pointerleave: 'pointerout',
    },
    function (orig, fix) {
      jQuery.event.special[orig] = {
        delegateType: fix,
        bindType: fix,

        handle: function (event) {
          var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj;

          // For mouseenter/leave call the handler if related is outside the target.
          // NB: No relatedTarget if the mouse left/entered the browser window
          if (
            !related ||
            (related !== target && !jQuery.contains(target, related))
          ) {
            event.type = handleObj.origType;
            ret = handleObj.handler.apply(this, arguments);
            event.type = fix;
          }
          return ret;
        },
      };
    },
  );

  jQuery.fn.extend({
    on: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn);
    },
    one: function (types, selector, data, fn) {
      return on(this, types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(
          handleObj.namespace
            ? handleObj.origType + '.' + handleObj.namespace
            : handleObj.origType,
          handleObj.selector,
          handleObj.handler,
        );
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
  });

  var // Support: IE <=10 - 11, Edge 12 - 13 only
    // In IE/Edge using regex groups here causes severe slowdowns.
    // See https://connect.microsoft.com/IE/feedback/details/1736512/
    rnoInnerhtml = /<script|<style|<link/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
    rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

  // Prefer a tbody over its parent table for containing new rows
  function manipulationTarget(elem, content) {
    if (
      nodeName(elem, 'table') &&
      nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr')
    ) {
      return jQuery(elem).children('tbody')[0] || elem;
    }

    return elem;
  }

  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    if ((elem.type || '').slice(0, 5) === 'true/') {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute('type');
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    }

    // 1. Copy private data: events, handlers, etc.
    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.get(src);
      events = pdataOld.events;

      if (events) {
        dataPriv.remove(dest, 'handle events');

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }

    // 2. Copy user data
    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);

      dataUser.set(dest, udataCur);
    }
  }

  // Fix IE bugs, see support tests
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();

    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && rcheckableType.test(src.type)) {
      dest.checked = src.checked;

      // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = flat(args);

    var fragment,
      first,
      scripts,
      hasScripts,
      node,
      doc,
      i = 0,
      l = collection.length,
      iNoClone = l - 1,
      value = args[0],
      valueIsFunction = isFunction(value);

    // We can't cloneNode fragments that contain checked, in WebKit
    if (
      valueIsFunction ||
      (l > 1 &&
        typeof value === 'string' &&
        !support.checkClone &&
        rchecked.test(value))
    ) {
      return collection.each(function (index) {
        var self = collection.eq(index);
        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }
        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(
        args,
        collection[0].ownerDocument,
        false,
        collection,
        ignored,
      );
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      }

      // Require either new content or an interest in ignored elements to invoke the callback
      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
        hasScripts = scripts.length;

        // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (trac-8070).
        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true);

            // Keep references to cloned scripts for later restoration
            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, 'script'));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument;

          // Reenable scripts
          jQuery.map(scripts, restoreScript);

          // Evaluate executable scripts on first document insertion
          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];
            if (
              rscriptType.test(node.type || '') &&
              !dataPriv.access(node, 'globalEval') &&
              jQuery.contains(doc, node)
            ) {
              if (node.src && (node.type || '').toLowerCase() !== 'module') {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl && !node.noModule) {
                  jQuery._evalUrl(
                    node.src,
                    {
                      nonce: node.nonce || node.getAttribute('nonce'),
                    },
                    doc,
                  );
                }
              } else {
                // Unwrap a CDATA section containing script contents. This shouldn't be
                // needed as in XML documents they're already not visible when
                // inspecting element contents and in HTML documents they have no
                // meaning but we're preserving that logic for backwards compatibility.
                // This will be removed completely in 4.0. See gh-4904.
                DOMEval(node.textContent.replace(rcleanScript, ''), node, doc);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function remove(elem, selector, keepData) {
    var node,
      nodes = selector ? jQuery.filter(selector, elem) : elem,
      i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && isAttached(node)) {
          setGlobalEval(getAll(node, 'script'));
        }
        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function (html) {
      return html;
    },

    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i,
        l,
        srcElements,
        destElements,
        clone = elem.cloneNode(true),
        inPage = isAttached(elem);

      // Fix IE cloning issues
      if (
        !support.noCloneChecked &&
        (elem.nodeType === 1 || elem.nodeType === 11) &&
        !jQuery.isXMLDoc(elem)
      ) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }

      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }

      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }

      // Return the cloned set
      return clone;
    },

    cleanData: function (elems) {
      var data,
        elem,
        type,
        special = jQuery.event.special,
        i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if ((data = elem[dataPriv.expando])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);

                  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }

            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataPriv.expando] = undefined;
          }
          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    },
  });

  jQuery.fn.extend({
    detach: function (selector) {
      return remove(this, selector, true);
    },

    remove: function (selector) {
      return remove(this, selector);
    },

    text: function (value) {
      return access(
        this,
        function (value) {
          return value === undefined
            ? jQuery.text(this)
            : this.empty().each(function () {
                if (
                  this.nodeType === 1 ||
                  this.nodeType === 11 ||
                  this.nodeType === 9
                ) {
                  this.textContent = value;
                }
              });
        },
        null,
        value,
        arguments.length,
      );
    },

    append: function () {
      return domManip(this, arguments, function (elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },

    prepend: function () {
      return domManip(this, arguments, function (elem) {
        if (
          this.nodeType === 1 ||
          this.nodeType === 11 ||
          this.nodeType === 9
        ) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },

    before: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },

    after: function () {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },

    empty: function () {
      var elem,
        i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));

          // Remove any remaining nodes
          elem.textContent = '';
        }
      }

      return this;
    },

    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents =
        deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },

    html: function (value) {
      return access(
        this,
        function (value) {
          var elem = this[0] || {},
            i = 0,
            l = this.length;

          if (value === undefined && elem.nodeType === 1) {
            return elem.innerHTML;
          }

          // See if we can take a shortcut and just use innerHTML
          if (
            typeof value === 'string' &&
            !rnoInnerhtml.test(value) &&
            !wrapMap[(rtagName.exec(value) || ['', ''])[1].toLowerCase()]
          ) {
            value = jQuery.htmlPrefilter(value);

            try {
              for (; i < l; i++) {
                elem = this[i] || {};

                // Remove element nodes and prevent memory leaks
                if (elem.nodeType === 1) {
                  jQuery.cleanData(getAll(elem, false));
                  elem.innerHTML = value;
                }
              }

              elem = 0;

              // If using innerHTML throws an exception, use the fallback method
            } catch (e) {}
          }

          if (elem) {
            this.empty().append(value);
          }
        },
        null,
        value,
        arguments.length,
      );
    },

    replaceWith: function () {
      var ignored = [];

      // Make the changes, replacing each non-ignored context element with the new content
      return domManip(
        this,
        arguments,
        function (elem) {
          var parent = this.parentNode;

          if (jQuery.inArray(this, ignored) < 0) {
            jQuery.cleanData(getAll(this));
            if (parent) {
              parent.replaceChild(elem, this);
            }
          }

          // Force callback invocation
        },
        ignored,
      );
    },
  });

  jQuery.each(
    {
      appendTo: 'append',
      prependTo: 'prepend',
      insertBefore: 'before',
      insertAfter: 'after',
      replaceAll: 'replaceWith',
    },
    function (name, original) {
      jQuery.fn[name] = function (selector) {
        var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

        for (; i <= last; i++) {
          elems = i === last ? this : this.clone(true);
          jQuery(insert[i])[original](elems);

          // Support: Android <=4.0 only, PhantomJS 1 only
          // .get() because push.apply(_, arraylike) throws on ancient WebKit
          push.apply(ret, elems.get());
        }

        return this.pushStack(ret);
      };
    },
  );
  var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');

  var rcustomProp = /^--/;

  var getStyles = function (elem) {
    // Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var swap = function (elem, options, callback) {
    var ret,
      name,
      old = {};

    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.call(elem);

    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  var rboxStyle = new RegExp(cssExpand.join('|'), 'i');

  var whitespace = '[\\x20\\t\\r\\n\\f]';

  var rtrimCSS = new RegExp(
    '^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$',
    'g',
  );

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText =
        'position:absolute;left:-11111px;width:60px;' +
        'margin-top:1px;padding:0;border:0';
      div.style.cssText =
        'position:relative;display:block;box-sizing:border-box;overflow:scroll;' +
        'margin:auto;border:1px;padding:1px;' +
        'width:60%;top:1%';
      documentElement.appendChild(container).appendChild(div);

      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== '1%';

      // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12;

      // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't
      div.style.right = '60%';
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36;

      // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements
      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36;

      // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)
      // Support: Chrome <=64
      // Don't get tricked when zoom affects offsetWidth (gh-4029)
      div.style.position = 'absolute';
      scrollboxSizeVal = roundPixelMeasures(div.offsetWidth / 3) === 12;

      documentElement.removeChild(container);

      // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed
      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
      boxSizingReliableVal,
      scrollboxSizeVal,
      pixelBoxStylesVal,
      reliableTrDimensionsVal,
      reliableMarginLeftVal,
      container = document.createElement('div'),
      div = document.createElement('div');

    // Finish early in limited (non-browser) environments
    if (!div.style) {
      return;
    }

    // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (trac-8908)
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';

    jQuery.extend(support, {
      boxSizingReliable: function () {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function () {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function () {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function () {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function () {
        computeStyleTests();
        return scrollboxSizeVal;
      },

      // Support: IE 9 - 11+, Edge 15 - 18+
      // IE/Edge misreport `getComputedStyle` of table rows with width/height
      // set in CSS while `offset*` properties report correct values.
      // Behavior in IE 9 is more subtle than in newer versions & it passes
      // some versions of this test; make sure not to make it pass there!
      //
      // Support: Firefox 70+
      // Only Firefox includes border widths
      // in computed dimensions. (gh-4529)
      reliableTrDimensions: function () {
        var table, tr, trChild, trStyle;
        if (reliableTrDimensionsVal == null) {
          table = document.createElement('table');
          tr = document.createElement('tr');
          trChild = document.createElement('div');

          table.style.cssText =
            'position:absolute;left:-11111px;border-collapse:separate';
          tr.style.cssText = 'border:1px solid';

          // Support: Chrome 86+
          // Height set through cssText does not get applied.
          // Computed height then comes back as 0.
          tr.style.height = '1px';
          trChild.style.height = '9px';

          // Support: Android 8 Chrome 86+
          // In our bodyBackground.html iframe,
          // display for all div elements is set to "inline",
          // which causes a problem only in Android 8 Chrome 86.
          // Ensuring the div is display: block
          // gets around this issue.
          trChild.style.display = 'block';

          documentElement
            .appendChild(table)
            .appendChild(tr)
            .appendChild(trChild);

          trStyle = window.getComputedStyle(tr);
          reliableTrDimensionsVal =
            parseInt(trStyle.height, 10) +
              parseInt(trStyle.borderTopWidth, 10) +
              parseInt(trStyle.borderBottomWidth, 10) ===
            tr.offsetHeight;

          documentElement.removeChild(table);
        }
        return reliableTrDimensionsVal;
      },
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
      minWidth,
      maxWidth,
      ret,
      isCustomProp = rcustomProp.test(name),
      // Support: Firefox 51+
      // Retrieving style before computed somehow
      // fixes an issue with getting wrong values
      // on detached elements
      style = elem.style;

    computed = computed || getStyles(elem);

    // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, trac-12537)
    //   .css('--customProperty) (gh-3144)
    if (computed) {
      // Support: IE <=9 - 11+
      // IE only supports `"float"` in `getPropertyValue`; in computed styles
      // it's only available as `"cssFloat"`. We no longer modify properties
      // sent to `.css()` apart from camelCasing, so we need to check both.
      // Normally, this would create difference in behavior: if
      // `getPropertyValue` returns an empty string, the value returned
      // by `.css()` would be `undefined`. This is usually the case for
      // disconnected elements. However, in IE even disconnected elements
      // with no styles return `"none"` for `getPropertyValue( "float" )`
      ret = computed.getPropertyValue(name) || computed[name];

      if (isCustomProp && ret) {
        // Support: Firefox 105+, Chrome <=105+
        // Spec requires trimming whitespace for custom properties (gh-4926).
        // Firefox only trims leading whitespace. Chrome just collapses
        // both leading & trailing whitespace to a single space.
        //
        // Fall back to `undefined` if empty string returned.
        // This collapses a missing definition with property defined
        // and set to an empty string but there's no standard API
        // allowing us to differentiate them without a performance penalty
        // and returning `undefined` aligns with older jQuery.
        //
        // rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
        // as whitespace while CSS does not, but this is not a problem
        // because CSS preprocessing replaces them with U+000A LINE FEED
        // (which *is* CSS whitespace)
        // https://www.w3.org/TR/css-syntax-3/#input-preprocessing
        ret = ret.replace(rtrimCSS, '$1') || undefined;
      }

      if (ret === '' && !isAttached(elem)) {
        ret = jQuery.style(elem, name);
      }

      // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values
      if (
        !support.pixelBoxStyles() &&
        rnumnonpx.test(ret) &&
        rboxStyle.test(name)
      ) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;

        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;

        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined
      ? // Support: IE <=9 - 11 only
        // IE returns zIndex value as an integer.
        ret + ''
      : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        }

        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      },
    };
  }

  var cssPrefixes = ['Webkit', 'Moz', 'ms'],
    emptyStyle = document.createElement('div').style,
    vendorProps = {};

  // Return a vendor-prefixed property or undefined
  function vendorPropName(name) {
    // Check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1),
      i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in emptyStyle) {
        return name;
      }
    }
  }

  // Return a potentially-mapped jQuery.cssProps or vendor prefixed property
  function finalPropName(name) {
    var final = jQuery.cssProps[name] || vendorProps[name];

    if (final) {
      return final;
    }
    if (name in emptyStyle) {
      return name;
    }
    return (vendorProps[name] = vendorPropName(name) || name);
  }

  var // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/,
    cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' },
    cssNormalTransform = {
      letterSpacing: '0',
      fontWeight: '400',
    };

  function setPositiveNumber(_elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches
      ? // Guard against undefined "subtract", e.g., when used as in cssHooks
        Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || 'px')
      : value;
  }

  function boxModelAdjustment(
    elem,
    dimension,
    box,
    isBorderBox,
    styles,
    computedVal,
  ) {
    var i = dimension === 'width' ? 1 : 0,
      extra = 0,
      delta = 0;

    // Adjustment may not be necessary
    if (box === (isBorderBox ? 'border' : 'content')) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === 'margin') {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      }

      // If we get here with a content-box, we're seeking "padding" or "border" or "margin"
      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);

        // For "border" or "margin", add border
        if (box !== 'padding') {
          delta += jQuery.css(
            elem,
            'border' + cssExpand[i] + 'Width',
            true,
            styles,
          );

          // But still keep track of it otherwise
        } else {
          extra += jQuery.css(
            elem,
            'border' + cssExpand[i] + 'Width',
            true,
            styles,
          );
        }

        // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"
      } else {
        // For "content", subtract padding
        if (box === 'content') {
          delta -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }

        // For "content" or "padding", subtract border
        if (box !== 'margin') {
          delta -= jQuery.css(
            elem,
            'border' + cssExpand[i] + 'Width',
            true,
            styles,
          );
        }
      }
    }

    // Account for positive content-box scroll gutter when requested by providing computedVal
    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta +=
        Math.max(
          0,
          Math.ceil(
            elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -
              computedVal -
              delta -
              extra -
              0.5,

            // If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
            // Use an explicit zero to avoid NaN (gh-3964)
          ),
        ) || 0;
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
      // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
      // Fake content-box until we know it's needed to know the true value.
      boxSizingNeeded = !support.boxSizingReliable() || extra,
      isBorderBox =
        boxSizingNeeded &&
        jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
      valueIsBorderBox = isBorderBox,
      val = curCSS(elem, dimension, styles),
      offsetProp = 'offset' + dimension[0].toUpperCase() + dimension.slice(1);

    // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.
    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }
      val = 'auto';
    }

    // Support: IE 9 - 11 only
    // Use offsetWidth/offsetHeight for when box sizing is unreliable.
    // In those cases, the computed value can be trusted to be border-box.
    if (
      ((!support.boxSizingReliable() && isBorderBox) ||
        // Support: IE 10 - 11+, Edge 15 - 18+
        // IE/Edge misreport `getComputedStyle` of table rows with width/height
        // set in CSS while `offset*` properties report correct values.
        // Interestingly, in some cases IE 9 doesn't suffer from this issue.
        (!support.reliableTrDimensions() && nodeName(elem, 'tr')) ||
        // Fall back to offsetWidth/offsetHeight when value is "auto"
        // This happens for inline elements with no explicit setting (gh-3571)
        val === 'auto' ||
        // Support: Android <=4.1 - 4.3 only
        // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
        (!parseFloat(val) &&
          jQuery.css(elem, 'display', false, styles) === 'inline')) &&
      // Make sure the element is visible & connected
      elem.getClientRects().length
    ) {
      isBorderBox =
        jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';

      // Where available, offsetWidth/offsetHeight approximate border box dimensions.
      // Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
      // retrieved value as a content box dimension.
      valueIsBorderBox = offsetProp in elem;
      if (valueIsBorderBox) {
        val = elem[offsetProp];
      }
    }

    // Normalize "" and auto
    val = parseFloat(val) || 0;

    // Adjust for the element's box model
    return (
      val +
      boxModelAdjustment(
        elem,
        dimension,
        extra || (isBorderBox ? 'border' : 'content'),
        valueIsBorderBox,
        styles,

        // Provide the current computed size to request scroll gutter calculation (gh-3589)
        val,
      ) +
      'px'
    );
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        },
      },
    },

    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      animationIterationCount: true,
      columnCount: true,
      fillOpacity: true,
      flexGrow: true,
      flexShrink: true,
      fontWeight: true,
      gridArea: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnStart: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowStart: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      widows: true,
      zIndex: true,
      zoom: true,
    },

    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},

    // Get and set the style property on a DOM Node
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }

      // Make sure that we're working with the right name
      var ret,
        type,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name),
        style = elem.style;

      // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Gets hook for the prefixed version, then unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;

        // Convert "+=" or "-=" to relative numbers (trac-7345)
        if (type === 'string' && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret);

          // Fixes bug trac-9237
          type = 'number';
        }

        // Make sure that null and NaN values aren't set (trac-7116)
        if (value == null || value !== value) {
          return;
        }

        // If a number was passed in, add the unit (except for certain CSS properties)
        // The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
        // "px" to a few hardcoded values.
        if (type === 'number' && !isCustomProp) {
          value += (ret && ret[3]) || (jQuery.cssNumber[origName] ? '' : 'px');
        }

        // background-* props affect original clone's values
        if (
          !support.clearCloneStyle &&
          value === '' &&
          name.indexOf('background') === 0
        ) {
          style[name] = 'inherit';
        }

        // If a hook was provided, use that value, otherwise just set the specified value
        if (
          !hooks ||
          !('set' in hooks) ||
          (value = hooks.set(elem, value, extra)) !== undefined
        ) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (
          hooks &&
          'get' in hooks &&
          (ret = hooks.get(elem, false, extra)) !== undefined
        ) {
          return ret;
        }

        // Otherwise just get the value from the style object
        return style[name];
      }
    },

    css: function (elem, name, extra, styles) {
      var val,
        num,
        hooks,
        origName = camelCase(name),
        isCustomProp = rcustomProp.test(name);

      // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.
      if (!isCustomProp) {
        name = finalPropName(origName);
      }

      // Try prefixed name followed by the unprefixed name
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }

      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }

      // Convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }

      // Make numeric if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    },
  });

  jQuery.each(['height', 'width'], function (_i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, 'display')) &&
            // Support: Safari 8+
            // Table columns in Safari have non-zero offsetWidth & zero
            // getBoundingClientRect().width unless display is changed.
            // Support: IE <=11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            (!elem.getClientRects().length ||
              !elem.getBoundingClientRect().width)
            ? swap(elem, cssShow, function () {
                return getWidthOrHeight(elem, dimension, extra);
              })
            : getWidthOrHeight(elem, dimension, extra);
        }
      },

      set: function (elem, value, extra) {
        var matches,
          styles = getStyles(elem),
          // Only read styles.position if the test has a chance to fail
          // to avoid forcing a reflow.
          scrollboxSizeBuggy =
            !support.scrollboxSize() && styles.position === 'absolute',
          // To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
          boxSizingNeeded = scrollboxSizeBuggy || extra,
          isBorderBox =
            boxSizingNeeded &&
            jQuery.css(elem, 'boxSizing', false, styles) === 'border-box',
          subtract = extra
            ? boxModelAdjustment(elem, dimension, extra, isBorderBox, styles)
            : 0;

        // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)
        if (isBorderBox && scrollboxSizeBuggy) {
          subtract -= Math.ceil(
            elem['offset' + dimension[0].toUpperCase() + dimension.slice(1)] -
              parseFloat(styles[dimension]) -
              boxModelAdjustment(elem, dimension, 'border', false, styles) -
              0.5,
          );
        }

        // Convert to pixels if value adjustment is needed
        if (
          subtract &&
          (matches = rcssNum.exec(value)) &&
          (matches[3] || 'px') !== 'px'
        ) {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      },
    };
  });

  jQuery.cssHooks.marginLeft = addGetHookIf(
    support.reliableMarginLeft,
    function (elem, computed) {
      if (computed) {
        return (
          (parseFloat(curCSS(elem, 'marginLeft')) ||
            elem.getBoundingClientRect().left -
              swap(elem, { marginLeft: 0 }, function () {
                return elem.getBoundingClientRect().left;
              })) + 'px'
        );
      }
    },
  );

  // These hooks are used by animate to expand properties
  jQuery.each(
    {
      margin: '',
      padding: '',
      border: 'Width',
    },
    function (prefix, suffix) {
      jQuery.cssHooks[prefix + suffix] = {
        expand: function (value) {
          var i = 0,
            expanded = {},
            // Assumes a single number if not a string
            parts = typeof value === 'string' ? value.split(' ') : [value];

          for (; i < 4; i++) {
            expanded[prefix + cssExpand[i] + suffix] =
              parts[i] || parts[i - 2] || parts[0];
          }

          return expanded;
        },
      };

      if (prefix !== 'margin') {
        jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
      }
    },
  );

  jQuery.fn.extend({
    css: function (name, value) {
      return access(
        this,
        function (elem, name, value) {
          var styles,
            len,
            map = {},
            i = 0;

          if (Array.isArray(name)) {
            styles = getStyles(elem);
            len = name.length;

            for (; i < len; i++) {
              map[name[i]] = jQuery.css(elem, name[i], false, styles);
            }

            return map;
          }

          return value !== undefined
            ? jQuery.style(elem, name, value)
            : jQuery.css(elem, name);
        },
        name,
        value,
        arguments.length > 1,
      );
    },
  });

  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;

  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || jQuery.easing._default;
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];

      return hooks && hooks.get
        ? hooks.get(this)
        : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased,
        hooks = Tween.propHooks[this.prop];

      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](
          percent,
          this.options.duration * percent,
          0,
          1,
          this.options.duration,
        );
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;

      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }

      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    },
  };

  Tween.prototype.init.prototype = Tween.prototype;

  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;

        // Use a property on the element directly when it is not a DOM element,
        // or when there is no matching style property that exists.
        if (
          tween.elem.nodeType !== 1 ||
          (tween.elem[tween.prop] != null &&
            tween.elem.style[tween.prop] == null)
        ) {
          return tween.elem[tween.prop];
        }

        // Passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails.
        // Simple values such as "10px" are parsed to Float;
        // complex values such as "rotate(1rad)" are returned as-is.
        result = jQuery.css(tween.elem, tween.prop, '');

        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // Use step hook for back compat.
        // Use cssHook if its there.
        // Use .style if available and use plain properties where available.
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (
          tween.elem.nodeType === 1 &&
          (jQuery.cssHooks[tween.prop] ||
            tween.elem.style[finalPropName(tween.prop)] != null)
        ) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      },
    },
  };

  // Support: IE <=9 only
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    },
  };

  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    },
    _default: 'swing',
  };

  jQuery.fx = Tween.prototype.init;

  // Back compat <1.8 extension point
  jQuery.fx.step = {};

  var fxNow,
    inProgress,
    rfxtypes = /^(?:toggle|show|hide)$/,
    rrun = /queueHooks$/;

  function schedule() {
    if (inProgress) {
      if (document.hidden === false && window.requestAnimationFrame) {
        window.requestAnimationFrame(schedule);
      } else {
        window.setTimeout(schedule, jQuery.fx.interval);
      }

      jQuery.fx.tick();
    }
  }

  // Animations created synchronously will run synchronously
  function createFxNow() {
    window.setTimeout(function () {
      fxNow = undefined;
    });
    return (fxNow = Date.now());
  }

  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which,
      i = 0,
      attrs = { height: type };

    // If we include width, step value is 1 to do all cssExpand values,
    // otherwise step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }

    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }

    return attrs;
  }

  function createTween(value, prop, animation) {
    var tween,
      collection = (Animation.tweeners[prop] || []).concat(
        Animation.tweeners['*'],
      ),
      index = 0,
      length = collection.length;
    for (; index < length; index++) {
      if ((tween = collection[index].call(animation, prop, value))) {
        // We're done with this property
        return tween;
      }
    }
  }

  function defaultPrefilter(elem, props, opts) {
    var prop,
      value,
      toggle,
      hooks,
      oldfire,
      propTween,
      restoreDisplay,
      display,
      isBox = 'width' in props || 'height' in props,
      anim = this,
      orig = {},
      style = elem.style,
      hidden = elem.nodeType && isHiddenWithinTree(elem),
      dataShow = dataPriv.get(elem, 'fxshow');

    // Queue-skipping animations hijack the fx hooks
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;

      anim.always(function () {
        // Ensure the complete handler is called before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }

    // Detect show/hide animations
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.test(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // Pretend to be hidden if this is a "show" and
          // there is still data from a stopped show/hide
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;

            // Ignore all other no-op show/hide data
          } else {
            continue;
          }
        }
        orig[prop] = (dataShow && dataShow[prop]) || jQuery.style(elem, prop);
      }
    }

    // Bail out if this is a no-op like .hide().hide()
    propTween = !jQuery.isEmptyObject(props);
    if (!propTween && jQuery.isEmptyObject(orig)) {
      return;
    }

    // Restrict "overflow" and "display" styles during box animations
    if (isBox && elem.nodeType === 1) {
      // Support: IE <=9 - 11, Edge 12 - 15
      // Record all 3 overflow attributes because IE does not infer the shorthand
      // from identically-valued overflowX and overflowY and Edge just mirrors
      // the overflowX value there.
      opts.overflow = [style.overflow, style.overflowX, style.overflowY];

      // Identify a display type, preferring old show/hide data over the CSS cascade
      restoreDisplay = dataShow && dataShow.display;
      if (restoreDisplay == null) {
        restoreDisplay = dataPriv.get(elem, 'display');
      }
      display = jQuery.css(elem, 'display');
      if (display === 'none') {
        if (restoreDisplay) {
          display = restoreDisplay;
        } else {
          // Get nonempty value(s) by temporarily forcing visibility
          showHide([elem], true);
          restoreDisplay = elem.style.display || restoreDisplay;
          display = jQuery.css(elem, 'display');
          showHide([elem]);
        }
      }

      // Animate inline elements as inline-block
      if (
        display === 'inline' ||
        (display === 'inline-block' && restoreDisplay != null)
      ) {
        if (jQuery.css(elem, 'float') === 'none') {
          // Restore the original display value at the end of pure show/hide animations
          if (!propTween) {
            anim.done(function () {
              style.display = restoreDisplay;
            });
            if (restoreDisplay == null) {
              display = style.display;
              restoreDisplay = display === 'none' ? '' : display;
            }
          }
          style.display = 'inline-block';
        }
      }
    }

    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }

    // Implement show/hide animations
    propTween = false;
    for (prop in orig) {
      // General show/hide setup for this element animation
      if (!propTween) {
        if (dataShow) {
          if ('hidden' in dataShow) {
            hidden = dataShow.hidden;
          }
        } else {
          dataShow = dataPriv.access(elem, 'fxshow', {
            display: restoreDisplay,
          });
        }

        // Store hidden/visible for toggle so `.stop().toggle()` "reverses"
        if (toggle) {
          dataShow.hidden = !hidden;
        }

        // Show elements before animating them
        if (hidden) {
          showHide([elem], true);
        }

        /* eslint-disable no-loop-func */

        anim.done(function () {
          /* eslint-enable no-loop-func */

          // The final step of a "hide" animation is actually hiding the element
          if (!hidden) {
            showHide([elem]);
          }
          dataPriv.remove(elem, 'fxshow');
          for (prop in orig) {
            jQuery.style(elem, prop, orig[prop]);
          }
        });
      }

      // Per-property setup
      propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
      if (!(prop in dataShow)) {
        dataShow[prop] = propTween.start;
        if (hidden) {
          propTween.end = propTween.start;
          propTween.start = 0;
        }
      }
    }
  }

  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;

    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (Array.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }

      if (index !== name) {
        props[name] = value;
        delete props[index];
      }

      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];

        // Not quite $.extend, this won't overwrite existing keys.
        // Reusing 'index' because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }

  function Animation(elem, properties, options) {
    var result,
      stopped,
      index = 0,
      length = Animation.prefilters.length,
      deferred = jQuery.Deferred().always(function () {
        // Don't match elem in the :animated selector
        delete tick.elem;
      }),
      tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(),
          remaining = Math.max(
            0,
            animation.startTime + animation.duration - currentTime,
          ),
          // Support: Android 2.3 only
          // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
          temp = remaining / animation.duration || 0,
          percent = 1 - temp,
          index = 0,
          length = animation.tweens.length;

        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }

        deferred.notifyWith(elem, [animation, percent, remaining]);

        // If there's more to do, yield
        if (percent < 1 && length) {
          return remaining;
        }

        // If this was an empty animation, synthesize a final progress notification
        if (!length) {
          deferred.notifyWith(elem, [animation, 1, 0]);
        }

        // Resolve the animation and report its conclusion
        deferred.resolveWith(elem, [animation]);
        return false;
      },
      animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(
          true,
          {
            specialEasing: {},
            easing: jQuery.easing._default,
          },
          options,
        ),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(
            elem,
            animation.opts,
            prop,
            end,
            animation.opts.specialEasing[prop] || animation.opts.easing,
          );
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // If we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }

          // Resolve when we played the last frame; otherwise, reject
          if (gotoEnd) {
            deferred.notifyWith(elem, [animation, 1, 0]);
            deferred.resolveWith(elem, [animation, gotoEnd]);
          } else {
            deferred.rejectWith(elem, [animation, gotoEnd]);
          }
          return this;
        },
      }),
      props = animation.props;

    propFilter(props, animation.opts.specialEasing);

    for (; index < length; index++) {
      result = Animation.prefilters[index].call(
        animation,
        elem,
        props,
        animation.opts,
      );
      if (result) {
        if (isFunction(result.stop)) {
          jQuery._queueHooks(
            animation.elem,
            animation.opts.queue,
          ).stop = result.stop.bind(result);
        }
        return result;
      }
    }

    jQuery.map(props, createTween, animation);

    if (isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }

    // Attach callbacks from options
    animation
      .progress(animation.opts.progress)
      .done(animation.opts.done, animation.opts.complete)
      .fail(animation.opts.fail)
      .always(animation.opts.always);

    jQuery.fx.timer(
      jQuery.extend(tick, {
        elem: elem,
        anim: animation,
        queue: animation.opts.queue,
      }),
    );

    return animation;
  }

  jQuery.Animation = jQuery.extend(Animation, {
    tweeners: {
      '*': [
        function (prop, value) {
          var tween = this.createTween(prop, value);
          adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
          return tween;
        },
      ],
    },

    tweener: function (props, callback) {
      if (isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.match(rnothtmlwhite);
      }

      var prop,
        index = 0,
        length = props.length;

      for (; index < length; index++) {
        prop = props[index];
        Animation.tweeners[prop] = Animation.tweeners[prop] || [];
        Animation.tweeners[prop].unshift(callback);
      }
    },

    prefilters: [defaultPrefilter],

    prefilter: function (callback, prepend) {
      if (prepend) {
        Animation.prefilters.unshift(callback);
      } else {
        Animation.prefilters.push(callback);
      }
    },
  });

  jQuery.speed = function (speed, easing, fn) {
    var opt =
      speed && typeof speed === 'object'
        ? jQuery.extend({}, speed)
        : {
            complete: fn || (!fn && easing) || (isFunction(speed) && speed),
            duration: speed,
            easing: (fn && easing) || (easing && !isFunction(easing) && easing),
          };

    // Go to the end state if fx are off
    if (jQuery.fx.off) {
      opt.duration = 0;
    } else {
      if (typeof opt.duration !== 'number') {
        if (opt.duration in jQuery.fx.speeds) {
          opt.duration = jQuery.fx.speeds[opt.duration];
        } else {
          opt.duration = jQuery.fx.speeds._default;
        }
      }
    }

    // Normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }

    // Queueing
    opt.old = opt.complete;

    opt.complete = function () {
      if (isFunction(opt.old)) {
        opt.old.call(this);
      }

      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };

    return opt;
  };

  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // Show any hidden elements after setting opacity to 0
      return (
        this.filter(isHiddenWithinTree)
          .css('opacity', 0)
          .show()

          // Animate to the value specified
          .end()
          .animate({ opacity: to }, speed, easing, callback)
      );
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop),
        optall = jQuery.speed(speed, easing, callback),
        doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);

          // Empty animations, or finishing resolves immediately
          if (empty || dataPriv.get(this, 'finish')) {
            anim.stop(true);
          }
        };

      doAnimation.finish = doAnimation;

      return empty || optall.queue === false
        ? this.each(doAnimation)
        : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };

      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue) {
        this.queue(type || 'fx', []);
      }

      return this.each(function () {
        var dequeue = true,
          index = type != null && type + 'queueHooks',
          timers = jQuery.timers,
          data = dataPriv.get(this);

        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }

        for (index = timers.length; index--; ) {
          if (
            timers[index].elem === this &&
            (type == null || timers[index].queue === type)
          ) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }

        // Start the next in the queue if the last step wasn't forced.
        // Timers currently will call their complete callbacks, which
        // will dequeue but only if they were gotoEnd.
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index,
          data = dataPriv.get(this),
          queue = data[type + 'queue'],
          hooks = data[type + 'queueHooks'],
          timers = jQuery.timers,
          length = queue ? queue.length : 0;

        // Enable finishing flag on private data
        data.finish = true;

        // Empty the queue first
        jQuery.queue(this, type, []);

        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }

        // Look for any active animations, and finish them
        for (index = timers.length; index--; ) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }

        // Look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }

        // Turn off finishing flag
        delete data.finish;
      });
    },
  });

  jQuery.each(['toggle', 'show', 'hide'], function (_i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean'
        ? cssFn.apply(this, arguments)
        : this.animate(genFx(name, true), speed, easing, callback);
    };
  });

  // Generate shortcuts for custom animations
  jQuery.each(
    {
      slideDown: genFx('show'),
      slideUp: genFx('hide'),
      slideToggle: genFx('toggle'),
      fadeIn: { opacity: 'show' },
      fadeOut: { opacity: 'hide' },
      fadeToggle: { opacity: 'toggle' },
    },
    function (name, props) {
      jQuery.fn[name] = function (speed, easing, callback) {
        return this.animate(props, speed, easing, callback);
      };
    },
  );

  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer,
      i = 0,
      timers = jQuery.timers;

    fxNow = Date.now();

    for (; i < timers.length; i++) {
      timer = timers[i];

      // Run the timer and safely remove it when done (allowing for external removal)
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }

    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };

  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    jQuery.fx.start();
  };

  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (inProgress) {
      return;
    }

    inProgress = true;
    schedule();
  };

  jQuery.fx.stop = function () {
    inProgress = null;
  };

  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,

    // Default speed
    _default: 400,
  };

  // Based off of the plugin by Clint Helfers, with permission.
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || 'fx';

    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);
      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document.createElement('input'),
      select = document.createElement('select'),
      opt = select.appendChild(document.createElement('option'));

    input.type = 'checkbox';

    // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"
    support.checkOn = input.value !== '';

    // Support: IE <=11 only
    // Must access selectedIndex to make default options select
    support.optSelected = opt.selected;

    // Support: IE <=11 only
    // An input loses its value after becoming a radio
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
  })();

  var boolHook,
    attrHandle = jQuery.expr.attrHandle;

  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },

    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    },
  });

  jQuery.extend({
    attr: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set attributes on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === 'undefined') {
        return jQuery.prop(elem, name, value);
      }

      // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks =
          jQuery.attrHooks[name.toLowerCase()] ||
          (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (
          hooks &&
          'set' in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        elem.setAttribute(name, value + '');
        return value;
      }

      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name);

      // Non-existent attributes return null, we normalize to undefined
      return ret == null ? undefined : ret;
    },

    attrHooks: {
      type: {
        set: function (elem, value) {
          if (
            !support.radioValue &&
            value === 'radio' &&
            nodeName(elem, 'input')
          ) {
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        },
      },
    },

    removeAttr: function (elem, value) {
      var name,
        i = 0,
        // Attribute names can contain non-HTML whitespace characters
        // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
        attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while ((name = attrNames[i++])) {
          elem.removeAttribute(name);
        }
      }
    },
  });

  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    },
  };

  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (_i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
        handle,
        lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }
      return ret;
    };
  });

  var rfocusable = /^(?:input|select|textarea|button)$/i,
    rclickable = /^(?:a|area)$/i;

  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },

    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    },
  });

  jQuery.extend({
    prop: function (elem, name, value) {
      var ret,
        hooks,
        nType = elem.nodeType;

      // Don't get/set properties on text, comment and attribute nodes
      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (
          hooks &&
          'set' in hooks &&
          (ret = hooks.set(elem, value, name)) !== undefined
        ) {
          return ret;
        }

        return (elem[name] = value);
      }

      if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },

    propHooks: {
      tabIndex: {
        get: function (elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // Use proper attribute retrieval (trac-12072)
          var tabindex = jQuery.find.attr(elem, 'tabindex');

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (
            rfocusable.test(elem.nodeName) ||
            (rclickable.test(elem.nodeName) && elem.href)
          ) {
            return 0;
          }

          return -1;
        },
      },
    },

    propFix: {
      for: 'htmlFor',
      class: 'className',
    },
  });

  // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      },
      set: function (elem) {
        /* eslint no-unused-expressions: "off" */

        var parent = elem.parentNode;
        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      },
    };
  }

  jQuery.each(
    [
      'tabIndex',
      'readOnly',
      'maxLength',
      'cellSpacing',
      'cellPadding',
      'rowSpan',
      'colSpan',
      'useMap',
      'frameBorder',
      'contentEditable',
    ],
    function () {
      jQuery.propFix[this.toLowerCase()] = this;
    },
  );

  // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(' ');
  }

  function getClass(elem) {
    return (elem.getAttribute && elem.getAttribute('class')) || '';
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === 'string') {
      return value.match(rnothtmlwhite) || [];
    }
    return [];
  }

  jQuery.fn.extend({
    addClass: function (value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);
          cur = this.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];
              if (cur.indexOf(' ' + className + ' ') < 0) {
                cur += className + ' ';
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute('class', finalValue);
            }
          }
        });
      }

      return this;
    },

    removeClass: function (value) {
      var classNames, cur, curValue, className, i, finalValue;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr('class', '');
      }

      classNames = classesToArray(value);

      if (classNames.length) {
        return this.each(function () {
          curValue = getClass(this);

          // This expression is here for better compressibility (see addClass)
          cur = this.nodeType === 1 && ' ' + stripAndCollapse(curValue) + ' ';

          if (cur) {
            for (i = 0; i < classNames.length; i++) {
              className = classNames[i];

              // Remove *all* instances
              while (cur.indexOf(' ' + className + ' ') > -1) {
                cur = cur.replace(' ' + className + ' ', ' ');
              }
            }

            // Only assign if different to avoid unneeded rendering.
            finalValue = stripAndCollapse(cur);
            if (curValue !== finalValue) {
              this.setAttribute('class', finalValue);
            }
          }
        });
      }

      return this;
    },

    toggleClass: function (value, stateVal) {
      var classNames,
        className,
        i,
        self,
        type = typeof value,
        isValidValue = type === 'string' || Array.isArray(value);

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(
            value.call(this, i, getClass(this), stateVal),
            stateVal,
          );
        });
      }

      if (typeof stateVal === 'boolean' && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      classNames = classesToArray(value);

      return this.each(function () {
        if (isValidValue) {
          // Toggle individual class names
          self = jQuery(this);

          for (i = 0; i < classNames.length; i++) {
            className = classNames[i];

            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }

          // Toggle whole class name
        } else if (value === undefined || type === 'boolean') {
          className = getClass(this);
          if (className) {
            // Store className if set
            dataPriv.set(this, '__className__', className);
          }

          // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          if (this.setAttribute) {
            this.setAttribute(
              'class',
              className || value === false
                ? ''
                : dataPriv.get(this, '__className__') || '',
            );
          }
        }
      });
    },

    hasClass: function (selector) {
      var className,
        elem,
        i = 0;

      className = ' ' + selector + ' ';
      while ((elem = this[i++])) {
        if (
          elem.nodeType === 1 &&
          (' ' + stripAndCollapse(getClass(elem)) + ' ').indexOf(className) > -1
        ) {
          return true;
        }
      }

      return false;
    },
  });

  var rreturn = /\r/g;

  jQuery.fn.extend({
    val: function (value) {
      var hooks,
        ret,
        valueIsFunction,
        elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks =
            jQuery.valHooks[elem.type] ||
            jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (
            hooks &&
            'get' in hooks &&
            (ret = hooks.get(elem, 'value')) !== undefined
          ) {
            return ret;
          }

          ret = elem.value;

          // Handle most common string cases
          if (typeof ret === 'string') {
            return ret.replace(rreturn, '');
          }

          // Handle cases where value is null/undef or number
          return ret == null ? '' : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);

      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }

        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }

        hooks =
          jQuery.valHooks[this.type] ||
          jQuery.valHooks[this.nodeName.toLowerCase()];

        // If set returns undefined, fall back to normal setting
        if (
          !hooks ||
          !('set' in hooks) ||
          hooks.set(this, val, 'value') === undefined
        ) {
          this.value = val;
        }
      });
    },
  });

  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, 'value');
          return val != null
            ? val
            : // Support: IE <=10 - 11 only
              // option.text throws exceptions (trac-14686, trac-14858)
              // Strip and collapse whitespace
              // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
              stripAndCollapse(jQuery.text(elem));
        },
      },
      select: {
        get: function (elem) {
          var value,
            option,
            i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === 'select-one',
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];

            // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (trac-2551)
            if (
              (option.selected || i === index) &&
              // Don't return options that are disabled or in a disabled optgroup
              !option.disabled &&
              (!option.parentNode.disabled ||
                !nodeName(option.parentNode, 'optgroup'))
            ) {
              // Get the specific value for the option
              value = jQuery(option).val();

              // We don't need an array for one selects
              if (one) {
                return value;
              }

              // Multi-Selects return an array
              values.push(value);
            }
          }

          return values;
        },

        set: function (elem, value) {
          var optionSet,
            option,
            options = elem.options,
            values = jQuery.makeArray(value),
            i = options.length;

          while (i--) {
            option = options[i];

            /* eslint-disable no-cond-assign */

            if (
              (option.selected =
                jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1)
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        },
      },
    },
  });

  // Radios and checkboxes getter/setter
  jQuery.each(['radio', 'checkbox'], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (Array.isArray(value)) {
          return (elem.checked =
            jQuery.inArray(jQuery(elem).val(), value) > -1);
        }
      },
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });

  // Return jQuery for attributes-only inclusion

  support.focusin = 'onfocusin' in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
    stopPropagationCallback = function (e) {
      e.stopPropagation();
    };

  jQuery.extend(jQuery.event, {
    trigger: function (event, data, elem, onlyHandlers) {
      var i,
        cur,
        tmp,
        bubbleType,
        ontype,
        handle,
        special,
        lastElement,
        eventPath = [elem || document],
        type = hasOwn.call(event, 'type') ? event.type : event,
        namespaces = hasOwn.call(event, 'namespace')
          ? event.namespace.split('.')
          : [];

      cur = lastElement = tmp = elem = elem || document;

      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }

      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf('.') > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;

      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando]
        ? event
        : new jQuery.Event(type, typeof event === 'object' && event);

      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.rnamespace = event.namespace
        ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)')
        : null;

      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }

      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);

      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (
        !onlyHandlers &&
        special.trigger &&
        special.trigger.apply(elem, data) === false
      ) {
        return;
      }

      // Determine event propagation path in advance, per W3C events spec (trac-9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }

        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }

      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type;

        // jQuery handler
        handle =
          (dataPriv.get(cur, 'events') || Object.create(null))[event.type] &&
          dataPriv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }

        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;

      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if (
          (!special._default ||
            special._default.apply(eventPath.pop(), data) === false) &&
          acceptData(elem)
        ) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (trac-6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            }

            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },

    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function (type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true,
      });

      jQuery.event.trigger(e, null, elem);
    },
  });

  jQuery.fn.extend({
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    },
  });

  // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
  if (!support.focusin) {
    jQuery.each({ focus: 'focusin', blur: 'focusout' }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function () {
          // Handle: regular nodes (via `this.ownerDocument`), window
          // (via `this.document`) & document (via `this`).
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this.document || this,
            attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        },
      };
    });
  }
  var location = window.location;

  var nonce = { guid: Date.now() };

  var rquery = /\?/;

  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, parserErrorElem;
    if (!data || typeof data !== 'string') {
      return null;
    }

    // Support: IE 9 - 11 only
    // IE throws on parseFromString with invalid input.
    try {
      xml = new window.DOMParser().parseFromString(data, 'text/xml');
    } catch (e) {}

    parserErrorElem = xml && xml.getElementsByTagName('parsererror')[0];
    if (!xml || parserErrorElem) {
      jQuery.error(
        'Invalid XML: ' +
          (parserErrorElem
            ? jQuery
                .map(parserErrorElem.childNodes, function (el) {
                  return el.textContent;
                })
                .join('\n')
            : data),
      );
    }
    return xml;
  };

  var rbracket = /\[\]$/,
    rCRLF = /\r?\n/g,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
    rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(
            prefix + '[' + (typeof v === 'object' && v != null ? i : '') + ']',
            v,
            traditional,
            add,
          );
        }
      });
    } else if (!traditional && toType(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }

  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix,
      s = [],
      add = function (key, valueOrFunction) {
        // If value is a function, invoke it and use its return value
        var value = isFunction(valueOrFunction)
          ? valueOrFunction()
          : valueOrFunction;

        s[s.length] =
          encodeURIComponent(key) +
          '=' +
          encodeURIComponent(value == null ? '' : value);
      };

    if (a == null) {
      return '';
    }

    // If an array was passed in, assume that it is an array of form elements.
    if (Array.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }

    // Return the resulting serialization
    return s.join('&');
  };

  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      })
        .filter(function () {
          var type = this.type;

          // Use .is( ":disabled" ) so that fieldset[disabled] works
          return (
            this.name &&
            !jQuery(this).is(':disabled') &&
            rsubmittable.test(this.nodeName) &&
            !rsubmitterTypes.test(type) &&
            (this.checked || !rcheckableType.test(type))
          );
        })
        .map(function (_i, elem) {
          var val = jQuery(this).val();

          if (val == null) {
            return null;
          }

          if (Array.isArray(val)) {
            return jQuery.map(val, function (val) {
              return { name: elem.name, value: val.replace(rCRLF, '\r\n') };
            });
          }

          return { name: elem.name, value: val.replace(rCRLF, '\r\n') };
        })
        .get();
    },
  });

  var r20 = /%20/g,
    rhash = /#.*$/,
    rantiCache = /([?&])_=[^&]*/,
    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // trac-7653, trac-8125, trac-8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
    rnoContent = /^(?:GET|HEAD)$/,
    rprotocol = /^\/\//,
    /* Prefilters
     * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
     * 2) These are called:
     *    - BEFORE asking for a transport
     *    - AFTER param serialization (s.data is a string if s.processData is true)
     * 3) key is the dataType
     * 4) the catchall symbol "*" can be used
     * 5) execution will start with transport dataType and THEN continue down to "*" if needed
     */
    prefilters = {},
    /* Transports bindings
     * 1) key is the dataType
     * 2) the catchall symbol "*" can be used
     * 3) selection will start with transport dataType and THEN go to "*" if needed
     */
    transports = {},
    // Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
    allTypes = '*/'.concat('*'),
    // Anchor tag for parsing the document origin
    originAnchor = document.createElement('a');

  originAnchor.href = location.href;

  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }

      var dataType,
        i = 0,
        dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

      if (isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while ((dataType = dataTypes[i++])) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);

            // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }

  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(
    structure,
    options,
    originalOptions,
    jqXHR,
  ) {
    var inspected = {},
      seekingTransport = structure === transports;

    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(
          options,
          originalOptions,
          jqXHR,
        );
        if (
          typeof dataTypeOrTransport === 'string' &&
          !seekingTransport &&
          !inspected[dataTypeOrTransport]
        ) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }

    return inspect(options.dataTypes[0]) || (!inspected['*'] && inspect('*'));
  }

  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes trac-9887
  function ajaxExtend(target, src) {
    var key,
      deep,
      flatOptions = jQuery.ajaxSettings.flatOptions || {};

    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }

    return target;
  }

  /* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct,
      type,
      finalDataType,
      firstDataType,
      contents = s.contents,
      dataTypes = s.dataTypes;

    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }

    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }

    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }

      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }

    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }

  /* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2,
      current,
      conv,
      tmp,
      prev,
      converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();

    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }

    current = dataTypes.shift();

    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }

      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }

      prev = current;
      current = dataTypes.shift();

      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;

          // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];

          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv =
                  converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];

                    // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }

          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s.throws) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv
                    ? e
                    : 'No conversion from ' + prev + ' to ' + current,
                };
              }
            }
          }
        }
      }
    }

    return { state: 'success', data: response };
  }

  jQuery.extend({
    // Counter for holding the number of active queries
    active: 0,

    // Last-Modified header cache for next request
    lastModified: {},
    etag: {},

    ajaxSettings: {
      url: location.href,
      type: 'GET',
      isLocal: rlocalProtocol.test(location.protocol),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',

      /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript',
      },

      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/,
      },

      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON',
      },

      // Data converters
      // Keys separate source (or catchall "*") and destination types with a single space
      converters: {
        // Convert anything to text
        '* text': String,

        // Text to html (true = no transformation)
        'text html': true,

        // Evaluate text as a json expression
        'text json': JSON.parse,

        // Parse text as xml
        'text xml': jQuery.parseXML,
      },

      // For options that shouldn't be deep extended:
      // you can add your own custom options here if
      // and when you create one that shouldn't be
      // deep extended (see ajaxExtend)
      flatOptions: {
        url: true,
        context: true,
      },
    },

    // Creates a full fledged settings object into target
    // with both ajaxSettings and settings fields.
    // If target is omitted, writes into ajaxSettings.
    ajaxSetup: function (target, settings) {
      return settings
        ? // Building a settings object
          ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings)
        : // Extending ajaxSettings
          ajaxExtend(jQuery.ajaxSettings, target);
    },

    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),

    // Main method
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }

      // Force options to be an object
      options = options || {};

      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString,
        responseHeaders,
        // timeout handle
        timeoutTimer,
        // Url cleanup var
        urlAnchor,
        // Request state (becomes false upon send and true upon completion)
        completed,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // uncached part of the url
        uncached,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext =
          s.context && (callbackContext.nodeType || callbackContext.jquery)
            ? jQuery(callbackContext)
            : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(),
        completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {},
        requestHeadersNames = {},
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,

          // Builds headers hashtable if needed
          getResponseHeader: function (key) {
            var match;
            if (completed) {
              if (!responseHeaders) {
                responseHeaders = {};
                while ((match = rheaders.exec(responseHeadersString))) {
                  responseHeaders[match[1].toLowerCase() + ' '] = (
                    responseHeaders[match[1].toLowerCase() + ' '] || []
                  ).concat(match[2]);
                }
              }
              match = responseHeaders[key.toLowerCase() + ' '];
            }
            return match == null ? null : match.join(', ');
          },

          // Raw string
          getAllResponseHeaders: function () {
            return completed ? responseHeadersString : null;
          },

          // Caches the header
          setRequestHeader: function (name, value) {
            if (completed == null) {
              name = requestHeadersNames[name.toLowerCase()] =
                requestHeadersNames[name.toLowerCase()] || name;
              requestHeaders[name] = value;
            }
            return this;
          },

          // Overrides response content-type header
          overrideMimeType: function (type) {
            if (completed == null) {
              s.mimeType = type;
            }
            return this;
          },

          // Status-dependent callbacks
          statusCode: function (map) {
            var code;
            if (map) {
              if (completed) {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              } else {
                // Lazy-add the new callbacks in a way that preserves old ones
                for (code in map) {
                  statusCode[code] = [statusCode[code], map[code]];
                }
              }
            }
            return this;
          },

          // Cancel the request
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          },
        };

      // Attach deferreds
      deferred.promise(jqXHR);

      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (trac-10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || location.href) + '').replace(
        rprotocol,
        location.protocol + '//',
      );

      // Alias method option to type as per ticket trac-12004
      s.type = options.method || options.type || s.method || s.type;

      // Extract dataTypes list
      s.dataTypes = (s.dataType || '*').toLowerCase().match(rnothtmlwhite) || [
        '',
      ];

      // A cross-domain request is in order when the origin doesn't match the current origin.
      if (s.crossDomain == null) {
        urlAnchor = document.createElement('a');

        // Support: IE <=8 - 11, Edge 12 - 15
        // IE throws exception on accessing the href property if url is malformed,
        // e.g. http://example.com:80x/
        try {
          urlAnchor.href = s.url;

          // Support: IE <=8 - 11 only
          // Anchor's host property isn't correctly set when s.url is relative
          urlAnchor.href = urlAnchor.href;
          s.crossDomain =
            originAnchor.protocol + '//' + originAnchor.host !==
            urlAnchor.protocol + '//' + urlAnchor.host;
        } catch (e) {
          // If there is an error parsing the URL, assume it is crossDomain,
          // it can be rejected by the transport if it is invalid
          s.crossDomain = true;
        }
      }

      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }

      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

      // If request was aborted inside a prefilter, stop there
      if (completed) {
        return jqXHR;
      }

      // We can fire global events as of now if asked to
      // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
      fireGlobals = jQuery.event && s.global;

      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }

      // Uppercase the type
      s.type = s.type.toUpperCase();

      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);

      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      // Remove hash to simplify url manipulation
      cacheURL = s.url.replace(rhash, '');

      // More options handling for requests with no content
      if (!s.hasContent) {
        // Remember the hash so we can put it back
        uncached = s.url.slice(cacheURL.length);

        // If data is available and should be processed, append data to url
        if (s.data && (s.processData || typeof s.data === 'string')) {
          cacheURL += (rquery.test(cacheURL) ? '&' : '?') + s.data;

          // trac-9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }

        // Add or update anti-cache param if needed
        if (s.cache === false) {
          cacheURL = cacheURL.replace(rantiCache, '$1');
          uncached =
            (rquery.test(cacheURL) ? '&' : '?') +
            '_=' +
            nonce.guid++ +
            uncached;
        }

        // Put hash and anti-cache on the URL that will be requested (gh-1732)
        s.url = cacheURL + uncached;

        // Change '%20' to '+' if this is encoded form body content (gh-2658)
      } else if (
        s.data &&
        s.processData &&
        (s.contentType || '').indexOf('application/x-www-form-urlencoded') === 0
      ) {
        s.data = s.data.replace(r20, '+');
      }

      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader(
            'If-Modified-Since',
            jQuery.lastModified[cacheURL],
          );
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }

      // Set the correct header, if data is being sent
      if (
        (s.data && s.hasContent && s.contentType !== false) ||
        options.contentType
      ) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }

      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader(
        'Accept',
        s.dataTypes[0] && s.accepts[s.dataTypes[0]]
          ? s.accepts[s.dataTypes[0]] +
              (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '')
          : s.accepts['*'],
      );

      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }

      // Allow custom headers/mimetypes and early abort
      if (
        s.beforeSend &&
        (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)
      ) {
        // Abort if not done already and return
        return jqXHR.abort();
      }

      // Aborting is no longer a cancellation
      strAbort = 'abort';

      // Install callbacks on deferreds
      completeDeferred.add(s.complete);
      jqXHR.done(s.success);
      jqXHR.fail(s.error);

      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;

        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [jqXHR, s]);
        }

        // If request was aborted inside ajaxSend, stop there
        if (completed) {
          return jqXHR;
        }

        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = window.setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }

        try {
          completed = false;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Rethrow post-completion exceptions
          if (completed) {
            throw e;
          }

          // Propagate others as results
          done(-1, e);
        }
      }

      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess,
          success,
          error,
          response,
          modified,
          statusText = nativeStatusText;

        // Ignore repeat invocations
        if (completed) {
          return;
        }

        completed = true;

        // Clear timeout if it exists
        if (timeoutTimer) {
          window.clearTimeout(timeoutTimer);
        }

        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;

        // Cache response headers
        responseHeadersString = headers || '';

        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;

        // Determine if successful
        isSuccess = (status >= 200 && status < 300) || status === 304;

        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }

        // Use a noop converter for missing script but not if jsonp
        if (
          !isSuccess &&
          jQuery.inArray('script', s.dataTypes) > -1 &&
          jQuery.inArray('json', s.dataTypes) < 0
        ) {
          s.converters['text script'] = function () {};
        }

        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);

        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }

          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';

            // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';

            // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // Extract error from statusText and normalize for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }

        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';

        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
        } else {
          deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
        }

        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;

        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error,
          ]);
        }

        // Complete
        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [jqXHR, s]);

          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }

      return jqXHR;
    },

    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },

    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    },
  });

  jQuery.each(['get', 'post'], function (_i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // Shift arguments if data argument was omitted
      if (isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }

      // The url can be an options object (which then must have .url)
      return jQuery.ajax(
        jQuery.extend(
          {
            url: url,
            type: method,
            dataType: type,
            data: data,
            success: callback,
          },
          jQuery.isPlainObject(url) && url,
        ),
      );
    };
  });

  jQuery.ajaxPrefilter(function (s) {
    var i;
    for (i in s.headers) {
      if (i.toLowerCase() === 'content-type') {
        s.contentType = s.headers[i] || '';
      }
    }
  });

  jQuery._evalUrl = function (url, options, doc) {
    return jQuery.ajax({
      url: url,

      // Make this explicit, since user can override this through ajaxSetup (trac-11264)
      type: 'GET',
      dataType: 'script',
      cache: true,
      async: false,
      global: false,

      // Only evaluate the response if it is successful (gh-4126)
      // dataFilter is not invoked for failure responses, so using it instead
      // of the default converter is kludgy but it works.
      converters: {
        'text script': function () {},
      },
      dataFilter: function (response) {
        jQuery.globalEval(response, options, doc);
      },
    });
  };

  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        }

        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap
          .map(function () {
            var elem = this;

            while (elem.firstElementChild) {
              elem = elem.firstElementChild;
            }

            return elem;
          })
          .append(this);
      }

      return this;
    },

    wrapInner: function (html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
          contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },

    wrap: function (html) {
      var htmlIsFunction = isFunction(html);

      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },

    unwrap: function (selector) {
      this.parent(selector)
        .not('body')
        .each(function () {
          jQuery(this).replaceWith(this.childNodes);
        });
      return this;
    },
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };
  jQuery.expr.pseudos.visible = function (elem) {
    return !!(
      elem.offsetWidth ||
      elem.offsetHeight ||
      elem.getClientRects().length
    );
  };

  jQuery.ajaxSettings.xhr = function () {
    try {
      return new window.XMLHttpRequest();
    } catch (e) {}
  };

  var xhrSuccessStatus = {
      // File protocol always yields status code 0, assume 200
      0: 200,

      // Support: IE <=9 only
      // trac-1450: sometimes IE returns 1223 when it should be 204
      1223: 204,
    },
    xhrSupported = jQuery.ajaxSettings.xhr();

  support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;

  jQuery.ajaxTransport(function (options) {
    var callback, errorCallback;

    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || (xhrSupported && !options.crossDomain)) {
      return {
        send: function (headers, complete) {
          var i,
            xhr = options.xhr();

          xhr.open(
            options.type,
            options.url,
            options.async,
            options.username,
            options.password,
          );

          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }

          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }

          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }

          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }

          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onreadystatechange = null;

                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  // Support: IE <=9 only
                  // On a manual native abort, IE9 throws
                  // errors on any property access that is not readyState
                  if (typeof xhr.status !== 'number') {
                    complete(0, 'error');
                  } else {
                    complete(
                      // File: protocol always yields status 0; see trac-8605, trac-14207
                      xhr.status,
                      xhr.statusText,
                    );
                  }
                } else {
                  complete(
                    xhrSuccessStatus[xhr.status] || xhr.status,
                    xhr.statusText,

                    // Support: IE <=9 only
                    // IE9 has no XHR2 but throws on binary (trac-11426)
                    // For XHR2 non-text, let the caller handle it (gh-2498)
                    (xhr.responseType || 'text') !== 'text' ||
                      typeof xhr.responseText !== 'string'
                      ? { binary: xhr.response }
                      : { text: xhr.responseText },
                    xhr.getAllResponseHeaders(),
                  );
                }
              }
            };
          };

          // Listen to events
          xhr.onload = callback();
          errorCallback = xhr.onerror = xhr.ontimeout = callback('error');

          // Support: IE 9 only
          // Use onreadystatechange to replace onabort
          // to handle uncaught aborts
          if (xhr.onabort !== undefined) {
            xhr.onabort = errorCallback;
          } else {
            xhr.onreadystatechange = function () {
              // Check readyState before timeout as it changes
              if (xhr.readyState === 4) {
                // Allow onerror to be called first,
                // but that will not handle a native abort
                // Also, save errorCallback to a variable
                // as xhr.onerror cannot be accessed
                window.setTimeout(function () {
                  if (callback) {
                    errorCallback();
                  }
                });
              }
            };
          }

          // Create the abort callback
          callback = callback('abort');

          try {
            // Do send the request (this may raise an exception)
            xhr.send((options.hasContent && options.data) || null);
          } catch (e) {
            // trac-14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },

        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
  jQuery.ajaxPrefilter(function (s) {
    if (s.crossDomain) {
      s.contents.script = false;
    }
  });

  // Install script dataType
  jQuery.ajaxSetup({
    accepts: {
      script:
        'text/javascript, application/javascript, ' +
        'application/ecmascript, application/x-ecmascript',
    },
    contents: {
      script: /\b(?:java|ecma)script\b/,
    },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      },
    },
  });

  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });

  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain or forced-by-attrs requests
    if (s.crossDomain || s.scriptAttrs) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>')
            .attr(s.scriptAttrs || {})
            .prop({ charset: s.scriptCharset, src: s.url })
            .on(
              'load error',
              (callback = function (evt) {
                script.remove();
                callback = null;
                if (evt) {
                  complete(evt.type === 'error' ? 404 : 200, evt.type);
                }
              }),
            );

          // Use native DOM manipulation to avoid our domManip AJAX trickery
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        },
      };
    }
  });

  var oldCallbacks = [],
    rjsonp = /(=)\?(?=&|$)|\?\?/;

  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce.guid++;
      this[callback] = true;
      return callback;
    },
  });

  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName,
      overwritten,
      responseContainer,
      jsonProp =
        s.jsonp !== false &&
        (rjsonp.test(s.url)
          ? 'url'
          : typeof s.data === 'string' &&
            (s.contentType || '').indexOf(
              'application/x-www-form-urlencoded',
            ) === 0 &&
            rjsonp.test(s.data) &&
            'data');

    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = isFunction(s.jsonpCallback)
        ? s.jsonpCallback()
        : s.jsonpCallback;

      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url +=
          (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }

      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };

      // Force json dataType
      s.dataTypes[0] = 'json';

      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };

      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // If previous value didn't exist - remove it
        if (overwritten === undefined) {
          jQuery(window).removeProp(callbackName);

          // Otherwise restore preexisting value
        } else {
          window[callbackName] = overwritten;
        }

        // Save back as free
        if (s[callbackName]) {
          // Make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;

          // Save the callback name for future use
          oldCallbacks.push(callbackName);
        }

        // Call if it was a function and we have a response
        if (responseContainer && isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }

        responseContainer = overwritten = undefined;
      });

      // Delegate to script
      return 'script';
    }
  });

  // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337
  support.createHTMLDocument = (function () {
    var body = document.implementation.createHTMLDocument('').body;
    body.innerHTML = '<form></form><form></form>';
    return body.childNodes.length === 2;
  })();

  // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== 'string') {
      return [];
    }
    if (typeof context === 'boolean') {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document.implementation.createHTMLDocument('');

        // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)
        base = context.createElement('base');
        base.href = document.location.href;
        context.head.appendChild(base);
      } else {
        context = document;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && [];

    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  /**
   * Load a url into a page
   */
  jQuery.fn.load = function (url, params, callback) {
    var selector,
      type,
      response,
      self = this,
      off = url.indexOf(' ');

    if (off > -1) {
      selector = stripAndCollapse(url.slice(off));
      url = url.slice(0, off);
    }

    // If it's a function
    if (isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;

      // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }

    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery
        .ajax({
          url: url,

          // If "type" variable is undefined, then "GET" method will be used.
          // Make value of this field explicit since
          // user can override it through ajaxSetup method
          type: type || 'GET',
          dataType: 'html',
          data: params,
        })
        .done(function (responseText) {
          // Save response for use in complete callback
          response = arguments;

          self.html(
            selector
              ? // If a selector was specified, locate the right elements in a dummy div
                // Exclude scripts to avoid IE 'Permission Denied' errors
                jQuery('<div>')
                  .append(jQuery.parseHTML(responseText))
                  .find(selector)
              : // Otherwise use the full result
                responseText,
          );

          // If the request succeeds, this function gets "data", "status", "jqXHR"
          // but they are ignored because response was set above.
          // If it fails, this function gets "jqXHR", "status", "error"
        })
        .always(
          callback &&
            function (jqXHR, status) {
              self.each(function () {
                callback.apply(
                  this,
                  response || [jqXHR.responseText, status, jqXHR],
                );
              });
            },
        );
    }

    return this;
  };

  jQuery.expr.pseudos.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };

  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition,
        curLeft,
        curCSSTop,
        curTop,
        curOffset,
        curCSSLeft,
        calculatePosition,
        position = jQuery.css(elem, 'position'),
        curElem = jQuery(elem),
        props = {};

      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition =
        (position === 'absolute' || position === 'fixed') &&
        (curCSSTop + curCSSLeft).indexOf('auto') > -1;

      // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    },
  };

  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function (options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined
          ? this
          : this.each(function (i) {
              jQuery.offset.setOffset(this, options, i);
            });
      }

      var rect,
        win,
        elem = this[0];

      if (!elem) {
        return;
      }

      // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error
      if (!elem.getClientRects().length) {
        return { top: 0, left: 0 };
      }

      // Get document-relative position by adding viewport scroll to viewport-relative gBCR
      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset,
      };
    },

    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function () {
      if (!this[0]) {
        return;
      }

      var offsetParent,
        offset,
        doc,
        elem = this[0],
        parentOffset = { top: 0, left: 0 };

      // position:fixed elements are offset from the viewport, which itself always has zero offset
      if (jQuery.css(elem, 'position') === 'fixed') {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset();

        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;
        while (
          offsetParent &&
          (offsetParent === doc.body || offsetParent === doc.documentElement) &&
          jQuery.css(offsetParent, 'position') === 'static'
        ) {
          offsetParent = offsetParent.parentNode;
        }
        if (
          offsetParent &&
          offsetParent !== elem &&
          offsetParent.nodeType === 1
        ) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, 'borderTopWidth', true);
          parentOffset.left += jQuery.css(
            offsetParent,
            'borderLeftWidth',
            true,
          );
        }
      }

      // Subtract parent offsets and element margins
      return {
        top:
          offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left:
          offset.left -
          parentOffset.left -
          jQuery.css(elem, 'marginLeft', true),
      };
    },

    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (
          offsetParent &&
          jQuery.css(offsetParent, 'position') === 'static'
        ) {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    },
  });

  // Create scrollLeft and scrollTop methods
  jQuery.each(
    { scrollLeft: 'pageXOffset', scrollTop: 'pageYOffset' },
    function (method, prop) {
      var top = 'pageYOffset' === prop;

      jQuery.fn[method] = function (val) {
        return access(
          this,
          function (elem, method, val) {
            // Coalesce documents and windows
            var win;
            if (isWindow(elem)) {
              win = elem;
            } else if (elem.nodeType === 9) {
              win = elem.defaultView;
            }

            if (val === undefined) {
              return win ? win[prop] : elem[method];
            }

            if (win) {
              win.scrollTo(
                !top ? val : win.pageXOffset,
                top ? val : win.pageYOffset,
              );
            } else {
              elem[method] = val;
            }
          },
          method,
          val,
          arguments.length,
        );
      };
    },
  );

  // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here
  jQuery.each(['top', 'left'], function (_i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(
      support.pixelPosition,
      function (elem, computed) {
        if (computed) {
          computed = curCSS(elem, prop);

          // If curCSS returns percentage, fallback to offset
          return rnumnonpx.test(computed)
            ? jQuery(elem).position()[prop] + 'px'
            : computed;
        }
      },
    );
  });

  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({ Height: 'height', Width: 'width' }, function (name, type) {
    jQuery.each(
      {
        padding: 'inner' + name,
        content: type,
        '': 'outer' + name,
      },
      function (defaultExtra, funcName) {
        // Margin is only for outerHeight, outerWidth
        jQuery.fn[funcName] = function (margin, value) {
          var chainable =
              arguments.length && (defaultExtra || typeof margin !== 'boolean'),
            extra =
              defaultExtra ||
              (margin === true || value === true ? 'margin' : 'border');

          return access(
            this,
            function (elem, type, value) {
              var doc;

              if (isWindow(elem)) {
                // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
                return funcName.indexOf('outer') === 0
                  ? elem['inner' + name]
                  : elem.document.documentElement['client' + name];
              }

              // Get document width or height
              if (elem.nodeType === 9) {
                doc = elem.documentElement;

                // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                // whichever is greatest
                return Math.max(
                  elem.body['scroll' + name],
                  doc['scroll' + name],
                  elem.body['offset' + name],
                  doc['offset' + name],
                  doc['client' + name],
                );
              }

              return value === undefined
                ? // Get width or height on the element, requesting but not forcing parseFloat
                  jQuery.css(elem, type, extra)
                : // Set width or height on the element
                  jQuery.style(elem, type, value, extra);
            },
            type,
            chainable ? margin : undefined,
            chainable,
          );
        };
      },
    );
  });

  jQuery.each(
    [
      'ajaxStart',
      'ajaxStop',
      'ajaxComplete',
      'ajaxError',
      'ajaxSuccess',
      'ajaxSend',
    ],
    function (_i, type) {
      jQuery.fn[type] = function (fn) {
        return this.on(type, fn);
      };
    },
  );

  jQuery.fn.extend({
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },

    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1
        ? this.off(selector, '**')
        : this.off(types, selector || '**', fn);
    },

    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
  });

  jQuery.each(
    (
      'blur focus focusin focusout resize scroll click dblclick ' +
      'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
      'change select submit keydown keypress keyup contextmenu'
    ).split(' '),
    function (_i, name) {
      // Handle event binding
      jQuery.fn[name] = function (data, fn) {
        return arguments.length > 0
          ? this.on(name, null, data, fn)
          : this.trigger(name);
      };
    },
  );

  // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  // Require that the "whitespace run" starts from a non-whitespace
  // to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
  var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

  // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon
  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === 'string') {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    }

    // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.
    if (!isFunction(fn)) {
      return undefined;
    }

    // Simulated bind
    args = slice.call(arguments, 2);
    proxy = function () {
      return fn.apply(context || this, args.concat(slice.call(arguments)));
    };

    // Set the guid of unique handler to the same of original handler, so it can be removed
    proxy.guid = fn.guid = fn.guid || jQuery.guid++;

    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };
  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;

  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (
      (type === 'number' || type === 'string') &&
      // parseFloat NaNs numeric-cast false positives ("")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      !isNaN(obj - parseFloat(obj))
    );
  };

  jQuery.trim = function (text) {
    return text == null ? '' : (text + '').replace(rtrim, '$1');
  };

  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.

  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

  if (typeof define === 'function' && define.amd) {
    define('jquery', [], function () {
      return jQuery;
    });
  }

  var // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;

  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }

    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }

    return jQuery;
  };

  // Expose jQuery and $ identifiers, even in AMD
  // (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (trac-13566)
  if (typeof noGlobal === 'undefined') {
    window.jQuery = window.$ = jQuery;
  }

  return jQuery;
});
(function () {
  /*!
   * @overview  Ember - JavaScript Application Framework
   * @copyright Copyright 2011-2021 Tilde Inc. and contributors
   *            Portions Copyright 2006-2011 Strobe Inc.
   *            Portions Copyright 2008-2011 Apple Inc. All rights reserved.
   * @license   Licensed under MIT license
   *            See https://raw.github.com/emberjs/ember.js/master/LICENSE
   * @version   4.6.0
   */
  /* eslint-disable no-var */

  /* globals global globalThis self */

  /* eslint-disable-next-line no-unused-vars */
  var define, require;

  (function () {
    var globalObj =
      typeof globalThis !== 'undefined'
        ? globalThis
        : typeof self !== 'undefined'
        ? self
        : typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
        ? global
        : null;

    if (globalObj === null) {
      throw new Error('unable to locate global object');
    }

    if (
      typeof globalObj.define === 'function' &&
      typeof globalObj.require === 'function'
    ) {
      define = globalObj.define;
      require = globalObj.require;
      return;
    }

    var registry = Object.create(null);
    var seen = Object.create(null);

    function missingModule(name, referrerName) {
      if (referrerName) {
        throw new Error(
          'Could not find module ' + name + ' required by: ' + referrerName,
        );
      } else {
        throw new Error('Could not find module ' + name);
      }
    }

    function internalRequire(_name, referrerName) {
      var name = _name;
      var mod = registry[name];

      if (!mod) {
        name = name + '/index';
        mod = registry[name];
      }

      var exports = seen[name];

      if (exports !== undefined) {
        return exports;
      }

      exports = seen[name] = {};

      if (!mod) {
        missingModule(_name, referrerName);
      }

      var deps = mod.deps;
      var callback = mod.callback;
      var reified = new Array(deps.length);

      for (var i = 0; i < deps.length; i++) {
        if (deps[i] === 'exports') {
          reified[i] = exports;
        } else if (deps[i] === 'require') {
          reified[i] = require;
        } else {
          reified[i] = require(deps[i], name);
        }
      }

      callback.apply(this, reified);
      return exports;
    }

    require = function (name) {
      return internalRequire(name, null);
    };

    define = function (name, deps, callback) {
      registry[name] = {
        deps: deps,
        callback: callback,
      };
    }; // setup `require` module

    require['default'] = require;

    require.has = function registryHas(moduleName) {
      return (
        Boolean(registry[moduleName]) ||
        Boolean(registry[moduleName + '/index'])
      );
    };

    require._eak_seen = require.entries = registry;
  })();
  define('@ember/-internals/bootstrap/index', ['require'], function (_require) {
    'use strict';

    (function bootstrap() {
      // Bootstrap Node module
      if (typeof module === 'object' && typeof module.require === 'function') {
        module.exports = (0, _require.default)('ember').default;
      }
    })();
  });
  define('@ember/-internals/browser-environment/index', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.window = _exports.userAgent = _exports.location = _exports.isIE = _exports.isFirefox = _exports.isChrome = _exports.history = _exports.hasDOM = void 0;
    // check if window exists and actually is the global
    var hasDom =
      typeof self === 'object' &&
      self !== null &&
      self.Object === Object &&
      typeof Window !== 'undefined' &&
      self.constructor === Window &&
      typeof document === 'object' &&
      document !== null &&
      self.document === document &&
      typeof location === 'object' &&
      location !== null &&
      self.location === location &&
      typeof history === 'object' &&
      history !== null &&
      self.history === history &&
      typeof navigator === 'object' &&
      navigator !== null &&
      self.navigator === navigator &&
      typeof navigator.userAgent === 'string';
    _exports.hasDOM = hasDom;
    var window = hasDom ? self : null;
    _exports.window = window;
    var location$1 = hasDom ? self.location : null;
    _exports.location = location$1;
    var history$1 = hasDom ? self.history : null;
    _exports.history = history$1;
    var userAgent = hasDom ? self.navigator.userAgent : 'Lynx (textmode)';
    _exports.userAgent = userAgent;
    var isChrome = hasDom
      ? typeof chrome === 'object' && !(typeof opera === 'object')
      : false;
    _exports.isChrome = isChrome;
    var isFirefox = hasDom ? typeof InstallTrigger !== 'undefined' : false;
    _exports.isFirefox = isFirefox;
    var isIE = hasDom
      ? typeof MSInputMethodContext !== 'undefined' &&
        typeof documentMode !== 'undefined'
      : false;
    _exports.isIE = isIE;
  });
  define('@ember/-internals/container/index', [
    'exports',
    '@ember/-internals/owner',
    '@ember/-internals/utils',
    '@ember/debug',
  ], function (_exports, _owner, _utils, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.Registry = _exports.INIT_FACTORY = _exports.Container = void 0;
    _exports.getFactoryFor = getFactoryFor;
    _exports.privatize = privatize;
    _exports.setFactoryFor = setFactoryFor;
    var leakTracking;
    var containers;

    if (
      true
      /* DEBUG */
    ) {
      // requires v8
      // chrome --js-flags="--allow-natives-syntax --expose-gc"
      // node --allow-natives-syntax --expose-gc
      try {
        if (typeof gc === 'function') {
          leakTracking = (() => {
            // avoid syntax errors when --allow-natives-syntax not present
            var GetWeakSetValues = new Function(
              'weakSet',
              'return %GetWeakSetValues(weakSet, 0)',
            );
            containers = new WeakSet();
            return {
              hasContainers() {
                // @ts-expect-error We just checked if it is definied
                gc();
                return GetWeakSetValues(containers).length > 0;
              },

              reset() {
                var values = GetWeakSetValues(containers);

                for (var i = 0; i < values.length; i++) {
                  containers.delete(values[i]);
                }
              },
            };
          })();
        }
      } catch (e) {
        // ignore
      }
    }
    /**
   A container used to instantiate and cache objects.
  
   Every `Container` must be associated with a `Registry`, which is referenced
   to determine the factory and options that should be used to instantiate
   objects.
  
   The public API for `Container` is still in flux and should not be considered
   stable.
  
   @private
   @class Container
   */

    class Container {
      constructor(registry, options) {
        if (options === void 0) {
          options = {};
        }

        this.registry = registry;
        this.owner = options.owner || null;
        this.cache = (0, _utils.dictionary)(options.cache || null);
        this.factoryManagerCache = (0, _utils.dictionary)(
          options.factoryManagerCache || null,
        );
        this.isDestroyed = false;
        this.isDestroying = false;

        if (
          true
          /* DEBUG */
        ) {
          this.validationCache = (0, _utils.dictionary)(
            options.validationCache || null,
          );

          if (containers !== undefined) {
            containers.add(this);
          }
        }
      }
      /**
     @private
     @property registry
     @type Registry
     @since 1.11.0
     */

      /**
     @private
     @property cache
     @type InheritingDict
     */

      /**
     @private
     @property validationCache
     @type InheritingDict
     */

      /**
     Given a fullName return a corresponding instance.
      The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter');
      twitter instanceof Twitter; // => true
      // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
      twitter === twitter2; //=> true
     ```
      If singletons are not wanted, an optional flag can be provided at lookup.
      ```javascript
     let registry = new Registry();
     let container = registry.container();
      registry.register('api:twitter', Twitter);
      let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
      twitter === twitter2; //=> false
     ```
      @private
     @method lookup
     @param {String} fullName
     @param {TypeOptions} [options]
     @return {any}
     */

      lookup(fullName, options) {
        if (this.isDestroyed) {
          throw new Error(
            `Cannot call \`.lookup\` after the owner has been destroyed`,
          );
        }

        true &&
          !this.registry.isValidFullName(fullName) &&
          (0, _debug.assert)(
            'fullName must be a proper full name',
            this.registry.isValidFullName(fullName),
          );
        return lookup(this, this.registry.normalize(fullName), options);
      }
      /**
     A depth first traversal, destroying the container, its descendant containers and all
     their managed objects.
      @private
     @method destroy
     */

      destroy() {
        this.isDestroying = true;
        destroyDestroyables(this);
      }

      finalizeDestroy() {
        resetCache(this);
        this.isDestroyed = true;
      }
      /**
     Clear either the entire cache or just the cache for a particular key.
        @private
     @method reset
     @param {String} fullName optional key to reset; if missing, resets everything
    */

      reset(fullName) {
        if (this.isDestroyed) return;

        if (fullName === undefined) {
          destroyDestroyables(this);
          resetCache(this);
        } else {
          resetMember(this, this.registry.normalize(fullName));
        }
      }
      /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
      @private
     @method ownerInjection
     @returns { Object }
    */

      ownerInjection() {
        var injection = {};
        (0, _owner.setOwner)(injection, this.owner);
        return injection;
      }
      /**
     Given a fullName, return the corresponding factory. The consumer of the factory
     is responsible for the destruction of any factory instances, as there is no
     way for the container to ensure instances are destroyed when it itself is
     destroyed.
      @public
     @method factoryFor
     @param {String} fullName
     @return {any}
     */

      factoryFor(fullName) {
        if (this.isDestroyed) {
          throw new Error(
            `Cannot call \`.factoryFor\` after the owner has been destroyed`,
          );
        }

        var normalizedName = this.registry.normalize(fullName);
        true &&
          !this.registry.isValidFullName(normalizedName) &&
          (0, _debug.assert)(
            'fullName must be a proper full name',
            this.registry.isValidFullName(normalizedName),
          );
        return factoryFor(this, normalizedName, fullName);
      }
    }

    _exports.Container = Container;

    if (
      true
      /* DEBUG */
    ) {
      Container._leakTracking = leakTracking;
    }
    /*
     * Wrap a factory manager in a proxy which will not permit properties to be
     * set on the manager.
     */

    function wrapManagerInDeprecationProxy(manager) {
      var validator = {
        set(_obj, prop) {
          throw new Error(
            `You attempted to set "${prop}" on a factory manager created by container#factoryFor. A factory manager is a read-only construct.`,
          );
        },
      }; // Note:
      // We have to proxy access to the manager here so that private property
      // access doesn't cause the above errors to occur.

      var m = manager;
      var proxiedManager = {
        class: m.class,

        create(props) {
          return m.create(props);
        },
      };
      return new Proxy(proxiedManager, validator);
    }

    function isSingleton(container, fullName) {
      return container.registry.getOption(fullName, 'singleton') !== false;
    }

    function isInstantiatable(container, fullName) {
      return container.registry.getOption(fullName, 'instantiate') !== false;
    }

    function lookup(container, fullName, options) {
      if (options === void 0) {
        options = {};
      }

      var normalizedName = fullName;

      if (
        options.singleton === true ||
        (options.singleton === undefined && isSingleton(container, fullName))
      ) {
        var cached = container.cache[normalizedName];

        if (cached !== undefined) {
          return cached;
        }
      }

      return instantiateFactory(container, normalizedName, fullName, options);
    }

    function factoryFor(container, normalizedName, fullName) {
      var cached = container.factoryManagerCache[normalizedName];

      if (cached !== undefined) {
        return cached;
      }

      var factory = container.registry.resolve(normalizedName);

      if (factory === undefined) {
        return;
      }

      if (
        true &&
        /* DEBUG */
        factory &&
        typeof factory._onLookup === 'function'
      ) {
        factory._onLookup(fullName);
      }

      var manager = new FactoryManager(
        container,
        factory,
        fullName,
        normalizedName,
      );

      if (
        true
        /* DEBUG */
      ) {
        manager = wrapManagerInDeprecationProxy(manager);
      }

      container.factoryManagerCache[normalizedName] = manager;
      return manager;
    }

    function isSingletonClass(container, fullName, _ref) {
      var { instantiate, singleton } = _ref;
      return (
        singleton !== false &&
        !instantiate &&
        isSingleton(container, fullName) &&
        !isInstantiatable(container, fullName)
      );
    }

    function isSingletonInstance(container, fullName, _ref2) {
      var { instantiate, singleton } = _ref2;
      return (
        singleton !== false &&
        instantiate !== false &&
        (singleton === true || isSingleton(container, fullName)) &&
        isInstantiatable(container, fullName)
      );
    }

    function isFactoryClass(container, fullname, _ref3) {
      var { instantiate, singleton } = _ref3;
      return (
        instantiate === false &&
        (singleton === false || !isSingleton(container, fullname)) &&
        !isInstantiatable(container, fullname)
      );
    }

    function isFactoryInstance(container, fullName, _ref4) {
      var { instantiate, singleton } = _ref4;
      return (
        instantiate !== false &&
        (singleton === false || !isSingleton(container, fullName)) &&
        isInstantiatable(container, fullName)
      );
    }

    function instantiateFactory(container, normalizedName, fullName, options) {
      var factoryManager = factoryFor(container, normalizedName, fullName);

      if (factoryManager === undefined) {
        return;
      } // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
      // By default majority of objects fall into this case

      if (isSingletonInstance(container, fullName, options)) {
        var instance = (container.cache[
          normalizedName
        ] = factoryManager.create()); // if this lookup happened _during_ destruction (emits a deprecation, but
        // is still possible) ensure that it gets destroyed

        if (container.isDestroying) {
          if (typeof instance.destroy === 'function') {
            instance.destroy();
          }
        }

        return instance;
      } // SomeClass { singleton: false, instantiate: true }

      if (isFactoryInstance(container, fullName, options)) {
        return factoryManager.create();
      } // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }

      if (
        isSingletonClass(container, fullName, options) ||
        isFactoryClass(container, fullName, options)
      ) {
        return factoryManager.class;
      }

      throw new Error('Could not create factory');
    }

    function destroyDestroyables(container) {
      var cache = container.cache;
      var keys = Object.keys(cache);

      for (var key of keys) {
        var value = cache[key];
        true && !value && (0, _debug.assert)('has cached value', value);

        if (value.destroy) {
          value.destroy();
        }
      }
    }

    function resetCache(container) {
      container.cache = (0, _utils.dictionary)(null);
      container.factoryManagerCache = (0, _utils.dictionary)(null);
    }

    function resetMember(container, fullName) {
      var member = container.cache[fullName];
      delete container.factoryManagerCache[fullName];

      if (member) {
        delete container.cache[fullName];

        if (member.destroy) {
          member.destroy();
        }
      }
    }

    var INIT_FACTORY = Symbol('INIT_FACTORY');
    _exports.INIT_FACTORY = INIT_FACTORY;

    function getFactoryFor(obj) {
      return obj[INIT_FACTORY];
    }

    function setFactoryFor(obj, factory) {
      obj[INIT_FACTORY] = factory;
    }

    class FactoryManager {
      constructor(container, factory, fullName, normalizedName) {
        this.container = container;
        this.owner = container.owner;
        this.class = factory;
        this.fullName = fullName;
        this.normalizedName = normalizedName;
        this.madeToString = undefined;
        this.injections = undefined;
      }

      toString() {
        if (this.madeToString === undefined) {
          this.madeToString = this.container.registry.makeToString(
            this.class,
            this.fullName,
          );
        }

        return this.madeToString;
      }

      create(options) {
        var { container } = this;

        if (container.isDestroyed) {
          throw new Error(
            `Cannot create new instances after the owner has been destroyed (you attempted to create ${this.fullName})`,
          );
        }

        var props = options ? Object.assign({}, options) : {};
        (0, _owner.setOwner)(props, container.owner);
        setFactoryFor(props, this);

        if (
          true
          /* DEBUG */
        ) {
          var lazyInjections;
          var validationCache = this.container.validationCache; // Ensure that all lazy injections are valid at instantiation time

          if (
            !validationCache[this.fullName] &&
            this.class &&
            typeof this.class._lazyInjections === 'function'
          ) {
            lazyInjections = this.class._lazyInjections();
            lazyInjections = this.container.registry.normalizeInjectionsHash(
              lazyInjections,
            );
            this.container.registry.validateInjections(lazyInjections);
          }

          validationCache[this.fullName] = true;
          true &&
            !(typeof this.class.create === 'function') &&
            (0, _debug.assert)(
              `Failed to create an instance of '${this.normalizedName}'. Most likely an improperly defined class or an invalid module export.`,
              typeof this.class.create === 'function',
            );
        }

        return this.class.create(props);
      }
    }

    var VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;
    /**
   A registry used to store factory and option information keyed
   by type.
  
   A `Registry` stores the factory and option information needed by a
   `Container` to instantiate and cache objects.
  
   The API for `Registry` is still in flux and should not be considered stable.
  
   @private
   @class Registry
   @since 1.11.0
  */

    class Registry {
      constructor(options) {
        if (options === void 0) {
          options = {};
        }

        this.fallback = options.fallback || null;
        this.resolver = options.resolver || null;
        this.registrations = (0, _utils.dictionary)(
          options.registrations || null,
        );
        this._normalizeCache = (0, _utils.dictionary)(null);
        this._resolveCache = (0, _utils.dictionary)(null);
        this._failSet = new Set();
        this._options = (0, _utils.dictionary)(null);
        this._typeOptions = (0, _utils.dictionary)(null);
      }
      /**
     A backup registry for resolving registrations when no matches can be found.
        @private
     @property fallback
     @type Registry
     */

      /**
     An object that has a `resolve` method that resolves a name.
        @private
     @property resolver
     @type Resolver
     */

      /**
     @private
     @property registrations
     @type InheritingDict
     */

      /**
     @private
        @property _normalizeCache
     @type InheritingDict
     */

      /**
     @private
        @property _resolveCache
     @type InheritingDict
     */

      /**
     @private
        @property _options
     @type InheritingDict
     */

      /**
     @private
        @property _typeOptions
     @type InheritingDict
     */

      /**
     Creates a container based on this registry.
        @private
     @method container
     @param {Object} options
     @return {Container} created container
     */

      container(options) {
        return new Container(this, options);
      }

      register(fullName, factory, options) {
        if (options === void 0) {
          options = {};
        }

        true &&
          !this.isValidFullName(fullName) &&
          (0, _debug.assert)(
            'fullName must be a proper full name',
            this.isValidFullName(fullName),
          );
        true &&
          !(factory !== undefined) &&
          (0, _debug.assert)(
            `Attempting to register an unknown factory: '${fullName}'`,
            factory !== undefined,
          );
        var normalizedName = this.normalize(fullName);
        true &&
          !!this._resolveCache[normalizedName] &&
          (0, _debug.assert)(
            `Cannot re-register: '${fullName}', as it has already been resolved.`,
            !this._resolveCache[normalizedName],
          );

        this._failSet.delete(normalizedName);

        this.registrations[normalizedName] = factory;
        this._options[normalizedName] = options;
      }
      /**
     Unregister a fullName
        ```javascript
     let registry = new Registry();
     registry.register('model:user', User);
        registry.resolve('model:user').create() instanceof User //=> true
        registry.unregister('model:user')
     registry.resolve('model:user') === undefined //=> true
     ```
        @private
     @method unregister
     @param {String} fullName
     */

      unregister(fullName) {
        true &&
          !this.isValidFullName(fullName) &&
          (0, _debug.assert)(
            'fullName must be a proper full name',
            this.isValidFullName(fullName),
          );
        var normalizedName = this.normalize(fullName);
        delete this.registrations[normalizedName];
        delete this._resolveCache[normalizedName];
        delete this._options[normalizedName];

        this._failSet.delete(normalizedName);
      }
      /**
     Given a fullName return the corresponding factory.
        By default `resolve` will retrieve the factory from
     the registry.
        ```javascript
     let registry = new Registry();
     registry.register('api:twitter', Twitter);
        registry.resolve('api:twitter') // => Twitter
     ```
        Optionally the registry can be provided with a custom resolver.
     If provided, `resolve` will first provide the custom resolver
     the opportunity to resolve the fullName, otherwise it will fallback
     to the registry.
        ```javascript
     let registry = new Registry();
     registry.resolver = function(fullName) {
        // lookup via the module system of choice
      };
        // the twitter factory is added to the module system
     registry.resolve('api:twitter') // => Twitter
     ```
        @private
     @method resolve
     @param {String} fullName
     @return {Function} fullName's factory
     */

      resolve(fullName) {
        var factory = resolve(this, this.normalize(fullName));

        if (factory === undefined && this.fallback !== null) {
          factory = this.fallback.resolve(fullName);
        }

        return factory;
      }
      /**
     A hook that can be used to describe how the resolver will
     attempt to find the factory.
        For example, the default Ember `.describe` returns the full
     class name (including namespace) where Ember's resolver expects
     to find the `fullName`.
        @private
     @method describe
     @param {String} fullName
     @return {string} described fullName
     */

      describe(fullName) {
        if (this.resolver !== null && this.resolver.lookupDescription) {
          return this.resolver.lookupDescription(fullName);
        } else if (this.fallback !== null) {
          return this.fallback.describe(fullName);
        } else {
          return fullName;
        }
      }
      /**
     A hook to enable custom fullName normalization behavior
        @private
     @method normalizeFullName
     @param {String} fullName
     @return {string} normalized fullName
     */

      normalizeFullName(fullName) {
        if (this.resolver !== null && this.resolver.normalize) {
          return this.resolver.normalize(fullName);
        } else if (this.fallback !== null) {
          return this.fallback.normalizeFullName(fullName);
        } else {
          return fullName;
        }
      }
      /**
     Normalize a fullName based on the application's conventions
        @private
     @method normalize
     @param {String} fullName
     @return {string} normalized fullName
     */

      normalize(fullName) {
        return (
          this._normalizeCache[fullName] ||
          (this._normalizeCache[fullName] = this.normalizeFullName(fullName))
        );
      }
      /**
     @method makeToString
        @private
     @param {any} factory
     @param {string} fullName
     @return {function} toString function
     */

      makeToString(factory, fullName) {
        var _a;

        if (this.resolver !== null && this.resolver.makeToString) {
          return this.resolver.makeToString(factory, fullName);
        } else if (this.fallback !== null) {
          return this.fallback.makeToString(factory, fullName);
        } else {
          return typeof factory === 'string'
            ? factory
            : (_a = factory.name) !== null && _a !== void 0
            ? _a
            : '(unknown class)';
        }
      }
      /**
     Given a fullName check if the container is aware of its factory
     or singleton instance.
        @private
     @method has
     @param {String} fullName
     @param {Object} [options]
     @param {String} [options.source] the fullname of the request source (used for local lookups)
     @return {Boolean}
     */

      has(fullName) {
        if (!this.isValidFullName(fullName)) {
          return false;
        }

        return has(this, this.normalize(fullName));
      }
      /**
     Allow registering options for all factories of a type.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        // if all of type `connection` must not be singletons
     registry.optionsForType('connection', { singleton: false });
        registry.register('connection:twitter', TwitterConnection);
     registry.register('connection:facebook', FacebookConnection);
        let twitter = container.lookup('connection:twitter');
     let twitter2 = container.lookup('connection:twitter');
        twitter === twitter2; // => false
        let facebook = container.lookup('connection:facebook');
     let facebook2 = container.lookup('connection:facebook');
        facebook === facebook2; // => false
     ```
        @private
     @method optionsForType
     @param {String} type
     @param {Object} options
     */

      optionsForType(type, options) {
        this._typeOptions[type] = options;
      }

      getOptionsForType(type) {
        var optionsForType = this._typeOptions[type];

        if (optionsForType === undefined && this.fallback !== null) {
          optionsForType = this.fallback.getOptionsForType(type);
        }

        return optionsForType;
      }
      /**
     @private
     @method options
     @param {String} fullName
     @param {Object} options
     */

      options(fullName, options) {
        var normalizedName = this.normalize(fullName);
        this._options[normalizedName] = options;
      }

      getOptions(fullName) {
        var normalizedName = this.normalize(fullName);
        var options = this._options[normalizedName];

        if (options === undefined && this.fallback !== null) {
          options = this.fallback.getOptions(fullName);
        }

        return options;
      }

      getOption(fullName, optionName) {
        var options = this._options[fullName];

        if (options !== undefined && options[optionName] !== undefined) {
          return options[optionName];
        }

        var type = fullName.split(':')[0];
        true && !type && (0, _debug.assert)('has type', type); // split always will have at least one value

        options = this._typeOptions[type];

        if (options && options[optionName] !== undefined) {
          return options[optionName];
        } else if (this.fallback !== null) {
          return this.fallback.getOption(fullName, optionName);
        }

        return undefined;
      }
      /**
     This is deprecated in favor of explicit injection of dependencies.
        Reference: https://deprecations.emberjs.com/v3.x#toc_implicit-injections
     ```
        @private
     @method injection
     @param {String} factoryName
     @param {String} property
     @param {String} injectionName
     @deprecated
     */

      injection(fullName, property) {
        true &&
          !false &&
          (0, _debug.deprecate)(
            `As of Ember 4.0.0, owner.inject no longer injects values into resolved instances, and calling the method has been deprecated. Since this method no longer does anything, it is fully safe to remove this injection. As an alternative to this API, you can refactor to explicitly inject \`${property}\` on \`${fullName}\`, or look it up directly using the \`getOwner\` API.`,
            false,
            {
              id: 'remove-owner-inject',
              until: '5.0.0',
              url:
                'https://deprecations.emberjs.com/v4.x#toc_implicit-injections',
              for: 'ember-source',
              since: {
                available: '4.0.0',
                enabled: '4.0.0',
              },
            },
          );
      }
      /**
     @private
     @method knownForType
     @param {String} type the type to iterate over
    */

      knownForType(type) {
        var localKnown = (0, _utils.dictionary)(null);
        var registeredNames = Object.keys(this.registrations);

        for (var fullName of registeredNames) {
          var itemType = fullName.split(':')[0];

          if (itemType === type) {
            localKnown[fullName] = true;
          }
        }

        var fallbackKnown, resolverKnown;

        if (this.fallback !== null) {
          fallbackKnown = this.fallback.knownForType(type);
        }

        if (this.resolver !== null && this.resolver.knownForType) {
          resolverKnown = this.resolver.knownForType(type);
        }

        return Object.assign({}, fallbackKnown, localKnown, resolverKnown);
      }

      isValidFullName(fullName) {
        return VALID_FULL_NAME_REGEXP.test(fullName);
      }
    }

    _exports.Registry = Registry;

    if (
      true
      /* DEBUG */
    ) {
      var proto = Registry.prototype;

      proto.normalizeInjectionsHash = function (hash) {
        var injections = [];

        for (var key in hash) {
          if (Object.prototype.hasOwnProperty.call(hash, key)) {
            var value = hash[key];
            true && !value && (0, _debug.assert)('has value', value);
            var { specifier } = value;
            true &&
              !this.isValidFullName(specifier) &&
              (0, _debug.assert)(
                `Expected a proper full name, given '${specifier}'`,
                this.isValidFullName(specifier),
              );
            injections.push({
              property: key,
              specifier,
            });
          }
        }

        return injections;
      };

      proto.validateInjections = function (injections) {
        if (!injections) {
          return;
        }

        for (var injection of injections) {
          var { specifier } = injection;
          true &&
            !this.has(specifier) &&
            (0, _debug.assert)(
              `Attempting to inject an unknown injection: '${specifier}'`,
              this.has(specifier),
            );
        }
      };
    }

    function resolve(registry, _normalizedName) {
      var normalizedName = _normalizedName;
      var cached = registry._resolveCache[normalizedName];

      if (cached !== undefined) {
        return cached;
      }

      if (registry._failSet.has(normalizedName)) {
        return;
      }

      var resolved;

      if (registry.resolver) {
        resolved = registry.resolver.resolve(normalizedName);
      }

      if (resolved === undefined) {
        resolved = registry.registrations[normalizedName];
      }

      if (resolved === undefined) {
        registry._failSet.add(normalizedName);
      } else {
        registry._resolveCache[normalizedName] = resolved;
      }

      return resolved;
    }

    function has(registry, fullName) {
      return registry.resolve(fullName) !== undefined;
    }

    var privateNames = (0, _utils.dictionary)(null);
    var privateSuffix = `${Math.random()}${Date.now()}`.replace('.', '');

    function privatize(_ref5) {
      var [fullName] = _ref5;
      true &&
        !(arguments.length === 1 && fullName) &&
        (0, _debug.assert)(
          'has a single string argument',
          arguments.length === 1 && fullName,
        );
      var name = privateNames[fullName];

      if (name) {
        return name;
      }

      var [type, rawName] = fullName.split(':');
      return (privateNames[fullName] = (0, _utils.intern)(
        `${type}:${rawName}-${privateSuffix}`,
      ));
    }
    /*
  Public API for the container is still in flux.
  The public API, specified on the application namespace should be considered the stable API.
  // @module container
    @private
  */
  });
  define('@ember/-internals/environment/index', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.context = _exports.ENV = void 0;
    _exports.getENV = getENV;
    _exports.getLookup = getLookup;
    _exports.global = void 0;
    _exports.setLookup = setLookup;

    // from lodash to catch fake globals
    function checkGlobal(value) {
      return value && value.Object === Object ? value : undefined;
    } // element ids can ruin global miss checks

    function checkElementIdShadowing(value) {
      return value && value.nodeType === undefined ? value : undefined;
    } // export real global

    var global$1 =
      checkGlobal(
        checkElementIdShadowing(typeof global === 'object' && global),
      ) ||
      checkGlobal(typeof self === 'object' && self) ||
      checkGlobal(typeof window === 'object' && window) ||
      (typeof mainContext !== 'undefined' && mainContext) || // set before strict mode in Ember loader/wrapper
      new Function('return this')(); // eval outside of strict mode

    _exports.global = global$1;

    var context = (function (global, Ember) {
      return Ember === undefined
        ? {
            imports: global,
            exports: global,
            lookup: global,
          }
        : {
            // import jQuery
            imports: Ember.imports || global,
            // export Ember
            exports: Ember.exports || global,
            // search for Namespaces
            lookup: Ember.lookup || global,
          };
    })(global$1, global$1.Ember);

    _exports.context = context;

    function getLookup() {
      return context.lookup;
    }

    function setLookup(value) {
      context.lookup = value;
    }
    /**
    The hash of environment variables used to control various configuration
    settings. To specify your own or override default settings, add the
    desired properties to a global hash named `EmberENV` (or `ENV` for
    backwards compatibility with earlier versions of Ember). The `EmberENV`
    hash must be created before loading Ember.
  
    @class EmberENV
    @type Object
    @public
  */

    var ENV = {
      ENABLE_OPTIONAL_FEATURES: false,

      /**
      Determines whether Ember should add to `Array`
      native object prototypes, a few extra methods in order to provide a more
      friendly API.
         We generally recommend leaving this option set to true however, if you need
      to turn it off, you can add the configuration property
      `EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.
         Note, when disabled (the default configuration for Ember Addons), you will
      instead have to access all methods and functions from the Ember
      namespace.
         @property EXTEND_PROTOTYPES
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
      EXTEND_PROTOTYPES: {
        Array: true,
      },

      /**
      The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
      a full stack trace during deprecation warnings.
         @property LOG_STACKTRACE_ON_DEPRECATION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
      LOG_STACKTRACE_ON_DEPRECATION: true,

      /**
      The `LOG_VERSION` property, when true, tells Ember to log versions of all
      dependent libraries in use.
         @property LOG_VERSION
      @type Boolean
      @default true
      @for EmberENV
      @public
    */
      LOG_VERSION: true,
      RAISE_ON_DEPRECATION: false,
      STRUCTURED_PROFILE: false,

      /**
      Whether to insert a `<div class="ember-view" />` wrapper around the
      application template. See RFC #280.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _APPLICATION_TEMPLATE_WRAPPER
      @for EmberENV
      @type Boolean
      @default true
      @private
    */
      _APPLICATION_TEMPLATE_WRAPPER: true,

      /**
      Whether to use Glimmer Component semantics (as opposed to the classic "Curly"
      components semantics) for template-only components. See RFC #278.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _TEMPLATE_ONLY_GLIMMER_COMPONENTS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
      _TEMPLATE_ONLY_GLIMMER_COMPONENTS: false,

      /**
      Whether to perform extra bookkeeping needed to make the `captureRenderTree`
      API work.
         This has to be set before the ember JavaScript code is evaluated. This is
      usually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`
      before the "vendor" `<script>` tag in `index.html`.
         Setting the flag after Ember is already loaded will not work correctly. It
      may appear to work somewhat, but fundamentally broken.
         This is not intended to be set directly. Ember Inspector will enable the
      flag on behalf of the user as needed.
         This flag is always on in development mode.
         The flag is off by default in production mode, due to the cost associated
      with the the bookkeeping work.
         The expected flow is that Ember Inspector will ask the user to refresh the
      page after enabling the feature. It could also offer a feature where the
      user add some domains to the "always on" list. In either case, Ember
      Inspector will inject the code on the page to set the flag if needed.
         @property _DEBUG_RENDER_TREE
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
      _DEBUG_RENDER_TREE: true,
      /* DEBUG */
      /**
      Whether the app defaults to using async observers.
         This is not intended to be set directly, as the implementation may change in
      the future. Use `@ember/optional-features` instead.
         @property _DEFAULT_ASYNC_OBSERVERS
      @for EmberENV
      @type Boolean
      @default false
      @private
    */
      _DEFAULT_ASYNC_OBSERVERS: false,

      /**
      Controls the maximum number of scheduled rerenders without "settling". In general,
      applications should not need to modify this environment variable, but please
      open an issue so that we can determine if a better default value is needed.
         @property _RERENDER_LOOP_LIMIT
      @for EmberENV
      @type number
      @default 1000
      @private
     */
      _RERENDER_LOOP_LIMIT: 1000,
      EMBER_LOAD_HOOKS: {},
      FEATURES: {},
    };
    _exports.ENV = ENV;

    ((EmberENV) => {
      if (typeof EmberENV !== 'object' || EmberENV === null) return;

      for (var flag in EmberENV) {
        if (
          !Object.prototype.hasOwnProperty.call(EmberENV, flag) ||
          flag === 'EXTEND_PROTOTYPES' ||
          flag === 'EMBER_LOAD_HOOKS'
        )
          continue;
        var defaultValue = ENV[flag];

        if (defaultValue === true) {
          ENV[flag] = EmberENV[flag] !== false;
        } else if (defaultValue === false) {
          ENV[flag] = EmberENV[flag] === true;
        }
      }

      var { EXTEND_PROTOTYPES } = EmberENV;

      if (EXTEND_PROTOTYPES !== undefined) {
        if (
          typeof EXTEND_PROTOTYPES === 'object' &&
          EXTEND_PROTOTYPES !== null
        ) {
          ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
        } else {
          ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES !== false;
        }
      } // TODO this does not seem to be used by anything,
      //      can we remove it? do we need to deprecate it?

      var { EMBER_LOAD_HOOKS } = EmberENV;

      if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
        for (var hookName in EMBER_LOAD_HOOKS) {
          if (!Object.prototype.hasOwnProperty.call(EMBER_LOAD_HOOKS, hookName))
            continue;
          var hooks = EMBER_LOAD_HOOKS[hookName];

          if (Array.isArray(hooks)) {
            ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(
              (hook) => typeof hook === 'function',
            );
          }
        }
      }

      var { FEATURES } = EmberENV;

      if (typeof FEATURES === 'object' && FEATURES !== null) {
        for (var feature in FEATURES) {
          if (!Object.prototype.hasOwnProperty.call(FEATURES, feature))
            continue;
          ENV.FEATURES[feature] = FEATURES[feature] === true;
        }
      }

      if (
        true
        /* DEBUG */
      ) {
        ENV._DEBUG_RENDER_TREE = true;
      }
    })(global$1.EmberENV);

    function getENV() {
      return ENV;
    }
  });
  define('@ember/-internals/error-handling/index', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.getDispatchOverride = getDispatchOverride;
    _exports.getOnerror = getOnerror;
    _exports.onErrorTarget = void 0;
    _exports.setDispatchOverride = setDispatchOverride;
    _exports.setOnerror = setOnerror;
    var onerror;
    var onErrorTarget = {
      get onerror() {
        return onerror;
      },
    }; // Ember.onerror getter

    _exports.onErrorTarget = onErrorTarget;

    function getOnerror() {
      return onerror;
    } // Ember.onerror setter

    function setOnerror(handler) {
      onerror = handler;
    }

    var dispatchOverride = null; // allows testing adapter to override dispatch

    function getDispatchOverride() {
      return dispatchOverride;
    }

    function setDispatchOverride(handler) {
      dispatchOverride = handler;
    }
  });
  define('@ember/-internals/extension-support/index', [
    'exports',
    '@ember/-internals/extension-support/lib/data_adapter',
    '@ember/-internals/extension-support/lib/container_debug_adapter',
  ], function (_exports, _data_adapter, _container_debug_adapter) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'ContainerDebugAdapter', {
      enumerable: true,
      get: function () {
        return _container_debug_adapter.default;
      },
    });
    Object.defineProperty(_exports, 'DataAdapter', {
      enumerable: true,
      get: function () {
        return _data_adapter.default;
      },
    });
  });
  define('@ember/-internals/extension-support/lib/container_debug_adapter', [
    'exports',
    '@ember/string',
    '@ember/-internals/runtime',
    '@ember/-internals/owner',
  ], function (_exports, _string, _runtime, _owner) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/debug
  */

    /**
    The `ContainerDebugAdapter` helps the container and resolver interface
    with tools that debug Ember such as the
    [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class can be extended by a custom resolver implementer
    to override some of the methods with library-specific code.
  
    The methods likely to be overridden are:
  
    * `canCatalogEntriesByType`
    * `catalogEntriesByType`
  
    The adapter will need to be registered
    in the application's container as `container-debug-adapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "containerDebugAdapter",
  
      initialize(application) {
        application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
      }
    });
    ```
  
    @class ContainerDebugAdapter
    @extends EmberObject
    @since 1.5.0
    @public
  */
    class ContainerDebugAdapter extends _runtime.Object {
      constructor(owner) {
        super(owner);
        this.resolver = (0, _owner.getOwner)(this).lookup(
          'resolver-for-debugging:main',
        );
      }
      /**
      Returns true if it is possible to catalog a list of available
      classes in the resolver for a given type.
         @method canCatalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {boolean} whether a list is available for this type.
      @public
    */

      canCatalogEntriesByType(type) {
        if (type === 'model' || type === 'template') {
          return false;
        }

        return true;
      }
      /**
      Returns the available classes a given type.
         @method catalogEntriesByType
      @param {String} type The type. e.g. "model", "controller", "route".
      @return {Array} An array of strings.
      @public
    */

      catalogEntriesByType(type) {
        var namespaces = (0, _runtime.A)(_runtime.Namespace.NAMESPACES);
        var types = (0, _runtime.A)();
        var typeSuffixRegex = new RegExp(`${(0, _string.classify)(type)}$`);
        namespaces.forEach((namespace) => {
          for (var key in namespace) {
            if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
              continue;
            }

            if (typeSuffixRegex.test(key)) {
              var klass = namespace[key];

              if ((0, _runtime.typeOf)(klass) === 'class') {
                types.push(
                  (0, _string.dasherize)(key.replace(typeSuffixRegex, '')),
                );
              }
            }
          }
        });
        return types;
      }
    }

    _exports.default = ContainerDebugAdapter;
  });
  define('@ember/-internals/extension-support/lib/data_adapter', [
    'exports',
    '@ember/-internals/owner',
    '@ember/runloop',
    '@ember/-internals/metal',
    '@ember/string',
    '@ember/-internals/runtime',
    '@glimmer/validator',
  ], function (
    _exports,
    _owner,
    _runloop,
    _metal,
    _string,
    _runtime,
    _validator,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    function iterate(arr, fn) {
      if (Symbol.iterator in arr) {
        for (var item of arr) {
          fn(item);
        }
      } else {
        arr.forEach(fn);
      }
    }

    class RecordsWatcher {
      constructor(
        records,
        recordsAdded,
        recordsUpdated,
        recordsRemoved,
        wrapRecord,
        release,
      ) {
        this.wrapRecord = wrapRecord;
        this.release = release;
        this.recordCaches = new Map();
        this.added = [];
        this.updated = [];
        this.removed = [];
        this.recordArrayCache = (0, _validator.createCache)(() => {
          var seen = new Set(); // Track `[]` for legacy support

          (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));
          iterate(records, (record) => {
            (0, _validator.getValue)(this.getCacheForItem(record));
            seen.add(record);
          }); // Untrack this operation because these records are being removed, they
          // should not be polled again in the future

          (0, _validator.untrack)(() => {
            this.recordCaches.forEach((_cache, record) => {
              if (!seen.has(record)) {
                this.removed.push(wrapRecord(record));
                this.recordCaches.delete(record);
              }
            });
          });

          if (this.added.length > 0) {
            recordsAdded(this.added);
            this.added = [];
          }

          if (this.updated.length > 0) {
            recordsUpdated(this.updated);
            this.updated = [];
          }

          if (this.removed.length > 0) {
            recordsRemoved(this.removed);
            this.removed = [];
          }
        });
      }

      getCacheForItem(record) {
        var recordCache = this.recordCaches.get(record);

        if (!recordCache) {
          var hasBeenAdded = false;
          recordCache = (0, _validator.createCache)(() => {
            if (!hasBeenAdded) {
              this.added.push(this.wrapRecord(record));
              hasBeenAdded = true;
            } else {
              this.updated.push(this.wrapRecord(record));
            }
          });
          this.recordCaches.set(record, recordCache);
        }

        return recordCache;
      }

      revalidate() {
        (0, _validator.getValue)(this.recordArrayCache);
      }
    }

    class TypeWatcher {
      constructor(records, onChange, release) {
        this.release = release;
        var hasBeenAccessed = false;
        this.cache = (0, _validator.createCache)(() => {
          // Empty iteration, we're doing this just
          // to track changes to the records array
          iterate(records, () => {}); // Also track `[]` for legacy support

          (0, _validator.consumeTag)((0, _validator.tagFor)(records, '[]'));

          if (hasBeenAccessed === true) {
            onChange();
          } else {
            hasBeenAccessed = true;
          }
        });
        this.release = release;
      }

      revalidate() {
        (0, _validator.getValue)(this.cache);
      }
    }
    /**
  @module @ember/debug
  */

    /**
    The `DataAdapter` helps a data persistence library
    interface with tools that debug Ember such
    as the [Ember Inspector](https://github.com/emberjs/ember-inspector)
    for Chrome and Firefox.
  
    This class will be extended by a persistence library
    which will override some of the methods with
    library-specific code.
  
    The methods likely to be overridden are:
  
    * `getFilters`
    * `detect`
    * `columnsForType`
    * `getRecords`
    * `getRecordColumnValues`
    * `getRecordKeywords`
    * `getRecordFilterValues`
    * `getRecordColor`
  
    The adapter will need to be registered
    in the application's container as `dataAdapter:main`.
  
    Example:
  
    ```javascript
    Application.initializer({
      name: "data-adapter",
  
      initialize: function(application) {
        application.register('data-adapter:main', DS.DataAdapter);
      }
    });
    ```
  
    @class DataAdapter
    @extends EmberObject
    @public
  */

    class DataAdapter extends _runtime.Object {
      constructor(owner) {
        super(owner);
        this.releaseMethods = (0, _runtime.A)();
        this.recordsWatchers = new Map();
        this.typeWatchers = new Map();
        this.flushWatchers = null;
        /**
        The container-debug-adapter which is used
        to list all models.
               @property containerDebugAdapter
        @default undefined
        @since 1.5.0
        @public
      **/

        /**
        The number of attributes to send
        as columns. (Enough to make the record
        identifiable).
               @private
        @property attributeLimit
        @default 3
        @since 1.3.0
      */

        this.attributeLimit = 3;
        /**
         Ember Data > v1.0.0-beta.18
         requires string model names to be passed
         around instead of the actual factories.
                This is a stamp for the Ember Inspector
         to differentiate between the versions
         to be able to support older versions too.
                @public
         @property acceptsModelName
       */

        this.acceptsModelName = true;
        this.containerDebugAdapter = (0, _owner.getOwner)(this).lookup(
          'container-debug-adapter:main',
        );
      }
      /**
       Map from records arrays to RecordsWatcher instances
          @private
       @property recordsWatchers
       @since 3.26.0
     */

      /**
      Map from records arrays to TypeWatcher instances
         @private
      @property typeWatchers
      @since 3.26.0
     */

      /**
      Callback that is currently scheduled on backburner end to flush and check
      all active watchers.
         @private
      @property flushWatchers
      @since 3.26.0
        */

      /**
      Stores all methods that clear observers.
      These methods will be called on destruction.
         @private
      @property releaseMethods
      @since 1.3.0
    */

      /**
      Specifies how records can be filtered.
      Records returned will need to have a `filterValues`
      property with a key for every name in the returned array.
         @public
      @method getFilters
      @return {Array} List of objects defining filters.
       The object should have a `name` and `desc` property.
    */

      getFilters() {
        return (0, _runtime.A)();
      }
      /**
      Fetch the model types and observe them for changes.
         @public
      @method watchModelTypes
         @param {Function} typesAdded Callback to call to add types.
      Takes an array of objects containing wrapped types (returned from `wrapModelType`).
         @param {Function} typesUpdated Callback to call when a type has changed.
      Takes an array of objects containing wrapped types.
         @return {Function} Method to call to remove all observers
    */

      watchModelTypes(typesAdded, typesUpdated) {
        var modelTypes = this.getModelTypes();
        var releaseMethods = (0, _runtime.A)();
        var typesToSend;
        typesToSend = modelTypes.map((type) => {
          var klass = type.klass;
          var wrapped = this.wrapModelType(klass, type.name);
          releaseMethods.push(this.observeModelType(type.name, typesUpdated));
          return wrapped;
        });
        typesAdded(typesToSend);

        var release = () => {
          releaseMethods.forEach((fn) => fn());
          this.releaseMethods.removeObject(release);
        };

        this.releaseMethods.pushObject(release);
        return release;
      }

      _nameToClass(type) {
        if (typeof type === 'string') {
          var owner = (0, _owner.getOwner)(this);
          var Factory = owner.factoryFor(`model:${type}`);
          type = Factory && Factory.class;
        }

        return type;
      }
      /**
      Fetch the records of a given type and observe them for changes.
         @public
      @method watchRecords
         @param {String} modelName The model name.
         @param {Function} recordsAdded Callback to call to add records.
      Takes an array of objects containing wrapped records.
      The object should have the following properties:
        columnValues: {Object} The key and value of a table cell.
        object: {Object} The actual record object.
         @param {Function} recordsUpdated Callback to call when a record has changed.
      Takes an array of objects containing wrapped records.
         @param {Function} recordsRemoved Callback to call when a record has removed.
      Takes an array of objects containing wrapped records.
         @return {Function} Method to call to remove all observers.
    */

      watchRecords(modelName, recordsAdded, recordsUpdated, recordsRemoved) {
        var klass = this._nameToClass(modelName);

        var records = this.getRecords(klass, modelName);
        var { recordsWatchers } = this;
        var recordsWatcher = recordsWatchers.get(records);

        if (!recordsWatcher) {
          recordsWatcher = new RecordsWatcher(
            records,
            recordsAdded,
            recordsUpdated,
            recordsRemoved,
            (record) => this.wrapRecord(record),
            () => {
              recordsWatchers.delete(records);
              this.updateFlushWatchers();
            },
          );
          recordsWatchers.set(records, recordsWatcher);
          this.updateFlushWatchers();
          recordsWatcher.revalidate();
        }

        return recordsWatcher.release;
      }

      updateFlushWatchers() {
        if (this.flushWatchers === null) {
          if (this.typeWatchers.size > 0 || this.recordsWatchers.size > 0) {
            this.flushWatchers = () => {
              this.typeWatchers.forEach((watcher) => watcher.revalidate());
              this.recordsWatchers.forEach((watcher) => watcher.revalidate());
            };

            _runloop._backburner.on('end', this.flushWatchers);
          }
        } else if (
          this.typeWatchers.size === 0 &&
          this.recordsWatchers.size === 0
        ) {
          _runloop._backburner.off('end', this.flushWatchers);

          this.flushWatchers = null;
        }
      }
      /**
      Clear all observers before destruction
      @private
      @method willDestroy
    */

      willDestroy() {
        this._super(...arguments);

        this.typeWatchers.forEach((watcher) => watcher.release());
        this.recordsWatchers.forEach((watcher) => watcher.release());
        this.releaseMethods.forEach((fn) => fn());

        if (this.flushWatchers) {
          _runloop._backburner.off('end', this.flushWatchers);
        }
      }
      /**
      Detect whether a class is a model.
         Test that against the model class
      of your persistence library.
         @public
      @method detect
      @return boolean Whether the class is a model class or not.
    */

      detect(_klass) {
        return false;
      }
      /**
      Get the columns for a given model type.
         @public
      @method columnsForType
      @return {Array} An array of columns of the following format:
       name: {String} The name of the column.
       desc: {String} Humanized description (what would show in a table column name).
    */

      columnsForType(_klass) {
        return (0, _runtime.A)();
      }
      /**
      Adds observers to a model type class.
         @private
      @method observeModelType
      @param {String} modelName The model type name.
      @param {Function} typesUpdated Called when a type is modified.
      @return {Function} The function to call to remove observers.
    */

      observeModelType(modelName, typesUpdated) {
        var klass = this._nameToClass(modelName);

        var records = this.getRecords(klass, modelName);

        var onChange = () => {
          typesUpdated([this.wrapModelType(klass, modelName)]);
        };

        var { typeWatchers } = this;
        var typeWatcher = typeWatchers.get(records);

        if (!typeWatcher) {
          typeWatcher = new TypeWatcher(records, onChange, () => {
            typeWatchers.delete(records);
            this.updateFlushWatchers();
          });
          typeWatchers.set(records, typeWatcher);
          this.updateFlushWatchers();
          typeWatcher.revalidate();
        }

        return typeWatcher.release;
      }
      /**
      Wraps a given model type and observes changes to it.
         @private
      @method wrapModelType
      @param {Class} klass A model class.
      @param {String} modelName Name of the class.
      @return {Object} The wrapped type has the following format:
        name: {String} The name of the type.
        count: {Integer} The number of records available.
        columns: {Columns} An array of columns to describe the record.
        object: {Class} The actual Model type class.
    */

      wrapModelType(klass, name) {
        var records = this.getRecords(klass, name);
        return {
          name,
          count: (0, _metal.get)(records, 'length'),
          columns: this.columnsForType(klass),
          object: klass,
        };
      }
      /**
      Fetches all models defined in the application.
         @private
      @method getModelTypes
      @return {Array} Array of model types.
    */

      getModelTypes() {
        var containerDebugAdapter = this.containerDebugAdapter;
        var stringTypes = containerDebugAdapter.canCatalogEntriesByType('model')
          ? containerDebugAdapter.catalogEntriesByType('model')
          : this._getObjectsOnNamespaces(); // New adapters return strings instead of classes.

        var klassTypes = (0, _runtime.A)(stringTypes).map((name) => {
          return {
            klass: this._nameToClass(name),
            name,
          };
        });
        return (0, _runtime.A)(klassTypes).filter((type) =>
          this.detect(type.klass),
        );
      }
      /**
      Loops over all namespaces and all objects
      attached to them.
         @private
      @method _getObjectsOnNamespaces
      @return {Array} Array of model type strings.
    */

      _getObjectsOnNamespaces() {
        var namespaces = (0, _runtime.A)(_runtime.Namespace.NAMESPACES);
        var types = (0, _runtime.A)();
        namespaces.forEach((namespace) => {
          for (var key in namespace) {
            if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
              continue;
            } // Even though we will filter again in `getModelTypes`,
            // we should not call `lookupFactory` on non-models

            if (!this.detect(namespace[key])) {
              continue;
            }

            var name = (0, _string.dasherize)(key);
            types.push(name);
          }
        });
        return types;
      }
      /**
      Fetches all loaded records for a given type.
         @public
      @method getRecords
      @return {Array} An array of records.
       This array will be observed for changes,
       so it should update when new records are added/removed.
    */

      getRecords(_klass, _name) {
        return (0, _runtime.A)();
      }
      /**
      Wraps a record and observers changes to it.
         @private
      @method wrapRecord
      @param {Object} record The record instance.
      @return {Object} The wrapped record. Format:
      columnValues: {Array}
      searchKeywords: {Array}
    */

      wrapRecord(record) {
        return {
          object: record,
          columnValues: this.getRecordColumnValues(record),
          searchKeywords: this.getRecordKeywords(record),
          filterValues: this.getRecordFilterValues(record),
          color: this.getRecordColor(record),
        };
      }
      /**
      Gets the values for each column.
         @public
      @method getRecordColumnValues
      @return {Object} Keys should match column names defined
      by the model type.
    */

      getRecordColumnValues(_record) {
        return {};
      }
      /**
      Returns keywords to match when searching records.
         @public
      @method getRecordKeywords
      @return {Array} Relevant keywords for search.
    */

      getRecordKeywords(_record) {
        return (0, _runtime.A)();
      }
      /**
      Returns the values of filters defined by `getFilters`.
         @public
      @method getRecordFilterValues
      @param {Object} record The record instance.
      @return {Object} The filter values.
    */

      getRecordFilterValues(_record) {
        return {};
      }
      /**
      Each record can have a color that represents its state.
         @public
      @method getRecordColor
      @param {Object} record The record instance
      @return {String} The records color.
        Possible options: black, red, blue, green.
    */

      getRecordColor(_record) {
        return null;
      }
    }

    _exports.default = DataAdapter;
  });
  define('@ember/-internals/glimmer/index', [
    'exports',
    '@glimmer/opcode-compiler',
    '@ember/-internals/owner',
    '@ember/-internals/utils',
    '@ember/debug',
    '@glimmer/manager',
    '@glimmer/reference',
    '@glimmer/validator',
    '@ember/-internals/metal',
    '@ember/object',
    '@ember/-internals/browser-environment',
    '@ember/-internals/views',
    '@ember/engine',
    '@ember/engine/instance',
    '@ember/instrumentation',
    '@ember/service',
    '@ember/string',
    '@glimmer/destroyable',
    '@ember/runloop',
    '@glimmer/util',
    '@glimmer/runtime',
    '@ember/-internals/runtime',
    '@ember/-internals/environment',
    '@ember/-internals/container',
    '@glimmer/node',
    '@ember/-internals/glimmer',
    '@glimmer/global-context',
    '@ember/-internals/routing',
    '@glimmer/program',
    'rsvp',
  ], function (
    _exports,
    _opcodeCompiler,
    _owner2,
    _utils,
    _debug,
    _manager2,
    _reference,
    _validator,
    _metal,
    _object,
    _browserEnvironment,
    _views,
    _engine,
    _instance,
    _instrumentation,
    _service,
    _string,
    _destroyable,
    _runloop,
    _util,
    _runtime,
    _runtime2,
    _environment2,
    _container,
    _node,
    _glimmer,
    _globalContext,
    _routing2,
    _program,
    _rsvp,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.Component = void 0;
    Object.defineProperty(_exports, 'DOMChanges', {
      enumerable: true,
      get: function () {
        return _runtime.DOMChanges;
      },
    });
    Object.defineProperty(_exports, 'DOMTreeConstruction', {
      enumerable: true,
      get: function () {
        return _runtime.DOMTreeConstruction;
      },
    });
    _exports.LinkTo = _exports.Input = _exports.Helper = void 0;
    Object.defineProperty(_exports, 'NodeDOMTreeConstruction', {
      enumerable: true,
      get: function () {
        return _node.NodeDOMTreeConstruction;
      },
    });
    _exports.Textarea = _exports.SafeString = _exports.RootTemplate = _exports.Renderer = _exports.OutletView = void 0;
    _exports._resetRenderers = _resetRenderers;
    _exports.componentCapabilities = void 0;
    _exports.escapeExpression = escapeExpression;
    _exports.getTemplate = getTemplate;
    _exports.getTemplates = getTemplates;
    _exports.hasTemplate = hasTemplate;
    _exports.helper = helper;
    _exports.htmlSafe = htmlSafe;
    _exports.isHTMLSafe = isHTMLSafe$1;
    Object.defineProperty(_exports, 'isSerializationFirstNode', {
      enumerable: true,
      get: function () {
        return _runtime.isSerializationFirstNode;
      },
    });
    _exports.modifierCapabilities = void 0;
    _exports.renderSettled = renderSettled;
    _exports.setComponentManager = setComponentManager$1;
    _exports.setTemplate = setTemplate;
    _exports.setTemplates = setTemplates;
    _exports.setupApplicationRegistry = setupApplicationRegistry;
    _exports.setupEngineRegistry = setupEngineRegistry;
    Object.defineProperty(_exports, 'template', {
      enumerable: true,
      get: function () {
        return _opcodeCompiler.templateFactory;
      },
    });
    Object.defineProperty(_exports, 'templateCacheCounters', {
      enumerable: true,
      get: function () {
        return _opcodeCompiler.templateCacheCounters;
      },
    });
    var RootTemplate = (0, _opcodeCompiler.templateFactory)({
      id: '9BtKrod8',
      block: '[[[46,[30,0],null,null,null]],[],false,["component"]]',
      moduleName: 'packages/@ember/-internals/glimmer/lib/templates/root.hbs',
      isStrictMode: false,
    });
    _exports.RootTemplate = RootTemplate;
    var InputTemplate = (0, _opcodeCompiler.templateFactory)({
      id: 'OGSIkgXP',
      block:
        '[[[11,"input"],[16,1,[30,0,["id"]]],[16,0,[30,0,["class"]]],[17,1],[16,4,[30,0,["type"]]],[16,"checked",[30,0,["checked"]]],[16,2,[30,0,["value"]]],[4,[38,0],["change",[30,0,["change"]]],null],[4,[38,0],["input",[30,0,["input"]]],null],[4,[38,0],["keyup",[30,0,["keyUp"]]],null],[4,[38,0],["paste",[30,0,["valueDidChange"]]],null],[4,[38,0],["cut",[30,0,["valueDidChange"]]],null],[12],[13]],["&attrs"],false,["on"]]',
      moduleName: 'packages/@ember/-internals/glimmer/lib/templates/input.hbs',
      isStrictMode: false,
    });

    function NOOP() {}

    class InternalComponent {
      constructor(owner, args, caller) {
        this.owner = owner;
        this.args = args;
        this.caller = caller;
        (0, _owner2.setOwner)(this, owner);
      } // Override this

      static toString() {
        return 'internal component';
      }
      /**
       * The default HTML id attribute. We don't really _need_ one, this is just
       * added for compatibility as it's hard to tell if people rely on it being
       * present, and it doens't really hurt.
       *
       * However, don't rely on this internally, like passing it to `getElementId`.
       * This can be (and often is) overriden by passing an `id` attribute on the
       * invocation, which shadows this default id via `...attributes`.
       */

      get id() {
        return (0, _utils.guidFor)(this);
      }
      /**
       * The default HTML class attribute. Similar to the above, we don't _need_
       * them, they are just added for compatibility as it's similarly hard to tell
       * if people rely on it in their CSS etc, and it doens't really hurt.
       */

      get class() {
        return 'ember-view';
      }

      validateArguments() {
        for (var name of Object.keys(this.args.named)) {
          if (!this.isSupportedArgument(name)) {
            this.onUnsupportedArgument(name);
          }
        }
      }

      named(name) {
        var ref = this.args.named[name];
        return ref ? (0, _reference.valueForRef)(ref) : undefined;
      }

      positional(index) {
        var ref = this.args.positional[index];
        return ref ? (0, _reference.valueForRef)(ref) : undefined;
      }

      listenerFor(name) {
        var listener = this.named(name);

        if (listener) {
          true &&
            !(typeof listener === 'function') &&
            (0, _debug.assert)(
              `The \`@${name}\` argument to the <${this.constructor}> component must be a function`,
              typeof listener === 'function',
            );
          return listener;
        } else {
          return NOOP;
        }
      } // eslint-disable-next-line @typescript-eslint/no-unused-vars

      isSupportedArgument(_name) {
        return false;
      } // eslint-disable-next-line @typescript-eslint/no-unused-vars

      onUnsupportedArgument(_name) {}

      toString() {
        return `<${this.constructor}:${(0, _utils.guidFor)(this)}>`;
      }
    }

    var OPAQUE_CONSTRUCTOR_MAP = new WeakMap();

    function opaquify(constructor, template) {
      var _opaque = {
        // Factory interface
        create() {
          throw (0, _debug.assert)('Use constructor instead of create');
        },

        toString() {
          return constructor.toString();
        },
      };
      var opaque = _opaque;
      OPAQUE_CONSTRUCTOR_MAP.set(opaque, constructor);
      (0, _manager2.setInternalComponentManager)(
        INTERNAL_COMPONENT_MANAGER,
        opaque,
      );
      (0, _manager2.setComponentTemplate)(template, opaque);
      return opaque;
    }

    function deopaquify(opaque) {
      var constructor = OPAQUE_CONSTRUCTOR_MAP.get(opaque);
      true &&
        !constructor &&
        (0, _debug.assert)(
          `[BUG] Invalid internal component constructor: ${opaque}`,
          constructor,
        );
      return constructor;
    }

    var CAPABILITIES = {
      dynamicLayout: false,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: true,
      attributeHook: false,
      elementHook: false,
      createCaller: true,
      dynamicScope: false,
      updateHook: false,
      createInstance: true,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };

    class InternalManager {
      getCapabilities() {
        return CAPABILITIES;
      }

      create(owner, definition, args, _env, _dynamicScope, caller) {
        true &&
          !(0, _reference.isConstRef)(caller) &&
          (0, _debug.assert)(
            'caller must be const',
            (0, _reference.isConstRef)(caller),
          );
        var ComponentClass = deopaquify(definition);
        var instance = new ComponentClass(
          owner,
          args.capture(),
          (0, _reference.valueForRef)(caller),
        );
        (0, _validator.untrack)(instance['validateArguments'].bind(instance));
        return instance;
      }

      didCreate() {}

      didUpdate() {}

      didRenderLayout() {}

      didUpdateLayout() {}

      getDebugName(definition) {
        return definition.toString();
      }

      getSelf(instance) {
        return (0, _reference.createConstRef)(instance, 'this');
      }

      getDestroyable(instance) {
        return instance;
      }
    }

    var INTERNAL_COMPONENT_MANAGER = new InternalManager();

    var __decorate =
      (undefined && undefined.__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    var UNINITIALIZED = Object.freeze({});

    function elementForEvent(event) {
      true &&
        !(
          event.target instanceof HTMLInputElement ||
          event.target instanceof HTMLTextAreaElement
        ) &&
        (0, _debug.assert)(
          '[BUG] event target must be an <input> or <textarea> element',
          event.target instanceof HTMLInputElement ||
            event.target instanceof HTMLTextAreaElement,
        );
      return event.target;
    }

    function valueForEvent(event) {
      return elementForEvent(event).value;
    }

    function devirtualize(callback) {
      return (event) => callback(valueForEvent(event), event);
    }

    function valueFrom(reference) {
      if (reference === undefined) {
        return new LocalValue(undefined);
      } else if ((0, _reference.isConstRef)(reference)) {
        return new LocalValue((0, _reference.valueForRef)(reference));
      } else if ((0, _reference.isUpdatableRef)(reference)) {
        return new UpstreamValue(reference);
      } else {
        return new ForkedValue(reference);
      }
    }

    class LocalValue {
      constructor(value) {
        this.value = value;
      }

      get() {
        return this.value;
      }

      set(value) {
        this.value = value;
      }
    }

    __decorate([_metal.tracked], LocalValue.prototype, 'value', void 0);

    class UpstreamValue {
      constructor(reference) {
        this.reference = reference;
      }

      get() {
        return (0, _reference.valueForRef)(this.reference);
      }

      set(value) {
        (0, _reference.updateRef)(this.reference, value);
      }
    }

    class ForkedValue {
      constructor(reference) {
        this.lastUpstreamValue = UNINITIALIZED;
        this.upstream = new UpstreamValue(reference);
      }

      get() {
        var upstreamValue = this.upstream.get();

        if (upstreamValue !== this.lastUpstreamValue) {
          this.lastUpstreamValue = upstreamValue;
          this.local = new LocalValue(upstreamValue);
        }

        true &&
          !this.local &&
          (0, _debug.assert)(
            '[BUG] this.local must have been initialized at this point',
            this.local,
          );
        return this.local.get();
      }

      set(value) {
        true &&
          !this.local &&
          (0, _debug.assert)(
            '[BUG] this.local must have been initialized at this point',
            this.local,
          );
        this.local.set(value);
      }
    }

    class AbstractInput extends InternalComponent {
      constructor() {
        super(...arguments);
        this._value = valueFrom(this.args.named['value']);
      }

      validateArguments() {
        true &&
          !(this.args.positional.length === 0) &&
          (0, _debug.assert)(
            `The ${this.constructor} component does not take any positional arguments`,
            this.args.positional.length === 0,
          );
        super.validateArguments();
      }

      get value() {
        return this._value.get();
      }

      set value(value) {
        this._value.set(value);
      }

      valueDidChange(event) {
        this.value = valueForEvent(event);
      }
      /**
       * The `change` and `input` actions need to be overridden in the `Input`
       * subclass. Unfortunately, some ember-source builds currently uses babel
       * loose mode to transpile its classes. Having the `@action` decorator on the
       * super class creates a getter on the prototype, and when the subclass
       * overrides the method, the loose mode transpilation would emit something
       * like `Subclass.prototype['change'] = function change() { ... }`, which
       * fails because `prototype['change']` is getter-only/readonly. The correct
       * solution is to use `Object.defineProperty(prototype, 'change', ...)` but
       * that requires disabling loose mode. For now, the workaround is to add the
       * decorator only on the subclass. This is more of a configuration issue on
       * our own builds and doesn't really affect apps.
       */

      /* @action */

      change(event) {
        this.valueDidChange(event);
      }
      /* @action */

      input(event) {
        this.valueDidChange(event);
      }

      keyUp(event) {
        switch (event.key) {
          case 'Enter':
            this.listenerFor('enter')(event);
            this.listenerFor('insert-newline')(event);
            break;

          case 'Escape':
            this.listenerFor('escape-press')(event);
            break;
        }
      }

      listenerFor(name) {
        var listener = super.listenerFor(name);

        if (this.isVirtualEventListener(name, listener)) {
          return devirtualize(listener);
        } else {
          return listener;
        }
      }

      isVirtualEventListener(name, _listener) {
        var virtualEvents = ['enter', 'insert-newline', 'escape-press'];
        return virtualEvents.indexOf(name) !== -1;
      }
    }

    __decorate(
      [_object.action],
      AbstractInput.prototype,
      'valueDidChange',
      null,
    );

    __decorate([_object.action], AbstractInput.prototype, 'keyUp', null);

    var __decorate$1 =
      (undefined && undefined.__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    var isValidInputType;

    if (_browserEnvironment.hasDOM) {
      var INPUT_TYPES = Object.create(null);
      var INPUT_ELEMENT = document.createElement('input');
      INPUT_TYPES[''] = false;
      INPUT_TYPES['text'] = true;
      INPUT_TYPES['checkbox'] = true;

      isValidInputType = (type) => {
        var isValid = INPUT_TYPES[type];

        if (isValid === undefined) {
          try {
            INPUT_ELEMENT.type = type;
            isValid = INPUT_ELEMENT.type === type;
          } catch (e) {
            isValid = false;
          } finally {
            INPUT_ELEMENT.type = 'text';
          }

          INPUT_TYPES[type] = isValid;
        }

        return isValid;
      };
    } else {
      isValidInputType = (type) => type !== '';
    }
    /**
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @method input
    @for Ember.Templates.helpers
    @param {Hash} options
    @public
    */

    /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Input>.
  
    See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).
  
    @for @ember/component
    @method Input
    @see {Ember.Templates.components.Input}
    @public
  **/

    /**
    The `Input` component lets you create an HTML `<input>` element.
  
    ```handlebars
    <Input @value="987" />
    ```
  
    creates an `<input>` element with `type="text"` and value set to 987.
  
    ### Text field
  
    If no `type` argument is specified, a default of type 'text' is used.
  
    ```handlebars
    Search:
    <Input @value={{this.searchWord}} />
    ```
  
    In this example, the initial value in the `<input>` will be set to the value of
    `this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be
    updated.
  
    ### Actions
  
    The `Input` component takes a number of arguments with callbacks that are invoked in response to
    user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-down`
    * `key-press`
    * `key-up`
  
    These callbacks are passed to `Input` like this:
  
    ```handlebars
    <Input @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    Starting with Ember Octane, we recommend using the `{{on}}` modifier to call actions
    on specific events, such as the input event.
  
    ```handlebars
    <label for="input-name">Name:</label>
    <Input
      @id="input-name"
      @value={{this.name}}
      {{on "input" this.validateName}}
    />
    ```
  
    The event name (e.g. `focusout`, `input`, `keydown`) always follows the casing
    that the HTML standard uses.
  
    ### `<input>` HTML Attributes to Avoid
  
    In most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you
    can pass the attribute directly, just like any other Ember component.
  
    ```handlebars
    <Input @type="text" size="10" />
    ```
  
    In this example, the `size` attribute will be applied to the underlying `<input>` element in the
    outputted HTML.
  
    However, there are a few attributes where you **must** use the `@` version.
  
    * `@type`: This argument is used to control which Ember component is used under the hood
    * `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a
      one-way binding, use `<input>` with the `value` property and the `input` event instead.
    * `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding
      onto the element. If you wanted a one-way binding, use `<input type="checkbox">` with
      `checked` and the `input` event instead.
  
    ### Extending `TextField`
  
    Internally, `<Input @type="text" />` creates an instance of `TextField`, passing arguments from
    the helper to `TextField`'s `create` method. Subclassing `TextField` is supported but not
    recommended.
  
    See [TextField](/ember/release/classes/TextField)
  
    ### Checkbox
  
    To create an `<input type="checkbox">`:
  
    ```handlebars
    Emberize Everything:
    <Input @type="checkbox" @checked={{this.isEmberized}} name="isEmberized" />
    ```
  
    This will bind the checked state of this checkbox to the value of `isEmberized` -- if either one
    changes, it will be reflected in the other.
  
    ### Extending `Checkbox`
  
    Internally, `<Input @type="checkbox" />` creates an instance of `Checkbox`. Subclassing
    `TextField` is supported but not recommended.
  
    See [Checkbox](/ember/release/classes/Checkbox)
  
    @method Input
    @for Ember.Templates.components
    @see {TextField}
    @see {Checkbox}
    @param {Hash} options
    @public
  */

    class Input extends AbstractInput {
      constructor() {
        super(...arguments);
        this._checked = valueFrom(this.args.named['checked']);
      }

      static toString() {
        return 'Input';
      }
      /**
       * The HTML class attribute.
       */

      get class() {
        if (this.isCheckbox) {
          return 'ember-checkbox ember-view';
        } else {
          return 'ember-text-field ember-view';
        }
      }
      /**
       * The HTML type attribute.
       */

      get type() {
        var type = this.named('type');

        if (type === null || type === undefined) {
          return 'text';
        }

        true &&
          !(typeof type === 'string') &&
          (0, _debug.assert)(
            'The `@type` argument to the <Input> component must be a string',
            typeof type === 'string',
          );
        return isValidInputType(type) ? type : 'text';
      }

      get isCheckbox() {
        return this.named('type') === 'checkbox';
      }

      get checked() {
        if (this.isCheckbox) {
          true &&
            (0, _debug.warn)(
              '`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' +
                'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' +
                'Did you mean `<Input @type="checkbox" @checked={{...}} />`?',
              (0, _validator.untrack)(
                () =>
                  this.args.named['checked'] !== undefined ||
                  this.args.named['value'] === undefined ||
                  typeof (0, _reference.valueForRef)(
                    this.args.named['value'],
                  ) === 'string',
              ),
              {
                id: 'ember.built-in-components.input-checkbox-value',
              },
            );
          return this._checked.get();
        } else {
          return undefined;
        }
      }

      set checked(checked) {
        true &&
          (0, _debug.warn)(
            '`<Input @type="checkbox" />` reflects its checked state via the `@checked` argument. ' +
              'You wrote `<Input @type="checkbox" @value={{...}} />` which is likely not what you intended. ' +
              'Did you mean `<Input @type="checkbox" @checked={{...}} />`?',
            (0, _validator.untrack)(
              () =>
                this.args.named['checked'] !== undefined ||
                this.args.named['value'] === undefined ||
                typeof (0, _reference.valueForRef)(this.args.named['value']) ===
                  'string',
            ),
            {
              id: 'ember.built-in-components.input-checkbox-value',
            },
          );

        this._checked.set(checked);
      }

      change(event) {
        if (this.isCheckbox) {
          this.checkedDidChange(event);
        } else {
          super.change(event);
        }
      }

      input(event) {
        if (!this.isCheckbox) {
          super.input(event);
        }
      }

      checkedDidChange(event) {
        var element = event.target;
        true &&
          !(element instanceof HTMLInputElement) &&
          (0, _debug.assert)(
            '[BUG] element must be an <input>',
            element instanceof HTMLInputElement,
          );
        this.checked = element.checked;
      }

      isSupportedArgument(name) {
        var supportedArguments = [
          'type',
          'value',
          'checked',
          'enter',
          'insert-newline',
          'escape-press',
        ];
        return (
          supportedArguments.indexOf(name) !== -1 ||
          super.isSupportedArgument(name)
        );
      }
    }

    __decorate$1([_object.action], Input.prototype, 'change', null);

    __decorate$1([_object.action], Input.prototype, 'input', null);

    __decorate$1([_object.action], Input.prototype, 'checkedDidChange', null);

    var Input$1 = opaquify(Input, InputTemplate);
    _exports.Input = Input$1;
    var LinkToTemplate = (0, _opcodeCompiler.templateFactory)({
      id: 'CVwkBtGh',
      block:
        '[[[11,3],[16,1,[30,0,["id"]]],[16,0,[30,0,["class"]]],[16,"role",[30,0,["role"]]],[16,"title",[30,0,["title"]]],[16,"rel",[30,0,["rel"]]],[16,"tabindex",[30,0,["tabindex"]]],[16,"target",[30,0,["target"]]],[17,1],[16,6,[30,0,["href"]]],[4,[38,0],["click",[30,0,["click"]]],null],[12],[18,2,null],[13]],["&attrs","&default"],false,["on","yield"]]',
      moduleName:
        'packages/@ember/-internals/glimmer/lib/templates/link-to.hbs',
      isStrictMode: false,
    });

    var __decorate$2 =
      (undefined && undefined.__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    var EMPTY_ARRAY$1 = [];
    var EMPTY_QUERY_PARAMS = {};
    (0, _debug.debugFreeze)(EMPTY_ARRAY$1);
    (0, _debug.debugFreeze)(EMPTY_QUERY_PARAMS);

    function isMissing(value) {
      return value === null || value === undefined;
    }

    function isPresent(value) {
      return !isMissing(value);
    }

    function isQueryParams(value) {
      return (
        typeof value === 'object' &&
        value !== null &&
        value['isQueryParams'] === true
      );
    }
    /**
    The `LinkTo` component renders a link to the supplied `routeName` passing an optionally
    supplied model to the route as its `model` context of the route. The block for `LinkTo`
    becomes the contents of the rendered element:
  
    ```handlebars
    <LinkTo @route='photoGallery'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos">
      Great Hamster Photos
    </a>
    ```
  
    ### Disabling the `LinkTo` component
  
    The `LinkTo` component can be disabled by using the `disabled` argument. A disabled link
    doesn't result in a transition when activated, and adds the `disabled` class to the `<a>`
    element.
  
    (The class name to apply to the element can be overridden by using the `disabledClass`
    argument)
  
    ```handlebars
    <LinkTo @route='photoGallery' @disabled={{true}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    ### Handling `href`
  
    `<LinkTo>` will use your application's Router to fill the element's `href` property with a URL
    that matches the path to the supplied `routeName`.
  
    ### Handling current route
  
    The `LinkTo` component will apply a CSS class name of 'active' when the application's current
    route matches the supplied routeName. For example, if the application's current route is
    'photoGallery.recent', then the following invocation of `LinkTo`:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent'>
      Great Hamster Photos
    </LinkTo>
    ```
  
    will result in
  
    ```html
    <a href="/hamster-photos/this-week" class="active">
      Great Hamster Photos
    </a>
    ```
  
    The CSS class used for active classes can be customized by passing an `activeClass` argument:
  
    ```handlebars
    <LinkTo @route='photoGallery.recent' @activeClass="current-url">
      Great Hamster Photos
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/this-week" class="current-url">
      Great Hamster Photos
    </a>
    ```
  
    ### Keeping a link active for other routes
  
    If you need a link to be 'active' even when it doesn't match the current route, you can use the
    `current-when` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @current-when='photos'>
      Photo Gallery
    </LinkTo>
    ```
  
    This may be helpful for keeping links active for:
  
    * non-nested routes that are logically related
    * some secondary menu approaches
    * 'top navigation' with 'sub navigation' scenarios
  
    A link will be active if `current-when` is `true` or the current
    route is the route this link would transition to.
  
    To match multiple routes 'space-separate' the routes:
  
    ```handlebars
    <LinkTo @route='gallery' @current-when='photos drawings paintings'>
      Art Gallery
    </LinkTo>
    ```
  
    ### Supplying a model
  
    An optional `model` argument can be used for routes whose
    paths contain dynamic segments. This argument will become
    the model context of the linked route:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", {path: "hamster-photos/:photo_id"});
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{this.aPhoto}}>
      {{aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    ### Supplying multiple models
  
    For deep-linking to route paths that contain multiple
    dynamic segments, the `models` argument can be used.
  
    As the router transitions through the route path, each
    supplied model argument will become the context for the
    route with the dynamic segments:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
        this.route("comment", {path: "comments/:comment_id"});
      });
    });
    ```
  
    This argument will become the model context of the linked route:
  
    ```handlebars
    <LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>
      {{comment.body}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42/comments/718">
      A+++ would snuggle again.
    </a>
    ```
  
    ### Supplying an explicit dynamic segment value
  
    If you don't have a model object available to pass to `LinkTo`,
    an optional string or integer argument can be passed for routes whose
    paths contain dynamic segments. This argument will become the value
    of the dynamic segment:
  
    ```javascript
    Router.map(function() {
      this.route("photoGallery", { path: "hamster-photos/:photo_id" });
    });
    ```
  
    ```handlebars
    <LinkTo @route='photoGallery' @model={{aPhotoId}}>
      {{this.aPhoto.title}}
    </LinkTo>
    ```
  
    ```html
    <a href="/hamster-photos/42">
      Tomster
    </a>
    ```
  
    When transitioning into the linked route, the `model` hook will
    be triggered with parameters including this passed identifier.
  
    ### Supplying query parameters
  
    If you need to add optional key-value pairs that appear to the right of the ? in a URL,
    you can use the `query` argument.
  
    ```handlebars
    <LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>
      Great Hamster Photos
    </LinkTo>
    ```
  
    This will result in:
  
    ```html
    <a href="/hamster-photos?page=1&per_page=20">
      Great Hamster Photos
    </a>
    ```
  
    @for Ember.Templates.components
    @method LinkTo
    @public
  */

    /**
    @module @ember/routing
  */

    /**
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for Ember.Templates.helpers
    @method link-to
    @see {Ember.Templates.components.LinkTo}
    @public
  **/

    /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <LinkTo>.
  
    See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).
  
    @for @ember/routing
    @method LinkTo
    @see {Ember.Templates.components.LinkTo}
    @public
  **/

    class LinkTo extends InternalComponent {
      constructor() {
        super(...arguments); // GH #17963

        this.currentRouteCache = (0, _validator.createCache)(() => {
          (0, _validator.consumeTag)(
            (0, _validator.tagFor)(this.routing, 'currentState'),
          );
          return (0, _validator.untrack)(() => this.routing.currentRouteName);
        });
      }

      static toString() {
        return 'LinkTo';
      }

      validateArguments() {
        true &&
          !(!this.isEngine || this.engineMountPoint !== undefined) &&
          (0, _debug.assert)(
            'You attempted to use the <LinkTo> component within a routeless engine, this is not supported. ' +
              'If you are using the ember-engines addon, use the <LinkToExternal> component instead. ' +
              'See https://ember-engines.com/docs/links for more info.',
            !this.isEngine || this.engineMountPoint !== undefined,
          );
        true &&
          !(
            'route' in this.args.named ||
            'model' in this.args.named ||
            'models' in this.args.named ||
            'query' in this.args.named
          ) &&
          (0, _debug.assert)(
            'You must provide at least one of the `@route`, `@model`, `@models` or `@query` arguments to `<LinkTo>`.',
            'route' in this.args.named ||
              'model' in this.args.named ||
              'models' in this.args.named ||
              'query' in this.args.named,
          );
        true &&
          !!('model' in this.args.named && 'models' in this.args.named) &&
          (0, _debug.assert)(
            'You cannot provide both the `@model` and `@models` arguments to the <LinkTo> component.',
            !('model' in this.args.named && 'models' in this.args.named),
          );
        super.validateArguments();
      }

      get class() {
        var classes = 'ember-view';

        if (this.isActive) {
          classes += this.classFor('active');

          if (this.willBeActive === false) {
            classes += ' ember-transitioning-out';
          }
        } else if (this.willBeActive) {
          classes += ' ember-transitioning-in';
        }

        if (this.isLoading) {
          classes += this.classFor('loading');
        }

        if (this.isDisabled) {
          classes += this.classFor('disabled');
        }

        return classes;
      }

      get href() {
        if (this.isLoading) {
          return '#';
        }

        var { routing, route, models, query } = this;
        true &&
          !isPresent(route) &&
          (0, _debug.assert)(
            '[BUG] route can only be missing if isLoading is true',
            isPresent(route),
          ); // consume the current router state so we invalidate when QP changes
        // TODO: can we narrow this down to QP changes only?

        (0, _validator.consumeTag)(
          (0, _validator.tagFor)(routing, 'currentState'),
        );

        if (
          true
          /* DEBUG */
        ) {
          try {
            return routing.generateURL(route, models, query);
          } catch (e) {
            var details =
              e instanceof Error ? e.message : (0, _debug.inspect)(e);
            var message = `While generating link to route "${route}": ${details}`;

            if (e instanceof Error) {
              e.message = message;
              throw e;
            } else {
              throw message;
            }
          }
        } else {
          return routing.generateURL(route, models, query);
        }
      }

      click(event) {
        if (!(0, _views.isSimpleClick)(event)) {
          return;
        }

        var element = event.currentTarget;
        true &&
          !(element instanceof HTMLAnchorElement) &&
          (0, _debug.assert)(
            '[BUG] must be an <a> element',
            element instanceof HTMLAnchorElement,
          );
        var isSelf = element.target === '' || element.target === '_self';

        if (isSelf) {
          this.preventDefault(event);
        } else {
          return;
        }

        if (this.isDisabled) {
          return;
        }

        if (this.isLoading) {
          true &&
            (0, _debug.warn)(
              'This link is in an inactive loading state because at least one of its models ' +
                'currently has a null/undefined value, or the provided route name is invalid.',
              false,
              {
                id: 'ember-glimmer.link-to.inactive-loading-state',
              },
            );
          return;
        }

        var { routing, route, models, query, replace } = this;
        var payload = {
          routeName: route,
          queryParams: query,
          transition: undefined,
        };
        (0, _instrumentation.flaggedInstrument)(
          'interaction.link-to',
          payload,
          () => {
            true &&
              !isPresent(route) &&
              (0, _debug.assert)(
                '[BUG] route can only be missing if isLoading is true',
                isPresent(route),
              );
            payload.transition = routing.transitionTo(
              route,
              models,
              query,
              replace,
            );
          },
        );
      }

      get route() {
        if ('route' in this.args.named) {
          var route = this.named('route');
          true &&
            !(isMissing(route) || typeof route === 'string') &&
            (0, _debug.assert)(
              'The `@route` argument to the <LinkTo> component must be a string',
              isMissing(route) || typeof route === 'string',
            );
          return route && this.namespaceRoute(route);
        } else {
          return this.currentRoute;
        }
      }

      get currentRoute() {
        return (0, _validator.getValue)(this.currentRouteCache);
      } // TODO: not sure why generateURL takes {}[] instead of unknown[]

      get models() {
        if ('models' in this.args.named) {
          var models = this.named('models');
          true &&
            !Array.isArray(models) &&
            (0, _debug.assert)(
              'The `@models` argument to the <LinkTo> component must be an array.',
              Array.isArray(models),
            );
          return models;
        } else if ('model' in this.args.named) {
          return [this.named('model')];
        } else {
          return EMPTY_ARRAY$1;
        }
      }

      get query() {
        if ('query' in this.args.named) {
          var query = this.named('query');
          true &&
            !(query !== null && typeof query === 'object') &&
            (0, _debug.assert)(
              'The `@query` argument to the <LinkTo> component must be an object.',
              query !== null && typeof query === 'object',
            );
          return Object.assign({}, query);
        } else {
          return EMPTY_QUERY_PARAMS;
        }
      }

      get replace() {
        return this.named('replace') === true;
      }

      get isActive() {
        return this.isActiveForState(this.routing.currentState);
      }

      get willBeActive() {
        var current = this.routing.currentState;
        var target = this.routing.targetState;

        if (current === target) {
          return null;
        } else {
          return this.isActiveForState(target);
        }
      }

      get isLoading() {
        return (
          isMissing(this.route) || this.models.some((model) => isMissing(model))
        );
      }

      get isDisabled() {
        return Boolean(this.named('disabled'));
      }

      get isEngine() {
        var owner = this.owner;
        return (
          owner instanceof _instance.default &&
          (0, _engine.getEngineParent)(owner) !== undefined
        );
      }

      get engineMountPoint() {
        var owner = this.owner;
        return owner instanceof _instance.default
          ? owner.mountPoint
          : undefined;
      }

      classFor(state) {
        var className = this.named(`${state}Class`);
        true &&
          !(
            isMissing(className) ||
            typeof className === 'string' ||
            typeof className === 'boolean'
          ) &&
          (0, _debug.assert)(
            `The \`@${state}Class\` argument to the <LinkTo> component must be a string or boolean`,
            isMissing(className) ||
              typeof className === 'string' ||
              typeof className === 'boolean',
          );

        if (className === true || isMissing(className)) {
          return ` ${state}`;
        } else if (className) {
          return ` ${className}`;
        } else {
          return '';
        }
      }

      namespaceRoute(route) {
        var { engineMountPoint } = this;

        if (engineMountPoint === undefined) {
          return route;
        } else if (route === 'application') {
          return engineMountPoint;
        } else {
          return `${engineMountPoint}.${route}`;
        }
      }

      isActiveForState(state) {
        if (!isPresent(state)) {
          return false;
        }

        if (this.isLoading) {
          return false;
        }

        var currentWhen = this.named('current-when');

        if (typeof currentWhen === 'boolean') {
          return currentWhen;
        } else if (typeof currentWhen === 'string') {
          var { models, routing } = this;
          return currentWhen
            .split(' ')
            .some((route) =>
              routing.isActiveForRoute(
                models,
                undefined,
                this.namespaceRoute(route),
                state,
              ),
            );
        } else {
          var { route, models: _models, query, routing: _routing } = this;
          true &&
            !isPresent(route) &&
            (0, _debug.assert)(
              '[BUG] route can only be missing if isLoading is true',
              isPresent(route),
            );
          return _routing.isActiveForRoute(_models, query, route, state);
        }
      }

      preventDefault(event) {
        event.preventDefault();
      }

      isSupportedArgument(name) {
        var supportedArguments = [
          'route',
          'model',
          'models',
          'query',
          'replace',
          'disabled',
          'current-when',
          'activeClass',
          'loadingClass',
          'disabledClass',
        ];
        return (
          supportedArguments.indexOf(name) !== -1 ||
          super.isSupportedArgument(name)
        );
      }
    }

    __decorate$2(
      [(0, _service.service)('-routing')],
      LinkTo.prototype,
      'routing',
      void 0,
    );

    __decorate$2([_object.action], LinkTo.prototype, 'click', null);

    var { prototype } = LinkTo;

    var descriptorFor = (target, property) => {
      if (target) {
        return (
          Object.getOwnPropertyDescriptor(target, property) ||
          descriptorFor(Object.getPrototypeOf(target), property)
        );
      } else {
        return null;
      }
    }; // @href

    {
      var superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
      Object.defineProperty(prototype, 'onUnsupportedArgument', {
        configurable: true,
        enumerable: false,
        value: function onUnsupportedArgument(name) {
          if (name === 'href') {
            true &&
              !false &&
              (0, _debug.assert)(
                `Passing the \`@href\` argument to <LinkTo> is not supported.`,
              );
          } else {
            superOnUnsupportedArgument.call(this, name);
          }
        },
      });
    } // QP

    {
      var superModelsDescriptor = descriptorFor(prototype, 'models');
      true &&
        !(
          superModelsDescriptor &&
          typeof superModelsDescriptor.get === 'function'
        ) &&
        (0, _debug.assert)(
          `[BUG] expecting models to be a getter on <LinkTo>`,
          superModelsDescriptor &&
            typeof superModelsDescriptor.get === 'function',
        );
      var superModelsGetter = superModelsDescriptor.get;
      Object.defineProperty(prototype, 'models', {
        configurable: true,
        enumerable: false,
        get: function models() {
          var models = superModelsGetter.call(this);

          if (models.length > 0 && !('query' in this.args.named)) {
            if (isQueryParams(models[models.length - 1])) {
              models = models.slice(0, -1);
            }
          }

          return models;
        },
      });
      var superQueryDescriptor = descriptorFor(prototype, 'query');
      true &&
        !(
          superQueryDescriptor && typeof superQueryDescriptor.get === 'function'
        ) &&
        (0, _debug.assert)(
          `[BUG] expecting query to be a getter on <LinkTo>`,
          superQueryDescriptor &&
            typeof superQueryDescriptor.get === 'function',
        );
      var superQueryGetter = superQueryDescriptor.get;
      Object.defineProperty(prototype, 'query', {
        configurable: true,
        enumerable: false,
        get: function query() {
          var _a;

          if ('query' in this.args.named) {
            var qp = superQueryGetter.call(this);

            if (isQueryParams(qp)) {
              return (_a = qp.values) !== null && _a !== void 0
                ? _a
                : EMPTY_QUERY_PARAMS;
            } else {
              return qp;
            }
          } else {
            var models = superModelsGetter.call(this);

            if (models.length > 0) {
              var _qp = models[models.length - 1];

              if (isQueryParams(_qp) && _qp.values !== null) {
                return _qp.values;
              }
            }

            return EMPTY_QUERY_PARAMS;
          }
        },
      });
    } // Positional Arguments

    {
      var _superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
      Object.defineProperty(prototype, 'onUnsupportedArgument', {
        configurable: true,
        enumerable: false,
        value: function onUnsupportedArgument(name) {
          if (name !== 'params') {
            _superOnUnsupportedArgument.call(this, name);
          }
        },
      });
    }
    var LinkTo$1 = opaquify(LinkTo, LinkToTemplate);
    _exports.LinkTo = LinkTo$1;
    var TextareaTemplate = (0, _opcodeCompiler.templateFactory)({
      id: 'OpzctQXz',
      block:
        '[[[11,"textarea"],[16,1,[30,0,["id"]]],[16,0,[30,0,["class"]]],[17,1],[16,2,[30,0,["value"]]],[4,[38,0],["change",[30,0,["change"]]],null],[4,[38,0],["input",[30,0,["input"]]],null],[4,[38,0],["keyup",[30,0,["keyUp"]]],null],[4,[38,0],["paste",[30,0,["valueDidChange"]]],null],[4,[38,0],["cut",[30,0,["valueDidChange"]]],null],[12],[13]],["&attrs"],false,["on"]]',
      moduleName:
        'packages/@ember/-internals/glimmer/lib/templates/textarea.hbs',
      isStrictMode: false,
    });

    var __decorate$3 =
      (undefined && undefined.__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
    /**
    The `Textarea` component inserts a new instance of `<textarea>` tag into the template.
  
    The `@value` argument provides the content of the `<textarea>`.
  
    This template:
  
    ```handlebars
    <Textarea @value="A bunch of text" />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      A bunch of text
    </textarea>
    ```
  
    The `@value` argument is two-way bound. If the user types text into the textarea, the `@value`
    argument is updated. If the `@value` argument is updated, the text in the textarea is updated.
  
    In the following example, the `writtenWords` property on the component will be updated as the user
    types 'Lots of text' into the text area of their browser's window.
  
    ```app/components/word-editor.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class WordEditorComponent extends Component {
      @tracked writtenWords = "Lots of text that IS bound";
    }
    ```
  
    ```handlebars
    <Textarea @value={{writtenWords}} />
    ```
  
    Would result in the following HTML:
  
    ```html
    <textarea class="ember-text-area">
      Lots of text that IS bound
    </textarea>
    ```
  
    If you wanted a one way binding, you could use the `<textarea>` element directly, and use the
    `value` DOM property and the `input` event.
  
    ### Actions
  
    The `Textarea` component takes a number of arguments with callbacks that are invoked in
    response to user events.
  
    * `enter`
    * `insert-newline`
    * `escape-press`
    * `focus-in`
    * `focus-out`
    * `key-press`
  
    These callbacks are passed to `Textarea` like this:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    ## Classic Invocation Syntax
  
    The `Textarea` component can also be invoked using curly braces, just like any other Ember
    component.
  
    For example, this is an invocation using angle-bracket notation:
  
    ```handlebars
    <Textarea @value={{this.searchWord}} @enter={{this.query}} />
    ```
  
    You could accomplish the same thing using classic invocation:
  
    ```handlebars
    {{textarea value=this.searchWord enter=this.query}}
    ```
  
    The main difference is that angle-bracket invocation supports any HTML attribute using HTML
    attribute syntax, because attributes and arguments have different syntax when using angle-bracket
    invocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,
    and components must manually map attributes onto component arguments.
  
    When using classic invocation with `{{textarea}}`, only the following attributes are mapped onto
    arguments:
  
    * rows
    * cols
    * name
    * selectionEnd
    * selectionStart
    * autocomplete
    * wrap
    * lang
    * dir
    * value
  
    ## Classic `layout` and `layoutName` properties
  
    Because HTML `textarea` elements do not contain inner HTML the `layout` and
    `layoutName` properties will not be applied.
  
    @method Textarea
    @for Ember.Templates.components
    @public
  */

    /**
    See Ember.Templates.components.Textarea.
  
    @method textarea
    @for Ember.Templates.helpers
    @see {Ember.Templates.components.Textarea}
    @public
  */

    /**
    An opaque interface which can be imported and used in strict-mode
    templates to call <Textarea>.
  
    See [Ember.Templates.components.Textarea](/ember/release/classes/Ember.Templates.components/methods/Textarea?anchor=Input).
  
    @for @ember/component
    @method Textarea
    @see {Ember.Templates.components.Textarea}
    @public
  **/

    class Textarea extends AbstractInput {
      static toString() {
        return 'Textarea';
      }

      get class() {
        return 'ember-text-area ember-view';
      } // See abstract-input.ts for why these are needed

      change(event) {
        super.change(event);
      }

      input(event) {
        super.input(event);
      }

      isSupportedArgument(name) {
        var supportedArguments = [
          'type',
          'value',
          'enter',
          'insert-newline',
          'escape-press',
        ];
        return (
          supportedArguments.indexOf(name) !== -1 ||
          super.isSupportedArgument(name)
        );
      }
    }

    __decorate$3([_object.action], Textarea.prototype, 'change', null);

    __decorate$3([_object.action], Textarea.prototype, 'input', null);

    var Textarea$1 = opaquify(Textarea, TextareaTemplate);
    _exports.Textarea = Textarea$1;

    function isTemplateFactory(template) {
      return typeof template === 'function';
    }

    function referenceForParts(rootRef, parts) {
      var isAttrs = parts[0] === 'attrs'; // TODO deprecate this

      if (isAttrs) {
        parts.shift();

        if (parts.length === 1) {
          return (0, _reference.childRefFor)(rootRef, parts[0]);
        }
      }

      return (0, _reference.childRefFromParts)(rootRef, parts);
    }

    function parseAttributeBinding(microsyntax) {
      var colonIndex = microsyntax.indexOf(':');

      if (colonIndex === -1) {
        true &&
          !(microsyntax !== 'class') &&
          (0, _debug.assert)(
            'You cannot use class as an attributeBinding, use classNameBindings instead.',
            microsyntax !== 'class',
          );
        return [microsyntax, microsyntax, true];
      } else {
        var prop = microsyntax.substring(0, colonIndex);
        var attribute = microsyntax.substring(colonIndex + 1);
        true &&
          !(attribute !== 'class') &&
          (0, _debug.assert)(
            'You cannot use class as an attributeBinding, use classNameBindings instead.',
            attribute !== 'class',
          );
        return [prop, attribute, false];
      }
    }

    function installAttributeBinding(component, rootRef, parsed, operations) {
      var [prop, attribute, isSimple] = parsed;

      if (attribute === 'id') {
        var elementId = (0, _metal.get)(component, prop);

        if (elementId === undefined || elementId === null) {
          elementId = component.elementId;
        }

        var elementIdRef = (0, _reference.createPrimitiveRef)(elementId);
        operations.setAttribute('id', elementIdRef, true, null);
        return;
      }

      var isPath = prop.indexOf('.') > -1;
      var reference = isPath
        ? referenceForParts(rootRef, prop.split('.'))
        : (0, _reference.childRefFor)(rootRef, prop);
      true &&
        !!(isSimple && isPath) &&
        (0, _debug.assert)(
          `Illegal attributeBinding: '${prop}' is not a valid attribute name.`,
          !(isSimple && isPath),
        );
      operations.setAttribute(attribute, reference, false, null);
    }

    function createClassNameBindingRef(rootRef, microsyntax, operations) {
      var parts = microsyntax.split(':');
      var [prop, truthy, falsy] = parts; // NOTE: This could be an empty string

      true &&
        !(prop !== undefined) &&
        (0, _debug.assert)('has prop', prop !== undefined); // Will always have at least one part

      var isStatic = prop === '';

      if (isStatic) {
        operations.setAttribute(
          'class',
          (0, _reference.createPrimitiveRef)(truthy),
          true,
          null,
        );
      } else {
        var isPath = prop.indexOf('.') > -1;

        var _parts = isPath ? prop.split('.') : [];

        var value = isPath
          ? referenceForParts(rootRef, _parts)
          : (0, _reference.childRefFor)(rootRef, prop);
        var ref;

        if (truthy === undefined) {
          ref = createSimpleClassNameBindingRef(
            value,
            isPath ? _parts[_parts.length - 1] : prop,
          );
        } else {
          ref = createColonClassNameBindingRef(value, truthy, falsy);
        }

        operations.setAttribute('class', ref, false, null);
      }
    }

    function createSimpleClassNameBindingRef(inner, path) {
      var dasherizedPath;
      return (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(inner);

        if (value === true) {
          true &&
            !(path !== undefined) &&
            (0, _debug.assert)(
              'You must pass a path when binding a to a class name using classNameBindings',
              path !== undefined,
            );
          return (
            dasherizedPath || (dasherizedPath = (0, _string.dasherize)(path))
          );
        } else if (value || value === 0) {
          return String(value);
        } else {
          return null;
        }
      });
    }

    function createColonClassNameBindingRef(inner, truthy, falsy) {
      return (0, _reference.createComputeRef)(() => {
        return (0, _reference.valueForRef)(inner) ? truthy : falsy;
      });
    }

    function NOOP$1() {}
    /**
    @module ember
  */

    /**
    Represents the internal state of the component.
  
    @class ComponentStateBucket
    @private
  */

    class ComponentStateBucket {
      constructor(
        component,
        args,
        argsTag,
        finalizer,
        hasWrappedElement,
        isInteractive,
      ) {
        this.component = component;
        this.args = args;
        this.argsTag = argsTag;
        this.finalizer = finalizer;
        this.hasWrappedElement = hasWrappedElement;
        this.isInteractive = isInteractive;
        this.classRef = null;
        this.classRef = null;
        this.argsRevision =
          args === null ? 0 : (0, _validator.valueForTag)(argsTag);
        this.rootRef = (0, _reference.createConstRef)(component, 'this');
        (0, _destroyable.registerDestructor)(
          this,
          () => this.willDestroy(),
          true,
        );
        (0, _destroyable.registerDestructor)(this, () =>
          this.component.destroy(),
        );
      }

      willDestroy() {
        var { component, isInteractive } = this;

        if (isInteractive) {
          (0, _validator.beginUntrackFrame)();
          component.trigger('willDestroyElement');
          component.trigger('willClearRender');
          (0, _validator.endUntrackFrame)();
          var element = (0, _views.getViewElement)(component);

          if (element) {
            (0, _views.clearElementView)(element);
            (0, _views.clearViewElement)(component);
          }
        }

        component.renderer.unregister(component);
      }

      finalize() {
        var { finalizer } = this;
        finalizer();
        this.finalizer = NOOP$1;
      }
    }

    function internalHelper(helper) {
      return (0, _manager2.setInternalHelperManager)(helper, {});
    }
    /**
  @module ember
  */

    var ACTIONS = new _util._WeakSet();
    /**
    The `{{action}}` helper provides a way to pass triggers for behavior (usually
    just a function) between components, and into components from controllers.
  
    ### Passing functions with the action helper
  
    There are three contexts an action helper can be used in. The first two
    contexts to discuss are attribute context, and Handlebars value context.
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    {{! Examples of Handlebars value context }}
    {{input on-input=(action "save")}}
    {{yield (action "refreshData") andAnotherParam}}
    ```
  
    In these contexts,
    the helper is called a "closure action" helper. Its behavior is simple:
    If passed a function name, read that function off the `actions` property
    of the current context. Once that function is read, or immediately if a function was
    passed, create a closure over that function and any arguments.
    The resulting value of an action helper used this way is simply a function.
  
    For example, in the attribute context:
  
    ```handlebars
    {{! An example of attribute context }}
    <div onclick={{action "save"}}></div>
    ```
  
    The resulting template render logic would be:
  
    ```js
    var div = document.createElement('div');
    var actionFunction = (function(context){
      return function() {
        return context.actions.save.apply(context, arguments);
      };
    })(context);
    div.onclick = actionFunction;
    ```
  
    Thus when the div is clicked, the action on that context is called.
    Because the `actionFunction` is just a function, closure actions can be
    passed between components and still execute in the correct context.
  
    Here is an example action handler on a component:
  
    ```app/components/my-component.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      save() {
        this.model.save();
      }
    }
    ```
  
    Actions are always looked up on the `actions` property of the current context.
    This avoids collisions in the naming of common actions, such as `destroy`.
    Two options can be passed to the `action` helper when it is used in this way.
  
    * `target=someProperty` will look to `someProperty` instead of the current
      context for the `actions` hash. This can be useful when targeting a
      service for actions.
    * `value="target.value"` will read the path `target.value` off the first
      argument to the action when it is called and rewrite the first argument
      to be that value. This is useful when attaching actions to event listeners.
  
    ### Invoking an action
  
    Closure actions curry both their scope and any arguments. When invoked, any
    additional arguments are added to the already curried list.
    Actions are presented in JavaScript as callbacks, and are
    invoked like any other JavaScript function.
  
    For example
  
    ```app/components/update-name.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```app/components/update-name.hbs
    {{input on-input=(action (action 'setName' @model) value="target.value")}}
    ```
  
    The first argument (`@model`) was curried over, and the run-time argument (`event`)
    becomes a second argument. Action calls can be nested this way because each simply
    returns a function. Any function can be passed to the `{{action}}` helper, including
    other actions.
  
    Actions invoked with `sendAction` have the same currying behavior as demonstrated
    with `on-input` above. For example:
  
    ```app/components/my-input.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class extends Component {
      @action
      setName(model, name) {
        model.set('name', name);
      }
    }
    ```
  
    ```handlebars
    <MyInput @submit={{action 'setName' @model}} />
    ```
  
    or
  
    ```handlebars
    {{my-input submit=(action 'setName' @model)}}
    ```
  
    ```app/components/my-component.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        // Note that model is not passed, it was curried in the template
        this.submit('bob');
      }
    });
    ```
  
    ### Attaching actions to DOM elements
  
    The third context of the `{{action}}` helper can be called "element space".
    For example:
  
    ```handlebars
    {{! An example of element space }}
    <div {{action "save"}}></div>
    ```
  
    Used this way, the `{{action}}` helper provides a useful shortcut for
    registering an HTML element in a template for a single DOM event and
    forwarding that interaction to the template's context (controller or component).
    If the context of a template is a controller, actions used this way will
    bubble to routes when the controller does not implement the specified action.
    Once an action hits a route, it will bubble through the route hierarchy.
  
    ### Event Propagation
  
    `{{action}}` helpers called in element space can control event bubbling. Note
    that the closure style actions cannot.
  
    Events triggered through the action helper will automatically have
    `.preventDefault()` called on them. You do not need to do so in your event
    handlers. If you need to allow event propagation (to handle file inputs for
    example) you can supply the `preventDefault=false` option to the `{{action}}` helper:
  
    ```handlebars
    <div {{action "sayHello" preventDefault=false}}>
      <input type="file" />
      <input type="checkbox" />
    </div>
    ```
  
    To disable bubbling, pass `bubbles=false` to the helper:
  
    ```handlebars
    <button {{action 'edit' post bubbles=false}}>Edit</button>
    ```
  
    To disable bubbling with closure style actions you must create your own
    wrapper helper that makes use of `event.stopPropagation()`:
  
    ```handlebars
    <div onclick={{disable-bubbling (action "sayHello")}}>Hello</div>
    ```
  
    ```app/helpers/disable-bubbling.js
    import { helper } from '@ember/component/helper';
  
    export function disableBubbling([action]) {
      return function(event) {
        event.stopPropagation();
        return action(event);
      };
    }
    export default helper(disableBubbling);
    ```
  
    If you need the default handler to trigger you should either register your
    own event handler, or use event methods on your view class. See
    ["Responding to Browser Events"](/ember/release/classes/Component)
    in the documentation for `Component` for more information.
  
    ### Specifying DOM event type
  
    `{{action}}` helpers called in element space can specify an event type.
    By default the `{{action}}` helper registers for DOM `click` events. You can
    supply an `on` option to the helper to specify a different DOM event name:
  
    ```handlebars
    <div {{action "anActionName" on="doubleClick"}}>
      click me
    </div>
    ```
  
    See ["Event Names"](/ember/release/classes/Component) for a list of
    acceptable DOM event names.
  
    ### Specifying whitelisted modifier keys
  
    `{{action}}` helpers called in element space can specify modifier keys.
    By default the `{{action}}` helper will ignore click events with pressed modifier
    keys. You can supply an `allowedKeys` option to specify which keys should not be ignored.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="alt"}}>
      click me
    </div>
    ```
  
    This way the action will fire when clicking with the alt key pressed down.
    Alternatively, supply "any" to the `allowedKeys` option to accept any combination of modifier keys.
  
    ```handlebars
    <div {{action "anActionName" allowedKeys="any"}}>
      click me with any key pressed
    </div>
    ```
  
    ### Specifying a Target
  
    A `target` option can be provided to the helper to change
    which object will receive the method call. This option must be a path
    to an object, accessible in the current context:
  
    ```app/templates/application.hbs
    <div {{action "anActionName" target=someService}}>
      click me
    </div>
    ```
  
    ```app/controllers/application.js
    import Controller from '@ember/controller';
    import { service } from '@ember/service';
  
    export default class extends Controller {
      @service someService;
    }
    ```
  
    @method action
    @for Ember.Templates.helpers
    @public
  */

    var action$1 = internalHelper((args) => {
      var { named, positional } = args; // The first two argument slots are reserved.
      // pos[0] is the context (or `this`)
      // pos[1] is the action name or function
      // Anything else is an action argument.

      var [context, action$$1, ...restArgs] = positional;
      true &&
        !(context && action$$1) &&
        (0, _debug.assert)('hash position arguments', context && action$$1);
      var debugKey = action$$1.debugLabel;
      var target = 'target' in named ? named['target'] : context;
      var processArgs = makeArgsProcessor(
        ('value' in named && named['value']) || false,
        restArgs,
      );
      var fn$$1;

      if ((0, _reference.isInvokableRef)(action$$1)) {
        fn$$1 = makeClosureAction(
          action$$1,
          action$$1,
          invokeRef,
          processArgs,
          debugKey,
        );
      } else {
        fn$$1 = makeDynamicClosureAction(
          (0, _reference.valueForRef)(context),
          target,
          action$$1,
          processArgs,
          debugKey,
        );
      }

      ACTIONS.add(fn$$1);
      return (0, _reference.createUnboundRef)(
        fn$$1,
        '(result of an `action` helper)',
      );
    });

    function NOOP$2(args) {
      return args;
    }

    function makeArgsProcessor(valuePathRef, actionArgsRef) {
      var mergeArgs;

      if (actionArgsRef.length > 0) {
        mergeArgs = (args) => {
          return actionArgsRef.map(_reference.valueForRef).concat(args);
        };
      }

      var readValue;

      if (valuePathRef) {
        readValue = (args) => {
          var valuePath = (0, _reference.valueForRef)(valuePathRef);

          if (valuePath && args.length > 0) {
            args[0] = (0, _metal.get)(args[0], valuePath);
          }

          return args;
        };
      }

      if (mergeArgs && readValue) {
        return (args) => {
          return readValue(mergeArgs(args));
        };
      } else {
        return mergeArgs || readValue || NOOP$2;
      }
    }

    function makeDynamicClosureAction(
      context,
      targetRef,
      actionRef,
      processArgs,
      debugKey,
    ) {
      // We don't allow undefined/null values, so this creates a throw-away action to trigger the assertions
      if (
        true
        /* DEBUG */
      ) {
        makeClosureAction(
          context,
          (0, _reference.valueForRef)(targetRef),
          (0, _reference.valueForRef)(actionRef),
          processArgs,
          debugKey,
        );
      }

      return function () {
        return makeClosureAction(
          context,
          (0, _reference.valueForRef)(targetRef),
          (0, _reference.valueForRef)(actionRef),
          processArgs,
          debugKey,
        )(...arguments);
      };
    }

    function makeClosureAction(
      context,
      target,
      action$$1,
      processArgs,
      debugKey,
    ) {
      var self;
      var fn$$1;
      true &&
        !(action$$1 !== undefined && action$$1 !== null) &&
        (0, _debug.assert)(
          `Action passed is null or undefined in (action) from ${target}.`,
          action$$1 !== undefined && action$$1 !== null,
        );

      if (typeof action$$1 === 'string') {
        self = target;
        fn$$1 = target.actions && target.actions[action$$1];
        true &&
          !Boolean(fn$$1) &&
          (0, _debug.assert)(
            `An action named '${action$$1}' was not found in ${target}`,
            Boolean(fn$$1),
          );
      } else if (typeof action$$1 === 'function') {
        self = context;
        fn$$1 = action$$1;
      } else {
        true &&
          !false &&
          (0, _debug.assert)(
            `An action could not be made for \`${
              debugKey || action$$1
            }\` in ${target}. Please confirm that you are using either a quoted action name (i.e. \`(action '${
              debugKey || 'myAction'
            }')\`) or a function available in ${target}.`,
            false,
          );
      }

      return function () {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        var payload = {
          target: self,
          args,
          label: '@glimmer/closure-action',
        };
        return (0, _instrumentation.flaggedInstrument)(
          'interaction.ember-action',
          payload,
          () => {
            return (0, _runloop.join)(self, fn$$1, ...processArgs(args));
          },
        );
      };
    } // The code above:
    // 1. Finds an action function, usually on the `actions` hash
    // 2. Calls it with the target as the correct `this` context
    // Previously, `UPDATE_REFERENCED_VALUE` was a method on the reference itself,
    // so this made a bit more sense. Now, it isn't, and so we need to create a
    // function that can have `this` bound to it when called. This allows us to use
    // the same codepath to call `updateRef` on the reference.

    function invokeRef(value) {
      (0, _reference.updateRef)(this, value);
    } // inputs needed by CurlyComponents (attrs and props, with mutable
    // cells, etc).

    function processComponentArgs(namedArgs) {
      var attrs = Object.create(null);
      var props = Object.create(null);
      props[ARGS] = namedArgs;

      for (var name in namedArgs) {
        var ref = namedArgs[name];
        true && !ref && (0, _debug.assert)('expected ref', ref);
        var value = (0, _reference.valueForRef)(ref);
        var isAction = typeof value === 'function' && ACTIONS.has(value);

        if ((0, _reference.isUpdatableRef)(ref) && !isAction) {
          attrs[name] = new MutableCell(ref, value);
        } else {
          attrs[name] = value;
        }

        props[name] = value;
      }

      props.attrs = attrs;
      return props;
    }

    var REF = Symbol('REF');

    class MutableCell {
      constructor(ref, value) {
        this[_views.MUTABLE_CELL] = true;
        this[REF] = ref;
        this.value = value;
      }

      update(val) {
        (0, _reference.updateRef)(this[REF], val);
      }
    }

    var __rest =
      (undefined && undefined.__rest) ||
      function (s, e) {
        var t = {};

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        }

        if (s != null && typeof Object.getOwnPropertySymbols === 'function')
          for (
            var i = 0, p = Object.getOwnPropertySymbols(s);
            i < p.length;
            i++
          ) {
            if (
              e.indexOf(p[i]) < 0 &&
              Object.prototype.propertyIsEnumerable.call(s, p[i])
            )
              t[p[i]] = s[p[i]];
          }
        return t;
      };

    var ARGS = (0, _utils.enumerableSymbol)('ARGS');
    var HAS_BLOCK = (0, _utils.enumerableSymbol)('HAS_BLOCK');
    var DIRTY_TAG = Symbol('DIRTY_TAG');
    var IS_DISPATCHING_ATTRS = Symbol('IS_DISPATCHING_ATTRS');
    var BOUNDS = Symbol('BOUNDS');
    var EMBER_VIEW_REF = (0, _reference.createPrimitiveRef)('ember-view');

    function aliasIdToElementId(args, props) {
      if (args.named.has('id')) {
        true &&
          !!args.named.has('elementId') &&
          (0, _debug.assert)(
            `You cannot invoke a component with both 'id' and 'elementId' at the same time.`,
            !args.named.has('elementId'),
          );
        props.elementId = props.id;
      }
    } // We must traverse the attributeBindings in reverse keeping track of
    // what has already been applied. This is essentially refining the concatenated
    // properties applying right to left.

    function applyAttributeBindings(
      attributeBindings,
      component,
      rootRef,
      operations,
    ) {
      var seen = [];
      var i = attributeBindings.length - 1;

      while (i !== -1) {
        var binding = attributeBindings[i];
        true && !binding && (0, _debug.assert)('has binding', binding);
        var parsed = parseAttributeBinding(binding);
        var attribute = parsed[1];

        if (seen.indexOf(attribute) === -1) {
          seen.push(attribute);
          installAttributeBinding(component, rootRef, parsed, operations);
        }

        i--;
      }

      if (seen.indexOf('id') === -1) {
        var id = component.elementId
          ? component.elementId
          : (0, _utils.guidFor)(component);
        operations.setAttribute(
          'id',
          (0, _reference.createPrimitiveRef)(id),
          false,
          null,
        );
      }
    }

    var EMPTY_POSITIONAL_ARGS = [];
    (0, _debug.debugFreeze)(EMPTY_POSITIONAL_ARGS);

    class CurlyComponentManager {
      templateFor(component) {
        var { layout, layoutName } = component;
        var owner = (0, _owner2.getOwner)(component);
        true &&
          !owner &&
          (0, _debug.assert)(
            'Component is unexpectedly missing an owner',
            owner,
          );
        var factory;

        if (layout === undefined) {
          if (layoutName !== undefined) {
            var _factory = owner.lookup(`template:${layoutName}`);

            true &&
              !(_factory !== undefined) &&
              (0, _debug.assert)(
                `Layout \`${layoutName}\` not found!`,
                _factory !== undefined,
              );
            factory = _factory;
          } else {
            return null;
          }
        } else if (isTemplateFactory(layout)) {
          factory = layout;
        } else {
          // no layout was found, use the default layout
          return null;
        }

        return (0, _util.unwrapTemplate)(factory(owner)).asWrappedLayout();
      }

      getDynamicLayout(bucket) {
        return this.templateFor(bucket.component);
      }

      getTagName(state) {
        var { component, hasWrappedElement } = state;

        if (!hasWrappedElement) {
          return null;
        }

        return (component && component.tagName) || 'div';
      }

      getCapabilities() {
        return CURLY_CAPABILITIES;
      }

      prepareArgs(ComponentClass, args) {
        var _a;

        if (args.named.has('__ARGS__')) {
          true &&
            !(args.positional.length === 0) &&
            (0, _debug.assert)(
              '[BUG] cannot pass both __ARGS__ and positional arguments',
              args.positional.length === 0,
            );

          var _b = args.named.capture(),
            { __ARGS__ } = _b,
            rest = __rest(_b, ['__ARGS__']);

          true &&
            !__ARGS__ &&
            (0, _debug.assert)(
              '[BUG] unexpectedly missing __ARGS__ after check',
              __ARGS__,
            ); // does this need to be untracked?

          var __args__ = (0, _reference.valueForRef)(__ARGS__);

          var prepared = {
            positional: __args__.positional,
            named: Object.assign(Object.assign({}, rest), __args__.named),
          };
          return prepared;
        }

        var { positionalParams } =
          (_a = ComponentClass.class) !== null && _a !== void 0
            ? _a
            : ComponentClass; // early exits

        if (
          positionalParams === undefined ||
          positionalParams === null ||
          args.positional.length === 0
        ) {
          return null;
        }

        var named;

        if (typeof positionalParams === 'string') {
          true &&
            !!args.named.has(positionalParams) &&
            (0, _debug.assert)(
              `You cannot specify positional parameters and the hash argument \`${positionalParams}\`.`,
              !args.named.has(positionalParams),
            );
          var captured = args.positional.capture();
          named = {
            [positionalParams]: (0, _reference.createComputeRef)(() =>
              (0, _runtime.reifyPositional)(captured),
            ),
          };
          Object.assign(named, args.named.capture());
        } else if (
          Array.isArray(positionalParams) &&
          positionalParams.length > 0
        ) {
          var count = Math.min(positionalParams.length, args.positional.length);
          named = {};
          Object.assign(named, args.named.capture());

          for (var i = 0; i < count; i++) {
            var name = positionalParams[i];
            true &&
              !name &&
              (0, _debug.assert)(
                'Expected at least one positional param',
                name,
              );
            true &&
              !!args.named.has(name) &&
              (0, _debug.assert)(
                `You cannot specify both a positional param (at position ${i}) and the hash argument \`${name}\`.`,
                !args.named.has(name),
              );
            named[name] = args.positional.at(i);
          }
        } else {
          return null;
        }

        return {
          positional: _util.EMPTY_ARRAY,
          named,
        };
      }
      /*
       * This hook is responsible for actually instantiating the component instance.
       * It also is where we perform additional bookkeeping to support legacy
       * features like exposed by view mixins like ChildViewSupport, ActionSupport,
       * etc.
       */

      create(
        owner,
        ComponentClass,
        args,
        _ref,
        dynamicScope,
        callerSelfRef,
        hasBlock,
      ) {
        var { isInteractive } = _ref;
        // Get the nearest concrete component instance from the scope. "Virtual"
        // components will be skipped.
        var parentView = dynamicScope.view; // Capture the arguments, which tells Glimmer to give us our own, stable
        // copy of the Arguments object that is safe to hold on to between renders.

        var capturedArgs = args.named.capture();
        (0, _validator.beginTrackFrame)();
        var props = processComponentArgs(capturedArgs);
        var argsTag = (0, _validator.endTrackFrame)(); // Alias `id` argument to `elementId` property on the component instance.

        aliasIdToElementId(args, props); // Set component instance's parentView property to point to nearest concrete
        // component.

        props.parentView = parentView; // Set whether this component was invoked with a block
        // (`{{#my-component}}{{/my-component}}`) or without one
        // (`{{my-component}}`).

        props[HAS_BLOCK] = hasBlock; // Save the current `this` context of the template as the component's
        // `_target`, so bubbled actions are routed to the right place.

        props._target = (0, _reference.valueForRef)(callerSelfRef);
        (0, _owner2.setOwner)(props, owner); // caller:
        // <FaIcon @name="bug" />
        //
        // callee:
        // <i class="fa-{{@name}}"></i>
        // Now that we've built up all of the properties to set on the component instance,
        // actually create it.

        (0, _validator.beginUntrackFrame)();
        var component = ComponentClass.create(props);
        var finalizer = (0, _instrumentation._instrumentStart)(
          'render.component',
          initialRenderInstrumentDetails,
          component,
        ); // We become the new parentView for downstream components, so save our
        // component off on the dynamic scope.

        dynamicScope.view = component; // Unless we're the root component, we need to add ourselves to our parent
        // component's childViews array.

        if (parentView !== null && parentView !== undefined) {
          (0, _views.addChildView)(parentView, component);
        }

        component.trigger('didReceiveAttrs');
        var hasWrappedElement = component.tagName !== ''; // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components

        if (!hasWrappedElement) {
          if (isInteractive) {
            component.trigger('willRender');
          }

          component._transitionTo('hasElement');

          if (isInteractive) {
            component.trigger('willInsertElement');
          }
        } // Track additional lifecycle metadata about this component in a state bucket.
        // Essentially we're saving off all the state we'll need in the future.

        var bucket = new ComponentStateBucket(
          component,
          capturedArgs,
          argsTag,
          finalizer,
          hasWrappedElement,
          isInteractive,
        );

        if (args.named.has('class')) {
          bucket.classRef = args.named.get('class');
        }

        if (
          true
          /* DEBUG */
        ) {
          processComponentInitializationAssertions(component, props);
        }

        if (isInteractive && hasWrappedElement) {
          component.trigger('willRender');
        }

        (0, _validator.endUntrackFrame)(); // consume every argument so we always run again

        (0, _validator.consumeTag)(bucket.argsTag);
        (0, _validator.consumeTag)(component[DIRTY_TAG]);
        return bucket;
      }

      getDebugName(definition) {
        var _a;

        return (
          definition.fullName ||
          definition.normalizedName ||
          ((_a = definition.class) === null || _a === void 0
            ? void 0
            : _a.name) ||
          definition.name
        );
      }

      getSelf(_ref2) {
        var { rootRef } = _ref2;
        return rootRef;
      }

      didCreateElement(_ref3, element, operations) {
        var { component, classRef, isInteractive, rootRef } = _ref3;
        (0, _views.setViewElement)(component, element);
        (0, _views.setElementView)(element, component);
        var { attributeBindings, classNames, classNameBindings } = component;

        if (attributeBindings && attributeBindings.length) {
          applyAttributeBindings(
            attributeBindings,
            component,
            rootRef,
            operations,
          );
        } else {
          var id = component.elementId
            ? component.elementId
            : (0, _utils.guidFor)(component);
          operations.setAttribute(
            'id',
            (0, _reference.createPrimitiveRef)(id),
            false,
            null,
          );
        }

        if (classRef) {
          var ref = createSimpleClassNameBindingRef(classRef);
          operations.setAttribute('class', ref, false, null);
        }

        if (classNames && classNames.length) {
          classNames.forEach((name) => {
            operations.setAttribute(
              'class',
              (0, _reference.createPrimitiveRef)(name),
              false,
              null,
            );
          });
        }

        if (classNameBindings && classNameBindings.length) {
          classNameBindings.forEach((binding) => {
            createClassNameBindingRef(rootRef, binding, operations);
          });
        }

        operations.setAttribute('class', EMBER_VIEW_REF, false, null);

        if ('ariaRole' in component) {
          operations.setAttribute(
            'role',
            (0, _reference.childRefFor)(rootRef, 'ariaRole'),
            false,
            null,
          );
        }

        component._transitionTo('hasElement');

        if (isInteractive) {
          (0, _validator.beginUntrackFrame)();
          component.trigger('willInsertElement');
          (0, _validator.endUntrackFrame)();
        }
      }

      didRenderLayout(bucket, bounds) {
        bucket.component[BOUNDS] = bounds;
        bucket.finalize();
      }

      didCreate(_ref4) {
        var { component, isInteractive } = _ref4;

        if (isInteractive) {
          component._transitionTo('inDOM');

          component.trigger('didInsertElement');
          component.trigger('didRender');
        }
      }

      update(bucket) {
        var { component, args, argsTag, argsRevision, isInteractive } = bucket;
        bucket.finalizer = (0, _instrumentation._instrumentStart)(
          'render.component',
          rerenderInstrumentDetails,
          component,
        );
        (0, _validator.beginUntrackFrame)();

        if (
          args !== null &&
          !(0, _validator.validateTag)(argsTag, argsRevision)
        ) {
          (0, _validator.beginTrackFrame)();
          var props = processComponentArgs(args);
          argsTag = bucket.argsTag = (0, _validator.endTrackFrame)();
          bucket.argsRevision = (0, _validator.valueForTag)(argsTag);
          component[IS_DISPATCHING_ATTRS] = true;
          component.setProperties(props);
          component[IS_DISPATCHING_ATTRS] = false;
          component.trigger('didUpdateAttrs');
          component.trigger('didReceiveAttrs');
        }

        if (isInteractive) {
          component.trigger('willUpdate');
          component.trigger('willRender');
        }

        (0, _validator.endUntrackFrame)();
        (0, _validator.consumeTag)(argsTag);
        (0, _validator.consumeTag)(component[DIRTY_TAG]);
      }

      didUpdateLayout(bucket) {
        bucket.finalize();
      }

      didUpdate(_ref5) {
        var { component, isInteractive } = _ref5;

        if (isInteractive) {
          component.trigger('didUpdate');
          component.trigger('didRender');
        }
      }

      getDestroyable(bucket) {
        return bucket;
      }
    }

    function processComponentInitializationAssertions(component, props) {
      true &&
        !(() => {
          var { classNameBindings } = component;

          for (var i = 0; i < classNameBindings.length; i++) {
            var binding = classNameBindings[i];

            if (typeof binding !== 'string' || binding.length === 0) {
              return false;
            }
          }

          return true;
        })() &&
        (0, _debug.assert)(
          `classNameBindings must be non-empty strings: ${component}`,
          (() => {
            var { classNameBindings } = component;

            for (var i = 0; i < classNameBindings.length; i++) {
              var binding = classNameBindings[i];

              if (typeof binding !== 'string' || binding.length === 0) {
                return false;
              }
            }

            return true;
          })(),
        );
      true &&
        !(() => {
          var { classNameBindings } = component;

          for (var binding of classNameBindings) {
            if (binding.split(' ').length > 1) {
              return false;
            }
          }

          return true;
        })() &&
        (0, _debug.assert)(
          `classNameBindings must not have spaces in them: ${component}`,
          (() => {
            var { classNameBindings } = component;

            for (var binding of classNameBindings) {
              if (binding.split(' ').length > 1) {
                return false;
              }
            }

            return true;
          })(),
        );
      true &&
        !(
          component.tagName !== '' ||
          !component.classNameBindings ||
          component.classNameBindings.length === 0
        ) &&
        (0, _debug.assert)(
          `You cannot use \`classNameBindings\` on a tag-less component: ${component}`,
          component.tagName !== '' ||
            !component.classNameBindings ||
            component.classNameBindings.length === 0,
        );
      true &&
        !(
          component.tagName !== '' ||
          props.id === component.elementId ||
          (!component.elementId && component.elementId !== '')
        ) &&
        (0, _debug.assert)(
          `You cannot use \`elementId\` on a tag-less component: ${component}`,
          component.tagName !== '' ||
            props.id === component.elementId ||
            (!component.elementId && component.elementId !== ''),
        );
      true &&
        !(
          component.tagName !== '' ||
          !component.attributeBindings ||
          component.attributeBindings.length === 0
        ) &&
        (0, _debug.assert)(
          `You cannot use \`attributeBindings\` on a tag-less component: ${component}`,
          component.tagName !== '' ||
            !component.attributeBindings ||
            component.attributeBindings.length === 0,
        );
    }

    function initialRenderInstrumentDetails(component) {
      return component.instrumentDetails({
        initialRender: true,
      });
    }

    function rerenderInstrumentDetails(component) {
      return component.instrumentDetails({
        initialRender: false,
      });
    }

    var CURLY_CAPABILITIES = {
      dynamicLayout: true,
      dynamicTag: true,
      prepareArgs: true,
      createArgs: true,
      attributeHook: true,
      elementHook: true,
      createCaller: true,
      dynamicScope: true,
      updateHook: true,
      createInstance: true,
      wrapped: true,
      willDestroy: true,
      hasSubOwner: false,
    };
    var CURLY_COMPONENT_MANAGER = new CurlyComponentManager();

    function isCurlyManager(manager) {
      return manager === CURLY_COMPONENT_MANAGER;
    }

    var lazyEventsProcessed = new WeakMap();

    class Component extends _views.CoreView.extend(
      _views.ChildViewsSupport,
      _views.ViewStateSupport,
      _views.ClassNamesSupport,
      _runtime2.TargetActionSupport,
      _views.ActionSupport,
      _views.ViewMixin,
      {
        // These need to be overridable via extend/create but should still
        // have a default. Defining them here is the best way to achieve that.
        didReceiveAttrs() {},

        didRender() {},

        didUpdate() {},

        didUpdateAttrs() {},

        willRender() {},

        willUpdate() {},
      },
    ) {
      constructor() {
        super(...arguments);
        this.isComponent = true;
      }

      init(properties) {
        super.init(properties); // Handle methods from ViewMixin.
        // The native class inheritance will not work for mixins. To work around this,
        // we copy the existing rerender method provided by the mixin and swap in the
        // new rerender method from our class.

        this._superRerender = this.rerender;
        this.rerender = this._rerender;
        this[IS_DISPATCHING_ATTRS] = false;
        this[DIRTY_TAG] = (0, _validator.createTag)();
        this[BOUNDS] = null;
        var eventDispatcher = this._dispatcher;

        if (eventDispatcher) {
          var lazyEventsProcessedForComponentClass = lazyEventsProcessed.get(
            eventDispatcher,
          );

          if (!lazyEventsProcessedForComponentClass) {
            lazyEventsProcessedForComponentClass = new WeakSet();
            lazyEventsProcessed.set(
              eventDispatcher,
              lazyEventsProcessedForComponentClass,
            );
          }

          var proto = Object.getPrototypeOf(this);

          if (!lazyEventsProcessedForComponentClass.has(proto)) {
            var lazyEvents = eventDispatcher.lazyEvents;
            lazyEvents.forEach((mappedEventName, event) => {
              if (
                mappedEventName !== null &&
                typeof this[mappedEventName] === 'function'
              ) {
                eventDispatcher.setupHandlerForBrowserEvent(event);
              }
            });
            lazyEventsProcessedForComponentClass.add(proto);
          }
        }

        if (
          true &&
          /* DEBUG */
          eventDispatcher &&
          this.renderer._isInteractive &&
          this.tagName === ''
        ) {
          var eventNames = [];
          var events = eventDispatcher.finalEventNameMapping;

          for (var key in events) {
            var methodName = events[key];

            if (methodName && typeof this[methodName] === 'function') {
              eventNames.push(methodName);
            }
          } // If in a tagless component, assert that no event handlers are defined

          true &&
            !!eventNames.length &&
            (0, _debug.assert)(
              `You can not define \`${eventNames}\` function(s) to handle DOM event in the \`${this}\` tagless component since it doesn't have any DOM element.`,
              !eventNames.length,
            );
        }
      }

      get _dispatcher() {
        if (this.__dispatcher === undefined) {
          var owner = (0, _owner2.getOwner)(this);
          true &&
            !owner &&
            (0, _debug.assert)(
              'Component is unexpectedly missing an owner',
              owner,
            );

          if (owner.lookup('-environment:main').isInteractive) {
            var dispatcher = owner.lookup('event_dispatcher:main');
            true &&
              !(dispatcher instanceof _views.EventDispatcher) &&
              (0, _debug.assert)(
                'Expected dispatcher to be an EventDispatcher',
                dispatcher instanceof _views.EventDispatcher,
              );
            this.__dispatcher = dispatcher;
          } else {
            // In FastBoot we have no EventDispatcher. Set to null to not try again to look it up.
            this.__dispatcher = null;
          }
        }

        return this.__dispatcher;
      }

      on(name, target, method) {
        var _a;

        (_a = this._dispatcher) === null || _a === void 0
          ? void 0
          : _a.setupHandlerForEmberEvent(name); // The `on` method here comes from the Evented mixin. Since this mixin
        // is applied to the parent of this class, however, we are still able
        // to use `super`.

        return super.on(name, target, method);
      } // Changed to `rerender` on init

      _rerender() {
        (0, _validator.dirtyTag)(this[DIRTY_TAG]);

        this._superRerender();
      }

      [_metal.PROPERTY_DID_CHANGE](key, value) {
        if (this[IS_DISPATCHING_ATTRS]) {
          return;
        }

        var args = this[ARGS];
        var reference = args !== undefined ? args[key] : undefined;

        if (
          reference !== undefined &&
          (0, _reference.isUpdatableRef)(reference)
        ) {
          (0, _reference.updateRef)(
            reference,
            arguments.length === 2 ? value : (0, _metal.get)(this, key),
          );
        }
      }

      getAttr(key) {
        // TODO Intimate API should be deprecated
        return this.get(key);
      }
      /**
      Normally, Ember's component model is "write-only". The component takes a
      bunch of attributes that it got passed in, and uses them to render its
      template.
         One nice thing about this model is that if you try to set a value to the
      same thing as last time, Ember (through HTMLBars) will avoid doing any
      work on the DOM.
         This is not just a performance optimization. If an attribute has not
      changed, it is important not to clobber the element's "hidden state".
      For example, if you set an input's `value` to the same value as before,
      it will clobber selection state and cursor position. In other words,
      setting an attribute is not **always** idempotent.
         This method provides a way to read an element's attribute and also
      update the last value Ember knows about at the same time. This makes
      setting an attribute idempotent.
         In particular, what this means is that if you get an `<input>` element's
      `value` attribute and then re-render the template with the same value,
      it will avoid clobbering the cursor and selection position.
      Since most attribute sets are idempotent in the browser, you typically
      can get away with reading attributes using jQuery, but the most reliable
      way to do so is through this method.
      @method readDOMAttr
         @param {String} name the name of the attribute
      @return String
      @public
      */

      readDOMAttr(name) {
        // TODO revisit this
        var _element = (0, _views.getViewElement)(this);

        true &&
          !(_element !== null) &&
          (0, _debug.assert)(
            `Cannot call \`readDOMAttr\` on ${this} which does not have an element`,
            _element !== null,
          );
        var element = _element;
        var isSVG = element.namespaceURI === 'http://www.w3.org/2000/svg';
        /* SVG */
        var { type, normalized } = (0, _runtime.normalizeProperty)(
          element,
          name,
        );

        if (isSVG || type === 'attr') {
          return element.getAttribute(normalized);
        }

        return element[normalized];
      }

      static toString() {
        return '@ember/component';
      }
    }

    _exports.Component = Component;
    Component.isComponentFactory = true; // We continue to use reopenClass here so that positionalParams can be overridden with reopenClass in subclasses.

    Component.reopenClass({
      /**
     Enables components to take a list of parameters as arguments.
      For example, a component that takes two parameters with the names
      `name` and `age`:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: ['name', 'age']
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" 38}}
      ```
         The parameters can be referred to just like named parameters:
         ```hbs
      Name: {{name}}, Age: {{age}}.
      ```
         Using a string instead of an array allows for an arbitrary number of
      parameters:
         ```app/components/my-component.js
      import Component from '@ember/component';
         let MyComponent = Component.extend();
         MyComponent.reopenClass({
        positionalParams: 'names'
      });
         export default MyComponent;
      ```
         It can then be invoked like this:
         ```hbs
      {{my-component "John" "Michael" "Scott"}}
      ```
      The parameters can then be referred to by enumerating over the list:
         ```hbs
      {{#each names as |name|}}{{name}}{{/each}}
      ```
         @static
      @public
      @property positionalParams
      @since 1.13.0
      */
      positionalParams: [],
    });
    (0, _manager2.setInternalComponentManager)(
      CURLY_COMPONENT_MANAGER,
      Component,
    );
    /**
  @module @ember/component
  */

    var _a;

    var RECOMPUTE_TAG = Symbol('RECOMPUTE_TAG');
    var IS_CLASSIC_HELPER = Symbol('IS_CLASSIC_HELPER');

    class Helper extends _runtime2.FrameworkObject {
      init(properties) {
        super.init(properties);
        this[RECOMPUTE_TAG] = (0, _validator.createTag)();
        true &&
          !this.compute &&
          (0, _debug.assert)('expected compute to be defined', this.compute);
      }
      /**
      On a class-based helper, it may be useful to force a recomputation of that
      helpers value. This is akin to `rerender` on a component.
         For example, this component will rerender when the `currentUser` on a
      session service changes:
         ```app/helpers/current-user-email.js
      import Helper from '@ember/component/helper'
      import { service } from '@ember/service'
      import { observer } from '@ember/object'
         export default Helper.extend({
        session: service(),
           onNewUser: observer('session.currentUser', function() {
          this.recompute();
        }),
           compute() {
          return this.get('session.currentUser.email');
        }
      });
      ```
         @method recompute
      @public
      @since 1.13.0
    */

      recompute() {
        (0, _runloop.join)(() => (0, _validator.dirtyTag)(this[RECOMPUTE_TAG]));
      }
    }

    _exports.Helper = Helper;
    _a = IS_CLASSIC_HELPER;
    Helper.isHelperFactory = true;
    Helper[_a] = true;

    function isClassicHelper(obj) {
      return obj[IS_CLASSIC_HELPER] === true;
    }

    class ClassicHelperManager {
      constructor(owner) {
        this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
          hasValue: true,
          hasDestroyable: true,
        });
        var ownerInjection = {};
        (0, _owner2.setOwner)(ownerInjection, owner);
        this.ownerInjection = ownerInjection;
      }

      createHelper(definition, args) {
        var instance = isFactoryManager(definition)
          ? definition.create()
          : definition.create(this.ownerInjection);
        true &&
          !(function (instance) {
            if (instance !== null && typeof instance === 'object') {
              var cast = instance;
              return (
                typeof cast.compute === 'function' &&
                typeof cast.destroy === 'function'
              );
            }

            return false;
          })(instance) &&
          (0, _debug.assert)(
            'expected HelperInstance',
            (function (instance) {
              if (instance !== null && typeof instance === 'object') {
                var cast = instance;
                return (
                  typeof cast.compute === 'function' &&
                  typeof cast.destroy === 'function'
                );
              }

              return false;
            })(instance),
          );
        return {
          instance,
          args,
        };
      }

      getDestroyable(_ref6) {
        var { instance } = _ref6;
        return instance;
      }

      getValue(_ref7) {
        var { instance, args } = _ref7;
        var { positional, named } = args;
        var ret = instance.compute(positional, named);
        (0, _validator.consumeTag)(instance[RECOMPUTE_TAG]);
        return ret;
      }

      getDebugName(definition) {
        return (0, _utils.getDebugName)(
          (definition.class || definition)['prototype'],
        );
      }
    }

    function isFactoryManager(obj) {
      return obj != null && 'class' in obj;
    }

    (0, _manager2.setHelperManager)((owner) => {
      return new ClassicHelperManager(owner);
    }, Helper);
    var CLASSIC_HELPER_MANAGER = (0, _manager2.getInternalHelperManager)(
      Helper,
    ); ///////////

    class Wrapper {
      constructor(compute) {
        this.compute = compute;
        this.isHelperFactory = true;
      }

      create() {
        // needs new instance or will leak containers
        return {
          compute: this.compute,
        };
      }
    }

    class SimpleClassicHelperManager {
      constructor() {
        this.capabilities = (0, _manager2.helperCapabilities)('3.23', {
          hasValue: true,
        });
      }

      createHelper(definition, args) {
        var { compute } = definition;
        return () => compute.call(null, args.positional, args.named);
      }

      getValue(fn$$1) {
        return fn$$1();
      }

      getDebugName(definition) {
        return (0, _utils.getDebugName)(definition.compute);
      }
    }

    var SIMPLE_CLASSIC_HELPER_MANAGER = new SimpleClassicHelperManager();
    (0, _manager2.setHelperManager)(
      () => SIMPLE_CLASSIC_HELPER_MANAGER,
      Wrapper.prototype,
    );
    /**
    In many cases it is not necessary to use the full `Helper` class.
    The `helper` method create pure-function helpers without instances.
    For example:
  
    ```app/helpers/format-currency.js
    import { helper } from '@ember/component/helper';
  
    export default helper(function([cents], {currency}) {
      return `${currency}${cents * 0.01}`;
    });
    ```
  
    @static
    @param {Function} helper The helper function
    @method helper
    @for @ember/component/helper
    @public
    @since 1.13.0
  */

    function helper(helperFn) {
      return new Wrapper(helperFn);
    }
    /**
  @module @ember/template
  */

    class SafeString {
      constructor(string) {
        this.string = string;
      }

      toString() {
        return `${this.string}`;
      }

      toHTML() {
        return this.toString();
      }
    }

    _exports.SafeString = SafeString;
    var escape = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '`': '&#x60;',
      '=': '&#x3D;',
    };
    var possible = /[&<>"'`=]/;
    var badChars = /[&<>"'`=]/g;

    function escapeChar(chr) {
      return escape[chr];
    }

    function escapeExpression(string) {
      if (typeof string !== 'string') {
        // don't escape SafeStrings, since they're already safe
        if (string && string.toHTML) {
          return string.toHTML();
        } else if (string === null || string === undefined) {
          return '';
        } else if (!string) {
          return String(string);
        } // Force a string conversion as this will be done by the append regardless and
        // the regex test will do this transparently behind the scenes, causing issues if
        // an object's to string has escaped characters in it.

        string = String(string);
      }

      if (!possible.test(string)) {
        return string;
      }

      return string.replace(badChars, escapeChar);
    }
    /**
    Use this method to indicate that a string should be rendered as HTML
    when the string is used in a template. To say this another way,
    strings marked with `htmlSafe` will not be HTML escaped.
  
    A word of warning -   The `htmlSafe` method does not make the string safe;
    it only tells the framework to treat the string as if it is safe to render
    as HTML. If a string contains user inputs or other untrusted
    data, you must sanitize the string before using the `htmlSafe` method.
    Otherwise your code is vulnerable to
    [Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).
    There are many open source sanitization libraries to choose from,
    both for front end and server-side sanitization.
  
    ```javascript
    import { htmlSafe } from '@ember/template';
  
    const someTrustedOrSanitizedString = "<div>Hello!</div>"
  
    htmlSafe(someTrustedorSanitizedString)
    ```
  
    @method htmlSafe
    @for @ember/template
    @static
    @return {SafeString} A string that will not be HTML escaped by Handlebars.
    @public
  */

    function htmlSafe(str) {
      if (str === null || str === undefined) {
        str = '';
      } else if (typeof str !== 'string') {
        str = String(str);
      }

      return new SafeString(str);
    }
    /**
    Detects if a string was decorated using `htmlSafe`.
  
    ```javascript
    import { htmlSafe, isHTMLSafe } from '@ember/template';
  
    var plainString = 'plain string',
        safeString = htmlSafe('<div>someValue</div>');
  
    isHTMLSafe(plainString); // false
    isHTMLSafe(safeString);  // true
    ```
  
    @method isHTMLSafe
    @for @ember/template
    @static
    @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
    @public
  */

    function isHTMLSafe$1(str) {
      return (
        str !== null &&
        typeof str === 'object' &&
        typeof str.toHTML === 'function'
      );
    }

    function instrumentationPayload(def) {
      return {
        object: `${def.name}:${def.outlet}`,
      };
    }

    var CAPABILITIES$1 = {
      dynamicLayout: false,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: false,
      attributeHook: false,
      elementHook: false,
      createCaller: false,
      dynamicScope: true,
      updateHook: false,
      createInstance: true,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };

    class OutletComponentManager {
      create(_owner, definition, _args, env, dynamicScope) {
        var parentStateRef = dynamicScope.get('outletState');
        var currentStateRef = definition.ref;
        dynamicScope.set('outletState', currentStateRef);
        var state = {
          self: (0, _reference.createConstRef)(definition.controller, 'this'),
          finalize: (0, _instrumentation._instrumentStart)(
            'render.outlet',
            instrumentationPayload,
            definition,
          ),
        };

        if (env.debugRenderTree !== undefined) {
          state.outlet = {
            name: definition.outlet,
          };
          var parentState = (0, _reference.valueForRef)(parentStateRef);
          var parentOwner =
            parentState && parentState.render && parentState.render.owner;
          var currentOwner = (0, _reference.valueForRef)(currentStateRef).render
            .owner;

          if (parentOwner && parentOwner !== currentOwner) {
            true &&
              !(currentOwner instanceof _instance.default) &&
              (0, _debug.assert)(
                'Expected currentOwner to be an EngineInstance',
                currentOwner instanceof _instance.default,
              );
            var mountPoint = currentOwner.mountPoint;
            state.engine = currentOwner;

            if (mountPoint) {
              state.engineBucket = {
                mountPoint,
              };
            }
          }
        }

        return state;
      }

      getDebugName(_ref8) {
        var { name } = _ref8;
        return name;
      }

      getDebugCustomRenderTree(definition, state, args) {
        var nodes = [];

        if (state.outlet) {
          nodes.push({
            bucket: state.outlet,
            type: 'outlet',
            name: state.outlet.name,
            args: _runtime.EMPTY_ARGS,
            instance: undefined,
            template: undefined,
          });
        }

        if (state.engineBucket) {
          nodes.push({
            bucket: state.engineBucket,
            type: 'engine',
            name: state.engineBucket.mountPoint,
            args: _runtime.EMPTY_ARGS,
            instance: state.engine,
            template: undefined,
          });
        }

        nodes.push({
          bucket: state,
          type: 'route-template',
          name: definition.name,
          args: args,
          instance: definition.controller,
          template: (0, _util.unwrapTemplate)(definition.template).moduleName,
        });
        return nodes;
      }

      getCapabilities() {
        return CAPABILITIES$1;
      }

      getSelf(_ref9) {
        var { self } = _ref9;
        return self;
      }

      didCreate() {}

      didUpdate() {}

      didRenderLayout(state) {
        state.finalize();
      }

      didUpdateLayout() {}

      getDestroyable() {
        return null;
      }
    }

    var OUTLET_MANAGER = new OutletComponentManager();

    class OutletComponentDefinition {
      constructor(state, manager) {
        if (manager === void 0) {
          manager = OUTLET_MANAGER;
        }

        this.state = state;
        this.manager = manager; // handle is not used by this custom definition

        this.handle = -1;
        var capabilities = manager.getCapabilities();
        this.capabilities = (0, _manager2.capabilityFlagsFrom)(capabilities);
        this.compilable = capabilities.wrapped
          ? (0, _util.unwrapTemplate)(state.template).asWrappedLayout()
          : (0, _util.unwrapTemplate)(state.template).asLayout();
        this.resolvedName = state.name;
      }
    }

    function createRootOutlet(outletView) {
      if (_environment2.ENV._APPLICATION_TEMPLATE_WRAPPER) {
        var WRAPPED_CAPABILITIES = Object.assign({}, CAPABILITIES$1, {
          dynamicTag: true,
          elementHook: true,
          wrapped: true,
        });
        var WrappedOutletComponentManager = class extends OutletComponentManager {
          getTagName() {
            return 'div';
          }

          getCapabilities() {
            return WRAPPED_CAPABILITIES;
          }

          didCreateElement(component, element) {
            // to add GUID id and class
            element.setAttribute('class', 'ember-view');
            element.setAttribute('id', (0, _utils.guidFor)(component));
          }
        };
        var WRAPPED_OUTLET_MANAGER = new WrappedOutletComponentManager();
        return new OutletComponentDefinition(
          outletView.state,
          WRAPPED_OUTLET_MANAGER,
        );
      } else {
        return new OutletComponentDefinition(outletView.state);
      }
    }

    class RootComponentManager extends CurlyComponentManager {
      constructor(component) {
        super();
        this.component = component;
      }

      create(_owner, _state, _args, _ref10, dynamicScope) {
        var { isInteractive } = _ref10;
        var component = this.component;
        var finalizer = (0, _instrumentation._instrumentStart)(
          'render.component',
          initialRenderInstrumentDetails,
          component,
        );
        dynamicScope.view = component;
        var hasWrappedElement = component.tagName !== ''; // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components

        if (!hasWrappedElement) {
          if (isInteractive) {
            component.trigger('willRender');
          }

          component._transitionTo('hasElement');

          if (isInteractive) {
            component.trigger('willInsertElement');
          }
        }

        if (
          true
          /* DEBUG */
        ) {
          processComponentInitializationAssertions(component, {});
        }

        var bucket = new ComponentStateBucket(
          component,
          null,
          _validator.CONSTANT_TAG,
          finalizer,
          hasWrappedElement,
          isInteractive,
        );
        (0, _validator.consumeTag)(component[DIRTY_TAG]);
        return bucket;
      }
    } // ROOT is the top-level template it has nothing but one yield.
    // it is supposed to have a dummy element

    var ROOT_CAPABILITIES = {
      dynamicLayout: true,
      dynamicTag: true,
      prepareArgs: false,
      createArgs: false,
      attributeHook: true,
      elementHook: true,
      createCaller: true,
      dynamicScope: true,
      updateHook: true,
      createInstance: true,
      wrapped: true,
      willDestroy: false,
      hasSubOwner: false,
    };

    class RootComponentDefinition {
      constructor(component) {
        // handle is not used by this custom definition
        this.handle = -1;
        this.resolvedName = '-top-level';
        this.capabilities = (0, _manager2.capabilityFlagsFrom)(
          ROOT_CAPABILITIES,
        );
        this.compilable = null;
        this.manager = new RootComponentManager(component);
        this.state = (0, _container.getFactoryFor)(component);
      }
    }
    /**
  @module ember
  */

    /**
    The `{{#each}}` helper loops over elements in a collection. It is an extension
    of the base Handlebars `{{#each}}` helper.
  
    The default behavior of `{{#each}}` is to yield its inner block once for every
    item in an array passing the item as the first block parameter.
  
    Assuming the `@developers` argument contains this array:
  
    ```javascript
    [{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];
    ```
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    The same rules apply to arrays of primitives.
  
    ```javascript
    ['Yehuda', 'Tom', 'Paul']
    ```
  
    ```handlebars
    <ul>
      {{#each @developerNames as |name|}}
        <li>Hello, {{name}}!</li>
      {{/each}}
    </ul>
    ```
  
    During iteration, the index of each item in the array is provided as a second block
    parameter.
  
    ```handlebars
    <ul>
      {{#each @developers as |person index|}}
        <li>Hello, {{person.name}}! You're number {{index}} in line</li>
      {{/each}}
    </ul>
    ```
  
    ### Specifying Keys
  
    In order to improve rendering speed, Ember will try to reuse the DOM elements
    where possible. Specifically, if the same item is present in the array both
    before and after the change, its DOM output will be reused.
  
    The `key` option is used to tell Ember how to determine if the items in the
    array being iterated over with `{{#each}}` has changed between renders. By
    default the item's object identity is used.
  
    This is usually sufficient, so in most cases, the `key` option is simply not
    needed. However, in some rare cases, the objects' identities may change even
    though they represent the same underlying data.
  
    For example:
  
    ```javascript
    people.map(person => {
      return { ...person, type: 'developer' };
    });
    ```
  
    In this case, each time the `people` array is `map`-ed over, it will produce
    an new array with completely different objects between renders. In these cases,
    you can help Ember determine how these objects related to each other with the
    `key` option:
  
    ```handlebars
    <ul>
      {{#each @developers key="name" as |person|}}
        <li>Hello, {{person.name}}!</li>
      {{/each}}
    </ul>
    ```
  
    By doing so, Ember will use the value of the property specified (`person.name`
    in the example) to find a "match" from the previous render. That is, if Ember
    has previously seen an object from the `@developers` array with a matching
    name, its DOM elements will be re-used.
  
    There are two special values for `key`:
  
      * `@index` - The index of the item in the array.
      * `@identity` - The item in the array itself.
  
    ### {{else}} condition
  
    `{{#each}}` can have a matching `{{else}}`. The contents of this block will render
    if the collection is empty.
  
    ```handlebars
    <ul>
      {{#each @developers as |person|}}
        <li>{{person.name}} is available!</li>
      {{else}}
        <li>Sorry, nobody is available for this task.</li>
      {{/each}}
    </ul>
    ```
  
    @method each
    @for Ember.Templates.helpers
    @public
   */

    /**
    The `{{each-in}}` helper loops over properties on an object.
  
    For example, given this component definition:
  
    ```app/components/developer-details.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        "name": "Shelly Sails",
        "age": 42
      };
    }
    ```
  
    This template would display all properties on the `developer`
    object in a list:
  
    ```app/components/developer-details.hbs
    <ul>
      {{#each-in this.developer as |key value|}}
        <li>{{key}}: {{value}}</li>
      {{/each-in}}
    </ul>
    ```
  
    Outputting their name and age:
  
    ```html
    <ul>
      <li>name: Shelly Sails</li>
      <li>age: 42</li>
    </ul>
    ```
  
    @method each-in
    @for Ember.Templates.helpers
    @public
    @since 2.1.0
  */

    class EachInWrapper {
      constructor(inner) {
        this.inner = inner;
      }
    }

    var eachIn = internalHelper((_ref11) => {
      var { positional } = _ref11;
      var inner = positional[0];
      true &&
        !inner &&
        (0, _debug.assert)('expected at least one positional arg', inner);
      return (0, _reference.createComputeRef)(() => {
        var iterable = (0, _reference.valueForRef)(inner);
        (0, _validator.consumeTag)((0, _metal.tagForObject)(iterable));

        if ((0, _utils.isProxy)(iterable)) {
          // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
          // and the proxy's tag is lazy updated on access
          iterable = (0, _runtime2._contentFor)(iterable);
        }

        return new EachInWrapper(iterable);
      });
    });

    function toIterator(iterable) {
      if (iterable instanceof EachInWrapper) {
        return toEachInIterator(iterable.inner);
      } else {
        return toEachIterator(iterable);
      }
    }

    function toEachInIterator(iterable) {
      if (!isIndexable(iterable)) {
        return null;
      }

      if (Array.isArray(iterable) || (0, _utils.isEmberArray)(iterable)) {
        return ObjectIterator.fromIndexable(iterable);
      } else if (isNativeIterable(iterable)) {
        return MapLikeNativeIterator.from(iterable);
      } else if (hasForEach(iterable)) {
        return ObjectIterator.fromForEachable(iterable);
      } else {
        return ObjectIterator.fromIndexable(iterable);
      }
    }

    function toEachIterator(iterable) {
      if (!(0, _utils.isObject)(iterable)) {
        return null;
      }

      if (Array.isArray(iterable)) {
        return ArrayIterator.from(iterable);
      } else if ((0, _utils.isEmberArray)(iterable)) {
        return EmberArrayIterator.from(iterable);
      } else if (isNativeIterable(iterable)) {
        return ArrayLikeNativeIterator.from(iterable);
      } else if (hasForEach(iterable)) {
        return ArrayIterator.fromForEachable(iterable);
      } else {
        return null;
      }
    }

    class BoundedIterator {
      constructor(length) {
        this.length = length;
        this.position = 0;
      }

      isEmpty() {
        return false;
      }

      memoFor(position) {
        return position;
      }

      next() {
        var { length, position } = this;

        if (position >= length) {
          return null;
        }

        var value = this.valueFor(position);
        var memo = this.memoFor(position);
        this.position++;
        return {
          value,
          memo,
        };
      }
    }

    class ArrayIterator extends BoundedIterator {
      constructor(array$$1) {
        super(array$$1.length);
        this.array = array$$1;
      }

      static from(iterable) {
        return iterable.length > 0 ? new this(iterable) : null;
      }

      static fromForEachable(object) {
        var array$$1 = [];
        object.forEach((item) => array$$1.push(item));
        return this.from(array$$1);
      }

      valueFor(position) {
        return this.array[position];
      }
    }

    class EmberArrayIterator extends BoundedIterator {
      constructor(array$$1) {
        super(array$$1.length);
        this.array = array$$1;
      }

      static from(iterable) {
        return iterable.length > 0 ? new this(iterable) : null;
      }

      valueFor(position) {
        return (0, _metal.objectAt)(this.array, position);
      }
    }

    class ObjectIterator extends BoundedIterator {
      constructor(keys, values) {
        super(values.length);
        this.keys = keys;
        this.values = values;
      }

      static fromIndexable(obj) {
        var keys = Object.keys(obj);

        if (keys.length === 0) {
          return null;
        } else {
          var values = [];

          for (var key of keys) {
            var value = void 0;
            value = obj[key]; // Add the tag of the returned value if it is an array, since arrays
            // should always cause updates if they are consumed and then changed

            if ((0, _validator.isTracking)()) {
              (0, _validator.consumeTag)((0, _validator.tagFor)(obj, key));

              if (Array.isArray(value)) {
                (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
              }
            }

            values.push(value);
          }

          return new this(keys, values);
        }
      }

      static fromForEachable(obj) {
        var keys = [];
        var values = [];
        var length = 0;
        var isMapLike = false; // Not using an arrow function here so we can get an accurate `arguments`

        obj.forEach(function (value, key) {
          isMapLike = isMapLike || arguments.length >= 2;

          if (isMapLike) {
            keys.push(key);
          }

          values.push(value);
          length++;
        });

        if (length === 0) {
          return null;
        } else if (isMapLike) {
          return new this(keys, values);
        } else {
          return new ArrayIterator(values);
        }
      }

      valueFor(position) {
        return this.values[position];
      }

      memoFor(position) {
        return this.keys[position];
      }
    }

    class NativeIterator {
      constructor(iterable, result) {
        this.iterable = iterable;
        this.result = result;
        this.position = 0;
      }

      static from(iterable) {
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next();
        var { done } = result;

        if (done) {
          return null;
        } else {
          return new this(iterator, result);
        }
      }

      isEmpty() {
        return false;
      }

      next() {
        var { iterable, result, position } = this;

        if (result.done) {
          return null;
        }

        var value = this.valueFor(result, position);
        var memo = this.memoFor(result, position);
        this.position++;
        this.result = iterable.next();
        return {
          value,
          memo,
        };
      }
    }

    class ArrayLikeNativeIterator extends NativeIterator {
      valueFor(result) {
        return result.value;
      }

      memoFor(_result, position) {
        return position;
      }
    }

    class MapLikeNativeIterator extends NativeIterator {
      valueFor(result) {
        return result.value[1];
      }

      memoFor(result) {
        return result.value[0];
      }
    }

    function hasForEach(value) {
      return value != null && typeof value['forEach'] === 'function';
    }

    function isNativeIterable(value) {
      return value != null && typeof value[Symbol.iterator] === 'function';
    }

    function isIndexable(value) {
      return (
        value !== null &&
        (typeof value === 'object' || typeof value === 'function')
      );
    }

    function toBool(predicate) {
      if ((0, _utils.isProxy)(predicate)) {
        (0, _validator.consumeTag)(
          (0, _metal.tagForProperty)(predicate, 'content'),
        );
        return Boolean((0, _metal.get)(predicate, 'isTruthy'));
      } else if ((0, _runtime2.isArray)(predicate)) {
        (0, _validator.consumeTag)((0, _metal.tagForProperty)(predicate, '[]'));
        return predicate.length !== 0;
      } else if ((0, _glimmer.isHTMLSafe)(predicate)) {
        return Boolean(predicate.toString());
      } else {
        return Boolean(predicate);
      }
    } // Setup global context

    (0, _globalContext.default)({
      FEATURES: {
        DEFAULT_HELPER_MANAGER: Boolean(
          true,
          /* EMBER_DEFAULT_HELPER_MANAGER */
        ),
      },

      scheduleRevalidate() {
        _runloop._backburner.ensureInstance();
      },

      toBool,
      toIterator,
      getProp: _metal._getProp,
      setProp: _metal._setProp,
      getPath: _metal.get,
      setPath: _metal.set,

      scheduleDestroy(destroyable, destructor) {
        (0, _runloop.schedule)('actions', null, destructor, destroyable);
      },

      scheduleDestroyed(finalizeDestructor) {
        (0, _runloop.schedule)('destroy', null, finalizeDestructor);
      },

      warnIfStyleNotTrusted(value) {
        true &&
          (0, _debug.warn)(
            (0, _views.constructStyleDeprecationMessage)(String(value)),
            (() => {
              if (
                value === null ||
                value === undefined ||
                isHTMLSafe$1(value)
              ) {
                return true;
              }

              return false;
            })(),
            {
              id: 'ember-htmlbars.style-xss-warning',
            },
          );
      },

      assert(test, msg, options) {
        var _a;

        if (
          true
          /* DEBUG */
        ) {
          var id = options === null || options === void 0 ? void 0 : options.id;
          var override = VM_ASSERTION_OVERRIDES.filter((o) => o.id === id)[0];
          true &&
            !test &&
            (0, _debug.assert)(
              (_a =
                override === null || override === void 0
                  ? void 0
                  : override.message) !== null && _a !== void 0
                ? _a
                : msg,
              test,
            );
        }
      },

      deprecate(msg, test, options) {
        var _a;

        if (
          true
          /* DEBUG */
        ) {
          var { id } = options;

          if (id === 'argument-less-helper-paren-less-invocation') {
            throw new Error(
              `A resolved helper cannot be passed as a named argument as the syntax is ` +
                `ambiguously a pass-by-reference or invocation. Use the ` +
                `\`{{helper 'foo-helper}}\` helper to pass by reference or explicitly ` +
                `invoke the helper with parens: \`{{(fooHelper)}}\`.`,
            );
          }

          var override = VM_DEPRECATION_OVERRIDES.filter((o) => o.id === id)[0];
          if (!override)
            throw new Error(`deprecation override for ${id} not found`); // allow deprecations to be disabled in the VM_DEPRECATION_OVERRIDES array below

          if (!override.disabled) {
            true &&
              !Boolean(test) &&
              (0, _debug.deprecate)(
                (_a = override.message) !== null && _a !== void 0 ? _a : msg,
                Boolean(test),
                override,
              );
          }
        }
      },
    });

    if (
      true
      /* DEBUG */
    ) {
      _validator.setTrackingTransactionEnv === null ||
      _validator.setTrackingTransactionEnv === void 0
        ? void 0
        : (0, _validator.setTrackingTransactionEnv)({
            debugMessage(obj, keyName) {
              var dirtyString = keyName
                ? `\`${keyName}\` on \`${
                    _utils.getDebugName === null ||
                    _utils.getDebugName === void 0
                      ? void 0
                      : (0, _utils.getDebugName)(obj)
                  }\``
                : `\`${
                    _utils.getDebugName === null ||
                    _utils.getDebugName === void 0
                      ? void 0
                      : (0, _utils.getDebugName)(obj)
                  }\``;
              return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
            },
          });
    } ///////////
    // VM Assertion/Deprecation overrides

    var VM_DEPRECATION_OVERRIDES = [
      {
        id: 'setting-on-hash',
        until: '4.4.0',
        for: 'ember-source',
        since: {
          available: '3.28.0',
          enabled: '3.28.0',
        },
      },
    ];
    var VM_ASSERTION_OVERRIDES = []; ///////////
    // Define environment delegate

    class EmberEnvironmentDelegate {
      constructor(owner, isInteractive) {
        this.owner = owner;
        this.isInteractive = isInteractive;
        this.enableDebugTooling = _environment2.ENV._DEBUG_RENDER_TREE;
      }

      onTransactionCommit() {}
    }
    /**
  @module ember
  */

    var disallowDynamicResolution = internalHelper((_ref12) => {
      var { positional, named } = _ref12;
      var nameOrValueRef = positional[0];
      true &&
        !(positional.length === 1 && nameOrValueRef) &&
        (0, _debug.assert)(
          `[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`,
          positional.length === 1 && nameOrValueRef,
        );
      var typeRef = named['type'];
      var locRef = named['loc'];
      var originalRef = named['original'];
      true &&
        !typeRef &&
        (0, _debug.assert)(`[BUG] expecting \`type\` named argument`, typeRef);
      true &&
        !locRef &&
        (0, _debug.assert)(`[BUG] expecting \`loc\` named argument`, locRef);
      true &&
        !originalRef &&
        (0, _debug.assert)(
          `[BUG] expecting \`original\` named argument`,
          originalRef,
        ); // Bug: why do these fail?
      // assert('[BUG] expecting a string literal for the `type` argument', isConstRef(typeRef));
      // assert('[BUG] expecting a string literal for the `loc` argument', isConstRef(locRef));
      // assert('[BUG] expecting a string literal for the `original` argument', isConstRef(originalRef));

      var type = (0, _reference.valueForRef)(typeRef);
      var loc = (0, _reference.valueForRef)(locRef);
      var original = (0, _reference.valueForRef)(originalRef);
      true &&
        !(typeof type === 'string') &&
        (0, _debug.assert)(
          '[BUG] expecting a string literal for the `type` argument',
          typeof type === 'string',
        );
      true &&
        !(typeof loc === 'string') &&
        (0, _debug.assert)(
          '[BUG] expecting a string literal for the `loc` argument',
          typeof loc === 'string',
        );
      true &&
        !(typeof original === 'string') &&
        (0, _debug.assert)(
          '[BUG] expecting a string literal for the `original` argument',
          typeof original === 'string',
        );
      return (0, _reference.createComputeRef)(() => {
        var nameOrValue = (0, _reference.valueForRef)(nameOrValueRef);
        true &&
          !(typeof nameOrValue !== 'string') &&
          (0, _debug.assert)(
            `Passing a dynamic string to the \`(${type})\` keyword is disallowed. ` +
              `(You specified \`(${type} ${original})\` and \`${original}\` evaluated into "${nameOrValue}".) ` +
              `This ensures we can statically analyze the template and determine which ${type}s are used. ` +
              `If the ${type} name is always the same, use a string literal instead, i.e. \`(${type} "${nameOrValue}")\`. ` +
              `Otherwise, import the ${type}s into JavaScript and pass them directly. ` +
              'See https://github.com/emberjs/rfcs/blob/master/text/0496-handlebars-strict-mode.md#4-no-dynamic-resolution for details. ' +
              loc,
            typeof nameOrValue !== 'string',
          );
        return nameOrValue;
      });
    });
    var helper$1;

    if (
      true
      /* DEBUG */
    ) {
      helper$1 = (args) => {
        var inner = args.positional[0];
        true &&
          !inner &&
          (0, _debug.assert)('expected at least one positional arg', inner);
        return (0, _reference.createComputeRef)(() => {
          var value = (0, _reference.valueForRef)(inner);
          true &&
            !(value !== null && value !== undefined) &&
            (0, _debug.assert)(
              'You cannot pass a null or undefined destination element to in-element',
              value !== null && value !== undefined,
            );
          return value;
        });
      };
    } else {
      helper$1 = (args) => {
        var arg = args.positional[0];
        true &&
          !arg &&
          (0, _debug.assert)('expected at least one positional arg', arg);
        return arg;
      };
    }

    var inElementNullCheckHelper = internalHelper(helper$1);
    var normalizeClassHelper = internalHelper((_ref13) => {
      var { positional } = _ref13;
      return (0, _reference.createComputeRef)(() => {
        var classNameArg = positional[0];
        var valueArg = positional[1];
        true &&
          !(classNameArg && valueArg) &&
          (0, _debug.assert)(
            'expected at least two positional args',
            classNameArg && valueArg,
          );
        var classNameParts = (0, _reference.valueForRef)(classNameArg).split(
          '.',
        );
        var className = classNameParts[classNameParts.length - 1];
        true && !className && (0, _debug.assert)('has className', className); // Always at least one split result

        var value = (0, _reference.valueForRef)(valueArg);

        if (value === true) {
          return (0, _string.dasherize)(className);
        } else if (!value && value !== 0) {
          return '';
        } else {
          return String(value);
        }
      });
    });
    var resolve = internalHelper((_ref14, owner) => {
      var { positional } = _ref14;

      var _a; // why is this allowed to be undefined in the first place?

      true && !owner && (0, _debug.assert)('[BUG] missing owner', owner);
      true &&
        !(positional.length === 1) &&
        (0, _debug.assert)(
          `[BUG] wrong number of positional arguments, expecting 1, got ${positional.length}`,
          positional.length === 1,
        );
      var fullNameRef = positional[0];
      true &&
        !(fullNameRef && (0, _reference.isConstRef)(fullNameRef)) &&
        (0, _debug.assert)(
          '[BUG] expecting a string literal as argument',
          fullNameRef && (0, _reference.isConstRef)(fullNameRef),
        );
      var fullName = (0, _reference.valueForRef)(fullNameRef);
      true &&
        !(typeof fullName === 'string') &&
        (0, _debug.assert)(
          '[BUG] expecting a string literal as argument',
          typeof fullName === 'string',
        );
      true &&
        !(fullName.split(':').length === 2) &&
        (0, _debug.assert)(
          '[BUG] expecting a valid full name',
          fullName.split(':').length === 2,
        );

      if (
        true
        /* DEBUG */
      ) {
        var [type, name] = fullName.split(':');
        true &&
          !owner.hasRegistration(fullName) &&
          (0, _debug.assert)(
            `Attempted to invoke \`(-resolve "${fullName}")\`, but ${name} was not a valid ${type} name.`,
            owner.hasRegistration(fullName),
          );
      }

      return (0, _reference.createConstRef)(
        (_a = owner.factoryFor(fullName)) === null || _a === void 0
          ? void 0
          : _a.class,
        `(-resolve "${fullName}")`,
      );
    });
    /**
  @module ember
  */

    /**
    This reference is used to get the `[]` tag of iterables, so we can trigger
    updates to `{{each}}` when it changes. It is put into place by a template
    transform at build time, similar to the (-each-in) helper
  */

    var trackArray = internalHelper((_ref15) => {
      var { positional } = _ref15;
      var inner = positional[0];
      true &&
        !inner &&
        (0, _debug.assert)('expected at least one positional arg', inner);
      return (0, _reference.createComputeRef)(() => {
        var iterable = (0, _reference.valueForRef)(inner);

        if ((0, _utils.isObject)(iterable)) {
          (0, _validator.consumeTag)(
            (0, _metal.tagForProperty)(iterable, '[]'),
          );
        }

        return iterable;
      });
    });
    /**
  @module ember
  */

    /**
    The `mut` helper lets you __clearly specify__ that a child `Component` can update the
    (mutable) value passed to it, which will __change the value of the parent component__.
  
    To specify that a parameter is mutable, when invoking the child `Component`:
  
    ```handlebars
    <MyChild @childClickCount={{fn (mut totalClicks)}} />
    ```
  
     or
  
    ```handlebars
    {{my-child childClickCount=(mut totalClicks)}}
    ```
  
    The child `Component` can then modify the parent's value just by modifying its own
    property:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    Note that for curly components (`{{my-component}}`) the bindings are already mutable,
    making the `mut` unnecessary.
  
    Additionally, the `mut` helper can be combined with the `fn` helper to
    mutate a value. For example:
  
    ```handlebars
    <MyChild @childClickCount={{this.totalClicks}} @click-count-change={{fn (mut totalClicks))}} />
    ```
  
    or
  
    ```handlebars
    {{my-child childClickCount=totalClicks click-count-change=(fn (mut totalClicks))}}
    ```
  
    The child `Component` would invoke the function with the new click value:
  
    ```javascript
    // my-child.js
    export default Component.extend({
      click() {
        this.get('click-count-change')(this.get('childClickCount') + 1);
      }
    });
    ```
  
    The `mut` helper changes the `totalClicks` value to what was provided as the `fn` argument.
  
    The `mut` helper, when used with `fn`, will return a function that
    sets the value passed to `mut` to its first argument. As an example, we can create a
    button that increments a value passing the value directly to the `fn`:
  
    ```handlebars
    {{! inc helper is not provided by Ember }}
    <button onclick={{fn (mut count) (inc count)}}>
      Increment count
    </button>
    ```
  
    @method mut
    @param {Object} [attr] the "two-way" attribute that can be modified.
    @for Ember.Templates.helpers
    @public
  */

    var mut = internalHelper((_ref16) => {
      var { positional } = _ref16;
      var ref = positional[0];
      true &&
        !ref &&
        (0, _debug.assert)('expected at least one positional arg', ref); // TODO: Improve this error message. This covers at least two distinct
      // cases:
      //
      // 1. (mut "not a path") – passing a literal, result from a helper
      //    invocation, etc
      //
      // 2. (mut receivedValue) – passing a value received from the caller
      //    that was originally derived from a literal, result from a helper
      //    invocation, etc
      //
      // This message is alright for the first case, but could be quite
      // confusing for the second case.

      true &&
        !(0, _reference.isUpdatableRef)(ref) &&
        (0, _debug.assert)(
          'You can only pass a path to mut',
          (0, _reference.isUpdatableRef)(ref),
        );
      return (0, _reference.createInvokableRef)(ref);
    });
    /**
    The `readonly` helper let's you specify that a binding is one-way only,
    instead of two-way.
    When you pass a `readonly` binding from an outer context (e.g. parent component),
    to to an inner context (e.g. child component), you are saying that changing that
    property in the inner context does not change the value in the outer context.
  
    To specify that a binding is read-only, when invoking the child `Component`:
  
    ```app/components/my-parent.js
    export default Component.extend({
      totalClicks: 3
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} // -> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    ```
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    Now, when you update `childClickCount`:
  
    ```app/components/my-child.js
    export default Component.extend({
      click() {
        this.incrementProperty('childClickCount');
      }
    });
    ```
  
    The value updates in the child component, but not the parent component:
  
    ```app/templates/components/my-child.hbs
    {{log childClickCount}} //-> 4
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    <MyChild @childClickCount={{readonly totalClicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log totalClicks}} //-> 3
    {{my-child childClickCount=(readonly totalClicks)}}
    ```
  
    ### Objects and Arrays
  
    When passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),
    only the reference to the object is protected using the readonly helper.
    This means that you can change properties of the object both on the parent component, as well as the child component.
    The `readonly` binding behaves similar to the `const` keyword in JavaScript.
  
    Let's look at an example:
  
    First let's set up the parent component:
  
    ```app/components/my-parent.js
    import Component from '@ember/component';
  
    export default Component.extend({
      clicks: null,
  
      init() {
        this._super(...arguments);
        this.set('clicks', { total: 3 });
      }
    });
    ```
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    <MyChild @childClicks={{readonly clicks}} />
    ```
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 3
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    Now, if you update the `total` property of `childClicks`:
  
    ```app/components/my-child.js
    import Component from '@ember/component';
  
    export default Component.extend({
      click() {
        this.get('clicks').incrementProperty('total');
      }
    });
    ```
  
    You will see the following happen:
  
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    <MyChild @childClicks={{readonly clicks}} />
    ```
    or
    ```app/templates/components/my-parent.hbs
    {{log clicks.total}} //-> 4
    {{my-child childClicks=(readonly clicks)}}
    ```
  
    ```app/templates/components/my-child.hbs
    {{log childClicks.total}} //-> 4
    ```
  
    @method readonly
    @param {Object} [attr] the read-only attribute.
    @for Ember.Templates.helpers
    @private
  */

    var readonly = internalHelper((_ref17) => {
      var { positional } = _ref17;
      var firstArg = positional[0];
      true && !firstArg && (0, _debug.assert)('has first arg', firstArg);
      return (0, _reference.createReadOnlyRef)(firstArg);
    });
    /**
  @module ember
  */

    /**
    The `{{unbound}}` helper disconnects the one-way binding of a property,
    essentially freezing its value at the moment of rendering. For example,
    in this example the display of the variable `name` will not change even
    if it is set with a new value:
  
    ```handlebars
    {{unbound this.name}}
    ```
  
    Like any helper, the `unbound` helper can accept a nested helper expression.
    This allows for custom helpers to be rendered unbound:
  
    ```handlebars
    {{unbound (some-custom-helper)}}
    {{unbound (capitalize this.name)}}
    {{! You can use any helper, including unbound, in a nested expression }}
    {{capitalize (unbound this.name)}}
    ```
  
    The `unbound` helper only accepts a single argument, and it return an
    unbound value.
  
    @method unbound
    @for Ember.Templates.helpers
    @public
  */

    var unbound = internalHelper((_ref18) => {
      var { positional, named } = _ref18;
      true &&
        !(positional.length === 1 && Object.keys(named).length === 0) &&
        (0, _debug.assert)(
          'unbound helper cannot be called with multiple params or hash params',
          positional.length === 1 && Object.keys(named).length === 0,
        );
      return (0, _reference.createUnboundRef)(
        (0, _reference.valueForRef)(positional[0]),
        '(result of an `unbound` helper)',
      );
    });
    /**
  @module ember
  */

    var uniqueId = internalHelper(() => {
      return (0, _reference.createConstRef)(uniqueId$1(), 'unique-id');
    }); // From https://gist.github.com/selfish/fef2c0ba6cdfe07af76e64cecd74888b
    //
    // This code should be reasonably fast, and provide a unique value every time
    // it's called, which is what we need here. It produces a string formatted as a
    // standard UUID, which avoids accidentally turning Ember-specific
    // implementation details into an intimate API. It also ensures that the UUID
    // always starts with a letter, to avoid creating invalid IDs with a numeric
    // digit at the start.

    function uniqueId$1() {
      // @ts-expect-error this one-liner abuses weird JavaScript semantics that
      // TypeScript (legitimately) doesn't like, but they're nonetheless valid and
      // specced.
      return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, (a) =>
        ((a * 4) ^ ((Math.random() * 16) >> (a & 2))).toString(16),
      );
    }

    var MODIFIERS = ['alt', 'shift', 'meta', 'ctrl'];
    var POINTER_EVENT_TYPE_REGEX = /^click|mouse|touch/;

    function isAllowedEvent(event, allowedKeys) {
      if (allowedKeys === null || allowedKeys === undefined) {
        if (POINTER_EVENT_TYPE_REGEX.test(event.type)) {
          return (0, _views.isSimpleClick)(event);
        } else {
          allowedKeys = '';
        }
      }

      if (allowedKeys.indexOf('any') >= 0) {
        return true;
      }

      for (var i = 0; i < MODIFIERS.length; i++) {
        if (
          event[MODIFIERS[i] + 'Key'] &&
          allowedKeys.indexOf(MODIFIERS[i]) === -1
        ) {
          return false;
        }
      }

      return true;
    }

    var ActionHelper = {
      // registeredActions is re-exported for compatibility with older plugins
      // that were using this undocumented API.
      registeredActions: _views.ActionManager.registeredActions,

      registerAction(actionState) {
        var { actionId } = actionState;
        _views.ActionManager.registeredActions[actionId] = actionState;
        return actionId;
      },

      unregisterAction(actionState) {
        var { actionId } = actionState;
        delete _views.ActionManager.registeredActions[actionId];
      },
    };

    class ActionState {
      constructor(
        element,
        owner,
        actionId,
        actionArgs,
        namedArgs,
        positionalArgs,
      ) {
        this.tag = (0, _validator.createUpdatableTag)();
        this.element = element;
        this.owner = owner;
        this.actionId = actionId;
        this.actionArgs = actionArgs;
        this.namedArgs = namedArgs;
        this.positional = positionalArgs;
        this.eventName = this.getEventName();
        (0, _destroyable.registerDestructor)(this, () =>
          ActionHelper.unregisterAction(this),
        );
      }

      getEventName() {
        var { on: on$$1 } = this.namedArgs;
        return on$$1 !== undefined
          ? (0, _reference.valueForRef)(on$$1)
          : 'click';
      }

      getActionArgs() {
        var result = new Array(this.actionArgs.length);

        for (var i = 0; i < this.actionArgs.length; i++) {
          result[i] = (0, _reference.valueForRef)(this.actionArgs[i]);
        }

        return result;
      }

      getTarget() {
        var { implicitTarget, namedArgs } = this;
        var { target } = namedArgs;
        return target !== undefined
          ? (0, _reference.valueForRef)(target)
          : (0, _reference.valueForRef)(implicitTarget);
      }

      handler(event) {
        var { actionName, namedArgs } = this;
        var { bubbles, preventDefault, allowedKeys } = namedArgs;
        var bubblesVal =
          bubbles !== undefined
            ? (0, _reference.valueForRef)(bubbles)
            : undefined;
        var preventDefaultVal =
          preventDefault !== undefined
            ? (0, _reference.valueForRef)(preventDefault)
            : undefined;
        var allowedKeysVal =
          allowedKeys !== undefined
            ? (0, _reference.valueForRef)(allowedKeys)
            : undefined;
        var target = this.getTarget();
        var shouldBubble = bubblesVal !== false;

        if (!isAllowedEvent(event, allowedKeysVal)) {
          return true;
        }

        if (preventDefaultVal !== false) {
          event.preventDefault();
        }

        if (!shouldBubble) {
          event.stopPropagation();
        }

        (0, _runloop.join)(() => {
          var args = this.getActionArgs();
          var payload = {
            args,
            target,
            name: null,
          };

          if ((0, _reference.isInvokableRef)(actionName)) {
            (0, _instrumentation.flaggedInstrument)(
              'interaction.ember-action',
              payload,
              () => {
                (0, _reference.updateRef)(actionName, args[0]);
              },
            );
            return;
          }

          if (typeof actionName === 'function') {
            (0, _instrumentation.flaggedInstrument)(
              'interaction.ember-action',
              payload,
              () => {
                actionName.apply(target, args);
              },
            );
            return;
          }

          payload.name = actionName;

          if (target.send) {
            (0, _instrumentation.flaggedInstrument)(
              'interaction.ember-action',
              payload,
              () => {
                target.send.apply(target, [actionName, ...args]);
              },
            );
          } else {
            true &&
              !(typeof target[actionName] === 'function') &&
              (0, _debug.assert)(
                `The action '${actionName}' did not exist on ${target}`,
                typeof target[actionName] === 'function',
              );
            (0, _instrumentation.flaggedInstrument)(
              'interaction.ember-action',
              payload,
              () => {
                target[actionName].apply(target, args);
              },
            );
          }
        });
        return shouldBubble;
      }
    }

    class ActionModifierManager {
      create(owner, element, _state, _ref19) {
        var { named, positional } = _ref19;
        var actionArgs = []; // The first two arguments are (1) `this` and (2) the action name.
        // Everything else is a param.

        for (var i = 2; i < positional.length; i++) {
          actionArgs.push(positional[i]);
        }

        var actionId = (0, _utils.uuid)();
        return new ActionState(
          element,
          owner,
          actionId,
          actionArgs,
          named,
          positional,
        );
      }

      getDebugName() {
        return 'action';
      }

      install(actionState) {
        var { element, actionId, positional } = actionState;
        var actionName;
        var actionNameRef;
        var implicitTarget;

        if (positional.length > 1) {
          implicitTarget = positional[0];
          actionNameRef = positional[1];

          if ((0, _reference.isInvokableRef)(actionNameRef)) {
            actionName = actionNameRef;
          } else {
            actionName = (0, _reference.valueForRef)(actionNameRef);

            if (
              true
              /* DEBUG */
            ) {
              var actionPath = actionNameRef.debugLabel;
              var actionPathParts = actionPath.split('.');
              var actionLabel = actionPathParts[actionPathParts.length - 1];
              true &&
                !(
                  typeof actionName === 'string' ||
                  typeof actionName === 'function'
                ) &&
                (0, _debug.assert)(
                  'You specified a quoteless path, `' +
                    actionPath +
                    '`, to the ' +
                    '{{action}} helper which did not resolve to an action name (a ' +
                    'string). Perhaps you meant to use a quoted actionName? (e.g. ' +
                    '{{action "' +
                    actionLabel +
                    '"}}).',
                  typeof actionName === 'string' ||
                    typeof actionName === 'function',
                );
            }
          }
        }

        actionState.actionName = actionName;
        actionState.implicitTarget = implicitTarget;
        this.ensureEventSetup(actionState);
        ActionHelper.registerAction(actionState);
        element.setAttribute('data-ember-action', '');
        element.setAttribute(`data-ember-action-${actionId}`, String(actionId));
      }

      update(actionState) {
        var { positional } = actionState;
        var actionNameRef = positional[1];
        true &&
          !actionNameRef &&
          (0, _debug.assert)(
            'Expected at least one positional arg',
            actionNameRef,
          );

        if (!(0, _reference.isInvokableRef)(actionNameRef)) {
          actionState.actionName = (0, _reference.valueForRef)(actionNameRef);
        }

        var newEventName = actionState.getEventName();

        if (newEventName !== actionState.eventName) {
          this.ensureEventSetup(actionState);
          actionState.eventName = actionState.getEventName();
        }
      }

      ensureEventSetup(actionState) {
        var dispatcher = actionState.owner.lookup('event_dispatcher:main');
        true &&
          !(dispatcher instanceof _views.EventDispatcher) &&
          (0, _debug.assert)(
            'Expected dispatcher to be an EventDispatcher',
            dispatcher instanceof _views.EventDispatcher,
          );
        dispatcher === null || dispatcher === void 0
          ? void 0
          : dispatcher.setupHandlerForEmberEvent(actionState.eventName);
      }

      getTag(actionState) {
        return actionState.tag;
      }

      getDestroyable(actionState) {
        return actionState;
      }
    }

    var ACTION_MODIFIER_MANAGER = new ActionModifierManager();
    var actionModifier = (0, _manager2.setInternalModifierManager)(
      ACTION_MODIFIER_MANAGER,
      {},
    );
    var CAPABILITIES$2 = {
      dynamicLayout: true,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: true,
      attributeHook: false,
      elementHook: false,
      createCaller: true,
      dynamicScope: true,
      updateHook: true,
      createInstance: true,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: true,
    };

    class MountManager {
      getDynamicLayout(state) {
        var templateFactory$$1 = state.engine.lookup('template:application');
        return (0, _util.unwrapTemplate)(
          templateFactory$$1(state.engine),
        ).asLayout();
      }

      getCapabilities() {
        return CAPABILITIES$2;
      }

      getOwner(state) {
        return state.engine;
      }

      create(owner, _ref20, args, env) {
        var { name } = _ref20;
        // TODO
        // mount is a runtime helper, this shouldn't use dynamic layout
        // we should resolve the engine app template in the helper
        // it also should use the owner that looked up the mount helper.
        true &&
          !(owner instanceof _instance.default) &&
          (0, _debug.assert)(
            'Expected owner to be an EngineInstance',
            owner instanceof _instance.default,
          );
        var engine = owner.buildChildEngineInstance(name);
        engine.boot();
        var applicationFactory = engine.factoryFor(`controller:application`);
        var controllerFactory =
          applicationFactory ||
          (0, _routing2.generateControllerFactory)(engine, 'application');
        var controller;
        var self;
        var bucket;
        var modelRef;

        if (args.named.has('model')) {
          modelRef = args.named.get('model');
        }

        if (modelRef === undefined) {
          controller = controllerFactory.create();
          self = (0, _reference.createConstRef)(controller, 'this');
          bucket = {
            engine,
            controller,
            self,
            modelRef,
          };
        } else {
          var model = (0, _reference.valueForRef)(modelRef);
          controller = controllerFactory.create({
            model,
          });
          self = (0, _reference.createConstRef)(controller, 'this');
          bucket = {
            engine,
            controller,
            self,
            modelRef,
          };
        }

        if (env.debugRenderTree) {
          (0, _destroyable.associateDestroyableChild)(engine, controller);
        }

        return bucket;
      }

      getDebugName(_ref21) {
        var { name } = _ref21;
        return name;
      }

      getDebugCustomRenderTree(definition, state, args, templateModuleName) {
        return [
          {
            bucket: state.engine,
            instance: state.engine,
            type: 'engine',
            name: definition.name,
            args,
          },
          {
            bucket: state.controller,
            instance: state.controller,
            type: 'route-template',
            name: 'application',
            args,
            template: templateModuleName,
          },
        ];
      }

      getSelf(_ref22) {
        var { self } = _ref22;
        return self;
      }

      getDestroyable(bucket) {
        return bucket.engine;
      }

      didCreate() {}

      didUpdate() {}

      didRenderLayout() {}

      didUpdateLayout() {}

      update(bucket) {
        var { controller, modelRef } = bucket;

        if (modelRef !== undefined) {
          controller.set('model', (0, _reference.valueForRef)(modelRef));
        }
      }
    }

    var MOUNT_MANAGER = new MountManager();

    class MountDefinition {
      constructor(resolvedName) {
        this.resolvedName = resolvedName; // handle is not used by this custom definition

        this.handle = -1;
        this.manager = MOUNT_MANAGER;
        this.compilable = null;
        this.capabilities = (0, _manager2.capabilityFlagsFrom)(CAPABILITIES$2);
        this.state = {
          name: resolvedName,
        };
      }
    }
    /**
    The `{{mount}}` helper lets you embed a routeless engine in a template.
    Mounting an engine will cause an instance to be booted and its `application`
    template to be rendered.
  
    For example, the following template mounts the `ember-chat` engine:
  
    ```handlebars
    {{! application.hbs }}
    {{mount "ember-chat"}}
    ```
  
    Additionally, you can also pass in a `model` argument that will be
    set as the engines model. This can be an existing object:
  
    ```
    <div>
      {{mount 'admin' model=userSettings}}
    </div>
    ```
  
    Or an inline `hash`, and you can even pass components:
  
    ```
    <div>
      <h1>Application template!</h1>
      {{mount 'admin' model=(hash
          title='Secret Admin'
          signInButton=(component 'sign-in-button')
      )}}
    </div>
    ```
  
    @method mount
    @param {String} name Name of the engine to mount.
    @param {Object} [model] Object that will be set as
                            the model of the engine.
    @for Ember.Templates.helpers
    @public
  */

    var mountHelper = internalHelper((args, owner) => {
      true &&
        !owner &&
        (0, _debug.assert)(
          '{{mount}} must be used within a component that has an owner',
          owner,
        );
      var nameRef = args.positional[0];
      var captured;
      true &&
        !(args.positional.length === 1) &&
        (0, _debug.assert)(
          'You can only pass a single positional argument to the {{mount}} helper, e.g. {{mount "chat-engine"}}.',
          args.positional.length === 1,
        );

      if (
        true &&
        /* DEBUG */
        args.named
      ) {
        var keys = Object.keys(args.named);
        var extra = keys.filter((k) => k !== 'model');
        true &&
          !(extra.length === 0) &&
          (0, _debug.assert)(
            'You can only pass a `model` argument to the {{mount}} helper, ' +
              'e.g. {{mount "profile-engine" model=this.profile}}. ' +
              `You passed ${extra.join(',')}.`,
            extra.length === 0,
          );
      }

      captured = (0, _runtime.createCapturedArgs)(
        args.named,
        _runtime.EMPTY_POSITIONAL,
      );
      var lastName, lastDef;
      return (0, _reference.createComputeRef)(() => {
        var name = (0, _reference.valueForRef)(nameRef);

        if (typeof name === 'string') {
          if (lastName === name) {
            return lastDef;
          }

          true &&
            !owner.hasRegistration(`engine:${name}`) &&
            (0, _debug.assert)(
              `You used \`{{mount '${name}'}}\`, but the engine '${name}' can not be found.`,
              owner.hasRegistration(`engine:${name}`),
            );
          lastName = name;
          lastDef = (0, _runtime.curry)(
            0,
            /* Component */
            new MountDefinition(name),
            owner,
            captured,
            true,
          );
          return lastDef;
        } else {
          true &&
            !(name === null || name === undefined) &&
            (0, _debug.assert)(
              `Invalid engine name '${name}' specified, engine name must be either a string, null or undefined.`,
              name === null || name === undefined,
            );
          lastDef = null;
          lastName = null;
          return null;
        }
      });
    });
    /**
    The `{{outlet}}` helper lets you specify where a child route will render in
    your template. An important use of the `{{outlet}}` helper is in your
    application's `application.hbs` file:
  
    ```app/templates/application.hbs
    <MyHeader />
  
    <div class="my-dynamic-content">
      <!-- this content will change based on the current route, which depends on the current URL -->
      {{outlet}}
    </div>
  
    <MyFooter />
    ```
  
    See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
    information on how your `route` interacts with the `{{outlet}}` helper.
    Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.
  
    @method outlet
    @for Ember.Templates.helpers
    @public
  */

    var outletHelper = internalHelper((_args, owner, scope) => {
      true &&
        !owner &&
        (0, _debug.assert)(
          'Expected owner to be present, {{outlet}} requires an owner',
          owner,
        );
      true &&
        !scope &&
        (0, _debug.assert)(
          'Expected dynamic scope to be present. You may have attempted to use the {{outlet}} keyword dynamically. This keyword cannot be used dynamically.',
          scope,
        );
      var outletRef = (0, _reference.createComputeRef)(() => {
        var state = (0, _reference.valueForRef)(scope.get('outletState'));
        var outlets = state !== undefined ? state.outlets : undefined;
        return outlets !== undefined ? outlets['main'] : undefined;
      });
      var lastState = null;
      var definition = null;
      return (0, _reference.createComputeRef)(() => {
        var _a, _b;

        var outletState = (0, _reference.valueForRef)(outletRef);
        var state = stateFor(outletRef, outletState);

        if (!validate(state, lastState)) {
          lastState = state;

          if (state !== null) {
            var named = (0, _util.dict)(); // Create a ref for the model

            var modelRef = (0, _reference.childRefFromParts)(outletRef, [
              'render',
              'model',
            ]); // Store the value of the model

            var model = (0, _reference.valueForRef)(modelRef); // Create a compute ref which we pass in as the `{{@model}}` reference
            // for the outlet. This ref will update and return the value of the
            // model _until_ the outlet itself changes. Once the outlet changes,
            // dynamic scope also changes, and so the original model ref would not
            // provide the correct updated value. So we stop updating and return
            // the _last_ model value for that outlet.

            named['model'] = (0, _reference.createComputeRef)(() => {
              if (lastState === state) {
                model = (0, _reference.valueForRef)(modelRef);
              }

              return model;
            });

            if (
              true
              /* DEBUG */
            ) {
              named['model'] = (0, _reference.createDebugAliasRef)(
                '@model',
                named['model'],
              );
            }

            var args = (0, _runtime.createCapturedArgs)(
              named,
              _runtime.EMPTY_POSITIONAL,
            );
            definition = (0, _runtime.curry)(
              0,
              /* Component */
              new OutletComponentDefinition(state),
              (_b =
                (_a =
                  outletState === null || outletState === void 0
                    ? void 0
                    : outletState.render) === null || _a === void 0
                  ? void 0
                  : _a.owner) !== null && _b !== void 0
                ? _b
                : owner,
              args,
              true,
            );
          } else {
            definition = null;
          }
        }

        return definition;
      });
    });

    function stateFor(ref, outlet) {
      if (outlet === undefined) return null;
      var render = outlet.render;
      if (render === undefined) return null;
      var template = render.template;
      if (template === undefined) return null; // this guard can be removed once @ember/test-helpers@1.6.0 has "aged out"
      // and is no longer considered supported

      if (isTemplateFactory(template)) {
        template = template(render.owner);
      }

      return {
        ref,
        name: render.name,
        outlet: render.outlet,
        template,
        controller: render.controller,
        model: render.model,
      };
    }

    function validate(state, lastState) {
      if (state === null) {
        return lastState === null;
      }

      if (lastState === null) {
        return false;
      }

      return (
        state.template === lastState.template &&
        state.controller === lastState.controller
      );
    }

    function instrumentationPayload$1(name) {
      return {
        object: `component:${name}`,
      };
    }

    function componentFor(name, owner) {
      var fullName = `component:${name}`;
      return owner.factoryFor(fullName) || null;
    }

    function layoutFor(name, owner, options) {
      var templateFullName = `template:components/${name}`;
      return owner.lookup(templateFullName, options) || null;
    }

    function lookupComponentPair(owner, name, options) {
      var component = componentFor(name, owner);

      if ((0, _owner2.isFactory)(component) && component.class) {
        var _layout = (0, _manager2.getComponentTemplate)(component.class);

        if (_layout !== undefined) {
          return {
            component,
            layout: _layout,
          };
        }
      }

      var layout = layoutFor(name, owner, options);

      if (component === null && layout === null) {
        return null;
      } else {
        return {
          component,
          layout,
        };
      }
    }

    var BUILTIN_KEYWORD_HELPERS = {
      action: action$1,
      mut,
      readonly,
      unbound,
      '-hash': _runtime.hash,
      '-each-in': eachIn,
      '-normalize-class': normalizeClassHelper,
      '-resolve': resolve,
      '-track-array': trackArray,
      '-mount': mountHelper,
      '-outlet': outletHelper,
      '-in-el-null': inElementNullCheckHelper,
    };
    var BUILTIN_HELPERS = Object.assign(
      Object.assign({}, BUILTIN_KEYWORD_HELPERS),
      {
        array: _runtime.array,
        concat: _runtime.concat,
        fn: _runtime.fn,
        get: _runtime.get,
        hash: _runtime.hash,
      },
    );

    if (
      true
      /* DEBUG */
    ) {
      BUILTIN_HELPERS[
        '-disallow-dynamic-resolution'
      ] = disallowDynamicResolution;
    } else {
      // Bug: this may be a quirk of our test setup?
      // In prod builds, this is a no-op helper and is unused in practice. We shouldn't need
      // to add it at all, but the current test build doesn't produce a "prod compiler", so
      // we ended up running the debug-build for the template compliler in prod tests. Once
      // that is fixed, this can be removed. For now, this allows the test to work and does
      // not really harm anything, since it's just a no-op pass-through helper and the bytes
      // has to be included anyway. In the future, perhaps we can avoid the latter by using
      // `import(...)`?
      BUILTIN_HELPERS[
        '-disallow-dynamic-resolution'
      ] = disallowDynamicResolution;
    }

    {
      BUILTIN_HELPERS['unique-id'] = uniqueId;
    }
    var BUILTIN_KEYWORD_MODIFIERS = {
      action: actionModifier,
    };
    var BUILTIN_MODIFIERS = Object.assign(
      Object.assign({}, BUILTIN_KEYWORD_MODIFIERS),
      {
        on: _runtime.on,
      },
    );
    var CLASSIC_HELPER_MANAGER_ASSOCIATED = new _util._WeakSet();

    class ResolverImpl {
      constructor() {
        this.componentDefinitionCache = new Map();
      }

      lookupPartial() {
        return null;
      }

      lookupHelper(name, owner) {
        true &&
          !!(
            BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`)
          ) &&
          (0, _debug.assert)(
            `You attempted to overwrite the built-in helper "${name}" which is not allowed. Please rename the helper.`,
            !(BUILTIN_HELPERS[name] && owner.hasRegistration(`helper:${name}`)),
          );
        var helper$$1 = BUILTIN_HELPERS[name];

        if (helper$$1 !== undefined) {
          return helper$$1;
        }

        var factory = owner.factoryFor(`helper:${name}`);

        if (factory === undefined) {
          return null;
        }

        var definition = factory.class;

        if (definition === undefined) {
          return null;
        }

        if (typeof definition === 'function' && isClassicHelper(definition)) {
          // For classic class based helpers, we need to pass the factoryFor result itself rather
          // than the raw value (`factoryFor(...).class`). This is because injections are already
          // bound in the factoryFor result, including type-based injections
          if (
            true
            /* DEBUG */
          ) {
            // In DEBUG we need to only set the associated value once, otherwise
            // we'll trigger an assertion
            if (!CLASSIC_HELPER_MANAGER_ASSOCIATED.has(factory)) {
              CLASSIC_HELPER_MANAGER_ASSOCIATED.add(factory);
              (0, _manager2.setInternalHelperManager)(
                CLASSIC_HELPER_MANAGER,
                factory,
              );
            }
          } else {
            (0, _manager2.setInternalHelperManager)(
              CLASSIC_HELPER_MANAGER,
              factory,
            );
          }

          return factory;
        }

        return definition;
      }

      lookupBuiltInHelper(name) {
        var _a;

        return (_a = BUILTIN_KEYWORD_HELPERS[name]) !== null && _a !== void 0
          ? _a
          : null;
      }

      lookupModifier(name, owner) {
        var builtin = BUILTIN_MODIFIERS[name];

        if (builtin !== undefined) {
          return builtin;
        }

        var modifier = owner.factoryFor(`modifier:${name}`);

        if (modifier === undefined) {
          return null;
        }

        return modifier.class || null;
      }

      lookupBuiltInModifier(name) {
        var _a;

        return (_a = BUILTIN_KEYWORD_MODIFIERS[name]) !== null && _a !== void 0
          ? _a
          : null;
      }

      lookupComponent(name, owner) {
        var pair = lookupComponentPair(owner, name);

        if (pair === null) {
          true &&
            !(name !== 'text-area') &&
            (0, _debug.assert)(
              'Could not find component `<TextArea />` (did you mean `<Textarea />`?)',
              name !== 'text-area',
            );
          return null;
        }

        var template = null;
        var key;

        if (pair.component === null) {
          key = template = pair.layout(owner);
        } else {
          key = pair.component;
        }

        var cachedComponentDefinition = this.componentDefinitionCache.get(key);

        if (cachedComponentDefinition !== undefined) {
          return cachedComponentDefinition;
        }

        if (template === null && pair.layout !== null) {
          template = pair.layout(owner);
        }

        var finalizer = (0, _instrumentation._instrumentStart)(
          'render.getComponentDefinition',
          instrumentationPayload$1,
          name,
        );
        var definition = null;

        if (pair.component === null) {
          if (_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
            definition = {
              state: (0, _runtime.templateOnlyComponent)(undefined, name),
              manager: _runtime.TEMPLATE_ONLY_COMPONENT_MANAGER,
              template,
            };
          } else {
            var factory = owner.factoryFor(
              (0, _container.privatize)`component:-default`,
            );
            var manager = (0, _manager2.getInternalComponentManager)(
              factory.class,
            );
            definition = {
              state: factory,
              manager,
              template,
            };
          }
        } else {
          true &&
            !(pair.component.class !== undefined) &&
            (0, _debug.assert)(
              `missing component class ${name}`,
              pair.component.class !== undefined,
            );
          var _factory2 = pair.component;
          var ComponentClass = _factory2.class;

          var _manager = (0, _manager2.getInternalComponentManager)(
            ComponentClass,
          );

          definition = {
            state: isCurlyManager(_manager) ? _factory2 : ComponentClass,
            manager: _manager,
            template,
          };
        }

        finalizer();
        this.componentDefinitionCache.set(key, definition);
        true &&
          !!(definition === null && name === 'text-area') &&
          (0, _debug.assert)(
            'Could not find component `<TextArea />` (did you mean `<Textarea />`?)',
            !(definition === null && name === 'text-area'),
          );
        return definition;
      }
    }

    var TOP_LEVEL_NAME = '-top-level';
    var TOP_LEVEL_OUTLET = 'main';

    class OutletView {
      constructor(_environment, owner, template, namespace) {
        this._environment = _environment;
        this.owner = owner;
        this.template = template;
        this.namespace = namespace;
        var outletStateTag = (0, _validator.createTag)();
        var outletState = {
          outlets: {
            main: undefined,
          },
          render: {
            owner: owner,
            into: undefined,
            outlet: TOP_LEVEL_OUTLET,
            name: TOP_LEVEL_NAME,
            controller: undefined,
            model: undefined,
            template,
          },
        };
        var ref = (this.ref = (0, _reference.createComputeRef)(
          () => {
            (0, _validator.consumeTag)(outletStateTag);
            return outletState;
          },
          (state) => {
            (0, _validator.dirtyTag)(outletStateTag);
            outletState.outlets['main'] = state;
          },
        ));
        this.state = {
          ref,
          name: TOP_LEVEL_NAME,
          outlet: TOP_LEVEL_OUTLET,
          template,
          controller: undefined,
          model: undefined,
        };
      }

      static extend(injections) {
        return class extends OutletView {
          static create(options) {
            if (options) {
              return super.create(Object.assign({}, injections, options));
            } else {
              return super.create(injections);
            }
          }
        };
      }

      static reopenClass(injections) {
        Object.assign(this, injections);
      }

      static create(options) {
        var {
          environment: _environment,
          application: namespace,
          template: templateFactory$$1,
        } = options;
        var owner = (0, _owner2.getOwner)(options);
        true &&
          !owner &&
          (0, _debug.assert)(
            'OutletView is unexpectedly missing an owner',
            owner,
          );
        var template = templateFactory$$1(owner);
        return new OutletView(_environment, owner, template, namespace);
      }

      appendTo(selector) {
        var target;

        if (this._environment.hasDOM) {
          target =
            typeof selector === 'string'
              ? document.querySelector(selector)
              : selector;
        } else {
          target = selector;
        }

        var renderer = this.owner.lookup('renderer:-dom'); // SAFETY: It's not clear that this cast is safe.
        // The types for appendOutletView may be incorrect or this is a potential bug.

        (0, _runloop.schedule)(
          'render',
          renderer,
          'appendOutletView',
          this,
          target,
        );
      }

      rerender() {
        /**/
      }

      setOutletState(state) {
        (0, _reference.updateRef)(this.ref, state);
      }

      destroy() {
        /**/
      }
    }

    _exports.OutletView = OutletView;

    class DynamicScope {
      constructor(view, outletState) {
        this.view = view;
        this.outletState = outletState;
      }

      child() {
        return new DynamicScope(this.view, this.outletState);
      }

      get(key) {
        true &&
          !(key === 'outletState') &&
          (0, _debug.assert)(
            `Using \`-get-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`,
            key === 'outletState',
          );
        return this.outletState;
      }

      set(key, value) {
        true &&
          !(key === 'outletState') &&
          (0, _debug.assert)(
            `Using \`-with-dynamic-scope\` is only supported for \`outletState\` (you used \`${key}\`).`,
            key === 'outletState',
          );
        this.outletState = value;
        return value;
      }
    }

    var NO_OP = () => {}; // This wrapper logic prevents us from rerendering in case of a hard failure
    // during render. This prevents infinite revalidation type loops from occuring,
    // and ensures that errors are not swallowed by subsequent follow on failures.

    function errorLoopTransaction(fn$$1) {
      if (
        true
        /* DEBUG */
      ) {
        return () => {
          var didError = true;

          try {
            fn$$1();
            didError = false;
          } finally {
            if (didError) {
              // Noop the function so that we won't keep calling it and causing
              // infinite looping failures;
              fn$$1 = () => {
                // eslint-disable-next-line no-console
                console.warn(
                  'Attempted to rerender, but the Ember application has had an unrecoverable error occur during render. You should reload the application after fixing the cause of the error.',
                );
              };
            }
          }
        };
      } else {
        return fn$$1;
      }
    }

    class RootState {
      constructor(
        root,
        runtime,
        context,
        owner,
        template,
        self,
        parentElement,
        dynamicScope,
        builder,
      ) {
        this.root = root;
        this.runtime = runtime;
        true &&
          !(template !== undefined) &&
          (0, _debug.assert)(
            `You cannot render \`${(0, _reference.valueForRef)(
              self,
            )}\` without a template.`,
            template !== undefined,
          );
        this.id =
          root instanceof OutletView
            ? (0, _utils.guidFor)(root)
            : (0, _views.getViewId)(root);
        this.result = undefined;
        this.destroyed = false;
        this.render = errorLoopTransaction(() => {
          var layout = (0, _util.unwrapTemplate)(template).asLayout();
          var iterator = (0, _runtime.renderMain)(
            runtime,
            context,
            owner,
            self,
            builder(runtime.env, {
              element: parentElement,
              nextSibling: null,
            }),
            layout,
            dynamicScope,
          );
          var result = (this.result = iterator.sync()); // override .render function after initial render

          this.render = errorLoopTransaction(() =>
            result.rerender({
              alwaysRevalidate: false,
            }),
          );
        });
      }

      isFor(possibleRoot) {
        return this.root === possibleRoot;
      }

      destroy() {
        var {
          result,
          runtime: { env },
        } = this;
        this.destroyed = true;
        this.runtime = undefined;
        this.root = null;
        this.result = undefined;
        this.render = undefined;

        if (result !== undefined) {
          /*
         Handles these scenarios:
                * When roots are removed during standard rendering process, a transaction exists already
           `.begin()` / `.commit()` are not needed.
         * When roots are being destroyed manually (`component.append(); component.destroy() case), no
           transaction exists already.
         * When roots are being destroyed during `Renderer#destroy`, no transaction exists
                */
          (0, _runtime.inTransaction)(env, () =>
            (0, _destroyable.destroy)(result),
          );
        }
      }
    }

    var renderers = [];

    function _resetRenderers() {
      renderers.length = 0;
    }

    function register(renderer) {
      true &&
        !(renderers.indexOf(renderer) === -1) &&
        (0, _debug.assert)(
          'Cannot register the same renderer twice',
          renderers.indexOf(renderer) === -1,
        );
      renderers.push(renderer);
    }

    function deregister(renderer) {
      var index = renderers.indexOf(renderer);
      true &&
        !(index !== -1) &&
        (0, _debug.assert)(
          'Cannot deregister unknown unregistered renderer',
          index !== -1,
        );
      renderers.splice(index, 1);
    }

    function loopBegin() {
      for (var renderer of renderers) {
        renderer._scheduleRevalidate();
      }
    }

    var renderSettledDeferred = null;
    /*
    Returns a promise which will resolve when rendering has settled. Settled in
    this context is defined as when all of the tags in use are "current" (e.g.
    `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
    the run loop, this essentially guarantees that all rendering is completed.
  
    @method renderSettled
    @returns {Promise<void>} a promise which fulfills when rendering has settled
  */

    function renderSettled() {
      if (renderSettledDeferred === null) {
        renderSettledDeferred = _rsvp.default.defer(); // if there is no current runloop, the promise created above will not have
        // a chance to resolve (because its resolved in backburner's "end" event)

        if (!(0, _runloop._getCurrentRunLoop)()) {
          // ensure a runloop has been kicked off
          _runloop._backburner.schedule('actions', null, NO_OP);
        }
      }

      return renderSettledDeferred.promise;
    }

    function resolveRenderPromise() {
      if (renderSettledDeferred !== null) {
        var _resolve = renderSettledDeferred.resolve;
        renderSettledDeferred = null;

        _runloop._backburner.join(null, _resolve);
      }
    }

    var loops = 0;

    function loopEnd() {
      for (var renderer of renderers) {
        if (!renderer._isValid()) {
          if (loops > _environment2.ENV._RERENDER_LOOP_LIMIT) {
            loops = 0; // TODO: do something better

            renderer.destroy();
            throw new Error('infinite rendering invalidation detected');
          }

          loops++;
          return _runloop._backburner.join(null, NO_OP);
        }
      }

      loops = 0;
      resolveRenderPromise();
    }

    _runloop._backburner.on('begin', loopBegin);

    _runloop._backburner.on('end', loopEnd);

    class Renderer {
      constructor(owner, document, env, rootTemplate, viewRegistry, builder) {
        if (builder === void 0) {
          builder = _runtime.clientBuilder;
        }

        this._inRenderTransaction = false;
        this._lastRevision = -1;
        this._destroyed = false;
        this._owner = owner;
        this._rootTemplate = rootTemplate(owner);
        this._viewRegistry =
          viewRegistry || owner.lookup('-view-registry:main');
        this._roots = [];
        this._removedRoots = [];
        this._builder = builder;
        this._isInteractive = env.isInteractive; // resolver is exposed for tests

        var resolver = (this._runtimeResolver = new ResolverImpl());
        var sharedArtifacts = (0, _program.artifacts)();
        this._context = (0, _opcodeCompiler.programCompilationContext)(
          sharedArtifacts,
          resolver,
        );
        var runtimeEnvironmentDelegate = new EmberEnvironmentDelegate(
          owner,
          env.isInteractive,
        );
        this._runtime = (0, _runtime.runtimeContext)(
          {
            appendOperations: env.hasDOM
              ? new _runtime.DOMTreeConstruction(document)
              : new _node.NodeDOMTreeConstruction(document),
            updateOperations: new _runtime.DOMChanges(document),
          },
          runtimeEnvironmentDelegate,
          sharedArtifacts,
          resolver,
        );
      }

      static create(props) {
        var { _viewRegistry } = props;
        var owner = (0, _owner2.getOwner)(props);
        true &&
          !owner &&
          (0, _debug.assert)(
            'Renderer is unexpectedly missing an owner',
            owner,
          );
        var document = owner.lookup('service:-document');
        var env = owner.lookup('-environment:main');
        var rootTemplate = owner.lookup(
          (0, _container.privatize)`template:-root`,
        );
        var builder = owner.lookup('service:-dom-builder');
        return new this(
          owner,
          document,
          env,
          rootTemplate,
          _viewRegistry,
          builder,
        );
      }

      get debugRenderTree() {
        var { debugRenderTree } = this._runtime.env;
        true &&
          !debugRenderTree &&
          (0, _debug.assert)(
            'Attempted to access the DebugRenderTree, but it did not exist. Is the Ember Inspector open?',
            debugRenderTree,
          );
        return debugRenderTree;
      } // renderer HOOKS

      appendOutletView(view, target) {
        var definition = createRootOutlet(view);

        this._appendDefinition(
          view,
          (0, _runtime.curry)(
            0,
            /* Component */
            definition,
            view.owner,
            null,
            true,
          ),
          target,
        );
      }

      appendTo(view, target) {
        var definition = new RootComponentDefinition(view);

        this._appendDefinition(
          view,
          (0, _runtime.curry)(
            0,
            /* Component */
            definition,
            this._owner,
            null,
            true,
          ),
          target,
        );
      }

      _appendDefinition(root, definition, target) {
        var self = (0, _reference.createConstRef)(definition, 'this');
        var dynamicScope = new DynamicScope(
          null,
          _reference.UNDEFINED_REFERENCE,
        );
        var rootState = new RootState(
          root,
          this._runtime,
          this._context,
          this._owner,
          this._rootTemplate,
          self,
          target,
          dynamicScope,
          this._builder,
        );

        this._renderRoot(rootState);
      }

      rerender() {
        this._scheduleRevalidate();
      }

      register(view) {
        var id = (0, _views.getViewId)(view);
        true &&
          !!this._viewRegistry[id] &&
          (0, _debug.assert)(
            'Attempted to register a view with an id already in use: ' + id,
            !this._viewRegistry[id],
          );
        this._viewRegistry[id] = view;
      }

      unregister(view) {
        delete this._viewRegistry[(0, _views.getViewId)(view)];
      }

      remove(view) {
        view._transitionTo('destroying');

        this.cleanupRootFor(view);

        if (this._isInteractive) {
          view.trigger('didDestroyElement');
        }
      }

      cleanupRootFor(view) {
        // no need to cleanup roots if we have already been destroyed
        if (this._destroyed) {
          return;
        }

        var roots = this._roots; // traverse in reverse so we can remove items
        // without mucking up the index

        var i = this._roots.length;

        while (i--) {
          var root = roots[i];
          true && !root && (0, _debug.assert)('has root', root);

          if (root.isFor(view)) {
            root.destroy();
            roots.splice(i, 1);
          }
        }
      }

      destroy() {
        if (this._destroyed) {
          return;
        }

        this._destroyed = true;

        this._clearAllRoots();
      }

      getElement(view) {
        if (this._isInteractive) {
          return (0, _views.getViewElement)(view);
        } else {
          throw new Error(
            'Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).',
          );
        }
      }

      getBounds(view) {
        var bounds = view[BOUNDS];
        true &&
          !bounds &&
          (0, _debug.assert)(
            'object passed to getBounds must have the BOUNDS symbol as a property',
            bounds,
          );
        var parentElement = bounds.parentElement();
        var firstNode = bounds.firstNode();
        var lastNode = bounds.lastNode();
        return {
          parentElement,
          firstNode,
          lastNode,
        };
      }

      createElement(tagName) {
        return this._runtime.env.getAppendOperations().createElement(tagName);
      }

      _renderRoot(root) {
        var { _roots: roots } = this;
        roots.push(root);

        if (roots.length === 1) {
          register(this);
        }

        this._renderRootsTransaction();
      }

      _renderRoots() {
        var {
          _roots: roots,
          _runtime: runtime,
          _removedRoots: removedRoots,
        } = this;
        var initialRootsLength;

        do {
          initialRootsLength = roots.length;
          (0, _runtime.inTransaction)(runtime.env, () => {
            // ensure that for the first iteration of the loop
            // each root is processed
            for (var i = 0; i < roots.length; i++) {
              var root = roots[i];
              true && !root && (0, _debug.assert)('has root', root);

              if (root.destroyed) {
                // add to the list of roots to be removed
                // they will be removed from `this._roots` later
                removedRoots.push(root); // skip over roots that have been marked as destroyed

                continue;
              } // when processing non-initial reflush loops,
              // do not process more roots than needed

              if (i >= initialRootsLength) {
                continue;
              }

              root.render();
            }

            this._lastRevision = (0, _validator.valueForTag)(
              _validator.CURRENT_TAG,
            );
          });
        } while (roots.length > initialRootsLength); // remove any roots that were destroyed during this transaction

        while (removedRoots.length) {
          var root = removedRoots.pop();
          var rootIndex = roots.indexOf(root);
          roots.splice(rootIndex, 1);
        }

        if (this._roots.length === 0) {
          deregister(this);
        }
      }

      _renderRootsTransaction() {
        if (this._inRenderTransaction) {
          // currently rendering roots, a new root was added and will
          // be processed by the existing _renderRoots invocation
          return;
        } // used to prevent calling _renderRoots again (see above)
        // while we are actively rendering roots

        this._inRenderTransaction = true;
        var completedWithoutError = false;

        try {
          this._renderRoots();

          completedWithoutError = true;
        } finally {
          if (!completedWithoutError) {
            this._lastRevision = (0, _validator.valueForTag)(
              _validator.CURRENT_TAG,
            );
          }

          this._inRenderTransaction = false;
        }
      }

      _clearAllRoots() {
        var roots = this._roots;

        for (var root of roots) {
          root.destroy();
        }

        this._removedRoots.length = 0;
        this._roots = []; // if roots were present before destroying
        // deregister this renderer instance

        if (roots.length) {
          deregister(this);
        }
      }

      _scheduleRevalidate() {
        _runloop._backburner.scheduleOnce('render', this, this._revalidate);
      }

      _isValid() {
        return (
          this._destroyed ||
          this._roots.length === 0 ||
          (0, _validator.validateTag)(
            _validator.CURRENT_TAG,
            this._lastRevision,
          )
        );
      }

      _revalidate() {
        if (this._isValid()) {
          return;
        }

        this._renderRootsTransaction();
      }
    }

    _exports.Renderer = Renderer;
    var TEMPLATES = {};

    function setTemplates(templates) {
      TEMPLATES = templates;
    }

    function getTemplates() {
      return TEMPLATES;
    }

    function getTemplate(name) {
      if (Object.prototype.hasOwnProperty.call(TEMPLATES, name)) {
        return TEMPLATES[name];
      }
    }

    function hasTemplate(name) {
      return Object.prototype.hasOwnProperty.call(TEMPLATES, name);
    }

    function setTemplate(name, template) {
      return (TEMPLATES[name] = template);
    }

    var OutletTemplate = (0, _opcodeCompiler.templateFactory)({
      id: '3jT+eJpe',
      block:
        '[[[46,[28,[37,1],null,null],null,null,null]],[],false,["component","-outlet"]]',
      moduleName: 'packages/@ember/-internals/glimmer/lib/templates/outlet.hbs',
      isStrictMode: false,
    });

    function setupApplicationRegistry(registry) {
      // because we are using injections we can't use instantiate false
      // we need to use bind() to copy the function so factory for
      // association won't leak
      registry.register('service:-dom-builder', {
        create(props) {
          var owner = (0, _owner2.getOwner)(props);
          true &&
            !owner &&
            (0, _debug.assert)(
              'DomBuilderService is unexpectedly missing an owner',
              owner,
            );
          var env = owner.lookup('-environment:main');

          switch (env._renderMode) {
            case 'serialize':
              return _node.serializeBuilder.bind(null);

            case 'rehydrate':
              return _runtime.rehydrationBuilder.bind(null);

            default:
              return _runtime.clientBuilder.bind(null);
          }
        },
      });
      registry.register(
        (0, _container.privatize)`template:-root`,
        RootTemplate,
      );
      registry.register('renderer:-dom', Renderer);
    }

    function setupEngineRegistry(registry) {
      registry.optionsForType('template', {
        instantiate: false,
      });
      registry.register('view:-outlet', OutletView);
      registry.register('template:-outlet', OutletTemplate);
      registry.optionsForType('helper', {
        instantiate: false,
      });
      registry.register('component:input', Input$1);
      registry.register('component:link-to', LinkTo$1);
      registry.register('component:textarea', Textarea$1);

      if (!_environment2.ENV._TEMPLATE_ONLY_GLIMMER_COMPONENTS) {
        registry.register(
          (0, _container.privatize)`component:-default`,
          Component,
        );
      }
    }
    /**
     Associate a class with a component manager (an object that is responsible for
     coordinating the lifecycle events that occurs when invoking, rendering and
     re-rendering a component).
  
     @method setComponentManager
     @param {Function} factory a function to create the owner for an object
     @param {Object} obj the object to associate with the componetn manager
     @return {Object} the same object passed in
     @public
    */

    function setComponentManager$1(manager, obj) {
      return (0, _manager2.setComponentManager)(manager, obj);
    }

    var componentCapabilities$1 = _manager2.componentCapabilities;
    _exports.componentCapabilities = componentCapabilities$1;
    var modifierCapabilities$1 = _manager2.modifierCapabilities;
    /**
    [Glimmer](https://github.com/tildeio/glimmer) is a templating engine used by Ember.js that is compatible with a subset of the [Handlebars](http://handlebarsjs.com/) syntax.
  
    ### Showing a property
  
    Templates manage the flow of an application's UI, and display state (through
    the DOM) to a user. For example, given a component with the property "name",
    that component's template can use the name in several ways:
  
    ```app/components/person-profile.js
    import Component from '@ember/component';
  
    export default Component.extend({
      name: 'Jill'
    });
    ```
  
    ```app/components/person-profile.hbs
    {{this.name}}
    <div>{{this.name}}</div>
    <span data-name={{this.name}}></span>
    ```
  
    Any time the "name" property on the component changes, the DOM will be
    updated.
  
    Properties can be chained as well:
  
    ```handlebars
    {{@aUserModel.name}}
    <div>{{@listOfUsers.firstObject.name}}</div>
    ```
  
    ### Using Ember helpers
  
    When content is passed in mustaches `{{}}`, Ember will first try to find a helper
    or component with that name. For example, the `if` helper:
  
    ```app/components/person-profile.hbs
    {{if this.name "I have a name" "I have no name"}}
    <span data-has-name={{if this.name true}}></span>
    ```
  
    The returned value is placed where the `{{}}` is called. The above style is
    called "inline". A second style of helper usage is called "block". For example:
  
    ```handlebars
    {{#if this.name}}
      I have a name
    {{else}}
      I have no name
    {{/if}}
    ```
  
    The block form of helpers allows you to control how the UI is created based
    on the values of properties.
    A third form of helper is called "nested". For example here the concat
    helper will add " Doe" to a displayed name if the person has no last name:
  
    ```handlebars
    <span data-name={{concat this.firstName (
      if this.lastName (concat " " this.lastName) "Doe"
    )}}></span>
    ```
  
    Ember's built-in helpers are described under the [Ember.Templates.helpers](/ember/release/classes/Ember.Templates.helpers)
    namespace. Documentation on creating custom helpers can be found under
    [helper](/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper) (or
    under [Helper](/ember/release/classes/Helper) if a helper requires access to
    dependency injection).
  
    ### Invoking a Component
  
    Ember components represent state to the UI of an application. Further
    reading on components can be found under [Component](/ember/release/classes/Component).
  
    @module @ember/component
    @main @ember/component
    @public
   */

    _exports.modifierCapabilities = modifierCapabilities$1;
  });
  define('@ember/-internals/meta/index', [
    'exports',
    '@ember/-internals/meta/lib/meta',
  ], function (_exports, _meta) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'Meta', {
      enumerable: true,
      get: function () {
        return _meta.Meta;
      },
    });
    Object.defineProperty(_exports, 'UNDEFINED', {
      enumerable: true,
      get: function () {
        return _meta.UNDEFINED;
      },
    });
    Object.defineProperty(_exports, 'counters', {
      enumerable: true,
      get: function () {
        return _meta.counters;
      },
    });
    Object.defineProperty(_exports, 'meta', {
      enumerable: true,
      get: function () {
        return _meta.meta;
      },
    });
    Object.defineProperty(_exports, 'peekMeta', {
      enumerable: true,
      get: function () {
        return _meta.peekMeta;
      },
    });
    Object.defineProperty(_exports, 'setMeta', {
      enumerable: true,
      get: function () {
        return _meta.setMeta;
      },
    });
  });
  define('@ember/-internals/meta/lib/meta', [
    'exports',
    '@ember/-internals/utils',
    '@ember/debug',
    '@glimmer/destroyable',
  ], function (_exports, _utils, _debug, _destroyable) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.meta = _exports.counters = _exports.UNDEFINED = _exports.Meta = void 0;
    _exports.peekMeta = peekMeta;
    _exports.setMeta = setMeta;
    var objectPrototype = Object.prototype;
    var counters;
    _exports.counters = counters;

    if (
      true
      /* DEBUG */
    ) {
      _exports.counters = counters = {
        peekCalls: 0,
        peekPrototypeWalks: 0,
        setCalls: 0,
        deleteCalls: 0,
        metaCalls: 0,
        metaInstantiated: 0,
        matchingListenersCalls: 0,
        observerEventsCalls: 0,
        addToListenersCalls: 0,
        removeFromListenersCalls: 0,
        removeAllListenersCalls: 0,
        listenersInherited: 0,
        listenersFlattened: 0,
        parentListenersUsed: 0,
        flattenedListenersCalls: 0,
        reopensAfterFlatten: 0,
        readableLazyChainsCalls: 0,
        writableLazyChainsCalls: 0,
      };
    }
    /**
  @module ember
  */

    var UNDEFINED = (0, _utils.symbol)('undefined');
    _exports.UNDEFINED = UNDEFINED;
    var currentListenerVersion = 1;

    class Meta {
      // DEBUG

      /** @internal */
      constructor(obj) {
        /** @internal */
        this._listenersVersion = 1;
        /** @internal */

        this._inheritedEnd = -1;
        /** @internal */

        this._flattenedVersion = 0;

        if (
          true
          /* DEBUG */
        ) {
          counters.metaInstantiated++;
        }

        this._parent = undefined;
        this._descriptors = undefined;
        this._mixins = undefined;
        this._lazyChains = undefined;
        this._values = undefined;
        this._revisions = undefined; // initial value for all flags right now is false
        // see FLAGS const for detailed list of flags used

        this._isInit = false; // used only internally

        this.source = obj;
        this.proto =
          obj.constructor === undefined ? undefined : obj.constructor.prototype;
        this._listeners = undefined;
      }
      /** @internal */

      get parent() {
        var parent = this._parent;

        if (parent === undefined) {
          var proto = getPrototypeOf(this.source);
          this._parent = parent =
            proto === null || proto === objectPrototype ? null : meta(proto);
        }

        return parent;
      }

      setInitializing() {
        this._isInit = true;
      }
      /** @internal */

      unsetInitializing() {
        this._isInit = false;
      }
      /** @internal */

      isInitializing() {
        return this._isInit;
      }
      /** @internal */

      isPrototypeMeta(obj) {
        return this.proto === this.source && this.source === obj;
      }
      /** @internal */

      _getOrCreateOwnMap(key) {
        return this[key] || (this[key] = Object.create(null));
      }
      /** @internal */

      _getOrCreateOwnSet(key) {
        return this[key] || (this[key] = new Set());
      }
      /** @internal */

      _findInheritedMap(key, subkey) {
        var pointer = this;

        while (pointer !== null) {
          var map = pointer[key];

          if (map !== undefined) {
            var value = map.get(subkey);

            if (value !== undefined) {
              return value;
            }
          }

          pointer = pointer.parent;
        }
      }
      /** @internal */

      _hasInInheritedSet(key, value) {
        var pointer = this;

        while (pointer !== null) {
          var set = pointer[key];

          if (set !== undefined && set.has(value)) {
            return true;
          }

          pointer = pointer.parent;
        }

        return false;
      }
      /** @internal */

      valueFor(key) {
        var values = this._values;
        return values !== undefined ? values[key] : undefined;
      }
      /** @internal */

      setValueFor(key, value) {
        var values = this._getOrCreateOwnMap('_values');

        values[key] = value;
      }
      /** @internal */

      revisionFor(key) {
        var revisions = this._revisions;
        return revisions !== undefined ? revisions[key] : undefined;
      }
      /** @internal */

      setRevisionFor(key, revision) {
        var revisions = this._getOrCreateOwnMap('_revisions');

        revisions[key] = revision;
      }
      /** @internal */

      writableLazyChainsFor(key) {
        if (
          true
          /* DEBUG */
        ) {
          counters.writableLazyChainsCalls++;
        }

        var lazyChains = this._getOrCreateOwnMap('_lazyChains');

        var chains = lazyChains[key];

        if (chains === undefined) {
          chains = lazyChains[key] = [];
        }

        return chains;
      }
      /** @internal */

      readableLazyChainsFor(key) {
        if (
          true
          /* DEBUG */
        ) {
          counters.readableLazyChainsCalls++;
        }

        var lazyChains = this._lazyChains;

        if (lazyChains !== undefined) {
          return lazyChains[key];
        }

        return undefined;
      }
      /** @internal */

      addMixin(mixin) {
        true &&
          !!(0, _destroyable.isDestroyed)(this.source) &&
          (0, _debug.assert)(
            (0, _destroyable.isDestroyed)(this.source)
              ? `Cannot add mixins of \`${(0, _utils.toString)(
                  mixin,
                )}\` on \`${(0, _utils.toString)(
                  this.source,
                )}\` call addMixin after it has been destroyed.`
              : '',
            !(0, _destroyable.isDestroyed)(this.source),
          );

        var set = this._getOrCreateOwnSet('_mixins');

        set.add(mixin);
      }
      /** @internal */

      hasMixin(mixin) {
        return this._hasInInheritedSet('_mixins', mixin);
      }
      /** @internal */

      forEachMixins(fn) {
        var pointer = this;
        var seen;

        while (pointer !== null) {
          var set = pointer._mixins;

          if (set !== undefined) {
            seen = seen === undefined ? new Set() : seen; // TODO cleanup typing here

            set.forEach((mixin) => {
              if (!seen.has(mixin)) {
                seen.add(mixin);
                fn(mixin);
              }
            });
          }

          pointer = pointer.parent;
        }
      }
      /** @internal */

      writeDescriptors(subkey, value) {
        true &&
          !!(0, _destroyable.isDestroyed)(this.source) &&
          (0, _debug.assert)(
            (0, _destroyable.isDestroyed)(this.source)
              ? `Cannot update descriptors for \`${subkey}\` on \`${(0,
                _utils.toString)(this.source)}\` after it has been destroyed.`
              : '',
            !(0, _destroyable.isDestroyed)(this.source),
          );
        var map = this._descriptors || (this._descriptors = new Map());
        map.set(subkey, value);
      }
      /** @internal */

      peekDescriptors(subkey) {
        var possibleDesc = this._findInheritedMap('_descriptors', subkey);

        return possibleDesc === UNDEFINED ? undefined : possibleDesc;
      }
      /** @internal */

      removeDescriptors(subkey) {
        this.writeDescriptors(subkey, UNDEFINED);
      }
      /** @internal */

      forEachDescriptors(fn) {
        var pointer = this;
        var seen;

        while (pointer !== null) {
          var map = pointer._descriptors;

          if (map !== undefined) {
            seen = seen === undefined ? new Set() : seen;
            map.forEach((value, key) => {
              if (!seen.has(key)) {
                seen.add(key);

                if (value !== UNDEFINED) {
                  fn(key, value);
                }
              }
            });
          }

          pointer = pointer.parent;
        }
      }
      /** @internal */

      addToListeners(eventName, target, method, once, sync) {
        if (
          true
          /* DEBUG */
        ) {
          counters.addToListenersCalls++;
        }

        this.pushListener(
          eventName,
          target,
          method,
          once ? 1 : /* ONCE */ 0,
          /* ADD */
          sync,
        );
      }
      /** @internal */

      removeFromListeners(eventName, target, method) {
        if (
          true
          /* DEBUG */
        ) {
          counters.removeFromListenersCalls++;
        }

        this.pushListener(
          eventName,
          target,
          method,
          2,
          /* REMOVE */
        );
      }

      pushListener(event, target, method, kind, sync) {
        if (sync === void 0) {
          sync = false;
        }

        var listeners = this.writableListeners();
        var i = indexOfListener(listeners, event, target, method); // remove if found listener was inherited

        if (i !== -1 && i < this._inheritedEnd) {
          listeners.splice(i, 1);
          this._inheritedEnd--;
          i = -1;
        } // if not found, push. Note that we must always push if a listener is not
        // found, even in the case of a function listener remove, because we may be
        // attempting to add or remove listeners _before_ flattening has occurred.

        if (i === -1) {
          true &&
            !!(
              this.isPrototypeMeta(this.source) && typeof method === 'function'
            ) &&
            (0, _debug.assert)(
              'You cannot add function listeners to prototypes. Convert the listener to a string listener, or add it to the instance instead.',
              !(
                this.isPrototypeMeta(this.source) &&
                typeof method === 'function'
              ),
            );
          true &&
            !!(
              (
                !this.isPrototypeMeta(this.source) &&
                typeof method === 'function' &&
                kind === 2
              )
              /* REMOVE */
            ) &&
            (0, _debug.assert)(
              'You attempted to remove a function listener which did not exist on the instance, which means you may have attempted to remove it before it was added.',
              !(
                !this.isPrototypeMeta(this.source) &&
                typeof method === 'function' &&
                kind === 2
              ),
            );
          listeners.push({
            event,
            target,
            method,
            kind,
            sync,
          });
        } else {
          var listener = listeners[i];
          true && !listener && (0, _debug.assert)('has listener', listener); // If the listener is our own listener and we are trying to remove it, we
          // want to splice it out entirely so we don't hold onto a reference.

          if (
            kind === 2 &&
            /* REMOVE */
            listener.kind !== 2
            /* REMOVE */
          ) {
            listeners.splice(i, 1);
          } else {
            true &&
              !!(
                listener.kind === 0 &&
                /* ADD */
                kind === 0 &&
                /* ADD */
                listener.sync !== sync
              ) &&
              (0, _debug.assert)(
                `You attempted to add an observer for the same method on '${
                  event.split(':')[0]
                }' twice to ${target} as both sync and async. Observers must be either sync or async, they cannot be both. This is likely a mistake, you should either remove the code that added the observer a second time, or update it to always be sync or async. The method was ${String(
                  method,
                )}.`,
                !(listener.kind === 0 && kind === 0 && listener.sync !== sync),
              ); // update own listener

            listener.kind = kind;
            listener.sync = sync;
          }
        }
      }

      writableListeners() {
        // Check if we need to invalidate and reflatten. We need to do this if we
        // have already flattened (flattened version is the current version) and
        // we are either writing to a prototype meta OR we have never inherited, and
        // may have cached the parent's listeners.
        if (
          this._flattenedVersion === currentListenerVersion &&
          (this.source === this.proto || this._inheritedEnd === -1)
        ) {
          if (
            true
            /* DEBUG */
          ) {
            counters.reopensAfterFlatten++;
          }

          currentListenerVersion++;
        } // Inherited end has not been set, then we have never created our own
        // listeners, but may have cached the parent's

        if (this._inheritedEnd === -1) {
          this._inheritedEnd = 0;
          this._listeners = [];
        }

        return this._listeners;
      }
      /**
      Flattening is based on a global revision counter. If the revision has
      bumped it means that somewhere in a class inheritance chain something has
      changed, so we need to reflatten everything. This can only happen if:
         1. A meta has been flattened (listener has been called)
      2. The meta is a prototype meta with children who have inherited its
         listeners
      3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
         This is a very rare occurrence, so while the counter is global it shouldn't
      be updated very often in practice.
    */

      flattenedListeners() {
        if (
          true
          /* DEBUG */
        ) {
          counters.flattenedListenersCalls++;
        }

        if (this._flattenedVersion < currentListenerVersion) {
          if (
            true
            /* DEBUG */
          ) {
            counters.listenersFlattened++;
          }

          var parent = this.parent;

          if (parent !== null) {
            // compute
            var parentListeners = parent.flattenedListeners();

            if (parentListeners !== undefined) {
              if (this._listeners === undefined) {
                // If this instance doesn't have any of its own listeners (writableListeners
                // has never been called) then we don't need to do any flattening, return
                // the parent's listeners instead.
                if (
                  true
                  /* DEBUG */
                ) {
                  counters.parentListenersUsed++;
                }

                this._listeners = parentListeners;
              } else {
                var listeners = this._listeners;

                if (this._inheritedEnd > 0) {
                  listeners.splice(0, this._inheritedEnd);
                  this._inheritedEnd = 0;
                }

                for (var listener of parentListeners) {
                  var index = indexOfListener(
                    listeners,
                    listener.event,
                    listener.target,
                    listener.method,
                  );

                  if (index === -1) {
                    if (
                      true
                      /* DEBUG */
                    ) {
                      counters.listenersInherited++;
                    }

                    listeners.unshift(listener);
                    this._inheritedEnd++;
                  }
                }
              }
            }
          }

          this._flattenedVersion = currentListenerVersion;
        }

        return this._listeners;
      }
      /** @internal */

      matchingListeners(eventName) {
        var listeners = this.flattenedListeners();
        var result;

        if (
          true
          /* DEBUG */
        ) {
          counters.matchingListenersCalls++;
        }

        if (listeners !== undefined) {
          for (var listener of listeners) {
            // REMOVE listeners are placeholders that tell us not to
            // inherit, so they never match. Only ADD and ONCE can match.
            if (
              listener.event === eventName &&
              (listener.kind === 0 ||
                /* ADD */
                listener.kind === 1)
              /* ONCE */
            ) {
              if (result === undefined) {
                // we create this array only after we've found a listener that
                // matches to avoid allocations when no matches are found.
                result = [];
              }

              result.push(
                listener.target,
                listener.method,
                listener.kind === 1,
                /* ONCE */
              );
            }
          }
        }

        return result;
      }
      /** @internal */

      observerEvents() {
        var listeners = this.flattenedListeners();
        var result;

        if (
          true
          /* DEBUG */
        ) {
          counters.observerEventsCalls++;
        }

        if (listeners !== undefined) {
          for (var listener of listeners) {
            // REMOVE listeners are placeholders that tell us not to
            // inherit, so they never match. Only ADD and ONCE can match.
            if (
              (listener.kind === 0 ||
                /* ADD */
                listener.kind === 1) &&
              /* ONCE */
              listener.event.indexOf(':change') !== -1
            ) {
              if (result === undefined) {
                // we create this array only after we've found a listener that
                // matches to avoid allocations when no matches are found.
                result = [];
              }

              result.push(listener);
            }
          }
        }

        return result;
      }
    }

    _exports.Meta = Meta;
    var getPrototypeOf = Object.getPrototypeOf;
    var metaStore = new WeakMap();

    function setMeta(obj, meta) {
      true &&
        !(obj !== null) &&
        (0, _debug.assert)('Cannot call `setMeta` on null', obj !== null);
      true &&
        !(obj !== undefined) &&
        (0, _debug.assert)(
          'Cannot call `setMeta` on undefined',
          obj !== undefined,
        );
      true &&
        !(typeof obj === 'object' || typeof obj === 'function') &&
        (0, _debug.assert)(
          `Cannot call \`setMeta\` on ${typeof obj}`,
          typeof obj === 'object' || typeof obj === 'function',
        );

      if (
        true
        /* DEBUG */
      ) {
        counters.setCalls++;
      }

      metaStore.set(obj, meta);
    }

    function peekMeta(obj) {
      true &&
        !(obj !== null) &&
        (0, _debug.assert)('Cannot call `peekMeta` on null', obj !== null);
      true &&
        !(obj !== undefined) &&
        (0, _debug.assert)(
          'Cannot call `peekMeta` on undefined',
          obj !== undefined,
        );
      true &&
        !(typeof obj === 'object' || typeof obj === 'function') &&
        (0, _debug.assert)(
          `Cannot call \`peekMeta\` on ${typeof obj}`,
          typeof obj === 'object' || typeof obj === 'function',
        );

      if (
        true
        /* DEBUG */
      ) {
        counters.peekCalls++;
      }

      var meta = metaStore.get(obj);

      if (meta !== undefined) {
        return meta;
      }

      var pointer = getPrototypeOf(obj);

      while (pointer !== null) {
        if (
          true
          /* DEBUG */
        ) {
          counters.peekPrototypeWalks++;
        }

        meta = metaStore.get(pointer);

        if (meta !== undefined) {
          if (meta.proto !== pointer) {
            // The meta was a prototype meta which was not marked as initializing.
            // This can happen when a prototype chain was created manually via
            // Object.create() and the source object does not have a constructor.
            meta.proto = pointer;
          }

          return meta;
        }

        pointer = getPrototypeOf(pointer);
      }

      return null;
    }
    /**
    Retrieves the meta hash for an object. If `writable` is true ensures the
    hash is writable for this object as well.
  
    The meta object contains information about computed property descriptors as
    well as any watched properties and other information. You generally will
    not access this information directly but instead work with higher level
    methods that manipulate this hash indirectly.
  
    @method meta
    @for Ember
    @private
  
    @param {Object} obj The object to retrieve meta for
    @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
      the meta hash, allowing the method to avoid making an unnecessary copy.
    @return {Object} the meta hash for an object
  */

    var meta = function meta(obj) {
      true &&
        !(obj !== null) &&
        (0, _debug.assert)('Cannot call `meta` on null', obj !== null);
      true &&
        !(obj !== undefined) &&
        (0, _debug.assert)(
          'Cannot call `meta` on undefined',
          obj !== undefined,
        );
      true &&
        !(typeof obj === 'object' || typeof obj === 'function') &&
        (0, _debug.assert)(
          `Cannot call \`meta\` on ${typeof obj}`,
          typeof obj === 'object' || typeof obj === 'function',
        );

      if (
        true
        /* DEBUG */
      ) {
        counters.metaCalls++;
      }

      var maybeMeta = peekMeta(obj); // remove this code, in-favor of explicit parent

      if (maybeMeta !== null && maybeMeta.source === obj) {
        return maybeMeta;
      }

      var newMeta = new Meta(obj);
      setMeta(obj, newMeta);
      return newMeta;
    };

    _exports.meta = meta;

    if (
      true
      /* DEBUG */
    ) {
      meta._counters = counters;
    }

    function indexOfListener(listeners, event, target, method) {
      for (var i = listeners.length - 1; i >= 0; i--) {
        var listener = listeners[i];
        true && !listener && (0, _debug.assert)('has listener', listener);

        if (
          listener.event === event &&
          listener.target === target &&
          listener.method === method
        ) {
          return i;
        }
      }

      return -1;
    }
  });
  define('@ember/-internals/metal/index', [
    'exports',
    '@ember/-internals/meta',
    '@ember/-internals/utils',
    '@ember/debug',
    '@ember/-internals/environment',
    '@ember/runloop',
    '@glimmer/destroyable',
    '@glimmer/validator',
    '@glimmer/manager',
    '@glimmer/util',
    '@ember/error',
    'ember/version',
    '@ember/-internals/container',
    '@ember/-internals/owner',
  ], function (
    _exports,
    _meta2,
    _utils,
    _debug,
    _environment,
    _runloop,
    _destroyable,
    _validator,
    _manager,
    _util,
    _error,
    _version,
    _container,
    _owner,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.TrackedDescriptor = _exports.SYNC_OBSERVERS = _exports.PROXY_CONTENT = _exports.PROPERTY_DID_CHANGE = _exports.NAMESPACES_BY_ID = _exports.NAMESPACES = _exports.Mixin = _exports.Libraries = _exports.DEBUG_INJECTION_FUNCTIONS = _exports.ComputedProperty = _exports.ASYNC_OBSERVERS = void 0;
    _exports._getPath = _getPath;
    _exports._getProp = _getProp;
    _exports._setProp = _setProp;
    _exports.activateObserver = activateObserver;
    _exports.addArrayObserver = addArrayObserver;
    _exports.addListener = addListener;
    _exports.addNamespace = addNamespace;
    _exports.addObserver = addObserver;
    _exports.alias = alias;
    _exports.applyMixin = applyMixin;
    _exports.arrayContentDidChange = arrayContentDidChange;
    _exports.arrayContentWillChange = arrayContentWillChange;
    _exports.autoComputed = autoComputed;
    _exports.beginPropertyChanges = beginPropertyChanges;
    _exports.cached = void 0;
    _exports.changeProperties = changeProperties;
    _exports.computed = computed;
    Object.defineProperty(_exports, 'createCache', {
      enumerable: true,
      get: function () {
        return _validator.createCache;
      },
    });
    _exports.defineProperty = defineProperty;
    _exports.deprecateProperty = deprecateProperty;
    _exports.descriptorForDecorator = descriptorForDecorator;
    _exports.descriptorForProperty = descriptorForProperty;
    _exports.eachProxyArrayDidChange = eachProxyArrayDidChange;
    _exports.eachProxyArrayWillChange = eachProxyArrayWillChange;
    _exports.endPropertyChanges = endPropertyChanges;
    _exports.expandProperties = expandProperties;
    _exports.findNamespace = findNamespace;
    _exports.findNamespaces = findNamespaces;
    _exports.flushAsyncObservers = flushAsyncObservers;
    _exports.get = get;
    _exports.getCachedValueFor = getCachedValueFor;
    _exports.getProperties = getProperties;
    Object.defineProperty(_exports, 'getValue', {
      enumerable: true,
      get: function () {
        return _validator.getValue;
      },
    });
    _exports.hasListeners = hasListeners;
    _exports.hasUnknownProperty = hasUnknownProperty;
    _exports.inject = inject;
    _exports.isBlank = isBlank;
    _exports.isClassicDecorator = isClassicDecorator;
    _exports.isComputed = isComputed;
    Object.defineProperty(_exports, 'isConst', {
      enumerable: true,
      get: function () {
        return _validator.isConst;
      },
    });
    _exports.isElementDescriptor = isElementDescriptor;
    _exports.isEmpty = isEmpty;
    _exports.isNamespaceSearchDisabled = isSearchDisabled;
    _exports.isNone = isNone;
    _exports.isPresent = isPresent;
    _exports.libraries = void 0;
    _exports.markObjectAsDirty = markObjectAsDirty;
    _exports.mixin = mixin;
    _exports.nativeDescDecorator = nativeDescDecorator;
    _exports.notifyPropertyChange = notifyPropertyChange;
    _exports.objectAt = objectAt;
    _exports.observer = observer;
    _exports.on = on;
    _exports.processAllNamespaces = processAllNamespaces;
    _exports.processNamespace = processNamespace;
    _exports.removeArrayObserver = removeArrayObserver;
    _exports.removeListener = removeListener;
    _exports.removeNamespace = removeNamespace;
    _exports.removeObserver = removeObserver;
    _exports.replace = replace;
    _exports.replaceInNativeArray = replaceInNativeArray;
    _exports.sendEvent = sendEvent;
    _exports.set = set;
    _exports.setClassicDecorator = setClassicDecorator;
    _exports.setNamespaceSearchDisabled = setSearchDisabled;
    _exports.setProperties = setProperties;
    _exports.tagForObject = tagForObject;
    _exports.tagForProperty = tagForProperty;
    _exports.tracked = tracked;
    _exports.trySet = trySet;

    /*
    The event system uses a series of nested hashes to store listeners on an
    object. When a listener is registered, or when an event arrives, these
    hashes are consulted to determine which target and action pair to invoke.
  
    The hashes are stored in the object's meta hash, and look like this:
  
        // Object's meta hash
        {
          listeners: {       // variable name: `listenerSet`
            "foo:change": [ // variable name: `actions`
              target, method, once
            ]
          }
        }
  
  */

    /**
    Add an event listener
  
    @method addListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @param {Boolean} once A flag whether a function should only be called once
    @public
  */
    function addListener(obj, eventName, target, method, once, sync) {
      if (sync === void 0) {
        sync = true;
      }

      true &&
        !(Boolean(obj) && Boolean(eventName)) &&
        (0, _debug.assert)(
          'You must pass at least an object and event name to addListener',
          Boolean(obj) && Boolean(eventName),
        );

      if (!method && 'function' === typeof target) {
        method = target;
        target = null;
      }

      (0, _meta2.meta)(obj).addToListeners(
        eventName,
        target,
        method,
        once === true,
        sync,
      );
    }
    /**
    Remove an event listener
  
    Arguments should match those passed to `addListener`.
  
    @method removeListener
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Object|Function} target A target object or a function
    @param {Function|String} method A function or the name of a function to be called on `target`
    @public
  */

    function removeListener(obj, eventName, targetOrFunction, functionOrName) {
      true &&
        !(
          Boolean(obj) &&
          Boolean(eventName) &&
          (typeof targetOrFunction === 'function' ||
            (typeof targetOrFunction === 'object' && Boolean(functionOrName)))
        ) &&
        (0, _debug.assert)(
          'You must pass at least an object, event name, and method or target and method/method name to removeListener',
          Boolean(obj) &&
            Boolean(eventName) &&
            (typeof targetOrFunction === 'function' ||
              (typeof targetOrFunction === 'object' &&
                Boolean(functionOrName))),
        );
      var target, method;

      if (typeof targetOrFunction === 'object') {
        target = targetOrFunction;
        method = functionOrName;
      } else {
        target = null;
        method = targetOrFunction;
      }

      var m = (0, _meta2.meta)(obj);
      m.removeFromListeners(eventName, target, method);
    }
    /**
    Send an event. The execution of suspended listeners
    is skipped, and once listeners are removed. A listener without
    a target is executed on the passed object. If an array of actions
    is not passed, the actions stored on the passed object are invoked.
  
    @method sendEvent
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @param {Array} params Optional parameters for each listener.
    @return {Boolean} if the event was delivered to one or more actions
    @public
  */

    function sendEvent(obj, eventName, params, actions, _meta) {
      if (actions === undefined) {
        var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;
        actions =
          meta$$1 !== null ? meta$$1.matchingListeners(eventName) : undefined;
      }

      if (actions === undefined || actions.length === 0) {
        return false;
      }

      for (var i = actions.length - 3; i >= 0; i -= 3) {
        // looping in reverse for once listeners
        var target = actions[i];
        var method = actions[i + 1];
        var once = actions[i + 2];

        if (!method) {
          continue;
        }

        if (once) {
          removeListener(obj, eventName, target, method);
        }

        if (!target) {
          target = obj;
        }

        var type = typeof method;

        if (type === 'string' || type === 'symbol') {
          method = target[method];
        }

        method.apply(target, params);
      }

      return true;
    }
    /**
    @public
    @method hasListeners
    @static
    @for @ember/object/events
    @param obj
    @param {String} eventName
    @return {Boolean} if `obj` has listeners for event `eventName`
  */

    function hasListeners(obj, eventName) {
      var meta$$1 = (0, _meta2.peekMeta)(obj);

      if (meta$$1 === null) {
        return false;
      }

      var matched = meta$$1.matchingListeners(eventName);
      return matched !== undefined && matched.length > 0;
    }
    /**
    Define a property as a function that should be executed when
    a specified event or events are triggered.
  
    ``` javascript
    import EmberObject from '@ember/object';
    import { on } from '@ember/object/evented';
    import { sendEvent } from '@ember/object/events';
  
    let Job = EmberObject.extend({
      logCompleted: on('completed', function() {
        console.log('Job completed!');
      })
    });
  
    let job = Job.create();
  
    sendEvent(job, 'completed'); // Logs 'Job completed!'
   ```
  
    @method on
    @static
    @for @ember/object/evented
    @param {String} eventNames*
    @param {Function} func
    @return {Function} the listener function, passed as last argument to on(...)
    @public
  */

    function on() {
      for (
        var _len = arguments.length, args = new Array(_len), _key2 = 0;
        _key2 < _len;
        _key2++
      ) {
        args[_key2] = arguments[_key2];
      }

      var func = args.pop();
      var events = args;
      true &&
        !(typeof func === 'function') &&
        (0, _debug.assert)(
          'on expects function as last argument',
          typeof func === 'function',
        );
      true &&
        !(
          events.length > 0 &&
          events.every((p) => typeof p === 'string' && p.length > 0)
        ) &&
        (0, _debug.assert)(
          'on called without valid event names',
          events.length > 0 &&
            events.every((p) => typeof p === 'string' && p.length > 0),
        );
      (0, _utils.setListeners)(func, events);
      return func;
    }

    var AFTER_OBSERVERS = ':change';

    function changeEvent(keyName) {
      return keyName + AFTER_OBSERVERS;
    }

    var SYNC_DEFAULT = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
    var SYNC_OBSERVERS = new Map();
    _exports.SYNC_OBSERVERS = SYNC_OBSERVERS;
    var ASYNC_OBSERVERS = new Map();
    /**
  @module @ember/object
  */

    /**
    @method addObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */

    _exports.ASYNC_OBSERVERS = ASYNC_OBSERVERS;

    function addObserver(obj, path, target, method, sync) {
      if (sync === void 0) {
        sync = SYNC_DEFAULT;
      }

      var eventName = changeEvent(path);
      addListener(obj, eventName, target, method, false, sync);
      var meta$$1 = (0, _meta2.peekMeta)(obj);

      if (
        meta$$1 === null ||
        !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())
      ) {
        activateObserver(obj, eventName, sync);
      }
    }
    /**
    @method removeObserver
    @static
    @for @ember/object/observers
    @param obj
    @param {String} path
    @param {Object|Function} target
    @param {Function|String} [method]
    @public
  */

    function removeObserver(obj, path, target, method, sync) {
      if (sync === void 0) {
        sync = SYNC_DEFAULT;
      }

      var eventName = changeEvent(path);
      var meta$$1 = (0, _meta2.peekMeta)(obj);

      if (
        meta$$1 === null ||
        !(meta$$1.isPrototypeMeta(obj) || meta$$1.isInitializing())
      ) {
        deactivateObserver(obj, eventName, sync);
      }

      removeListener(obj, eventName, target, method);
    }

    function getOrCreateActiveObserversFor(target, sync) {
      var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;

      if (!observerMap.has(target)) {
        observerMap.set(target, new Map());
        (0, _destroyable.registerDestructor)(
          target,
          () => destroyObservers(target),
          true,
        );
      }

      return observerMap.get(target);
    }

    function activateObserver(target, eventName, sync) {
      if (sync === void 0) {
        sync = false;
      }

      var activeObservers = getOrCreateActiveObserversFor(target, sync);

      if (activeObservers.has(eventName)) {
        activeObservers.get(eventName).count++;
      } else {
        var path = eventName.substring(0, eventName.lastIndexOf(':'));
        var tag = getChainTagsForKey(
          target,
          path,
          (0, _validator.tagMetaFor)(target),
          (0, _meta2.peekMeta)(target),
        );
        activeObservers.set(eventName, {
          count: 1,
          path,
          tag,
          lastRevision: (0, _validator.valueForTag)(tag),
          suspended: false,
        });
      }
    }

    var DEACTIVATE_SUSPENDED = false;
    var SCHEDULED_DEACTIVATE = [];

    function deactivateObserver(target, eventName, sync) {
      if (sync === void 0) {
        sync = false;
      }

      if (DEACTIVATE_SUSPENDED === true) {
        SCHEDULED_DEACTIVATE.push([target, eventName, sync]);
        return;
      }

      var observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
      var activeObservers = observerMap.get(target);

      if (activeObservers !== undefined) {
        var _observer = activeObservers.get(eventName);

        _observer.count--;

        if (_observer.count === 0) {
          activeObservers.delete(eventName);

          if (activeObservers.size === 0) {
            observerMap.delete(target);
          }
        }
      }
    }

    function suspendedObserverDeactivation() {
      DEACTIVATE_SUSPENDED = true;
    }

    function resumeObserverDeactivation() {
      DEACTIVATE_SUSPENDED = false;

      for (var [target, eventName, sync] of SCHEDULED_DEACTIVATE) {
        deactivateObserver(target, eventName, sync);
      }

      SCHEDULED_DEACTIVATE = [];
    }
    /**
     * Primarily used for cases where we are redefining a class, e.g. mixins/reopen
     * being applied later. Revalidates all the observers, resetting their tags.
     *
     * @private
     * @param target
     */

    function revalidateObservers(target) {
      if (ASYNC_OBSERVERS.has(target)) {
        ASYNC_OBSERVERS.get(target).forEach((observer) => {
          observer.tag = getChainTagsForKey(
            target,
            observer.path,
            (0, _validator.tagMetaFor)(target),
            (0, _meta2.peekMeta)(target),
          );
          observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
        });
      }

      if (SYNC_OBSERVERS.has(target)) {
        SYNC_OBSERVERS.get(target).forEach((observer) => {
          observer.tag = getChainTagsForKey(
            target,
            observer.path,
            (0, _validator.tagMetaFor)(target),
            (0, _meta2.peekMeta)(target),
          );
          observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
        });
      }
    }

    var lastKnownRevision = 0;

    function flushAsyncObservers(shouldSchedule) {
      if (shouldSchedule === void 0) {
        shouldSchedule = true;
      }

      var currentRevision = (0, _validator.valueForTag)(_validator.CURRENT_TAG);

      if (lastKnownRevision === currentRevision) {
        return;
      }

      lastKnownRevision = currentRevision;
      ASYNC_OBSERVERS.forEach((activeObservers, target) => {
        var meta$$1 = (0, _meta2.peekMeta)(target);
        activeObservers.forEach((observer, eventName) => {
          if (
            !(0, _validator.validateTag)(observer.tag, observer.lastRevision)
          ) {
            var sendObserver = () => {
              try {
                sendEvent(
                  target,
                  eventName,
                  [target, observer.path],
                  undefined,
                  meta$$1,
                );
              } finally {
                observer.tag = getChainTagsForKey(
                  target,
                  observer.path,
                  (0, _validator.tagMetaFor)(target),
                  (0, _meta2.peekMeta)(target),
                );
                observer.lastRevision = (0, _validator.valueForTag)(
                  observer.tag,
                );
              }
            };

            if (shouldSchedule) {
              (0, _runloop.schedule)('actions', sendObserver);
            } else {
              sendObserver();
            }
          }
        });
      });
    }

    function flushSyncObservers() {
      // When flushing synchronous observers, we know that something has changed (we
      // only do this during a notifyPropertyChange), so there's no reason to check
      // a global revision.
      SYNC_OBSERVERS.forEach((activeObservers, target) => {
        var meta$$1 = (0, _meta2.peekMeta)(target);
        activeObservers.forEach((observer, eventName) => {
          if (
            !observer.suspended &&
            !(0, _validator.validateTag)(observer.tag, observer.lastRevision)
          ) {
            try {
              observer.suspended = true;
              sendEvent(
                target,
                eventName,
                [target, observer.path],
                undefined,
                meta$$1,
              );
            } finally {
              observer.tag = getChainTagsForKey(
                target,
                observer.path,
                (0, _validator.tagMetaFor)(target),
                (0, _meta2.peekMeta)(target),
              );
              observer.lastRevision = (0, _validator.valueForTag)(observer.tag);
              observer.suspended = false;
            }
          }
        });
      });
    }

    function setObserverSuspended(target, property, suspended) {
      var activeObservers = SYNC_OBSERVERS.get(target);

      if (!activeObservers) {
        return;
      }

      var observer = activeObservers.get(changeEvent(property));

      if (observer) {
        observer.suspended = suspended;
      }
    }

    function destroyObservers(target) {
      if (SYNC_OBSERVERS.size > 0) SYNC_OBSERVERS.delete(target);
      if (ASYNC_OBSERVERS.size > 0) ASYNC_OBSERVERS.delete(target);
    }

    var SELF_TAG = (0, _utils.symbol)('SELF_TAG');

    function tagForProperty(obj, propertyKey, addMandatorySetter, meta$$1) {
      if (addMandatorySetter === void 0) {
        addMandatorySetter = false;
      }

      var customTagFor = (0, _manager.getCustomTagFor)(obj);

      if (customTagFor !== undefined) {
        return customTagFor(obj, propertyKey, addMandatorySetter);
      }

      var tag = (0, _validator.tagFor)(obj, propertyKey, meta$$1);

      if (
        true &&
        /* DEBUG */
        addMandatorySetter
      ) {
        (0, _utils.setupMandatorySetter)(tag, obj, propertyKey);
      }

      return tag;
    }

    function tagForObject(obj) {
      if ((0, _utils.isObject)(obj)) {
        if (
          true
          /* DEBUG */
        ) {
          true &&
            !!(0, _destroyable.isDestroyed)(obj) &&
            (0, _debug.assert)(
              (0, _destroyable.isDestroyed)(obj)
                ? `Cannot create a new tag for \`${(0, _utils.toString)(
                    obj,
                  )}\` after it has been destroyed.`
                : '',
              !(0, _destroyable.isDestroyed)(obj),
            );
        }

        return (0, _validator.tagFor)(obj, SELF_TAG);
      }

      return _validator.CONSTANT_TAG;
    }

    function markObjectAsDirty(obj, propertyKey) {
      (0, _validator.dirtyTagFor)(obj, propertyKey);
      (0, _validator.dirtyTagFor)(obj, SELF_TAG);
    }
    /**
   @module ember
   @private
   */

    var PROPERTY_DID_CHANGE = Symbol('PROPERTY_DID_CHANGE');
    _exports.PROPERTY_DID_CHANGE = PROPERTY_DID_CHANGE;

    function hasPropertyDidChange(obj) {
      return (
        obj != null &&
        typeof obj === 'object' &&
        typeof obj[PROPERTY_DID_CHANGE] === 'function'
      );
    }

    var deferred = 0;
    /**
    This function is called just after an object property has changed.
    It will notify any observers and clear caches among other things.
  
    Normally you will not need to call this method directly but if for some
    reason you can't directly watch a property you can invoke this method
    manually.
  
    @method notifyPropertyChange
    @for @ember/object
    @param {Object} obj The object with the property that will change
    @param {String} keyName The property key (or path) that will change.
    @param {Meta} [_meta] The objects meta.
    @param {unknown} [value] The new value to set for the property
    @return {void}
    @since 3.1.0
    @public
  */

    function notifyPropertyChange(obj, keyName, _meta, value) {
      var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;

      if (
        meta$$1 !== null &&
        (meta$$1.isInitializing() || meta$$1.isPrototypeMeta(obj))
      ) {
        return;
      }

      markObjectAsDirty(obj, keyName);

      if (deferred <= 0) {
        flushSyncObservers();
      }

      if (PROPERTY_DID_CHANGE in obj) {
        // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
        true &&
          !hasPropertyDidChange(obj) &&
          (0, _debug.assert)(
            'property did change hook is invalid',
            hasPropertyDidChange(obj),
          ); // we need to check the arguments length here; there's a check in Component's `PROPERTY_DID_CHANGE`
        // that checks its arguments length, so we have to explicitly not call this with `value`
        // if it is not passed to `notifyPropertyChange`

        if (arguments.length === 4) {
          obj[PROPERTY_DID_CHANGE](keyName, value);
        } else {
          obj[PROPERTY_DID_CHANGE](keyName);
        }
      }
    }
    /**
    @method beginPropertyChanges
    @chainable
    @private
  */

    function beginPropertyChanges() {
      deferred++;
      suspendedObserverDeactivation();
    }
    /**
    @method endPropertyChanges
    @private
  */

    function endPropertyChanges() {
      deferred--;

      if (deferred <= 0) {
        flushSyncObservers();
        resumeObserverDeactivation();
      }
    }
    /**
    Make a series of property changes together in an
    exception-safe way.
  
    ```javascript
    Ember.changeProperties(function() {
      obj1.set('foo', mayBlowUpWhenSet);
      obj2.set('bar', baz);
    });
    ```
  
    @method changeProperties
    @param {Function} callback
    @private
  */

    function changeProperties(callback) {
      beginPropertyChanges();

      try {
        callback();
      } finally {
        endPropertyChanges();
      }
    }

    function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
      // if no args are passed assume everything changes
      if (startIdx === undefined) {
        startIdx = 0;
        removeAmt = addAmt = -1;
      } else {
        if (removeAmt === undefined) {
          removeAmt = -1;
        }

        if (addAmt === undefined) {
          addAmt = -1;
        }
      }

      sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
      return array;
    }

    function arrayContentDidChange(array, startIdx, removeAmt, addAmt, notify) {
      if (notify === void 0) {
        notify = true;
      }

      // if no args are passed assume everything changes
      if (startIdx === undefined) {
        startIdx = 0;
        removeAmt = addAmt = -1;
      } else {
        if (removeAmt === undefined) {
          removeAmt = -1;
        }

        if (addAmt === undefined) {
          addAmt = -1;
        }
      }

      var meta$$1 = (0, _meta2.peekMeta)(array);

      if (notify) {
        if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
          notifyPropertyChange(array, 'length', meta$$1);
        }

        notifyPropertyChange(array, '[]', meta$$1);
      }

      sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);

      if (meta$$1 !== null) {
        var length = array.length;
        var addedAmount = addAmt === -1 ? 0 : addAmt;
        var removedAmount = removeAmt === -1 ? 0 : removeAmt;
        var delta = addedAmount - removedAmount;
        var previousLength = length - delta;
        var normalStartIdx =
          startIdx < 0 ? previousLength + startIdx : startIdx;

        if (
          meta$$1.revisionFor('firstObject') !== undefined &&
          normalStartIdx === 0
        ) {
          notifyPropertyChange(array, 'firstObject', meta$$1);
        }

        if (meta$$1.revisionFor('lastObject') !== undefined) {
          var previousLastIndex = previousLength - 1;
          var lastAffectedIndex = normalStartIdx + removedAmount;

          if (previousLastIndex < lastAffectedIndex) {
            notifyPropertyChange(array, 'lastObject', meta$$1);
          }
        }
      }

      return array;
    }

    var EMPTY_ARRAY = Object.freeze([]);

    function objectAt(array, index) {
      if (Array.isArray(array)) {
        return array[index];
      } else {
        return array.objectAt(index);
      }
    } // Ideally, we'd use MutableArray.detect but for unknown reasons this causes
    // the node tests to fail strangely.

    function isMutableArray(obj) {
      return obj != null && typeof obj.replace === 'function';
    }

    function replace(array, start, deleteCount, items) {
      if (items === void 0) {
        items = EMPTY_ARRAY;
      }

      if (isMutableArray(array)) {
        array.replace(start, deleteCount, items);
      } else {
        true &&
          !Array.isArray(array) &&
          (0, _debug.assert)(
            'Can only replace content of a native array or MutableArray',
            Array.isArray(array),
          );
        replaceInNativeArray(array, start, deleteCount, items);
      }
    }

    var CHUNK_SIZE = 60000; // To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
    // See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.

    function replaceInNativeArray(array, start, deleteCount, items) {
      arrayContentWillChange(array, start, deleteCount, items.length);

      if (items.length <= CHUNK_SIZE) {
        array.splice(start, deleteCount, ...items);
      } else {
        array.splice(start, deleteCount);

        for (var i = 0; i < items.length; i += CHUNK_SIZE) {
          var chunk = items.slice(i, i + CHUNK_SIZE);
          array.splice(start + i, 0, ...chunk);
        }
      }

      arrayContentDidChange(array, start, deleteCount, items.length);
    }

    function arrayObserversHelper(obj, target, opts, operation) {
      var _a;

      var { willChange, didChange } = opts;
      operation(obj, '@array:before', target, willChange);
      operation(obj, '@array:change', target, didChange);
      /*
       * Array proxies have a `_revalidate` method which must be called to set
       * up their internal array observation systems.
       */

      (_a = obj._revalidate) === null || _a === void 0 ? void 0 : _a.call(obj);
      return obj;
    }

    function addArrayObserver(array, target, opts) {
      return arrayObserversHelper(array, target, opts, addListener);
    }

    function removeArrayObserver(array, target, opts) {
      return arrayObserversHelper(array, target, opts, removeListener);
    }

    var CHAIN_PASS_THROUGH = new _util._WeakSet();

    function finishLazyChains(meta$$1, key, value) {
      var lazyTags = meta$$1.readableLazyChainsFor(key);

      if (lazyTags === undefined) {
        return;
      }

      if ((0, _utils.isObject)(value)) {
        for (var [tag, deps] of lazyTags) {
          (0, _validator.updateTag)(
            tag,
            getChainTagsForKey(
              value,
              deps,
              (0, _validator.tagMetaFor)(value),
              (0, _meta2.peekMeta)(value),
            ),
          );
        }
      }

      lazyTags.length = 0;
    }

    function getChainTagsForKeys(obj, keys, tagMeta, meta$$1) {
      var tags = [];

      for (var key of keys) {
        getChainTags(tags, obj, key, tagMeta, meta$$1);
      }

      return (0, _validator.combine)(tags);
    }

    function getChainTagsForKey(obj, key, tagMeta, meta$$1) {
      return (0, _validator.combine)(
        getChainTags([], obj, key, tagMeta, meta$$1),
      );
    }

    function getChainTags(chainTags, obj, path, tagMeta, meta$$1) {
      var current = obj;
      var currentTagMeta = tagMeta;
      var currentMeta = meta$$1;
      var pathLength = path.length;
      var segmentEnd = -1; // prevent closures

      var segment, descriptor; // eslint-disable-next-line no-constant-condition

      while (true) {
        var lastSegmentEnd = segmentEnd + 1;
        segmentEnd = path.indexOf('.', lastSegmentEnd);

        if (segmentEnd === -1) {
          segmentEnd = pathLength;
        }

        segment = path.slice(lastSegmentEnd, segmentEnd); // If the segment is an @each, we can process it and then break

        if (segment === '@each' && segmentEnd !== pathLength) {
          lastSegmentEnd = segmentEnd + 1;
          segmentEnd = path.indexOf('.', lastSegmentEnd);
          var arrLength = current.length;

          if (
            typeof arrLength !== 'number' || // TODO: should the second test be `isEmberArray` instead?
            !(Array.isArray(current) || 'objectAt' in current)
          ) {
            // If the current object isn't an array, there's nothing else to do,
            // we don't watch individual properties. Break out of the loop.
            break;
          } else if (arrLength === 0) {
            // Fast path for empty arrays
            chainTags.push(tagForProperty(current, '[]'));
            break;
          }

          if (segmentEnd === -1) {
            segment = path.slice(lastSegmentEnd);
          } else {
            // Deprecated, remove once we turn the deprecation into an assertion
            segment = path.slice(lastSegmentEnd, segmentEnd);
          } // Push the tags for each item's property

          for (var i = 0; i < arrLength; i++) {
            var item = objectAt(current, i);

            if (item) {
              true &&
                !(typeof item === 'object') &&
                (0, _debug.assert)(
                  `When using @each to observe the array \`${current.toString()}\`, the items in the array must be objects`,
                  typeof item === 'object',
                );
              chainTags.push(tagForProperty(item, segment, true));
              currentMeta = (0, _meta2.peekMeta)(item);
              descriptor =
                currentMeta !== null
                  ? currentMeta.peekDescriptors(segment)
                  : undefined; // If the key is an alias, we need to bootstrap it

              if (
                descriptor !== undefined &&
                typeof descriptor.altKey === 'string'
              ) {
                item[segment];
              }
            }
          } // Push the tag for the array length itself

          chainTags.push(tagForProperty(current, '[]', true, currentTagMeta));
          break;
        }

        var propertyTag = tagForProperty(
          current,
          segment,
          true,
          currentTagMeta,
        );
        descriptor =
          currentMeta !== null
            ? currentMeta.peekDescriptors(segment)
            : undefined;
        chainTags.push(propertyTag); // If we're at the end of the path, processing the last segment, and it's
        // not an alias, we should _not_ get the last value, since we already have
        // its tag. There's no reason to access it and do more work.

        if (segmentEnd === pathLength) {
          // If the key was an alias, we should always get the next value in order to
          // bootstrap the alias. This is because aliases, unlike other CPs, should
          // always be in sync with the aliased value.
          if (CHAIN_PASS_THROUGH.has(descriptor)) {
            current[segment];
          }

          break;
        }

        if (descriptor === undefined) {
          // If the descriptor is undefined, then its a normal property, so we should
          // lookup the value to chain off of like normal.
          if (
            !(segment in current) &&
            typeof current.unknownProperty === 'function'
          ) {
            current = current.unknownProperty(segment);
          } else {
            current = current[segment];
          }
        } else if (CHAIN_PASS_THROUGH.has(descriptor)) {
          current = current[segment];
        } else {
          // If the descriptor is defined, then its a normal CP (not an alias, which
          // would have been handled earlier). We get the last revision to check if
          // the CP is still valid, and if so we use the cached value. If not, then
          // we create a lazy chain lookup, and the next time the CP is calculated,
          // it will update that lazy chain.
          var instanceMeta =
            currentMeta.source === current
              ? currentMeta
              : (0, _meta2.meta)(current);
          var lastRevision = instanceMeta.revisionFor(segment);

          if (
            lastRevision !== undefined &&
            (0, _validator.validateTag)(propertyTag, lastRevision)
          ) {
            current = instanceMeta.valueFor(segment);
          } else {
            // use metaFor here to ensure we have the meta for the instance
            var lazyChains = instanceMeta.writableLazyChainsFor(segment);
            var rest = path.substring(segmentEnd + 1);
            var placeholderTag = (0, _validator.createUpdatableTag)();
            lazyChains.push([placeholderTag, rest]);
            chainTags.push(placeholderTag);
            break;
          }
        }

        if (!(0, _utils.isObject)(current)) {
          // we've hit the end of the chain for now, break out
          break;
        }

        currentTagMeta = (0, _validator.tagMetaFor)(current);
        currentMeta = (0, _meta2.peekMeta)(current);
      }

      return chainTags;
    }

    function isElementDescriptor(args) {
      var [maybeTarget, maybeKey, maybeDesc] = args;
      return (
        // Ensure we have the right number of args
        args.length === 3 && // Make sure the target is a class or object (prototype)
        (typeof maybeTarget === 'function' ||
          (typeof maybeTarget === 'object' && maybeTarget !== null)) && // Make sure the key is a string
        typeof maybeKey === 'string' && // Make sure the descriptor is the right shape
        ((typeof maybeDesc === 'object' && maybeDesc !== null) ||
          maybeDesc === undefined)
      );
    }

    function nativeDescDecorator(propertyDesc) {
      var decorator = function () {
        return propertyDesc;
      };

      setClassicDecorator(decorator);
      return decorator;
    }
    /**
    Objects of this type can implement an interface to respond to requests to
    get and set. The default implementation handles simple properties.
  
    @class Descriptor
    @private
  */

    class ComputedDescriptor {
      constructor() {
        this.enumerable = true;
        this.configurable = true;
        this._dependentKeys = undefined;
        this._meta = undefined;
      }

      setup(_obj, keyName, _propertyDesc, meta$$1) {
        meta$$1.writeDescriptors(keyName, this);
      }

      teardown(_obj, keyName, meta$$1) {
        meta$$1.removeDescriptors(keyName);
      }
    }

    var COMPUTED_GETTERS;

    if (
      true
      /* DEBUG */
    ) {
      COMPUTED_GETTERS = new _util._WeakSet();
    }

    function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
      function getter() {
        return descriptor.get(this, name);
      }

      if (
        true
        /* DEBUG */
      ) {
        COMPUTED_GETTERS.add(getter);
      }

      return getter;
    }

    function DESCRIPTOR_SETTER_FUNCTION(name, descriptor) {
      var set = function CPSETTER_FUNCTION(value) {
        return descriptor.set(this, name, value);
      };

      COMPUTED_SETTERS.add(set);
      return set;
    }

    var COMPUTED_SETTERS = new _util._WeakSet();

    function makeComputedDecorator(desc, DecoratorClass) {
      var decorator = function COMPUTED_DECORATOR(
        target,
        key,
        propertyDesc,
        maybeMeta,
        isClassicDecorator,
      ) {
        true &&
          !(
            isClassicDecorator ||
            !propertyDesc ||
            !propertyDesc.get ||
            !COMPUTED_GETTERS.has(propertyDesc.get)
          ) &&
          (0, _debug.assert)(
            `Only one computed property decorator can be applied to a class field or accessor, but '${key}' was decorated twice. You may have added the decorator to both a getter and setter, which is unnecessary.`,
            isClassicDecorator ||
              !propertyDesc ||
              !propertyDesc.get ||
              !COMPUTED_GETTERS.has(propertyDesc.get),
          );
        var meta$$1 =
          arguments.length === 3 ? (0, _meta2.meta)(target) : maybeMeta;
        desc.setup(target, key, propertyDesc, meta$$1);
        var computedDesc = {
          enumerable: desc.enumerable,
          configurable: desc.configurable,
          get: DESCRIPTOR_GETTER_FUNCTION(key, desc),
          set: DESCRIPTOR_SETTER_FUNCTION(key, desc),
        };
        return computedDesc;
      };

      setClassicDecorator(decorator, desc);
      Object.setPrototypeOf(decorator, DecoratorClass.prototype);
      return decorator;
    } /////////////

    var DECORATOR_DESCRIPTOR_MAP = new WeakMap();
    /**
    Returns the CP descriptor associated with `obj` and `keyName`, if any.
  
    @method descriptorForProperty
    @param {Object} obj the object to check
    @param {String} keyName the key to check
    @return {Descriptor}
    @private
  */

    function descriptorForProperty(obj, keyName, _meta) {
      true &&
        !(obj !== null) &&
        (0, _debug.assert)(
          'Cannot call `descriptorForProperty` on null',
          obj !== null,
        );
      true &&
        !(obj !== undefined) &&
        (0, _debug.assert)(
          'Cannot call `descriptorForProperty` on undefined',
          obj !== undefined,
        );
      true &&
        !(typeof obj === 'object' || typeof obj === 'function') &&
        (0, _debug.assert)(
          `Cannot call \`descriptorForProperty\` on ${typeof obj}`,
          typeof obj === 'object' || typeof obj === 'function',
        );
      var meta$$1 = _meta === undefined ? (0, _meta2.peekMeta)(obj) : _meta;

      if (meta$$1 !== null) {
        return meta$$1.peekDescriptors(keyName);
      }
    }

    function descriptorForDecorator(dec) {
      return DECORATOR_DESCRIPTOR_MAP.get(dec);
    }
    /**
    Check whether a value is a decorator
  
    @method isClassicDecorator
    @param {any} possibleDesc the value to check
    @return {boolean}
    @private
  */

    function isClassicDecorator(dec) {
      return typeof dec === 'function' && DECORATOR_DESCRIPTOR_MAP.has(dec);
    }
    /**
    Set a value as a decorator
  
    @method setClassicDecorator
    @param {function} decorator the value to mark as a decorator
    @private
  */

    function setClassicDecorator(dec, value) {
      if (value === void 0) {
        value = true;
      }

      DECORATOR_DESCRIPTOR_MAP.set(dec, value);
    }
    /**
  @module @ember/object
  */

    var END_WITH_EACH_REGEX = /\.@each$/;
    /**
    Expands `pattern`, invoking `callback` for each expansion.
  
    The only pattern supported is brace-expansion, anything else will be passed
    once to `callback` directly.
  
    Example
  
    ```js
    import { expandProperties } from '@ember/object/computed';
  
    function echo(arg){ console.log(arg); }
  
    expandProperties('foo.bar', echo);              //=> 'foo.bar'
    expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
    expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
    expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
    expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
    expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
    expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
    ```
  
    @method expandProperties
    @static
    @for @ember/object/computed
    @public
    @param {String} pattern The property pattern to expand.
    @param {Function} callback The callback to invoke.  It is invoked once per
    expansion, and is passed the expansion.
  */

    function expandProperties(pattern, callback) {
      true &&
        !(typeof pattern === 'string') &&
        (0, _debug.assert)(
          `A computed property key must be a string, you passed ${typeof pattern} ${pattern}`,
          typeof pattern === 'string',
        );
      true &&
        !(pattern.indexOf(' ') === -1) &&
        (0, _debug.assert)(
          'Brace expanded properties cannot contain spaces, e.g. "user.{firstName, lastName}" should be "user.{firstName,lastName}"',
          pattern.indexOf(' ') === -1,
        ); // regex to look for double open, double close, or unclosed braces

      true &&
        !(pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null) &&
        (0, _debug.assert)(
          `Brace expanded properties have to be balanced and cannot be nested, pattern: ${pattern}`,
          pattern.match(/\{[^}{]*\{|\}[^}{]*\}|\{[^}]*$/g) === null,
        );
      var start = pattern.indexOf('{');

      if (start < 0) {
        callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
      } else {
        dive('', pattern, start, callback);
      }
    }

    function dive(prefix, pattern, start, callback) {
      var end = pattern.indexOf('}'),
        i = 0,
        newStart,
        arrayLength;
      var tempArr = pattern.substring(start + 1, end).split(',');
      var after = pattern.substring(end + 1);
      prefix = prefix + pattern.substring(0, start);
      arrayLength = tempArr.length;

      while (i < arrayLength) {
        newStart = after.indexOf('{');

        if (newStart < 0) {
          callback(
            (prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'),
          );
        } else {
          dive(prefix + tempArr[i++], after, newStart, callback);
        }
      }
    }
    /**
  @module @ember/object
  */

    var DEEP_EACH_REGEX = /\.@each\.[^.]+\./;

    function noop() {}
    /**
    `@computed` is a decorator that turns a JavaScript getter and setter into a
    computed property, which is a _cached, trackable value_. By default the getter
    will only be called once and the result will be cached. You can specify
    various properties that your computed property depends on. This will force the
    cached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.
  
    In the following example we decorate a getter - `fullName` -  by calling
    `computed` with the property dependencies (`firstName` and `lastName`) as
    arguments. The `fullName` getter will be called once (regardless of how many
    times it is accessed) as long as its dependencies do not change. Once
    `firstName` or `lastName` are updated any future calls to `fullName` will
    incorporate the new values, and any watchers of the value such as templates
    will be updated:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let tom = new Person('Tom', 'Dale');
  
    tom.fullName; // 'Tom Dale'
    ```
  
    You can also provide a setter, which will be used when updating the computed
    property. Ember's `set` function must be used to update the property
    since it will also notify observers of the property:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName')
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
  
      set fullName(value) {
        let [firstName, lastName] = value.split(' ');
  
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    You can also pass a getter function or object with `get` and `set` functions
    as the last argument to the computed decorator. This allows you to define
    computed property _macros_:
  
    ```js
    import { computed } from '@ember/object';
  
    function join(...keys) {
      return computed(...keys, function() {
        return keys.map(key => this[key]).join(' ');
      });
    }
  
    class Person {
      @join('firstName', 'lastName')
      fullName;
    }
    ```
  
    Note that when defined this way, getters and setters receive the _key_ of the
    property they are decorating as the first argument. Setters receive the value
    they are setting to as the second argument instead. Additionally, setters must
    _return_ the value that should be cached:
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    function fullNameMacro(firstNameKey, lastNameKey) {
      return computed(firstNameKey, lastNameKey, {
        get() {
          return `${this[firstNameKey]} ${this[lastNameKey]}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, firstNameKey, firstName);
          set(this, lastNameKey, lastName);
  
          return value;
        }
      });
    }
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @fullNameMacro('firstName', 'lastName') fullName;
    });
  
    let person = new Person();
  
    set(person, 'fullName', 'Peter Wagenet');
    person.firstName; // 'Peter'
    person.lastName;  // 'Wagenet'
    ```
  
    Computed properties can also be used in classic classes. To do this, we
    provide the getter and setter as the last argument like we would for a macro,
    and we assign it to a property on the class definition. This is an _anonymous_
    computed macro:
  
    ```javascript
    import EmberObject, { computed, set } from '@ember/object';
  
    let Person = EmberObject.extend({
      // these will be supplied by `create`
      firstName: null,
      lastName: null,
  
      fullName: computed('firstName', 'lastName', {
        get() {
          return `${this.firstName} ${this.lastName}`;
        }
  
        set(key, value) {
          let [firstName, lastName] = value.split(' ');
  
          set(this, 'firstName', firstName);
          set(this, 'lastName', lastName);
  
          return value;
        }
      })
    });
  
    let tom = Person.create({
      firstName: 'Tom',
      lastName: 'Dale'
    });
  
    tom.get('fullName') // 'Tom Dale'
    ```
  
    You can overwrite computed property without setters with a normal property (no
    longer computed) that won't change if dependencies change. You can also mark
    computed property as `.readOnly()` and block all attempts to set it.
  
    ```javascript
    import { computed, set } from '@ember/object';
  
    class Person {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @computed('firstName', 'lastName').readOnly()
      get fullName() {
        return `${this.firstName} ${this.lastName}`;
      }
    });
  
    let person = new Person();
    person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
    ```
  
    Additional resources:
    - [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)
    - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
    - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)
  
    @class ComputedProperty
    @public
  */

    class ComputedProperty extends ComputedDescriptor {
      constructor(args) {
        super();
        this._readOnly = false;
        this._hasConfig = false;
        this._getter = undefined;
        this._setter = undefined;
        var maybeConfig = args[args.length - 1];

        if (
          typeof maybeConfig === 'function' ||
          (maybeConfig !== null && typeof maybeConfig === 'object')
        ) {
          this._hasConfig = true;
          var config = args.pop();

          if (typeof config === 'function') {
            true &&
              !!isClassicDecorator(config) &&
              (0, _debug.assert)(
                `You attempted to pass a computed property instance to computed(). Computed property instances are decorator functions, and cannot be passed to computed() because they cannot be turned into decorators twice`,
                !isClassicDecorator(config),
              );
            this._getter = config;
          } else {
            var objectConfig = config;
            true &&
              !(
                typeof objectConfig === 'object' && !Array.isArray(objectConfig)
              ) &&
              (0, _debug.assert)(
                'computed expects a function or an object as last argument.',
                typeof objectConfig === 'object' &&
                  !Array.isArray(objectConfig),
              );
            true &&
              !Object.keys(objectConfig).every(
                (key) => key === 'get' || key === 'set',
              ) &&
              (0, _debug.assert)(
                'Config object passed to computed can only contain `get` and `set` keys.',
                Object.keys(objectConfig).every(
                  (key) => key === 'get' || key === 'set',
                ),
              );
            true &&
              !(Boolean(objectConfig.get) || Boolean(objectConfig.set)) &&
              (0, _debug.assert)(
                'Computed properties must receive a getter or a setter, you passed none.',
                Boolean(objectConfig.get) || Boolean(objectConfig.set),
              );
            this._getter = objectConfig.get || noop;
            this._setter = objectConfig.set;
          }
        }

        if (args.length > 0) {
          this._property(...args);
        }
      }

      setup(obj, keyName, propertyDesc, meta$$1) {
        super.setup(obj, keyName, propertyDesc, meta$$1);
        true &&
          !!(propertyDesc && typeof propertyDesc.value === 'function') &&
          (0, _debug.assert)(
            `@computed can only be used on accessors or fields, attempted to use it with ${keyName} but that was a method. Try converting it to a getter (e.g. \`get ${keyName}() {}\`)`,
            !(propertyDesc && typeof propertyDesc.value === 'function'),
          );
        true &&
          !(!propertyDesc || !propertyDesc.initializer) &&
          (0, _debug.assert)(
            `@computed can only be used on empty fields. ${keyName} has an initial value (e.g. \`${keyName} = someValue\`)`,
            !propertyDesc || !propertyDesc.initializer,
          );
        true &&
          !!(
            this._hasConfig &&
            propertyDesc &&
            (typeof propertyDesc.get === 'function' ||
              typeof propertyDesc.set === 'function')
          ) &&
          (0, _debug.assert)(
            `Attempted to apply a computed property that already has a getter/setter to a ${keyName}, but it is a method or an accessor. If you passed @computed a function or getter/setter (e.g. \`@computed({ get() { ... } })\`), then it must be applied to a field`,
            !(
              this._hasConfig &&
              propertyDesc &&
              (typeof propertyDesc.get === 'function' ||
                typeof propertyDesc.set === 'function')
            ),
          );

        if (this._hasConfig === false) {
          true &&
            !(
              propertyDesc &&
              (typeof propertyDesc.get === 'function' ||
                typeof propertyDesc.set === 'function')
            ) &&
            (0, _debug.assert)(
              `Attempted to use @computed on ${keyName}, but it did not have a getter or a setter. You must either pass a get a function or getter/setter to @computed directly (e.g. \`@computed({ get() { ... } })\`) or apply @computed directly to a getter/setter`,
              propertyDesc &&
                (typeof propertyDesc.get === 'function' ||
                  typeof propertyDesc.set === 'function'),
            );
          var { get: _get2, set: _set2 } = propertyDesc;

          if (_get2 !== undefined) {
            this._getter = _get2;
          }

          if (_set2 !== undefined) {
            this._setter = function setterWrapper(_key, value) {
              var ret = _set2.call(this, value);

              if (_get2 !== undefined) {
                return typeof ret === 'undefined' ? _get2.call(this) : ret;
              }

              return ret;
            };
          }
        }
      }

      _property() {
        var args = [];

        function addArg(property) {
          true &&
            !(DEEP_EACH_REGEX.test(property) === false) &&
            (0, _debug.assert)(
              `Dependent keys containing @each only work one level deep. ` +
                `You used the key "${property}" which is invalid. ` +
                `Please create an intermediary computed property or ` +
                `switch to using tracked properties.`,
              DEEP_EACH_REGEX.test(property) === false,
            );
          args.push(property);
        }

        for (
          var _len2 = arguments.length,
            passedArgs = new Array(_len2),
            _key3 = 0;
          _key3 < _len2;
          _key3++
        ) {
          passedArgs[_key3] = arguments[_key3];
        }

        for (var arg of passedArgs) {
          expandProperties(arg, addArg);
        }

        this._dependentKeys = args;
      }

      get(obj, keyName) {
        var meta$$1 = (0, _meta2.meta)(obj);
        var tagMeta = (0, _validator.tagMetaFor)(obj);
        var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
        var ret;
        var revision = meta$$1.revisionFor(keyName);

        if (
          revision !== undefined &&
          (0, _validator.validateTag)(propertyTag, revision)
        ) {
          ret = meta$$1.valueFor(keyName);
        } else {
          // For backwards compatibility, we only throw if the CP has any dependencies. CPs without dependencies
          // should be allowed, even after the object has been destroyed, which is why we check _dependentKeys.
          true &&
            !(
              this._dependentKeys === undefined ||
              !(0, _destroyable.isDestroyed)(obj)
            ) &&
            (0, _debug.assert)(
              `Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`,
              this._dependentKeys === undefined ||
                !(0, _destroyable.isDestroyed)(obj),
            );
          var { _getter, _dependentKeys } = this; // Create a tracker that absorbs any trackable actions inside the CP

          (0, _validator.untrack)(() => {
            ret = _getter.call(obj, keyName);
          });

          if (_dependentKeys !== undefined) {
            (0, _validator.updateTag)(
              propertyTag,
              getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1),
            );

            if (
              true
              /* DEBUG */
            ) {
              _validator.ALLOW_CYCLES.set(propertyTag, true);
            }
          }

          meta$$1.setValueFor(keyName, ret);
          meta$$1.setRevisionFor(
            keyName,
            (0, _validator.valueForTag)(propertyTag),
          );
          finishLazyChains(meta$$1, keyName, ret);
        }

        (0, _validator.consumeTag)(propertyTag); // Add the tag of the returned value if it is an array, since arrays
        // should always cause updates if they are consumed and then changed

        if (Array.isArray(ret)) {
          (0, _validator.consumeTag)((0, _validator.tagFor)(ret, '[]'));
        }

        return ret;
      }

      set(obj, keyName, value) {
        if (this._readOnly) {
          this._throwReadOnlyError(obj, keyName);
        }

        true &&
          !(this._setter !== undefined) &&
          (0, _debug.assert)(
            `Cannot override the computed property \`${keyName}\` on ${(0,
            _utils.toString)(obj)}.`,
            this._setter !== undefined,
          );
        var meta$$1 = (0, _meta2.meta)(obj); // ensure two way binding works when the component has defined a computed
        // property with both a setter and dependent keys, in that scenario without
        // the sync observer added below the caller's value will never be updated
        //
        // See GH#18147 / GH#19028 for details.

        if (
          // ensure that we only run this once, while the component is being instantiated
          meta$$1.isInitializing() &&
          this._dependentKeys !== undefined &&
          this._dependentKeys.length > 0 &&
          typeof obj[PROPERTY_DID_CHANGE] === 'function' &&
          obj.isComponent
        ) {
          // It's redundant to do this here, but we don't want to check above so we can avoid an extra function call in prod.
          true &&
            !hasPropertyDidChange(obj) &&
            (0, _debug.assert)(
              'property did change hook is invalid',
              hasPropertyDidChange(obj),
            );
          addObserver(
            obj,
            keyName,
            () => {
              obj[PROPERTY_DID_CHANGE](keyName);
            },
            undefined,
            true,
          );
        }

        var ret;

        try {
          beginPropertyChanges();
          ret = this._set(obj, keyName, value, meta$$1);
          finishLazyChains(meta$$1, keyName, ret);
          var tagMeta = (0, _validator.tagMetaFor)(obj);
          var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
          var { _dependentKeys } = this;

          if (_dependentKeys !== undefined) {
            (0, _validator.updateTag)(
              propertyTag,
              getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$$1),
            );

            if (
              true
              /* DEBUG */
            ) {
              _validator.ALLOW_CYCLES.set(propertyTag, true);
            }
          }

          meta$$1.setRevisionFor(
            keyName,
            (0, _validator.valueForTag)(propertyTag),
          );
        } finally {
          endPropertyChanges();
        }

        return ret;
      }

      _throwReadOnlyError(obj, keyName) {
        throw new _error.default(
          `Cannot set read-only property "${keyName}" on object: ${(0,
          _utils.inspect)(obj)}`,
        );
      }

      _set(obj, keyName, value, meta$$1) {
        var hadCachedValue = meta$$1.revisionFor(keyName) !== undefined;
        var cachedValue = meta$$1.valueFor(keyName);
        var ret;
        var { _setter } = this;
        setObserverSuspended(obj, keyName, true);

        try {
          ret = _setter.call(obj, keyName, value, cachedValue);
        } finally {
          setObserverSuspended(obj, keyName, false);
        } // allows setter to return the same value that is cached already

        if (hadCachedValue && cachedValue === ret) {
          return ret;
        }

        meta$$1.setValueFor(keyName, ret);
        notifyPropertyChange(obj, keyName, meta$$1, value);
        return ret;
      }
      /* called before property is overridden */

      teardown(obj, keyName, meta$$1) {
        if (meta$$1.revisionFor(keyName) !== undefined) {
          meta$$1.setRevisionFor(keyName, undefined);
          meta$$1.setValueFor(keyName, undefined);
        }

        super.teardown(obj, keyName, meta$$1);
      }
    }

    _exports.ComputedProperty = ComputedProperty;

    class AutoComputedProperty extends ComputedProperty {
      get(obj, keyName) {
        var meta$$1 = (0, _meta2.meta)(obj);
        var tagMeta = (0, _validator.tagMetaFor)(obj);
        var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta);
        var ret;
        var revision = meta$$1.revisionFor(keyName);

        if (
          revision !== undefined &&
          (0, _validator.validateTag)(propertyTag, revision)
        ) {
          ret = meta$$1.valueFor(keyName);
        } else {
          true &&
            !!(0, _destroyable.isDestroyed)(obj) &&
            (0, _debug.assert)(
              `Attempted to access the computed ${obj}.${keyName} on a destroyed object, which is not allowed`,
              !(0, _destroyable.isDestroyed)(obj),
            );
          var { _getter } = this; // Create a tracker that absorbs any trackable actions inside the CP

          var tag = (0, _validator.track)(() => {
            ret = _getter.call(obj, keyName);
          });
          (0, _validator.updateTag)(propertyTag, tag);
          meta$$1.setValueFor(keyName, ret);
          meta$$1.setRevisionFor(
            keyName,
            (0, _validator.valueForTag)(propertyTag),
          );
          finishLazyChains(meta$$1, keyName, ret);
        }

        (0, _validator.consumeTag)(propertyTag); // Add the tag of the returned value if it is an array, since arrays
        // should always cause updates if they are consumed and then changed

        if (Array.isArray(ret)) {
          (0, _validator.consumeTag)(
            (0, _validator.tagFor)(ret, '[]', tagMeta),
          );
        }

        return ret;
      }
    } // TODO: This class can be svelted once `meta` has been deprecated

    class ComputedDecoratorImpl extends Function {
      /**
      Call on a computed property to set it into read-only mode. When in this
      mode the computed property will throw an error when set.
         Example:
         ```javascript
      import { computed, set } from '@ember/object';
         class Person {
        @computed().readOnly()
        get guid() {
          return 'guid-guid-guid';
        }
      }
         let person = new Person();
      set(person, 'guid', 'new-guid'); // will throw an exception
      ```
         Classic Class Example:
         ```javascript
      import EmberObject, { computed } from '@ember/object';
         let Person = EmberObject.extend({
        guid: computed(function() {
          return 'guid-guid-guid';
        }).readOnly()
      });
         let person = Person.create();
      person.set('guid', 'new-guid'); // will throw an exception
      ```
         @method readOnly
      @return {ComputedProperty} this
      @chainable
      @public
    */
      readOnly() {
        var desc = descriptorForDecorator(this);
        true &&
          !!(desc._setter && desc._setter !== desc._getter) &&
          (0, _debug.assert)(
            'Computed properties that define a setter using the new syntax cannot be read-only',
            !(desc._setter && desc._setter !== desc._getter),
          );
        desc._readOnly = true;
        return this;
      }
      /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For example,
      computed property functions may close over variables that are then no longer
      available for introspection. You can pass a hash of these values to a
      computed property.
         Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         class Store {
        @computed().meta({ type: Person })
        get person() {
          let personId = this.personId;
          return Person.create({ id: personId });
        }
      }
      ```
         Classic Class Example:
         ```javascript
      import { computed } from '@ember/object';
      import Person from 'my-app/utils/person';
         const Store = EmberObject.extend({
        person: computed(function() {
          let personId = this.get('personId');
          return Person.create({ id: personId });
        }).meta({ type: Person })
      });
      ```
         The hash that you pass to the `meta()` function will be saved on the
      computed property descriptor under the `_meta` key. Ember runtime
      exposes a public API for retrieving these values from classes,
      via the `metaForProperty()` function.
         @method meta
      @param {Object} meta
      @chainable
      @public
    */

      meta(meta$$1) {
        var prop = descriptorForDecorator(this);

        if (arguments.length === 0) {
          return prop._meta || {};
        } else {
          prop._meta = meta$$1;
          return this;
        }
      } // TODO: Remove this when we can provide alternatives in the ecosystem to
      // addons such as ember-macro-helpers that use it.

      /** @internal */

      get _getter() {
        return descriptorForDecorator(this)._getter;
      } // TODO: Refactor this, this is an internal API only

      /** @internal */

      set enumerable(value) {
        descriptorForDecorator(this).enumerable = value;
      }
    }

    function computed() {
      for (
        var _len3 = arguments.length, args = new Array(_len3), _key4 = 0;
        _key4 < _len3;
        _key4++
      ) {
        args[_key4] = arguments[_key4];
      }

      true &&
        !!(
          isElementDescriptor(args.slice(0, 3)) &&
          args.length === 5 &&
          args[4] === true
        ) &&
        (0, _debug.assert)(
          `@computed can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: computed()`,
          !(
            isElementDescriptor(args.slice(0, 3)) &&
            args.length === 5 &&
            args[4] === true
          ),
        );

      if (isElementDescriptor(args)) {
        // SAFETY: We passed in the impl for this class
        var decorator = makeComputedDecorator(
          new ComputedProperty([]),
          ComputedDecoratorImpl,
        );
        return decorator(args[0], args[1], args[2]);
      } // SAFETY: We passed in the impl for this class

      return makeComputedDecorator(
        new ComputedProperty(args),
        ComputedDecoratorImpl,
      );
    }

    function autoComputed() {
      for (
        var _len4 = arguments.length, config = new Array(_len4), _key5 = 0;
        _key5 < _len4;
        _key5++
      ) {
        config[_key5] = arguments[_key5];
      }

      // SAFETY: We passed in the impl for this class
      return makeComputedDecorator(
        new AutoComputedProperty(config),
        ComputedDecoratorImpl,
      );
    }
    /**
    Allows checking if a given property on an object is a computed property. For the most part,
    this doesn't matter (you would normally just access the property directly and use its value),
    but for some tooling specific scenarios (e.g. the ember-inspector) it is important to
    differentiate if a property is a computed property or a "normal" property.
  
    This will work on either a class's prototype or an instance itself.
  
    @static
    @method isComputed
    @for @ember/debug
    @private
   */

    function isComputed(obj, key) {
      return Boolean(descriptorForProperty(obj, key));
    }

    function getCachedValueFor(obj, key) {
      var meta$$1 = (0, _meta2.peekMeta)(obj);

      if (meta$$1) {
        return meta$$1.valueFor(key);
      } else {
        return undefined;
      }
    }
    /**
  @module @ember/object
  */

    /**
    NOTE: This is a low-level method used by other parts of the API. You almost
    never want to call this method directly. Instead you should use
    `mixin()` to define new properties.
  
    Defines a property on an object. This method works much like the ES5
    `Object.defineProperty()` method except that it can also accept computed
    properties and other special descriptors.
  
    Normally this method takes only three parameters. However if you pass an
    instance of `Descriptor` as the third param then you can pass an
    optional value as the fourth parameter. This is often more efficient than
    creating new descriptor hashes for each property.
  
    ## Examples
  
    ```javascript
    import { defineProperty, computed } from '@ember/object';
  
    // ES5 compatible mode
    defineProperty(contact, 'firstName', {
      writable: true,
      configurable: false,
      enumerable: true,
      value: 'Charles'
    });
  
    // define a simple property
    defineProperty(contact, 'lastName', undefined, 'Jolley');
  
    // define a computed property
    defineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {
      return this.firstName+' '+this.lastName;
    }));
    ```
  
    @public
    @method defineProperty
    @static
    @for @ember/object
    @param {Object} obj the object to define this property on. This may be a prototype.
    @param {String} keyName the name of the property
    @param {Descriptor} [desc] an instance of `Descriptor` (typically a
      computed property) or an ES5 descriptor.
      You must provide this or `data` but not both.
    @param {*} [data] something other than a descriptor, that will
      become the explicit value of this property.
  */

    function defineProperty(obj, keyName, desc, data, _meta) {
      var meta$$1 = _meta === undefined ? (0, _meta2.meta)(obj) : _meta;
      var previousDesc = descriptorForProperty(obj, keyName, meta$$1);
      var wasDescriptor = previousDesc !== undefined;

      if (wasDescriptor) {
        previousDesc.teardown(obj, keyName, meta$$1);
      }

      if (isClassicDecorator(desc)) {
        defineDecorator(obj, keyName, desc, meta$$1);
      } else if (desc === null || desc === undefined) {
        defineValue(obj, keyName, data, wasDescriptor, true);
      } else {
        // fallback to ES5
        Object.defineProperty(obj, keyName, desc);
      } // if key is being watched, override chains that
      // were initialized with the prototype

      if (!meta$$1.isPrototypeMeta(obj)) {
        revalidateObservers(obj);
      }
    }

    function defineDecorator(obj, keyName, desc, meta$$1) {
      var propertyDesc;

      if (
        true
        /* DEBUG */
      ) {
        propertyDesc = desc(obj, keyName, undefined, meta$$1, true);
      } else {
        propertyDesc = desc(obj, keyName, undefined, meta$$1);
      }

      Object.defineProperty(obj, keyName, propertyDesc); // pass the decorator function forward for backwards compat

      return desc;
    }

    function defineValue(obj, keyName, value, wasDescriptor, enumerable) {
      if (enumerable === void 0) {
        enumerable = true;
      }

      if (wasDescriptor === true || enumerable === false) {
        Object.defineProperty(obj, keyName, {
          configurable: true,
          enumerable,
          writable: true,
          value,
        });
      } else {
        if (
          true
          /* DEBUG */
        ) {
          (0, _utils.setWithMandatorySetter)(obj, keyName, value);
        } else {
          obj[keyName] = value;
        }
      }

      return value;
    }

    var firstDotIndexCache = new _utils.Cache(1000, (key) => key.indexOf('.'));

    function isPath(path) {
      return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
    }

    var PROXY_CONTENT = (0, _utils.symbol)('PROXY_CONTENT');
    _exports.PROXY_CONTENT = PROXY_CONTENT;
    var getPossibleMandatoryProxyValue;

    if (
      true
      /* DEBUG */
    ) {
      getPossibleMandatoryProxyValue = function getPossibleMandatoryProxyValue(
        obj,
        keyName,
      ) {
        var content = obj[PROXY_CONTENT];

        if (content === undefined) {
          return obj[keyName];
        } else {
          /* global Reflect */
          return Reflect.get(content, keyName, obj);
        }
      };
    }

    function hasUnknownProperty(val) {
      return (
        typeof val === 'object' &&
        val !== null &&
        typeof val.unknownProperty === 'function'
      );
    }

    function get(obj, keyName) {
      true &&
        !(arguments.length === 2) &&
        (0, _debug.assert)(
          `Get must be called with two arguments; an object and a property key`,
          arguments.length === 2,
        );
      true &&
        !(obj !== undefined && obj !== null) &&
        (0, _debug.assert)(
          `Cannot call get with '${keyName}' on an undefined object.`,
          obj !== undefined && obj !== null,
        );
      true &&
        !(
          typeof keyName === 'string' ||
          (typeof keyName === 'number' && !isNaN(keyName))
        ) &&
        (0, _debug.assert)(
          `The key provided to get must be a string or number, you passed ${keyName}`,
          typeof keyName === 'string' ||
            (typeof keyName === 'number' && !isNaN(keyName)),
        );
      true &&
        !(
          typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0
        ) &&
        (0, _debug.assert)(
          `'this' in paths is not supported`,
          typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0,
        );
      return isPath(keyName) ? _getPath(obj, keyName) : _getProp(obj, keyName);
    }

    function _getProp(obj, keyName) {
      if (obj == null) {
        return;
      }

      var value;

      if (typeof obj === 'object' || typeof obj === 'function') {
        if (
          true
          /* DEBUG */
        ) {
          value = getPossibleMandatoryProxyValue(obj, keyName);
        } else {
          value = obj[keyName];
        }

        if (
          value === undefined &&
          typeof obj === 'object' &&
          !(keyName in obj) &&
          hasUnknownProperty(obj)
        ) {
          value = obj.unknownProperty(keyName);
        }

        if ((0, _validator.isTracking)()) {
          (0, _validator.consumeTag)((0, _validator.tagFor)(obj, keyName));

          if (Array.isArray(value) || (0, _utils.isEmberArray)(value)) {
            // Add the tag of the returned value if it is an array, since arrays
            // should always cause updates if they are consumed and then changed
            (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
          }
        }
      } else {
        // SAFETY: It should be ok to access properties on any non-nullish value
        value = obj[keyName];
      }

      return value;
    }

    function _getPath(obj, path) {
      var parts = typeof path === 'string' ? path.split('.') : path;

      for (var part of parts) {
        if (obj === undefined || obj === null || obj.isDestroyed) {
          return undefined;
        }

        obj = _getProp(obj, part);
      }

      return obj;
    }

    _getProp('foo', 'a');

    _getProp('foo', 1);

    _getProp({}, 'a');

    _getProp({}, 1);

    _getProp(
      {
        unknownProperty() {},
      },
      'a',
    );

    _getProp(
      {
        unknownProperty() {},
      },
      1,
    );

    get({}, 'foo');
    get({}, 'foo.bar');
    var fakeProxy = {};
    (0, _utils.setProxy)(fakeProxy);
    (0, _validator.track)(() => _getProp({}, 'a'));
    (0, _validator.track)(() => _getProp({}, 1));
    (0, _validator.track)(() =>
      _getProp(
        {
          a: [],
        },
        'a',
      ),
    );
    (0, _validator.track)(() =>
      _getProp(
        {
          a: fakeProxy,
        },
        'a',
      ),
    );
    /**
   @module @ember/object
  */

    /**
    Sets the value of a property on an object, respecting computed properties
    and notifying observers and other listeners of the change.
    If the specified property is not defined on the object and the object
    implements the `setUnknownProperty` method, then instead of setting the
    value of the property on the object, its `setUnknownProperty` handler
    will be invoked with the two parameters `keyName` and `value`.
  
    ```javascript
    import { set } from '@ember/object';
    set(obj, "name", value);
    ```
  
    @method set
    @static
    @for @ember/object
    @param {Object} obj The object to modify.
    @param {String} keyName The property key to set
    @param {Object} value The value to set
    @return {Object} the passed value.
    @public
  */

    function set(obj, keyName, value, tolerant) {
      true &&
        !(arguments.length === 3 || arguments.length === 4) &&
        (0, _debug.assert)(
          `Set must be called with three or four arguments; an object, a property key, a value and tolerant true/false`,
          arguments.length === 3 || arguments.length === 4,
        );
      true &&
        !((obj && typeof obj === 'object') || typeof obj === 'function') &&
        (0, _debug.assert)(
          `Cannot call set with '${keyName}' on an undefined object.`,
          (obj && typeof obj === 'object') || typeof obj === 'function',
        );
      true &&
        !(
          typeof keyName === 'string' ||
          (typeof keyName === 'number' && !isNaN(keyName))
        ) &&
        (0, _debug.assert)(
          `The key provided to set must be a string or number, you passed ${keyName}`,
          typeof keyName === 'string' ||
            (typeof keyName === 'number' && !isNaN(keyName)),
        );
      true &&
        !(
          typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0
        ) &&
        (0, _debug.assert)(
          `'this' in paths is not supported`,
          typeof keyName !== 'string' || keyName.lastIndexOf('this.', 0) !== 0,
        );

      if (obj.isDestroyed) {
        true &&
          !tolerant &&
          (0, _debug.assert)(
            `calling set on destroyed object: ${(0, _utils.toString)(
              obj,
            )}.${keyName} = ${(0, _utils.toString)(value)}`,
            tolerant,
          );
        return value;
      }

      return isPath(keyName)
        ? _setPath(obj, keyName, value, tolerant)
        : _setProp(obj, keyName, value);
    }

    function _setProp(obj, keyName, value) {
      var descriptor = (0, _utils.lookupDescriptor)(obj, keyName);

      if (descriptor !== null && COMPUTED_SETTERS.has(descriptor.set)) {
        obj[keyName] = value;
        return value;
      }

      var currentValue;

      if (
        true
        /* DEBUG */
      ) {
        currentValue = getPossibleMandatoryProxyValue(obj, keyName);
      } else {
        currentValue = obj[keyName];
      }

      if (
        currentValue === undefined &&
        'object' === typeof obj &&
        !(keyName in obj) &&
        typeof obj.setUnknownProperty === 'function'
      ) {
        /* unknown property */
        obj.setUnknownProperty(keyName, value);
      } else {
        if (
          true
          /* DEBUG */
        ) {
          (0, _utils.setWithMandatorySetter)(obj, keyName, value);
        } else {
          obj[keyName] = value;
        }

        if (currentValue !== value) {
          notifyPropertyChange(obj, keyName);
        }
      }

      return value;
    }

    function _setPath(root, path, value, tolerant) {
      var parts = path.split('.');
      var keyName = parts.pop();
      true &&
        !(keyName.trim().length > 0) &&
        (0, _debug.assert)(
          'Property set failed: You passed an empty path',
          keyName.trim().length > 0,
        );

      var newRoot = _getPath(root, parts);

      if (newRoot !== null && newRoot !== undefined) {
        return set(newRoot, keyName, value);
      } else if (!tolerant) {
        throw new _error.default(
          `Property set failed: object in path "${parts.join(
            '.',
          )}" could not be found.`,
        );
      }
    }
    /**
    Error-tolerant form of `set`. Will not blow up if any part of the
    chain is `undefined`, `null`, or destroyed.
  
    This is primarily used when syncing bindings, which may try to update after
    an object has been destroyed.
  
    ```javascript
    import { trySet } from '@ember/object';
  
    let obj = { name: "Zoey" };
    trySet(obj, "contacts.twitter", "@emberjs");
    ```
  
    @method trySet
    @static
    @for @ember/object
    @param {Object} root The object to modify.
    @param {String} path The property path to set
    @param {Object} value The value to set
    @public
  */

    function trySet(root, path, value) {
      return set(root, path, value, true);
    }

    function alias(altKey) {
      true &&
        !!isElementDescriptor(Array.prototype.slice.call(arguments)) &&
        (0, _debug.assert)(
          'You attempted to use @alias as a decorator directly, but it requires a `altKey` parameter',
          !isElementDescriptor(Array.prototype.slice.call(arguments)),
        ); // SAFETY: We passed in the impl for this class

      return makeComputedDecorator(
        new AliasedProperty(altKey),
        AliasDecoratorImpl,
      );
    } // TODO: This class can be svelted once `meta` has been deprecated

    class AliasDecoratorImpl extends Function {
      readOnly() {
        descriptorForDecorator(this).readOnly();
        return this;
      }

      oneWay() {
        descriptorForDecorator(this).oneWay();
        return this;
      }

      meta(meta$$1) {
        var prop = descriptorForDecorator(this);

        if (arguments.length === 0) {
          return prop._meta || {};
        } else {
          prop._meta = meta$$1;
        }
      }
    }

    class AliasedProperty extends ComputedDescriptor {
      constructor(altKey) {
        super();
        this.altKey = altKey;
      }

      setup(obj, keyName, propertyDesc, meta$$1) {
        true &&
          !(this.altKey !== keyName) &&
          (0, _debug.assert)(
            `Setting alias '${keyName}' on self`,
            this.altKey !== keyName,
          );
        super.setup(obj, keyName, propertyDesc, meta$$1);
        CHAIN_PASS_THROUGH.add(this);
      }

      get(obj, keyName) {
        var ret;
        var meta$$1 = (0, _meta2.meta)(obj);
        var tagMeta = (0, _validator.tagMetaFor)(obj);
        var propertyTag = (0, _validator.tagFor)(obj, keyName, tagMeta); // We don't use the tag since CPs are not automatic, we just want to avoid
        // anything tracking while we get the altKey

        (0, _validator.untrack)(() => {
          ret = get(obj, this.altKey);
        });
        var lastRevision = meta$$1.revisionFor(keyName);

        if (
          lastRevision === undefined ||
          !(0, _validator.validateTag)(propertyTag, lastRevision)
        ) {
          (0, _validator.updateTag)(
            propertyTag,
            getChainTagsForKey(obj, this.altKey, tagMeta, meta$$1),
          );
          meta$$1.setRevisionFor(
            keyName,
            (0, _validator.valueForTag)(propertyTag),
          );
          finishLazyChains(meta$$1, keyName, ret);
        }

        (0, _validator.consumeTag)(propertyTag);
        return ret;
      }

      set(obj, _keyName, value) {
        return set(obj, this.altKey, value);
      }

      readOnly() {
        this.set = AliasedProperty_readOnlySet;
      }

      oneWay() {
        this.set = AliasedProperty_oneWaySet;
      }
    }

    function AliasedProperty_readOnlySet(obj, keyName) {
      throw new _error.default(
        `Cannot set read-only property '${keyName}' on object: ${(0,
        _utils.inspect)(obj)}`,
      );
    }

    function AliasedProperty_oneWaySet(obj, keyName, value) {
      defineProperty(obj, keyName, null);
      return set(obj, keyName, value);
    }
    /**
  @module ember
  */

    /**
    Used internally to allow changing properties in a backwards compatible way, and print a helpful
    deprecation warning.
  
    @method deprecateProperty
    @param {Object} object The object to add the deprecated property to.
    @param {String} deprecatedKey The property to add (and print deprecation warnings upon accessing).
    @param {String} newKey The property that will be aliased.
    @private
    @since 1.7.0
  */

    function deprecateProperty(object, deprecatedKey, newKey, options) {
      function _deprecate() {
        true &&
          !false &&
          (0, _debug.deprecate)(
            `Usage of \`${deprecatedKey}\` is deprecated, use \`${newKey}\` instead.`,
            false,
            options,
          );
      }

      Object.defineProperty(object, deprecatedKey, {
        configurable: true,
        enumerable: false,

        set(value) {
          _deprecate();

          set(this, newKey, value);
        },

        get() {
          _deprecate();

          return get(this, newKey);
        },
      });
    }

    var EACH_PROXIES = new WeakMap();

    function eachProxyArrayWillChange(array, idx, removedCnt, addedCnt) {
      var eachProxy = EACH_PROXIES.get(array);

      if (eachProxy !== undefined) {
        eachProxy.arrayWillChange(array, idx, removedCnt, addedCnt);
      }
    }

    function eachProxyArrayDidChange(array, idx, removedCnt, addedCnt) {
      var eachProxy = EACH_PROXIES.get(array);

      if (eachProxy !== undefined) {
        eachProxy.arrayDidChange(array, idx, removedCnt, addedCnt);
      }
    }
    /**
   @module @ember/utils
  */

    /**
    Returns true if the passed value is null or undefined. This avoids errors
    from JSLint complaining about use of ==, which can be technically
    confusing.
  
    ```javascript
    isNone(null);          // true
    isNone(undefined);     // true
    isNone('');            // false
    isNone([]);            // false
    isNone(function() {}); // false
    ```
  
    @method isNone
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */

    function isNone(obj) {
      return obj === null || obj === undefined;
    }
    /**
   @module @ember/utils
  */

    /**
    Verifies that a value is `null` or `undefined`, an empty string, or an empty
    array.
  
    Constrains the rules on `isNone` by returning true for empty strings and
    empty arrays.
  
    If the value is an object with a `size` property of type number, it is used
    to check emptiness.
  
    ```javascript
    isEmpty(null);             // true
    isEmpty(undefined);        // true
    isEmpty('');               // true
    isEmpty([]);               // true
    isEmpty({ size: 0});       // true
    isEmpty({});               // false
    isEmpty('Adam Hawkins');   // false
    isEmpty([0,1,2]);          // false
    isEmpty('\n\t');           // false
    isEmpty('  ');             // false
    isEmpty({ size: 1 })       // false
    isEmpty({ size: () => 0 }) // false
    ```
  
    @method isEmpty
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @public
  */

    function isEmpty(obj) {
      if (obj === null || obj === undefined) {
        return true;
      }

      if (!hasUnknownProperty(obj) && typeof obj.size === 'number') {
        return !obj.size;
      }

      if (typeof obj === 'object') {
        var size = get(obj, 'size');

        if (typeof size === 'number') {
          return !size;
        }

        var length = get(obj, 'length');

        if (typeof length === 'number') {
          return !length;
        }
      }

      if (typeof obj.length === 'number' && typeof obj !== 'function') {
        return !obj.length;
      }

      return false;
    }
    /**
   @module @ember/utils
  */

    /**
    A value is blank if it is empty or a whitespace string.
  
    ```javascript
    import { isBlank } from '@ember/utils';
  
    isBlank(null);            // true
    isBlank(undefined);       // true
    isBlank('');              // true
    isBlank([]);              // true
    isBlank('\n\t');          // true
    isBlank('  ');            // true
    isBlank({});              // false
    isBlank('\n\t Hello');    // false
    isBlank('Hello world');   // false
    isBlank([1,2,3]);         // false
    ```
  
    @method isBlank
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.5.0
    @public
  */

    function isBlank(obj) {
      return (
        isEmpty(obj) || (typeof obj === 'string' && /\S/.test(obj) === false)
      );
    }
    /**
   @module @ember/utils
  */

    /**
    A value is present if it not `isBlank`.
  
    ```javascript
    isPresent(null);            // false
    isPresent(undefined);       // false
    isPresent('');              // false
    isPresent('  ');            // false
    isPresent('\n\t');          // false
    isPresent([]);              // false
    isPresent({ length: 0 });   // false
    isPresent(false);           // true
    isPresent(true);            // true
    isPresent('string');        // true
    isPresent(0);               // true
    isPresent(function() {});   // true
    isPresent({});              // true
    isPresent('\n\t Hello');    // true
    isPresent([1, 2, 3]);       // true
    ```
  
    @method isPresent
    @static
    @for @ember/utils
    @param {Object} obj Value to test
    @return {Boolean}
    @since 1.8.0
    @public
  */

    function isPresent(obj) {
      return !isBlank(obj);
    }
    /**
   @module ember
  */

    /**
    Helper class that allows you to register your library with Ember.
  
    Singleton created at `Ember.libraries`.
  
    @class Libraries
    @constructor
    @private
  */

    class Libraries {
      constructor() {
        this._registry = [];
        this._coreLibIndex = 0;
      }

      _getLibraryByName(name) {
        var libs = this._registry;

        for (var lib of libs) {
          if (lib.name === name) {
            return lib;
          }
        }

        return undefined;
      }

      register(name, version, isCoreLibrary) {
        var index = this._registry.length;

        if (!this._getLibraryByName(name)) {
          if (isCoreLibrary) {
            index = this._coreLibIndex++;
          }

          this._registry.splice(index, 0, {
            name,
            version,
          });
        } else {
          true &&
            (0, _debug.warn)(
              `Library "${name}" is already registered with Ember.`,
              false,
              {
                id: 'ember-metal.libraries-register',
              },
            );
        }
      }

      registerCoreLibrary(name, version) {
        this.register(name, version, true);
      }

      deRegister(name) {
        var lib = this._getLibraryByName(name);

        var index;

        if (lib) {
          index = this._registry.indexOf(lib);

          this._registry.splice(index, 1);
        }
      }
    }

    _exports.Libraries = Libraries;

    if (
      true
      /* DEBUG */
    ) {
      Libraries.prototype.logVersions = function () {
        var libs = this._registry;
        var nameLengths = libs.map((item) => get(item, 'name.length'));
        true &&
          !(
            nameLengths instanceof Array &&
            nameLengths.every((n) => typeof n === 'number')
          ) &&
          (0, _debug.assert)(
            'nameLengths is number array',
            nameLengths instanceof Array &&
              nameLengths.every((n) => typeof n === 'number'),
          );
        var maxNameLength = Math.max.apply(null, nameLengths);
        (0, _debug.debug)('-------------------------------');

        for (var lib of libs) {
          var spaces = new Array(maxNameLength - lib.name.length + 1).join(' ');
          (0, _debug.debug)([lib.name, spaces, ' : ', lib.version].join(''));
        }

        (0, _debug.debug)('-------------------------------');
      };
    }

    var LIBRARIES = new Libraries();
    _exports.libraries = LIBRARIES;
    LIBRARIES.registerCoreLibrary('Ember', _version.default);

    function getProperties(obj, keys) {
      var ret = {};
      var propertyNames;
      var i = 1;

      if (arguments.length === 2 && Array.isArray(keys)) {
        i = 0;
        propertyNames = arguments[1];
      } else {
        propertyNames = Array.from(arguments);
      }

      for (; i < propertyNames.length; i++) {
        ret[propertyNames[i]] = get(obj, propertyNames[i]);
      }

      return ret;
    }
    /**
   @module @ember/object
  */

    /**
    Set a list of properties on an object. These properties are set inside
    a single `beginPropertyChanges` and `endPropertyChanges` batch, so
    observers will be buffered.
  
    ```javascript
    import EmberObject from '@ember/object';
    let anObject = EmberObject.create();
  
    anObject.setProperties({
      firstName: 'Stanley',
      lastName: 'Stuart',
      age: 21
    });
    ```
  
    @method setProperties
    @static
    @for @ember/object
    @param obj
    @param {Object} properties
    @return properties
    @public
  */

    function setProperties(obj, properties) {
      if (properties === null || typeof properties !== 'object') {
        return properties;
      }

      changeProperties(() => {
        var props = Object.keys(properties);

        for (var propertyName of props) {
          set(obj, propertyName, properties[propertyName]);
        }
      });
      return properties;
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var searchDisabled = false;
    var flags = {
      _set: 0,
      _unprocessedNamespaces: false,

      get unprocessedNamespaces() {
        return this._unprocessedNamespaces;
      },

      set unprocessedNamespaces(v) {
        this._set++;
        this._unprocessedNamespaces = v;
      },
    };
    var unprocessedMixins = false;
    var NAMESPACES = [];
    _exports.NAMESPACES = NAMESPACES;
    var NAMESPACES_BY_ID = Object.create(null);
    _exports.NAMESPACES_BY_ID = NAMESPACES_BY_ID;

    function addNamespace(namespace) {
      flags.unprocessedNamespaces = true;
      NAMESPACES.push(namespace);
    }

    function removeNamespace(namespace) {
      var name = (0, _utils.getName)(namespace);
      delete NAMESPACES_BY_ID[name];
      NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);

      if (
        name in _environment.context.lookup &&
        namespace === _environment.context.lookup[name]
      ) {
        _environment.context.lookup[name] = undefined;
      }
    }

    function findNamespaces() {
      if (!flags.unprocessedNamespaces) {
        return;
      }

      var lookup = _environment.context.lookup;
      var keys = Object.keys(lookup);

      for (var key of keys) {
        // Only process entities that start with uppercase A-Z
        if (!isUppercase(key.charCodeAt(0))) {
          continue;
        }

        var obj = tryIsNamespace(lookup, key);

        if (obj) {
          (0, _utils.setName)(obj, key);
        }
      }
    }

    function findNamespace(name) {
      if (!searchDisabled) {
        processAllNamespaces();
      }

      return NAMESPACES_BY_ID[name];
    }

    function processNamespace(namespace) {
      _processNamespace([namespace.toString()], namespace, new Set());
    }

    function processAllNamespaces() {
      var unprocessedNamespaces = flags.unprocessedNamespaces;

      if (unprocessedNamespaces) {
        findNamespaces();
        flags.unprocessedNamespaces = false;
      }

      if (unprocessedNamespaces || unprocessedMixins) {
        var namespaces = NAMESPACES;

        for (var namespace of namespaces) {
          processNamespace(namespace);
        }

        unprocessedMixins = false;
      }
    }

    function isSearchDisabled() {
      return searchDisabled;
    }

    function setSearchDisabled(flag) {
      searchDisabled = Boolean(flag);
    }

    function setUnprocessedMixins() {
      unprocessedMixins = true;
    }

    function _processNamespace(paths, root, seen) {
      var idx = paths.length;
      var id = paths.join('.');
      NAMESPACES_BY_ID[id] = root;
      (0, _utils.setName)(root, id); // Loop over all of the keys in the namespace, looking for classes

      for (var key in root) {
        if (!hasOwnProperty.call(root, key)) {
          continue;
        }

        var obj = root[key]; // If we are processing the `Ember` namespace, for example, the
        // `paths` will start with `["Ember"]`. Every iteration through
        // the loop will update the **second** element of this list with
        // the key, so processing `Ember.View` will make the Array
        // `['Ember', 'View']`.

        paths[idx] = key; // If we have found an unprocessed class

        if (obj && (0, _utils.getName)(obj) === void 0) {
          // Replace the class' `toString` with the dot-separated path
          (0, _utils.setName)(obj, paths.join('.')); // Support nested namespaces
        } else if (obj && isNamespace(obj)) {
          // Skip aliased namespaces
          if (seen.has(obj)) {
            continue;
          }

          seen.add(obj); // Process the child namespace

          _processNamespace(paths, obj, seen);
        }
      }

      paths.length = idx; // cut out last item
    }

    function isNamespace(obj) {
      return obj != null && typeof obj === 'object' && obj.isNamespace;
    }

    function isUppercase(code) {
      return (
        code >= 65 && code <= 90 // A
      ); // Z
    }

    function tryIsNamespace(lookup, prop) {
      try {
        var obj = lookup[prop];
        return (
          ((obj !== null && typeof obj === 'object') ||
            typeof obj === 'function') &&
          obj.isNamespace &&
          obj
        );
      } catch (e) {
        // continue
      }
    }
    /**
  @module @ember/object
  */

    var a_concat = Array.prototype.concat;
    var { isArray } = Array;

    function extractAccessors(properties) {
      if (properties !== undefined) {
        for (var key of Object.keys(properties)) {
          var desc = Object.getOwnPropertyDescriptor(properties, key);

          if (desc.get !== undefined || desc.set !== undefined) {
            Object.defineProperty(properties, key, {
              value: nativeDescDecorator(desc),
            });
          }
        }
      }

      return properties;
    }

    function concatenatedMixinProperties(concatProp, props, values, base) {
      // reset before adding each new mixin to pickup concats from previous
      var concats = values[concatProp] || base[concatProp];

      if (props[concatProp]) {
        concats = concats
          ? a_concat.call(concats, props[concatProp])
          : props[concatProp];
      }

      return concats;
    }

    function giveDecoratorSuper(key, decorator, property, descs) {
      if (property === true) {
        return decorator;
      }

      var originalGetter = property._getter;

      if (originalGetter === undefined) {
        return decorator;
      }

      var superDesc = descs[key]; // Check to see if the super property is a decorator first, if so load its descriptor

      var superProperty =
        typeof superDesc === 'function'
          ? descriptorForDecorator(superDesc)
          : superDesc;

      if (superProperty === undefined || superProperty === true) {
        return decorator;
      }

      var superGetter = superProperty._getter;

      if (superGetter === undefined) {
        return decorator;
      }

      var get = (0, _utils.wrap)(originalGetter, superGetter);
      var set;
      var originalSetter = property._setter;
      var superSetter = superProperty._setter;

      if (superSetter !== undefined) {
        if (originalSetter !== undefined) {
          set = (0, _utils.wrap)(originalSetter, superSetter);
        } else {
          // If the super property has a setter, we default to using it no matter what.
          // This is clearly very broken and weird, but it's what was here so we have
          // to keep it until the next major at least.
          //
          // TODO: Add a deprecation here.
          set = superSetter;
        }
      } else {
        set = originalSetter;
      } // only create a new CP if we must

      if (get !== originalGetter || set !== originalSetter) {
        // Since multiple mixins may inherit from the same parent, we need
        // to clone the computed property so that other mixins do not receive
        // the wrapped version.
        var dependentKeys = property._dependentKeys || [];
        var newProperty = new ComputedProperty([
          ...dependentKeys,
          {
            get,
            set,
          },
        ]);
        newProperty._readOnly = property._readOnly;
        newProperty._meta = property._meta;
        newProperty.enumerable = property.enumerable; // SAFETY: We passed in the impl for this class

        return makeComputedDecorator(newProperty, ComputedProperty);
      }

      return decorator;
    }

    function giveMethodSuper(key, method, values, descs) {
      // Methods overwrite computed properties, and do not call super to them.
      if (descs[key] !== undefined) {
        return method;
      } // Find the original method in a parent mixin

      var superMethod = values[key]; // Only wrap the new method if the original method was a function

      if (typeof superMethod === 'function') {
        return (0, _utils.wrap)(method, superMethod);
      }

      return method;
    }

    function applyConcatenatedProperties(key, value, values) {
      var baseValue = values[key];
      var ret = (0, _utils.makeArray)(baseValue).concat(
        (0, _utils.makeArray)(value),
      );

      if (
        true
        /* DEBUG */
      ) {
        // it is possible to use concatenatedProperties with strings (which cannot be frozen)
        // only freeze objects...
        if (typeof ret === 'object' && ret !== null) {
          // prevent mutating `concatenatedProperties` array after it is applied
          Object.freeze(ret);
        }
      }

      return ret;
    }

    function applyMergedProperties(key, value, values) {
      var baseValue = values[key];
      true &&
        !!isArray(value) &&
        (0, _debug.assert)(
          `You passed in \`${JSON.stringify(
            value,
          )}\` as the value for \`${key}\` but \`${key}\` cannot be an Array`,
          !isArray(value),
        );

      if (!baseValue) {
        return value;
      }

      var newBase = Object.assign({}, baseValue);
      var hasFunction = false;
      var props = Object.keys(value);

      for (var prop of props) {
        var propValue = value[prop];

        if (typeof propValue === 'function') {
          hasFunction = true;
          newBase[prop] = giveMethodSuper(prop, propValue, baseValue, {});
        } else {
          newBase[prop] = propValue;
        }
      }

      if (hasFunction) {
        newBase._super = _utils.ROOT;
      }

      return newBase;
    }

    function mergeMixins(
      mixins,
      meta$$1,
      descs,
      values,
      base,
      keys,
      keysWithSuper,
    ) {
      var currentMixin;

      for (var i = 0; i < mixins.length; i++) {
        currentMixin = mixins[i];
        true &&
          !(
            typeof currentMixin === 'object' &&
            currentMixin !== null &&
            Object.prototype.toString.call(currentMixin) !== '[object Array]'
          ) &&
          (0, _debug.assert)(
            `Expected hash or Mixin instance, got ${Object.prototype.toString.call(
              currentMixin,
            )}`,
            typeof currentMixin === 'object' &&
              currentMixin !== null &&
              Object.prototype.toString.call(currentMixin) !== '[object Array]',
          );

        if (MIXINS.has(currentMixin)) {
          if (meta$$1.hasMixin(currentMixin)) {
            continue;
          }

          meta$$1.addMixin(currentMixin);
          var { properties, mixins: _mixins } = currentMixin;

          if (properties !== undefined) {
            mergeProps(
              meta$$1,
              properties,
              descs,
              values,
              base,
              keys,
              keysWithSuper,
            );
          } else if (_mixins !== undefined) {
            mergeMixins(
              _mixins,
              meta$$1,
              descs,
              values,
              base,
              keys,
              keysWithSuper,
            );

            if (
              currentMixin instanceof Mixin &&
              currentMixin._without !== undefined
            ) {
              currentMixin._without.forEach((keyName) => {
                // deleting the key means we won't process the value
                var index = keys.indexOf(keyName);

                if (index !== -1) {
                  keys.splice(index, 1);
                }
              });
            }
          }
        } else {
          mergeProps(
            meta$$1,
            currentMixin,
            descs,
            values,
            base,
            keys,
            keysWithSuper,
          );
        }
      }
    }

    function mergeProps(
      meta$$1,
      props,
      descs,
      values,
      base,
      keys,
      keysWithSuper,
    ) {
      var concats = concatenatedMixinProperties(
        'concatenatedProperties',
        props,
        values,
        base,
      );
      var mergings = concatenatedMixinProperties(
        'mergedProperties',
        props,
        values,
        base,
      );
      var propKeys = Object.keys(props);

      for (var key of propKeys) {
        var value = props[key];
        if (value === undefined) continue;

        if (keys.indexOf(key) === -1) {
          keys.push(key);
          var desc = meta$$1.peekDescriptors(key);

          if (desc === undefined) {
            // The superclass did not have a CP, which means it may have
            // observers or listeners on that property.
            var prev = (values[key] = base[key]);

            if (typeof prev === 'function') {
              updateObserversAndListeners(base, key, prev, false);
            }
          } else {
            descs[key] = desc; // The super desc will be overwritten on descs, so save off the fact that
            // there was a super so we know to Object.defineProperty when writing
            // the value

            keysWithSuper.push(key);
            desc.teardown(base, key, meta$$1);
          }
        }

        var isFunction = typeof value === 'function';

        if (isFunction) {
          var _desc2 = descriptorForDecorator(value);

          if (_desc2 !== undefined) {
            // Wrap descriptor function to implement _super() if needed
            descs[key] = giveDecoratorSuper(key, value, _desc2, descs);
            values[key] = undefined;
            continue;
          }
        }

        if (
          (concats && concats.indexOf(key) >= 0) ||
          key === 'concatenatedProperties' ||
          key === 'mergedProperties'
        ) {
          value = applyConcatenatedProperties(key, value, values);
        } else if (mergings && mergings.indexOf(key) > -1) {
          value = applyMergedProperties(key, value, values);
        } else if (isFunction) {
          value = giveMethodSuper(key, value, values, descs);
        }

        values[key] = value;
        descs[key] = undefined;
      }
    }

    function updateObserversAndListeners(obj, key, fn, add) {
      var meta$$1 = (0, _utils.observerListenerMetaFor)(fn);
      if (meta$$1 === undefined) return;
      var { observers, listeners } = meta$$1;

      if (observers !== undefined) {
        var updateObserver = add ? addObserver : removeObserver;

        for (var path of observers.paths) {
          updateObserver(obj, path, null, key, observers.sync);
        }
      }

      if (listeners !== undefined) {
        var updateListener = add ? addListener : removeListener;

        for (var listener of listeners) {
          updateListener(obj, listener, null, key);
        }
      }
    }

    function applyMixin(obj, mixins, _hideKeys) {
      if (_hideKeys === void 0) {
        _hideKeys = false;
      }

      var descs = Object.create(null);
      var values = Object.create(null);
      var meta$$1 = (0, _meta2.meta)(obj);
      var keys = [];
      var keysWithSuper = [];
      obj._super = _utils.ROOT; // Go through all mixins and hashes passed in, and:
      //
      // * Handle concatenated properties
      // * Handle merged properties
      // * Set up _super wrapping if necessary
      // * Set up computed property descriptors
      // * Copying `toString` in broken browsers

      mergeMixins(mixins, meta$$1, descs, values, obj, keys, keysWithSuper);

      for (var key of keys) {
        var value = values[key];
        var desc = descs[key];

        if (value !== undefined) {
          if (typeof value === 'function') {
            updateObserversAndListeners(obj, key, value, true);
          }

          defineValue(
            obj,
            key,
            value,
            keysWithSuper.indexOf(key) !== -1,
            !_hideKeys,
          );
        } else if (desc !== undefined) {
          defineDecorator(obj, key, desc, meta$$1);
        }
      }

      if (!meta$$1.isPrototypeMeta(obj)) {
        revalidateObservers(obj);
      }

      return obj;
    }
    /**
    @method mixin
    @param obj
    @param mixins*
    @return obj
    @private
  */

    function mixin(obj) {
      for (
        var _len5 = arguments.length,
          args = new Array(_len5 > 1 ? _len5 - 1 : 0),
          _key6 = 1;
        _key6 < _len5;
        _key6++
      ) {
        args[_key6 - 1] = arguments[_key6];
      }

      applyMixin(obj, args);
      return obj;
    }

    var MIXINS = new _util._WeakSet();
    /**
    The `Mixin` class allows you to create mixins, whose properties can be
    added to other classes. For instance,
  
    ```javascript
    import Mixin from '@ember/object/mixin';
  
    const EditableMixin = Mixin.create({
      edit() {
        console.log('starting to edit');
        this.set('isEditing', true);
      },
      isEditing: false
    });
    ```
  
    ```javascript
    import EmberObject from '@ember/object';
    import EditableMixin from '../mixins/editable';
  
    // Mix mixins into classes by passing them as the first arguments to
    // `.extend.`
    const Comment = EmberObject.extend(EditableMixin, {
      post: null
    });
  
    let comment = Comment.create({
      post: somePost
    });
  
    comment.edit(); // outputs 'starting to edit'
    ```
  
    Note that Mixins are created with `Mixin.create`, not
    `Mixin.extend`.
  
    Note that mixins extend a constructor's prototype so arrays and object literals
    defined as properties will be shared amongst objects that implement the mixin.
    If you want to define a property in a mixin that is not shared, you can define
    it either as a computed property or have it be created on initialization of the object.
  
    ```javascript
    // filters array will be shared amongst any object implementing mixin
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    const FilterableMixin = Mixin.create({
      filters: A()
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
    import { computed } from '@ember/object';
  
    // filters will be a separate array for every object implementing the mixin
    const FilterableMixin = Mixin.create({
      filters: computed(function() {
        return A();
      })
    });
    ```
  
    ```javascript
    import Mixin from '@ember/object/mixin';
    import { A } from '@ember/array';
  
    // filters will be created as a separate array during the object's initialization
    const Filterable = Mixin.create({
      filters: null,
  
      init() {
        this._super(...arguments);
        this.set("filters", A());
      }
    });
    ```
  
    @class Mixin
    @public
  */

    class Mixin {
      /** @internal */
      constructor(mixins, properties) {
        MIXINS.add(this);
        this.properties = extractAccessors(properties);
        this.mixins = buildMixinsArray(mixins);
        this.ownerConstructor = undefined;
        this._without = undefined;

        if (
          true
          /* DEBUG */
        ) {
          // Eagerly add INIT_FACTORY to avoid issues in DEBUG as a result of Object.seal(mixin)
          this[_container.INIT_FACTORY] = null;
          /*
          In debug builds, we seal mixins to help avoid performance pitfalls.
                 In IE11 there is a quirk that prevents sealed objects from being added
          to a WeakMap. Unfortunately, the mixin system currently relies on
          weak maps in `guidFor`, so we need to prime the guid cache weak map.
        */

          (0, _utils.guidFor)(this);

          if (Mixin._disableDebugSeal !== true) {
            Object.seal(this);
          }
        }
      }
      /**
      @method create
      @for @ember/object/mixin
      @static
      @param arguments*
      @public
    */

      static create() {
        setUnprocessedMixins();
        var M = this;

        for (
          var _len6 = arguments.length, args = new Array(_len6), _key7 = 0;
          _key7 < _len6;
          _key7++
        ) {
          args[_key7] = arguments[_key7];
        }

        return new M(args, undefined);
      } // returns the mixins currently applied to the specified object
      // TODO: Make `mixin`

      /** @internal */

      static mixins(obj) {
        var meta$$1 = (0, _meta2.peekMeta)(obj);
        var ret = [];

        if (meta$$1 === null) {
          return ret;
        }

        meta$$1.forEachMixins((currentMixin) => {
          // skip primitive mixins since these are always anonymous
          if (!currentMixin.properties) {
            ret.push(currentMixin);
          }
        });
        return ret;
      }
      /**
      @method reopen
      @param arguments*
      @private
      @internal
    */

      reopen() {
        for (
          var _len7 = arguments.length, args = new Array(_len7), _key8 = 0;
          _key8 < _len7;
          _key8++
        ) {
          args[_key8] = arguments[_key8];
        }

        if (args.length === 0) {
          return;
        }

        if (this.properties) {
          var currentMixin = new Mixin(undefined, this.properties);
          this.properties = undefined;
          this.mixins = [currentMixin];
        } else if (!this.mixins) {
          this.mixins = [];
        }

        this.mixins = this.mixins.concat(buildMixinsArray(args));
        return this;
      }
      /**
      @method apply
      @param obj
      @return applied object
      @private
      @internal
    */

      apply(obj, _hideKeys) {
        if (_hideKeys === void 0) {
          _hideKeys = false;
        }

        // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
        // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
        // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
        //
        // _hideKeys disables enumerablity when applying the mixin. This is a hack, and we should stop mutating the array prototype by default 😫
        return applyMixin(obj, [this], _hideKeys);
      }
      /** @internal */

      applyPartial(obj) {
        return applyMixin(obj, [this]);
      }
      /**
      @method detect
      @param obj
      @return {Boolean}
      @private
      @internal
    */

      detect(obj) {
        if (typeof obj !== 'object' || obj === null) {
          return false;
        }

        if (MIXINS.has(obj)) {
          return _detect(obj, this);
        }

        var meta$$1 = (0, _meta2.peekMeta)(obj);

        if (meta$$1 === null) {
          return false;
        }

        return meta$$1.hasMixin(this);
      }
      /** @internal */

      without() {
        var ret = new Mixin([this]);

        for (
          var _len8 = arguments.length, args = new Array(_len8), _key9 = 0;
          _key9 < _len8;
          _key9++
        ) {
          args[_key9] = arguments[_key9];
        }

        ret._without = args;
        return ret;
      }
      /** @internal */

      keys() {
        var keys = _keys(this);

        true &&
          !keys &&
          (0, _debug.assert)('[BUG] Missing keys for mixin!', keys);
        return keys;
      }
      /** @internal */

      toString() {
        return '(unknown mixin)';
      }
    }

    _exports.Mixin = Mixin;

    if (
      true
      /* DEBUG */
    ) {
      Object.defineProperty(Mixin, '_disableDebugSeal', {
        configurable: true,
        enumerable: false,
        writable: true,
        value: false,
      });
    }

    function buildMixinsArray(mixins) {
      var length = (mixins && mixins.length) || 0;
      var m = undefined;

      if (length > 0) {
        m = new Array(length);

        for (var i = 0; i < length; i++) {
          var x = mixins[i];
          true &&
            !(
              typeof x === 'object' &&
              x !== null &&
              Object.prototype.toString.call(x) !== '[object Array]'
            ) &&
            (0, _debug.assert)(
              `Expected hash or Mixin instance, got ${Object.prototype.toString.call(
                x,
              )}`,
              typeof x === 'object' &&
                x !== null &&
                Object.prototype.toString.call(x) !== '[object Array]',
            );

          if (MIXINS.has(x)) {
            m[i] = x;
          } else {
            m[i] = new Mixin(undefined, x);
          }
        }
      }

      return m;
    }

    if (
      true
      /* DEBUG */
    ) {
      Object.seal(Mixin.prototype);
    }

    function _detect(curMixin, targetMixin, seen) {
      if (seen === void 0) {
        seen = new Set();
      }

      if (seen.has(curMixin)) {
        return false;
      }

      seen.add(curMixin);

      if (curMixin === targetMixin) {
        return true;
      }

      var mixins = curMixin.mixins;

      if (mixins) {
        return mixins.some((mixin) => _detect(mixin, targetMixin, seen));
      }

      return false;
    }

    function _keys(mixin, ret, seen) {
      if (ret === void 0) {
        ret = new Set();
      }

      if (seen === void 0) {
        seen = new Set();
      }

      if (seen.has(mixin)) {
        return;
      }

      seen.add(mixin);

      if (mixin.properties) {
        var props = Object.keys(mixin.properties);

        for (var prop of props) {
          ret.add(prop);
        }
      } else if (mixin.mixins) {
        mixin.mixins.forEach((x) => _keys(x, ret, seen));
      }

      return ret;
    }
    /**
    Specify a method that observes property changes.
  
    ```javascript
    import EmberObject from '@ember/object';
    import { observer } from '@ember/object';
  
    export default EmberObject.extend({
      valueObserver: observer('value', function() {
        // Executes whenever the "value" property changes
      })
    });
    ```
  
    Also available as `Function.prototype.observes` if prototype extensions are
    enabled.
  
    @method observer
    @for @ember/object
    @param {String} propertyNames*
    @param {Function} func
    @return func
    @public
    @static
  */

    function observer() {
      for (
        var _len9 = arguments.length, args = new Array(_len9), _key10 = 0;
        _key10 < _len9;
        _key10++
      ) {
        args[_key10] = arguments[_key10];
      }

      var funcOrDef = args.pop();
      true &&
        !(
          typeof funcOrDef === 'function' ||
          (typeof funcOrDef === 'object' && funcOrDef !== null)
        ) &&
        (0, _debug.assert)(
          'observer must be provided a function or an observer definition',
          typeof funcOrDef === 'function' ||
            (typeof funcOrDef === 'object' && funcOrDef !== null),
        );
      var func;
      var dependentKeys;
      var sync;

      if (typeof funcOrDef === 'function') {
        func = funcOrDef;
        dependentKeys = args;
        sync = !_environment.ENV._DEFAULT_ASYNC_OBSERVERS;
      } else {
        func = funcOrDef.fn;
        dependentKeys = funcOrDef.dependentKeys;
        sync = funcOrDef.sync;
      }

      true &&
        !(typeof func === 'function') &&
        (0, _debug.assert)(
          'observer called without a function',
          typeof func === 'function',
        );
      true &&
        !(
          Array.isArray(dependentKeys) &&
          dependentKeys.length > 0 &&
          dependentKeys.every((p) => typeof p === 'string' && Boolean(p.length))
        ) &&
        (0, _debug.assert)(
          'observer called without valid path',
          Array.isArray(dependentKeys) &&
            dependentKeys.length > 0 &&
            dependentKeys.every(
              (p) => typeof p === 'string' && Boolean(p.length),
            ),
        );
      true &&
        !(typeof sync === 'boolean') &&
        (0, _debug.assert)(
          'observer called without sync',
          typeof sync === 'boolean',
        );
      var paths = [];

      for (var dependentKey of dependentKeys) {
        expandProperties(dependentKey, (path) => paths.push(path));
      }

      (0, _utils.setObservers)(func, {
        paths,
        sync,
      });
      return func;
    }

    var DEBUG_INJECTION_FUNCTIONS;
    _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS;

    if (
      true
      /* DEBUG */
    ) {
      _exports.DEBUG_INJECTION_FUNCTIONS = DEBUG_INJECTION_FUNCTIONS = new WeakMap();
    }

    function inject(type) {
      true &&
        !(typeof type === 'string') &&
        (0, _debug.assert)(
          'a string type must be provided to inject',
          typeof type === 'string',
        );
      var elementDescriptor;
      var name;

      for (
        var _len10 = arguments.length,
          args = new Array(_len10 > 1 ? _len10 - 1 : 0),
          _key11 = 1;
        _key11 < _len10;
        _key11++
      ) {
        args[_key11 - 1] = arguments[_key11];
      }

      if (isElementDescriptor(args)) {
        elementDescriptor = args;
      } else if (typeof args[0] === 'string') {
        name = args[0];
      }

      var getInjection = function (propertyName) {
        var owner = (0, _owner.getOwner)(this) || this.container; // fallback to `container` for backwards compat

        true &&
          !Boolean(owner) &&
          (0, _debug.assert)(
            `Attempting to lookup an injected property on an object without a container, ensure that the object was instantiated via a container.`,
            Boolean(owner),
          );
        return owner.lookup(`${type}:${name || propertyName}`);
      };

      if (
        true
        /* DEBUG */
      ) {
        DEBUG_INJECTION_FUNCTIONS.set(getInjection, {
          type,
          name,
        });
      }

      var decorator = computed({
        get: getInjection,

        set(keyName, value) {
          defineProperty(this, keyName, null, value);
        },
      });

      if (elementDescriptor) {
        return decorator(
          elementDescriptor[0],
          elementDescriptor[1],
          elementDescriptor[2],
        );
      } else {
        return decorator;
      }
    }

    function tracked() {
      for (
        var _len11 = arguments.length, args = new Array(_len11), _key12 = 0;
        _key12 < _len11;
        _key12++
      ) {
        args[_key12] = arguments[_key12];
      }

      true &&
        !!(
          isElementDescriptor(args.slice(0, 3)) &&
          args.length === 5 &&
          args[4] === true
        ) &&
        (0, _debug.assert)(
          `@tracked can only be used directly as a native decorator. If you're using tracked in classic classes, add parenthesis to call it like a function: tracked()`,
          !(
            isElementDescriptor(args.slice(0, 3)) &&
            args.length === 5 &&
            args[4] === true
          ),
        );

      if (!isElementDescriptor(args)) {
        var propertyDesc = args[0];
        true &&
          !(
            args.length === 0 ||
            (typeof propertyDesc === 'object' && propertyDesc !== null)
          ) &&
          (0, _debug.assert)(
            `tracked() may only receive an options object containing 'value' or 'initializer', received ${propertyDesc}`,
            args.length === 0 ||
              (typeof propertyDesc === 'object' && propertyDesc !== null),
          );

        if (
          true &&
          /* DEBUG */
          propertyDesc
        ) {
          var keys = Object.keys(propertyDesc);
          true &&
            !(
              keys.length <= 1 &&
              (keys[0] === undefined ||
                keys[0] === 'value' ||
                keys[0] === 'initializer')
            ) &&
            (0, _debug.assert)(
              `The options object passed to tracked() may only contain a 'value' or 'initializer' property, not both. Received: [${keys}]`,
              keys.length <= 1 &&
                (keys[0] === undefined ||
                  keys[0] === 'value' ||
                  keys[0] === 'initializer'),
            );
          true &&
            !(
              !('initializer' in propertyDesc) ||
              typeof propertyDesc.initializer === 'function'
            ) &&
            (0, _debug.assert)(
              `The initializer passed to tracked must be a function. Received ${propertyDesc.initializer}`,
              !('initializer' in propertyDesc) ||
                typeof propertyDesc.initializer === 'function',
            );
        }

        var initializer = propertyDesc ? propertyDesc.initializer : undefined;
        var value = propertyDesc ? propertyDesc.value : undefined;

        var decorator = function (
          target,
          key,
          _desc,
          _meta,
          isClassicDecorator$$1,
        ) {
          true &&
            !isClassicDecorator$$1 &&
            (0, _debug.assert)(
              `You attempted to set a default value for ${key} with the @tracked({ value: 'default' }) syntax. You can only use this syntax with classic classes. For native classes, you can use class initializers: @tracked field = 'default';`,
              isClassicDecorator$$1,
            );
          var fieldDesc = {
            initializer: initializer || (() => value),
          };
          return descriptorForField([target, key, fieldDesc]);
        };

        setClassicDecorator(decorator);
        return decorator;
      }

      return descriptorForField(args);
    }

    if (
      true
      /* DEBUG */
    ) {
      // Normally this isn't a classic decorator, but we want to throw a helpful
      // error in development so we need it to treat it like one
      setClassicDecorator(tracked);
    }

    function descriptorForField(_ref) {
      var [target, key, desc] = _ref;
      true &&
        !(!desc || (!desc.value && !desc.get && !desc.set)) &&
        (0, _debug.assert)(
          `You attempted to use @tracked on ${key}, but that element is not a class field. @tracked is only usable on class fields. Native getters and setters will autotrack add any tracked fields they encounter, so there is no need mark getters and setters with @tracked.`,
          !desc || (!desc.value && !desc.get && !desc.set),
        );
      var { getter, setter } = (0, _validator.trackedData)(
        key,
        desc ? desc.initializer : undefined,
      );

      function get() {
        var value = getter(this); // Add the tag of the returned value if it is an array, since arrays
        // should always cause updates if they are consumed and then changed

        if (Array.isArray(value) || (0, _utils.isEmberArray)(value)) {
          (0, _validator.consumeTag)((0, _validator.tagFor)(value, '[]'));
        }

        return value;
      }

      function set(newValue) {
        setter(this, newValue);
        (0, _validator.dirtyTagFor)(this, SELF_TAG);
      }

      var newDesc = {
        enumerable: true,
        configurable: true,
        isTracked: true,
        get,
        set,
      };
      COMPUTED_SETTERS.add(set);
      (0, _meta2.meta)(target).writeDescriptors(
        key,
        new TrackedDescriptor(get, set),
      );
      return newDesc;
    }

    class TrackedDescriptor {
      constructor(_get, _set) {
        this._get = _get;
        this._set = _set;
        CHAIN_PASS_THROUGH.add(this);
      }

      get(obj) {
        return this._get.call(obj);
      }

      set(obj, _key, value) {
        this._set.call(obj, value);
      }
    } // NOTE: copied from: https://github.com/glimmerjs/glimmer.js/pull/358

    _exports.TrackedDescriptor = TrackedDescriptor;

    var cached = function () {
      for (
        var _len12 = arguments.length, args = new Array(_len12), _key13 = 0;
        _key13 < _len12;
        _key13++
      ) {
        args[_key13] = arguments[_key13];
      }

      var [target, key, descriptor] = args; // Error on `@cached()`, `@cached(...args)`, and `@cached propName = value;`

      if (
        true &&
        /* DEBUG */
        target === undefined
      )
        throwCachedExtraneousParens();

      if (
        true &&
        /* DEBUG */
        (typeof target !== 'object' ||
          typeof key !== 'string' ||
          typeof descriptor !== 'object' ||
          args.length !== 3)
      ) {
        throwCachedInvalidArgsError(args);
      }

      if (
        true &&
        /* DEBUG */
        (!('get' in descriptor) || typeof descriptor.get !== 'function')
      ) {
        throwCachedGetterOnlyError(key);
      }

      var caches = new WeakMap();
      var getter = descriptor.get;

      descriptor.get = function () {
        if (!caches.has(this)) {
          caches.set(this, (0, _validator.createCache)(getter.bind(this)));
        }

        return (0, _validator.getValue)(caches.get(this));
      };
    };

    _exports.cached = cached;

    function throwCachedExtraneousParens() {
      throw new Error(
        'You attempted to use @cached(), which is not necessary nor supported. Remove the parentheses and you will be good to go!',
      );
    }

    function throwCachedGetterOnlyError(key) {
      throw new Error(
        `The @cached decorator must be applied to getters. '${key}' is not a getter.`,
      );
    }

    function throwCachedInvalidArgsError(args) {
      if (args === void 0) {
        args = [];
      }

      throw new Error(
        `You attempted to use @cached on with ${
          args.length > 1 ? 'arguments' : 'an argument'
        } ( @cached(${args
          .map((d) => `'${d}'`)
          .join(
            ', ',
          )}), which is not supported. Dependencies are automatically tracked, so you can just use ${'`@cached`'}`,
      );
    }
    /**
    Ember uses caching based on trackable values to avoid updating large portions
    of the application. This caching is exposed via a cache primitive that can be
    used to cache a specific computation, so that it will not update and will
    return the cached value until a tracked value used in its computation has
    updated.
  
    @module @glimmer/tracking/primitives/cache
    @public
  */

    /**
    Receives a function, and returns a wrapped version of it that memoizes based on
    _autotracking_. The function will only rerun whenever any tracked values used
    within it have changed. Otherwise, it will return the previous value.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state. Now, `counter` will
      // only rerun if `state.value` changes.
      state.value;
  
      return ++computeCount;
    });
  
    getValue(counter); // 1
  
    // returns the same value because no tracked state has changed
    getValue(counter); // 1
  
    state.value = 'foo';
  
    // reruns because a tracked value used in the function has changed,
    // incermenting the counter
    getValue(counter); // 2
    ```
  
    @method createCache
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */

    /**
    Gets the value of a cache created with `createCache`.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue } from '@glimmer/tracking/primitives/cache';
  
    let computeCount = 0;
  
    let counter = createCache(() => {
      return ++computeCount;
    });
  
    getValue(counter); // 1
    ```
  
    @method getValue
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */

    /**
    Can be used to check if a memoized function is _constant_. If no tracked state
    was used while running a memoized function, it will never rerun, because nothing
    can invalidate its result. `isConst` can be used to determine if a memoized
    function is constant or not, in order to optimize code surrounding that
    function.
  
    ```js
    import { tracked } from '@glimmer/tracking';
    import { createCache, getValue, isConst } from '@glimmer/tracking/primitives/cache';
  
    class State {
      @tracked value;
    }
  
    let state = new State();
    let computeCount = 0;
  
    let counter = createCache(() => {
      // consume the state
      state.value;
  
      return computeCount++;
    });
  
    let constCounter = createCache(() => {
      return computeCount++;
    });
  
    getValue(counter);
    getValue(constCounter);
  
    isConst(counter); // false
    isConst(constCounter); // true
    ```
  
    If called on a cache that hasn't been accessed yet, it will throw an
    error. This is because there's no way to know if the function will be constant
    or not yet, and so this helps prevent missing an optimization opportunity on
    accident.
  
    @method isConst
    @static
    @for @glimmer/tracking/primitives/cache
    @public
  */
  });
  define('@ember/-internals/overrides/index', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.onEmberGlobalAccess = void 0;
    var onEmberGlobalAccess;
    _exports.onEmberGlobalAccess = onEmberGlobalAccess;
  });
  define('@ember/-internals/owner/index', [
    'exports',
    '@glimmer/owner',
  ], function (_exports, _owner) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.getOwner = getOwner;
    _exports.isFactory = isFactory;
    _exports.setOwner = setOwner;

    function isFactory(obj) {
      return obj != null && typeof obj.create === 'function';
    }
    /**
    Framework objects in an Ember application (components, services, routes, etc.)
    are created via a factory and dependency injection system. Each of these
    objects is the responsibility of an "owner", which handled its
    instantiation and manages its lifetime.
  
    `getOwner` fetches the owner object responsible for an instance. This can
    be used to lookup or resolve other class instances, or register new factories
    into the owner.
  
    For example, this component dynamically looks up a service based on the
    `audioType` passed as an argument:
  
    ```app/components/play-audio.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
    import { getOwner } from '@ember/application';
  
    // Usage:
    //
    //   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>
    //
    export default class extends Component {
      get audioService() {
        let owner = getOwner(this);
        return owner.lookup(`service:${this.args.audioType}`);
      }
  
      @action
      onPlay() {
        let player = this.audioService;
        player.play(this.args.audioFile);
      }
    }
    ```
  
    @method getOwner
    @static
    @for @ember/application
    @param {Object} object An object with an owner.
    @return {Object} An owner object.
    @since 2.3.0
    @public
  */

    function getOwner(object) {
      return (0, _owner.getOwner)(object);
    }
    /**
    `setOwner` forces a new owner on a given object instance. This is primarily
    useful in some testing cases.
  
    @method setOwner
    @static
    @for @ember/application
    @param {Object} object An object instance.
    @param {Object} object The new owner object of the object instance.
    @since 2.3.0
    @public
  */

    function setOwner(object, owner) {
      (0, _owner.setOwner)(object, owner);
    }
  });
  define('@ember/-internals/routing/index', [
    'exports',
    '@ember/-internals/routing/lib/ext/controller',
    '@ember/-internals/routing/lib/location/api',
    '@ember/-internals/routing/lib/location/none_location',
    '@ember/-internals/routing/lib/location/hash_location',
    '@ember/-internals/routing/lib/location/history_location',
    '@ember/-internals/routing/lib/location/auto_location',
    '@ember/-internals/routing/lib/system/generate_controller',
    '@ember/-internals/routing/lib/system/controller_for',
    '@ember/-internals/routing/lib/system/dsl',
    '@ember/-internals/routing/lib/system/router',
    '@ember/-internals/routing/lib/system/route',
    '@ember/-internals/routing/lib/system/query_params',
    '@ember/-internals/routing/lib/services/routing',
    '@ember/-internals/routing/lib/services/router',
    '@ember/-internals/routing/lib/system/router_state',
    '@ember/-internals/routing/lib/system/cache',
  ], function (
    _exports,
    _controller,
    _api,
    _none_location,
    _hash_location,
    _history_location,
    _auto_location,
    _generate_controller,
    _controller_for,
    _dsl,
    _router,
    _route,
    _query_params,
    _routing,
    _router2,
    _router_state,
    _cache,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'AutoLocation', {
      enumerable: true,
      get: function () {
        return _auto_location.default;
      },
    });
    Object.defineProperty(_exports, 'BucketCache', {
      enumerable: true,
      get: function () {
        return _cache.default;
      },
    });
    Object.defineProperty(_exports, 'HashLocation', {
      enumerable: true,
      get: function () {
        return _hash_location.default;
      },
    });
    Object.defineProperty(_exports, 'HistoryLocation', {
      enumerable: true,
      get: function () {
        return _history_location.default;
      },
    });
    Object.defineProperty(_exports, 'Location', {
      enumerable: true,
      get: function () {
        return _api.default;
      },
    });
    Object.defineProperty(_exports, 'NoneLocation', {
      enumerable: true,
      get: function () {
        return _none_location.default;
      },
    });
    Object.defineProperty(_exports, 'QueryParams', {
      enumerable: true,
      get: function () {
        return _query_params.default;
      },
    });
    Object.defineProperty(_exports, 'Route', {
      enumerable: true,
      get: function () {
        return _route.default;
      },
    });
    Object.defineProperty(_exports, 'Router', {
      enumerable: true,
      get: function () {
        return _router.default;
      },
    });
    Object.defineProperty(_exports, 'RouterDSL', {
      enumerable: true,
      get: function () {
        return _dsl.default;
      },
    });
    Object.defineProperty(_exports, 'RouterService', {
      enumerable: true,
      get: function () {
        return _router2.default;
      },
    });
    Object.defineProperty(_exports, 'RouterState', {
      enumerable: true,
      get: function () {
        return _router_state.default;
      },
    });
    Object.defineProperty(_exports, 'RoutingService', {
      enumerable: true,
      get: function () {
        return _routing.default;
      },
    });
    Object.defineProperty(_exports, 'controllerFor', {
      enumerable: true,
      get: function () {
        return _controller_for.default;
      },
    });
    Object.defineProperty(_exports, 'generateController', {
      enumerable: true,
      get: function () {
        return _generate_controller.default;
      },
    });
    Object.defineProperty(_exports, 'generateControllerFactory', {
      enumerable: true,
      get: function () {
        return _generate_controller.generateControllerFactory;
      },
    });
  });
  define('@ember/-internals/routing/lib/ext/controller', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/owner',
    '@ember/controller/lib/controller_mixin',
    '@ember/-internals/routing/lib/utils',
  ], function (_exports, _metal, _owner, _controller_mixin, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    _controller_mixin.default.reopen({
      concatenatedProperties: ['queryParams'],

      init() {
        this._super(...arguments);

        var owner = (0, _owner.getOwner)(this);

        if (owner) {
          this.namespace = owner.lookup('application:main');
          this.target = owner.lookup('router:main');
        }
      },

      /**
      Defines which query parameters the controller accepts.
      If you give the names `['category','page']` it will bind
      the values of these query parameters to the variables
      `this.category` and `this.page`.
         By default, query parameters are parsed as strings. This
      may cause unexpected behavior if a query parameter is used with `toggleProperty`,
      because the initial value set for `param=false` will be the string `"false"`, which is truthy.
         To avoid this, you may specify that the query parameter should be parsed as a boolean
      by using the following verbose form with a `type` property:
      ```javascript
        queryParams: [{
          category: {
            type: 'boolean'
          }
        }]
      ```
      Available values for the `type` parameter are `'boolean'`, `'number'`, `'array'`, and `'string'`.
      If query param type is not specified, it will default to `'string'`.
         @for Ember.ControllerMixin
      @property queryParams
      @public
    */
      queryParams: null,

      /**
     This property is updated to various different callback functions depending on
     the current "state" of the backing route. It is used by
     `Controller.prototype._qpChanged`.
        The methods backing each state can be found in the `Route.prototype._qp` computed
     property return value (the `.states` property). The current values are listed here for
     the sanity of future travelers:
        * `inactive` - This state is used when this controller instance is not part of the active
       route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
       `Route.prototype.actions.finalizeQueryParamChange`.
     * `active` - This state is used when this controller instance is part of the active
       route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
     * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
         @method _qpDelegate
      @private
    */
      _qpDelegate: null,

      /**
     During `Route#setup` observers are created to invoke this method
     when any of the query params declared in `Controller#queryParams` property
     are changed.
        When invoked this method uses the currently active query param update delegate
     (see `Controller.prototype._qpDelegate` for details) and invokes it with
     the QP key/value being changed.
         @method _qpChanged
      @private
    */
      _qpChanged(controller, _prop) {
        var dotIndex = _prop.indexOf('.[]');

        var prop = dotIndex === -1 ? _prop : _prop.slice(0, dotIndex);
        var delegate = controller._qpDelegate;
        var value = (0, _metal.get)(controller, prop);
        delegate(prop, value);
      },

      /**
      Transition the application into another route. The route may
      be either a single route or route path:
         ```javascript
      aController.transitionToRoute('blogPosts');
      aController.transitionToRoute('blogPosts.recentEntries');
      ```
         Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
         ```javascript
      aController.transitionToRoute('blogPost', aPost);
      ```
         If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
         ```javascript
      aController.transitionToRoute('blogPost', 1);
      ```
         Multiple models will be applied last to first recursively up the
      route tree.
         ```app/router.js
      Router.map(function() {
        this.route('blogPost', { path: ':blogPostId' }, function() {
          this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
        });
      });
      ```
         ```javascript
      aController.transitionToRoute('blogComment', aPost, aComment);
      aController.transitionToRoute('blogComment', 1, 13);
      ```
         It is also possible to pass a URL (a string that starts with a
      `/`).
         ```javascript
      aController.transitionToRoute('/');
      aController.transitionToRoute('/blog/post/1/comment/13');
      aController.transitionToRoute('/blog/posts?sort=title');
      ```
         An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
         ```javascript
      aController.transitionToRoute('blogPost', 1, {
        queryParams: { showComments: 'true' }
      });
         // if you just want to transition the query parameters without changing the route
      aController.transitionToRoute({ queryParams: { sort: 'date' } });
      ```
         See also [replaceRoute](/ember/release/classes/Ember.ControllerMixin/methods/replaceRoute?anchor=replaceRoute).
         @for Ember.ControllerMixin
      @method transitionToRoute
      @deprecated Use transitionTo from the Router service instead.
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used
        while transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
      transitionToRoute() {
        var _a;

        (0, _utils.deprecateTransitionMethods)(
          'controller',
          'transitionToRoute',
        ); // target may be either another controller or a router

        var target = (0, _metal.get)(this, 'target'); // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
        // mock out an object that only has the single method. Since this is deprecated, I think it's
        // ok to be a little less than proper here.

        var method =
          (_a = target.transitionToRoute) !== null && _a !== void 0
            ? _a
            : target.transitionTo;

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));
      },

      /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionToRoute` in all other respects.
         ```javascript
      aController.replaceRoute('blogPosts');
      aController.replaceRoute('blogPosts.recentEntries');
      ```
         Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
         ```javascript
      aController.replaceRoute('blogPost', aPost);
      ```
         If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
         ```javascript
      aController.replaceRoute('blogPost', 1);
      ```
         Multiple models will be applied last to first recursively up the
      route tree.
         ```app/router.js
      Router.map(function() {
        this.route('blogPost', { path: ':blogPostId' }, function() {
          this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });
        });
      });
      ```
         ```
      aController.replaceRoute('blogComment', aPost, aComment);
      aController.replaceRoute('blogComment', 1, 13);
      ```
         It is also possible to pass a URL (a string that starts with a
      `/`).
         ```javascript
      aController.replaceRoute('/');
      aController.replaceRoute('/blog/post/1/comment/13');
      ```
         @for Ember.ControllerMixin
      @method replaceRoute
      @deprecated Use replaceWith from the Router service instead.
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used
      while transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
      containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */
      replaceRoute() {
        var _a;

        (0, _utils.deprecateTransitionMethods)('controller', 'replaceRoute'); // target may be either another controller or a router

        var target = (0, _metal.get)(this, 'target'); // SAFETY: We can't actually assert that this is a full Controller or Router since some tests
        // mock out an object that only has the single method. Since this is deprecated, I think it's
        // ok to be a little less than proper here.

        var method =
          (_a = target.replaceRoute) !== null && _a !== void 0
            ? _a
            : target.replaceWith;

        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2];
        }

        return method.apply(target, (0, _utils.prefixRouteNameArg)(this, args));
      },
    });

    var _default = _controller_mixin.default;
    _exports.default = _default;
  });
  define('@ember/-internals/routing/lib/location/api', [
    'exports',
    '@ember/debug',
  ], function (_exports, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/routing
  */

    /**
    Location returns an instance of the correct implementation of
    the `location` API.
  
    ## Implementations
  
    You can pass an implementation name (`hash`, `history`, `none`, `auto`) to force a
    particular implementation to be used in your application.
  
    See [HashLocation](/ember/release/classes/HashLocation).
    See [HistoryLocation](/ember/release/classes/HistoryLocation).
    See [NoneLocation](/ember/release/classes/NoneLocation).
    See [AutoLocation](/ember/release/classes/AutoLocation).
  
    ## Location API
  
    Each location implementation must provide the following methods:
  
    * implementation: returns the string name used to reference the implementation.
    * getURL: returns the current URL.
    * setURL(path): sets the current URL.
    * replaceURL(path): replace the current URL (optional).
    * onUpdateURL(callback): triggers the callback when the URL changes.
    * formatURL(url): formats `url` to be placed into `href` attribute.
    * detect() (optional): instructs the location to do any feature detection
        necessary. If the location needs to redirect to a different URL, it
        can cancel routing by setting the `cancelRouterSetup` property on itself
        to `false`.
  
    Calling setURL or replaceURL will not trigger onUpdateURL callbacks.
  
    ## Custom implementation
  
    Ember scans `app/locations/*` for extending the Location API.
  
    Example:
  
    ```javascript
    import HistoryLocation from '@ember/routing/history-location';
  
    export default class MyHistory {
      implementation = 'my-custom-history';
  
      constructor() {
        this._history = HistoryLocation.create(...arguments);
      }
  
      create() {
        return new this(...arguments);
      }
  
      pushState(path) {
         this._history.pushState(path);
      }
    }
    ```
  
    @class Location
    @private
  */
    var _default = {
      /**
     This is deprecated in favor of using the container to lookup the location
     implementation as desired.
        For example:
        ```javascript
     // Given a location registered as follows:
     container.register('location:history-test', HistoryTestLocation);
        // You could create a new instance via:
     container.lookup('location:history-test');
     ```
         @method create
      @param {Object} options
      @return {Object} an instance of an implementation of the `location` API
      @deprecated Use the container to lookup the location implementation that you
      need.
      @private
    */
      create(options) {
        var implementation =
          options === null || options === void 0
            ? void 0
            : options.implementation;
        true &&
          !implementation &&
          (0, _debug.assert)(
            "Location.create: you must specify a 'implementation' option",
            implementation,
          );
        var implementationClass = this.implementations[implementation];
        true &&
          !implementationClass &&
          (0, _debug.assert)(
            `Location.create: ${implementation} is not a valid implementation`,
            implementationClass,
          );
        true &&
          !false &&
          (0, _debug.deprecate)(
            "Calling `create` on Location class is deprecated. Instead, use `container.lookup('location:my-location')` to lookup the location you need.",
            false,
            {
              id: 'deprecate-auto-location',
              until: '5.0.0',
              url:
                'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
              for: 'ember-source',
              since: {
                available: '4.1.0',
                enabled: '4.1.0',
              },
            },
          );
        return implementationClass.create(...arguments);
      },

      implementations: {},
    };
    _exports.default = _default;
  });
  define('@ember/-internals/routing/lib/location/auto_location', [
    'exports',
    '@ember/-internals/browser-environment',
    '@ember/-internals/metal',
    '@ember/-internals/owner',
    '@ember/-internals/runtime',
    '@ember/debug',
    '@ember/-internals/routing/lib/location/util',
  ], function (
    _exports,
    _browserEnvironment,
    _metal,
    _owner,
    _runtime,
    _debug,
    _util,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.getHashPath = getHashPath;
    _exports.getHistoryPath = getHistoryPath;

    /**
  @module @ember/routing
  */

    /**
    AutoLocation will select the best location option based off browser
    support with the priority order: history, hash, none.
  
    Clean pushState paths accessed by hashchange-only browsers will be redirected
    to the hash-equivalent and vice versa so future transitions are consistent.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    Browsers that support the `history` API will use `HistoryLocation`, those that
    do not, but still support the `hashchange` event will use `HashLocation`, and
    in the rare case neither is supported will use `NoneLocation`.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'auto'
    });
    ```
  
    This will result in a posts.new url of `/posts/new` for modern browsers that
    support the `history` api or `/#/posts/new` for older ones, like Internet
    Explorer 9 and below.
  
    When a user visits a link to your application, they will be automatically
    upgraded or downgraded to the appropriate `Location` class, with the URL
    transformed accordingly, if needed.
  
    Keep in mind that since some of your users will use `HistoryLocation`, your
    server must serve the Ember app at all the routes you define.
  
    @class AutoLocation
    @static
    @protected
  */
    class AutoLocation extends _runtime.Object {
      constructor() {
        super(...arguments);
        this.implementation = 'auto';
      }
      /**
     Called by the router to instruct the location to do any feature detection
     necessary. In the case of AutoLocation, we detect whether to use history
     or hash concrete implementations.
        @private
    */

      detect() {
        var rootURL = this.rootURL;
        true &&
          !(rootURL.charAt(rootURL.length - 1) === '/') &&
          (0, _debug.assert)(
            'rootURL must end with a trailing forward slash e.g. "/app/"',
            rootURL.charAt(rootURL.length - 1) === '/',
          );
        var implementation = detectImplementation({
          location: this.location,
          history: this.history,
          userAgent: this.userAgent,
          rootURL,
          documentMode: this.documentMode,
          global: this.global,
        });

        if (implementation === false) {
          (0, _metal.set)(this, 'cancelRouterSetup', true);
          implementation = 'none';
        }

        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)(
            'AutoLocation is unexpectedly missing an owner',
            owner,
          );
        var concrete = owner.lookup(`location:${implementation}`);
        true &&
          !(concrete !== undefined) &&
          (0, _debug.assert)(
            `Could not find location '${implementation}'.`,
            concrete !== undefined,
          );
        (0, _metal.set)(concrete, 'rootURL', rootURL);
        (0, _metal.set)(this, 'concreteImplementation', concrete);
      }

      willDestroy() {
        var { concreteImplementation } = this;

        if (concreteImplementation) {
          concreteImplementation.destroy();
        }
      }
    }

    _exports.default = AutoLocation;
    AutoLocation.reopen({
      rootURL: '/',
      initState: delegateToConcreteImplementation('initState'),
      getURL: delegateToConcreteImplementation('getURL'),
      setURL: delegateToConcreteImplementation('setURL'),
      replaceURL: delegateToConcreteImplementation('replaceURL'),
      onUpdateURL: delegateToConcreteImplementation('onUpdateURL'),
      formatURL: delegateToConcreteImplementation('formatURL'),
      location: _browserEnvironment.location,
      history: _browserEnvironment.history,
      global: _browserEnvironment.window,
      userAgent: _browserEnvironment.userAgent,
      cancelRouterSetup: false,
    });

    function delegateToConcreteImplementation(methodName) {
      return function () {
        var _a;

        var { concreteImplementation } = this;
        true &&
          !concreteImplementation &&
          (0, _debug.assert)(
            "AutoLocation's detect() method should be called before calling any other hooks.",
            concreteImplementation,
          ); // We need this cast because `Parameters` is deferred so that it is not
        // possible for TS to see it will always produce the right type. However,
        // since `AnyFn` has a rest type, it is allowed. See discussion on [this
        // issue](https://github.com/microsoft/TypeScript/issues/47615).

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return (_a = concreteImplementation[methodName]) === null ||
          _a === void 0
          ? void 0
          : _a.call(concreteImplementation, ...args);
      };
    }

    function detectImplementation(options) {
      var {
        location,
        userAgent,
        history,
        documentMode,
        global,
        rootURL,
      } = options;
      var implementation = 'none';
      var cancelRouterSetup = false;
      var currentPath = (0, _util.getFullPath)(location);

      if ((0, _util.supportsHistory)(userAgent, history)) {
        var historyPath = getHistoryPath(rootURL, location); // If the browser supports history and we have a history path, we can use
        // the history location with no redirects.

        if (currentPath === historyPath) {
          implementation = 'history';
        } else if (currentPath.substring(0, 2) === '/#') {
          history.replaceState(
            {
              path: historyPath,
            },
            '',
            historyPath,
          );
          implementation = 'history';
        } else {
          cancelRouterSetup = true;
          (0, _util.replacePath)(location, historyPath);
        }
      } else if ((0, _util.supportsHashChange)(documentMode, global)) {
        var hashPath = getHashPath(rootURL, location); // Be sure we're using a hashed path, otherwise let's switch over it to so
        // we start off clean and consistent. We'll count an index path with no
        // hash as "good enough" as well.

        if (
          currentPath === hashPath ||
          (currentPath === '/' && hashPath === '/#/')
        ) {
          implementation = 'hash';
        } else {
          // Our URL isn't in the expected hash-supported format, so we want to
          // cancel the router setup and replace the URL to start off clean
          cancelRouterSetup = true;
          (0, _util.replacePath)(location, hashPath);
        }
      }

      if (cancelRouterSetup) {
        return false;
      }

      return implementation;
    }
    /**
    @private
  
    Returns the current path as it should appear for HistoryLocation supported
    browsers. This may very well differ from the real current path (e.g. if it
    starts off as a hashed URL)
  */

    function getHistoryPath(rootURL, location) {
      var path = (0, _util.getPath)(location);
      var hash = (0, _util.getHash)(location);
      var query = (0, _util.getQuery)(location);
      var rootURLIndex = path.indexOf(rootURL);
      var routeHash;
      var hashParts;
      true &&
        !(rootURLIndex === 0) &&
        (0, _debug.assert)(
          `Path ${path} does not start with the provided rootURL ${rootURL}`,
          rootURLIndex === 0,
        ); // By convention, Ember.js routes using HashLocation are required to start
      // with `#/`. Anything else should NOT be considered a route and should
      // be passed straight through, without transformation.

      if (hash.substring(0, 2) === '#/') {
        // There could be extra hash segments after the route
        hashParts = hash.substring(1).split('#'); // The first one is always the route url

        routeHash = hashParts.shift(); // If the path already has a trailing slash, remove the one
        // from the hashed route so we don't double up.

        if (path.charAt(path.length - 1) === '/') {
          routeHash = routeHash.substring(1);
        } // This is the "expected" final order

        path += routeHash + query;

        if (hashParts.length) {
          path += `#${hashParts.join('#')}`;
        }
      } else {
        path += query + hash;
      }

      return path;
    }
    /**
    @private
  
    Returns the current path as it should appear for HashLocation supported
    browsers. This may very well differ from the real current path.
  
    @method _getHashPath
  */

    function getHashPath(rootURL, location) {
      var path = rootURL;
      var historyPath = getHistoryPath(rootURL, location);
      var routePath = historyPath.substring(rootURL.length);

      if (routePath !== '') {
        if (routePath[0] !== '/') {
          routePath = `/${routePath}`;
        }

        path += `#${routePath}`;
      }

      return path;
    }
  });
  define('@ember/-internals/routing/lib/location/hash_location', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/runloop',
    '@ember/-internals/routing/lib/location/util',
  ], function (_exports, _metal, _runtime, _runloop, _util) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/routing
  */

    /**
    `HashLocation` implements the location API using the browser's
    hash. At present, it relies on a `hashchange` event existing in the
    browser.
  
    Using `HashLocation` results in URLs with a `#` (hash sign) separating the
    server side URL portion of the URL from the portion that is used by Ember.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'hash'
    });
    ```
  
    This will result in a posts.new url of `/#/posts/new`.
  
    @class HashLocation
    @extends EmberObject
    @protected
  */
    class HashLocation extends _runtime.Object {
      constructor() {
        super(...arguments);
        this.implementation = 'hash';
        this.lastSetURL = null;
      }

      init() {
        (0, _metal.set)(this, 'location', this._location || window.location);
        this._hashchangeHandler = undefined;
      }
      /**
      @private
         Returns normalized location.hash
         @since 1.5.1
      @method getHash
    */

      getHash() {
        return (0, _util.getHash)(this.location);
      }
      /**
      Returns the normalized URL, constructed from `location.hash`.
         e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
         By convention, hashed paths must begin with a forward slash, otherwise they
      are not treated as a path so we can distinguish intent.
         @private
      @method getURL
    */

      getURL() {
        var originalPath = this.getHash().substring(1);
        var outPath = originalPath;

        if (outPath[0] !== '/') {
          outPath = '/'; // Only add the # if the path isn't empty.
          // We do NOT want `/#` since the ampersand
          // is only included (conventionally) when
          // the location.hash has a value

          if (originalPath) {
            outPath += `#${originalPath}`;
          }
        }

        return outPath;
      }
      /**
      Set the `location.hash` and remembers what was set. This prevents
      `onUpdateURL` callbacks from triggering when the hash was set by
      `HashLocation`.
         @private
      @method setURL
      @param path {String}
    */

      setURL(path) {
        this.location.hash = path;
        (0, _metal.set)(this, 'lastSetURL', path);
      }
      /**
      Uses location.replace to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */

      replaceURL(path) {
        this.location.replace(`#${path}`);
        (0, _metal.set)(this, 'lastSetURL', path);
      }
      /**
      Register a callback to be invoked when the hash changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */

      onUpdateURL(callback) {
        this._removeEventListener();

        this._hashchangeHandler = (0, _runloop.bind)(this, function (_event) {
          var path = this.getURL();

          if (this.lastSetURL === path) {
            return;
          }

          (0, _metal.set)(this, 'lastSetURL', null);
          callback(path);
        });
        window.addEventListener('hashchange', this._hashchangeHandler);
      }
      /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
    */

      formatURL(url) {
        return `#${url}`;
      }
      /**
      Cleans up the HashLocation event listener.
         @private
      @method willDestroy
    */

      willDestroy() {
        this._removeEventListener();
      }

      _removeEventListener() {
        if (this._hashchangeHandler) {
          window.removeEventListener('hashchange', this._hashchangeHandler);
        }
      }
    }

    _exports.default = HashLocation;
  });
  define('@ember/-internals/routing/lib/location/history_location', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/-internals/routing/lib/location/util',
  ], function (_exports, _metal, _runtime, _util) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/routing
  */
    var popstateFired = false;

    function _uuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
        /[xy]/g,
        function (c) {
          var r, v;
          r = (Math.random() * 16) | 0;
          v = c === 'x' ? r : (r & 3) | 8;
          return v.toString(16);
        },
      );
    }
    /**
    HistoryLocation implements the location API using the browser's
    history.pushState API.
  
    Using `HistoryLocation` results in URLs that are indistinguishable from a
    standard URL. This relies upon the browser's `history` API.
  
    Example:
  
    ```app/router.js
    Router.map(function() {
      this.route('posts', function() {
        this.route('new');
      });
    });
  
    Router.reopen({
      location: 'history'
    });
    ```
  
    This will result in a posts.new url of `/posts/new`.
  
    Keep in mind that your server must serve the Ember app at all the routes you
    define.
  
    Using `HistoryLocation` will also result in location states being recorded by
    the browser `history` API with the following schema:
  
    ```
    window.history.state -> { path: '/', uuid: '3552e730-b4a6-46bd-b8bf-d8c3c1a97e0a' }
    ```
  
    This allows each in-app location state to be tracked uniquely across history
    state changes via the `uuid` field.
  
    @class HistoryLocation
    @extends EmberObject
    @protected
  */

    class HistoryLocation extends _runtime.Object {
      constructor() {
        super(...arguments);
        this.implementation = 'history';
        /**
        Will be pre-pended to path upon state change
               @property rootURL
        @default '/'
        @private
      */

        this.rootURL = '/';
      }
      /**
      @private
         Returns normalized location.hash
         @method getHash
    */

      getHash() {
        return (0, _util.getHash)(this.location);
      }

      init() {
        var _a;

        this._super(...arguments);

        var base = document.querySelector('base');
        var baseURL = '';

        if (base !== null && base.hasAttribute('href')) {
          baseURL =
            (_a = base.getAttribute('href')) !== null && _a !== void 0
              ? _a
              : '';
        }

        (0, _metal.set)(this, 'baseURL', baseURL);
        (0, _metal.set)(this, 'location', this.location || window.location);
        this._popstateHandler = undefined;
      }
      /**
      Used to set state on first call to setURL
         @private
      @method initState
    */

      initState() {
        var history = this.history || window.history;
        (0, _metal.set)(this, 'history', history);
        var { state } = history;
        var path = this.formatURL(this.getURL());

        if (state && state.path === path) {
          // preserve existing state
          // used for webkit workaround, since there will be no initial popstate event
          this._previousURL = this.getURL();
        } else {
          this.replaceState(path);
        }
      }
      /**
      Returns the current `location.pathname` without `rootURL` or `baseURL`
         @private
      @method getURL
      @return url {String}
    */

      getURL() {
        var { location, rootURL, baseURL } = this;
        var path = location.pathname; // remove trailing slashes if they exists

        rootURL = rootURL.replace(/\/$/, '');
        baseURL = baseURL.replace(/\/$/, ''); // remove baseURL and rootURL from start of path

        var url = path
          .replace(new RegExp(`^${baseURL}(?=/|$)`), '')
          .replace(new RegExp(`^${rootURL}(?=/|$)`), '')
          .replace(/\/\//g, '/'); // remove extra slashes

        var search = location.search || '';
        url += search + this.getHash();
        return url;
      }
      /**
      Uses `history.pushState` to update the url without a page reload.
         @private
      @method setURL
      @param path {String}
    */

      setURL(path) {
        var { state } = this.history;
        path = this.formatURL(path);

        if (!state || state.path !== path) {
          this.pushState(path);
        }
      }
      /**
      Uses `history.replaceState` to update the url without a page reload
      or history modification.
         @private
      @method replaceURL
      @param path {String}
    */

      replaceURL(path) {
        var { state } = this.history;
        path = this.formatURL(path);

        if (!state || state.path !== path) {
          this.replaceState(path);
        }
      }
      /**
     Pushes a new state.
        @private
     @method pushState
     @param path {String}
    */

      pushState(path) {
        var state = {
          path,
          uuid: _uuid(),
        };
        this.history.pushState(state, null, path); // used for webkit workaround

        this._previousURL = this.getURL();
      }
      /**
     Replaces the current state.
        @private
     @method replaceState
     @param path {String}
    */

      replaceState(path) {
        var state = {
          path,
          uuid: _uuid(),
        };
        this.history.replaceState(state, null, path); // used for webkit workaround

        this._previousURL = this.getURL();
      }
      /**
      Register a callback to be invoked whenever the browser
      history changes, including using forward and back buttons.
         @private
      @method onUpdateURL
      @param callback {Function}
    */

      onUpdateURL(callback) {
        this._removeEventListener();

        this._popstateHandler = () => {
          // Ignore initial page load popstate event in Chrome
          if (!popstateFired) {
            popstateFired = true;

            if (this.getURL() === this._previousURL) {
              return;
            }
          }

          callback(this.getURL());
        };

        window.addEventListener('popstate', this._popstateHandler);
      }
      /**
      Used when using `{{action}}` helper.  The url is always appended to the rootURL.
         @private
      @method formatURL
      @param url {String}
      @return formatted url {String}
    */

      formatURL(url) {
        var { rootURL, baseURL } = this;

        if (url !== '') {
          // remove trailing slashes if they exists
          rootURL = rootURL.replace(/\/$/, '');
          baseURL = baseURL.replace(/\/$/, '');
        } else if (baseURL[0] === '/' && rootURL[0] === '/') {
          // if baseURL and rootURL both start with a slash
          // ... remove trailing slash from baseURL if it exists
          baseURL = baseURL.replace(/\/$/, '');
        }

        return baseURL + rootURL + url;
      }
      /**
      Cleans up the HistoryLocation event listener.
         @private
      @method willDestroy
    */

      willDestroy() {
        this._removeEventListener();
      }

      _removeEventListener() {
        if (this._popstateHandler) {
          window.removeEventListener('popstate', this._popstateHandler);
        }
      }
    }

    _exports.default = HistoryLocation;
  });
  define('@ember/-internals/routing/lib/location/none_location', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/debug',
  ], function (_exports, _metal, _runtime, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/routing
  */

    /**
    NoneLocation does not interact with the browser. It is useful for
    testing, or when you need to manage state with your Router, but temporarily
    don't want it to muck with the URL (for example when you embed your
    application in a larger page).
  
    Using `NoneLocation` causes Ember to not store the applications URL state
    in the actual URL. This is generally used for testing purposes, and is one
    of the changes made when calling `App.setupForTesting()`.
  
    @class NoneLocation
    @extends EmberObject
    @protected
  */
    class NoneLocation extends _runtime.Object {
      constructor() {
        super(...arguments);
        this.implementation = 'none';
      }

      initState() {
        this._super(...arguments);

        var { rootURL } = this; // This assert doesn't have anything to do with state initialization,
        // but we're hijacking this method since it's called after the route has
        // set the rootURL property on its Location instance.

        true &&
          !(rootURL.charAt(rootURL.length - 1) === '/') &&
          (0, _debug.assert)(
            'rootURL must end with a trailing forward slash e.g. "/app/"',
            rootURL.charAt(rootURL.length - 1) === '/',
          );
      }
      /**
      Returns the current path without `rootURL`.
         @private
      @method getURL
      @return {String} path
    */

      getURL() {
        var { path, rootURL } = this; // remove trailing slashes if they exists

        rootURL = rootURL.replace(/\/$/, ''); // remove rootURL from url

        return path.replace(new RegExp(`^${rootURL}(?=/|$)`), '');
      }
      /**
      Set the path and remembers what was set. Using this method
      to change the path will not invoke the `updateURL` callback.
         @private
      @method setURL
      @param path {String}
    */

      setURL(path) {
        (0, _metal.set)(this, 'path', path);
      }
      /**
      Register a callback to be invoked when the path changes. These
      callbacks will execute when the user presses the back or forward
      button, but not after `setURL` is invoked.
         @private
      @method onUpdateURL
      @param callback {Function}
    */

      onUpdateURL(callback) {
        this.updateCallback = callback;
      }
      /**
      Sets the path and calls the `updateURL` callback.
         @private
      @method handleURL
      @param url {String}
    */

      handleURL(url) {
        (0, _metal.set)(this, 'path', url);
        this.updateCallback(url);
      }
      /**
      Given a URL, formats it to be placed into the page as part
      of an element's `href` attribute.
         This is used, for example, when using the {{action}} helper
      to generate a URL based on an event.
         @private
      @method formatURL
      @param url {String}
      @return {String} url
    */

      formatURL(url) {
        var { rootURL } = this;

        if (url !== '') {
          // remove trailing slashes if they exists
          rootURL = rootURL.replace(/\/$/, '');
        }

        return rootURL + url;
      }
    }

    _exports.default = NoneLocation;
    NoneLocation.reopen({
      path: '',
      rootURL: '/',
    });
  });
  define('@ember/-internals/routing/lib/location/util', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.getFullPath = getFullPath;
    _exports.getHash = getHash;
    _exports.getOrigin = getOrigin;
    _exports.getPath = getPath;
    _exports.getQuery = getQuery;
    _exports.replacePath = replacePath;
    _exports.supportsHashChange = supportsHashChange;
    _exports.supportsHistory = supportsHistory;

    /**
    @private
  
    Returns the current `location.pathname`, normalized for IE inconsistencies.
  */
    function getPath(location) {
      var pathname = location.pathname; // Various versions of IE/Opera don't always return a leading slash

      if (pathname[0] !== '/') {
        pathname = `/${pathname}`;
      }

      return pathname;
    }
    /**
    @private
  
    Returns the current `location.search`.
  */

    function getQuery(location) {
      return location.search;
    }
    /**
    @private
  
    Returns the hash or empty string
  */

    function getHash(location) {
      if (location.hash !== undefined) {
        return location.hash.substring(0);
      }

      return '';
    }

    function getFullPath(location) {
      return getPath(location) + getQuery(location) + getHash(location);
    }

    function getOrigin(location) {
      var origin = location.origin; // Older browsers, especially IE, don't have origin

      if (!origin) {
        origin = `${location.protocol}//${location.hostname}`;

        if (location.port) {
          origin += `:${location.port}`;
        }
      }

      return origin;
    }
    /*
    `documentMode` only exist in Internet Explorer, and it's tested because IE8 running in
    IE7 compatibility mode claims to support `onhashchange` but actually does not.
  
    `global` is an object that may have an `onhashchange` property.
  
    @private
    @function supportsHashChange
  */

    function supportsHashChange(documentMode, global) {
      return Boolean(
        global &&
          'onhashchange' in global &&
          (documentMode === undefined || documentMode > 7),
      );
    }
    /*
    `userAgent` is a user agent string. We use user agent testing here, because
    the stock Android browser is known to have buggy versions of the History API,
    in some Android versions.
  
    @private
    @function supportsHistory
  */

    function supportsHistory(userAgent, history) {
      // Boosted from Modernizr: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
      // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support
      // Unfortunately support is really buggy and there is no clean way to detect
      // these bugs, so we fall back to a user agent sniff :(
      // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies
      // itself as 'Mobile Safari' as well, nor Windows Phone.
      if (
        (userAgent.indexOf('Android 2.') !== -1 ||
          userAgent.indexOf('Android 4.0') !== -1) &&
        userAgent.indexOf('Mobile Safari') !== -1 &&
        userAgent.indexOf('Chrome') === -1 &&
        userAgent.indexOf('Windows Phone') === -1
      ) {
        return false;
      }

      return Boolean(history && 'pushState' in history);
    }
    /**
    Replaces the current location, making sure we explicitly include the origin
    to prevent redirecting to a different origin.
  
    @private
  */

    function replacePath(location, path) {
      location.replace(getOrigin(location) + path);
    }
  });
  define('@ember/-internals/routing/lib/services/router', [
    'exports',
    '@ember/-internals/owner',
    '@ember/-internals/runtime',
    '@ember/debug',
    '@ember/object/computed',
    '@ember/service',
    '@glimmer/validator',
    '@ember/-internals/routing/lib/system/router',
    '@ember/-internals/routing/lib/utils',
  ], function (
    _exports,
    _owner,
    _runtime,
    _debug,
    _computed,
    _service,
    _validator,
    _router2,
    _utils,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = _exports.ROUTER = void 0;

    var __decorate =
      (void 0 && (void 0).__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    var ROUTER = Symbol('ROUTER');
    _exports.ROUTER = ROUTER;

    function cleanURL(url, rootURL) {
      if (rootURL === '/') {
        return url;
      }

      return url.substring(rootURL.length);
    }

    class RouterService extends _service.default.extend(_runtime.Evented) {
      get _router() {
        var router = this[ROUTER];

        if (router !== undefined) {
          return router;
        }

        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)(
            'RouterService is unexpectedly missing an owner',
            owner,
          );

        var _router = owner.lookup('router:main');

        true &&
          !(_router instanceof _router2.default) &&
          (0, _debug.assert)(
            'ROUTER SERVICE BUG: Expected router to be an instance of EmberRouter',
            _router instanceof _router2.default,
          );
        return (this[ROUTER] = _router);
      }

      willDestroy() {
        super.willDestroy();
        this[ROUTER] = undefined;
      }
      /**
       Transition the application into another route. The route may
       be either a single route or route path:
          Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          In the following example we use the Router service to navigate to a route with a
       specific model from a Component in the first action, and in the second we trigger
       a query-params only transition.
          ```app/components/example.js
       import Component from '@glimmer/component';
       import { action } from '@ember/object';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            @action
         goToComments(post) {
           this.router.transitionTo('comments', post);
         }
            @action
         fetchMoreComments(latestComment) {
           this.router.transitionTo({
             queryParams: { commentsAfter: latestComment }
           });
         }
       }
       ```
          @method transitionTo
       @param {String} [routeNameOrUrl] the name of the route or a URL
       @param {...Object} [models] the model(s) or identifier(s) to be used while
         transitioning to the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */

      transitionTo() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        if ((0, _utils.resemblesURL)(args[0])) {
          // NOTE: this `args[0] as string` cast is safe and TS correctly infers it
          // in 3.6+, so it can be removed when TS is upgraded.
          return this._router._doURLTransition('transitionTo', args[0]);
        }

        var { routeName, models, queryParams } = (0, _utils.extractRouteArgs)(
          args,
        );

        var transition = this._router._doTransition(
          routeName,
          models,
          queryParams,
          true,
        );

        return transition;
      }
      /**
       Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
       it replaces the entry for the current route.
       When the user clicks the "back" button in the browser, there will be fewer steps.
       This is most commonly used to manage redirects in a way that does not cause confusing additions
       to the user's browsing history.
          Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
       This behavior is different from calling `replaceWith` on a route.
       See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
          Usage example:
          ```app/routes/application.js
       import Route from '@ember/routing/route';
          export default class extends Route {
         beforeModel() {
           if (!authorized()){
             this.replaceWith('unauthorized');
           }
         }
       });
       ```
          @method replaceWith
       @param {String} routeNameOrUrl the name of the route or a URL of the desired destination
       @param {...Object} models the model(s) or identifier(s) to be used while
         transitioning to the route i.e. an object of params to pass to the destination route
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {Transition} the transition object associated with this
         attempted transition
       @public
     */

      replaceWith() {
        return this.transitionTo(...arguments).method('replace');
      }
      /**
      Generate a URL based on the supplied route name and optionally a model. The
      URL is returned as a string that can be used for any purpose.
         In this example, the URL for the `author.books` route for a given author
      is copied to the clipboard.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.args.author);
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books
          }
        }
      }
      ```
         Just like with `transitionTo` and `replaceWith`, `urlFor` can also handle
      query parameters.
         ```app/templates/application.hbs
      <CopyLink @author={{hash id="tomster" name="Tomster"}} />
      ```
         ```app/components/copy-link.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { action } from '@ember/object';
         export default class CopyLinkComponent extends Component {
        @service router;
        @service clipboard;
           @action
        copyOnlyEmberBooksURL() {
          if (this.author) {
            const url = this.router.urlFor('author.books', this.author, {
              queryParams: { filter: 'emberjs' }
            });
            this.clipboard.set(url);
            // Clipboard now has /author/tomster/books?filter=emberjs
          }
        }
      }
      ```
          @method urlFor
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) for the route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {String} the string representing the generated URL
       @public
     */

      urlFor(routeName) {
        this._router.setupRouter();

        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key2 = 1;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2 - 1] = arguments[_key2];
        }

        return this._router.generate(routeName, ...args);
      }
      /**
       Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.
       See [model](api/ember/release/classes/Route/methods/model?anchor=model) and
       [queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.
          In the following example, `isActive` will return `true` if the current route is `/posts`.
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments() {
           return this.router.isActive('posts');
         }
       });
       ```
          The next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,
       assuming the post has an id of 1:
          ```app/components/posts.js
       import Component from '@glimmer/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
            displayComments(post) {
           return this.router.isActive('posts', post.id);
         }
       });
       ```
          Where `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].
       If `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.
          @method isActive
       @param {String} routeName the name of the route
       @param {...Object} models the model(s) or identifier(s) to be used when determining the active route.
       @param {Object} [options] optional hash with a queryParams property
         containing a mapping of query parameters
       @return {boolean} true if the provided routeName/models/queryParams are active
       @public
     */

      isActive() {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3];
        }

        var { routeName, models, queryParams } = (0, _utils.extractRouteArgs)(
          args,
        );
        var routerMicrolib = this._router._routerMicrolib; // When using isActive() in a getter, we want to entagle with the auto-tracking system
        // for example,
        // in
        // get isBarActive() {
        //   return isActive('foo.bar');
        // }
        //
        // you'd expect isBarActive to be dirtied when the route changes.
        //
        // https://github.com/emberjs/ember.js/issues/19004

        (0, _validator.consumeTag)(
          (0, _validator.tagFor)(this._router, 'currentURL'),
        ); // UNSAFE: casting `routeName as string` here encodes the existing
        // assumption but may be wrong: `extractRouteArgs` correctly returns it as
        // `string | undefined`. There may be bugs if `isActiveIntent` does
        // not correctly account for `undefined` values for `routeName`. Spoilers:
        // it *does not* account for this being `undefined`.

        if (!routerMicrolib.isActiveIntent(routeName, models)) {
          return false;
        }

        var hasQueryParams = Object.keys(queryParams).length > 0;

        if (hasQueryParams) {
          // UNSAFE: casting `routeName as string` here encodes the existing
          // assumption but may be wrong: `extractRouteArgs` correctly returns it
          // as `string | undefined`. There may be bugs if `_prepareQueryParams`
          // does not correctly account for `undefined` values for `routeName`.
          //  Spoilers: under the hood this currently uses router.js APIs which
          // *do not* account for this being `undefined`.
          var targetRouteName = routeName;
          queryParams = Object.assign({}, queryParams);

          this._router._prepareQueryParams(
            targetRouteName,
            models,
            queryParams,
            true,
            /* fromRouterService */
          );

          var currentQueryParams = Object.assign(
            {},
            routerMicrolib.state.queryParams,
          );

          this._router._prepareQueryParams(
            targetRouteName,
            models,
            currentQueryParams,
            true,
            /* fromRouterService */
          );

          return (0, _utils.shallowEqual)(queryParams, currentQueryParams);
        }

        return true;
      }
      /**
       Takes a string URL and returns a `RouteInfo` for the leafmost route represented
       by the URL. Returns `null` if the URL is not recognized. This method expects to
       receive the actual URL as seen by the browser including the app's `rootURL`.
          See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
          In the following example `recognize` is used to verify if a path belongs to our
       application before transitioning to it.
          ```
       import Component from '@ember/component';
       import { service } from '@ember/service';
          export default class extends Component {
         @service router;
         path = '/';
            click() {
           if (this.router.recognize(this.path)) {
             this.router.transitionTo(this.path);
           }
         }
       }
       ```
           @method recognize
        @param {String} url
        @return {RouteInfo | null}
        @public
      */

      recognize(url) {
        true &&
          !(url.indexOf(this.rootURL) === 0) &&
          (0, _debug.assert)(
            `You must pass a url that begins with the application's rootURL "${this.rootURL}"`,
            url.indexOf(this.rootURL) === 0,
          );

        this._router.setupRouter();

        var internalURL = cleanURL(url, this.rootURL);
        return this._router._routerMicrolib.recognize(internalURL);
      }
      /**
      Takes a string URL and returns a promise that resolves to a
      `RouteInfoWithAttributes` for the leafmost route represented by the URL.
      The promise rejects if the URL is not recognized or an unhandled exception
      is encountered. This method expects to receive the actual URL as seen by
      the browser including the app's `rootURL`.
           @method recognizeAndLoad
        @param {String} url
        @return {RouteInfo}
        @public
     */

      recognizeAndLoad(url) {
        true &&
          !(url.indexOf(this.rootURL) === 0) &&
          (0, _debug.assert)(
            `You must pass a url that begins with the application's rootURL "${this.rootURL}"`,
            url.indexOf(this.rootURL) === 0,
          );

        this._router.setupRouter();

        var internalURL = cleanURL(url, this.rootURL);
        return this._router._routerMicrolib.recognizeAndLoad(internalURL);
      }
      /**
      You can register a listener for events emitted by this service with `.on()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         @method on
      @param {String} eventName
      @param {Function} callback
      @public
    */

      /**
      You can unregister a listener for events emitted by this service with `.off()`:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           callback = (transition) =>  {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert("Please save or cancel your changes.");
            transition.abort();
          }
        };
           activate() {
          this.router.on('routeWillChange', this.callback);
        }
           deactivate() {
          this.router.off('routeWillChange', this.callback);
      }
      ```
         @method off
      @param {String} eventName
      @param {Function} callback
      @public
    */

      /**
      The `routeWillChange` event is fired at the beginning of any
      attempted transition with a `Transition` object as the sole
      argument. This action can be used for aborting, redirecting,
      or decorating the transition from the currently active routes.
         A good example is preventing navigation when a form is
      half-filled out:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeWillChange', (transition) => {
            if (!transition.to.find(route => route.name === this.routeName)) {
              alert("Please save or cancel your changes.");
              transition.abort();
            }
          })
        }
      }
      ```
         The `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.
         @event routeWillChange
      @param {Transition} transition
      @public
    */

      /**
      The `routeDidChange` event only fires once a transition has settled.
      This includes aborts and error substates. Like the `routeWillChange` event
      it receives a Transition as the sole argument.
         A good example is sending some analytics when the route has transitioned:
         ```app/routes/contact-form.js
      import Route from '@ember/routing';
      import { service } from '@ember/service';
         export default class extends Route {
        @service router;
           activate() {
          this.router.on('routeDidChange', (transition) => {
            ga.send('pageView', {
              current: transition.to.name,
              from: transition.from.name
            });
          })
        }
      }
      ```
         `routeDidChange` will be called after any `Route`'s
      [didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)
      action has been fired.
      The updates of properties
      [currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),
      [currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)
      and
      [currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)
      are completed at the time `routeDidChange` is called.
         @event routeDidChange
      @param {Transition} transition
      @public
    */

      /**
       * Refreshes all currently active routes, doing a full transition.
       * If a route name is provided and refers to a currently active route,
       * it will refresh only that route and its descendents.
       * Returns a promise that will be resolved once the refresh is complete.
       * All resetController, beforeModel, model, afterModel, redirect, and setupController
       * hooks will be called again. You will get new data from the model hook.
       *
       * @method refresh
       * @param {String} [routeName] the route to refresh (along with all child routes)
       * @return Transition
       * @public
       */

      refresh(pivotRouteName) {
        if (!pivotRouteName) {
          return this._router._routerMicrolib.refresh();
        }

        true &&
          !this._router.hasRoute(pivotRouteName) &&
          (0, _debug.assert)(
            `The route "${pivotRouteName}" was not found`,
            this._router.hasRoute(pivotRouteName),
          );
        true &&
          !this.isActive(pivotRouteName) &&
          (0, _debug.assert)(
            `The route "${pivotRouteName}" is currently not active`,
            this.isActive(pivotRouteName),
          );
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)(
            'RouterService is unexpectedly missing an owner',
            owner,
          );
        var pivotRoute = owner.lookup(`route:${pivotRouteName}`); // R could be instantiated with a different sub-type
        // @ts-ignore

        return this._router._routerMicrolib.refresh(pivotRoute);
      }
    }

    _exports.default = RouterService;

    __decorate(
      [(0, _computed.readOnly)('_router.currentRouteName')],
      RouterService.prototype,
      'currentRouteName',
      void 0,
    );

    __decorate(
      [(0, _computed.readOnly)('_router.currentURL')],
      RouterService.prototype,
      'currentURL',
      void 0,
    );

    __decorate(
      [(0, _computed.readOnly)('_router.location')],
      RouterService.prototype,
      'location',
      void 0,
    );

    __decorate(
      [(0, _computed.readOnly)('_router.rootURL')],
      RouterService.prototype,
      'rootURL',
      void 0,
    );

    __decorate(
      [(0, _computed.readOnly)('_router.currentRoute')],
      RouterService.prototype,
      'currentRoute',
      void 0,
    );
  });
  define('@ember/-internals/routing/lib/services/routing', [
    'exports',
    '@ember/-internals/owner',
    '@ember/debug',
    '@ember/object/computed',
    '@ember/service',
    '@ember/-internals/routing/lib/system/router',
    '@ember/-internals/routing/lib/services/router',
  ], function (
    _exports,
    _owner,
    _debug,
    _computed,
    _service,
    _router2,
    _router3,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */

    /**
    The Routing service is used by LinkTo, and provides facilities for
    the component/view layer to interact with the router.
  
    This is a private service for internal usage only. For public usage,
    refer to the `Router` service.
  
    @private
    @class RoutingService
  */
    class RoutingService extends _service.default {
      get router() {
        var router = this[_router3.ROUTER];

        if (router !== undefined) {
          return router;
        }

        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)(
            'RoutingService is unexpectedly missing an owner',
            owner,
          );

        var _router = owner.lookup('router:main');

        true &&
          !(_router instanceof _router2.default) &&
          (0, _debug.assert)(
            'ROUTING SERVICE BUG: Expected router to be an instance of EmberRouter',
            _router instanceof _router2.default,
          );

        _router.setupRouter();

        return (this[_router3.ROUTER] = _router);
      }

      hasRoute(routeName) {
        return this.router.hasRoute(routeName);
      }

      transitionTo(routeName, models, queryParams, shouldReplace) {
        var transition = this.router._doTransition(
          routeName,
          models,
          queryParams,
        );

        if (shouldReplace) {
          transition.method('replace');
        }

        return transition;
      }

      normalizeQueryParams(routeName, models, queryParams) {
        this.router._prepareQueryParams(routeName, models, queryParams);
      }

      _generateURL(routeName, models, queryParams) {
        var visibleQueryParams = {};

        if (queryParams) {
          Object.assign(visibleQueryParams, queryParams);
          this.normalizeQueryParams(routeName, models, visibleQueryParams);
        }

        return this.router.generate(routeName, ...models, {
          queryParams: visibleQueryParams,
        });
      }

      generateURL(routeName, models, queryParams) {
        if (this.router._initialTransitionStarted) {
          return this._generateURL(routeName, models, queryParams);
        } else {
          // Swallow error when transition has not started.
          // When rendering in tests without visit(), we cannot infer the route context which <LinkTo/> needs be aware of
          try {
            return this._generateURL(routeName, models, queryParams);
          } catch (_e) {
            return;
          }
        }
      }

      isActiveForRoute(contexts, queryParams, routeName, routerState) {
        var handlers = this.router._routerMicrolib.recognizer.handlersFor(
          routeName,
        );

        var leafName = handlers[handlers.length - 1].handler;
        var maximumContexts = numberOfContextsAcceptedByHandler(
          routeName,
          handlers,
        ); // NOTE: any ugliness in the calculation of activeness is largely
        // due to the fact that we support automatic normalizing of
        // `resource` -> `resource.index`, even though there might be
        // dynamic segments / query params defined on `resource.index`
        // which complicates (and makes somewhat ambiguous) the calculation
        // of activeness for links that link to `resource` instead of
        // directly to `resource.index`.
        // if we don't have enough contexts revert back to full route name
        // this is because the leaf route will use one of the contexts

        if (contexts.length > maximumContexts) {
          routeName = leafName;
        }

        return routerState.isActiveIntent(routeName, contexts, queryParams);
      }
    }

    _exports.default = RoutingService;
    RoutingService.reopen({
      targetState: (0, _computed.readOnly)('router.targetState'),
      currentState: (0, _computed.readOnly)('router.currentState'),
      currentRouteName: (0, _computed.readOnly)('router.currentRouteName'),
      currentPath: (0, _computed.readOnly)('router.currentPath'),
    });

    function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
      var req = 0;

      for (var i = 0; i < handlerInfos.length; i++) {
        req += handlerInfos[i].names.length;

        if (handlerInfos[i].handler === handlerName) {
          break;
        }
      }

      return req;
    }
  });
  define('@ember/-internals/routing/lib/system/cache', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
    A two-tiered cache with support for fallback values when doing lookups.
    Uses "buckets" and then "keys" to cache values.
  
    @private
    @class BucketCache
  */
    class BucketCache {
      constructor() {
        this.cache = new Map();
      }

      has(bucketKey) {
        return this.cache.has(bucketKey);
      }

      stash(bucketKey, key, value) {
        var bucket = this.cache.get(bucketKey);

        if (bucket === undefined) {
          bucket = new Map();
          this.cache.set(bucketKey, bucket);
        }

        bucket.set(key, value);
      }

      lookup(bucketKey, prop, defaultValue) {
        if (!this.has(bucketKey)) {
          return defaultValue;
        }

        var bucket = this.cache.get(bucketKey);

        if (bucket.has(prop)) {
          return bucket.get(prop);
        } else {
          return defaultValue;
        }
      }
    }

    _exports.default = BucketCache;
  });
  define('@ember/-internals/routing/lib/system/controller_for', [
    'exports',
  ], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = controllerFor;

    /**
  @module ember
  */

    /**
    Finds a controller instance.
  
    @for Ember
    @method controllerFor
    @private
  */
    function controllerFor(container, controllerName, lookupOptions) {
      return container.lookup(`controller:${controllerName}`, lookupOptions);
    }
  });
  define('@ember/-internals/routing/lib/system/dsl', [
    'exports',
    '@ember/debug',
  ], function (_exports, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var uuid = 0;

    function isCallback(value) {
      return typeof value === 'function';
    }

    function isOptions(value) {
      return value !== null && typeof value === 'object';
    }

    class DSLImpl {
      constructor(name, options) {
        if (name === void 0) {
          name = null;
        }

        this.explicitIndex = false;
        this.parent = name;
        this.enableLoadingSubstates = Boolean(
          options && options.enableLoadingSubstates,
        );
        this.matches = [];
        this.options = options;
      }

      route(name, _options, _callback) {
        var options;
        var callback = null;
        var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;

        if (isCallback(_options)) {
          true &&
            !(arguments.length === 2) &&
            (0, _debug.assert)('Unexpected arguments', arguments.length === 2);
          options = {};
          callback = _options;
        } else if (isCallback(_callback)) {
          true &&
            !(arguments.length === 3) &&
            (0, _debug.assert)('Unexpected arguments', arguments.length === 3);
          true &&
            !isOptions(_options) &&
            (0, _debug.assert)('Unexpected arguments', isOptions(_options));
          options = _options;
          callback = _callback;
        } else {
          options = _options || {};
        }

        true &&
          !(() => {
            if (options.overrideNameAssertion === true) {
              return true;
            }

            return ['basic', 'application'].indexOf(name) === -1;
          })() &&
          (0, _debug.assert)(
            `'${name}' cannot be used as a route name.`,
            (() => {
              if (options.overrideNameAssertion === true) {
                return true;
              }

              return ['basic', 'application'].indexOf(name) === -1;
            })(),
          );
        true &&
          !(name.indexOf(':') === -1) &&
          (0, _debug.assert)(
            `'${name}' is not a valid route name. It cannot contain a ':'. You may want to use the 'path' option instead.`,
            name.indexOf(':') === -1,
          );

        if (this.enableLoadingSubstates) {
          createRoute(this, `${name}_loading`, {
            resetNamespace: options.resetNamespace,
          });
          createRoute(this, `${name}_error`, {
            resetNamespace: options.resetNamespace,
            path: dummyErrorRoute,
          });
        }

        if (callback) {
          var fullName = getFullName(this, name, options.resetNamespace);
          var dsl = new DSLImpl(fullName, this.options);
          createRoute(dsl, 'loading');
          createRoute(dsl, 'error', {
            path: dummyErrorRoute,
          });
          callback.call(dsl);
          createRoute(this, name, options, dsl.generate());
        } else {
          createRoute(this, name, options);
        }
      }

      push(url, name, callback, serialize) {
        var parts = name.split('.');

        if (this.options.engineInfo) {
          var localFullName = name.slice(
            this.options.engineInfo.fullName.length + 1,
          );
          var routeInfo = Object.assign(
            {
              localFullName,
            },
            this.options.engineInfo,
          );

          if (serialize) {
            routeInfo.serializeMethod = serialize;
          }

          this.options.addRouteForEngine(name, routeInfo);
        } else if (serialize) {
          throw new Error(
            `Defining a route serializer on route '${name}' outside an Engine is not allowed.`,
          );
        }

        if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
          this.explicitIndex = true;
        }

        this.matches.push(url, name, callback);
      }

      generate() {
        var dslMatches = this.matches;

        if (!this.explicitIndex) {
          this.route('index', {
            path: '/',
          });
        }

        return (match) => {
          for (var i = 0; i < dslMatches.length; i += 3) {
            match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
          }
        };
      }

      mount(_name, options) {
        if (options === void 0) {
          options = {};
        }

        var engineRouteMap = this.options.resolveRouteMap(_name);
        var name = _name;

        if (options.as) {
          name = options.as;
        }

        var fullName = getFullName(this, name, options.resetNamespace);
        var engineInfo = {
          name: _name,
          instanceId: uuid++,
          mountPoint: fullName,
          fullName,
        };
        var path = options.path;

        if (typeof path !== 'string') {
          path = `/${name}`;
        }

        var callback;
        var dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;

        if (engineRouteMap) {
          var shouldResetEngineInfo = false;
          var oldEngineInfo = this.options.engineInfo;

          if (oldEngineInfo) {
            shouldResetEngineInfo = true;
            this.options.engineInfo = engineInfo;
          }

          var optionsForChild = Object.assign(
            {
              engineInfo,
            },
            this.options,
          );
          var childDSL = new DSLImpl(fullName, optionsForChild);
          createRoute(childDSL, 'loading');
          createRoute(childDSL, 'error', {
            path: dummyErrorRoute,
          });
          engineRouteMap.class.call(childDSL);
          callback = childDSL.generate();

          if (shouldResetEngineInfo) {
            this.options.engineInfo = oldEngineInfo;
          }
        }

        var localFullName = 'application';
        var routeInfo = Object.assign(
          {
            localFullName,
          },
          engineInfo,
        );

        if (this.enableLoadingSubstates) {
          // These values are important to register the loading routes under their
          // proper names for the Router and within the Engine's registry.
          var substateName = `${name}_loading`;
          var _localFullName = `application_loading`;

          var _routeInfo = Object.assign(
            {
              localFullName: _localFullName,
            },
            engineInfo,
          );

          createRoute(this, substateName, {
            resetNamespace: options.resetNamespace,
          });
          this.options.addRouteForEngine(substateName, _routeInfo);
          substateName = `${name}_error`;
          _localFullName = `application_error`;
          _routeInfo = Object.assign(
            {
              localFullName: _localFullName,
            },
            engineInfo,
          );
          createRoute(this, substateName, {
            resetNamespace: options.resetNamespace,
            path: dummyErrorRoute,
          });
          this.options.addRouteForEngine(substateName, _routeInfo);
        }

        this.options.addRouteForEngine(fullName, routeInfo);
        this.push(path, fullName, callback);
      }
    }

    _exports.default = DSLImpl;

    function canNest(dsl) {
      return dsl.parent !== 'application';
    }

    function getFullName(dsl, name, resetNamespace) {
      if (canNest(dsl) && resetNamespace !== true) {
        return `${dsl.parent}.${name}`;
      } else {
        return name;
      }
    }

    function createRoute(dsl, name, options, callback) {
      if (options === void 0) {
        options = {};
      }

      var fullName = getFullName(dsl, name, options.resetNamespace);

      if (typeof options.path !== 'string') {
        options.path = `/${name}`;
      }

      dsl.push(options.path, fullName, callback, options.serialize);
    }
  });
  define('@ember/-internals/routing/lib/system/engines', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
  });
  define('@ember/-internals/routing/lib/system/generate_controller', [
    'exports',
    '@ember/-internals/metal',
    '@ember/controller',
    '@ember/debug',
  ], function (_exports, _metal, _controller, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = generateController;
    _exports.generateControllerFactory = generateControllerFactory;

    /**
  @module ember
  */

    /**
    Generates a controller factory
  
    @for Ember
    @method generateControllerFactory
    @private
  */
    function generateControllerFactory(owner, controllerName) {
      var Factory = owner.factoryFor('controller:basic').class;
      Factory = Factory.extend({
        toString() {
          return `(generated ${controllerName} controller)`;
        },
      });
      var fullName = `controller:${controllerName}`;
      owner.register(fullName, Factory);
      return owner.factoryFor(fullName);
    }
    /**
    Generates and instantiates a controller extending from `controller:basic`
    if present, or `Controller` if not.
  
    @for Ember
    @method generateController
    @private
    @since 1.3.0
  */

    function generateController(owner, controllerName) {
      generateControllerFactory(owner, controllerName);
      var fullName = `controller:${controllerName}`;
      var instance = owner.lookup(fullName);
      true &&
        !(instance instanceof _controller.default) &&
        (0, _debug.assert)(
          'Expected an instance of controller',
          instance instanceof _controller.default,
        );

      if (
        true
        /* DEBUG */
      ) {
        if ((0, _metal.get)(instance, 'namespace.LOG_ACTIVE_GENERATION')) {
          (0, _debug.info)(`generated -> ${fullName}`, {
            fullName,
          });
        }
      }

      return instance;
    }
  });
  define('@ember/-internals/routing/lib/system/query_params', [
    'exports',
  ], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    class QueryParams {
      constructor(values) {
        if (values === void 0) {
          values = null;
        }

        this.isQueryParams = true;
        this.values = values;
      }
    }

    _exports.default = QueryParams;
  });
  define('@ember/-internals/routing/lib/system/route-info', [
    'exports',
  ], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
  });
  define('@ember/-internals/routing/lib/system/route', [
    'exports',
    '@ember/-internals/container',
    '@ember/-internals/metal',
    '@ember/-internals/owner',
    '@ember/-internals/routing',
    '@ember/-internals/runtime',
    '@ember/-internals/utils',
    '@ember/controller',
    '@ember/debug',
    '@ember/engine/instance',
    '@ember/object/compat',
    '@ember/runloop',
    'router_js',
    '@ember/-internals/routing/lib/utils',
    '@ember/-internals/routing/lib/system/generate_controller',
    '@ember/-internals/routing/lib/system/router',
  ], function (
    _exports,
    _container,
    _metal,
    _owner,
    _routing,
    _runtime,
    _utils,
    _controller2,
    _debug,
    _instance,
    _compat,
    _runloop,
    _router_js,
    _utils2,
    _generate_controller,
    _router,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.defaultSerialize = _exports.default = _exports.ROUTE_CONNECTIONS = void 0;
    _exports.getFullQueryParams = getFullQueryParams;
    _exports.hasDefaultSerialize = hasDefaultSerialize;

    var __decorate =
      (void 0 && (void 0).__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    var ROUTE_CONNECTIONS = new WeakMap();
    _exports.ROUTE_CONNECTIONS = ROUTE_CONNECTIONS;
    var RENDER = Symbol('render');

    class Route extends _runtime.Object.extend(
      _runtime.ActionHandler,
      _runtime.Evented,
    ) {
      constructor(owner) {
        super(owner);
        this.context = {};

        if (owner) {
          var router = owner.lookup('router:main');
          var bucketCache = owner.lookup(
            (0, _container.privatize)`-bucket-cache:main`,
          );
          true &&
            !(
              router instanceof _router.default &&
              bucketCache instanceof _routing.BucketCache
            ) &&
            (0, _debug.assert)(
              'ROUTER BUG: Expected route injections to be defined on the route. This is an internal bug, please open an issue on Github if you see this message!',
              router instanceof _router.default &&
                bucketCache instanceof _routing.BucketCache,
            );
          this._router = router;
          this._bucketCache = bucketCache;
          this._topLevelViewTemplate = owner.lookup('template:-outlet');
          this._environment = owner.lookup('-environment:main');
        }
      }
      /**
      A hook you can implement to convert the route's model into parameters
      for the URL.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model({ post_id }) {
          // the server returns `{ id: 12 }`
          return fetch(`/posts/${post_id}`;
        }
           serialize(model) {
          // this will make the URL `/posts/12`
          return { post_id: model.id };
        }
      }
      ```
         The default `serialize` method will insert the model's `id` into the
      route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
      If the route has multiple dynamic segments or does not contain '_id', `serialize`
      will return `getProperties(model, params)`
         This method is called when `transitionTo` is called with a context
      in order to populate the URL.
         @method serialize
      @param {Object} model the routes model
      @param {Array} params an Array of parameter names for the current
        route (in the example, `['post_id']`.
      @return {Object} the serialized parameters
      @since 1.0.0
      @public
    */

      serialize(model, params) {
        if (params.length < 1 || !model) {
          return;
        }

        var object = {};

        if (params.length === 1) {
          var [name] = params;
          true && !name && (0, _debug.assert)('has name', name);

          if (name in model) {
            object[name] = (0, _metal.get)(model, name);
          } else if (/_id$/.test(name)) {
            object[name] = (0, _metal.get)(model, 'id');
          } else if ((0, _utils.isProxy)(model)) {
            object[name] = (0, _metal.get)(model, name);
          }
        } else {
          object = (0, _metal.getProperties)(model, params);
        }

        return object;
      }
      /**
      Sets the name for this route, including a fully resolved name for routes
      inside engines.
         @private
      @method _setRouteName
      @param {String} name
    */

      _setRouteName(name) {
        this.routeName = name;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !(owner instanceof _instance.default) &&
          (0, _debug.assert)(
            'Expected route to have EngineInstance as owner',
            owner instanceof _instance.default,
          );
        this.fullRouteName = getEngineRouteName(owner, name);
      }
      /**
      @private
         @method _stashNames
    */

      _stashNames(routeInfo, dynamicParent) {
        if (this._names) {
          return;
        }

        var names = (this._names = routeInfo['_names']);

        if (!names.length) {
          routeInfo = dynamicParent;
          names = (routeInfo && routeInfo['_names']) || [];
        } // SAFETY: Since `_qp` is protected we can't infer the type

        var qps = (0, _metal.get)(this, '_qp').qps;
        var namePaths = new Array(names.length);

        for (var a = 0; a < names.length; ++a) {
          namePaths[a] = `${routeInfo.name}.${names[a]}`;
        }

        for (var qp of qps) {
          if (qp.scope === 'model') {
            qp.parts = namePaths;
          }
        }
      }
      /**
      @private
         @property _activeQPChanged
    */

      _activeQPChanged(qp, value) {
        this._router._activeQPChanged(qp.scopedPropertyName, value);
      }
      /**
      @private
      @method _updatingQPChanged
    */

      _updatingQPChanged(qp) {
        this._router._updatingQPChanged(qp.urlKey);
      }
      /**
      Returns a hash containing the parameters of an ancestor route.
         You may notice that `this.paramsFor` sometimes works when referring to a
      child route, but this behavior should not be relied upon as only ancestor
      routes are certain to be loaded in time.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('member', { path: ':name' }, function() {
          this.route('interest', { path: ':interest' });
        });
      });
      ```
         ```app/routes/member.js
      import Route from '@ember/routing/route';
         export default class MemberRoute extends Route {
        queryParams = {
          memberQp: { refreshModel: true }
        }
      }
      ```
         ```app/routes/member/interest.js
      import Route from '@ember/routing/route';
         export default class MemberInterestRoute extends Route {
        queryParams = {
          interestQp: { refreshModel: true }
        }
           model() {
          return this.paramsFor('member');
        }
      }
      ```
         If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
      the `member.interest` route is a hash with:
         * `name`: `turing`
      * `memberQp`: `member`
         @method paramsFor
      @param {String} name
      @return {Object} hash containing the parameters of the route `name`
      @since 1.4.0
      @public
    */

      paramsFor(name) {
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
        var route = owner.lookup(`route:${name}`);

        if (route === undefined) {
          return {};
        }

        var transition = this._router._routerMicrolib.activeTransition;
        var state = transition
          ? transition[_router_js.STATE_SYMBOL]
          : this._router._routerMicrolib.state;
        var fullName = route.fullRouteName;
        var params = Object.assign({}, state.params[fullName]);
        var queryParams = getQueryParamsFor(route, state);
        return Object.entries(queryParams).reduce((params, _ref) => {
          var [key, value] = _ref;
          true &&
            !!params[key] &&
            (0, _debug.assert)(
              `The route '${this.routeName}' has both a dynamic segment and query param with name '${key}'. Please rename one to avoid collisions.`,
              !params[key],
            );
          params[key] = value;
          return params;
        }, params);
      }
      /**
      Serializes the query parameter key
         @method serializeQueryParamKey
      @param {String} controllerPropertyName
      @private
    */

      serializeQueryParamKey(controllerPropertyName) {
        return controllerPropertyName;
      }
      /**
      Serializes value of the query parameter based on defaultValueType
         @method serializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */

      serializeQueryParam(value, _urlKey, defaultValueType) {
        // urlKey isn't used here, but anyone overriding
        // can use it to provide serialization specific
        // to a certain query param.
        return this._router._serializeQueryParam(value, defaultValueType);
      }
      /**
      Deserializes value of the query parameter based on defaultValueType
         @method deserializeQueryParam
      @param {Object} value
      @param {String} urlKey
      @param {String} defaultValueType
      @private
    */

      deserializeQueryParam(value, _urlKey, defaultValueType) {
        // urlKey isn't used here, but anyone overriding
        // can use it to provide deserialization specific
        // to a certain query param.
        return this._router._deserializeQueryParam(value, defaultValueType);
      }
      /**
      @private
         @property _optionsForQueryParam
    */

      _optionsForQueryParam(qp) {
        var queryParams = (0, _metal.get)(this, 'queryParams');
        return (
          (0, _metal.get)(queryParams, qp.urlKey) ||
          (0, _metal.get)(queryParams, qp.prop) ||
          queryParams[qp.urlKey] ||
          queryParams[qp.prop] ||
          {}
        );
      }
      /**
      A hook you can use to reset controller values either when the model
      changes or the route is exiting.
         ```app/routes/articles.js
      import Route from '@ember/routing/route';
         export default class ArticlesRoute extends Route {
        resetController(controller, isExiting, transition) {
          if (isExiting && transition.targetName !== 'error') {
            controller.set('page', 1);
          }
        }
      }
      ```
         @method resetController
      @param {Controller} controller instance
      @param {Boolean} isExiting
      @param {Object} transition
      @since 1.7.0
      @public
    */

      resetController(_controller, _isExiting, _transition) {
        return this;
      }
      /**
      @private
         @method exit
    */

      exit(transition) {
        this.deactivate(transition);
        this.trigger('deactivate', transition);
        this.teardownViews();
      }
      /**
      @private
         @method _internalReset
      @since 3.6.0
    */

      _internalReset(isExiting, transition) {
        var controller = this.controller; // SAFETY: Since `_qp` is protected we can't infer the type

        controller['_qpDelegate'] = (0, _metal.get)(
          this,
          '_qp',
        ).states.inactive;
        this.resetController(controller, isExiting, transition);
      }
      /**
      @private
         @method enter
    */

      enter(transition) {
        ROUTE_CONNECTIONS.set(this, []);
        this.activate(transition);
        this.trigger('activate', transition);
      }
      /**
      This event is triggered when the router enters the route. It is
      not executed when the model for the route changes.
         ```app/routes/application.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        collectAnalytics: on('activate', function(){
          collectAnalytics();
        })
      });
      ```
         @event activate
      @since 1.9.0
      @public
    */

      /**
      This event is triggered when the router completely exits this
      route. It is not executed when the model for the route changes.
         ```app/routes/index.js
      import { on } from '@ember/object/evented';
      import Route from '@ember/routing/route';
         export default Route.extend({
        trackPageLeaveAnalytics: on('deactivate', function(){
          trackPageLeaveAnalytics();
        })
      });
      ```
         @event deactivate
      @since 1.9.0
      @public
    */

      /**
      This hook is executed when the router completely exits this route. It is
      not executed when the model for the route changes.
         @method deactivate
      @param {Transition} transition
      @since 1.0.0
      @public
    */

      deactivate(_transition) {}
      /**
      This hook is executed when the router enters the route. It is not executed
      when the model for the route changes.
         @method activate
      @param {Transition} transition
      @since 1.0.0
      @public
    */

      activate(_transition) {}
      /**
      Transition the application into another route. The route may
      be either a single route or route path:
         ```javascript
      this.transitionTo('blogPosts');
      this.transitionTo('blogPosts.recentEntries');
      ```
         Optionally supply a model for the route in question. The model
      will be serialized into the URL using the `serialize` hook of
      the route:
         ```javascript
      this.transitionTo('blogPost', aPost);
      ```
         If a literal is passed (such as a number or a string), it will
      be treated as an identifier instead. In this case, the `model`
      hook of the route will be triggered:
         ```javascript
      this.transitionTo('blogPost', 1);
      ```
         Multiple models will be applied last to first recursively up the
      route tree.
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('blogPost', { path:':blogPostId' }, function() {
          this.route('blogComment', { path: ':blogCommentId' });
        });
      });
         export default Router;
      ```
         ```javascript
      this.transitionTo('blogComment', aPost, aComment);
      this.transitionTo('blogComment', 1, 13);
      ```
         It is also possible to pass a URL (a string that starts with a
      `/`).
         ```javascript
      this.transitionTo('/');
      this.transitionTo('/blog/post/1/comment/13');
      this.transitionTo('/blog/posts?sort=title');
      ```
         An options hash with a `queryParams` property may be provided as
      the final argument to add query parameters to the destination URL.
         ```javascript
      this.transitionTo('blogPost', 1, {
        queryParams: { showComments: 'true' }
      });
         // if you just want to transition the query parameters without changing the route
      this.transitionTo({ queryParams: { sort: 'date' } });
      ```
         See also [replaceWith](#method_replaceWith).
         Simple Transition Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
        this.route('fourOhFour', { path: '*:' });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToSecret(context) {
          if (authorized()) {
            this.transitionTo('secret', context);
          } else {
            this.transitionTo('fourOhFour');
          }
        }
      }
      ```
         Transition to a nested route
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('articles', { path: '/articles' }, function() {
          this.route('new');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        transitionToNewArticle() {
          this.transitionTo('articles.new');
        }
      }
      ```
         Multiple Models Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
           this.route('breakfast', { path: ':breakfastId' }, function() {
          this.route('cereal', { path: ':cerealId' });
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class IndexRoute extends Route {
        @action
        moveToChocolateCereal() {
          let cereal = { cerealId: 'ChocolateYumminess' };
          let breakfast = { breakfastId: 'CerealAndMilk' };
             this.transitionTo('breakfast.cereal', breakfast, cereal);
        }
      }
      ```
         Nested Route with Query String Example
         ```app/routes.js
      // ...
         Router.map(function() {
        this.route('fruits', function() {
          this.route('apples');
        });
      });
         export default Router;
      ```
         ```app/routes/index.js
      import Route from '@ember/routing/route';
         export default class IndexRoute extends Route {
        @action
        transitionToApples() {
          this.transitionTo('fruits.apples', { queryParams: { color: 'red' } });
        }
      }
      ```
         @method transitionTo
      @param {String} [name] the name of the route or a URL.
      @param {...Object} [models] the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters. May be supplied as the only
        parameter to trigger a query-parameter-only transition.
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use transitionTo from the Router service instead.
      @public
    */

      transitionTo() {
        (0, _utils2.deprecateTransitionMethods)('route', 'transitionTo');

        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return this._router.transitionTo(
          ...(0, _utils2.prefixRouteNameArg)(this, args),
        );
      }
      /**
      Perform a synchronous transition into another route without attempting
      to resolve promises, update the URL, or abort any currently active
      asynchronous transitions (i.e. regular transitions caused by
      `transitionTo` or URL changes).
         This method is handy for performing intermediate transitions on the
      way to a final destination route, and is called internally by the
      default implementations of the `error` and `loading` handlers.
         @method intermediateTransitionTo
      @param {String} name the name of the route
      @param {...Object} models the model(s) to be used while transitioning
      to the route.
      @since 1.2.0
      @public
     */

      intermediateTransitionTo() {
        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2];
        }

        var [name, ...preparedArgs] = (0, _utils2.prefixRouteNameArg)(
          this,
          args,
        );

        this._router.intermediateTransitionTo(name, ...preparedArgs);
      }
      /**
      Refresh the model on this route and any child routes, firing the
      `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
      to how routes are entered when transitioning in from other route.
      The current route params (e.g. `article_id`) will be passed in
      to the respective model hooks, and if a different model is returned,
      `setupController` and associated route hooks will re-fire as well.
         An example usage of this method is re-querying the server for the
      latest information using the same parameters as when the route
      was first entered.
         Note that this will cause `model` hooks to fire even on routes
      that were provided a model object when the route was initially
      entered.
         @method refresh
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.4.0
      @public
     */

      refresh() {
        return this._router._routerMicrolib.refresh(this);
      }
      /**
      Transition into another route while replacing the current URL, if possible.
      This will replace the current history entry instead of adding a new one.
      Beside that, it is identical to `transitionTo` in all other respects. See
      'transitionTo' for additional information regarding multiple models.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('index');
        this.route('secret');
      });
         export default Router;
      ```
         ```app/routes/secret.js
      import Route from '@ember/routing/route';
         export default class SecretRoute Route {
        afterModel() {
          if (!authorized()){
            this.replaceWith('index');
          }
        }
      }
      ```
         @method replaceWith
      @param {String} name the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @since 1.0.0
      @deprecated Use replaceWith from the Router service instead.
      @public
    */

      replaceWith() {
        (0, _utils2.deprecateTransitionMethods)('route', 'replaceWith');

        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3];
        }

        return this._router.replaceWith(
          ...(0, _utils2.prefixRouteNameArg)(this, args),
        );
      }
      /**
      This hook is the entry point for router.js
         @private
      @method setup
    */

      setup(context, transition) {
        var controllerName = this.controllerName || this.routeName;
        var definedController = this.controllerFor(controllerName, true);
        var controller =
          definedController !== null && definedController !== void 0
            ? definedController
            : this.generateController(controllerName); // SAFETY: Since `_qp` is protected we can't infer the type

        var queryParams = (0, _metal.get)(this, '_qp'); // Assign the route's controller so that it can more easily be
        // referenced in action handlers. Side effects. Side effects everywhere.

        if (!this.controller) {
          var propNames = queryParams.propertyNames;
          addQueryParamsObservers(controller, propNames);
          this.controller = controller;
        }

        var states = queryParams.states;
        controller._qpDelegate = states.allowOverrides;

        if (transition) {
          // Update the model dep values used to calculate cache keys.
          (0, _utils2.stashParamNames)(
            this._router,
            transition[_router_js.STATE_SYMBOL].routeInfos,
          );
          var cache = this._bucketCache;
          var params = transition[_router_js.PARAMS_SYMBOL];
          var allParams = queryParams.propertyNames;
          allParams.forEach((prop) => {
            var aQp = queryParams.map[prop];
            true && !aQp && (0, _debug.assert)('expected aQp', aQp);
            aQp.values = params;
            var cacheKey = (0, _utils2.calculateCacheKey)(
              aQp.route.fullRouteName,
              aQp.parts,
              aQp.values,
            );
            var value = cache.lookup(
              cacheKey,
              prop,
              aQp.undecoratedDefaultValue,
            );
            (0, _metal.set)(controller, prop, value);
          });
          var qpValues = getQueryParamsFor(
            this,
            transition[_router_js.STATE_SYMBOL],
          );
          (0, _metal.setProperties)(controller, qpValues);
        }

        this.setupController(controller, context, transition);

        if (this._environment.options.shouldRender) {
          this[RENDER]();
        } // Setup can cause changes to QPs which need to be propogated immediately in
        // some situations. Eventually, we should work on making these async somehow.

        (0, _metal.flushAsyncObservers)(false);
      }
      /*
      Called when a query parameter for this route changes, regardless of whether the route
      is currently part of the active route hierarchy. This will update the query parameter's
      value in the cache so if this route becomes active, the cache value has been updated.
    */

      _qpChanged(prop, value, qp) {
        if (!qp) {
          return;
        } // Update model-dep cache

        var cache = this._bucketCache;
        var cacheKey = (0, _utils2.calculateCacheKey)(
          qp.route.fullRouteName,
          qp.parts,
          qp.values,
        );
        cache.stash(cacheKey, prop, value);
      }

      beforeModel(_transition) {}

      afterModel(_resolvedModel, _transition) {}
      /**
      A hook you can implement to optionally redirect to another route.
         Calling `this.transitionTo` from inside of the `redirect` hook will
      abort the current transition (into the route that has implemented `redirect`).
         `redirect` and `afterModel` behave very similarly and are
      called almost at the same time, but they have an important
      distinction when calling `this.transitionTo` to a child route
      of the current route. From `afterModel`, this new transition
      invalidates the current transition, causing `beforeModel`,
      `model`, and `afterModel` hooks to be called again. But the
      same transition started from `redirect` does _not_ invalidate
      the current transition. In other words, by the time the `redirect`
      hook has been called, both the resolved model and the attempted
      entry into this route are considered fully validated.
         @method redirect
      @param {Object} model the model for this route
      @param {Transition} transition the transition object associated with the current transition
      @since 1.0.0
      @public
    */

      redirect(_model, _transition) {}
      /**
      Called when the context is changed by router.js.
         @private
      @method contextDidChange
    */

      contextDidChange() {
        this.currentModel = this.context;
      }
      /**
      A hook you can implement to convert the URL into the model for
      this route.
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         The model for the `post` route is `store.findRecord('post', params.post_id)`.
         By default, if your route has a dynamic segment ending in `_id`:
         * The model class is determined from the segment (`post_id`'s
        class is `App.Post`)
      * The find method is called on the model class with the value of
        the dynamic segment.
         Note that for routes with dynamic segments, this hook is not always
      executed. If the route is entered through a transition (e.g. when
      using the `link-to` Handlebars helper or the `transitionTo` method
      of routes), and a model context is already provided this hook
      is not called.
         A model context does not include a primitive string or number,
      which does cause the model hook to be called.
         Routes without dynamic segments will always execute the model hook.
         ```javascript
      // no dynamic segment, model hook always called
      this.transitionTo('posts');
         // model passed in, so model hook not called
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost);
         // integer passed in, model hook is called
      this.transitionTo('post', 1);
         // model id passed in, model hook is called
      // useful for forcing the hook to execute
      thePost = store.findRecord('post', 1);
      this.transitionTo('post', thePost.id);
      ```
         This hook follows the asynchronous/promise semantics
      described in the documentation for `beforeModel`. In particular,
      if a promise returned from `model` fails, the error will be
      handled by the `error` hook on `Route`.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        model(params) {
          return this.store.findRecord('post', params.post_id);
        }
      }
      ```
         @method model
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route. If
        a promise is returned, the transition will pause until
        the promise resolves, and the resolved value of the promise
        will be used as the model for this route.
      @since 1.0.0
      @public
    */

      model(params, transition) {
        var name, sawParams, value; // SAFETY: Since `_qp` is protected we can't infer the type

        var queryParams = (0, _metal.get)(this, '_qp').map;

        for (var prop in params) {
          if (prop === 'queryParams' || (queryParams && prop in queryParams)) {
            continue;
          }

          var match = prop.match(/^(.*)_id$/);

          if (match !== null) {
            name = match[1];
            value = params[prop];
          }

          sawParams = true;
        }

        if (!name) {
          if (sawParams) {
            // SAFETY: This should be equivalent
            return Object.assign({}, params);
          } else {
            if (transition.resolveIndex < 1) {
              return;
            } // SAFETY: This should be correct, but TS is unable to infer this.

            return transition[_router_js.STATE_SYMBOL].routeInfos[
              transition.resolveIndex - 1
            ].context;
          }
        }

        return this.findModel(name, value);
      }
      /**
      @private
      @method deserialize
      @param {Object} params the parameters extracted from the URL
      @param {Transition} transition
      @return {any | Promise<any>} the model for this route.
         Router.js hook.
     */

      deserialize(_params, transition) {
        return this.model(this._paramsFor(this.routeName, _params), transition);
      }
      /**
         @method findModel
      @param {String} type the model type
      @param {Object} value the value passed to find
      @private
    */

      findModel() {
        return (0, _metal.get)(this, 'store').find(...arguments);
      }
      /**
      A hook you can use to setup the controller for the current route.
         This method is called with the controller for the current route and the
      model supplied by the `model` hook.
         By default, the `setupController` hook sets the `model` property of
      the controller to the specified `model` when it is not `undefined`.
         If you implement the `setupController` hook in your Route, it will
      prevent this default behavior. If you want to preserve that behavior
      when implementing your `setupController` function, make sure to call
      `super`:
         ```app/routes/photos.js
      import Route from '@ember/routing/route';
         export default class PhotosRoute extends Route {
        model() {
          return this.store.findAll('photo');
        }
           setupController(controller, model) {
          super.setupController(controller, model);
             this.controllerFor('application').set('showingPhotos', true);
        }
      }
      ```
         The provided controller will be one resolved based on the name
      of this route.
         If no explicit controller is defined, Ember will automatically create one.
         As an example, consider the router:
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' });
      });
         export default Router;
      ```
         If you have defined a file for the post controller,
      the framework will use it.
      If it is not defined, a basic `Controller` instance would be used.
         @example Behavior of a basic Controller
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class PostRoute extends Route {
        setupController(controller, model) {
          controller.set('model', model);
        }
      });
      ```
         @method setupController
      @param {Controller} controller instance
      @param {Object} model
      @param {Transition} [transition]
      @since 1.0.0
      @public
    */

      setupController(controller, context, _transition) {
        if (controller && context !== undefined) {
          (0, _metal.set)(controller, 'model', context);
        }
      }

      controllerFor(name, _skipAssert) {
        if (_skipAssert === void 0) {
          _skipAssert = false;
        }

        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
        var route = owner.lookup(`route:${name}`);

        if (route && route.controllerName) {
          name = route.controllerName;
        }

        var controller = owner.lookup(`controller:${name}`); // NOTE: We're specifically checking that skipAssert is true, because according
        //   to the old API the second parameter was model. We do not want people who
        //   passed a model to skip the assertion.

        true &&
          !(controller !== undefined || _skipAssert === true) &&
          (0, _debug.assert)(
            `The controller named '${name}' could not be found. Make sure that this route exists and has already been entered at least once. If you are accessing a controller not associated with a route, make sure the controller class is explicitly defined.`,
            controller !== undefined || _skipAssert === true,
          );
        true &&
          !(
            controller === undefined ||
            controller instanceof _controller2.default
          ) &&
          (0, _debug.assert)(
            `Expected controller:${name} to be an instance of Controller`,
            controller === undefined ||
              controller instanceof _controller2.default,
          );
        return controller;
      }
      /**
      Generates a controller for a route.
         Example
         ```app/routes/post.js
      import Route from '@ember/routing/route';
         export default class Post extends Route {
        setupController(controller, post) {
          super.setupController(controller, post);
             this.generateController('posts');
        }
      }
      ```
         @method generateController
      @param {String} name the name of the controller
      @private
    */

      generateController(name) {
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
        return (0, _generate_controller.default)(owner, name);
      }
      /**
      Returns the resolved model of a parent (or any ancestor) route
      in a route hierarchy.  During a transition, all routes
      must resolve a model object, and if a route
      needs access to a parent route's model in order to
      resolve a model (or just reuse the model from a parent),
      it can call `this.modelFor(theNameOfParentRoute)` to
      retrieve it. If the ancestor route's model was a promise,
      its resolved result is returned.
         Example
         ```app/router.js
      // ...
         Router.map(function() {
        this.route('post', { path: '/posts/:post_id' }, function() {
          this.route('comments');
        });
      });
         export default Router;
      ```
         ```app/routes/post/comments.js
      import Route from '@ember/routing/route';
         export default class PostCommentsRoute extends Route {
        model() {
          let post = this.modelFor('post');
             return post.comments;
        }
      }
      ```
         @method modelFor
      @param {String} name the name of the route
      @return {Object} the model object
      @since 1.0.0
      @public
    */

      modelFor(_name) {
        var name;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !(owner instanceof _instance.default) &&
          (0, _debug.assert)(
            'Expected router owner to be an EngineInstance',
            owner instanceof _instance.default,
          );
        var transition =
          this._router && this._router._routerMicrolib
            ? this._router._routerMicrolib.activeTransition
            : undefined; // Only change the route name when there is an active transition.
        // Otherwise, use the passed in route name.

        if (owner.routable && transition !== undefined) {
          name = getEngineRouteName(owner, _name);
        } else {
          name = _name;
        }

        var route = owner.lookup(`route:${name}`); // If we are mid-transition, we want to try and look up
        // resolved parent contexts on the current transitionEvent.

        if (transition !== undefined && transition !== null) {
          var modelLookupName = (route && route.routeName) || name;

          if (
            Object.prototype.hasOwnProperty.call(
              transition.resolvedModels,
              modelLookupName,
            )
          ) {
            return transition.resolvedModels[modelLookupName];
          }
        }

        return route === null || route === void 0 ? void 0 : route.currentModel;
      }
      /**
      `this[RENDER]` is used to render a template into a region of another template
      (indicated by an `{{outlet}}`).
         @method this[RENDER]
      @param {String} name the name of the template to render
      @param {Object} [options] the options
      @param {String} [options.into] the template to render into,
                      referenced by name. Defaults to the parent template
      @param {String} [options.outlet] the outlet inside `options.into` to render into.
                      Defaults to 'main'
      @param {String|Object} [options.controller] the controller to use for this template,
                      referenced by name or as a controller instance. Defaults to the Route's paired controller
      @param {Object} [options.model] the model object to set on `options.controller`.
                      Defaults to the return value of the Route's model hook
      @private
     */

      [RENDER](name, options) {
        var renderOptions = buildRenderOptions(this, name, options);
        ROUTE_CONNECTIONS.get(this).push(renderOptions);
        (0, _runloop.once)(this._router, '_setOutlets');
      }

      willDestroy() {
        this.teardownViews();
      }
      /**
      @private
         @method teardownViews
    */

      teardownViews() {
        var connections = ROUTE_CONNECTIONS.get(this);

        if (connections !== undefined && connections.length > 0) {
          ROUTE_CONNECTIONS.set(this, []);
          (0, _runloop.once)(this._router, '_setOutlets');
        }
      }

      buildRouteInfoMetadata() {}

      _paramsFor(routeName, params) {
        var transition = this._router._routerMicrolib.activeTransition;

        if (transition !== undefined) {
          return this.paramsFor(routeName);
        }

        return params;
      }
      /**
      Store property provides a hook for data persistence libraries to inject themselves.
         By default, this store property provides the exact same functionality previously
      in the model hook.
         Currently, the required interface is:
         `store.find(modelName, findArguments)`
         @property store
      @type {Object}
      @private
    */

      get store() {
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
        var routeName = this.routeName;
        return {
          find(name, value) {
            var modelClass = owner.factoryFor(`model:${name}`);
            true &&
              !Boolean(modelClass) &&
              (0, _debug.assert)(
                `You used the dynamic segment \`${name}_id\` in your route ` +
                  `\`${routeName}\` for which Ember requires you provide a ` +
                  `data-loading implementation. Commonly, that is done by ` +
                  `adding a model hook implementation on the route ` +
                  `(\`model({${name}_id}) {\`) or by injecting an implemention of ` +
                  `a data store: \`@service store;\`.`,
                Boolean(modelClass),
              );

            if (!modelClass) {
              return;
            }

            modelClass = modelClass.class;
            true &&
              !(typeof modelClass.find === 'function') &&
              (0, _debug.assert)(
                `You used the dynamic segment \`${name}_id\` in your route ` +
                  `\`${routeName}\` for which Ember requires you provide a ` +
                  `data-loading implementation. Commonly, that is done by ` +
                  `adding a model hook implementation on the route ` +
                  `(\`model({${name}_id}) {\`) or by injecting an implemention of ` +
                  `a data store: \`@service store;\`.\n\n` +
                  `Rarely, applications may attempt to use a legacy behavior where ` +
                  `the model class (in this case \`${name}\`) is resolved and the ` +
                  `\`find\` method on that class is invoked to load data. In this ` +
                  `application, a model of \`${name}\` was found but it did not ` +
                  `provide a \`find\` method. You should not add a \`find\` ` +
                  `method to your model. Instead, please implement an appropriate ` +
                  `\`model\` hook on the \`${routeName}\` route.`,
                typeof modelClass.find === 'function',
              );
            return modelClass.find(value);
          },
        };
      }

      set store(value) {
        (0, _metal.defineProperty)(this, 'store', null, value);
      }
      /**
      @private
      @property _qp
      */

      get _qp() {
        var combinedQueryParameterConfiguration = {};
        var controllerName = this.controllerName || this.routeName;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
        var controller = owner.lookup(`controller:${controllerName}`);
        var queryParameterConfiguraton = (0, _metal.get)(this, 'queryParams');
        var hasRouterDefinedQueryParams =
          Object.keys(queryParameterConfiguraton).length > 0;

        if (controller) {
          true &&
            !(controller instanceof _controller2.default) &&
            (0, _debug.assert)(
              'Expected an instance of controller',
              controller instanceof _controller2.default,
            ); // the developer has authored a controller class in their application for
          // this route find its query params and normalize their object shape them
          // merge in the query params for the route. As a mergedProperty,
          // Route#queryParams is always at least `{}`

          var controllerDefinedQueryParameterConfiguration =
            (0, _metal.get)(controller, 'queryParams') || [];
          var normalizedControllerQueryParameterConfiguration = (0,
          _utils2.normalizeControllerQueryParams)(
            controllerDefinedQueryParameterConfiguration,
          );
          combinedQueryParameterConfiguration = mergeEachQueryParams(
            normalizedControllerQueryParameterConfiguration,
            queryParameterConfiguraton,
          );
        } else if (hasRouterDefinedQueryParams) {
          // the developer has not defined a controller but *has* supplied route query params.
          // Generate a class for them so we can later insert default values
          controller = (0, _generate_controller.default)(owner, controllerName);
          combinedQueryParameterConfiguration = queryParameterConfiguraton;
        }

        var qps = [];
        var map = {};
        var propertyNames = [];

        for (var propName in combinedQueryParameterConfiguration) {
          if (
            !Object.prototype.hasOwnProperty.call(
              combinedQueryParameterConfiguration,
              propName,
            )
          ) {
            continue;
          } // to support the dubious feature of using unknownProperty
          // on queryParams configuration

          if (propName === 'unknownProperty' || propName === '_super') {
            // possible todo: issue deprecation warning?
            continue;
          }

          var desc = combinedQueryParameterConfiguration[propName];
          true &&
            !desc &&
            (0, _debug.assert)(
              `[BUG] missing query parameter configuration for ${propName}`,
              desc,
            );
          var scope = desc.scope || 'model';
          var parts = undefined;

          if (scope === 'controller') {
            parts = [];
          }

          var urlKey = desc.as || this.serializeQueryParamKey(propName);
          var defaultValue = (0, _metal.get)(controller, propName);
          defaultValue = copyDefaultValue(defaultValue);
          var type = desc.type || (0, _runtime.typeOf)(defaultValue);
          var defaultValueSerialized = this.serializeQueryParam(
            defaultValue,
            urlKey,
            type,
          );
          var scopedPropertyName = `${controllerName}:${propName}`;
          var qp = {
            undecoratedDefaultValue: (0, _metal.get)(controller, propName),
            defaultValue,
            serializedDefaultValue: defaultValueSerialized,
            serializedValue: defaultValueSerialized,
            type,
            urlKey,
            prop: propName,
            scopedPropertyName,
            controllerName,
            route: this,
            parts,
            values: null,
            scope,
          };
          map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
          qps.push(qp);
          propertyNames.push(propName);
        }

        return {
          qps,
          map,
          propertyNames,
          states: {
            /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, but the route is not currently
            in the active route hierarchy.
          */
            inactive: (prop, value) => {
              var qp = map[prop];
              true &&
                !qp &&
                (0, _debug.assert)(
                  'expected inactive callback to only be called for registered qps',
                  qp,
                );

              this._qpChanged(prop, value, qp);
            },

            /*
            Called when a query parameter changes in the URL, this route cares
            about that query parameter, and the route is currently
            in the active route hierarchy.
          */
            active: (prop, value) => {
              var qp = map[prop];
              true &&
                !qp &&
                (0, _debug.assert)(
                  'expected active callback to only be called for registered qps',
                  qp,
                );

              this._qpChanged(prop, value, qp);

              return this._activeQPChanged(qp, value);
            },

            /*
            Called when a value of a query parameter this route handles changes in a controller
            and the route is currently in the active route hierarchy.
          */
            allowOverrides: (prop, value) => {
              var qp = map[prop];
              true &&
                !qp &&
                (0, _debug.assert)(
                  'expected allowOverrides callback to only be called for registered qps',
                  qp,
                );

              this._qpChanged(prop, value, qp);

              return this._updatingQPChanged(qp);
            },
          },
        };
      }
    }

    Route.isRouteFactory = true;

    __decorate([_metal.computed], Route.prototype, 'store', null);

    __decorate([_metal.computed], Route.prototype, '_qp', null);

    function parentRoute(route) {
      var routeInfo = routeInfoFor(
        route,
        route._router._routerMicrolib.state.routeInfos,
        -1,
      );
      return routeInfo && routeInfo.route;
    }

    function routeInfoFor(route, routeInfos, offset) {
      if (offset === void 0) {
        offset = 0;
      }

      if (!routeInfos) {
        return;
      }

      var current;

      for (var i = 0; i < routeInfos.length; i++) {
        var routeInfo = routeInfos[i];
        true &&
          !routeInfo &&
          (0, _debug.assert)('has current routeInfo', routeInfo);
        current = routeInfo.route;

        if (current === route) {
          return routeInfos[i + offset];
        }
      }

      return;
    }

    function buildRenderOptions(route, nameOrOptions, options) {
      var isDefaultRender = !nameOrOptions && !options;

      var _name;

      if (!isDefaultRender) {
        if (typeof nameOrOptions === 'object' && !options) {
          _name = route.templateName || route.routeName;
          options = nameOrOptions;
        } else {
          true &&
            !!(0, _metal.isEmpty)(nameOrOptions) &&
            (0, _debug.assert)(
              'The name in the given arguments is undefined or empty string',
              !(0, _metal.isEmpty)(nameOrOptions),
            );
          _name = nameOrOptions;
        }
      }

      true &&
        !(
          isDefaultRender ||
          !(options && 'outlet' in options && options.outlet === undefined)
        ) &&
        (0, _debug.assert)(
          'You passed undefined as the outlet name.',
          isDefaultRender ||
            !(options && 'outlet' in options && options.outlet === undefined),
        );
      var owner = (0, _owner.getOwner)(route);
      true &&
        !owner &&
        (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
      var name, templateName, into, outlet, model;
      var controller;

      if (options) {
        into = options.into && options.into.replace(/\//g, '.');
        outlet = options.outlet;
        controller = options.controller;
        model = options.model;
      }

      outlet = outlet || 'main';

      if (isDefaultRender) {
        name = route.routeName;
        templateName = route.templateName || name;
      } else {
        name = _name.replace(/\//g, '.');
        templateName = name;
      }

      if (controller === undefined) {
        if (isDefaultRender) {
          controller =
            route.controllerName || owner.lookup(`controller:${name}`);
        } else {
          controller =
            owner.lookup(`controller:${name}`) ||
            route.controllerName ||
            route.routeName;
        }
      }

      if (typeof controller === 'string') {
        var controllerName = controller;
        controller = owner.lookup(`controller:${controllerName}`);
        true &&
          !(isDefaultRender || controller !== undefined) &&
          (0, _debug.assert)(
            `You passed \`controller: '${controllerName}'\` into the \`render\` method, but no such controller could be found.`,
            isDefaultRender || controller !== undefined,
          );
      }

      true &&
        !(controller instanceof _controller2.default) &&
        (0, _debug.assert)(
          'Expected an instance of controller',
          controller instanceof _controller2.default,
        );

      if (model === undefined) {
        model = route.currentModel;
      } else {
        controller.set('model', model);
      }

      var template = owner.lookup(`template:${templateName}`);
      true &&
        !(isDefaultRender || template !== undefined) &&
        (0, _debug.assert)(
          `Could not find "${templateName}" template, view, or component.`,
          isDefaultRender || template !== undefined,
        );
      var parent;

      if (into && (parent = parentRoute(route)) && into === parent.routeName) {
        into = undefined;
      }

      var renderOptions = {
        owner,
        into,
        outlet,
        name,
        controller,
        model,
        template:
          template !== undefined
            ? template(owner)
            : route._topLevelViewTemplate(owner),
      };

      if (
        true
        /* DEBUG */
      ) {
        var LOG_VIEW_LOOKUPS = (0, _metal.get)(
          route._router,
          'namespace.LOG_VIEW_LOOKUPS',
        );

        if (LOG_VIEW_LOOKUPS && !template) {
          (0, _debug.info)(
            `Could not find "${name}" template. Nothing will be rendered`,
            {
              fullName: `template:${name}`,
            },
          );
        }
      }

      return renderOptions;
    }

    function getFullQueryParams(router, state) {
      if (state.fullQueryParams) {
        return state.fullQueryParams;
      }

      var haveAllRouteInfosResolved = state.routeInfos.every(
        (routeInfo) => routeInfo.route,
      );
      var fullQueryParamsState = Object.assign({}, state.queryParams);

      router._deserializeQueryParams(state.routeInfos, fullQueryParamsState); // only cache query params state if all routeinfos have resolved; it's possible
      // for lazy routes to not have resolved when `getFullQueryParams` is called, so
      // we wait until all routes have resolved prior to caching query params state

      if (haveAllRouteInfosResolved) {
        state.fullQueryParams = fullQueryParamsState;
      }

      return fullQueryParamsState;
    }

    function getQueryParamsFor(route, state) {
      state.queryParamsFor = state.queryParamsFor || {};
      var name = route.fullRouteName;
      var existing = state.queryParamsFor[name];

      if (existing) {
        return existing;
      }

      var fullQueryParams = getFullQueryParams(route._router, state);
      var params = (state.queryParamsFor[name] = {}); // Copy over all the query params for this route/controller into params hash.
      // SAFETY: Since `_qp` is protected we can't infer the type

      var qps = (0, _metal.get)(route, '_qp').qps;

      for (var qp of qps) {
        // Put deserialized qp on params hash.
        var qpValueWasPassedIn = qp.prop in fullQueryParams;
        params[qp.prop] = qpValueWasPassedIn
          ? fullQueryParams[qp.prop]
          : copyDefaultValue(qp.defaultValue);
      }

      return params;
    } // FIXME: This should probably actually return a `NativeArray` if the passed in value is an Array.

    function copyDefaultValue(value) {
      if (Array.isArray(value)) {
        // SAFETY: We lost the type data about the array if we don't cast.
        return (0, _runtime.A)(value.slice());
      }

      return value;
    }
    /*
    Merges all query parameters from a controller with those from
    a route, returning a new object and avoiding any mutations to
    the existing objects.
  */

    function mergeEachQueryParams(controllerQP, routeQP) {
      var qps = {};
      var keysAlreadyMergedOrSkippable = {
        defaultValue: true,
        type: true,
        scope: true,
        as: true,
      }; // first loop over all controller qps, merging them with any matching route qps
      // into a new empty object to avoid mutating.

      for (var cqpName in controllerQP) {
        if (!Object.prototype.hasOwnProperty.call(controllerQP, cqpName)) {
          continue;
        }

        qps[cqpName] = Object.assign(
          Object.assign({}, controllerQP[cqpName]),
          routeQP[cqpName],
        ); // allows us to skip this QP when we check route QPs.

        keysAlreadyMergedOrSkippable[cqpName] = true;
      } // loop over all route qps, skipping those that were merged in the first pass
      // because they also appear in controller qps

      for (var rqpName in routeQP) {
        if (
          !Object.prototype.hasOwnProperty.call(routeQP, rqpName) ||
          keysAlreadyMergedOrSkippable[rqpName]
        ) {
          continue;
        }

        qps[rqpName] = Object.assign(
          Object.assign({}, routeQP[rqpName]),
          controllerQP[rqpName],
        );
      }

      return qps;
    }

    function addQueryParamsObservers(controller, propNames) {
      propNames.forEach((prop) => {
        if ((0, _metal.descriptorForProperty)(controller, prop) === undefined) {
          var desc = (0, _utils.lookupDescriptor)(controller, prop);

          if (
            desc !== null &&
            (typeof desc.get === 'function' || typeof desc.set === 'function')
          ) {
            (0, _metal.defineProperty)(
              controller,
              prop,
              (0, _compat.dependentKeyCompat)({
                get: desc.get,
                set: desc.set,
              }),
            );
          }
        }

        (0, _metal.addObserver)(
          controller,
          `${prop}.[]`,
          controller,
          controller._qpChanged,
          false,
        );
      });
    }

    function getEngineRouteName(engine, routeName) {
      if (engine.routable) {
        var prefix = engine.mountPoint;

        if (routeName === 'application') {
          return prefix;
        } else {
          return `${prefix}.${routeName}`;
        }
      }

      return routeName;
    }

    var defaultSerialize = Route.prototype.serialize;
    _exports.defaultSerialize = defaultSerialize;

    function hasDefaultSerialize(route) {
      return route.serialize === defaultSerialize;
    } // Set these here so they can be overridden with extend

    Route.reopen({
      mergedProperties: ['queryParams'],
      queryParams: {},
      templateName: null,
      controllerName: null,

      send() {
        for (
          var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4] = arguments[_key4];
        }

        true &&
          !(!this.isDestroying && !this.isDestroyed) &&
          (0, _debug.assert)(
            `Attempted to call .send() with the action '${args[0]}' on the destroyed route '${this.routeName}'.`,
            !this.isDestroying && !this.isDestroyed,
          );

        if (
          (this._router && this._router._routerMicrolib) ||
          !(0, _debug.isTesting)()
        ) {
          this._router.send(...args);
        } else {
          var name = args.shift();
          var action = this.actions[name];

          if (action) {
            return action.apply(this, args);
          }
        }
      },

      /**
      The controller associated with this route.
         Example
         ```app/routes/form.js
      import Route from '@ember/routing/route';
      import { action } from '@ember/object';
         export default class FormRoute extends Route {
        @action
        willTransition(transition) {
          if (this.controller.get('userHasEnteredData') &&
              !confirm('Are you sure you want to abandon progress?')) {
            transition.abort();
          } else {
            // Bubble the `willTransition` action so that
            // parent routes can decide whether or not to abort.
            return true;
          }
        }
      }
      ```
         @property controller
      @type Controller
      @since 1.6.0
      @public
    */
      actions: {
        /**
      This action is called when one or more query params have changed. Bubbles.
           @method queryParamsDidChange
      @param changed {Object} Keys are names of query params that have changed.
      @param totalPresent {Object} Keys are names of query params that are currently set.
      @param removed {Object} Keys are names of query params that have been removed.
      @returns {boolean}
      @private
      */
        queryParamsDidChange(changed, _totalPresent, removed) {
          // SAFETY: Since `_qp` is protected we can't infer the type
          var qpMap = (0, _metal.get)(this, '_qp').map;
          var totalChanged = Object.keys(changed).concat(Object.keys(removed));

          for (var change of totalChanged) {
            var qp = qpMap[change];

            if (qp) {
              var options = this._optionsForQueryParam(qp);

              true &&
                !(options && typeof options === 'object') &&
                (0, _debug.assert)(
                  'options exists',
                  options && typeof options === 'object',
                );

              if (
                (0, _metal.get)(options, 'refreshModel') &&
                this._router.currentState
              ) {
                this.refresh();
                break;
              }
            }
          }

          return true;
        },

        finalizeQueryParamChange(params, finalParams, transition) {
          if (this.fullRouteName !== 'application') {
            return true;
          } // Transition object is absent for intermediate transitions.

          if (!transition) {
            return;
          }

          var routeInfos = transition[_router_js.STATE_SYMBOL].routeInfos;
          var router = this._router;

          var qpMeta = router._queryParamsFor(routeInfos);

          var changes = router._qpUpdates;
          var qpUpdated = false;
          var replaceUrl;
          (0, _utils2.stashParamNames)(router, routeInfos);

          for (var qp of qpMeta.qps) {
            var route = qp.route;
            var controller = route.controller;
            var presentKey = qp.urlKey in params && qp.urlKey; // Do a reverse lookup to see if the changed query
            // param URL key corresponds to a QP property on
            // this controller.

            var value = void 0;
            var svalue = void 0;

            if (changes.has(qp.urlKey)) {
              // Value updated in/before setupController
              value = (0, _metal.get)(controller, qp.prop);
              svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
            } else {
              if (presentKey) {
                svalue = params[presentKey];

                if (svalue !== undefined) {
                  value = route.deserializeQueryParam(
                    svalue,
                    qp.urlKey,
                    qp.type,
                  );
                }
              } else {
                // No QP provided; use default value.
                svalue = qp.serializedDefaultValue;
                value = copyDefaultValue(qp.defaultValue);
              }
            } // SAFETY: Since `_qp` is protected we can't infer the type

            controller._qpDelegate = (0, _metal.get)(
              route,
              '_qp',
            ).states.inactive;
            var thisQueryParamChanged = svalue !== qp.serializedValue;

            if (thisQueryParamChanged) {
              if (transition.queryParamsOnly && replaceUrl !== false) {
                var options = route._optionsForQueryParam(qp);

                var replaceConfigValue = (0, _metal.get)(options, 'replace');

                if (replaceConfigValue) {
                  replaceUrl = true;
                } else if (replaceConfigValue === false) {
                  // Explicit pushState wins over any other replaceStates.
                  replaceUrl = false;
                }
              }

              (0, _metal.set)(controller, qp.prop, value);
              qpUpdated = true;
            } // Stash current serialized value of controller.

            qp.serializedValue = svalue;
            var thisQueryParamHasDefaultValue =
              qp.serializedDefaultValue === svalue;

            if (!thisQueryParamHasDefaultValue) {
              finalParams.push({
                value: svalue,
                visible: true,
                key: presentKey || qp.urlKey,
              });
            }
          } // Some QPs have been updated, and those changes need to be propogated
          // immediately. Eventually, we should work on making this async somehow.

          if (qpUpdated === true) {
            (0, _metal.flushAsyncObservers)(false);
          }

          if (replaceUrl) {
            transition.method('replace');
          }

          qpMeta.qps.forEach((qp) => {
            // SAFETY: Since `_qp` is protected we can't infer the type
            var routeQpMeta = (0, _metal.get)(qp.route, '_qp');
            var finalizedController = qp.route.controller;
            finalizedController['_qpDelegate'] = (0, _metal.get)(
              routeQpMeta,
              'states.active',
            );
          });

          router._qpUpdates.clear();

          return;
        },
      },
    });
    var _default = Route;
    _exports.default = _default;
  });
  define('@ember/-internals/routing/lib/system/router', [
    'exports',
    '@ember/-internals/container',
    '@ember/-internals/metal',
    '@ember/-internals/owner',
    '@ember/-internals/routing',
    '@ember/-internals/runtime',
    '@ember/debug',
    '@ember/error',
    '@ember/runloop',
    '@ember/-internals/routing/lib/location/api',
    '@ember/-internals/routing/lib/utils',
    '@ember/-internals/routing/lib/system/dsl',
    '@ember/-internals/routing/lib/system/route',
    '@ember/-internals/routing/lib/system/router_state',
    'router_js',
    '@ember/engine/instance',
  ], function (
    _exports,
    _container,
    _metal,
    _owner,
    _routing,
    _runtime,
    _debug,
    _error2,
    _runloop,
    _api,
    _utils,
    _dsl,
    _route,
    _router_state,
    _router_js,
    _instance,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.triggerEvent = triggerEvent;

    function defaultDidTransition(infos) {
      updatePaths(this);

      this._cancelSlowTransitionTimer();

      this.notifyPropertyChange('url');
      this.set('currentState', this.targetState);

      if (
        true
        /* DEBUG */
      ) {
        // @ts-expect-error namespace isn't public
        if (this.namespace.LOG_TRANSITIONS) {
          // eslint-disable-next-line no-console
          console.log(`Transitioned into '${EmberRouter._routePath(infos)}'`);
        }
      }
    }

    function defaultWillTransition(oldInfos, newInfos) {
      if (
        true
        /* DEBUG */
      ) {
        // @ts-expect-error namespace isn't public
        if (this.namespace.LOG_TRANSITIONS) {
          // eslint-disable-next-line no-console
          console.log(
            `Preparing to transition from '${EmberRouter._routePath(
              oldInfos,
            )}' to '${EmberRouter._routePath(newInfos)}'`,
          );
        }
      }
    }

    var freezeRouteInfo;

    if (
      true
      /* DEBUG */
    ) {
      freezeRouteInfo = (transition) => {
        if (transition.from !== null && !Object.isFrozen(transition.from)) {
          Object.freeze(transition.from);
        }

        if (transition.to !== null && !Object.isFrozen(transition.to)) {
          Object.freeze(transition.to);
        }
      };
    }

    function K() {
      return this;
    }

    var { slice } = Array.prototype;
    /**
    The `EmberRouter` class manages the application state and URLs. Refer to
    the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.
  
    @class EmberRouter
    @extends EmberObject
    @uses Evented
    @public
  */

    class EmberRouter extends _runtime.Object.extend(_runtime.Evented) {
      // Note that owner is actually required in this scenario, but since it is strictly
      // optional in other contexts trying to make it required here confuses TS.
      constructor(owner) {
        super(owner);
        this._didSetupRouter = false;
        this._initialTransitionStarted = false;
        this.currentURL = null;
        this.currentRouteName = null;
        this.currentPath = null;
        this.currentRoute = null;
        this._qpCache = Object.create(null); // Set of QueryParam['urlKey']

        this._qpUpdates = new Set();
        this._queuedQPChanges = {};
        this._toplevelView = null;
        this._handledErrors = new Set();
        this._engineInstances = Object.create(null);
        this._engineInfoByRoute = Object.create(null);
        this._slowTransitionTimer = null;
        this.currentState = null;
        this.targetState = null;
        true && !owner && (0, _debug.assert)('BUG: Missing owner', owner);

        this._resetQueuedQueryParameterChanges();

        this.namespace = owner.lookup('application:main');
        var bucketCache = owner.lookup(
          (0, _container.privatize)`-bucket-cache:main`,
        );
        true &&
          !(bucketCache instanceof _routing.BucketCache) &&
          (0, _debug.assert)(
            'BUG: BucketCache should always be present',
            bucketCache instanceof _routing.BucketCache,
          );
        this._bucketCache = bucketCache;
        var routerService = owner.lookup('service:router');
        true &&
          !(routerService !== undefined) &&
          (0, _debug.assert)(
            'BUG: RouterService should always be present',
            routerService !== undefined,
          );
        this._routerService = routerService;
      }
      /**
      The `Router.map` function allows you to define mappings from URLs to routes
      in your application. These mappings are defined within the
      supplied callback function using `this.route`.
         The first parameter is the name of the route which is used by default as the
      path name as well.
         The second parameter is the optional options hash. Available options are:
           * `path`: allows you to provide your own path as well as mark dynamic
          segments.
        * `resetNamespace`: false by default; when nesting routes, ember will
          combine the route names to form the fully-qualified route name, which is
          used with `{{link-to}}` or manually transitioning to routes. Setting
          `resetNamespace: true` will cause the route not to inherit from its
          parent route's names. This is handy for preventing extremely long route names.
          Keep in mind that the actual URL path behavior is still retained.
         The third parameter is a function, which can be used to nest routes.
      Nested routes, by default, will have the parent route tree's route name and
      path prepended to it's own.
         ```app/router.js
      Router.map(function(){
        this.route('post', { path: '/post/:post_id' }, function() {
          this.route('edit');
          this.route('comments', { resetNamespace: true }, function() {
            this.route('new');
          });
        });
      });
      ```
         @method map
      @param callback
      @public
    */

      static map(callback) {
        if (!this.dslCallbacks) {
          this.dslCallbacks = []; // FIXME: Can we remove this?

          this.reopenClass({
            dslCallbacks: this.dslCallbacks,
          });
        }

        this.dslCallbacks.push(callback);
        return this;
      }

      static _routePath(routeInfos) {
        var path = []; // We have to handle coalescing resource names that
        // are prefixed with their parent's names, e.g.
        // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'

        function intersectionMatches(a1, a2) {
          for (var i = 0; i < a1.length; ++i) {
            if (a1[i] !== a2[i]) {
              return false;
            }
          }

          return true;
        }

        var name, nameParts, oldNameParts;

        for (var i = 1; i < routeInfos.length; i++) {
          var routeInfo = routeInfos[i];
          true && !routeInfo && (0, _debug.assert)('has routeInfo', routeInfo);
          name = routeInfo.name;
          nameParts = name.split('.');
          oldNameParts = slice.call(path);

          while (oldNameParts.length) {
            if (intersectionMatches(oldNameParts, nameParts)) {
              break;
            }

            oldNameParts.shift();
          }

          path.push(...nameParts.slice(oldNameParts.length));
        }

        return path.join('.');
      }

      _initRouterJs() {
        var location = (0, _metal.get)(this, 'location');
        var router = this;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Router is unexpectedly missing an owner', owner);
        var seen = Object.create(null);

        class PrivateRouter extends _router_js.default {
          getRoute(name) {
            var routeName = name;
            var routeOwner = owner;
            var engineInfo = router._engineInfoByRoute[routeName];

            if (engineInfo) {
              var engineInstance = router._getEngineInstance(engineInfo);

              routeOwner = engineInstance;
              routeName = engineInfo.localFullName;
            }

            var fullRouteName = `route:${routeName}`;
            true &&
              !routeOwner &&
              (0, _debug.assert)(
                'Route is unexpectedly missing an owner',
                routeOwner,
              );
            var route = routeOwner.lookup(fullRouteName);

            if (seen[name]) {
              true &&
                !route &&
                (0, _debug.assert)('seen routes should exist', route);
              return route;
            }

            seen[name] = true;

            if (!route) {
              // SAFETY: this is configured in `commonSetupRegistry` in the
              // `@ember/application/lib` package.
              var DefaultRoute = routeOwner.factoryFor('route:basic').class;
              routeOwner.register(fullRouteName, DefaultRoute.extend());
              route = routeOwner.lookup(fullRouteName);

              if (
                true
                /* DEBUG */
              ) {
                if (router.namespace.LOG_ACTIVE_GENERATION) {
                  (0, _debug.info)(`generated -> ${fullRouteName}`, {
                    fullName: fullRouteName,
                  });
                }
              }
            }

            route._setRouteName(routeName);

            if (engineInfo && !(0, _route.hasDefaultSerialize)(route)) {
              throw new Error(
                'Defining a custom serialize method on an Engine route is not supported.',
              );
            }

            return route;
          }

          getSerializer(name) {
            var engineInfo = router._engineInfoByRoute[name]; // If this is not an Engine route, we fall back to the handler for serialization

            if (!engineInfo) {
              return;
            }

            return engineInfo.serializeMethod || _route.defaultSerialize;
          }

          updateURL(path) {
            (0, _runloop.once)(() => {
              location.setURL(path);
              (0, _metal.set)(router, 'currentURL', path);
            });
          } // TODO: merge into routeDidChange

          didTransition(infos) {
            true &&
              !(router.didTransition === defaultDidTransition) &&
              (0, _debug.assert)(
                'You attempted to override the "didTransition" method which has been deprecated. Please inject the router service and listen to the "routeDidChange" event.',
                router.didTransition === defaultDidTransition,
              );
            router.didTransition(infos);
          } // TODO: merge into routeWillChange

          willTransition(oldInfos, newInfos) {
            true &&
              !(router.willTransition === defaultWillTransition) &&
              (0, _debug.assert)(
                'You attempted to override the "willTransition" method which has been deprecated. Please inject the router service and listen to the "routeWillChange" event.',
                router.willTransition === defaultWillTransition,
              );
            router.willTransition(oldInfos, newInfos);
          }

          triggerEvent(routeInfos, ignoreFailure, name, args) {
            return triggerEvent.bind(router)(
              routeInfos,
              ignoreFailure,
              name,
              args,
            );
          }

          routeWillChange(transition) {
            router.trigger('routeWillChange', transition);

            if (
              true
              /* DEBUG */
            ) {
              freezeRouteInfo(transition);
            }

            router._routerService.trigger('routeWillChange', transition); // in case of intermediate transition we update the current route
            // to make router.currentRoute.name consistent with router.currentRouteName
            // see https://github.com/emberjs/ember.js/issues/19449

            if (transition.isIntermediate) {
              router.set('currentRoute', transition.to);
            }
          }

          routeDidChange(transition) {
            router.set('currentRoute', transition.to);
            (0, _runloop.once)(() => {
              router.trigger('routeDidChange', transition);

              if (
                true
                /* DEBUG */
              ) {
                freezeRouteInfo(transition);
              }

              router._routerService.trigger('routeDidChange', transition);
            });
          }

          transitionDidError(error, transition) {
            if (error.wasAborted || transition.isAborted) {
              // If the error was a transition erorr or the transition aborted
              // log the abort.
              return (0, _router_js.logAbort)(transition);
            } else {
              // Otherwise trigger the "error" event to attempt an intermediate
              // transition into an error substate
              transition.trigger(
                false,
                'error',
                error.error,
                transition,
                error.route,
              );

              if (router._isErrorHandled(error.error)) {
                // If we handled the error with a substate just roll the state back on
                // the transition and send the "routeDidChange" event for landing on
                // the error substate and return the error.
                transition.rollback();
                this.routeDidChange(transition);
                return error.error;
              } else {
                // If it was not handled, abort the transition completely and return
                // the error.
                transition.abort();
                return error.error;
              }
            }
          }

          replaceURL(url) {
            if (location.replaceURL) {
              var doReplaceURL = () => {
                location.replaceURL(url);
                (0, _metal.set)(router, 'currentURL', url);
              };

              (0, _runloop.once)(doReplaceURL);
            } else {
              this.updateURL(url);
            }
          }
        }

        var routerMicrolib = (this._routerMicrolib = new PrivateRouter());
        var dslCallbacks = this.constructor.dslCallbacks || [K];

        var dsl = this._buildDSL();

        dsl.route(
          'application',
          {
            path: '/',
            resetNamespace: true,
            overrideNameAssertion: true,
          },
          function () {
            for (var i = 0; i < dslCallbacks.length; i++) {
              dslCallbacks[i].call(this);
            }
          },
        );

        if (
          true
          /* DEBUG */
        ) {
          if (this.namespace.LOG_TRANSITIONS_INTERNAL) {
            routerMicrolib.log = console.log.bind(console); // eslint-disable-line no-console
          }
        }

        routerMicrolib.map(dsl.generate());
      }

      _buildDSL() {
        var enableLoadingSubstates = this._hasModuleBasedResolver();

        var router = this;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Router is unexpectedly missing an owner', owner);
        var options = {
          enableLoadingSubstates,

          resolveRouteMap(name) {
            return owner.factoryFor(`route-map:${name}`);
          },

          addRouteForEngine(name, engineInfo) {
            if (!router._engineInfoByRoute[name]) {
              router._engineInfoByRoute[name] = engineInfo;
            }
          },
        };
        return new _dsl.default(null, options);
      }
      /*
      Resets all pending query parameter changes.
      Called after transitioning to a new route
      based on query parameter changes.
    */

      _resetQueuedQueryParameterChanges() {
        this._queuedQPChanges = {};
      }

      _hasModuleBasedResolver() {
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Router is unexpectedly missing an owner', owner);
        var resolver = (0, _metal.get)(
          owner,
          'application.__registry__.resolver.moduleBasedResolver',
        );
        return Boolean(resolver);
      }
      /**
      Initializes the current router instance and sets up the change handling
      event listeners used by the instances `location` implementation.
         A property named `initialURL` will be used to determine the initial URL.
      If no value is found `/` will be used.
         @method startRouting
      @private
    */

      startRouting() {
        if (this.setupRouter()) {
          var initialURL = (0, _metal.get)(this, 'initialURL');

          if (initialURL === undefined) {
            initialURL = (0, _metal.get)(this, 'location').getURL();
          }

          var initialTransition = this.handleURL(initialURL);

          if (initialTransition && initialTransition.error) {
            throw initialTransition.error;
          }
        }
      }

      setupRouter() {
        if (this._didSetupRouter) {
          return false;
        }

        this._didSetupRouter = true;

        this._setupLocation();

        var location = (0, _metal.get)(this, 'location'); // Allow the Location class to cancel the router setup while it refreshes
        // the page

        if ((0, _metal.get)(location, 'cancelRouterSetup')) {
          return false;
        }

        this._initRouterJs();

        location.onUpdateURL((url) => {
          this.handleURL(url);
        });
        return true;
      }

      _setOutlets() {
        // This is triggered async during Route#willDestroy.
        // If the router is also being destroyed we do not want to
        // to create another this._toplevelView (and leak the renderer)
        if (this.isDestroying || this.isDestroyed) {
          return;
        }

        var routeInfos = this._routerMicrolib.currentRouteInfos;

        if (!routeInfos) {
          return;
        }

        var defaultParentState;
        var liveRoutes = null;

        for (var routeInfo of routeInfos) {
          var route = routeInfo.route;

          var connections = _route.ROUTE_CONNECTIONS.get(route);

          var ownState = void 0;

          if (connections.length === 0) {
            ownState = representEmptyRoute(
              liveRoutes,
              defaultParentState,
              route,
            );
          } else {
            for (var j = 0; j < connections.length; j++) {
              var appended = appendLiveRoute(
                liveRoutes,
                defaultParentState,
                connections[j],
              );
              liveRoutes = appended.liveRoutes;
              var { name, outlet } = appended.ownState.render;

              if (name === route.routeName || outlet === 'main') {
                ownState = appended.ownState;
              }
            }
          }

          defaultParentState = ownState;
        } // when a transitionTo happens after the validation phase
        // during the initial transition _setOutlets is called
        // when no routes are active. However, it will get called
        // again with the correct values during the next turn of
        // the runloop

        if (!liveRoutes) {
          return;
        }

        if (!this._toplevelView) {
          var owner = (0, _owner.getOwner)(this);
          true &&
            !owner &&
            (0, _debug.assert)(
              'Router is unexpectedly missing an owner',
              owner,
            );
          var OutletView = owner.factoryFor('view:-outlet');
          var application = owner.lookup('application:main');
          var environment = owner.lookup('-environment:main');
          var template = owner.lookup('template:-outlet');
          this._toplevelView = OutletView.create({
            environment,
            template,
            application,
          });

          this._toplevelView.setOutletState(liveRoutes);

          var instance = owner.lookup('-application-instance:main');

          if (instance) {
            instance.didCreateRootView(this._toplevelView);
          }
        } else {
          this._toplevelView.setOutletState(liveRoutes);
        }
      }

      handleURL(url) {
        // Until we have an ember-idiomatic way of accessing #hashes, we need to
        // remove it because router.js doesn't know how to handle it.
        var _url = url.split(/#(.+)?/)[0];
        return this._doURLTransition('handleURL', _url);
      }

      _doURLTransition(routerJsMethod, url) {
        this._initialTransitionStarted = true;

        var transition = this._routerMicrolib[routerJsMethod](url || '/');

        didBeginTransition(transition, this);
        return transition;
      }
      /**
      Transition the application into another route. The route may
      be either a single route or route path:
         @method transitionTo
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */

      transitionTo() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        if ((0, _utils.resemblesURL)(args[0])) {
          true &&
            !(!this.isDestroying && !this.isDestroyed) &&
            (0, _debug.assert)(
              `A transition was attempted from '${this.currentRouteName}' to '${args[0]}' but the application instance has already been destroyed.`,
              !this.isDestroying && !this.isDestroyed,
            );
          return this._doURLTransition('transitionTo', args[0]);
        }

        var { routeName, models, queryParams } = (0, _utils.extractRouteArgs)(
          args,
        );
        true &&
          !(!this.isDestroying && !this.isDestroyed) &&
          (0, _debug.assert)(
            `A transition was attempted from '${this.currentRouteName}' to '${routeName}' but the application instance has already been destroyed.`,
            !this.isDestroying && !this.isDestroyed,
          );
        return this._doTransition(routeName, models, queryParams);
      }

      intermediateTransitionTo(name) {
        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key2 = 1;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2 - 1] = arguments[_key2];
        }

        this._routerMicrolib.intermediateTransitionTo(name, ...args);

        updatePaths(this);

        if (
          true
          /* DEBUG */
        ) {
          var infos = this._routerMicrolib.currentRouteInfos;

          if (this.namespace.LOG_TRANSITIONS) {
            true &&
              !infos &&
              (0, _debug.assert)('expected infos to be set', infos); // eslint-disable-next-line no-console

            console.log(
              `Intermediate-transitioned into '${EmberRouter._routePath(
                infos,
              )}'`,
            );
          }
        }
      }
      /**
      Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
      it replaces the entry for the current route.
      When the user clicks the "back" button in the browser, there will be fewer steps.
      This is most commonly used to manage redirects in a way that does not cause confusing additions
      to the user's browsing history.
         @method replaceWith
      @param {String} [name] the name of the route or a URL
      @param {...Object} models the model(s) or identifier(s) to be used while
        transitioning to the route.
      @param {Object} [options] optional hash with a queryParams property
        containing a mapping of query parameters
      @return {Transition} the transition object associated with this
        attempted transition
      @public
    */

      replaceWith() {
        return this.transitionTo(...arguments).method('replace');
      }

      generate(name) {
        for (
          var _len3 = arguments.length,
            args = new Array(_len3 > 1 ? _len3 - 1 : 0),
            _key3 = 1;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3 - 1] = arguments[_key3];
        }

        var url = this._routerMicrolib.generate(name, ...args);

        true &&
          !(typeof this.location !== 'string') &&
          (0, _debug.assert)(
            'expected non-string location',
            typeof this.location !== 'string',
          );
        return this.location.formatURL(url);
      }
      /**
      Determines if the supplied route is currently active.
         @method isActive
      @param routeName
      @return {Boolean}
      @private
    */

      isActive(routeName) {
        return this._routerMicrolib.isActive(routeName);
      }
      /**
      An alternative form of `isActive` that doesn't require
      manual concatenation of the arguments into a single
      array.
         @method isActiveIntent
      @param routeName
      @param models
      @param queryParams
      @return {Boolean}
      @private
      @since 1.7.0
    */

      isActiveIntent(routeName, models, queryParams) {
        return this.currentState.isActiveIntent(routeName, models, queryParams);
      }

      send(name) {
        for (
          var _len4 = arguments.length,
            args = new Array(_len4 > 1 ? _len4 - 1 : 0),
            _key4 = 1;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4 - 1] = arguments[_key4];
        }

        /*name, context*/
        this._routerMicrolib.trigger(name, ...args);
      }
      /**
      Does this router instance have the given route.
         @method hasRoute
      @return {Boolean}
      @private
    */

      hasRoute(route) {
        return this._routerMicrolib.hasRoute(route);
      }
      /**
      Resets the state of the router by clearing the current route
      handlers and deactivating them.
         @private
      @method reset
     */

      reset() {
        this._didSetupRouter = false;
        this._initialTransitionStarted = false;

        if (this._routerMicrolib) {
          this._routerMicrolib.reset();
        }
      }

      willDestroy() {
        if (this._toplevelView) {
          this._toplevelView.destroy();

          this._toplevelView = null;
        }

        super.willDestroy();
        this.reset();
        var instances = this._engineInstances;

        for (var name in instances) {
          var instanceMap = instances[name];
          true &&
            !instanceMap &&
            (0, _debug.assert)('has instanceMap', instanceMap);

          for (var id in instanceMap) {
            var instance = instanceMap[id];
            true && !instance && (0, _debug.assert)('has instance', instance);
            (0, _runloop.run)(instance, 'destroy');
          }
        }
      }
      /*
      Called when an active route's query parameter has changed.
      These changes are batched into a runloop run and trigger
      a single transition.
    */

      _activeQPChanged(queryParameterName, newValue) {
        this._queuedQPChanges[queryParameterName] = newValue;
        (0, _runloop.once)(this, this._fireQueryParamTransition);
      } // The queryParameterName is QueryParam['urlKey']

      _updatingQPChanged(queryParameterName) {
        this._qpUpdates.add(queryParameterName);
      }
      /*
      Triggers a transition to a route based on query parameter changes.
      This is called once per runloop, to batch changes.
         e.g.
         if these methods are called in succession:
      this._activeQPChanged('foo', '10');
        // results in _queuedQPChanges = { foo: '10' }
      this._activeQPChanged('bar', false);
        // results in _queuedQPChanges = { foo: '10', bar: false }
         _queuedQPChanges will represent both of these changes
      and the transition using `transitionTo` will be triggered
      once.
    */

      _fireQueryParamTransition() {
        this.transitionTo({
          queryParams: this._queuedQPChanges,
        });

        this._resetQueuedQueryParameterChanges();
      }

      _setupLocation() {
        var location = this.location;
        var rootURL = this.rootURL;
        var owner = (0, _owner.getOwner)(this);
        true &&
          !owner &&
          (0, _debug.assert)('Router is unexpectedly missing an owner', owner);

        if ('string' === typeof location) {
          var resolvedLocation = owner.lookup(`location:${location}`);

          if (location === 'auto') {
            true &&
              !false &&
              (0, _debug.deprecate)(
                "Router location 'auto' is deprecated. Most users will want to set `locationType` to 'history' in config/environment.js for no change in behavior. See deprecation docs for details.",
                false,
                {
                  id: 'deprecate-auto-location',
                  until: '5.0.0',
                  url:
                    'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
                  for: 'ember-source',
                  since: {
                    available: '4.1.0',
                    enabled: '4.1.0',
                  },
                },
              );
          }

          if (resolvedLocation !== undefined) {
            location = (0, _metal.set)(this, 'location', resolvedLocation);
          } else {
            // Allow for deprecated registration of custom location API's
            var options = {
              implementation: location,
            };
            location = (0, _metal.set)(
              this,
              'location',
              _api.default.create(options),
            );
          }
        }

        if (location !== null && typeof location === 'object') {
          if (rootURL) {
            (0, _metal.set)(location, 'rootURL', rootURL);
          } // Allow the location to do any feature detection, such as AutoLocation
          // detecting history support. This gives it a chance to set its
          // `cancelRouterSetup` property which aborts routing.

          if (typeof location.detect === 'function') {
            if (this.location !== 'auto') {
              true &&
                !false &&
                (0, _debug.deprecate)(
                  'The `detect` method on the Location object is deprecated. If you need detection you can run your detection code in app.js, before setting the location type.',
                  false,
                  {
                    id: 'deprecate-auto-location',
                    until: '5.0.0',
                    url:
                      'https://emberjs.com/deprecations/v4.x#toc_deprecate-auto-location',
                    for: 'ember-source',
                    since: {
                      available: '4.1.0',
                      enabled: '4.1.0',
                    },
                  },
                );
            }

            location.detect();
          } // ensure that initState is called AFTER the rootURL is set on
          // the location instance

          if (typeof location.initState === 'function') {
            location.initState();
          }
        }
      }
      /**
      Serializes the given query params according to their QP meta information.
         @private
      @method _serializeQueryParams
      @param {Arrray<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */

      _serializeQueryParams(routeInfos, queryParams) {
        forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
          if (qp) {
            delete queryParams[key];
            queryParams[qp.urlKey] = qp.route.serializeQueryParam(
              value,
              qp.urlKey,
              qp.type,
            );
          } else if (value === undefined) {
            return; // We don't serialize undefined values
          } else {
            queryParams[key] = this._serializeQueryParam(
              value,
              (0, _runtime.typeOf)(value),
            );
          }
        });
      }
      /**
      Serializes the value of a query parameter based on a type
         @private
      @method _serializeQueryParam
      @param {Object} value
      @param {String} type
    */

      _serializeQueryParam(value, type) {
        if (value === null || value === undefined) {
          return value;
        } else if (type === 'array') {
          return JSON.stringify(value);
        }

        return `${value}`;
      }
      /**
      Deserializes the given query params according to their QP meta information.
         @private
      @method _deserializeQueryParams
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */

      _deserializeQueryParams(routeInfos, queryParams) {
        forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
          // If we don't have QP meta info for a given key, then we do nothing
          // because all values will be treated as strings
          if (qp) {
            delete queryParams[key];
            queryParams[qp.prop] = qp.route.deserializeQueryParam(
              value,
              qp.urlKey,
              qp.type,
            );
          }
        });
      }
      /**
      Deserializes the value of a query parameter based on a default type
         @private
      @method _deserializeQueryParam
      @param {Object} value
      @param {String} defaultType
    */

      _deserializeQueryParam(value, defaultType) {
        if (value === null || value === undefined) {
          return value;
        } else if (defaultType === 'boolean') {
          return value === 'true';
        } else if (defaultType === 'number') {
          return Number(value).valueOf();
        } else if (defaultType === 'array') {
          return (0, _runtime.A)(JSON.parse(value));
        }

        return value;
      }
      /**
      Removes (prunes) any query params with default values from the given QP
      object. Default values are determined from the QP meta information per key.
         @private
      @method _pruneDefaultQueryParamValues
      @param {Array<RouteInfo>} routeInfos
      @param {Object} queryParams
      @return {Void}
    */

      _pruneDefaultQueryParamValues(routeInfos, queryParams) {
        var qps = this._queryParamsFor(routeInfos);

        for (var key in queryParams) {
          var qp = qps.map[key];

          if (qp && qp.serializedDefaultValue === queryParams[key]) {
            delete queryParams[key];
          }
        }
      }

      _doTransition(
        _targetRouteName,
        models,
        _queryParams,
        _fromRouterService,
      ) {
        var targetRouteName =
          _targetRouteName ||
          (0, _utils.getActiveTargetName)(this._routerMicrolib);

        true &&
          !(
            Boolean(targetRouteName) &&
            this._routerMicrolib.hasRoute(targetRouteName)
          ) &&
          (0, _debug.assert)(
            `The route ${targetRouteName} was not found`,
            Boolean(targetRouteName) &&
              this._routerMicrolib.hasRoute(targetRouteName),
          );
        this._initialTransitionStarted = true;
        var queryParams = {};

        this._processActiveTransitionQueryParams(
          targetRouteName,
          models,
          queryParams,
          _queryParams,
        );

        Object.assign(queryParams, _queryParams);

        this._prepareQueryParams(
          targetRouteName,
          models,
          queryParams,
          Boolean(_fromRouterService),
        );

        var transition = this._routerMicrolib.transitionTo(
          targetRouteName,
          ...models,
          {
            queryParams,
          },
        );

        didBeginTransition(transition, this);
        return transition;
      }

      _processActiveTransitionQueryParams(
        targetRouteName,
        models,
        queryParams,
        _queryParams,
      ) {
        // merge in any queryParams from the active transition which could include
        // queryParams from the url on initial load.
        if (!this._routerMicrolib.activeTransition) {
          return;
        }

        var unchangedQPs = {};
        var qpUpdates = this._qpUpdates;
        var params = (0, _route.getFullQueryParams)(
          this,
          this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL],
        );

        for (var key in params) {
          if (!qpUpdates.has(key)) {
            unchangedQPs[key] = params[key];
          }
        } // We need to fully scope queryParams so that we can create one object
        // that represents both passed-in queryParams and ones that aren't changed
        // from the active transition.

        this._fullyScopeQueryParams(targetRouteName, models, _queryParams);

        this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);

        Object.assign(queryParams, unchangedQPs);
      }
      /**
      Prepares the query params for a URL or Transition. Restores any undefined QP
      keys/values, serializes all values, and then prunes any default values.
         @private
      @method _prepareQueryParams
      @param {String} targetRouteName
      @param {Array<Object>} models
      @param {Object} queryParams
      @param {boolean} keepDefaultQueryParamValues
      @return {Void}
    */

      _prepareQueryParams(
        targetRouteName,
        models,
        queryParams,
        _fromRouterService,
      ) {
        var state = calculatePostTransitionState(this, targetRouteName, models);

        this._hydrateUnsuppliedQueryParams(
          state,
          queryParams,
          Boolean(_fromRouterService),
        );

        this._serializeQueryParams(state.routeInfos, queryParams);

        if (!_fromRouterService) {
          this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
        }
      }
      /**
      Returns the meta information for the query params of a given route. This
      will be overridden to allow support for lazy routes.
         @private
      @method _getQPMeta
      @param {RouteInfo} routeInfo
      @return {Object}
    */

      _getQPMeta(routeInfo) {
        var route = routeInfo.route;
        return route && (0, _metal.get)(route, '_qp');
      }
      /**
      Returns a merged query params meta object for a given set of routeInfos.
      Useful for knowing what query params are available for a given route hierarchy.
         @private
      @method _queryParamsFor
      @param {Array<RouteInfo>} routeInfos
      @return {Object}
     */

      _queryParamsFor(routeInfos) {
        var routeInfoLength = routeInfos.length;
        var leafRouteName = routeInfos[routeInfoLength - 1].name;
        var cached = this._qpCache[leafRouteName];

        if (cached !== undefined) {
          return cached;
        }

        var shouldCache = true;
        var map = {};
        var qps = [];
        var qpsByUrlKey = true ? /* DEBUG */ {} : null;
        var qpMeta;
        var urlKey;
        var qpOther;

        for (var routeInfo of routeInfos) {
          qpMeta = this._getQPMeta(routeInfo);

          if (!qpMeta) {
            shouldCache = false;
            continue;
          } // Loop over each QP to make sure we don't have any collisions by urlKey

          for (var qp of qpMeta.qps) {
            if (
              true
              /* DEBUG */
            ) {
              urlKey = qp.urlKey;
              qpOther = qpsByUrlKey[urlKey];

              if (qpOther && qpOther.controllerName !== qp.controllerName) {
                true &&
                  !false &&
                  (0, _debug.assert)(
                    `You're not allowed to have more than one controller property map to the same query param key, but both \`${qpOther.scopedPropertyName}\` and \`${qp.scopedPropertyName}\` map to \`${urlKey}\`. You can fix this by mapping one of the controller properties to a different query param key via the \`as\` config option, e.g. \`${qpOther.prop}: { as: 'other-${qpOther.prop}' }\``,
                    false,
                  );
              }

              qpsByUrlKey[urlKey] = qp;
            }

            qps.push(qp);
          }

          Object.assign(map, qpMeta.map);
        }

        var finalQPMeta = {
          qps,
          map,
        };

        if (shouldCache) {
          this._qpCache[leafRouteName] = finalQPMeta;
        }

        return finalQPMeta;
      }
      /**
      Maps all query param keys to their fully scoped property name of the form
      `controllerName:propName`.
         @private
      @method _fullyScopeQueryParams
      @param {String} leafRouteName
      @param {Array<Object>} contexts
      @param {Object} queryParams
      @return {Void}
    */

      _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
        var state = calculatePostTransitionState(this, leafRouteName, contexts);
        var routeInfos = state.routeInfos;
        var qpMeta;

        for (var routeInfo of routeInfos) {
          qpMeta = this._getQPMeta(routeInfo);

          if (!qpMeta) {
            continue;
          }

          for (var qp of qpMeta.qps) {
            var presentProp =
              (qp.prop in queryParams && qp.prop) ||
              (qp.scopedPropertyName in queryParams && qp.scopedPropertyName) ||
              (qp.urlKey in queryParams && qp.urlKey);

            if (presentProp) {
              if (presentProp !== qp.scopedPropertyName) {
                queryParams[qp.scopedPropertyName] = queryParams[presentProp];
                delete queryParams[presentProp];
              }
            }
          }
        }
      }
      /**
      Hydrates (adds/restores) any query params that have pre-existing values into
      the given queryParams hash. This is what allows query params to be "sticky"
      and restore their last known values for their scope.
         @private
      @method _hydrateUnsuppliedQueryParams
      @param {TransitionState} state
      @param {Object} queryParams
      @return {Void}
    */

      _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
        var routeInfos = state.routeInfos;
        var appCache = this._bucketCache;
        var qpMeta;
        var qp;
        var presentProp;

        for (var routeInfo of routeInfos) {
          qpMeta = this._getQPMeta(routeInfo);

          if (!qpMeta) {
            continue;
          } // Needs to stay for index loop to avoid throwIfClosureRequired

          for (var j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
            qp = qpMeta.qps[j];
            true && !qp && (0, _debug.assert)('expected qp', qp);
            presentProp =
              (qp.prop in queryParams && qp.prop) ||
              (qp.scopedPropertyName in queryParams && qp.scopedPropertyName) ||
              (qp.urlKey in queryParams && qp.urlKey);
            true &&
              !(function () {
                if (
                  qp.urlKey === presentProp ||
                  qp.scopedPropertyName === presentProp
                ) {
                  return true;
                }

                if (
                  _fromRouterService &&
                  presentProp !== false &&
                  qp.urlKey !== qp.prop
                ) {
                  // assumptions (mainly from current transitionTo_test):
                  // - this is only supposed to be run when there is an alias to a query param and the alias is used to set the param
                  // - when there is no alias: qp.urlKey == qp.prop
                  return false;
                }

                return true;
              })() &&
              (0, _debug.assert)(
                `You passed the \`${presentProp}\` query parameter during a transition into ${qp.route.routeName}, please update to ${qp.urlKey}`,
                (function () {
                  if (
                    qp.urlKey === presentProp ||
                    qp.scopedPropertyName === presentProp
                  ) {
                    return true;
                  }

                  if (
                    _fromRouterService &&
                    presentProp !== false &&
                    qp.urlKey !== qp.prop
                  ) {
                    return false;
                  }

                  return true;
                })(),
              );

            if (presentProp) {
              if (presentProp !== qp.scopedPropertyName) {
                queryParams[qp.scopedPropertyName] = queryParams[presentProp];
                delete queryParams[presentProp];
              }
            } else {
              var cacheKey = (0, _utils.calculateCacheKey)(
                qp.route.fullRouteName,
                qp.parts,
                state.params,
              );
              true &&
                !appCache &&
                (0, _debug.assert)(
                  'ROUTER BUG: expected appCache to be defined. This is an internal bug, please open an issue on Github if you see this message!',
                  appCache,
                );
              queryParams[qp.scopedPropertyName] = appCache.lookup(
                cacheKey,
                qp.prop,
                qp.defaultValue,
              );
            }
          }
        }
      }

      _scheduleLoadingEvent(transition, originRoute) {
        this._cancelSlowTransitionTimer();

        this._slowTransitionTimer = (0, _runloop.scheduleOnce)(
          'routerTransitions',
          this,
          this._handleSlowTransition,
          transition,
          originRoute,
        );
      }

      _handleSlowTransition(transition, originRoute) {
        if (!this._routerMicrolib.activeTransition) {
          // Don't fire an event if we've since moved on from
          // the transition that put us in a loading state.
          return;
        }

        var targetState = new _router_state.default(
          this,
          this._routerMicrolib,
          this._routerMicrolib.activeTransition[_router_js.STATE_SYMBOL],
        );
        this.set('targetState', targetState);
        transition.trigger(true, 'loading', transition, originRoute);
      }

      _cancelSlowTransitionTimer() {
        if (this._slowTransitionTimer) {
          (0, _runloop.cancel)(this._slowTransitionTimer);
        }

        this._slowTransitionTimer = null;
      } // These three helper functions are used to ensure errors aren't
      // re-raised if they're handled in a route's error action.

      _markErrorAsHandled(error) {
        this._handledErrors.add(error);
      }

      _isErrorHandled(error) {
        return this._handledErrors.has(error);
      }

      _clearHandledError(error) {
        this._handledErrors.delete(error);
      }

      _getEngineInstance(_ref) {
        var { name, instanceId, mountPoint } = _ref;
        var engineInstances = this._engineInstances;
        var namedInstances = engineInstances[name];

        if (!namedInstances) {
          namedInstances = Object.create(null);
          engineInstances[name] = namedInstances;
        } // We just set these!

        true &&
          !namedInstances &&
          (0, _debug.assert)('has namedInstances', namedInstances);
        var engineInstance = namedInstances[instanceId];

        if (!engineInstance) {
          var owner = (0, _owner.getOwner)(this);
          true &&
            !(owner instanceof _instance.default) &&
            (0, _debug.assert)(
              'Expected router to have EngineInstance as owner',
              owner instanceof _instance.default,
            );
          true &&
            !owner.hasRegistration(`engine:${name}`) &&
            (0, _debug.assert)(
              `You attempted to mount the engine '${name}' in your router map, but the engine can not be found.`,
              owner.hasRegistration(`engine:${name}`),
            );
          engineInstance = owner.buildChildEngineInstance(name, {
            routable: true,
            mountPoint,
          });
          engineInstance.boot();
          namedInstances[instanceId] = engineInstance;
        }

        return engineInstance;
      }
    }
    /*
    Helper function for iterating over routes in a set of routeInfos that are
    at or above the given origin route. Example: if `originRoute` === 'foo.bar'
    and the routeInfos given were for 'foo.bar.baz', then the given callback
    will be invoked with the routes for 'foo.bar', 'foo', and 'application'
    individually.
  
    If the callback returns anything other than `true`, then iteration will stop.
  
    @private
    @param {Route} originRoute
    @param {Array<RouteInfo>} routeInfos
    @param {Function} callback
    @return {Void}
   */

    function forEachRouteAbove(routeInfos, callback) {
      for (var i = routeInfos.length - 1; i >= 0; --i) {
        var routeInfo = routeInfos[i];
        true && !routeInfo && (0, _debug.assert)('has routeInfo', routeInfo);
        var route = routeInfo.route; // routeInfo.handler being `undefined` generally means either:
        //
        // 1. an error occurred during creation of the route in question
        // 2. the route is across an async boundary (e.g. within an engine)
        //
        // In both of these cases, we cannot invoke the callback on that specific
        // route, because it just doesn't exist...

        if (route === undefined) {
          continue;
        }

        if (callback(route, routeInfo) !== true) {
          return;
        }
      }
    } // These get invoked when an action bubbles above ApplicationRoute
    // and are not meant to be overridable.

    var defaultActionHandlers = {
      willResolveModel(_routeInfos, transition, originRoute) {
        this._scheduleLoadingEvent(transition, originRoute);
      },

      // Attempt to find an appropriate error route or substate to enter.
      error(routeInfos, error, transition) {
        var router = this;
        var routeInfoWithError = routeInfos[routeInfos.length - 1];
        forEachRouteAbove(routeInfos, (route, routeInfo) => {
          // We don't check the leaf most routeInfo since that would
          // technically be below where we're at in the route hierarchy.
          if (routeInfo !== routeInfoWithError) {
            // Check for the existence of an 'error' route.
            var errorRouteName = findRouteStateName(route, 'error');

            if (errorRouteName) {
              router._markErrorAsHandled(error);

              router.intermediateTransitionTo(errorRouteName, error);
              return false;
            }
          } // Check for an 'error' substate route

          var errorSubstateName = findRouteSubstateName(route, 'error');

          if (errorSubstateName) {
            router._markErrorAsHandled(error);

            router.intermediateTransitionTo(errorSubstateName, error);
            return false;
          }

          return true;
        });
        logError(
          error,
          `Error while processing route: ${transition.targetName}`,
        );
      },

      // Attempt to find an appropriate loading route or substate to enter.
      loading(routeInfos, transition) {
        var router = this;
        var routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
        forEachRouteAbove(routeInfos, (route, routeInfo) => {
          // We don't check the leaf most routeInfos since that would
          // technically be below where we're at in the route hierarchy.
          if (routeInfo !== routeInfoWithSlowLoading) {
            // Check for the existence of a 'loading' route.
            var loadingRouteName = findRouteStateName(route, 'loading');

            if (loadingRouteName) {
              router.intermediateTransitionTo(loadingRouteName);
              return false;
            }
          } // Check for loading substate

          var loadingSubstateName = findRouteSubstateName(route, 'loading');

          if (loadingSubstateName) {
            router.intermediateTransitionTo(loadingSubstateName);
            return false;
          } // Don't bubble above pivot route.

          return transition.pivotHandler !== route;
        });
      },
    };

    function logError(_error, initialMessage) {
      var errorArgs = [];
      var error;

      if (
        _error &&
        typeof _error === 'object' &&
        typeof _error.errorThrown === 'object'
      ) {
        error = _error.errorThrown;
      } else {
        error = _error;
      }

      if (initialMessage) {
        errorArgs.push(initialMessage);
      }

      if (error) {
        if (error.message) {
          errorArgs.push(error.message);
        }

        if (error.stack) {
          errorArgs.push(error.stack);
        }

        if (typeof error === 'string') {
          errorArgs.push(error);
        }
      }

      console.error(...errorArgs); //eslint-disable-line no-console
    }
    /**
    Finds the name of the substate route if it exists for the given route. A
    substate route is of the form `route_state`, such as `foo_loading`.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */

    function findRouteSubstateName(route, state) {
      var owner = (0, _owner.getOwner)(route);
      true &&
        !owner &&
        (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
      var { routeName, fullRouteName, _router: router } = route;
      var substateName = `${routeName}_${state}`;
      var substateNameFull = `${fullRouteName}_${state}`;
      return routeHasBeenDefined(owner, router, substateName, substateNameFull)
        ? substateNameFull
        : '';
    }
    /**
    Finds the name of the state route if it exists for the given route. A state
    route is of the form `route.state`, such as `foo.loading`. Properly Handles
    `application` named routes.
  
    @private
    @param {Route} route
    @param {String} state
    @return {String}
  */

    function findRouteStateName(route, state) {
      var owner = (0, _owner.getOwner)(route);
      true &&
        !owner &&
        (0, _debug.assert)('Route is unexpectedly missing an owner', owner);
      var { routeName, fullRouteName, _router: router } = route;
      var stateName =
        routeName === 'application' ? state : `${routeName}.${state}`;
      var stateNameFull =
        fullRouteName === 'application' ? state : `${fullRouteName}.${state}`;
      return routeHasBeenDefined(owner, router, stateName, stateNameFull)
        ? stateNameFull
        : '';
    }
    /**
    Determines whether or not a route has been defined by checking that the route
    is in the Router's map and the owner has a registration for that route.
  
    @private
    @param {Owner} owner
    @param {Router} router
    @param {String} localName
    @param {String} fullName
    @return {Boolean}
  */

    function routeHasBeenDefined(owner, router, localName, fullName) {
      var routerHasRoute = router.hasRoute(fullName);
      var ownerHasRoute =
        owner.hasRegistration(`template:${localName}`) ||
        owner.hasRegistration(`route:${localName}`);
      return routerHasRoute && ownerHasRoute;
    }

    function triggerEvent(routeInfos, ignoreFailure, name, args) {
      if (!routeInfos) {
        if (ignoreFailure) {
          return;
        } // TODO: update?

        throw new _error2.default(
          `Can't trigger action '${name}' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call \`.send()\` on the \`Transition\` object passed to the \`model/beforeModel/afterModel\` hooks.`,
        );
      }

      var eventWasHandled = false;
      var routeInfo, handler, actionHandler;

      for (var i = routeInfos.length - 1; i >= 0; i--) {
        routeInfo = routeInfos[i];
        true &&
          !routeInfo &&
          (0, _debug.assert)('[BUG] Missing routeInfo', routeInfo);
        handler = routeInfo.route;
        actionHandler = handler && handler.actions && handler.actions[name];

        if (actionHandler) {
          if (actionHandler.apply(handler, args) === true) {
            eventWasHandled = true;
          } else {
            // Should only hit here if a non-bubbling error action is triggered on a route.
            if (name === 'error') {
              true &&
                !handler &&
                (0, _debug.assert)('[BUG] Missing handler', handler);

              handler._router._markErrorAsHandled(args[0]);
            }

            return;
          }
        }
      }

      var defaultHandler = defaultActionHandlers[name];

      if (defaultHandler) {
        defaultHandler.call(this, routeInfos, ...args);
        return;
      }

      if (!eventWasHandled && !ignoreFailure) {
        throw new _error2.default(
          `Nothing handled the action '${name}'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.`,
        );
      }
    }

    function calculatePostTransitionState(
      emberRouter,
      leafRouteName,
      contexts,
    ) {
      var state = emberRouter._routerMicrolib.applyIntent(
        leafRouteName,
        contexts,
      );

      var { routeInfos, params } = state;

      for (var routeInfo of routeInfos) {
        // If the routeInfo is not resolved, we serialize the context into params
        if (!routeInfo.isResolved) {
          params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
        } else {
          params[routeInfo.name] = routeInfo.params;
        }
      }

      return state;
    }

    function updatePaths(router) {
      var infos = router._routerMicrolib.currentRouteInfos;

      if (infos.length === 0) {
        return;
      }

      var path = EmberRouter._routePath(infos);

      var info = infos[infos.length - 1];
      true && !info && (0, _debug.assert)('expected info', info);
      var currentRouteName = info.name;
      var location = router.location;
      true &&
        !(typeof location !== 'string') &&
        (0, _debug.assert)(
          'expected location to not be a string',
          typeof location !== 'string',
        );
      var currentURL = location.getURL();
      (0, _metal.set)(router, 'currentPath', path);
      (0, _metal.set)(router, 'currentRouteName', currentRouteName);
      (0, _metal.set)(router, 'currentURL', currentURL);
    }

    function didBeginTransition(transition, router) {
      var routerState = new _router_state.default(
        router,
        router._routerMicrolib,
        transition[_router_js.STATE_SYMBOL],
      );

      if (!router.currentState) {
        router.set('currentState', routerState);
      }

      router.set('targetState', routerState);
      transition.promise = transition.catch((error) => {
        if (router._isErrorHandled(error)) {
          router._clearHandledError(error);
        } else {
          throw error;
        }
      }, 'Transition Error');
    }

    function forEachQueryParam(router, routeInfos, queryParams, callback) {
      var qpCache = router._queryParamsFor(routeInfos);

      for (var key in queryParams) {
        if (!Object.prototype.hasOwnProperty.call(queryParams, key)) {
          continue;
        }

        var value = queryParams[key];
        var qp = qpCache.map[key];
        callback(key, value, qp);
      }
    }

    function findLiveRoute(liveRoutes, name) {
      if (!liveRoutes) {
        return;
      }

      var stack = [liveRoutes];

      while (stack.length > 0) {
        var test = stack.shift();

        if (test.render.name === name) {
          return test;
        }

        var outlets = test.outlets;

        for (var outletName in outlets) {
          stack.push(outlets[outletName]);
        }
      }

      return;
    }

    function appendLiveRoute(liveRoutes, defaultParentState, renderOptions) {
      var ownState = {
        render: renderOptions,
        outlets: Object.create(null),
        wasUsed: false,
      };
      var target;

      if (renderOptions.into) {
        target = findLiveRoute(liveRoutes, renderOptions.into);
      } else {
        target = defaultParentState;
      }

      if (target) {
        (0, _metal.set)(target.outlets, renderOptions.outlet, ownState);
      } else {
        liveRoutes = ownState;
      }

      return {
        liveRoutes,
        ownState,
      };
    }

    function representEmptyRoute(liveRoutes, defaultParentState, _ref2) {
      var { routeName } = _ref2;
      // the route didn't render anything
      var alreadyAppended = findLiveRoute(liveRoutes, routeName);

      if (alreadyAppended) {
        // But some other route has already rendered our default
        // template, so that becomes the default target for any
        // children we may have.
        return alreadyAppended;
      } else {
        // Create an entry to represent our default template name,
        // just so other routes can target it and inherit its place
        // in the outlet hierarchy.
        defaultParentState.outlets['main'] = {
          render: {
            name: routeName,
            outlet: 'main',
          },
          outlets: {},
        };
        return defaultParentState;
      }
    }

    EmberRouter.reopen({
      didTransition: defaultDidTransition,
      willTransition: defaultWillTransition,
      rootURL: '/',
      location: 'hash',
      // FIXME: Does this need to be overrideable via extend?
      url: (0, _metal.computed)(function () {
        var location = (0, _metal.get)(this, 'location');

        if (typeof location === 'string') {
          return undefined;
        }

        return location.getURL();
      }),
    });
    var _default = EmberRouter;
    _exports.default = _default;
  });
  define('@ember/-internals/routing/lib/system/router_state', [
    'exports',
    '@ember/-internals/routing/lib/utils',
  ], function (_exports, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    class RouterState {
      constructor(emberRouter, router, routerJsState) {
        this.emberRouter = emberRouter;
        this.router = router;
        this.routerJsState = routerJsState;
      }

      isActiveIntent(routeName, models, queryParams) {
        var state = this.routerJsState;

        if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
          return false;
        }

        if (queryParams !== undefined && Object.keys(queryParams).length > 0) {
          var visibleQueryParams = Object.assign({}, queryParams);

          this.emberRouter._prepareQueryParams(
            routeName,
            models,
            visibleQueryParams,
          );

          return (0, _utils.shallowEqual)(
            visibleQueryParams,
            state.queryParams,
          );
        }

        return true;
      }
    }

    _exports.default = RouterState;
  });
  define('@ember/-internals/routing/lib/system/transition', [], function () {
    'use strict';
    /**
   @module @ember/routing
  */

    /**
    A Transition is a thennable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @public
  */

    /**
    The Transition's internal promise. Calling `.then` on this property
    is that same as calling `.then` on the Transition object itself, but
    this property is exposed for when you want to pass around a
    Transition's promise, but not the Transition object itself, since
    Transition object can be externally `abort`ed, while the promise
    cannot.
  
    @property promise
    @type {Object}
    @public
    */

    /**
    Custom state can be stored on a Transition's `data` object.
    This can be useful for decorating a Transition within an earlier
    hook and shared with a later hook. Properties set on `data` will
    be copied to new transitions generated by calling `retry` on this
    transition.
  
    @property data
    @type {Object}
    @public
  */

    /**
    A standard promise hook that resolves if the transition
    succeeds and rejects if it fails/redirects/aborts.
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */

    /**
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method catch
    @param {Function} onRejection
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */

    /**
  
    Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
  
    @method finally
    @param {Function} callback
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
  */

    /**
    Aborts the Transition. Note you can also implicitly abort a transition
    by initiating another transition while a previous one is underway.
  
    @method abort
    @return {Transition} this transition
    @public
  */

    /**
  
    Retries a previously-aborted transition (making sure to abort the
    transition if it's still active). Returns a new transition that
    represents the new attempt to transition.
  
    @method retry
    @return {Transition} new transition
    @public
    */

    /**
  
    Sets the URL-changing method to be employed at the end of a
    successful transition. By default, a new Transition will just
    use `updateURL`, but passing 'replace' to this method will
    cause the URL to update using 'replaceWith' instead. Omitting
    a parameter will disable the URL change, allowing for transitions
    that don't update the URL at completion (this is also used for
    handleURL, since the URL has already changed before the
    transition took place).
  
    @method method
    @param {String} method the type of URL-changing method to use
      at the end of a transition. Accepted values are 'replace',
      falsy values, or any other non-falsy value (which is
      interpreted as an updateURL transition).
  
    @return {Transition} this transition
    @public
  */

    /**
  
    Fires an event on the current list of resolved/resolving
    handlers within this transition. Useful for firing events
    on route hierarchies that haven't fully been entered yet.
  
    Note: This method is also aliased as `send`
  
    @method trigger
    @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
    @param {String} name the name of the event to fire
    @public
  */

    /**
     * This property is a `RouteInfo` object that represents
     * where the router is transitioning to. It's important
     * to note that a `RouteInfo` is a linked list and this
     * property represents the leafmost route.
     * @property {null|RouteInfo|RouteInfoWithAttributes} to
     * @public
     */

    /**
     * This property is a `RouteInfo` object that represents
     * where transition originated from. It's important
     * to note that a `RouteInfo` is a linked list and this
     * property represents the head node of the list.
     * In the case of an initial render, `from` will be set to
     * `null`.
     * @property {null|RouteInfoWithAttributes} from
     * @public
     */

    /**
    Transitions are aborted and their promises rejected
    when redirects occur; this method returns a promise
    that will follow any redirects that occur and fulfill
    with the value fulfilled by any redirecting transitions
    that occur.
  
    @method followRedirects
    @return {Promise} a promise that fulfills with the same
      value that the final redirecting transition fulfills with
    @public
  */

    /**
    In non-production builds, this function will return the stack that this Transition was
    created within. In production builds, this function will not be present.
  
    @method debugCreationStack
    @return string
  */

    /**
    In non-production builds, this function will return the stack that this Transition was
    aborted within (or `undefined` if the Transition has not been aborted yet). In production
    builds, this function will not be present.
  
    @method debugAbortStack
    @return string
  */

    /**
    In non-production builds, this property references the Transition that _this_ Transition
    was derived from or `undefined` if this transition did not derive from another. In
    production builds, this property will not be present.
  
    @property debugPreviousTransition
    @type {Transition | undefined}
  */
  });
  define('@ember/-internals/routing/lib/utils', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/owner',
    '@ember/debug',
    '@ember/engine/instance',
    '@ember/error',
    'router_js',
  ], function (
    _exports,
    _metal,
    _owner,
    _debug,
    _instance,
    _error,
    _router_js,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.calculateCacheKey = calculateCacheKey;
    _exports.deprecateTransitionMethods = deprecateTransitionMethods;
    _exports.extractRouteArgs = extractRouteArgs;
    _exports.getActiveTargetName = getActiveTargetName;
    _exports.normalizeControllerQueryParams = normalizeControllerQueryParams;
    _exports.prefixRouteNameArg = prefixRouteNameArg;
    _exports.resemblesURL = resemblesURL;
    _exports.shallowEqual = shallowEqual;
    _exports.stashParamNames = stashParamNames;
    var ALL_PERIODS_REGEX = /\./g;

    function extractRouteArgs(args) {
      // SAFETY: This should just be the same thing
      args = args.slice();
      var possibleOptions = args[args.length - 1];
      var queryParams;

      if (isRouteOptions(possibleOptions)) {
        args.pop(); // Remove options

        queryParams = possibleOptions.queryParams;
      } else {
        queryParams = {};
      }

      var routeName;

      if (typeof args[0] === 'string') {
        routeName = args.shift(); // We just checked this!

        true &&
          !(typeof routeName === 'string') &&
          (0, _debug.assert)(
            'routeName is a string',
            typeof routeName === 'string',
          );
      } // SAFTEY: We removed the name and options if they existed, only models left.

      var models = args;
      return {
        routeName,
        models,
        queryParams,
      };
    }

    function getActiveTargetName(router) {
      var routeInfos = router.activeTransition
        ? router.activeTransition[_router_js.STATE_SYMBOL].routeInfos
        : router.state.routeInfos;
      var lastRouteInfo = routeInfos[routeInfos.length - 1];
      true &&
        !lastRouteInfo &&
        (0, _debug.assert)('has last route info', lastRouteInfo);
      return lastRouteInfo.name;
    }

    function stashParamNames(router, routeInfos) {
      if (routeInfos['_namesStashed']) {
        return;
      } // This helper exists because router.js/route-recognizer.js awkwardly
      // keeps separate a routeInfo's list of parameter names depending
      // on whether a URL transition or named transition is happening.
      // Hopefully we can remove this in the future.

      var routeInfo = routeInfos[routeInfos.length - 1];
      true && !routeInfo && (0, _debug.assert)('has route info', routeInfo);
      var targetRouteName = routeInfo.name;

      var recogHandlers = router._routerMicrolib.recognizer.handlersFor(
        targetRouteName,
      );

      var dynamicParent;

      for (var i = 0; i < routeInfos.length; ++i) {
        var _routeInfo = routeInfos[i];
        true && !_routeInfo && (0, _debug.assert)('has route info', _routeInfo);
        var names = recogHandlers[i].names;

        if (names.length) {
          dynamicParent = _routeInfo;
        }

        _routeInfo['_names'] = names;
        var route = _routeInfo.route; // SAFETY: This cast should be idential. I don't understand why it is needed.

        route._stashNames(_routeInfo, dynamicParent);
      }

      routeInfos['_namesStashed'] = true;
    }

    function _calculateCacheValuePrefix(prefix, part) {
      // calculates the dot separated sections from prefix that are also
      // at the start of part - which gives us the route name
      // given : prefix = site.article.comments, part = site.article.id
      //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)
      // given : prefix = site.article, part = site.article.id
      //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)
      var prefixParts = prefix.split('.');
      var currPrefix = '';

      for (var i = 0; i < prefixParts.length; i++) {
        var currPart = prefixParts.slice(0, i + 1).join('.');

        if (part.indexOf(currPart) !== 0) {
          break;
        }

        currPrefix = currPart;
      }

      return currPrefix;
    }
    /*
    Stolen from Controller
  */

    function calculateCacheKey(prefix, parts, values) {
      if (parts === void 0) {
        parts = [];
      }

      var suffixes = '';

      for (var part of parts) {
        var cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);

        var value = void 0;

        if (values) {
          if (cacheValuePrefix && cacheValuePrefix in values) {
            var partRemovedPrefix =
              part.indexOf(cacheValuePrefix) === 0
                ? part.substring(cacheValuePrefix.length + 1)
                : part;
            value = (0, _metal.get)(
              values[cacheValuePrefix],
              partRemovedPrefix,
            );
          } else {
            value = (0, _metal.get)(values, part);
          }
        }

        suffixes += `::${part}:${value}`;
      }

      return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
    }
    /*
    Controller-defined query parameters can come in three shapes:
  
    Array
      queryParams: ['foo', 'bar']
    Array of simple objects where value is an alias
      queryParams: [
        {
          'foo': 'rename_foo_to_this'
        },
        {
          'bar': 'call_bar_this_instead'
        }
      ]
    Array of fully defined objects
      queryParams: [
        {
          'foo': {
            as: 'rename_foo_to_this'
          },
        }
        {
          'bar': {
            as: 'call_bar_this_instead',
            scope: 'controller'
          }
        }
      ]
  
    This helper normalizes all three possible styles into the
    'Array of fully defined objects' style.
  */

    function normalizeControllerQueryParams(queryParams) {
      var qpMap = {};

      for (var queryParam of queryParams) {
        accumulateQueryParamDescriptors(queryParam, qpMap);
      }

      return qpMap;
    }

    function accumulateQueryParamDescriptors(_desc, accum) {
      var desc =
        typeof _desc === 'string'
          ? {
              [_desc]: {
                as: null,
              },
            }
          : _desc;

      for (var key in desc) {
        if (!Object.prototype.hasOwnProperty.call(desc, key)) {
          return;
        }

        var _singleDesc = desc[key];
        var singleDesc =
          typeof _singleDesc === 'string'
            ? {
                as: _singleDesc,
              }
            : _singleDesc;
        var partialVal = accum[key] || {
          as: null,
          scope: 'model',
        };
        var val = Object.assign(Object.assign({}, partialVal), singleDesc);
        accum[key] = val;
      }
    }
    /*
    Check if a routeName resembles a url instead
  
    @private
  */

    function resemblesURL(str) {
      return typeof str === 'string' && (str === '' || str[0] === '/');
    }
    /*
    Returns an arguments array where the route name arg is prefixed based on the mount point
  
    @private
  */

    function prefixRouteNameArg(route, args) {
      var routeName;
      var owner = (0, _owner.getOwner)(route);
      true &&
        !(owner instanceof _instance.default) &&
        (0, _debug.assert)(
          'Expected route to have EngineInstance as owner',
          owner instanceof _instance.default,
        );
      var prefix = owner.mountPoint; // only alter the routeName if it's actually referencing a route.

      if (owner.routable && typeof args[0] === 'string') {
        routeName = args[0];

        if (resemblesURL(routeName)) {
          throw new _error.default(
            'Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.',
          );
        } else {
          routeName = `${prefix}.${routeName}`;
          args[0] = routeName;
        }
      }

      return args;
    }

    function shallowEqual(a, b) {
      var aCount = 0;
      var bCount = 0;

      for (var kA in a) {
        if (Object.prototype.hasOwnProperty.call(a, kA)) {
          if (a[kA] !== b[kA]) {
            return false;
          }

          aCount++;
        }
      }

      for (var kB in b) {
        if (Object.prototype.hasOwnProperty.call(b, kB)) {
          bCount++;
        }
      }

      return aCount === bCount;
    }

    function deprecateTransitionMethods(frameworkClass, methodName) {
      true &&
        !false &&
        (0, _debug.deprecate)(
          `Calling ${methodName} on a ${frameworkClass} is deprecated. Use the RouterService instead.`,
          false,
          {
            id: 'routing.transition-methods',
            for: 'ember-source',
            since: {
              available: '3.26.0',
              enabled: '3.26.0',
            },
            until: '5.0.0',
            url:
              'https://deprecations.emberjs.com/v3.x/#toc_routing-transition-methods',
          },
        );
    }

    function isRouteOptions(value) {
      if (value && typeof value === 'object') {
        var qps = value.queryParams;

        if (qps && typeof qps === 'object') {
          return Object.keys(qps).every((k) => typeof k === 'string');
        }
      }

      return false;
    }
  });
  define('@ember/-internals/runtime/index', [
    'exports',
    '@ember/-internals/runtime/lib/system/object',
    '@ember/-internals/runtime/lib/mixins/registry_proxy',
    '@ember/-internals/runtime/lib/mixins/container_proxy',
    '@ember/-internals/runtime/lib/compare',
    '@ember/-internals/runtime/lib/is-equal',
    '@ember/-internals/runtime/lib/mixins/array',
    '@ember/-internals/runtime/lib/mixins/comparable',
    '@ember/-internals/runtime/lib/system/namespace',
    '@ember/-internals/runtime/lib/system/array_proxy',
    '@ember/-internals/runtime/lib/system/object_proxy',
    '@ember/-internals/runtime/lib/system/core_object',
    '@ember/-internals/runtime/lib/mixins/action_handler',
    '@ember/-internals/runtime/lib/mixins/enumerable',
    '@ember/-internals/runtime/lib/mixins/-proxy',
    '@ember/-internals/runtime/lib/mixins/observable',
    '@ember/-internals/runtime/lib/mixins/mutable_enumerable',
    '@ember/-internals/runtime/lib/mixins/target_action_support',
    '@ember/-internals/runtime/lib/mixins/evented',
    '@ember/-internals/runtime/lib/mixins/promise_proxy',
    '@ember/-internals/runtime/lib/ext/rsvp',
    '@ember/-internals/runtime/lib/type-of',
  ], function (
    _exports,
    _object,
    _registry_proxy,
    _container_proxy,
    _compare,
    _isEqual,
    _array,
    _comparable,
    _namespace,
    _array_proxy,
    _object_proxy,
    _core_object,
    _action_handler,
    _enumerable,
    _proxy,
    _observable,
    _mutable_enumerable,
    _target_action_support,
    _evented,
    _promise_proxy,
    _rsvp,
    _typeOf,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'A', {
      enumerable: true,
      get: function () {
        return _array.A;
      },
    });
    Object.defineProperty(_exports, 'ActionHandler', {
      enumerable: true,
      get: function () {
        return _action_handler.default;
      },
    });
    Object.defineProperty(_exports, 'Array', {
      enumerable: true,
      get: function () {
        return _array.default;
      },
    });
    Object.defineProperty(_exports, 'ArrayProxy', {
      enumerable: true,
      get: function () {
        return _array_proxy.default;
      },
    });
    Object.defineProperty(_exports, 'Comparable', {
      enumerable: true,
      get: function () {
        return _comparable.default;
      },
    });
    Object.defineProperty(_exports, 'ContainerProxyMixin', {
      enumerable: true,
      get: function () {
        return _container_proxy.default;
      },
    });
    Object.defineProperty(_exports, 'CoreObject', {
      enumerable: true,
      get: function () {
        return _core_object.default;
      },
    });
    Object.defineProperty(_exports, 'Enumerable', {
      enumerable: true,
      get: function () {
        return _enumerable.default;
      },
    });
    Object.defineProperty(_exports, 'Evented', {
      enumerable: true,
      get: function () {
        return _evented.default;
      },
    });
    Object.defineProperty(_exports, 'FrameworkObject', {
      enumerable: true,
      get: function () {
        return _object.FrameworkObject;
      },
    });
    Object.defineProperty(_exports, 'MutableArray', {
      enumerable: true,
      get: function () {
        return _array.MutableArray;
      },
    });
    Object.defineProperty(_exports, 'MutableEnumerable', {
      enumerable: true,
      get: function () {
        return _mutable_enumerable.default;
      },
    });
    Object.defineProperty(_exports, 'Namespace', {
      enumerable: true,
      get: function () {
        return _namespace.default;
      },
    });
    Object.defineProperty(_exports, 'NativeArray', {
      enumerable: true,
      get: function () {
        return _array.NativeArray;
      },
    });
    Object.defineProperty(_exports, 'Object', {
      enumerable: true,
      get: function () {
        return _object.default;
      },
    });
    Object.defineProperty(_exports, 'ObjectProxy', {
      enumerable: true,
      get: function () {
        return _object_proxy.default;
      },
    });
    Object.defineProperty(_exports, 'Observable', {
      enumerable: true,
      get: function () {
        return _observable.default;
      },
    });
    Object.defineProperty(_exports, 'PromiseProxyMixin', {
      enumerable: true,
      get: function () {
        return _promise_proxy.default;
      },
    });
    Object.defineProperty(_exports, 'RSVP', {
      enumerable: true,
      get: function () {
        return _rsvp.default;
      },
    });
    Object.defineProperty(_exports, 'RegistryProxyMixin', {
      enumerable: true,
      get: function () {
        return _registry_proxy.default;
      },
    });
    Object.defineProperty(_exports, 'TargetActionSupport', {
      enumerable: true,
      get: function () {
        return _target_action_support.default;
      },
    });
    Object.defineProperty(_exports, '_ProxyMixin', {
      enumerable: true,
      get: function () {
        return _proxy.default;
      },
    });
    Object.defineProperty(_exports, '_contentFor', {
      enumerable: true,
      get: function () {
        return _proxy.contentFor;
      },
    });
    Object.defineProperty(_exports, 'compare', {
      enumerable: true,
      get: function () {
        return _compare.default;
      },
    });
    Object.defineProperty(_exports, 'isArray', {
      enumerable: true,
      get: function () {
        return _array.isArray;
      },
    });
    Object.defineProperty(_exports, 'isEqual', {
      enumerable: true,
      get: function () {
        return _isEqual.default;
      },
    });
    Object.defineProperty(_exports, 'onerrorDefault', {
      enumerable: true,
      get: function () {
        return _rsvp.onerrorDefault;
      },
    });
    Object.defineProperty(_exports, 'removeAt', {
      enumerable: true,
      get: function () {
        return _array.removeAt;
      },
    });
    Object.defineProperty(_exports, 'typeOf', {
      enumerable: true,
      get: function () {
        return _typeOf.typeOf;
      },
    });
    Object.defineProperty(_exports, 'uniqBy', {
      enumerable: true,
      get: function () {
        return _array.uniqBy;
      },
    });
  });
  define('@ember/-internals/runtime/lib/compare', [
    'exports',
    '@ember/-internals/runtime/lib/type-of',
    '@ember/-internals/runtime/lib/mixins/comparable',
    '@ember/debug',
  ], function (_exports, _typeOf, _comparable, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = compare;
    var TYPE_ORDER = {
      undefined: 0,
      null: 1,
      boolean: 2,
      number: 3,
      string: 4,
      array: 5,
      object: 6,
      instance: 7,
      function: 8,
      class: 9,
      date: 10,
      regexp: 11,
      filelist: 12,
      error: 13,
    }; //
    // the spaceship operator
    //
    //                      `. ___
    //                     __,' __`.                _..----....____
    //         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
    //   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
    // ,'________________                          \`-._`-','
    //  `._              ```````````------...___   '-.._'-:
    //     ```--.._      ,.                     ````--...__\-.
    //             `.--. `-` "INFINITY IS LESS     ____    |  |`
    //               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
    //                 `._`.        __________   `.      \'__/`
    //                    `-:._____/______/___/____`.     \  `
    //                                |       `._    `.    \
    //                                `._________`-.   `.   `.___
    //                                              SSt  `------'`

    function spaceship(a, b) {
      // SAFETY: `Math.sign` always returns `-1` for negative, `0` for zero, and `1`
      // for positive numbers. (The extra precision is useful for the way we use
      // this in the context of `compare`.)
      return Math.sign(a - b);
    }
    /**
   @module @ember/utils
  */

    /**
   Compares two javascript values and returns:
  
    - -1 if the first is smaller than the second,
    - 0 if both are equal,
    - 1 if the first is greater than the second.
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 'hello');  // 0
    compare('abc', 'dfg');      // -1
    compare(2, 1);              // 1
    ```
  
   If the types of the two objects are different precedence occurs in the
   following order, with types earlier in the list considered `<` types
   later in the list:
  
    - undefined
    - null
    - boolean
    - number
    - string
    - array
    - object
    - instance
    - function
    - class
    - date
  
    ```javascript
    import { compare } from '@ember/utils';
  
    compare('hello', 50);       // 1
    compare(50, 'hello');       // -1
    ```
  
   @method compare
   @for @ember/utils
   @static
   @param {Object} v First value to compare
   @param {Object} w Second value to compare
   @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
   @public
  */

    function compare(v, w) {
      if (v === w) {
        return 0;
      }

      var type1 = (0, _typeOf.typeOf)(v);
      var type2 = (0, _typeOf.typeOf)(w);

      if (type1 === 'instance' && isComparable(v) && v.constructor.compare) {
        return v.constructor.compare(v, w);
      }

      if (type2 === 'instance' && isComparable(w) && w.constructor.compare) {
        // SAFETY: Multiplying by a negative just changes the sign
        return w.constructor.compare(w, v) * -1;
      }

      var res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);

      if (res !== 0) {
        return res;
      } // types are equal - so we have to check values now

      switch (type1) {
        case 'boolean':
          true &&
            !(typeof v === 'boolean' && typeof w === 'boolean') &&
            (0, _debug.assert)(
              'both are boolean',
              typeof v === 'boolean' && typeof w === 'boolean',
            );
          return spaceship(Number(v), Number(w));

        case 'number':
          true &&
            !(typeof v === 'number' && typeof w === 'number') &&
            (0, _debug.assert)(
              'both are numbers',
              typeof v === 'number' && typeof w === 'number',
            );
          return spaceship(v, w);

        case 'string':
          true &&
            !(typeof v === 'string' && typeof w === 'string') &&
            (0, _debug.assert)(
              'both are strings',
              typeof v === 'string' && typeof w === 'string',
            );
          return spaceship(v.localeCompare(w), 0);

        case 'array': {
          true &&
            !(Array.isArray(v) && Array.isArray(w)) &&
            (0, _debug.assert)(
              'both are arrays',
              Array.isArray(v) && Array.isArray(w),
            );
          var vLen = v.length;
          var wLen = w.length;
          var len = Math.min(vLen, wLen);

          for (var i = 0; i < len; i++) {
            var r = compare(v[i], w[i]);

            if (r !== 0) {
              return r;
            }
          } // all elements are equal now
          // shorter array should be ordered first

          return spaceship(vLen, wLen);
        }

        case 'instance':
          if (isComparable(v) && v.compare) {
            return v.compare(v, w);
          }

          return 0;

        case 'date':
          true &&
            !(v instanceof Date && w instanceof Date) &&
            (0, _debug.assert)(
              'both are dates',
              v instanceof Date && w instanceof Date,
            );
          return spaceship(v.getTime(), w.getTime());

        default:
          return 0;
      }
    }

    function isComparable(value) {
      return _comparable.default.detect(value);
    }
  });
  define('@ember/-internals/runtime/lib/ext/rsvp', [
    'exports',
    'rsvp',
    '@ember/runloop',
    '@ember/-internals/error-handling',
    '@ember/debug',
  ], function (_exports, RSVP, _runloop, _errorHandling, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.onerrorDefault = onerrorDefault;
    RSVP.configure('async', (callback, promise) => {
      _runloop._backburner.schedule('actions', null, callback, promise);
    });
    RSVP.configure('after', (cb) => {
      _runloop._backburner.schedule(_runloop._rsvpErrorQueue, null, cb);
    });
    RSVP.on('error', onerrorDefault);

    function onerrorDefault(reason) {
      var error = errorFor(reason);

      if (error) {
        var overrideDispatch = (0, _errorHandling.getDispatchOverride)();

        if (overrideDispatch) {
          overrideDispatch(error);
        } else {
          throw error;
        }
      }
    }

    function errorFor(reason) {
      if (!reason) return;
      var withErrorThrown = reason;

      if (withErrorThrown.errorThrown) {
        return unwrapErrorThrown(withErrorThrown);
      }

      var withName = reason;

      if (withName.name === 'UnrecognizedURLError') {
        true &&
          !false &&
          (0, _debug.assert)(
            `The URL '${withName.message}' did not match any routes in your application`,
            false,
          ); // @ts-expect-error We'll hit this if the assert is stripped

        return;
      }

      if (reason.name === 'TransitionAborted') {
        return;
      }

      return reason;
    }

    function unwrapErrorThrown(reason) {
      var error = reason.errorThrown;

      if (typeof error === 'string') {
        error = new Error(error);
      }

      Object.defineProperty(error, '__reason_with_error_thrown__', {
        value: reason,
        enumerable: false,
      });
      return error;
    }

    var _default = RSVP;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/is-equal', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = isEqual;

    /**
   @module @ember/utils
  */

    /**
    Compares two objects, returning true if they are equal.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual('hello', 'hello');                   // true
    isEqual(1, 2);                               // false
    ```
  
    `isEqual` is a more specific comparison than a triple equal comparison.
    It will call the `isEqual` instance method on the objects being
    compared, allowing finer control over when objects should be considered
    equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    let Person = EmberObject.extend({
      isEqual(other) { return this.ssn == other.ssn; }
    });
  
    let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
    let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});
  
    isEqual(personA, personB); // true
    ```
  
    Due to the expense of array comparisons, collections will never be equal to
    each other even if each of their items are equal to each other.
  
    ```javascript
    import { isEqual } from '@ember/utils';
  
    isEqual([4, 2], [4, 2]);                     // false
    ```
  
    @method isEqual
    @for @ember/utils
    @static
    @param {Object} a first object to compare
    @param {Object} b second object to compare
    @return {Boolean}
    @public
  */
    function isEqual(a, b) {
      if (a && typeof a.isEqual === 'function') {
        return a.isEqual(b);
      }

      if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      }

      return a === b;
    }
  });
  define('@ember/-internals/runtime/lib/mixins/-proxy', [
    'exports',
    '@ember/-internals/meta',
    '@ember/-internals/metal',
    '@ember/-internals/utils',
    '@ember/debug',
    '@glimmer/manager',
    '@glimmer/validator',
  ], function (_exports, _meta, _metal, _utils, _debug, _manager, _validator) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.contentFor = contentFor;
    _exports.default = void 0;

    /**
  @module ember
  */
    function contentFor(proxy) {
      var content = (0, _metal.get)(proxy, 'content'); // SAFETY: Ideally we'd assert instead of casting, but @glimmer/validator doesn't give us
      // sufficient public types for this. Previously this code was .js and worked correctly so
      // hopefully this is sufficiently reliable.

      (0, _validator.updateTag)(
        (0, _metal.tagForObject)(proxy),
        (0, _metal.tagForObject)(content),
      );
      return content;
    }

    function customTagForProxy(proxy, key, addMandatorySetter) {
      true &&
        !(0, _utils.isProxy)(proxy) &&
        (0, _debug.assert)('Expected a proxy', (0, _utils.isProxy)(proxy));
      var meta = (0, _validator.tagMetaFor)(proxy);
      var tag = (0, _validator.tagFor)(proxy, key, meta);

      if (
        true
        /* DEBUG */
      ) {
        // TODO: Replace this with something more first class for tracking tags in DEBUG
        // SAFETY: This is not an officially supported property but setting shouldn't cause issues.
        tag._propertyKey = key;
      }

      if (key in proxy) {
        if (
          true &&
          /* DEBUG */
          addMandatorySetter
        ) {
          true &&
            !_utils.setupMandatorySetter &&
            (0, _debug.assert)(
              '[BUG] setupMandatorySetter should be set when debugging',
              setupMandatorySetter,
            );
          (0, _utils.setupMandatorySetter)(tag, proxy, key);
        }

        return tag;
      } else {
        var tags = [tag, (0, _validator.tagFor)(proxy, 'content', meta)];
        var content = contentFor(proxy);

        if ((0, _utils.isObject)(content)) {
          tags.push(
            (0, _metal.tagForProperty)(content, key, addMandatorySetter),
          );
        }

        return (0, _validator.combine)(tags);
      }
    }

    var ProxyMixin = _metal.Mixin.create({
      /**
      The object whose properties will be forwarded.
         @property content
      @type {unknown}
      @default null
      @public
    */
      content: null,

      init() {
        this._super(...arguments);

        (0, _utils.setProxy)(this);
        (0, _metal.tagForObject)(this);
        (0, _manager.setCustomTagFor)(this, customTagForProxy);
      },

      willDestroy() {
        this.set('content', null);

        this._super(...arguments);
      },

      isTruthy: (0, _metal.computed)('content', function () {
        return Boolean((0, _metal.get)(this, 'content'));
      }),

      unknownProperty(key) {
        var content = contentFor(this);

        if (content) {
          return (0, _metal.get)(content, key);
        }
      },

      setUnknownProperty(key, value) {
        var m = (0, _meta.meta)(this);

        if (m.isInitializing() || m.isPrototypeMeta(this)) {
          // if marked as prototype or object is initializing then just
          // defineProperty rather than delegate
          (0, _metal.defineProperty)(this, key, null, value);
          return value;
        }

        var content = contentFor(this);
        true &&
          !content &&
          (0, _debug.assert)(
            `Cannot delegate set('${key}', ${value}) to the 'content' property of object proxy ${this}: its 'content' is undefined.`,
            content,
          ); // SAFETY: We don't actually guarantee that this is an object, so this isn't necessarily safe :(

        return (0, _metal.set)(content, key, value);
      },
    });

    var _default = ProxyMixin;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/action_handler', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var ActionHandler = _metal.Mixin.create({
      mergedProperties: ['actions'],

      /**
      The collection of functions, keyed by name, available on this
      `ActionHandler` as action targets.
         These functions will be invoked when a matching `{{action}}` is triggered
      from within a template and the application's current route is this route.
         Actions can also be invoked from other parts of your application
      via `ActionHandler#send`.
         The `actions` hash will inherit action handlers from
      the `actions` hash defined on extended parent classes
      or mixins rather than just replace the entire hash, e.g.:
         ```app/mixins/can-display-banner.js
      import Mixin from '@ember/mixin';
         export default Mixin.create({
        actions: {
          displayBanner(msg) {
            // ...
          }
        }
      });
      ```
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
      import CanDisplayBanner from '../mixins/can-display-banner';
         export default Route.extend(CanDisplayBanner, {
        actions: {
          playMusic() {
            // ...
          }
        }
      });
         // `WelcomeRoute`, when active, will be able to respond
      // to both actions, since the actions hash is merged rather
      // then replaced when extending mixins / parent classes.
      this.send('displayBanner');
      this.send('playMusic');
      ```
         Within a Controller, Route or Component's action handler,
      the value of the `this` context is the Controller, Route or
      Component object:
         ```app/routes/song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          myAction() {
            this.controllerFor("song");
            this.transitionTo("other.route");
            ...
          }
        }
      });
      ```
         It is also possible to call `this._super(...arguments)` from within an
      action handler if it overrides a handler defined on a parent
      class or mixin:
         Take for example the following routes:
         ```app/mixins/debug-route.js
      import Mixin from '@ember/mixin';
         export default Mixin.create({
        actions: {
          debugRouteInformation() {
            console.debug("It's a-me, console.debug!");
          }
        }
      });
      ```
         ```app/routes/annoying-debug.js
      import Route from '@ember/routing/route';
      import DebugRoute from '../mixins/debug-route';
         export default Route.extend(DebugRoute, {
        actions: {
          debugRouteInformation() {
            // also call the debugRouteInformation of mixed in DebugRoute
            this._super(...arguments);
               // show additional annoyance
            window.alert(...);
          }
        }
      });
      ```
         ## Bubbling
         By default, an action will stop bubbling once a handler defined
      on the `actions` hash handles it. To continue bubbling the action,
      you must return `true` from the handler:
         ```app/router.js
      Router.map(function() {
        this.route("album", function() {
          this.route("song");
        });
      });
      ```
         ```app/routes/album.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying: function() {
          }
        }
      });
      ```
         ```app/routes/album-song.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          startPlaying() {
            // ...
               if (actionShouldAlsoBeTriggeredOnParentRoute) {
              return true;
            }
          }
        }
      });
      ```
         @property actions
      @type Object
      @default null
      @public
    */

      /**
      Triggers a named action on the `ActionHandler`. Any parameters
      supplied after the `actionName` string will be passed as arguments
      to the action target function.
         If the `ActionHandler` has its `target` property set, actions may
      bubble to the `target`. Bubbling happens when an `actionName` can
      not be found in the `ActionHandler`'s `actions` hash or if the
      action target function returns `true`.
         Example
         ```app/routes/welcome.js
      import Route from '@ember/routing/route';
         export default Route.extend({
        actions: {
          playTheme() {
            this.send('playMusic', 'theme.mp3');
          },
          playMusic(track) {
            // ...
          }
        }
      });
      ```
         @method send
      @param {String} actionName The action to trigger
      @param {*} context a context to send with the action
      @public
    */
      send(actionName) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        true &&
          !(!this.isDestroying && !this.isDestroyed) &&
          (0, _debug.assert)(
            `Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`,
            !this.isDestroying && !this.isDestroyed,
          );

        if (this.actions && this.actions[actionName]) {
          var shouldBubble =
            this.actions[actionName].apply(this, args) === true;

          if (!shouldBubble) {
            return;
          }
        }

        var target = (0, _metal.get)(this, 'target');

        if (target) {
          true &&
            !(typeof target.send === 'function') &&
            (0, _debug.assert)(
              `The \`target\` for ${this} (${target}) does not have a \`send\` method`,
              typeof target.send === 'function',
            );
          target.send(...arguments);
        }
      },
    });

    var _default = ActionHandler;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/array', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/utils',
    '@ember/debug',
    '@ember/-internals/runtime/lib/mixins/enumerable',
    '@ember/-internals/runtime/lib/compare',
    '@ember/-internals/environment',
    '@ember/-internals/runtime/lib/mixins/observable',
    '@ember/-internals/runtime/lib/mixins/mutable_enumerable',
    '@ember/-internals/runtime/lib/type-of',
  ], function (
    _exports,
    _metal,
    _utils,
    _debug,
    _enumerable,
    _compare,
    _environment,
    _observable,
    _mutable_enumerable,
    _typeOf,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = _exports.NativeArray = _exports.MutableArray = _exports.A = void 0;
    _exports.isArray = isArray;
    _exports.removeAt = removeAt;
    _exports.uniqBy = uniqBy;

    /**
  @module @ember/array
  */
    var EMPTY_ARRAY = Object.freeze([]);

    var identityFunction = (item) => item;

    function uniqBy(array, keyOrFunc) {
      if (keyOrFunc === void 0) {
        keyOrFunc = identityFunction;
      }

      true &&
        !isArray(array) &&
        (0, _debug.assert)(
          `first argument passed to \`uniqBy\` should be array`,
          isArray(array),
        );
      var ret = A();
      var seen = new Set();
      var getter =
        typeof keyOrFunc === 'function'
          ? keyOrFunc
          : (item) => (0, _metal.get)(item, keyOrFunc);
      array.forEach((item) => {
        var val = getter(item);

        if (!seen.has(val)) {
          seen.add(val);
          ret.push(item);
        }
      });
      return ret;
    }

    function iter() {
      for (
        var _len = arguments.length, args = new Array(_len), _key2 = 0;
        _key2 < _len;
        _key2++
      ) {
        args[_key2] = arguments[_key2];
      }

      var valueProvided = args.length === 2;
      var [key, value] = args;
      return valueProvided
        ? (item) => value === (0, _metal.get)(item, key)
        : (item) => Boolean((0, _metal.get)(item, key));
    }

    function findIndex(array, predicate, startAt) {
      var len = array.length;

      for (var index = startAt; index < len; index++) {
        // SAFETY: Because we're checking the index this value should always be set.
        var item = (0, _metal.objectAt)(array, index);

        if (predicate(item, index, array)) {
          return index;
        }
      }

      return -1;
    }

    function find(array, callback, target) {
      if (target === void 0) {
        target = null;
      }

      var predicate = callback.bind(target);
      var index = findIndex(array, predicate, 0);
      return index === -1 ? undefined : (0, _metal.objectAt)(array, index);
    }

    function any(array, callback, target) {
      if (target === void 0) {
        target = null;
      }

      var predicate = callback.bind(target);
      return findIndex(array, predicate, 0) !== -1;
    }

    function every(array, callback, target) {
      if (target === void 0) {
        target = null;
      }

      var cb = callback.bind(target);

      var predicate = (item, index, array) => !cb(item, index, array);

      return findIndex(array, predicate, 0) === -1;
    }

    function indexOf(array, val, startAt, withNaNCheck) {
      if (startAt === void 0) {
        startAt = 0;
      }

      var len = array.length;

      if (startAt < 0) {
        startAt += len;
      } // SameValueZero comparison (NaN !== NaN)

      var predicate =
        withNaNCheck && val !== val
          ? (item) => item !== item
          : (item) => item === val;
      return findIndex(array, predicate, startAt);
    }

    function removeAt(array, index, len) {
      true &&
        !(index > -1 && index < array.length) &&
        (0, _debug.assert)(
          `\`removeAt\` index provided is out of range`,
          index > -1 && index < array.length,
        );
      (0, _metal.replace)(
        array,
        index,
        len !== null && len !== void 0 ? len : 1,
        EMPTY_ARRAY,
      );
      return array;
    }

    function insertAt(array, index, item) {
      true &&
        !(index > -1 && index <= array.length) &&
        (0, _debug.assert)(
          `\`insertAt\` index provided is out of range`,
          index > -1 && index <= array.length,
        );
      (0, _metal.replace)(array, index, 0, [item]);
      return item;
    }
    /**
    Returns true if the passed object is an array or Array-like.
  
    Objects are considered Array-like if any of the following are true:
  
      - the object is a native Array
      - the object has an objectAt property
      - the object is an Object, and has a length property
  
    Unlike `typeOf` this method returns true even if the passed object is
    not formally an array but appears to be array-like (i.e. implements `Array`)
  
    ```javascript
    import { isArray } from '@ember/array';
    import ArrayProxy from '@ember/array/proxy';
  
    isArray();                                      // false
    isArray([]);                                    // true
    isArray(ArrayProxy.create({ content: [] }));    // true
    ```
  
    @method isArray
    @static
    @for @ember/array
    @param {Object} obj The object to test
    @return {Boolean} true if the passed object is an array or Array-like
    @public
  */

    function isArray(obj) {
      if (
        true &&
        /* DEBUG */
        typeof obj === 'object' &&
        obj !== null
      ) {
        // SAFETY: Property read checks are safe if it's an object
        var possibleProxyContent = obj[_metal.PROXY_CONTENT];

        if (possibleProxyContent !== undefined) {
          obj = possibleProxyContent;
        }
      } // SAFETY: Property read checks are safe if it's an object

      if (!obj || obj.setInterval) {
        return false;
      }

      if (Array.isArray(obj) || EmberArray.detect(obj)) {
        return true;
      }

      var type = (0, _typeOf.typeOf)(obj);

      if ('array' === type) {
        return true;
      } // SAFETY: Property read checks are safe if it's an object

      var length = obj.length;

      if (
        typeof length === 'number' &&
        length === length &&
        'object' === type
      ) {
        return true;
      }

      return false;
    }
    /*
    This allows us to define computed properties that are not enumerable.
    The primary reason this is important is that when `NativeArray` is
    applied to `Array.prototype` we need to ensure that we do not add _any_
    new enumerable properties.
  */

    function nonEnumerableComputed(callback) {
      var property = (0, _metal.computed)(callback);
      property.enumerable = false;
      return property;
    }

    function mapBy(key) {
      return this.map((next) => (0, _metal.get)(next, key));
    }

    var EmberArray = _metal.Mixin.create(_enumerable.default, {
      init() {
        this._super(...arguments);

        (0, _utils.setEmberArray)(this);
      },

      /**
      __Required.__ You must implement this method to apply this mixin.
         Your array must support the `length` property. Your replace methods should
      set this property whenever it changes.
         @property {Number} length
      @public
    */

      /**
      Returns the object at the given `index`. If the given `index` is negative
      or is greater or equal than the array length, returns `undefined`.
         This is one of the primitives you must implement to support `EmberArray`.
      If your object supports retrieving the value of an array item using `get()`
      (i.e. `myArray.get(0)`), then you do not need to implement this method
      yourself.
         ```javascript
      let arr = ['a', 'b', 'c', 'd'];
         arr.objectAt(0);   // 'a'
      arr.objectAt(3);   // 'd'
      arr.objectAt(-1);  // undefined
      arr.objectAt(4);   // undefined
      arr.objectAt(5);   // undefined
      ```
         @method objectAt
      @param {Number} idx The index of the item to return.
      @return {*} item at index or undefined
      @public
    */

      /**
      This returns the objects at the specified indexes, using `objectAt`.
         ```javascript
      let arr = ['a', 'b', 'c', 'd'];
         arr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']
      arr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]
      ```
         @method objectsAt
      @param {Array} indexes An array of indexes of items to return.
      @return {Array}
      @public
     */
      objectsAt(indexes) {
        return indexes.map((idx) => (0, _metal.objectAt)(this, idx));
      },

      /**
      This is the handler for the special array content property. If you get
      this property, it will return this. If you set this property to a new
      array, it will replace the current content.
         ```javascript
      let peopleToMoon = ['Armstrong', 'Aldrin'];
         peopleToMoon.get('[]'); // ['Armstrong', 'Aldrin']
         peopleToMoon.set('[]', ['Collins']); // ['Collins']
      peopleToMoon.get('[]'); // ['Collins']
      ```
         @property []
      @return this
      @public
    */
      '[]': nonEnumerableComputed({
        get() {
          return this;
        },

        set(_key, value) {
          this.replace(0, this.length, value);
          return this;
        },
      }),

      /**
      The first object in the array, or `undefined` if the array is empty.
         ```javascript
      let vowels = ['a', 'e', 'i', 'o', 'u'];
      vowels.firstObject; // 'a'
         vowels.shiftObject();
      vowels.firstObject; // 'e'
         vowels.reverseObjects();
      vowels.firstObject; // 'u'
         vowels.clear();
      vowels.firstObject; // undefined
      ```
         @property firstObject
      @return {Object | undefined} The first object in the array
      @public
    */
      firstObject: nonEnumerableComputed(function () {
        return (0, _metal.objectAt)(this, 0);
      }).readOnly(),

      /**
      The last object in the array, or `undefined` if the array is empty.
         @property lastObject
      @return {Object | undefined} The last object in the array
      @public
    */
      lastObject: nonEnumerableComputed(function () {
        return (0, _metal.objectAt)(this, this.length - 1);
      }).readOnly(),

      // Add any extra methods to EmberArray that are native to the built-in Array.

      /**
      Returns a new array that is a slice of the receiver. This implementation
      uses the observable array methods to retrieve the objects for the new
      slice.
         ```javascript
      let arr = ['red', 'green', 'blue'];
         arr.slice(0);       // ['red', 'green', 'blue']
      arr.slice(0, 2);    // ['red', 'green']
      arr.slice(1, 100);  // ['green', 'blue']
      ```
         @method slice
      @param {Number} beginIndex (Optional) index to begin slicing from.
      @param {Number} endIndex (Optional) index to end the slice at (but not included).
      @return {Array} New array with specified slice
      @public
    */
      slice(beginIndex, endIndex) {
        if (beginIndex === void 0) {
          beginIndex = 0;
        }

        var ret = A();
        var length = this.length;

        if (beginIndex < 0) {
          beginIndex = length + beginIndex;
        }

        var validatedEndIndex;

        if (endIndex === undefined || endIndex > length) {
          validatedEndIndex = length;
        } else if (endIndex < 0) {
          validatedEndIndex = length + endIndex;
        } else {
          validatedEndIndex = endIndex;
        }

        while (beginIndex < validatedEndIndex) {
          ret[ret.length] = (0, _metal.objectAt)(this, beginIndex++);
        }

        return ret;
      },

      /**
      Used to determine the passed object's first occurrence in the array.
      Returns the index if found, -1 if no match is found.
         The optional `startAt` argument can be used to pass a starting
      index to search from, effectively slicing the searchable portion
      of the array. If it's negative it will add the array length to
      the startAt value passed in as the index to search from. If less
      than or equal to `-1 * array.length` the entire array is searched.
         ```javascript
      let arr = ['a', 'b', 'c', 'd', 'a'];
         arr.indexOf('a');       //  0
      arr.indexOf('z');       // -1
      arr.indexOf('a', 2);    //  4
      arr.indexOf('a', -1);   //  4, equivalent to indexOf('a', 4)
      arr.indexOf('a', -100); //  0, searches entire array
      arr.indexOf('b', 3);    // -1
      arr.indexOf('a', 100);  // -1
         let people = [{ name: 'Zoey' }, { name: 'Bob' }]
      let newPerson = { name: 'Tom' };
      people = [newPerson, ...people, newPerson];
         people.indexOf(newPerson);     //  0
      people.indexOf(newPerson, 1);  //  3
      people.indexOf(newPerson, -4); //  0
      people.indexOf(newPerson, 10); // -1
      ```
         @method indexOf
      @param {Object} object the item to search for
      @param {Number} startAt optional starting location to search, default 0
      @return {Number} index or -1 if not found
      @public
    */
      indexOf(object, startAt) {
        return indexOf(this, object, startAt, false);
      },

      /**
      Returns the index of the given `object`'s last occurrence.
         - If no `startAt` argument is given, the search starts from
      the last position.
      - If it's greater than or equal to the length of the array,
      the search starts from the last position.
      - If it's negative, it is taken as the offset from the end
      of the array i.e. `startAt + array.length`.
      - If it's any other positive number, will search backwards
      from that index of the array.
         Returns -1 if no match is found.
         ```javascript
      let arr = ['a', 'b', 'c', 'd', 'a'];
         arr.lastIndexOf('a');       //  4
      arr.lastIndexOf('z');       // -1
      arr.lastIndexOf('a', 2);    //  0
      arr.lastIndexOf('a', -1);   //  4
      arr.lastIndexOf('a', -3);   //  0
      arr.lastIndexOf('b', 3);    //  1
      arr.lastIndexOf('a', 100);  //  4
      ```
         @method lastIndexOf
      @param {Object} object the item to search for
      @param {Number} startAt optional starting location to search from
      backwards, defaults to `(array.length - 1)`
      @return {Number} The last index of the `object` in the array or -1
      if not found
      @public
    */
      lastIndexOf(object, startAt) {
        var len = this.length;

        if (startAt === undefined || startAt >= len) {
          startAt = len - 1;
        }

        if (startAt < 0) {
          startAt += len;
        }

        for (var idx = startAt; idx >= 0; idx--) {
          if ((0, _metal.objectAt)(this, idx) === object) {
            return idx;
          }
        }

        return -1;
      },

      /**
      Iterates through the array, calling the passed function on each
      item. This method corresponds to the `forEach()` method defined in
      JavaScript 1.6.
         The callback method you provide should have the following signature (all
      parameters are optional):
         ```javascript
      function(item, index, array);
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
         Example Usage:
         ```javascript
      let foods = [
        { name: 'apple', eaten: false },
        { name: 'banana', eaten: false },
        { name: 'carrot', eaten: false }
      ];
         foods.forEach((food) => food.eaten = true);
         let output = '';
      foods.forEach((item, index, array) =>
        output += `${index + 1}/${array.length} ${item.name}\n`;
      );
      console.log(output);
      // 1/3 apple
      // 2/3 banana
      // 3/3 carrot
      ```
         @method forEach
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Object} receiver
      @public
    */
      forEach(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`forEach` expects a function as first argument.',
            typeof callback === 'function',
          );
        var length = this.length;

        for (var index = 0; index < length; index++) {
          var item = this.objectAt(index);
          callback.call(target, item, index, this);
        }

        return this;
      },

      /**
      Alias for `mapBy`.
         Returns the value of the named
      property on all items in the enumeration.
         ```javascript
      let people = [{name: 'Joe'}, {name: 'Matt'}];
         people.getEach('name');
      // ['Joe', 'Matt'];
         people.getEach('nonexistentProperty');
      // [undefined, undefined];
      ```
         @method getEach
      @param {String} key name of the property
      @return {Array} The mapped array.
      @public
    */
      getEach: mapBy,

      /**
      Sets the value on the named property for each member. This is more
      ergonomic than using other methods defined on this helper. If the object
      implements Observable, the value will be changed to `set(),` otherwise
      it will be set directly. `null` objects are skipped.
         ```javascript
      let people = [{name: 'Joe'}, {name: 'Matt'}];
         people.setEach('zipCode', '10011');
      // [{name: 'Joe', zipCode: '10011'}, {name: 'Matt', zipCode: '10011'}];
      ```
         @method setEach
      @param {String} key The key to set
      @param {Object} value The object to set
      @return {Object} receiver
      @public
    */
      setEach(key, value) {
        return this.forEach((item) => (0, _metal.set)(item, key, value));
      },

      /**
      Maps all of the items in the enumeration to another value, returning
      a new array. This method corresponds to `map()` defined in JavaScript 1.6.
         The callback method you provide should have the following signature (all
      parameters are optional):
         ```javascript
      function(item, index, array);
      let arr = [1, 2, 3, 4, 5, 6];
         arr.map(element => element * element);
      // [1, 4, 9, 16, 25, 36];
         arr.map((element, index) => element + index);
      // [1, 3, 5, 7, 9, 11];
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         It should return the mapped value.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
         @method map
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} The mapped array.
      @public
    */
      map(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`map` expects a function as first argument.',
            typeof callback === 'function',
          );
        var ret = A();
        this.forEach(
          (x, idx, i) => (ret[idx] = callback.call(target, x, idx, i)),
        );
        return ret;
      },

      /**
      Similar to map, this specialized function returns the value of the named
      property on all items in the enumeration.
         ```javascript
      let people = [{name: 'Joe'}, {name: 'Matt'}];
         people.mapBy('name');
      // ['Joe', 'Matt'];
         people.mapBy('unknownProperty');
      // [undefined, undefined];
      ```
         @method mapBy
      @param {String} key name of the property
      @return {Array} The mapped array.
      @public
    */
      mapBy,

      /**
      Returns a new array with all of the items in the enumeration that the provided
      callback function returns true for. This method corresponds to [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
         The callback method should have the following signature:
         ```javascript
      function(item, index, array);
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         All parameters are optional. The function should return `true` to include the item
      in the results, and `false` otherwise.
         Example:
         ```javascript
      function isAdult(person) {
        return person.age > 18;
      };
         let people = Ember.A([{ name: 'John', age: 14 }, { name: 'Joan', age: 45 }]);
         people.filter(isAdult); // returns [{ name: 'Joan', age: 45 }];
      ```
         Note that in addition to a callback, you can pass an optional target object
      that will be set as `this` on the context. This is a good way to give your
      iterator function access to the current object. For example:
         ```javascript
      function isAdultAndEngineer(person) {
        return person.age > 18 && this.engineering;
      }
         class AdultsCollection {
        engineering = false;
           constructor(opts = {}) {
          super(...arguments);
             this.engineering = opts.engineering;
          this.people = Ember.A([{ name: 'John', age: 14 }, { name: 'Joan', age: 45 }]);
        }
      }
         let collection = new AdultsCollection({ engineering: true });
      collection.people.filter(isAdultAndEngineer, { target: collection });
      ```
         @method filter
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} A filtered array.
      @public
    */
      filter(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`filter` expects a function as first argument.',
            typeof callback === 'function',
          );
        var ret = A();
        this.forEach((x, idx, i) => {
          if (callback.call(target, x, idx, i)) {
            ret.push(x);
          }
        });
        return ret;
      },

      /**
      Returns an array with all of the items in the enumeration where the passed
      function returns false. This method is the inverse of filter().
         The callback method you provide should have the following signature (all
      parameters are optional):
         ```javascript
      function(item, index, array);
      ```
         - *item* is the current item in the iteration.
      - *index* is the current index in the iteration
      - *array* is the array itself.
         It should return a falsey value to include the item in the results.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as "this" on the context. This is a good way
      to give your iterator function access to the current object.
         Example Usage:
         ```javascript
      const food = [
        { food: 'apple', isFruit: true },
        { food: 'bread', isFruit: false },
        { food: 'banana', isFruit: true }
      ];
      const nonFruits = food.reject(function(thing) {
        return thing.isFruit;
      }); // [{food: 'bread', isFruit: false}]
      ```
         @method reject
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Array} A rejected array.
      @public
    */
      reject(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`reject` expects a function as first argument.',
            typeof callback === 'function',
          );
        return this.filter(function () {
          // @ts-expect-error TS doesn't like us using arguments like this
          return !callback.apply(target, arguments);
        });
      },

      /**
      Filters the array by the property and an optional value. If a value is given, it returns
      the items that have said value for the property. If not, it returns all the items that
      have a truthy value for the property.
         Example Usage:
         ```javascript
      let things = Ember.A([{ food: 'apple', isFruit: true }, { food: 'beans', isFruit: false }]);
         things.filterBy('food', 'beans'); // [{ food: 'beans', isFruit: false }]
      things.filterBy('isFruit'); // [{ food: 'apple', isFruit: true }]
      ```
         @method filterBy
      @param {String} key the property to test
      @param {*} [value] optional value to test against.
      @return {Array} filtered array
      @public
    */
      filterBy() {
        // @ts-expect-error TS doesn't like the ...arguments spread here.
        return this.filter(iter(...arguments));
      },

      /**
      Returns an array with the items that do not have truthy values for the provided key.
      You can pass an optional second argument with a target value to reject for the key.
      Otherwise this will reject objects where the provided property evaluates to false.
         Example Usage:
         ```javascript
        let food = [
          { name: "apple", isFruit: true },
          { name: "carrot", isFruit: false },
          { name: "bread", isFruit: false },
        ];
        food.rejectBy('isFruit'); // [{ name: "carrot", isFruit: false }, { name: "bread", isFruit: false }]
        food.rejectBy('name', 'carrot'); // [{ name: "apple", isFruit: true }}, { name: "bread", isFruit: false }]
      ```
         @method rejectBy
      @param {String} key the property to test
      @param {*} [value] optional value to test against.
      @return {Array} rejected array
      @public
    */
      rejectBy() {
        // @ts-expect-error TS doesn't like the ...arguments spread here.
        return this.reject(iter(...arguments));
      },

      /**
      Returns the first item in the array for which the callback returns true.
      This method is similar to the `find()` method defined in ECMAScript 2015.
         The callback method you provide should have the following signature (all
      parameters are optional):
         ```javascript
      function(item, index, array);
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         It should return the `true` to include the item in the results, `false`
      otherwise.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
         Example Usage:
         ```javascript
      let users = [
        { id: 1, name: 'Yehuda' },
        { id: 2, name: 'Tom' },
        { id: 3, name: 'Melanie' },
        { id: 4, name: 'Leah' }
      ];
         users.find((user) => user.name == 'Tom'); // [{ id: 2, name: 'Tom' }]
      users.find(({ id }) => id == 3); // [{ id: 3, name: 'Melanie' }]
      ```
         @method find
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Object} Found item or `undefined`.
      @public
    */
      find(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`find` expects a function as first argument.',
            typeof callback === 'function',
          );
        return find(this, callback, target);
      },

      /**
      Returns the first item with a property matching the passed value. You
      can pass an optional second argument with the target value. Otherwise
      this will match any property that evaluates to `true`.
         This method works much like the more generic `find()` method.
         Usage Example:
         ```javascript
      let users = [
        { id: 1, name: 'Yehuda', isTom: false },
        { id: 2, name: 'Tom', isTom: true },
        { id: 3, name: 'Melanie', isTom: false },
        { id: 4, name: 'Leah', isTom: false }
      ];
         users.findBy('id', 4); // { id: 4, name: 'Leah', isTom: false }
      users.findBy('name', 'Melanie'); // { id: 3, name: 'Melanie', isTom: false }
      users.findBy('isTom'); // { id: 2, name: 'Tom', isTom: true }
      ```
         @method findBy
      @param {String} key the property to test
      @param {String} [value] optional value to test against.
      @return {Object} found item or `undefined`
      @public
    */
      findBy() {
        // @ts-expect-error TS doesn't like the ...arguments spread here.
        var callback = iter(...arguments);
        return find(this, callback);
      },

      /**
      Returns `true` if the passed function returns true for every item in the
      enumeration. This corresponds with the `Array.prototype.every()` method defined in ES5.
         The callback method should have the following signature:
         ```javascript
      function(item, index, array);
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         All params are optional. The method should return `true` or `false`.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. This is a good way
      to give your iterator function access to the current object.
         Usage example:
         ```javascript
      function isAdult(person) {
        return person.age > 18;
      };
         const people = Ember.A([{ name: 'John', age: 24 }, { name: 'Joan', age: 45 }]);
      const areAllAdults = people.every(isAdult);
      ```
         @method every
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Boolean}
      @public
    */
      every(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`every` expects a function as first argument.',
            typeof callback === 'function',
          );
        return every(this, callback, target);
      },

      /**
      Returns `true` if the passed property resolves to the value of the second
      argument for all items in the array. This method is often simpler/faster
      than using a callback.
         Note that like the native `Array.every`, `isEvery` will return true when called
      on any empty array.
      ```javascript
      class Language {
        constructor(name, isProgrammingLanguage) {
          this.name = name;
          this.programmingLanguage = isProgrammingLanguage;
        }
      }
         const compiledLanguages = [
        new Language('Java', true),
        new Language('Go', true),
        new Language('Rust', true)
      ]
         const languagesKnownByMe = [
        new Language('Javascript', true),
        new Language('English', false),
        new Language('Ruby', true)
      ]
         compiledLanguages.isEvery('programmingLanguage'); // true
      languagesKnownByMe.isEvery('programmingLanguage'); // false
      ```
         @method isEvery
      @param {String} key the property to test
      @param {String} [value] optional value to test against. Defaults to `true`
      @return {Boolean}
      @since 1.3.0
      @public
    */
      isEvery() {
        // @ts-expect-error TS doesn't like the ...arguments spread here.
        var callback = iter(...arguments);
        return every(this, callback);
      },

      /**
      The any() method executes the callback function once for each element
      present in the array until it finds the one where callback returns a truthy
      value (i.e. `true`). If such an element is found, any() immediately returns
      true. Otherwise, any() returns false.
         ```javascript
      function(item, index, array);
      ```
         - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array object itself.
         Note that in addition to a callback, you can also pass an optional target
      object that will be set as `this` on the context. It can be a good way
      to give your iterator function access to an object in cases where an ES6
      arrow function would not be appropriate.
         Usage Example:
         ```javascript
      let includesManager = people.any(this.findPersonInManagersList, this);
         let includesStockHolder = people.any(person => {
        return this.findPersonInStockHoldersList(person)
      });
         if (includesManager || includesStockHolder) {
        Paychecks.addBiggerBonus();
      }
      ```
         @method any
      @param {Function} callback The callback to execute
      @param {Object} [target] The target object to use
      @return {Boolean} `true` if the passed function returns `true` for any item
      @public
    */
      any(callback, target) {
        if (target === void 0) {
          target = null;
        }

        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`any` expects a function as first argument.',
            typeof callback === 'function',
          );
        return any(this, callback, target);
      },

      /**
      Returns `true` if the passed property resolves to the value of the second
      argument for any item in the array. This method is often simpler/faster
      than using a callback.
         Example usage:
         ```javascript
      const food = [
        { food: 'apple', isFruit: true },
        { food: 'bread', isFruit: false },
        { food: 'banana', isFruit: true }
      ];
         food.isAny('isFruit'); // true
      ```
         @method isAny
      @param {String} key the property to test
      @param {String} [value] optional value to test against. Defaults to `true`
      @return {Boolean}
      @since 1.3.0
      @public
    */
      isAny() {
        // @ts-expect-error TS doesn't like us using arguments like this
        var callback = iter(...arguments);
        return any(this, callback);
      },

      /**
      This will combine the values of the array into a single value. It
      is a useful way to collect a summary value from an array. This
      corresponds to the `reduce()` method defined in JavaScript 1.8.
         The callback method you provide should have the following signature (all
      parameters are optional):
         ```javascript
      function(previousValue, item, index, array);
      ```
         - `previousValue` is the value returned by the last call to the iterator.
      - `item` is the current item in the iteration.
      - `index` is the current index in the iteration.
      - `array` is the array itself.
         Return the new cumulative value.
         In addition to the callback you can also pass an `initialValue`. An error
      will be raised if you do not pass an initial value and the enumerator is
      empty.
         Note that unlike the other methods, this method does not allow you to
      pass a target object to set as this for the callback. It's part of the
      spec. Sorry.
         Example Usage:
         ```javascript
        let numbers = [1, 2, 3, 4, 5];
           numbers.reduce(function(summation, current) {
          return summation + current;
        }); // 15 (1 + 2 + 3 + 4 + 5)
           numbers.reduce(function(summation, current) {
          return summation + current;
        }, -15); // 0 (-15 + 1 + 2 + 3 + 4 + 5)
     
        let binaryValues = [true, false, false];
           binaryValues.reduce(function(truthValue, current) {
          return truthValue && current;
        }); // false (true && false && false)
      ```
         @method reduce
      @param {Function} callback The callback to execute
      @param {Object} initialValue Initial value for the reduce
      @return {Object} The reduced value.
      @public
    */
      // FIXME: When called without initialValue, behavior does not match native behavior
      reduce(callback, initialValue) {
        true &&
          !(typeof callback === 'function') &&
          (0, _debug.assert)(
            '`reduce` expects a function as first argument.',
            typeof callback === 'function',
          );
        var ret = initialValue;
        this.forEach(function (item, i) {
          ret = callback(ret, item, i, this);
        }, this);
        return ret;
      },

      /**
      Invokes the named method on every object in the receiver that
      implements it. This method corresponds to the implementation in
      Prototype 1.6.
         ```javascript
      class Person {
        name = null;
           constructor(name) {
          this.name = name;
        }
           greet(prefix='Hello') {
          return `${prefix} ${this.name}`;
        }
      }
         let people = [new Person('Joe'), new Person('Matt')];
         people.invoke('greet'); // ['Hello Joe', 'Hello Matt']
      people.invoke('greet', 'Bonjour'); // ['Bonjour Joe', 'Bonjour Matt']
      ```
         @method invoke
      @param {String} methodName the name of the method
      @param {Object...} args optional arguments to pass as well.
      @return {Array} return values from calling invoke.
      @public
    */
      invoke(methodName) {
        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key3 = 1;
          _key3 < _len2;
          _key3++
        ) {
          args[_key3 - 1] = arguments[_key3];
        }

        var ret = A(); // SAFETY: This is not entirely safe and the code will not work with Ember proxies

        this.forEach((item) => {
          var _a, _b;

          return ret.push(
            (_b = (_a = item)[methodName]) === null || _b === void 0
              ? void 0
              : _b.call(_a, ...args),
          );
        });
        return ret;
      },

      /**
      Simply converts the object into a genuine array. The order is not
      guaranteed. Corresponds to the method implemented by Prototype.
         @method toArray
      @return {Array} the object as an array.
      @public
    */
      toArray() {
        return this.map((item) => item);
      },

      /**
      Returns a copy of the array with all `null` and `undefined` elements removed.
         ```javascript
      let arr = ['a', null, 'c', undefined];
      arr.compact();  // ['a', 'c']
      ```
         @method compact
      @return {Array} the array without null and undefined elements.
      @public
    */
      compact() {
        return this.filter((value) => value != null);
      },

      /**
      Used to determine if the array contains the passed object.
      Returns `true` if found, `false` otherwise.
         The optional `startAt` argument can be used to pass a starting
      index to search from, effectively slicing the searchable portion
      of the array. If it's negative it will add the array length to
      the startAt value passed in as the index to search from. If less
      than or equal to `-1 * array.length` the entire array is searched.
         This method has the same behavior of JavaScript's [Array.includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).
         ```javascript
      [1, 2, 3].includes(2);     // true
      [1, 2, 3].includes(4);     // false
      [1, 2, 3].includes(3, 2);  // true
      [1, 2, 3].includes(3, 3);  // false
      [1, 2, 3].includes(3, -1); // true
      [1, 2, 3].includes(1, -1); // false
      [1, 2, 3].includes(1, -4); // true
      [1, 2, NaN].includes(NaN); // true
      ```
         @method includes
      @param {Object} object The object to search for.
      @param {Number} startAt optional starting location to search, default 0
      @return {Boolean} `true` if object is found in the array.
      @public
    */
      includes(object, startAt) {
        return indexOf(this, object, startAt, true) !== -1;
      },

      /**
      Sorts the array by the keys specified in the argument.
         You may provide multiple arguments to sort by multiple properties.
         ```javascript
     let colors = [
       { name: 'red', weight: 500 },
       { name: 'green', weight: 600 },
       { name: 'blue', weight: 500 }
      ];
        colors.sortBy('name');
     // [{name: 'blue', weight: 500}, {name: 'green', weight: 600}, {name: 'red', weight: 500}]
        colors.sortBy('weight', 'name');
     // [{name: 'blue', weight: 500}, {name: 'red', weight: 500}, {name: 'green', weight: 600}]
     ```
         @method sortBy
      @param {String} property name(s) to sort on
      @return {Array} The sorted array.
      @since 1.2.0
      @public
    */
      sortBy() {
        var sortKeys = arguments;
        return this.toArray().sort((a, b) => {
          for (var i = 0; i < sortKeys.length; i++) {
            var key = sortKeys[i];
            var propA = (0, _metal.get)(a, key);
            var propB = (0, _metal.get)(b, key); // return 1 or -1 else continue to the next sortKey

            var compareValue = (0, _compare.default)(propA, propB);

            if (compareValue) {
              return compareValue;
            }
          }

          return 0;
        });
      },

      /**
      Returns a new array that contains only unique values. The default
      implementation returns an array regardless of the receiver type.
         ```javascript
      let arr = ['a', 'a', 'b', 'b'];
      arr.uniq();  // ['a', 'b']
      ```
         This only works on primitive data types, e.g. Strings, Numbers, etc.
         @method uniq
      @return {EmberArray}
      @public
    */
      uniq() {
        return uniqBy(this);
      },

      /**
      Returns a new array that contains only items containing a unique property value.
      The default implementation returns an array regardless of the receiver type.
         ```javascript
      let arr = [{ value: 'a' }, { value: 'a' }, { value: 'b' }, { value: 'b' }];
      arr.uniqBy('value');  // [{ value: 'a' }, { value: 'b' }]
         let arr = [2.2, 2.1, 3.2, 3.3];
      arr.uniqBy(Math.floor);  // [2.2, 3.2];
      ```
         @method uniqBy
      @param {String,Function} key
      @return {EmberArray}
      @public
    */
      uniqBy(key) {
        return uniqBy(this, key);
      },

      /**
      Returns a new array that excludes the passed value. The default
      implementation returns an array regardless of the receiver type.
      If the receiver does not contain the value it returns the original array.
         ```javascript
      let arr = ['a', 'b', 'a', 'c'];
      arr.without('a');  // ['b', 'c']
      ```
         @method without
      @param {Object} value
      @return {EmberArray}
      @public
    */
      without(value) {
        if (!this.includes(value)) {
          return this; // nothing to do
        } // SameValueZero comparison (NaN !== NaN)

        var predicate =
          value === value ? (item) => item !== value : (item) => item === item;
        return this.filter(predicate);
      },
    });

    var MutableArray = _metal.Mixin.create(
      EmberArray,
      _mutable_enumerable.default,
      {
        /**
      __Required.__ You must implement this method to apply this mixin.
         This is one of the primitives you must implement to support `Array`.
      You should replace amt objects started at idx with the objects in the
      passed array.
         Note that this method is expected to validate the type(s) of objects that it expects.
         @method replace
      @param {Number} idx Starting index in the array to replace. If
        idx >= length, then append to the end of the array.
      @param {Number} amt Number of elements that should be removed from
        the array, starting at *idx*.
      @param {EmberArray} [objects] An optional array of zero or more objects that should be
        inserted into the array at *idx*
      @public
    */

        /**
      Remove all elements from the array. This is useful if you
      want to reuse an existing array without having to recreate it.
         ```javascript
      let colors = ['red', 'green', 'blue'];
         colors.length;  // 3
      colors.clear(); // []
      colors.length;  // 0
      ```
         @method clear
      @return {Array} An empty Array.
      @public
    */
        clear() {
          var len = this.length;

          if (len === 0) {
            return this;
          }

          this.replace(0, len, EMPTY_ARRAY);
          return this;
        },

        /**
      This will use the primitive `replace()` method to insert an object at the
      specified index.
         ```javascript
      let colors = ['red', 'green', 'blue'];
         colors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']
      colors.insertAt(5, 'orange');  // Error: Index out of range
      ```
         @method insertAt
      @param {Number} idx index of insert the object at.
      @param {Object} object object to insert
      @return {EmberArray} receiver
      @public
    */
        insertAt(idx, object) {
          insertAt(this, idx, object);
          return this;
        },

        /**
      Remove an object at the specified index using the `replace()` primitive
      method. You can pass either a single index, or a start and a length.
         If you pass a start and length that is beyond the
      length this method will throw an assertion.
         ```javascript
      let colors = ['red', 'green', 'blue', 'yellow', 'orange'];
         colors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']
      colors.removeAt(2, 2);  // ['green', 'blue']
      colors.removeAt(4, 2);  // Error: Index out of range
      ```
         @method removeAt
      @param {Number} start index, start of range
      @param {Number} len length of passing range
      @return {EmberArray} receiver
      @public
    */
        removeAt(start, len) {
          return removeAt(this, start, len);
        },

        /**
      Push the object onto the end of the array. Works just like `push()` but it
      is KVO-compliant.
         ```javascript
      let colors = ['red', 'green'];
         colors.pushObject('black');     // ['red', 'green', 'black']
      colors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]
      ```
         @method pushObject
      @param {*} obj object to push
      @return object same object passed as a param
      @public
    */
        pushObject(obj) {
          return insertAt(this, this.length, obj);
        },

        /**
      Add the objects in the passed array to the end of the array. Defers
      notifying observers of the change until all objects are added.
         ```javascript
      let colors = ['red'];
         colors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']
      ```
         @method pushObjects
      @param {Array} objects the objects to add
      @return {MutableArray} receiver
      @public
    */
        pushObjects(objects) {
          this.replace(this.length, 0, objects);
          return this;
        },

        /**
      Pop object from array or nil if none are left. Works just like `pop()` but
      it is KVO-compliant.
         ```javascript
      let colors = ['red', 'green', 'blue'];
         colors.popObject();   // 'blue'
      console.log(colors);  // ['red', 'green']
      ```
         @method popObject
      @return object
      @public
    */
        popObject() {
          var len = this.length;

          if (len === 0) {
            return null;
          }

          var ret = (0, _metal.objectAt)(this, len - 1);
          this.removeAt(len - 1, 1);
          return ret;
        },

        /**
      Shift an object from start of array or nil if none are left. Works just
      like `shift()` but it is KVO-compliant.
         ```javascript
      let colors = ['red', 'green', 'blue'];
         colors.shiftObject();  // 'red'
      console.log(colors);   // ['green', 'blue']
      ```
         @method shiftObject
      @return object
      @public
    */
        shiftObject() {
          if (this.length === 0) {
            return null;
          }

          var ret = (0, _metal.objectAt)(this, 0);
          this.removeAt(0);
          return ret;
        },

        /**
      Unshift an object to start of array. Works just like `unshift()` but it is
      KVO-compliant.
         ```javascript
      let colors = ['red'];
         colors.unshiftObject('yellow');    // ['yellow', 'red']
      colors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']
      ```
         @method unshiftObject
      @param {*} obj object to unshift
      @return object same object passed as a param
      @public
    */
        unshiftObject(obj) {
          return insertAt(this, 0, obj);
        },

        /**
      Adds the named objects to the beginning of the array. Defers notifying
      observers until all objects have been added.
         ```javascript
      let colors = ['red'];
         colors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']
      colors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function
      ```
         @method unshiftObjects
      @param {Enumerable} objects the objects to add
      @return {EmberArray} receiver
      @public
    */
        unshiftObjects(objects) {
          this.replace(0, 0, objects);
          return this;
        },

        /**
      Reverse objects in the array. Works just like `reverse()` but it is
      KVO-compliant.
         @method reverseObjects
      @return {EmberArray} receiver
       @public
    */
        reverseObjects() {
          var len = this.length;

          if (len === 0) {
            return this;
          }

          var objects = this.toArray().reverse();
          this.replace(0, len, objects);
          return this;
        },

        /**
      Replace all the receiver's content with content of the argument.
      If argument is an empty array receiver will be cleared.
         ```javascript
      let colors = ['red', 'green', 'blue'];
         colors.setObjects(['black', 'white']);  // ['black', 'white']
      colors.setObjects([]);                  // []
      ```
         @method setObjects
      @param {EmberArray} objects array whose content will be used for replacing
          the content of the receiver
      @return {EmberArray} receiver with the new content
      @public
    */
        setObjects(objects) {
          if (objects.length === 0) {
            return this.clear();
          }

          var len = this.length;
          this.replace(0, len, objects);
          return this;
        },

        /**
      Remove all occurrences of an object in the array.
         ```javascript
      let cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];
         cities.removeObject('Chicago');  // ['Berlin', 'Lima']
      cities.removeObject('Lima');     // ['Berlin']
      cities.removeObject('Tokyo')     // ['Berlin']
      ```
         @method removeObject
      @param {*} obj object to remove
      @return {EmberArray} receiver
      @public
    */
        removeObject(obj) {
          var loc = this.length || 0;

          while (--loc >= 0) {
            var curObject = (0, _metal.objectAt)(this, loc);

            if (curObject === obj) {
              this.removeAt(loc);
            }
          }

          return this;
        },

        /**
      Removes each object in the passed array from the receiver.
         @method removeObjects
      @param {EmberArray} objects the objects to remove
      @return {EmberArray} receiver
      @public
    */
        removeObjects(objects) {
          (0, _metal.beginPropertyChanges)();

          for (var i = objects.length - 1; i >= 0; i--) {
            // SAFETY: Due to the loop structure we know this will always exist.
            this.removeObject(objects[i]);
          }

          (0, _metal.endPropertyChanges)();
          return this;
        },

        /**
      Push the object onto the end of the array if it is not already
      present in the array.
         ```javascript
      let cities = ['Chicago', 'Berlin'];
         cities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']
      cities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']
      ```
         @method addObject
      @param {*} obj object to add, if not already present
      @return {EmberArray} receiver
      @public
    */
        addObject(obj) {
          var included = this.includes(obj);

          if (!included) {
            this.pushObject(obj);
          }

          return this;
        },

        /**
      Adds each object in the passed array to the receiver.
         @method addObjects
      @param {EmberArray} objects the objects to add.
      @return {EmberArray} receiver
      @public
    */
        addObjects(objects) {
          (0, _metal.beginPropertyChanges)();
          objects.forEach((obj) => this.addObject(obj));
          (0, _metal.endPropertyChanges)();
          return this;
        },
      },
    );

    _exports.MutableArray = MutableArray;

    var NativeArray = _metal.Mixin.create(MutableArray, _observable.default, {
      objectAt(idx) {
        return this[idx];
      },

      // primitive for array support.
      replace(start, deleteCount, items) {
        if (items === void 0) {
          items = EMPTY_ARRAY;
        }

        true &&
          !Array.isArray(items) &&
          (0, _debug.assert)(
            'The third argument to replace needs to be an array.',
            Array.isArray(items),
          );
        (0, _metal.replaceInNativeArray)(this, start, deleteCount, items);
        return this;
      },
    }); // Remove any methods implemented natively so we don't override them

    _exports.NativeArray = NativeArray;
    var ignore = ['length'];
    NativeArray.keys().forEach((methodName) => {
      // SAFETY: It's safe to read unknown properties from an object
      if (Array.prototype[methodName]) {
        ignore.push(methodName);
      }
    });
    _exports.NativeArray = NativeArray = NativeArray.without(...ignore);
    var A;
    _exports.A = A;

    if (_environment.ENV.EXTEND_PROTOTYPES.Array) {
      NativeArray.apply(Array.prototype, true);

      _exports.A = A = function (arr) {
        true &&
          !!(this instanceof A) &&
          (0, _debug.assert)(
            'You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`',
            !(this instanceof A),
          ); // SAFTEY: Since we are extending prototypes all true native arrays are Ember NativeArrays

        return arr || [];
      };
    } else {
      _exports.A = A = function (arr) {
        true &&
          !!(this instanceof A) &&
          (0, _debug.assert)(
            'You cannot create an Ember Array with `new A()`, please update to calling A as a function: `A()`',
            !(this instanceof A),
          );

        if ((0, _utils.isEmberArray)(arr)) {
          // SAFETY: If it's a true native array and it is also an EmberArray then it should be an Ember NativeArray
          return arr;
        } else {
          // SAFETY: This will return an NativeArray but TS can't infer that.
          return NativeArray.apply(arr !== null && arr !== void 0 ? arr : []);
        }
      };
    }

    var _default = EmberArray;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/comparable', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var Comparable = _metal.Mixin.create({
      /**
      __Required.__ You must implement this method to apply this mixin.
         Override to return the result of the comparison of the two parameters. The
      compare method should return:
         - `-1` if `a < b`
      - `0` if `a == b`
      - `1` if `a > b`
         Default implementation raises an exception.
         @method compare
      @param a {Object} the first object to compare
      @param b {Object} the second object to compare
      @return {Number} the result of the comparison
      @private
    */
      compare: null,
    });

    var _default = Comparable;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/container_proxy', [
    'exports',
    '@ember/runloop',
    '@ember/-internals/metal',
  ], function (_exports, _runloop, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var ContainerProxyMixin = _metal.Mixin.create({
      /**
     The container stores state.
        @private
     @property {Ember.Container} __container__
     */
      __container__: null,

      /**
     Returns an object that can be used to provide an owner to a
     manually created instance.
        Example:
        ```
     import { getOwner } from '@ember/application';
        let owner = getOwner(this);
        User.create(
       owner.ownerInjection(),
       { username: 'rwjblue' }
     )
     ```
        @public
     @method ownerInjection
     @since 2.3.0
     @return {Object}
    */
      ownerInjection() {
        return this.__container__.ownerInjection();
      },

      /**
     Given a fullName return a corresponding instance.
        The default behavior is for lookup to return a singleton instance.
     The singleton is scoped to the container, allowing multiple containers
     to all have their own locally scoped singletons.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        registry.register('api:twitter', Twitter);
        let twitter = container.lookup('api:twitter');
        twitter instanceof Twitter; // => true
        // by default the container will return singletons
     let twitter2 = container.lookup('api:twitter');
     twitter2 instanceof Twitter; // => true
        twitter === twitter2; //=> true
     ```
        If singletons are not wanted an optional flag can be provided at lookup.
        ```javascript
     let registry = new Registry();
     let container = registry.container();
        registry.register('api:twitter', Twitter);
        let twitter = container.lookup('api:twitter', { singleton: false });
     let twitter2 = container.lookup('api:twitter', { singleton: false });
        twitter === twitter2; //=> false
     ```
        @public
     @method lookup
     @param {String} fullName
     @param {Object} options
     @return {any}
     */
      lookup(fullName, options) {
        return this.__container__.lookup(fullName, options);
      },

      destroy() {
        var container = this.__container__;

        if (container) {
          (0, _runloop.join)(() => {
            container.destroy();
            (0, _runloop.schedule)('destroy', container, 'finalizeDestroy');
          });
        }

        this._super();
      },

      /**
    Given a fullName return a factory manager.
       This method returns a manager which can be used for introspection of the
    factory's class or for the creation of factory instances with initial
    properties. The manager is an object with the following properties:
       * `class` - The registered or resolved class.
    * `create` - A function that will create an instance of the class with
      any dependencies injected.
       For example:
       ```javascript
    import { getOwner } from '@ember/application';
       let owner = getOwner(otherInstance);
    // the owner is commonly the `applicationInstance`, and can be accessed via
    // an instance initializer.
       let factory = owner.factoryFor('service:bespoke');
       factory.class;
    // The registered or resolved class. For example when used with an Ember-CLI
    // app, this would be the default export from `app/services/bespoke.js`.
       let instance = factory.create({
      someProperty: 'an initial property value'
    });
    // Create an instance with any injections and the passed options as
    // initial properties.
    ```
       Any instances created via the factory's `.create()` method *must* be destroyed
    manually by the caller of `.create()`. Typically, this is done during the creating
    objects own `destroy` or `willDestroy` methods.
       @public
    @method factoryFor
    @param {String} fullName
    @param {Object} options
    @return {FactoryManager}
    */
      factoryFor(fullName) {
        return this.__container__.factoryFor(fullName);
      },
    });

    var _default = ContainerProxyMixin;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/enumerable', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var Enumerable = _metal.Mixin.create();

    var _default = Enumerable;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/evented', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var Evented = _metal.Mixin.create({
      /**
      Subscribes to a named event with given function.
         ```javascript
      person.on('didLoad', function() {
        // fired once the person has loaded
      });
      ```
         An optional target can be passed in as the 2nd argument that will
      be set as the "this" for the callback. This is a good way to give your
      function access to the object triggering the event. When the target
      parameter is used the callback method becomes the third argument.
         @method on
      @param {String} name The name of the event
      @param {Object} [target] The "this" binding for the callback
      @param {Function|String} method A function or the name of a function to be called on `target`
      @return this
      @public
    */
      on(name, target, method) {
        (0, _metal.addListener)(this, name, target, method);
        return this;
      },

      /**
      Subscribes a function to a named event and then cancels the subscription
      after the first time the event is triggered. It is good to use ``one`` when
      you only care about the first time an event has taken place.
         This function takes an optional 2nd argument that will become the "this"
      value for the callback. When the target parameter is used the callback method
      becomes the third argument.
         @method one
      @param {String} name The name of the event
      @param {Object} [target] The "this" binding for the callback
      @param {Function|String} method A function or the name of a function to be called on `target`
      @return this
      @public
    */
      one(name, target, method) {
        (0, _metal.addListener)(this, name, target, method, true);
        return this;
      },

      /**
      Triggers a named event for the object. Any additional arguments
      will be passed as parameters to the functions that are subscribed to the
      event.
         ```javascript
      person.on('didEat', function(food) {
        console.log('person ate some ' + food);
      });
         person.trigger('didEat', 'broccoli');
         // outputs: person ate some broccoli
      ```
      @method trigger
      @param {String} name The name of the event
      @param {Object...} args Optional arguments to pass on
      @public
    */
      trigger(name) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        (0, _metal.sendEvent)(this, name, args);
      },

      /**
      Cancels subscription for given name, target, and method.
         @method off
      @param {String} name The name of the event
      @param {Object} target The target of the subscription
      @param {Function|String} method The function or the name of a function of the subscription
      @return this
      @public
    */
      off(name, target, method) {
        (0, _metal.removeListener)(this, name, target, method);
        return this;
      },

      /**
      Checks to see if object has any subscriptions for named event.
         @method has
      @param {String} name The name of the event
      @return {Boolean} does the object have a subscription for event
      @public
     */
      has(name) {
        return (0, _metal.hasListeners)(this, name);
      },
    });

    var _default = Evented;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/mutable_enumerable', [
    'exports',
    '@ember/-internals/runtime/lib/mixins/enumerable',
    '@ember/-internals/metal',
  ], function (_exports, _enumerable, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var MutableEnumerable = _metal.Mixin.create(_enumerable.default);

    var _default = MutableEnumerable;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/observable', [
    'exports',
    '@ember/-internals/meta',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _meta, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/object
  */
    var Observable = _metal.Mixin.create({
      /**
      Retrieves the value of a property from the object.
         This method is usually similar to using `object[keyName]` or `object.keyName`,
      however it supports both computed properties and the unknownProperty
      handler.
         Because `get` unifies the syntax for accessing all these kinds
      of properties, it can make many refactorings easier, such as replacing a
      simple property with a computed property, or vice versa.
         ### Computed Properties
         Computed properties are methods defined with the `property` modifier
      declared at the end, such as:
         ```javascript
      import { computed } from '@ember/object';
         fullName: computed('firstName', 'lastName', function() {
        return this.get('firstName') + ' ' + this.get('lastName');
      })
      ```
         When you call `get` on a computed property, the function will be
      called and the return value will be returned instead of the function
      itself.
         ### Unknown Properties
         Likewise, if you try to call `get` on a property whose value is
      `undefined`, the `unknownProperty()` method will be called on the object.
      If this method returns any value other than `undefined`, it will be returned
      instead. This allows you to implement "virtual" properties that are
      not defined upfront.
         @method get
      @param {String} keyName The property to retrieve
      @return {Object} The property value or undefined.
      @public
    */
      get(keyName) {
        return (0, _metal.get)(this, keyName);
      },

      /**
      To get the values of multiple properties at once, call `getProperties`
      with a list of strings or an array:
         ```javascript
      record.getProperties('firstName', 'lastName', 'zipCode');
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
         is equivalent to:
         ```javascript
      record.getProperties(['firstName', 'lastName', 'zipCode']);
      // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
      ```
         @method getProperties
      @param {String...|Array} list of keys to get
      @return {Object}
      @public
    */
      getProperties() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        return (0, _metal.getProperties)(this, ...args);
      },

      /**
      Sets the provided key or path to the value.
         ```javascript
      record.set("key", value);
      ```
         This method is generally very similar to calling `object["key"] = value` or
      `object.key = value`, except that it provides support for computed
      properties, the `setUnknownProperty()` method and property observers.
         ### Computed Properties
         If you try to set a value on a key that has a computed property handler
      defined (see the `get()` method for an example), then `set()` will call
      that method, passing both the value and key instead of simply changing
      the value itself. This is useful for those times when you need to
      implement a property that is composed of one or more member
      properties.
         ### Unknown Properties
         If you try to set a value on a key that is undefined in the target
      object, then the `setUnknownProperty()` handler will be called instead. This
      gives you an opportunity to implement complex "virtual" properties that
      are not predefined on the object. If `setUnknownProperty()` returns
      undefined, then `set()` will simply set the value on the object.
         ### Property Observers
         In addition to changing the property, `set()` will also register a property
      change with the object. Unless you have placed this call inside of a
      `beginPropertyChanges()` and `endPropertyChanges(),` any "local" observers
      (i.e. observer methods declared on the same object), will be called
      immediately. Any "remote" observers (i.e. observer methods declared on
      another object) will be placed in a queue and called at a later time in a
      coalesced manner.
         @method set
      @param {String} keyName The property to set
      @param {Object} value The value to set or `null`.
      @return {Object} The passed value
      @public
    */
      set(keyName, value) {
        return (0, _metal.set)(this, keyName, value);
      },

      /**
      Sets a list of properties at once. These properties are set inside
      a single `beginPropertyChanges` and `endPropertyChanges` batch, so
      observers will be buffered.
         ```javascript
      record.setProperties({ firstName: 'Charles', lastName: 'Jolley' });
      ```
         @method setProperties
      @param {Object} hash the hash of keys and values to set
      @return {Object} The passed in hash
      @public
    */
      setProperties(hash) {
        return (0, _metal.setProperties)(this, hash);
      },

      /**
      Begins a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call this
      method at the beginning of the changes to begin deferring change
      notifications. When you are done making changes, call
      `endPropertyChanges()` to deliver the deferred change notifications and end
      deferring.
         @method beginPropertyChanges
      @return {Observable}
      @private
    */
      beginPropertyChanges() {
        (0, _metal.beginPropertyChanges)();
        return this;
      },

      /**
      Ends a grouping of property changes.
         You can use this method to group property changes so that notifications
      will not be sent until the changes are finished. If you plan to make a
      large number of changes to an object at one time, you should call
      `beginPropertyChanges()` at the beginning of the changes to defer change
      notifications. When you are done making changes, call this method to
      deliver the deferred change notifications and end deferring.
         @method endPropertyChanges
      @return {Observable}
      @private
    */
      endPropertyChanges() {
        (0, _metal.endPropertyChanges)();
        return this;
      },

      /**
      Notify the observer system that a property has just changed.
         Sometimes you need to change a value directly or indirectly without
      actually calling `get()` or `set()` on it. In this case, you can use this
      method instead. Calling this method will notify all observers that the
      property has potentially changed value.
         @method notifyPropertyChange
      @param {String} keyName The property key to be notified about.
      @return {Observable}
      @public
    */
      notifyPropertyChange(keyName) {
        (0, _metal.notifyPropertyChange)(this, keyName);
        return this;
      },

      /**
      Adds an observer on a property.
         This is the core method used to register an observer for a property.
         Once you call this method, any time the key's value is set, your observer
      will be notified. Note that the observers are triggered any time the
      value is set, regardless of whether it has actually changed. Your
      observer should be prepared to handle that.
         There are two common invocation patterns for `.addObserver()`:
         - Passing two arguments:
        - the name of the property to observe (as a string)
        - the function to invoke (an actual function)
      - Passing three arguments:
        - the name of the property to observe (as a string)
        - the target object (will be used to look up and invoke a
          function on)
        - the name of the function to invoke on the target object
          (as a string).
         ```app/components/my-component.js
      import Component from '@ember/component';
         export default Component.extend({
        init() {
          this._super(...arguments);
             // the following are equivalent:
             // using three arguments
          this.addObserver('foo', this, 'fooDidChange');
             // using two arguments
          this.addObserver('foo', (...args) => {
            this.fooDidChange(...args);
          });
        },
           fooDidChange() {
          // your custom logic code
        }
      });
      ```
         ### Observer Methods
         Observer methods have the following signature:
         ```app/components/my-component.js
      import Component from '@ember/component';
         export default Component.extend({
        init() {
          this._super(...arguments);
          this.addObserver('foo', this, 'fooDidChange');
        },
           fooDidChange(sender, key, value, rev) {
          // your code
        }
      });
      ```
         The `sender` is the object that changed. The `key` is the property that
      changes. The `value` property is currently reserved and unused. The `rev`
      is the last property revision of the object when it changed, which you can
      use to detect if the key value has really changed or not.
         Usually you will not need the value or revision parameters at
      the end. In this case, it is common to write observer methods that take
      only a sender and key value as parameters or, if you aren't interested in
      any of these values, to write an observer that has no parameters at all.
         @method addObserver
      @param {String} key The key to observe
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke
      @param {Boolean} sync Whether the observer is sync or not
      @return {Observable}
      @public
    */
      addObserver(key, target, method, sync) {
        (0, _metal.addObserver)(this, key, target, method, sync);
        return this;
      },

      /**
      Remove an observer you have previously registered on this object. Pass
      the same key, target, and method you passed to `addObserver()` and your
      target will no longer receive notifications.
         @method removeObserver
      @param {String} key The key to observe
      @param {Object} target The target object to invoke
      @param {String|Function} method The method to invoke
      @param {Boolean} sync Whether the observer is async or not
      @return {Observable}
      @public
    */
      removeObserver(key, target, method, sync) {
        (0, _metal.removeObserver)(this, key, target, method, sync);
        return this;
      },

      /**
      Returns `true` if the object currently has observers registered for a
      particular key. You can use this method to potentially defer performing
      an expensive action until someone begins observing a particular property
      on the object.
         @method hasObserverFor
      @param {String} key Key to check
      @return {Boolean}
      @private
    */
      hasObserverFor(key) {
        return (0, _metal.hasListeners)(this, `${key}:change`);
      },

      /**
      Set the value of a property to the current value plus some amount.
         ```javascript
      person.incrementProperty('age');
      team.incrementProperty('score', 2);
      ```
         @method incrementProperty
      @param {String} keyName The name of the property to increment
      @param {Number} increment The amount to increment by. Defaults to 1
      @return {Number} The new property value
      @public
    */
      incrementProperty(keyName, increment) {
        if (increment === void 0) {
          increment = 1;
        }

        true &&
          !(!isNaN(parseFloat(String(increment))) && isFinite(increment)) &&
          (0, _debug.assert)(
            'Must pass a numeric value to incrementProperty',
            !isNaN(parseFloat(String(increment))) && isFinite(increment),
          );
        return (0, _metal.set)(
          this,
          keyName,
          (parseFloat((0, _metal.get)(this, keyName)) || 0) + increment,
        );
      },

      /**
      Set the value of a property to the current value minus some amount.
         ```javascript
      player.decrementProperty('lives');
      orc.decrementProperty('health', 5);
      ```
         @method decrementProperty
      @param {String} keyName The name of the property to decrement
      @param {Number} decrement The amount to decrement by. Defaults to 1
      @return {Number} The new property value
      @public
    */
      decrementProperty(keyName, decrement) {
        if (decrement === void 0) {
          decrement = 1;
        }

        true &&
          !(
            (typeof decrement === 'number' || !isNaN(parseFloat(decrement))) &&
            isFinite(decrement)
          ) &&
          (0, _debug.assert)(
            'Must pass a numeric value to decrementProperty',
            (typeof decrement === 'number' || !isNaN(parseFloat(decrement))) &&
              isFinite(decrement),
          );
        return (0, _metal.set)(
          this,
          keyName,
          ((0, _metal.get)(this, keyName) || 0) - decrement,
        );
      },

      /**
      Set the value of a boolean property to the opposite of its
      current value.
         ```javascript
      starship.toggleProperty('warpDriveEngaged');
      ```
         @method toggleProperty
      @param {String} keyName The name of the property to toggle
      @return {Boolean} The new property value
      @public
    */
      toggleProperty(keyName) {
        return (0, _metal.set)(this, keyName, !(0, _metal.get)(this, keyName));
      },

      /**
      Returns the cached value of a computed property, if it exists.
      This allows you to inspect the value of a computed property
      without accidentally invoking it if it is intended to be
      generated lazily.
         @method cacheFor
      @param {String} keyName
      @return {Object} The cached value of the computed property, if any
      @public
    */
      cacheFor(keyName) {
        var meta = (0, _meta.peekMeta)(this);

        if (meta !== null) {
          return meta.valueFor(keyName);
        }
      },
    });

    var _default = Observable;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/promise_proxy', [
    'exports',
    '@ember/-internals/metal',
    '@ember/error',
  ], function (_exports, _metal, _error) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
    @module @ember/object
  */
    function tap(proxy, promise) {
      (0, _metal.setProperties)(proxy, {
        isFulfilled: false,
        isRejected: false,
      });
      return promise.then(
        (value) => {
          if (!proxy.isDestroyed && !proxy.isDestroying) {
            (0, _metal.setProperties)(proxy, {
              content: value,
              isFulfilled: true,
            });
          }

          return value;
        },
        (reason) => {
          if (!proxy.isDestroyed && !proxy.isDestroying) {
            (0, _metal.setProperties)(proxy, {
              reason,
              isRejected: true,
            });
          }

          throw reason;
        },
        'Ember: PromiseProxy',
      );
    }

    var PromiseProxyMixin = _metal.Mixin.create({
      /**
      If the proxied promise is rejected this will contain the reason
      provided.
         @property reason
      @default null
      @public
    */
      reason: null,

      /**
      Once the proxied promise has settled this will become `false`.
         @property isPending
      @default true
      @public
    */
      isPending: (0, _metal.computed)('isSettled', function () {
        return !(0, _metal.get)(this, 'isSettled');
      }).readOnly(),

      /**
      Once the proxied promise has settled this will become `true`.
         @property isSettled
      @default false
      @public
    */
      isSettled: (0, _metal.computed)('isRejected', 'isFulfilled', function () {
        return (
          (0, _metal.get)(this, 'isRejected') ||
          (0, _metal.get)(this, 'isFulfilled')
        );
      }).readOnly(),

      /**
      Will become `true` if the proxied promise is rejected.
         @property isRejected
      @default false
      @public
    */
      isRejected: false,

      /**
      Will become `true` if the proxied promise is fulfilled.
         @property isFulfilled
      @default false
      @public
    */
      isFulfilled: false,

      /**
      The promise whose fulfillment value is being proxied by this object.
         This property must be specified upon creation, and should not be
      changed once created.
         Example:
         ```javascript
      import ObjectProxy from '@ember/object/proxy';
      import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';
         ObjectProxy.extend(PromiseProxyMixin).create({
        promise: <thenable>
      });
      ```
         @property promise
      @public
    */
      promise: (0, _metal.computed)({
        get() {
          throw new _error.default("PromiseProxy's promise must be set");
        },

        set(_key, promise) {
          return tap(this, promise);
        },
      }),

      /**
      An alias to the proxied promise's `then`.
         See RSVP.Promise.then.
         @method then
      @param {Function} callback
      @return {RSVP.Promise}
      @public
    */
      then: promiseAlias('then'),

      /**
      An alias to the proxied promise's `catch`.
         See RSVP.Promise.catch.
         @method catch
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
      catch: promiseAlias('catch'),

      /**
      An alias to the proxied promise's `finally`.
         See RSVP.Promise.finally.
         @method finally
      @param {Function} callback
      @return {RSVP.Promise}
      @since 1.3.0
      @public
    */
      finally: promiseAlias('finally'),
    });

    function promiseAlias(name) {
      return function () {
        var promise = (0, _metal.get)(this, 'promise'); // We need this cast because `Parameters` is deferred so that it is not
        // possible for TS to see it will always produce the right type. However,
        // since `AnyFn` has a rest type, it is allowed. See discussion on [this
        // issue](https://github.com/microsoft/TypeScript/issues/47615).

        return promise[name](...arguments);
      };
    }

    var _default = PromiseProxyMixin;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/registry_proxy', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var RegistryProxyMixin = _metal.Mixin.create({
      __registry__: null,

      /**
     Given a fullName return the corresponding factory.
        @public
     @method resolveRegistration
     @param {String} fullName
     @return {Function} fullName's factory
     */
      resolveRegistration(fullName) {
        true &&
          !this.__registry__.isValidFullName(fullName) &&
          (0, _debug.assert)(
            'fullName must be a proper full name',
            this.__registry__.isValidFullName(fullName),
          );
        return this.__registry__.resolve(fullName);
      },

      /**
      Registers a factory that can be used for dependency injection (with
      `inject`) or for service lookup. Each factory is registered with
      a full name including two parts: `type:name`.
         A simple example:
         ```javascript
      import Application from '@ember/application';
      import EmberObject from '@ember/object';
         let App = Application.create();
         App.Orange = EmberObject.extend();
      App.register('fruit:favorite', App.Orange);
      ```
         Ember will resolve factories from the `App` namespace automatically.
      For example `App.CarsController` will be discovered and returned if
      an application requests `controller:cars`.
         An example of registering a controller with a non-standard name:
         ```javascript
      import Application from '@ember/application';
      import Controller from '@ember/controller';
         let App = Application.create();
      let Session = Controller.extend();
         App.register('controller:session', Session);
         // The Session controller can now be treated like a normal controller,
      // despite its non-standard name.
      App.ApplicationController = Controller.extend({
        needs: ['session']
      });
      ```
         Registered factories are **instantiated** by having `create`
      called on them. Additionally they are **singletons**, each time
      they are looked up they return the same instance.
         Some examples modifying that default behavior:
         ```javascript
      import Application from '@ember/application';
      import EmberObject from '@ember/object';
         let App = Application.create();
         App.Person = EmberObject.extend();
      App.Orange = EmberObject.extend();
      App.Email = EmberObject.extend();
      App.session = EmberObject.create();
         App.register('model:user', App.Person, { singleton: false });
      App.register('fruit:favorite', App.Orange);
      App.register('communication:main', App.Email, { singleton: false });
      App.register('session', App.session, { instantiate: false });
      ```
         @method register
      @param  fullName {String} type:name (e.g., 'model:user')
      @param  factory {any} (e.g., App.Person)
      @param  options {Object} (optional) disable instantiation or singleton usage
      @public
     */
      register: registryAlias('register'),

      /**
     Unregister a factory.
        ```javascript
     import Application from '@ember/application';
     import EmberObject from '@ember/object';
        let App = Application.create();
     let User = EmberObject.extend();
     App.register('model:user', User);
        App.resolveRegistration('model:user').create() instanceof User //=> true
        App.unregister('model:user')
     App.resolveRegistration('model:user') === undefined //=> true
     ```
        @public
     @method unregister
     @param {String} fullName
     */
      unregister: registryAlias('unregister'),

      /**
     Check if a factory is registered.
        @public
     @method hasRegistration
     @param {String} fullName
     @return {Boolean}
     */
      hasRegistration: registryAlias('has'),

      /**
     Return a specific registered option for a particular factory.
        @public
     @method registeredOption
     @param  {String} fullName
     @param  {String} optionName
     @return {Object} options
     */
      registeredOption: registryAlias('getOption'),

      /**
     Register options for a particular factory.
        @public
     @method registerOptions
     @param {String} fullName
     @param {Object} options
     */
      registerOptions: registryAlias('options'),

      /**
     Return registered options for a particular factory.
        @public
     @method registeredOptions
     @param  {String} fullName
     @return {Object} options
     */
      registeredOptions: registryAlias('getOptions'),

      /**
     Allow registering options for all factories of a type.
        ```javascript
     import Application from '@ember/application';
        let App = Application.create();
     let appInstance = App.buildInstance();
        // if all of type `connection` must not be singletons
     appInstance.registerOptionsForType('connection', { singleton: false });
        appInstance.register('connection:twitter', TwitterConnection);
     appInstance.register('connection:facebook', FacebookConnection);
        let twitter = appInstance.lookup('connection:twitter');
     let twitter2 = appInstance.lookup('connection:twitter');
        twitter === twitter2; // => false
        let facebook = appInstance.lookup('connection:facebook');
     let facebook2 = appInstance.lookup('connection:facebook');
        facebook === facebook2; // => false
     ```
        @public
     @method registerOptionsForType
     @param {String} type
     @param {Object} options
     */
      registerOptionsForType: registryAlias('optionsForType'),

      /**
     Return the registered options for all factories of a type.
        @public
     @method registeredOptionsForType
     @param {String} type
     @return {Object} options
     */
      registeredOptionsForType: registryAlias('getOptionsForType'),

      /**
      Define a dependency injection onto a specific factory or all factories
      of a type.
         When Ember instantiates a controller, view, or other framework component
      it can attach a dependency to that component. This is often used to
      provide services to a set of framework components.
         An example of providing a session object to all controllers:
         ```javascript
      import { alias } from '@ember/object/computed';
      import Application from '@ember/application';
      import Controller from '@ember/controller';
      import EmberObject from '@ember/object';
         let App = Application.create();
      let Session = EmberObject.extend({ isAuthenticated: false });
         // A factory must be registered before it can be injected
      App.register('session:main', Session);
         // Inject 'session:main' onto all factories of the type 'controller'
      // with the name 'session'
      App.inject('controller', 'session', 'session:main');
         App.IndexController = Controller.extend({
        isLoggedIn: alias('session.isAuthenticated')
      });
      ```
         Injections can also be performed on specific factories.
         ```javascript
      App.inject(<full_name or type>, <property name>, <full_name>)
      App.inject('route', 'source', 'source:main')
      App.inject('route:application', 'email', 'model:email')
      ```
         It is important to note that injections can only be performed on
      classes that are instantiated by Ember itself. Instantiating a class
      directly (via `create` or `new`) bypasses the dependency injection
      system.
         @public
      @method inject
      @param  factoryNameOrType {String}
      @param  property {String}
      @param  injectionName {String}
      @deprecated
    **/
      inject: registryAlias('injection'),
    });

    function registryAlias(name) {
      return function () {
        // We need this cast because `Parameters` is deferred so that it is not
        // possible for TS to see it will always produce the right type. However,
        // since `AnyFn` has a rest type, it is allowed. See discussion on [this
        // issue](https://github.com/microsoft/TypeScript/issues/47615).
        return this.__registry__[name](...arguments);
      };
    }

    var _default = RegistryProxyMixin;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/mixins/target_action_support', [
    'exports',
    '@ember/-internals/environment',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _environment, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var TargetActionSupport = _metal.Mixin.create({
      target: null,
      action: null,
      actionContext: null,
      actionContextObject: (0, _metal.computed)('actionContext', function () {
        var actionContext = (0, _metal.get)(this, 'actionContext');

        if (typeof actionContext === 'string') {
          var value = (0, _metal.get)(this, actionContext);

          if (value === undefined) {
            value = (0, _metal.get)(_environment.context.lookup, actionContext);
          }

          return value;
        } else {
          return actionContext;
        }
      }),

      /**
    Send an `action` with an `actionContext` to a `target`. The action, actionContext
    and target will be retrieved from properties of the object. For example:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      action: 'save',
      actionContext: alias('context'),
      click() {
        this.triggerAction(); // Sends the `save` action, along with the current context
                              // to the current controller
      }
    });
    ```
       The `target`, `action`, and `actionContext` can be provided as properties of
    an optional object argument to `triggerAction` as well.
       ```javascript
    App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      click() {
        this.triggerAction({
          action: 'save',
          target: this.get('controller'),
          actionContext: this.get('context')
        }); // Sends the `save` action, along with the current context
            // to the current controller
      }
    });
    ```
       The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
    But `target` and `action` must be specified either as properties or with the argument
    to `triggerAction`, or a combination:
       ```javascript
    import { alias } from '@ember/object/computed';
       App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
      target: alias('controller'),
      click() {
        this.triggerAction({
          action: 'save'
        }); // Sends the `save` action, along with a reference to `this`,
            // to the current controller
      }
    });
    ```
       @method triggerAction
    @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
    @return {Boolean} true if the action was sent successfully and did not return false
    @private
    */
      triggerAction(opts) {
        if (opts === void 0) {
          opts = {};
        }

        var { action, target, actionContext } = opts;
        action = action || (0, _metal.get)(this, 'action');
        target = target || getTarget(this);

        if (actionContext === undefined) {
          actionContext = (0, _metal.get)(this, 'actionContextObject') || this;
        }

        var context = Array.isArray(actionContext)
          ? actionContext
          : [actionContext];

        if (target && action) {
          var ret;

          if (isSendable(target)) {
            ret = target.send(action, ...context);
          } else {
            true &&
              !(typeof target[action] === 'function') &&
              (0, _debug.assert)(
                `The action '${action}' did not exist on ${target}`,
                typeof target[action] === 'function',
              );
            ret = target[action](...context);
          }

          if (ret !== false) {
            return true;
          }
        }

        return false;
      },
    });

    function isSendable(obj) {
      return (
        obj != null && typeof obj === 'object' && typeof obj.send === 'function'
      );
    }

    function getTarget(instance) {
      var target = (0, _metal.get)(instance, 'target');

      if (target) {
        if (typeof target === 'string') {
          var value = (0, _metal.get)(instance, target);

          if (value === undefined) {
            value = (0, _metal.get)(_environment.context.lookup, target);
          }

          return value;
        } else {
          return target;
        }
      }

      if (instance._target) {
        return instance._target;
      }

      return null;
    }

    if (
      true
      /* DEBUG */
    ) {
      Object.seal(TargetActionSupport);
    }

    var _default = TargetActionSupport;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/system/array_proxy', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/utils',
    '@ember/-internals/runtime/lib/system/object',
    '@ember/-internals/runtime/lib/mixins/array',
    '@ember/debug',
    '@glimmer/manager',
    '@glimmer/validator',
  ], function (
    _exports,
    _metal,
    _utils,
    _object,
    _array,
    _debug,
    _manager,
    _validator,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/array
  */
    function isMutable(obj) {
      return Array.isArray(obj) || typeof obj.replace === 'function';
    }

    var ARRAY_OBSERVER_MAPPING = {
      willChange: '_arrangedContentArrayWillChange',
      didChange: '_arrangedContentArrayDidChange',
    };

    function customTagForArrayProxy(proxy, key) {
      true &&
        !(proxy instanceof ArrayProxy) &&
        (0, _debug.assert)(
          '[BUG] Expected a proxy',
          proxy instanceof ArrayProxy,
        );

      if (key === '[]') {
        proxy._revalidate();

        return proxy._arrTag;
      } else if (key === 'length') {
        proxy._revalidate();

        return proxy._lengthTag;
      }

      return (0, _validator.tagFor)(proxy, key);
    }

    class ArrayProxy extends _object.default {
      constructor() {
        super(...arguments);
        /*
        `this._objectsDirtyIndex` determines which indexes in the `this._objects`
        cache are dirty.
               If `this._objectsDirtyIndex === -1` then no indexes are dirty.
        Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
               Calling `objectAt` with a dirty index will cause the `this._objects`
        cache to be recomputed.
      */

        /** @internal */

        this._objectsDirtyIndex = 0;
        /** @internal */

        this._objects = null;
        /** @internal */

        this._lengthDirty = true;
        /** @internal */

        this._length = 0;
        /** @internal */

        this._arrangedContent = null;
        /** @internal */

        this._arrangedContentIsUpdating = false;
        /** @internal */

        this._arrangedContentTag = null;
        /** @internal */

        this._arrangedContentRevision = null;
        /** @internal */

        this._lengthTag = null;
        /** @internal */

        this._arrTag = null;
      }

      init(props) {
        super.init(props);
        (0, _manager.setCustomTagFor)(this, customTagForArrayProxy);
      }

      [_metal.PROPERTY_DID_CHANGE]() {
        this._revalidate();
      }

      willDestroy() {
        this._removeArrangedContentArrayObserver();
      }
      /**
      Should actually retrieve the object at the specified index from the
      content. You can override this method in subclasses to transform the
      content item to something new.
         This method will only be called if content is non-`null`.
         @method objectAtContent
      @param {Number} idx The index to retrieve.
      @return {Object} the value or undefined if none found
      @public
    */

      objectAtContent(idx) {
        var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
        true &&
          !arrangedContent &&
          (0, _debug.assert)(
            '[BUG] Called objectAtContent without content',
            arrangedContent,
          );
        return (0, _metal.objectAt)(arrangedContent, idx);
      } // See additional docs for `replace` from `MutableArray`:
      // https://api.emberjs.com/ember/release/classes/MutableArray/methods/replace?anchor=replace

      replace(idx, amt, objects) {
        true &&
          !(
            (0, _metal.get)(this, 'arrangedContent') ===
            (0, _metal.get)(this, 'content')
          ) &&
          (0, _debug.assert)(
            'Mutating an arranged ArrayProxy is not allowed',
            (0, _metal.get)(this, 'arrangedContent') ===
              (0, _metal.get)(this, 'content'),
          );
        this.replaceContent(idx, amt, objects);
      }
      /**
      Should actually replace the specified objects on the content array.
      You can override this method in subclasses to transform the content item
      into something new.
         This method will only be called if content is non-`null`.
         @method replaceContent
      @param {Number} idx The starting index
      @param {Number} amt The number of items to remove from the content.
      @param {Array} objects Optional array of objects to insert.
      @return {void}
      @public
    */

      replaceContent(idx, amt, objects) {
        var content = (0, _metal.get)(this, 'content');
        true &&
          !content &&
          (0, _debug.assert)(
            '[BUG] Called replaceContent without content',
            content,
          );
        true &&
          !isMutable(content) &&
          (0, _debug.assert)(
            'Mutating a non-mutable array is not allowed',
            isMutable(content),
          );
        (0, _metal.replace)(content, idx, amt, objects);
      } // Overriding objectAt is not supported.

      objectAt(idx) {
        this._revalidate();

        if (this._objects === null) {
          this._objects = [];
        }

        if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
          var arrangedContent = (0, _metal.get)(this, 'arrangedContent');

          if (arrangedContent) {
            var length = (this._objects.length = (0, _metal.get)(
              arrangedContent,
              'length',
            ));

            for (var i = this._objectsDirtyIndex; i < length; i++) {
              // SAFETY: This is expected to only ever return an instance of T. In other words, there should
              // be no gaps in the array. Unfortunately, we can't actually assert for it since T could include
              // any types, including null or undefined.
              this._objects[i] = this.objectAtContent(i);
            }
          } else {
            this._objects.length = 0;
          }

          this._objectsDirtyIndex = -1;
        }

        return this._objects[idx];
      } // Overriding length is not supported.

      get length() {
        this._revalidate();

        if (this._lengthDirty) {
          var arrangedContent = (0, _metal.get)(this, 'arrangedContent');
          this._length = arrangedContent
            ? (0, _metal.get)(arrangedContent, 'length')
            : 0;
          this._lengthDirty = false;
        }

        true &&
          !this._lengthTag &&
          (0, _debug.assert)('[BUG] _lengthTag is not set', this._lengthTag);
        (0, _validator.consumeTag)(this._lengthTag);
        return this._length;
      }

      set length(value) {
        var length = this.length;
        var removedCount = length - value;
        var added;

        if (removedCount === 0) {
          return;
        } else if (removedCount < 0) {
          added = new Array(-removedCount);
          removedCount = 0;
        }

        var content = (0, _metal.get)(this, 'content');

        if (content) {
          true &&
            !isMutable(content) &&
            (0, _debug.assert)(
              'Mutating a non-mutable array is not allowed',
              isMutable(content),
            );
          (0, _metal.replace)(content, value, removedCount, added);

          this._invalidate();
        }
      }

      _updateArrangedContentArray(arrangedContent) {
        var oldLength = this._objects === null ? 0 : this._objects.length;
        var newLength = arrangedContent
          ? (0, _metal.get)(arrangedContent, 'length')
          : 0;

        this._removeArrangedContentArrayObserver();

        (0, _metal.arrayContentWillChange)(this, 0, oldLength, newLength);

        this._invalidate();

        (0, _metal.arrayContentDidChange)(this, 0, oldLength, newLength, false);

        this._addArrangedContentArrayObserver(arrangedContent);
      }

      _addArrangedContentArrayObserver(arrangedContent) {
        if (arrangedContent && !arrangedContent.isDestroyed) {
          // @ts-expect-error This check is still good for ensuring correctness
          true &&
            !(arrangedContent !== this) &&
            (0, _debug.assert)(
              "Can't set ArrayProxy's content to itself",
              arrangedContent !== this,
            );
          true &&
            !(function (arr) {
              return Array.isArray(arr) || _array.default.detect(arr);
            })(arrangedContent) &&
            (0, _debug.assert)(
              `ArrayProxy expects a native Array, EmberArray, or ArrayProxy, but you passed ${typeof arrangedContent}`,
              (function (arr) {
                return Array.isArray(arr) || _array.default.detect(arr);
              })(arrangedContent),
            );
          true &&
            !!arrangedContent.isDestroyed &&
            (0, _debug.assert)(
              'ArrayProxy expected its contents to not be destroyed',
              !arrangedContent.isDestroyed,
            );
          (0, _metal.addArrayObserver)(
            arrangedContent,
            this,
            ARRAY_OBSERVER_MAPPING,
          );
          this._arrangedContent = arrangedContent;
        }
      }

      _removeArrangedContentArrayObserver() {
        if (this._arrangedContent) {
          (0, _metal.removeArrayObserver)(
            this._arrangedContent,
            this,
            ARRAY_OBSERVER_MAPPING,
          );
        }
      }

      _arrangedContentArrayWillChange() {}

      _arrangedContentArrayDidChange(_proxy, idx, removedCnt, addedCnt) {
        (0, _metal.arrayContentWillChange)(this, idx, removedCnt, addedCnt);
        var dirtyIndex = idx;

        if (dirtyIndex < 0) {
          var length = (0, _metal.get)(this._arrangedContent, 'length');
          dirtyIndex += length + removedCnt - addedCnt;
        }

        if (
          this._objectsDirtyIndex === -1 ||
          this._objectsDirtyIndex > dirtyIndex
        ) {
          this._objectsDirtyIndex = dirtyIndex;
        }

        this._lengthDirty = true;
        (0, _metal.arrayContentDidChange)(
          this,
          idx,
          removedCnt,
          addedCnt,
          false,
        );
      }

      _invalidate() {
        this._objectsDirtyIndex = 0;
        this._lengthDirty = true;
      }

      _revalidate() {
        if (this._arrangedContentIsUpdating === true) return;

        if (
          this._arrangedContentTag === null ||
          !(0, _validator.validateTag)(
            this._arrangedContentTag,
            this._arrangedContentRevision,
          )
        ) {
          var arrangedContent = this.get('arrangedContent');

          if (this._arrangedContentTag === null) {
            // This is the first time the proxy has been setup, only add the observer
            // don't trigger any events
            this._addArrangedContentArrayObserver(arrangedContent);
          } else {
            this._arrangedContentIsUpdating = true;

            this._updateArrangedContentArray(arrangedContent);

            this._arrangedContentIsUpdating = false;
          }

          var arrangedContentTag = (this._arrangedContentTag = (0,
          _validator.tagFor)(this, 'arrangedContent'));
          this._arrangedContentRevision = (0, _validator.valueForTag)(
            this._arrangedContentTag,
          );

          if ((0, _utils.isObject)(arrangedContent)) {
            this._lengthTag = (0, _validator.combine)([
              arrangedContentTag,
              (0, _metal.tagForProperty)(arrangedContent, 'length'),
            ]);
            this._arrTag = (0, _validator.combine)([
              arrangedContentTag,
              (0, _metal.tagForProperty)(arrangedContent, '[]'),
            ]);
          } else {
            this._lengthTag = this._arrTag = arrangedContentTag;
          }
        }
      }
    }

    ArrayProxy.reopen(_array.MutableArray, {
      /**
      The array that the proxy pretends to be. In the default `ArrayProxy`
      implementation, this and `content` are the same. Subclasses of `ArrayProxy`
      can override this property to provide things like sorting and filtering.
         @property arrangedContent
      @public
    */
      arrangedContent: (0, _metal.alias)('content'),
    });
    var _default = ArrayProxy;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/system/core_object', [
    'exports',
    '@ember/-internals/container',
    '@ember/-internals/owner',
    '@ember/-internals/utils',
    '@ember/-internals/meta',
    '@ember/-internals/metal',
    '@ember/-internals/runtime/lib/mixins/action_handler',
    '@ember/debug',
    '@glimmer/util',
    '@glimmer/destroyable',
    '@glimmer/owner',
  ], function (
    _exports,
    _container,
    _owner,
    _utils,
    _meta2,
    _metal,
    _action_handler,
    _debug,
    _util,
    _destroyable,
    _owner2,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
    @module @ember/object
  */
    function hasSetUnknownProperty(val) {
      return (
        typeof val === 'object' &&
        val !== null &&
        typeof val.setUnknownProperty === 'function'
      );
    }

    function hasToStringExtension(val) {
      return (
        typeof val === 'object' &&
        val !== null &&
        typeof val.toStringExtension === 'function'
      );
    }

    var reopen = _metal.Mixin.prototype.reopen;
    var wasApplied = new _util._WeakSet();
    var prototypeMixinMap = new WeakMap();
    var initCalled = true ? /* DEBUG */ new _util._WeakSet() : undefined; // only used in debug builds to enable the proxy trap

    var destroyCalled = new Set();

    function ensureDestroyCalled(instance) {
      if (!destroyCalled.has(instance)) {
        instance.destroy();
      }
    }

    function initialize(obj, properties) {
      var m = (0, _meta2.meta)(obj);

      if (properties !== undefined) {
        true &&
          !(typeof properties === 'object' && properties !== null) &&
          (0, _debug.assert)(
            'EmberObject.create only accepts objects.',
            typeof properties === 'object' && properties !== null,
          );
        true &&
          !!(properties instanceof _metal.Mixin) &&
          (0, _debug.assert)(
            'EmberObject.create no longer supports mixing in other ' +
              'definitions, use .extend & .create separately instead.',
            !(properties instanceof _metal.Mixin),
          );
        var concatenatedProperties = obj.concatenatedProperties;
        var mergedProperties = obj.mergedProperties;
        var keyNames = Object.keys(properties);

        for (var keyName of keyNames) {
          var value = properties[keyName];
          true &&
            !!(0, _metal.isClassicDecorator)(value) &&
            (0, _debug.assert)(
              'EmberObject.create no longer supports defining computed ' +
                'properties. Define computed properties using extend() or reopen() ' +
                'before calling create().',
              !(0, _metal.isClassicDecorator)(value),
            );
          true &&
            !!(
              typeof value === 'function' &&
              value.toString().indexOf('._super') !== -1
            ) &&
            (0, _debug.assert)(
              'EmberObject.create no longer supports defining methods that call _super.',
              !(
                typeof value === 'function' &&
                value.toString().indexOf('._super') !== -1
              ),
            );
          true &&
            !!(keyName === 'actions' && _action_handler.default.detect(obj)) &&
            (0, _debug.assert)(
              '`actions` must be provided at extend time, not at create time, ' +
                'when Ember.ActionHandler is used (i.e. views, controllers & routes).',
              !(keyName === 'actions' && _action_handler.default.detect(obj)),
            );
          var possibleDesc = (0, _metal.descriptorForProperty)(obj, keyName, m);
          var isDescriptor = possibleDesc !== undefined;

          if (!isDescriptor) {
            if (
              concatenatedProperties !== undefined &&
              concatenatedProperties.length > 0 &&
              concatenatedProperties.includes(keyName)
            ) {
              var baseValue = obj[keyName];

              if (baseValue) {
                value = (0, _utils.makeArray)(baseValue).concat(value);
              } else {
                value = (0, _utils.makeArray)(value);
              }
            }

            if (
              mergedProperties !== undefined &&
              mergedProperties.length > 0 &&
              mergedProperties.includes(keyName)
            ) {
              var _baseValue = obj[keyName];
              value = Object.assign({}, _baseValue, value);
            }
          }

          if (isDescriptor) {
            possibleDesc.set(obj, keyName, value);
          } else if (hasSetUnknownProperty(obj) && !(keyName in obj)) {
            obj.setUnknownProperty(keyName, value);
          } else {
            if (
              true
              /* DEBUG */
            ) {
              (0, _metal.defineProperty)(obj, keyName, null, value, m); // setup mandatory setter
            } else {
              obj[keyName] = value;
            }
          }
        }
      } // using DEBUG here to avoid the extraneous variable when not needed

      if (
        true
        /* DEBUG */
      ) {
        initCalled.add(obj);
      }

      obj.init(properties);
      m.unsetInitializing();
      var observerEvents = m.observerEvents();

      if (observerEvents !== undefined) {
        for (var i = 0; i < observerEvents.length; i++) {
          (0, _metal.activateObserver)(
            obj,
            observerEvents[i].event,
            observerEvents[i].sync,
          );
        }
      }

      (0, _metal.sendEvent)(obj, 'init', undefined, undefined, m);
    }

    class CoreObject {
      constructor(owner) {
        this[_owner2.OWNER] = owner; // prepare prototype...

        this.constructor.proto();
        var self;

        if (
          true &&
          /* DEBUG */
          (0, _metal.hasUnknownProperty)(this)
        ) {
          var messageFor = (obj, property) => {
            return (
              `You attempted to access the \`${String(
                property,
              )}\` property (of ${obj}).\n` +
              `Since Ember 3.1, this is usually fine as you no longer need to use \`.get()\`\n` +
              `to access computed properties. However, in this case, the object in question\n` +
              `is a special kind of Ember object (a proxy). Therefore, it is still necessary\n` +
              `to use \`.get('${String(property)}')\` in this case.\n\n` +
              `If you encountered this error because of third-party code that you don't control,\n` +
              `there is more information at https://github.com/emberjs/ember.js/issues/16148, and\n` +
              `you can help us improve this error message by telling us more about what happened in\n` +
              `this situation.`
            );
          };
          /* globals Proxy Reflect */

          self = new Proxy(this, {
            get(target, property, receiver) {
              if (property === _metal.PROXY_CONTENT) {
                return target;
              } else if (
                // init called will be set on the proxy, not the target, so get with the receiver
                !initCalled.has(receiver) ||
                typeof property === 'symbol' ||
                (0, _utils.isInternalSymbol)(property) ||
                property === 'toJSON' ||
                property === 'toString' ||
                property === 'toStringExtension' ||
                property === 'didDefineProperty' ||
                property === 'willWatchProperty' ||
                property === 'didUnwatchProperty' ||
                property === 'didAddListener' ||
                property === 'didRemoveListener' ||
                property === 'isDescriptor' ||
                property === '_onLookup' ||
                property in target
              ) {
                return Reflect.get(target, property, receiver);
              }

              var value = target.unknownProperty.call(receiver, property);

              if (typeof value !== 'function') {
                true &&
                  !(value === undefined || value === null) &&
                  (0, _debug.assert)(
                    messageFor(receiver, property),
                    value === undefined || value === null,
                  );
              }
            },
          });
        } else {
          self = this;
        }

        var destroyable = self;
        (0, _destroyable.registerDestructor)(self, ensureDestroyCalled, true);
        (0, _destroyable.registerDestructor)(self, () =>
          destroyable.willDestroy(),
        ); // disable chains

        var m = (0, _meta2.meta)(self);
        m.setInitializing(); // only return when in debug builds and `self` is the proxy created above

        if (
          true &&
          /* DEBUG */
          self !== this
        ) {
          return self;
        }
      }

      reopen() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        (0, _metal.applyMixin)(this, args);
        return this;
      }
      /**
      An overridable method called when objects are instantiated. By default,
      does nothing unless it is overridden during class definition.
         Example:
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        init() {
          alert(`Name is ${this.get('name')}`);
        }
      });
         let steve = Person.create({
        name: 'Steve'
      });
         // alerts 'Name is Steve'.
      ```
         NOTE: If you do override `init` for a framework class like `Component`
      from `@ember/component`, be sure to call `this._super(...arguments)`
      in your `init` declaration!
      If you don't, Ember may not have an opportunity to
      do important setup work, and you'll see strange behavior in your
      application.
         @method init
      @public
    */

      init(_properties) {}
      /**
      Defines the properties that will be concatenated from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by combining the superclass' property
      value with the subclass' value. An example of this in use within Ember
      is the `classNames` property of `Component` from `@ember/component`.
         Here is some sample code showing the difference between a concatenated
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties to concatenate
        concatenatedProperties: ['concatenatedProperty'],
           someNonConcatenatedProperty: ['bar'],
        concatenatedProperty: ['bar']
      });
         const FooBar = Bar.extend({
        someNonConcatenatedProperty: ['foo'],
        concatenatedProperty: ['foo']
      });
         let fooBar = FooBar.create();
      fooBar.get('someNonConcatenatedProperty'); // ['foo']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo']
      ```
         This behavior extends to object creation as well. Continuing the
      above example:
         ```javascript
      let fooBar = FooBar.create({
        someNonConcatenatedProperty: ['baz'],
        concatenatedProperty: ['baz']
      })
      fooBar.get('someNonConcatenatedProperty'); // ['baz']
      fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Adding a single property that is not an array will just add it in the array:
         ```javascript
      let fooBar = FooBar.create({
        concatenatedProperty: 'baz'
      })
      view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
      ```
         Using the `concatenatedProperties` property, we can tell Ember to mix the
      content of the properties.
         In `Component` the `classNames`, `classNameBindings` and
      `attributeBindings` properties are concatenated.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual concatenated property (to not
      mislead your users to think they can override the property in a subclass).
         @property concatenatedProperties
      @type Array
      @default null
      @public
    */

      /**
      Defines the properties that will be merged from the superclass
      (instead of overridden).
         By default, when you extend an Ember class a property defined in
      the subclass overrides a property with the same name that is defined
      in the superclass. However, there are some cases where it is preferable
      to build up a property's value by merging the superclass property value
      with the subclass property's value. An example of this in use within Ember
      is the `queryParams` property of routes.
         Here is some sample code showing the difference between a merged
      property and a normal one:
         ```javascript
      import EmberObject from '@ember/object';
         const Bar = EmberObject.extend({
        // Configure which properties are to be merged
        mergedProperties: ['mergedProperty'],
           someNonMergedProperty: {
          nonMerged: 'superclass value of nonMerged'
        },
        mergedProperty: {
          page: { replace: false },
          limit: { replace: true }
        }
      });
         const FooBar = Bar.extend({
        someNonMergedProperty: {
          completelyNonMerged: 'subclass value of nonMerged'
        },
        mergedProperty: {
          limit: { replace: false }
        }
      });
         let fooBar = FooBar.create();
         fooBar.get('someNonMergedProperty');
      // => { completelyNonMerged: 'subclass value of nonMerged' }
      //
      // Note the entire object, including the nonMerged property of
      // the superclass object, has been replaced
         fooBar.get('mergedProperty');
      // => {
      //   page: {replace: false},
      //   limit: {replace: false}
      // }
      //
      // Note the page remains from the superclass, and the
      // `limit` property's value of `false` has been merged from
      // the subclass.
      ```
         This behavior is not available during object `create` calls. It is only
      available at `extend` time.
         In `Route` the `queryParams` property is merged.
         This feature is available for you to use throughout the Ember object model,
      although typical app developers are likely to use it infrequently. Since
      it changes expectations about behavior of properties, you should properly
      document its usage in each individual merged property (to not
      mislead your users to think they can override the property in a subclass).
         @property mergedProperties
      @type Array
      @default null
      @public
    */

      /**
      Destroyed object property flag.
         if this property is `true` the observers and bindings were already
      removed by the effect of calling the `destroy()` method.
         @property isDestroyed
      @default false
      @public
    */

      get isDestroyed() {
        return (0, _destroyable.isDestroyed)(this);
      }

      set isDestroyed(_value) {
        true &&
          !false &&
          (0, _debug.assert)(
            `You cannot set \`${this}.isDestroyed\` directly, please use \`.destroy()\`.`,
            false,
          );
      }
      /**
      Destruction scheduled flag. The `destroy()` method has been called.
         The object stays intact until the end of the run loop at which point
      the `isDestroyed` flag is set.
         @property isDestroying
      @default false
      @public
    */

      get isDestroying() {
        return (0, _destroyable.isDestroying)(this);
      }

      set isDestroying(_value) {
        true &&
          !false &&
          (0, _debug.assert)(
            `You cannot set \`${this}.isDestroying\` directly, please use \`.destroy()\`.`,
            false,
          );
      }
      /**
      Destroys an object by setting the `isDestroyed` flag and removing its
      metadata, which effectively destroys observers and bindings.
         If you try to set a property on a destroyed object, an exception will be
      raised.
         Note that destruction is scheduled for the end of the run loop and does not
      happen immediately.  It will set an isDestroying flag immediately.
         @method destroy
      @return {EmberObject} receiver
      @public
    */

      destroy() {
        // Used to ensure that manually calling `.destroy()` does not immediately call destroy again
        destroyCalled.add(this);

        try {
          (0, _destroyable.destroy)(this);
        } finally {
          destroyCalled.delete(this);
        }

        return this;
      }
      /**
      Override to implement teardown.
         @method willDestroy
      @public
    */

      willDestroy() {}
      /**
      Returns a string representation which attempts to provide more information
      than Javascript's `toString` typically does, in a generic way for all Ember
      objects.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend();
      person = Person.create();
      person.toString(); //=> "<Person:ember1024>"
      ```
         If the object's class is not defined on an Ember namespace, it will
      indicate it is a subclass of the registered superclass:
         ```javascript
      const Student = Person.extend();
      let student = Student.create();
      student.toString(); //=> "<(subclass of Person):ember1025>"
      ```
         If the method `toStringExtension` is defined, its return value will be
      included in the output.
         ```javascript
      const Teacher = Person.extend({
        toStringExtension() {
          return this.get('fullName');
        }
      });
      teacher = Teacher.create();
      teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
      ```
         @method toString
      @return {String} string representation
      @public
    */

      toString() {
        var extension = hasToStringExtension(this)
          ? `:${this.toStringExtension()}`
          : '';
        return `<${(0, _container.getFactoryFor)(this) || '(unknown)'}:${(0,
        _utils.guidFor)(this)}${extension}>`;
      }

      static extend() {
        var Class = class extends this {};

        for (
          var _len2 = arguments.length, mixins = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          mixins[_key2] = arguments[_key2];
        }

        reopen.apply(Class.PrototypeMixin, mixins);
        return Class;
      }

      static create() {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3];
        }

        var props = args[0];
        var instance;

        if (props !== undefined) {
          instance = new this((0, _owner.getOwner)(props));
          (0, _container.setFactoryFor)(
            instance,
            (0, _container.getFactoryFor)(props),
          );
        } else {
          instance = new this();
        }

        if (args.length <= 1) {
          initialize(instance, props);
        } else {
          initialize(instance, flattenProps.apply(this, args));
        }

        return instance;
      }
      /**
      Augments a constructor's prototype with additional
      properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         o = MyObject.create();
      o.get('name'); // 'an object'
         MyObject.reopen({
        say(msg) {
          console.log(msg);
        }
      });
         o2 = MyObject.create();
      o2.say('hello'); // logs "hello"
         o.say('goodbye'); // logs "goodbye"
      ```
         To add functions and properties to the constructor itself,
      see `reopenClass`
         @method reopen
      @for @ember/object
      @static
      @public
    */

      static reopen() {
        this.willReopen();

        for (
          var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4] = arguments[_key4];
        }

        reopen.apply(this.PrototypeMixin, args);
        return this;
      }

      static willReopen() {
        var p = this.prototype;

        if (wasApplied.has(p)) {
          wasApplied.delete(p); // If the base mixin already exists and was applied, create a new mixin to
          // make sure that it gets properly applied. Reusing the same mixin after
          // the first `proto` call will cause it to get skipped.

          if (prototypeMixinMap.has(this)) {
            prototypeMixinMap.set(
              this,
              _metal.Mixin.create(this.PrototypeMixin),
            );
          }
        }
      }
      /**
      Augments a constructor's own properties and functions:
         ```javascript
      import EmberObject from '@ember/object';
         const MyObject = EmberObject.extend({
        name: 'an object'
      });
         MyObject.reopenClass({
        canBuild: false
      });
         MyObject.canBuild; // false
      o = MyObject.create();
      ```
         In other words, this creates static properties and functions for the class.
      These are only available on the class and not on any instance of that class.
         ```javascript
      import EmberObject from '@ember/object';
         const Person = EmberObject.extend({
        name: '',
        sayHello() {
          alert(`Hello. My name is ${this.get('name')}`);
        }
      });
         Person.reopenClass({
        species: 'Homo sapiens',
           createPerson(name) {
          return Person.create({ name });
        }
      });
         let tom = Person.create({
        name: 'Tom Dale'
      });
      let yehuda = Person.createPerson('Yehuda Katz');
         tom.sayHello(); // "Hello. My name is Tom Dale"
      yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
      alert(Person.species); // "Homo sapiens"
      ```
         Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
      variables. They are only valid on `Person`.
         To add functions and properties to instances of
      a constructor by extending the constructor's prototype
      see `reopen`
         @method reopenClass
      @for @ember/object
      @static
      @public
    */

      static reopenClass() {
        for (
          var _len5 = arguments.length, mixins = new Array(_len5), _key5 = 0;
          _key5 < _len5;
          _key5++
        ) {
          mixins[_key5] = arguments[_key5];
        }

        (0, _metal.applyMixin)(this, mixins);
        return this;
      }

      static detect(obj) {
        if ('function' !== typeof obj) {
          return false;
        }

        while (obj) {
          if (obj === this) {
            return true;
          }

          obj = obj.superclass;
        }

        return false;
      }

      static detectInstance(obj) {
        return obj instanceof this;
      }
      /**
      In some cases, you may want to annotate computed properties with additional
      metadata about how they function or what values they operate on. For
      example, computed property functions may close over variables that are then
      no longer available for introspection.
         You can pass a hash of these values to a computed property like this:
         ```javascript
      import { computed } from '@ember/object';
         person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
      ```
         Once you've done this, you can retrieve the values saved to the computed
      property from your class like this:
         ```javascript
      MyClass.metaForProperty('person');
      ```
         This will return the original hash that was passed to `meta()`.
         @static
      @method metaForProperty
      @param key {String} property name
      @private
    */

      static metaForProperty(key) {
        var proto = this.proto(); // ensure prototype is initialized

        var possibleDesc = (0, _metal.descriptorForProperty)(proto, key);
        true &&
          !(possibleDesc !== undefined) &&
          (0, _debug.assert)(
            `metaForProperty() could not find a computed property with key '${key}'.`,
            possibleDesc !== undefined,
          );
        return possibleDesc._meta || {};
      }
      /**
      Iterate over each computed property for the class, passing its name
      and any associated metadata (see `metaForProperty`) to the callback.
         @static
      @method eachComputedProperty
      @param {Function} callback
      @param {Object} binding
      @private
    */

      static eachComputedProperty(callback, binding) {
        if (binding === void 0) {
          binding = this;
        }

        this.proto(); // ensure prototype is initialized

        var empty = {};
        (0, _meta2.meta)(this.prototype).forEachDescriptors(
          (name, descriptor) => {
            if (descriptor.enumerable) {
              var _meta = descriptor._meta || empty;

              callback.call(binding, name, _meta);
            }
          },
        );
      }

      static get PrototypeMixin() {
        var prototypeMixin = prototypeMixinMap.get(this);

        if (prototypeMixin === undefined) {
          prototypeMixin = _metal.Mixin.create();
          prototypeMixin.ownerConstructor = this;
          prototypeMixinMap.set(this, prototypeMixin);
        }

        return prototypeMixin;
      }

      static get superclass() {
        var c = Object.getPrototypeOf(this);
        return c !== Function.prototype ? c : undefined;
      }

      static proto() {
        var p = this.prototype;

        if (!wasApplied.has(p)) {
          wasApplied.add(p);
          var parent = this.superclass;

          if (parent) {
            parent.proto();
          } // If the prototype mixin exists, apply it. In the case of native classes,
          // it will not exist (unless the class has been reopened).

          if (prototypeMixinMap.has(this)) {
            this.PrototypeMixin.apply(p);
          }
        }

        return p;
      }

      static toString() {
        return `<${
          (0, _container.getFactoryFor)(this) || '(unknown)'
        }:constructor>`;
      }
    }

    CoreObject.isClass = true;
    CoreObject.isMethod = false;

    function flattenProps() {
      var initProperties = {};

      for (
        var _len6 = arguments.length, props = new Array(_len6), _key6 = 0;
        _key6 < _len6;
        _key6++
      ) {
        props[_key6] = arguments[_key6];
      }

      for (var properties of props) {
        true &&
          !!(properties instanceof _metal.Mixin) &&
          (0, _debug.assert)(
            'EmberObject.create no longer supports mixing in other ' +
              'definitions, use .extend & .create separately instead.',
            !(properties instanceof _metal.Mixin),
          );
        var keyNames = Object.keys(properties);

        for (var j = 0, k = keyNames.length; j < k; j++) {
          var keyName = keyNames[j];
          var value = properties[keyName];
          initProperties[keyName] = value;
        }
      }

      return initProperties;
    }

    if (
      true
      /* DEBUG */
    ) {
      /**
      Provides lookup-time type validation for injected properties.
         @private
      @method _onLookup
    */
      CoreObject._onLookup = function injectedPropertyAssertion(
        debugContainerKey,
      ) {
        var [type] = debugContainerKey.split(':');
        var proto = this.proto();

        for (var key in proto) {
          var desc = (0, _metal.descriptorForProperty)(proto, key);

          if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
            true &&
              !(
                type === 'controller' ||
                _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !==
                  'controller'
              ) &&
              (0, _debug.assert)(
                `Defining \`${key}\` as an injected controller property on a non-controller (\`${debugContainerKey}\`) is not allowed.`,
                type === 'controller' ||
                  _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter).type !==
                    'controller',
              );
          }
        }
      };
      /**
      Returns a hash of property names and container names that injected
      properties will lookup on the container lazily.
         @method _lazyInjections
      @return {Object} Hash of all lazy injected property keys to container names
      @private
    */

      CoreObject._lazyInjections = function () {
        var injections = {};
        var proto = this.proto();
        var key;
        var desc;

        for (key in proto) {
          desc = (0, _metal.descriptorForProperty)(proto, key);

          if (desc && _metal.DEBUG_INJECTION_FUNCTIONS.has(desc._getter)) {
            var {
              namespace,
              source,
              type,
              name,
            } = _metal.DEBUG_INJECTION_FUNCTIONS.get(desc._getter);

            injections[key] = {
              namespace,
              source,
              specifier: `${type}:${name || key}`,
            };
          }
        }

        return injections;
      };
    }

    var _default = CoreObject;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/system/namespace', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/utils',
    '@ember/debug',
    '@ember/-internals/runtime/lib/system/object',
  ], function (_exports, _metal, _utils, _debug, _object) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/application
  */
    // Preloaded into namespaces

    /**
    A Namespace is an object usually used to contain other objects or methods
    such as an application or framework. Create a namespace anytime you want
    to define one of these new containers.
  
    # Example Usage
  
    ```javascript
    MyFramework = Ember.Namespace.create({
      VERSION: '1.0.0'
    });
    ```
  
    @class Namespace
    @extends EmberObject
    @public
  */
    class Namespace extends _object.default {
      init(properties) {
        super.init(properties);
        (0, _metal.addNamespace)(this);
      }

      toString() {
        var existing_name =
          (0, _metal.get)(this, 'name') ||
          (0, _metal.get)(this, 'modulePrefix');

        if (existing_name) {
          true &&
            !(typeof existing_name === 'string') &&
            (0, _debug.assert)(
              "name wasn't a string",
              typeof existing_name === 'string',
            );
          return existing_name;
        }

        (0, _metal.findNamespaces)();
        var name = (0, _utils.getName)(this);

        if (name === undefined) {
          name = (0, _utils.guidFor)(this);
          (0, _utils.setName)(this, name);
        }

        return name;
      }

      nameClasses() {
        (0, _metal.processNamespace)(this);
      }

      destroy() {
        (0, _metal.removeNamespace)(this);
        return super.destroy();
      }
    }

    Namespace.NAMESPACES = _metal.NAMESPACES;
    Namespace.NAMESPACES_BY_ID = _metal.NAMESPACES_BY_ID;
    Namespace.processAll = _metal.processAllNamespaces;
    Namespace.byName = _metal.findNamespace; // Declare on the prototype to have a single shared value.

    Namespace.prototype.isNamespace = true;
    var _default = Namespace;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/system/object', [
    'exports',
    '@ember/-internals/container',
    '@ember/-internals/utils',
    '@ember/-internals/metal',
    '@ember/-internals/runtime/lib/system/core_object',
    '@ember/-internals/runtime/lib/mixins/observable',
    '@ember/debug',
  ], function (
    _exports,
    _container,
    _utils,
    _metal,
    _core_object,
    _observable,
    _debug,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = _exports.FrameworkObject = void 0;

    /**
  @module @ember/object
  */
    var _a;

    class EmberObject extends _core_object.default.extend(_observable.default) {
      get _debugContainerKey() {
        var factory = (0, _container.getFactoryFor)(this);
        return factory !== undefined && factory.fullName;
      }
    }

    var _default = EmberObject;
    _exports.default = _default;
    var FrameworkObject = class FrameworkObject extends EmberObject {};
    _exports.FrameworkObject = FrameworkObject;

    if (
      true
      /* DEBUG */
    ) {
      var INIT_WAS_CALLED = Symbol('INIT_WAS_CALLED');
      var ASSERT_INIT_WAS_CALLED = (0, _utils.symbol)('ASSERT_INIT_WAS_CALLED');
      _exports.FrameworkObject = FrameworkObject = class DebugFrameworkObject extends (
        EmberObject
      ) {
        constructor() {
          super(...arguments);
          this[_a] = false;
        }

        init(properties) {
          super.init(properties);
          this[INIT_WAS_CALLED] = true;
        }

        [((_a = INIT_WAS_CALLED), ASSERT_INIT_WAS_CALLED)]() {
          true &&
            !this[INIT_WAS_CALLED] &&
            (0, _debug.assert)(
              `You must call \`super.init(...arguments);\` or \`this._super(...arguments)\` when overriding \`init\` on a framework object. Please update ${this} to call \`super.init(...arguments);\` from \`init\` when using native classes or \`this._super(...arguments)\` when using \`EmberObject.extend()\`.`,
              this[INIT_WAS_CALLED],
            );
        }
      };
      (0, _metal.addListener)(
        FrameworkObject.prototype,
        'init',
        null,
        ASSERT_INIT_WAS_CALLED,
      );
    }
  });
  define('@ember/-internals/runtime/lib/system/object_proxy', [
    'exports',
    '@ember/-internals/runtime/lib/system/object',
    '@ember/-internals/runtime/lib/mixins/-proxy',
  ], function (_exports, _object, _proxy) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    class ObjectProxy extends _object.default {}

    ObjectProxy.PrototypeMixin.reopen(_proxy.default);
    var _default = ObjectProxy;
    _exports.default = _default;
  });
  define('@ember/-internals/runtime/lib/type-of', [
    'exports',
    '@ember/-internals/runtime/lib/system/core_object',
  ], function (_exports, _core_object) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.typeOf = typeOf;
    // ........................................
    // TYPING & ARRAY MESSAGING
    //
    var TYPE_MAP = {
      '[object Boolean]': 'boolean',
      '[object Number]': 'number',
      '[object String]': 'string',
      '[object Function]': 'function',
      '[object AsyncFunction]': 'function',
      '[object Array]': 'array',
      '[object Date]': 'date',
      '[object RegExp]': 'regexp',
      '[object Object]': 'object',
      '[object FileList]': 'filelist',
    };
    var { toString } = Object.prototype;
    /**
   @module @ember/utils
  */

    /**
    Returns a consistent type for the passed object.
  
    Use this instead of the built-in `typeof` to get the type of an item.
    It will return the same result across all browsers and includes a bit
    more detail. Here is what will be returned:
  
        | Return Value  | Meaning                                              |
        |---------------|------------------------------------------------------|
        | 'string'      | String primitive or String object.                   |
        | 'number'      | Number primitive or Number object.                   |
        | 'boolean'     | Boolean primitive or Boolean object.                 |
        | 'null'        | Null value                                           |
        | 'undefined'   | Undefined value                                      |
        | 'function'    | A function                                           |
        | 'array'       | An instance of Array                                 |
        | 'regexp'      | An instance of RegExp                                |
        | 'date'        | An instance of Date                                  |
        | 'filelist'    | An instance of FileList                              |
        | 'class'       | An Ember class (created using EmberObject.extend())  |
        | 'instance'    | An Ember object instance                             |
        | 'error'       | An instance of the Error object                      |
        | 'object'      | A JavaScript object not inheriting from EmberObject  |
  
    Examples:
  
    ```javascript
    import { A } from '@ember/array';
    import { typeOf } from '@ember/utils';
    import EmberObject from '@ember/object';
  
    typeOf();                       // 'undefined'
    typeOf(null);                   // 'null'
    typeOf(undefined);              // 'undefined'
    typeOf('michael');              // 'string'
    typeOf(new String('michael'));  // 'string'
    typeOf(101);                    // 'number'
    typeOf(new Number(101));        // 'number'
    typeOf(true);                   // 'boolean'
    typeOf(new Boolean(true));      // 'boolean'
    typeOf(A);                      // 'function'
    typeOf(A());                    // 'array'
    typeOf([1, 2, 90]);             // 'array'
    typeOf(/abc/);                  // 'regexp'
    typeOf(new Date());             // 'date'
    typeOf(event.target.files);     // 'filelist'
    typeOf(EmberObject.extend());   // 'class'
    typeOf(EmberObject.create());   // 'instance'
    typeOf(new Error('teamocil'));  // 'error'
  
    // 'normal' JavaScript object
    typeOf({ a: 'b' });             // 'object'
    ```
  
    @method typeOf
    @for @ember/utils
    @param item the item to check
    @return {String} the type
    @public
    @static
  */

    function typeOf(item) {
      if (item === null) {
        return 'null';
      }

      if (item === undefined) {
        return 'undefined';
      }

      var ret = TYPE_MAP[toString.call(item)] || 'object';

      if (ret === 'function') {
        if (_core_object.default.detect(item)) {
          ret = 'class';
        }
      } else if (ret === 'object') {
        if (item instanceof Error) {
          ret = 'error';
        } else if (item instanceof _core_object.default) {
          ret = 'instance';
        } else if (item instanceof Date) {
          ret = 'date';
        }
      }

      return ret;
    }
  });
  define('@ember/-internals/utils/index', [
    'exports',
    '@glimmer/util',
    '@ember/debug',
  ], function (_exports, _util, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.ROOT = _exports.GUID_KEY = _exports.Cache = void 0;
    _exports.canInvoke = canInvoke;
    _exports.checkHasSuper = void 0;
    _exports.dictionary = makeDictionary;
    _exports.enumerableSymbol = enumerableSymbol;
    _exports.generateGuid = generateGuid;
    _exports.getDebugName = void 0;
    _exports.getName = getName;
    _exports.guidFor = guidFor;
    _exports.inspect = inspect;
    _exports.intern = intern;
    _exports.isEmberArray = isEmberArray;
    _exports.isInternalSymbol = isInternalSymbol;
    _exports.isObject = isObject;
    _exports.isProxy = isProxy;
    _exports.lookupDescriptor = lookupDescriptor;
    _exports.makeArray = makeArray;
    _exports.observerListenerMetaFor = observerListenerMetaFor;
    _exports.setEmberArray = setEmberArray;
    _exports.setListeners = setListeners;
    _exports.setName = setName;
    _exports.setObservers = setObservers;
    _exports.setProxy = setProxy;
    _exports.teardownMandatorySetter = _exports.symbol = _exports.setupMandatorySetter = _exports.setWithMandatorySetter = void 0;
    _exports.toString = toString;
    _exports.uuid = uuid;
    _exports.wrap = wrap;

    /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */
    function intern(str) {
      var obj = {};
      obj[str] = 1;

      for (var key in obj) {
        if (key === str) {
          return key;
        }
      }

      return str;
    }
    /**
    Returns whether Type(value) is Object.
  
    Useful for checking whether a value is a valid WeakMap key.
  
    Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
          https://tc39.github.io/ecma262/#sec-weakmap.prototype.set
  
    @private
    @function isObject
  */

    function isObject(value) {
      return (
        value !== null &&
        (typeof value === 'object' || typeof value === 'function')
      );
    }
    /**
   @module @ember/object
  */

    /**
   @private
   @return {Number} the uuid
   */

    var _uuid = 0;
    /**
   Generates a universally unique identifier. This method
   is used internally by Ember for assisting with
   the generation of GUID's and other unique identifiers.
  
   @public
   @return {Number} [description]
   */

    function uuid() {
      return ++_uuid;
    }
    /**
   Prefix used for guids through out Ember.
   @private
   @property GUID_PREFIX
   @for Ember
   @type String
   @final
   */

    var GUID_PREFIX = 'ember'; // Used for guid generation...

    var OBJECT_GUIDS = new WeakMap();
    var NON_OBJECT_GUIDS = new Map();
    /**
    A unique key used to assign guids and other private metadata to objects.
    If you inspect an object in your browser debugger you will often see these.
    They can be safely ignored.
  
    On browsers that support it, these properties are added with enumeration
    disabled so they won't show up when you iterate over your properties.
  
    @private
    @property GUID_KEY
    @for Ember
    @type String
    @final
  */

    var GUID_KEY = intern(`__ember${Date.now()}`);
    /**
    Generates a new guid, optionally saving the guid to the object that you
    pass in. You will rarely need to use this method. Instead you should
    call `guidFor(obj)`, which return an existing guid if available.
  
    @private
    @method generateGuid
    @static
    @for @ember/object/internals
    @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
      be saved on the object and reused whenever you pass the same object
      again.
  
      If no object is passed, just generate a new guid.
    @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
      separate the guid into separate namespaces.
    @return {String} the guid
  */

    _exports.GUID_KEY = GUID_KEY;

    function generateGuid(obj, prefix) {
      if (prefix === void 0) {
        prefix = GUID_PREFIX;
      }

      var guid = prefix + uuid().toString();

      if (isObject(obj)) {
        OBJECT_GUIDS.set(obj, guid);
      }

      return guid;
    }
    /**
    Returns a unique id for the object. If the object does not yet have a guid,
    one will be assigned to it. You can call this on any object,
    `EmberObject`-based or not.
  
    You can also use this method on DOM Element objects.
  
    @public
    @static
    @method guidFor
    @for @ember/object/internals
    @param {Object} obj any object, string, number, Element, or primitive
    @return {String} the unique guid for this instance.
  */

    function guidFor(value) {
      var guid;

      if (isObject(value)) {
        guid = OBJECT_GUIDS.get(value);

        if (guid === undefined) {
          guid = `${GUID_PREFIX}${uuid()}`;
          OBJECT_GUIDS.set(value, guid);
        }
      } else {
        guid = NON_OBJECT_GUIDS.get(value);

        if (guid === undefined) {
          var type = typeof value;

          if (type === 'string') {
            guid = `st${uuid()}`;
          } else if (type === 'number') {
            guid = `nu${uuid()}`;
          } else if (type === 'symbol') {
            guid = `sy${uuid()}`;
          } else {
            guid = `(${value})`;
          }

          NON_OBJECT_GUIDS.set(value, guid);
        }
      }

      return guid;
    }

    var GENERATED_SYMBOLS = [];

    function isInternalSymbol(possibleSymbol) {
      return GENERATED_SYMBOLS.indexOf(possibleSymbol) !== -1;
    } // Some legacy symbols still need to be enumerable for a variety of reasons.
    // This code exists for that, and as a fallback in IE11. In general, prefer
    // `symbol` below when creating a new symbol.

    function enumerableSymbol(debugName) {
      // TODO: Investigate using platform symbols, but we do not
      // want to require non-enumerability for this API, which
      // would introduce a large cost.
      var id = GUID_KEY + Math.floor(Math.random() * Date.now()).toString();
      var symbol = intern(`__${debugName}${id}__`);

      if (
        true
        /* DEBUG */
      ) {
        GENERATED_SYMBOLS.push(symbol);
      }

      return symbol;
    }

    var symbol = Symbol; // the delete is meant to hint at runtimes that this object should remain in
    // dictionary mode. This is clearly a runtime specific hack, but currently it
    // appears worthwhile in some usecases. Please note, these deletes do increase
    // the cost of creation dramatically over a plain Object.create. And as this
    // only makes sense for long-lived dictionaries that aren't instantiated often.

    _exports.symbol = symbol;

    function makeDictionary(parent) {
      var dict = Object.create(parent);
      dict['_dict'] = null;
      delete dict['_dict'];
      return dict;
    }

    var getDebugName;

    if (
      true
      /* DEBUG */
    ) {
      var getFunctionName = (fn) => {
        var functionName = fn.name;

        if (functionName === undefined) {
          var match = Function.prototype.toString
            .call(fn)
            .match(/function (\w+)\s*\(/);
          functionName = (match && match[1]) || '';
        }

        return functionName.replace(/^bound /, '');
      };

      var getObjectName = (obj) => {
        var name;
        var className;

        if (obj.constructor && obj.constructor !== Object) {
          className = getFunctionName(obj.constructor);
        }

        if (
          'toString' in obj &&
          obj.toString !== Object.prototype.toString &&
          obj.toString !== Function.prototype.toString
        ) {
          name = obj.toString();
        } // If the class has a decent looking name, and the `toString` is one of the
        // default Ember toStrings, replace the constructor portion of the toString
        // with the class name. We check the length of the class name to prevent doing
        // this when the value is minified.

        if (
          name &&
          name.match(/<.*:ember\d+>/) &&
          className &&
          className[0] !== '_' &&
          className.length > 2 &&
          className !== 'Class'
        ) {
          return name.replace(/<.*:/, `<${className}:`);
        }

        return name || className;
      };

      var getPrimitiveName = (value) => {
        return String(value);
      };

      getDebugName = (value) => {
        if (typeof value === 'function') {
          return getFunctionName(value) || `(unknown function)`;
        } else if (typeof value === 'object' && value !== null) {
          return getObjectName(value) || `(unknown object)`;
        } else {
          return getPrimitiveName(value);
        }
      };
    }

    var getDebugName$1 = getDebugName;
    _exports.getDebugName = getDebugName$1;
    var HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
    var fnToString = Function.prototype.toString;

    var checkHasSuper = (() => {
      var sourceAvailable =
        fnToString
          .call(function () {
            return this;
          })
          .indexOf('return this') > -1;

      if (sourceAvailable) {
        return function checkHasSuper(func) {
          return HAS_SUPER_PATTERN.test(fnToString.call(func));
        };
      }

      return function checkHasSuper() {
        return true;
      };
    })();

    _exports.checkHasSuper = checkHasSuper;
    var HAS_SUPER_MAP = new WeakMap();
    var ROOT = Object.freeze(function () {});
    _exports.ROOT = ROOT;
    HAS_SUPER_MAP.set(ROOT, false);

    function hasSuper(func) {
      var hasSuper = HAS_SUPER_MAP.get(func);

      if (hasSuper === undefined) {
        hasSuper = checkHasSuper(func);
        HAS_SUPER_MAP.set(func, hasSuper);
      }

      return hasSuper;
    }

    class ObserverListenerMeta {
      constructor() {
        this.listeners = undefined;
        this.observers = undefined;
      }
    }

    var OBSERVERS_LISTENERS_MAP = new WeakMap();

    function createObserverListenerMetaFor(fn) {
      var meta = OBSERVERS_LISTENERS_MAP.get(fn);

      if (meta === undefined) {
        meta = new ObserverListenerMeta();
        OBSERVERS_LISTENERS_MAP.set(fn, meta);
      }

      return meta;
    }

    function observerListenerMetaFor(fn) {
      return OBSERVERS_LISTENERS_MAP.get(fn);
    }

    function setObservers(func, observers) {
      var meta = createObserverListenerMetaFor(func);
      meta.observers = observers;
    }

    function setListeners(func, listeners) {
      var meta = createObserverListenerMetaFor(func);
      meta.listeners = listeners;
    }

    var IS_WRAPPED_FUNCTION_SET = new _util._WeakSet();
    /**
    Wraps the passed function so that `this._super` will point to the superFunc
    when the function is invoked. This is the primitive we use to implement
    calls to super.
  
    @private
    @method wrap
    @for Ember
    @param {Function} func The function to call
    @param {Function} superFunc The super function.
    @return {Function} wrapped function.
  */

    function wrap(func, superFunc) {
      if (!hasSuper(func)) {
        return func;
      } // ensure an unwrapped super that calls _super is wrapped with a terminal _super

      if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
        return _wrap(func, _wrap(superFunc, ROOT));
      }

      return _wrap(func, superFunc);
    }

    function _wrap(func, superFunc) {
      function superWrapper() {
        var orig = this._super;
        this._super = superFunc;
        var ret = func.apply(this, arguments);
        this._super = orig;
        return ret;
      }

      IS_WRAPPED_FUNCTION_SET.add(superWrapper);
      var meta = OBSERVERS_LISTENERS_MAP.get(func);

      if (meta !== undefined) {
        OBSERVERS_LISTENERS_MAP.set(superWrapper, meta);
      }

      return superWrapper;
    }

    var { toString: objectToString } = Object.prototype;
    var { toString: functionToString } = Function.prototype;
    var { isArray } = Array;
    var { keys: objectKeys } = Object;
    var { stringify } = JSON;
    var LIST_LIMIT = 100;
    var DEPTH_LIMIT = 4;
    var SAFE_KEY = /^[\w$]+$/;
    /**
   @module @ember/debug
  */

    /**
    Convenience method to inspect an object. This method will attempt to
    convert the object into a useful string description.
  
    It is a pretty simple implementation. If you want something more robust,
    use something like JSDump: https://github.com/NV/jsDump
  
    @method inspect
    @static
    @param {Object} obj The object you want to inspect.
    @return {String} A description of the object
    @since 1.4.0
    @private
  */

    function inspect(obj) {
      // detect Node util.inspect call inspect(depth: number, opts: object)
      if (typeof obj === 'number' && arguments.length === 2) {
        return this;
      }

      return inspectValue(obj, 0);
    }

    function inspectValue(value, depth, seen) {
      var valueIsArray = false;

      switch (typeof value) {
        case 'undefined':
          return 'undefined';

        case 'object':
          if (value === null) return 'null';

          if (isArray(value)) {
            valueIsArray = true;
            break;
          } // is toString Object.prototype.toString or undefined then traverse

          if (
            value.toString === objectToString ||
            value.toString === undefined
          ) {
            break;
          } // custom toString

          return value.toString();

        case 'function':
          return value.toString === functionToString
            ? value.name
              ? `[Function:${value.name}]`
              : `[Function]`
            : value.toString();

        case 'string':
          return stringify(value);

        case 'symbol':
        case 'boolean':
        case 'number':
        default:
          return value.toString();
      }

      if (seen === undefined) {
        seen = new _util._WeakSet();
      } else {
        if (seen.has(value)) return `[Circular]`;
      }

      seen.add(value);
      return valueIsArray
        ? inspectArray(value, depth + 1, seen)
        : inspectObject(value, depth + 1, seen);
    }

    function inspectKey(key) {
      return SAFE_KEY.test(key) ? key : stringify(key);
    }

    function inspectObject(obj, depth, seen) {
      if (depth > DEPTH_LIMIT) {
        return '[Object]';
      }

      var s = '{';
      var keys = objectKeys(obj);

      for (var i = 0; i < keys.length; i++) {
        s += i === 0 ? ' ' : ', ';

        if (i >= LIST_LIMIT) {
          s += `... ${keys.length - LIST_LIMIT} more keys`;
          break;
        }

        var key = keys[i];
        true && !key && (0, _debug.assert)('has key', key); // Looping over array

        s += `${inspectKey(String(key))}: ${inspectValue(
          obj[key],
          depth,
          seen,
        )}`;
      }

      s += ' }';
      return s;
    }

    function inspectArray(arr, depth, seen) {
      if (depth > DEPTH_LIMIT) {
        return '[Array]';
      }

      var s = '[';

      for (var i = 0; i < arr.length; i++) {
        s += i === 0 ? ' ' : ', ';

        if (i >= LIST_LIMIT) {
          s += `... ${arr.length - LIST_LIMIT} more items`;
          break;
        }

        s += inspectValue(arr[i], depth, seen);
      }

      s += ' ]';
      return s;
    }

    function lookupDescriptor(obj, keyName) {
      var current = obj;

      do {
        var descriptor = Object.getOwnPropertyDescriptor(current, keyName);

        if (descriptor !== undefined) {
          return descriptor;
        }

        current = Object.getPrototypeOf(current);
      } while (current !== null);

      return null;
    }
    /**
    Checks to see if the `methodName` exists on the `obj`.
  
    ```javascript
    let foo = { bar: function() { return 'bar'; }, baz: null };
  
    Ember.canInvoke(foo, 'bar'); // true
    Ember.canInvoke(foo, 'baz'); // false
    Ember.canInvoke(foo, 'bat'); // false
    ```
  
    @method canInvoke
    @for Ember
    @param {Object} obj The object to check for the method
    @param {String} methodName The method name to check for
    @return {Boolean}
    @private
  */

    function canInvoke(obj, methodName) {
      return obj != null && typeof obj[methodName] === 'function';
    }
    /**
    @module @ember/utils
  */

    var { isArray: isArray$1 } = Array;

    function makeArray(obj) {
      if (obj === null || obj === undefined) {
        return [];
      }

      return isArray$1(obj) ? obj : [obj];
    }

    var NAMES = new WeakMap();

    function setName(obj, name) {
      if (isObject(obj)) NAMES.set(obj, name);
    }

    function getName(obj) {
      return NAMES.get(obj);
    }

    var objectToString$1 = Object.prototype.toString;

    function isNone(obj) {
      return obj === null || obj === undefined;
    }
    /*
   A `toString` util function that supports objects without a `toString`
   method, e.g. an object created with `Object.create(null)`.
  */

    function toString(obj) {
      if (typeof obj === 'string') {
        return obj;
      }

      if (null === obj) return 'null';
      if (undefined === obj) return 'undefined';

      if (Array.isArray(obj)) {
        // Reimplement Array.prototype.join according to spec (22.1.3.13)
        // Changing ToString(element) with this safe version of ToString.
        var r = '';

        for (var k = 0; k < obj.length; k++) {
          if (k > 0) {
            r += ',';
          }

          if (!isNone(obj[k])) {
            r += toString(obj[k]);
          }
        }

        return r;
      }

      if (typeof obj.toString === 'function') {
        return obj.toString();
      }

      return objectToString$1.call(obj);
    }

    var PROXIES = new _util._WeakSet();

    function isProxy(value) {
      if (isObject(value)) {
        return PROXIES.has(value);
      }

      return false;
    }

    function setProxy(object) {
      if (isObject(object)) {
        PROXIES.add(object);
      }
    }

    class Cache {
      constructor(limit, func, store) {
        this.limit = limit;
        this.func = func;
        this.store = store;
        this.size = 0;
        this.misses = 0;
        this.hits = 0;
        this.store = store || new Map();
      }

      get(key) {
        if (this.store.has(key)) {
          this.hits++;
          return this.store.get(key);
        } else {
          this.misses++;
          return this.set(key, this.func(key));
        }
      }

      set(key, value) {
        if (this.limit > this.size) {
          this.size++;
          this.store.set(key, value);
        }

        return value;
      }

      purge() {
        this.store.clear();
        this.size = 0;
        this.hits = 0;
        this.misses = 0;
      }
    }

    _exports.Cache = Cache;
    var EMBER_ARRAYS = new _util._WeakSet();

    function setEmberArray(obj) {
      EMBER_ARRAYS.add(obj);
    }

    function isEmberArray(obj) {
      return EMBER_ARRAYS.has(obj);
    }

    var setupMandatorySetter;
    _exports.setupMandatorySetter = setupMandatorySetter;
    var teardownMandatorySetter;
    _exports.teardownMandatorySetter = teardownMandatorySetter;
    var setWithMandatorySetter;
    _exports.setWithMandatorySetter = setWithMandatorySetter;

    function isElementKey(key) {
      return typeof key === 'number' ? isPositiveInt(key) : isStringInt(key);
    }

    function isStringInt(str) {
      var num = parseInt(str, 10);
      return isPositiveInt(num) && str === String(num);
    }

    function isPositiveInt(num) {
      return num >= 0 && num % 1 === 0;
    }

    if (
      true
      /* DEBUG */
    ) {
      var SEEN_TAGS = new _util._WeakSet();
      var MANDATORY_SETTERS = new WeakMap();

      var _propertyIsEnumerable = function (obj, key) {
        return Object.prototype.propertyIsEnumerable.call(obj, key);
      };

      _exports.setupMandatorySetter = setupMandatorySetter = function (
        tag,
        obj,
        keyName,
      ) {
        if (SEEN_TAGS.has(tag)) {
          return;
        }

        SEEN_TAGS.add(tag);

        if (Array.isArray(obj) && isElementKey(keyName)) {
          return;
        }

        var desc = lookupDescriptor(obj, keyName) || {};

        if (desc.get || desc.set) {
          // if it has a getter or setter, we can't install the mandatory setter.
          // native setters are allowed, we have to assume that they will resolve
          // to tracked properties.
          return;
        }

        if (desc && (!desc.configurable || !desc.writable)) {
          // if it isn't writable anyways, so we shouldn't provide the setter.
          // if it isn't configurable, we can't overwrite it anyways.
          return;
        }

        var setters = MANDATORY_SETTERS.get(obj);

        if (setters === undefined) {
          setters = {};
          MANDATORY_SETTERS.set(obj, setters);
        }

        desc.hadOwnProperty = Object.hasOwnProperty.call(obj, keyName);
        setters[keyName] = desc;
        Object.defineProperty(obj, keyName, {
          configurable: true,
          enumerable: _propertyIsEnumerable(obj, keyName),

          get() {
            if (desc.get) {
              return desc.get.call(this);
            } else {
              return desc.value;
            }
          },

          set(value) {
            true &&
              !false &&
              (0, _debug.assert)(
                `You attempted to update ${this}.${String(
                  keyName,
                )} to "${String(
                  value,
                )}", but it is being tracked by a tracking context, such as a template, computed property, or observer. In order to make sure the context updates properly, you must invalidate the property when updating it. You can mark the property as \`@tracked\`, or use \`@ember/object#set\` to do this.`,
              );
          },
        });
      };

      _exports.teardownMandatorySetter = teardownMandatorySetter = function (
        obj,
        keyName,
      ) {
        var setters = MANDATORY_SETTERS.get(obj);

        if (setters !== undefined && setters[keyName] !== undefined) {
          Object.defineProperty(obj, keyName, setters[keyName]);
          delete setters[keyName];
        }
      };

      _exports.setWithMandatorySetter = setWithMandatorySetter = function (
        obj,
        keyName,
        value,
      ) {
        var setters = MANDATORY_SETTERS.get(obj);

        if (setters !== undefined && setters[keyName] !== undefined) {
          var setter = setters[keyName];

          if (setter.set) {
            setter.set.call(obj, value);
          } else {
            setter.value = value; // If the object didn't have own property before, it would have changed
            // the enumerability after setting the value the first time.

            if (!setter.hadOwnProperty) {
              var desc = lookupDescriptor(obj, keyName);
              desc.enumerable = true;
              Object.defineProperty(obj, keyName, desc);
            }
          }
        } else {
          obj[keyName] = value;
        }
      };
    }
    /*
   This package will be eagerly parsed and should have no dependencies on external
   packages.
  
   It is intended to be used to share utility methods that will be needed
   by every Ember application (and is **not** a dumping ground of useful utilities).
  
   Utility methods that are needed in < 80% of cases should be placed
   elsewhere (so they can be lazily evaluated / parsed).
  */
  });
  define('@ember/-internals/utils/types', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
  });
  define('@ember/-internals/views/index', [
    'exports',
    '@ember/-internals/views/lib/system/utils',
    '@ember/-internals/views/lib/system/event_dispatcher',
    '@ember/-internals/views/lib/component_lookup',
    '@ember/-internals/views/lib/views/core_view',
    '@ember/-internals/views/lib/mixins/class_names_support',
    '@ember/-internals/views/lib/mixins/child_views_support',
    '@ember/-internals/views/lib/mixins/view_state_support',
    '@ember/-internals/views/lib/mixins/view_support',
    '@ember/-internals/views/lib/mixins/action_support',
    '@ember/-internals/views/lib/compat/attrs',
    '@ember/-internals/views/lib/system/action_manager',
  ], function (
    _exports,
    _utils,
    _event_dispatcher,
    _component_lookup,
    _core_view,
    _class_names_support,
    _child_views_support,
    _view_state_support,
    _view_support,
    _action_support,
    _attrs,
    _action_manager,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'ActionManager', {
      enumerable: true,
      get: function () {
        return _action_manager.default;
      },
    });
    Object.defineProperty(_exports, 'ActionSupport', {
      enumerable: true,
      get: function () {
        return _action_support.default;
      },
    });
    Object.defineProperty(_exports, 'ChildViewsSupport', {
      enumerable: true,
      get: function () {
        return _child_views_support.default;
      },
    });
    Object.defineProperty(_exports, 'ClassNamesSupport', {
      enumerable: true,
      get: function () {
        return _class_names_support.default;
      },
    });
    Object.defineProperty(_exports, 'ComponentLookup', {
      enumerable: true,
      get: function () {
        return _component_lookup.default;
      },
    });
    Object.defineProperty(_exports, 'CoreView', {
      enumerable: true,
      get: function () {
        return _core_view.default;
      },
    });
    Object.defineProperty(_exports, 'EventDispatcher', {
      enumerable: true,
      get: function () {
        return _event_dispatcher.default;
      },
    });
    Object.defineProperty(_exports, 'MUTABLE_CELL', {
      enumerable: true,
      get: function () {
        return _attrs.MUTABLE_CELL;
      },
    });
    Object.defineProperty(_exports, 'ViewMixin', {
      enumerable: true,
      get: function () {
        return _view_support.default;
      },
    });
    Object.defineProperty(_exports, 'ViewStateSupport', {
      enumerable: true,
      get: function () {
        return _view_state_support.default;
      },
    });
    Object.defineProperty(_exports, 'addChildView', {
      enumerable: true,
      get: function () {
        return _utils.addChildView;
      },
    });
    Object.defineProperty(_exports, 'clearElementView', {
      enumerable: true,
      get: function () {
        return _utils.clearElementView;
      },
    });
    Object.defineProperty(_exports, 'clearViewElement', {
      enumerable: true,
      get: function () {
        return _utils.clearViewElement;
      },
    });
    Object.defineProperty(_exports, 'constructStyleDeprecationMessage', {
      enumerable: true,
      get: function () {
        return _utils.constructStyleDeprecationMessage;
      },
    });
    Object.defineProperty(_exports, 'getChildViews', {
      enumerable: true,
      get: function () {
        return _utils.getChildViews;
      },
    });
    Object.defineProperty(_exports, 'getElementView', {
      enumerable: true,
      get: function () {
        return _utils.getElementView;
      },
    });
    Object.defineProperty(_exports, 'getRootViews', {
      enumerable: true,
      get: function () {
        return _utils.getRootViews;
      },
    });
    Object.defineProperty(_exports, 'getViewBoundingClientRect', {
      enumerable: true,
      get: function () {
        return _utils.getViewBoundingClientRect;
      },
    });
    Object.defineProperty(_exports, 'getViewBounds', {
      enumerable: true,
      get: function () {
        return _utils.getViewBounds;
      },
    });
    Object.defineProperty(_exports, 'getViewClientRects', {
      enumerable: true,
      get: function () {
        return _utils.getViewClientRects;
      },
    });
    Object.defineProperty(_exports, 'getViewElement', {
      enumerable: true,
      get: function () {
        return _utils.getViewElement;
      },
    });
    Object.defineProperty(_exports, 'getViewId', {
      enumerable: true,
      get: function () {
        return _utils.getViewId;
      },
    });
    Object.defineProperty(_exports, 'isSimpleClick', {
      enumerable: true,
      get: function () {
        return _utils.isSimpleClick;
      },
    });
    Object.defineProperty(_exports, 'setElementView', {
      enumerable: true,
      get: function () {
        return _utils.setElementView;
      },
    });
    Object.defineProperty(_exports, 'setViewElement', {
      enumerable: true,
      get: function () {
        return _utils.setViewElement;
      },
    });
  });
  define('@ember/-internals/views/lib/compat/attrs', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.MUTABLE_CELL = void 0;
    var MUTABLE_CELL = Symbol('MUTABLE_CELL');
    _exports.MUTABLE_CELL = MUTABLE_CELL;
  });
  define('@ember/-internals/views/lib/compat/fallback-view-registry', [
    'exports',
    '@ember/-internals/utils',
  ], function (_exports, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var _default = (0, _utils.dictionary)(null);

    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/component_lookup', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var _default = _runtime.Object.extend({
      componentFor(name, owner) {
        var fullName = `component:${name}`;
        return owner.factoryFor(fullName);
      },

      layoutFor(name, owner, options) {
        var templateFullName = `template:components/${name}`;
        return owner.lookup(templateFullName, options);
      },
    });

    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/mixins/action_support', [
    'exports',
    '@ember/-internals/utils',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _utils, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
   @module ember
  */
    var ActionSupport = _metal.Mixin.create({
      send(actionName) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        true &&
          !(!this.isDestroying && !this.isDestroyed) &&
          (0, _debug.assert)(
            `Attempted to call .send() with the action '${actionName}' on the destroyed object '${this}'.`,
            !this.isDestroying && !this.isDestroyed,
          );
        var action = this.actions && this.actions[actionName];

        if (action) {
          var shouldBubble = action.apply(this, args) === true;

          if (!shouldBubble) {
            return;
          }
        }

        var target = (0, _metal.get)(this, 'target');

        if (target) {
          true &&
            !(typeof target.send === 'function') &&
            (0, _debug.assert)(
              `The \`target\` for ${this} (${target}) does not have a \`send\` method`,
              typeof target.send === 'function',
            );
          target.send(...arguments);
        } else {
          true &&
            !action &&
            (0, _debug.assert)(
              `${(0, _utils.inspect)(
                this,
              )} had no action handler for: ${actionName}`,
              action,
            );
        }
      },
    });

    var _default = ActionSupport;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/mixins/child_views_support', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/views/lib/system/utils',
  ], function (_exports, _metal, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var ChildViewsSupport = _metal.Mixin.create({
      /**
      Array of child views. You should never edit this array directly.
         @property childViews
      @type Array
      @default []
      @private
    */
      childViews: (0, _metal.nativeDescDecorator)({
        configurable: false,
        enumerable: false,

        get() {
          return (0, _utils.getChildViews)(this);
        },
      }),

      appendChild(view) {
        (0, _utils.addChildView)(this, view);
      },
    });

    var _default = ChildViewsSupport;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/mixins/class_names_support', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var EMPTY_ARRAY = Object.freeze([]);

    var ClassNamesSupport = _metal.Mixin.create({
      concatenatedProperties: ['classNames', 'classNameBindings'],

      init() {
        this._super(...arguments);

        true &&
          !(
            (0, _metal.descriptorForProperty)(this, 'classNameBindings') ===
              undefined && Array.isArray(this.classNameBindings)
          ) &&
          (0, _debug.assert)(
            `Only arrays are allowed for 'classNameBindings'`,
            (0, _metal.descriptorForProperty)(this, 'classNameBindings') ===
              undefined && Array.isArray(this.classNameBindings),
          );
        true &&
          !(
            (0, _metal.descriptorForProperty)(this, 'classNames') ===
              undefined && Array.isArray(this.classNames)
          ) &&
          (0, _debug.assert)(
            `Only arrays of static class strings are allowed for 'classNames'. For dynamic classes, use 'classNameBindings'.`,
            (0, _metal.descriptorForProperty)(this, 'classNames') ===
              undefined && Array.isArray(this.classNames),
          );
      },

      /**
      Standard CSS class names to apply to the view's outer element. This
      property automatically inherits any class names defined by the view's
      superclasses as well.
         @property classNames
      @type Array
      @default ['ember-view']
      @public
    */
      classNames: EMPTY_ARRAY,

      /**
      A list of properties of the view to apply as class names. If the property
      is a string value, the value of that string will be applied as a class
      name.
         ```javascript
      // Applies the 'high' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['priority'],
        priority: 'high'
      });
      ```
         If the value of the property is a Boolean, the name of that property is
      added as a dasherized class name.
         ```javascript
      // Applies the 'is-urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent'],
        isUrgent: true
      });
      ```
         If you would prefer to use a custom value instead of the dasherized
      property name, you can pass a binding like this:
         ```javascript
      // Applies the 'urgent' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isUrgent:urgent'],
        isUrgent: true
      });
      ```
         If you would like to specify a class that should only be added when the
      property is false, you can declare a binding like this:
         ```javascript
      // Applies the 'disabled' class to the view element
      import Component from '@ember/component';
      Component.extend({
        classNameBindings: ['isEnabled::disabled'],
        isEnabled: false
      });
      ```
         This list of properties is inherited from the component's superclasses as well.
         @property classNameBindings
      @type Array
      @default []
      @public
    */
      classNameBindings: EMPTY_ARRAY,
    });

    var _default = ClassNamesSupport;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/mixins/view_state_support', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var ViewStateSupport = _metal.Mixin.create({
      _transitionTo(state) {
        var priorState = this._currentState;
        var currentState = (this._currentState = this._states[state]);
        this._state = state;

        if (priorState && priorState.exit) {
          priorState.exit(this);
        }

        if (currentState.enter) {
          currentState.enter(this);
        }
      },
    });

    var _default = ViewStateSupport;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/mixins/view_support', [
    'exports',
    '@ember/-internals/utils',
    '@ember/-internals/metal',
    '@ember/debug',
    '@ember/-internals/browser-environment',
    '@ember/-internals/views/lib/system/utils',
  ], function (_exports, _utils, _metal, _debug, _browserEnvironment, _utils2) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    function K() {
      return this;
    }

    var ViewMixin = _metal.Mixin.create({
      /**
     A list of properties of the view to apply as attributes. If the property
     is a string value, the value of that string will be applied as the value
     for an attribute of the property's name.
        The following example creates a tag like `<div priority="high" />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['priority'],
        priority: 'high'
      });
     ```
        If the value of the property is a Boolean, the attribute is treated as
     an HTML Boolean attribute. It will be present if the property is `true`
     and omitted if the property is `false`.
        The following example creates markup like `<div visible />`.
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['visible'],
        visible: true
      });
     ```
        If you would prefer to use a custom value instead of the property name,
     you can create the same markup as the last example with a binding like
     this:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        attributeBindings: ['isVisible:visible'],
        isVisible: true
      });
     ```
        This list of attributes is inherited from the component's superclasses,
     as well.
        @property attributeBindings
     @type Array
     @default []
     @public
     */
      concatenatedProperties: ['attributeBindings'],

      // ..........................................................
      // TEMPLATE SUPPORT
      //

      /**
     Return the nearest ancestor that is an instance of the provided
     class or mixin.
        @method nearestOfType
     @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
     or an instance of Mixin.
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
      nearestOfType(klass) {
        var view = this.parentView;
        var isOfType =
          klass instanceof _metal.Mixin
            ? (view) => klass.detect(view)
            : (view) => klass.detect(view.constructor);

        while (view) {
          if (isOfType(view)) {
            return view;
          }

          view = view.parentView;
        }

        return;
      },

      /**
     Return the nearest ancestor that has a given property.
        @method nearestWithProperty
     @param {String} property A property name
     @return Ember.View
     @deprecated use `yield` and contextual components for composition instead.
     @private
     */
      nearestWithProperty(property) {
        var view = this.parentView;

        while (view) {
          if (property in view) {
            return view;
          }

          view = view.parentView;
        }
      },

      /**
     Renders the view again. This will work regardless of whether the
     view is already in the DOM or not. If the view is in the DOM, the
     rendering process will be deferred to give bindings a chance
     to synchronize.
        If children were added during the rendering process using `appendChild`,
     `rerender` will remove them, because they will be added again
     if needed by the next `render`.
        In general, if the display of your view changes, you should modify
     the DOM element directly instead of manually calling `rerender`, which can
     be slow.
        @method rerender
     @public
     */
      rerender() {
        return this._currentState.rerender(this);
      },

      // ..........................................................
      // ELEMENT SUPPORT
      //

      /**
     Returns the current DOM element for the view.
         @property element
      @type DOMElement
      @public
    */
      element: (0, _metal.nativeDescDecorator)({
        configurable: false,
        enumerable: false,

        get() {
          return this.renderer.getElement(this);
        },
      }),

      /**
     Appends the view's element to the specified parent element.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the given element until all bindings have
     finished synchronizing.
        This is not typically a function that you will need to call directly when
     building your application. If you do need to use `appendTo`, be sure that
     the target element you are providing is associated with an `Application`
     and does not have an ancestor element that is associated with an Ember view.
        @method appendTo
     @param {String|DOMElement} A selector, element, HTML string
     @return {Ember.View} receiver
     @private
     */
      appendTo(selector) {
        var target;

        if (_browserEnvironment.hasDOM) {
          true &&
            !(typeof selector === 'string' || selector instanceof Element) &&
            (0, _debug.assert)(
              `Expected a selector or instance of Element`,
              typeof selector === 'string' || selector instanceof Element,
            );
          target =
            typeof selector === 'string'
              ? document.querySelector(selector)
              : selector;
          true &&
            !target &&
            (0, _debug.assert)(
              `You tried to append to (${selector}) but that isn't in the DOM`,
              target,
            );
          true &&
            !!(0, _utils2.matches)(target, '.ember-view') &&
            (0, _debug.assert)(
              'You cannot append to an existing Ember.View.',
              !(0, _utils2.matches)(target, '.ember-view'),
            );
          true &&
            !(() => {
              var node = target.parentNode;

              while (node instanceof Element) {
                if ((0, _utils2.matches)(node, '.ember-view')) {
                  return false;
                }

                node = node.parentNode;
              }

              return true;
            })() &&
            (0, _debug.assert)(
              'You cannot append to an existing Ember.View.',
              (() => {
                var node = target.parentNode;

                while (node instanceof Element) {
                  if ((0, _utils2.matches)(node, '.ember-view')) {
                    return false;
                  }

                  node = node.parentNode;
                }

                return true;
              })(),
            );
        } else {
          target = selector;
          true &&
            !(typeof target !== 'string') &&
            (0, _debug.assert)(
              `You tried to append to a selector string (${selector}) in an environment without a DOM`,
              typeof target !== 'string',
            );
          true &&
            !(typeof target.appendChild === 'function') &&
            (0, _debug.assert)(
              `You tried to append to a non-Element (${selector}) in an environment without a DOM`,
              typeof target.appendChild === 'function',
            );
        } // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
        // However, the types are more specific in some places which necessitates the `as`.

        this.renderer.appendTo(this, target);
        return this;
      },

      /**
     Appends the view's element to the document body. If the view does
     not have an HTML representation yet
     the element will be generated automatically.
        If your application uses the `rootElement` property, you must append
     the view within that element. Rendering views outside of the `rootElement`
     is not supported.
        Note that this method just schedules the view to be appended; the DOM
     element will not be appended to the document body until all bindings have
     finished synchronizing.
        @method append
     @return {Ember.View} receiver
     @private
     */
      append() {
        return this.appendTo(document.body);
      },

      /**
     The HTML `id` of the view's element in the DOM. You can provide this
     value yourself but it must be unique (just as in HTML):
        ```handlebars
     {{my-component elementId="a-really-cool-id"}}
     ```
        If not manually set a default value will be provided by the framework.
        Once rendered an element's `elementId` is considered immutable and you
     should never change it. If you need to compute a dynamic value for the
     `elementId`, you should do this when the component or element is being
     instantiated:
        ```app/components/my-component.js
     import Component from '@ember/component';
        export default Component.extend({
        init() {
          this._super(...arguments);
          let index = this.get('index');
          this.set('elementId', 'component-id' + index);
        }
      });
     ```
        @property elementId
     @type String
     @public
     */
      elementId: null,

      /**
     Called when a view is going to insert an element into the DOM.
        @event willInsertElement
     @public
     */
      willInsertElement: K,

      /**
     Called when the element of the view has been inserted into the DOM.
     Override this function to do any set up that requires an element
     in the document body.
        When a view has children, didInsertElement will be called on the
     child view(s) first and on itself afterwards.
        @event didInsertElement
     @public
     */
      didInsertElement: K,

      /**
     Called when the view is about to rerender, but before anything has
     been torn down. This is a good opportunity to tear down any manual
     observers you have installed based on the DOM state
        @event willClearRender
     @public
     */
      willClearRender: K,

      /**
     You must call `destroy` on a view to destroy the view (and all of its
     child views). This will remove the view from any parent node, then make
     sure that the DOM element managed by the view can be released by the
     memory manager.
        @method destroy
     @private
     */
      destroy() {
        this._super(...arguments);

        this._currentState.destroy(this);
      },

      /**
     Called when the element of the view is going to be destroyed. Override
     this function to do any teardown that requires an element, like removing
     event listeners.
        Please note: any property changes made during this event will have no
     effect on object observers.
        @event willDestroyElement
     @public
     */
      willDestroyElement: K,

      /**
     Called after the element of the view is destroyed.
        @event willDestroyElement
     @public
     */
      didDestroyElement: K,

      /**
     Called when the parentView property has changed.
        @event parentViewDidChange
     @private
     */
      parentViewDidChange: K,
      // ..........................................................
      // STANDARD RENDER PROPERTIES
      //

      /**
     Tag name for the view's outer element. The tag name is only used when an
     element is first created. If you change the `tagName` for an element, you
     must destroy and recreate the view element.
        By default, the render buffer will use a `<div>` tag for views.
        If the tagName is `''`, the view will be tagless, with no outer element.
     Component properties that depend on the presence of an outer element, such
     as `classNameBindings` and `attributeBindings`, do not work with tagless
     components. Tagless components cannot implement methods to handle events,
     and their `element` property has a `null` value.
        @property tagName
     @type String
     @default null
     @public
     */
      // We leave this null by default so we can tell the difference between
      // the default case and a user-specified tag.
      tagName: null,

      // .......................................................
      // CORE DISPLAY METHODS
      //

      /**
     Setup a view, but do not finish waking it up.
        * configure `childViews`
     * register the view with the global views hash, which is used for event
     dispatch
        @method init
     @private
     */
      init() {
        this._super(...arguments);

        true &&
          !(
            (0, _metal.descriptorForProperty)(this, 'elementId') === undefined
          ) &&
          (0, _debug.assert)(
            `You cannot use a computed property for the component's \`elementId\` (${this}).`,
            (0, _metal.descriptorForProperty)(this, 'elementId') === undefined,
          );
        true &&
          !((0, _metal.descriptorForProperty)(this, 'tagName') === undefined) &&
          (0, _debug.assert)(
            `You cannot use a computed property for the component's \`tagName\` (${this}).`,
            (0, _metal.descriptorForProperty)(this, 'tagName') === undefined,
          );

        if (!this.elementId && this.tagName !== '') {
          this.elementId = (0, _utils.guidFor)(this);
        }

        true &&
          !!this.render &&
          (0, _debug.assert)(
            'Using a custom `.render` function is no longer supported.',
            !this.render,
          );
      },

      // .......................................................
      // EVENT HANDLING
      //

      /**
     Handle events from `EventDispatcher`
        @method handleEvent
     @param eventName {String}
     @param evt {Event}
     @private
     */
      handleEvent(eventName, evt) {
        return this._currentState.handleEvent(this, eventName, evt);
      },
    });

    var _default = ViewMixin;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/system/action_manager', [
    'exports',
  ], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = ActionManager;

    /**
  @module ember
  */
    function ActionManager() {}
    /**
    Global action id hash.
  
    @private
    @property registeredActions
    @type Object
  */

    ActionManager.registeredActions = {};
  });
  define('@ember/-internals/views/lib/system/event_dispatcher', [
    'exports',
    '@ember/-internals/owner',
    '@ember/debug',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/-internals/views',
    '@ember/-internals/views/lib/system/action_manager',
  ], function (
    _exports,
    _owner,
    _debug,
    _metal,
    _runtime,
    _views,
    _action_manager,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module ember
  */
    var ROOT_ELEMENT_CLASS = 'ember-application';
    var ROOT_ELEMENT_SELECTOR = `.${ROOT_ELEMENT_CLASS}`;
    /**
    `Ember.EventDispatcher` handles delegating browser events to their
    corresponding `Ember.Views.` For example, when you click on a view,
    `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
    called.
  
    @class EventDispatcher
    @namespace Ember
    @private
    @extends Ember.Object
  */

    class EventDispatcher extends _runtime.Object {
      constructor() {
        super(...arguments);
        /**
        The set of events names (and associated handler function names) to be setup
        and dispatched by the `EventDispatcher`. Modifications to this list can be done
        at setup time, generally via the `Application.customEvents` hash.
               To add new events to be listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            paste: 'paste'
          }
        });
        ```
               To prevent default events from being listened to:
               ```javascript
        import Application from '@ember/application';
               let App = Application.create({
          customEvents: {
            mouseenter: null,
            mouseleave: null
          }
        });
        ```
        @property events
        @type Object
        @private
      */

        this.events = {
          touchstart: 'touchStart',
          touchmove: 'touchMove',
          touchend: 'touchEnd',
          touchcancel: 'touchCancel',
          keydown: 'keyDown',
          keyup: 'keyUp',
          keypress: 'keyPress',
          mousedown: 'mouseDown',
          mouseup: 'mouseUp',
          contextmenu: 'contextMenu',
          click: 'click',
          dblclick: 'doubleClick',
          focusin: 'focusIn',
          focusout: 'focusOut',
          submit: 'submit',
          input: 'input',
          change: 'change',
          dragstart: 'dragStart',
          drag: 'drag',
          dragenter: 'dragEnter',
          dragleave: 'dragLeave',
          dragover: 'dragOver',
          drop: 'drop',
          dragend: 'dragEnd',
        };
        /**
        The root DOM element to which event listeners should be attached. Event
        listeners will be attached to the document unless this is overridden.
               Can be specified as a DOMElement or a selector string.
               The default body is a string since this may be evaluated before document.body
        exists in the DOM.
               @private
        @property rootElement
        @type DOMElement
        @default 'body'
      */

        this.rootElement = 'body';
        this._eventHandlers = Object.create(null);
        this._didSetup = false;
        this.finalEventNameMapping = null;
        this._sanitizedRootElement = null;
        this.lazyEvents = new Map();
        this._reverseEventNameMapping = null;
      }
      /**
      Sets up event listeners for standard browser events.
         This will be called after the browser sends a `DOMContentReady` event. By
      default, it will set up all of the listeners on the document body. If you
      would like to register the listeners on a different element, set the event
      dispatcher's `root` property.
         @private
      @method setup
      @param addedEvents {Object}
    */

      setup(addedEvents, _rootElement) {
        var _a;

        true &&
          !(() => {
            var owner = (0, _owner.getOwner)(this);
            true && !owner && (0, _debug.assert)('[BUG] Missing owner', owner); // SAFETY: This is not guaranteed to be safe, but this is what we expect to be returned.

            var environment = owner.lookup('-environment:main');
            return environment.isInteractive;
          })() &&
          (0, _debug.assert)(
            'EventDispatcher should never be setup in fastboot mode. Please report this as an Ember bug.',
            (() => {
              var owner = (0, _owner.getOwner)(this);
              true &&
                !owner &&
                (0, _debug.assert)('[BUG] Missing owner', owner);
              var environment = owner.lookup('-environment:main');
              return environment.isInteractive;
            })(),
          );
        var events = (this.finalEventNameMapping = Object.assign(
          Object.assign({}, (0, _metal.get)(this, 'events')),
          addedEvents,
        ));
        this._reverseEventNameMapping = Object.keys(events).reduce(
          (result, key) => {
            var eventName = events[key];
            return eventName
              ? Object.assign(Object.assign({}, result), {
                  [eventName]: key,
                })
              : result;
          },
          {},
        );
        var lazyEvents = this.lazyEvents;

        if (_rootElement !== undefined && _rootElement !== null) {
          (0, _metal.set)(this, 'rootElement', _rootElement);
        }

        var specifiedRootElement = (0, _metal.get)(this, 'rootElement');
        var rootElement =
          typeof specifiedRootElement !== 'string'
            ? specifiedRootElement
            : document.querySelector(specifiedRootElement);
        true &&
          !rootElement &&
          (0, _debug.assert)(
            `Could not find rootElement (${specifiedRootElement})`,
            rootElement,
          );
        true &&
          !!rootElement.classList.contains(ROOT_ELEMENT_CLASS) &&
          (0, _debug.assert)(
            `You cannot use the same root element (${specifiedRootElement}) multiple times in an Ember.Application`,
            !rootElement.classList.contains(ROOT_ELEMENT_CLASS),
          );
        true &&
          !(() => {
            var target = rootElement.parentNode;

            while (target instanceof Element) {
              if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
                return false;
              }

              target = target.parentNode;
            }

            return true;
          })() &&
          (0, _debug.assert)(
            'You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application',
            (() => {
              var target = rootElement.parentNode;

              while (target instanceof Element) {
                if (target.classList.contains(ROOT_ELEMENT_CLASS)) {
                  return false;
                }

                target = target.parentNode;
              }

              return true;
            })(),
          );
        true &&
          !!rootElement.querySelector(ROOT_ELEMENT_SELECTOR) &&
          (0, _debug.assert)(
            'You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application',
            !rootElement.querySelector(ROOT_ELEMENT_SELECTOR),
          );
        rootElement.classList.add(ROOT_ELEMENT_CLASS);
        true &&
          !rootElement.classList.contains(ROOT_ELEMENT_CLASS) &&
          (0, _debug.assert)(
            `Unable to add '${ROOT_ELEMENT_CLASS}' class to root element (${
              (0, _metal.get)(this, 'rootElement') || rootElement.tagName
            }). Make sure you set rootElement to the body or an element in the body.`,
            rootElement.classList.contains(ROOT_ELEMENT_CLASS),
          ); // save off the final sanitized root element (for usage in setupHandler)

        this._sanitizedRootElement = rootElement; // setup event listeners for the non-lazily setup events

        for (var event in events) {
          if (Object.prototype.hasOwnProperty.call(events, event)) {
            lazyEvents.set(
              event,
              (_a = events[event]) !== null && _a !== void 0 ? _a : null,
            );
          }
        }

        this._didSetup = true;
      }
      /**
      Setup event listeners for the given browser event name
         @private
      @method setupHandlerForBrowserEvent
      @param event the name of the event in the browser
    */

      setupHandlerForBrowserEvent(event) {
        var _a;

        true &&
          !this.finalEventNameMapping &&
          (0, _debug.assert)(
            '[BUG] Expected finalEventNameMapping to be set',
            this.finalEventNameMapping,
          );
        true &&
          !this._sanitizedRootElement &&
          (0, _debug.assert)(
            '[BUG] Expected _santizedRootElement to be set',
            this._sanitizedRootElement,
          );
        this.setupHandler(
          this._sanitizedRootElement,
          event,
          (_a = this.finalEventNameMapping[event]) !== null && _a !== void 0
            ? _a
            : null,
        );
      }
      /**
      Setup event listeners for the given Ember event name (camel case)
         @private
      @method setupHandlerForEmberEvent
      @param eventName
    */

      setupHandlerForEmberEvent(eventName) {
        var _a;

        true &&
          !this._sanitizedRootElement &&
          (0, _debug.assert)(
            '[BUG] Expected _sanitizedRootElement to be set',
            this._sanitizedRootElement,
          );
        var event =
          (_a = this._reverseEventNameMapping) === null || _a === void 0
            ? void 0
            : _a[eventName];

        if (event) {
          this.setupHandler(this._sanitizedRootElement, event, eventName);
        }
      }
      /**
      Registers an event listener on the rootElement. If the given event is
      triggered, the provided event handler will be triggered on the target view.
         If the target view does not implement the event handler, or if the handler
      returns `false`, the parent view will be called. The event will continue to
      bubble to each successive parent view until it reaches the top.
         @private
      @method setupHandler
      @param {Element} rootElement
      @param {String} event the name of the event in the browser
      @param {String} eventName the name of the method to call on the view
    */

      setupHandler(rootElement, event, eventName) {
        if (eventName === null || !this.lazyEvents.has(event)) {
          return; // nothing to do
        }

        var viewHandler = (target, event) => {
          // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
          // However, the types are more specific in some places which necessitates the `as`.
          var view = (0, _views.getElementView)(target);
          var result = true;

          if (view) {
            // SAFETY: As currently written, this is not safe. Though it seems to always be true.
            result = view.handleEvent(eventName, event);
          }

          return result;
        };

        var actionHandler = (target, event) => {
          var actionId = target.getAttribute('data-ember-action');
          var actions; // In Glimmer2 this attribute is set to an empty string and an additional
          // attribute it set for each action on a given element. In this case, the
          // attributes need to be read so that a proper set of action handlers can
          // be coalesced.

          if (actionId === '') {
            actions = [];

            for (var attr of target.attributes) {
              var attrName = attr.name;

              if (attrName.indexOf('data-ember-action-') === 0) {
                var action =
                  _action_manager.default.registeredActions[attr.value];
                true &&
                  !action &&
                  (0, _debug.assert)('[BUG] Missing action', action);
                actions.push(action);
              }
            }
          } else if (actionId) {
            // FIXME: This branch is never called in tests. Improve tests or remove
            var actionState =
              _action_manager.default.registeredActions[actionId];

            if (actionState) {
              actions = [actionState];
            }
          } // We have to check for actions here since in some cases, jQuery will trigger
          // an event on `removeChild` (i.e. focusout) after we've already torn down the
          // action handlers for the view.

          if (!actions) {
            // FIXME: This branch is never called in tests. Improve tests or remove
            return;
          }

          var result = true;

          for (var index = 0; index < actions.length; index++) {
            var _action = actions[index];

            if (_action && _action.eventName === eventName) {
              // return false if any of the action handlers returns false
              result = _action.handler(event) && result;
            }
          }

          return result;
        };

        var handleEvent = (this._eventHandlers[event] = (event) => {
          var target = event.target;
          true &&
            !(target instanceof Element) &&
            (0, _debug.assert)(
              `[BUG] Received event without an Element target: ${event.type}, ${target}`,
              target instanceof Element,
            );

          do {
            // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
            // However, the types are more specific in some places which necessitates the `as`.
            if ((0, _views.getElementView)(target)) {
              if (viewHandler(target, event) === false) {
                event.preventDefault();
                event.stopPropagation();
                break;
              } else if (event.cancelBubble === true) {
                break;
              }
            } else if (
              typeof target.hasAttribute === 'function' &&
              target.hasAttribute('data-ember-action')
            ) {
              if (actionHandler(target, event) === false) {
                break;
              }
            }

            target = target.parentNode;
          } while (target instanceof Element);
        });

        rootElement.addEventListener(event, handleEvent);
        this.lazyEvents.delete(event);
      }

      destroy() {
        if (this._didSetup === false) {
          return;
        }

        var rootElement = this._sanitizedRootElement;

        if (!rootElement) {
          return;
        }

        for (var event in this._eventHandlers) {
          rootElement.removeEventListener(event, this._eventHandlers[event]);
        }

        rootElement.classList.remove(ROOT_ELEMENT_CLASS);
        return this._super(...arguments);
      }

      toString() {
        return '(EventDispatcher)';
      }
    }

    _exports.default = EventDispatcher;
  });
  define('@ember/-internals/views/lib/system/utils', [
    'exports',
    '@ember/-internals/owner',
    '@ember/-internals/utils',
    '@ember/debug',
  ], function (_exports, _owner, _utils, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.addChildView = addChildView;
    _exports.clearElementView = clearElementView;
    _exports.clearViewElement = clearViewElement;
    _exports.collectChildViews = collectChildViews;
    _exports.constructStyleDeprecationMessage = constructStyleDeprecationMessage;
    _exports.contains = contains;
    _exports.elMatches = void 0;
    _exports.getChildViews = getChildViews;
    _exports.getElementView = getElementView;
    _exports.getRootViews = getRootViews;
    _exports.getViewBoundingClientRect = getViewBoundingClientRect;
    _exports.getViewBounds = getViewBounds;
    _exports.getViewClientRects = getViewClientRects;
    _exports.getViewElement = getViewElement;
    _exports.getViewId = getViewId;
    _exports.getViewRange = getViewRange;
    _exports.initChildViews = initChildViews;
    _exports.isSimpleClick = isSimpleClick;
    _exports.matches = matches;
    _exports.setElementView = setElementView;
    _exports.setViewElement = setViewElement;

    /**
  @module ember
  */
    function isSimpleClick(event) {
      if (!(event instanceof MouseEvent)) {
        return false;
      }

      var modifier =
        event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
      var secondaryClick = event.which > 1; // IE9 may return undefined

      return !modifier && !secondaryClick;
    }

    function constructStyleDeprecationMessage(affectedStyle) {
      return (
        '' +
        'Binding style attributes may introduce cross-site scripting vulnerabilities; ' +
        'please ensure that values being bound are properly escaped. For more information, ' +
        'including how to disable this warning, see ' +
        'https://deprecations.emberjs.com/v1.x/#toc_binding-style-attributes. ' +
        'Style affected: "' +
        affectedStyle +
        '"'
      );
    }
    /**
    @private
    @method getRootViews
    @param {Object} owner
  */

    function getRootViews(owner) {
      var registry = owner.lookup('-view-registry:main');
      var rootViews = [];
      Object.keys(registry).forEach((id) => {
        var view = registry[id];
        true && !view && (0, _debug.assert)('expected view', view);

        if (view.parentView === null) {
          rootViews.push(view);
        }
      });
      return rootViews;
    }
    /**
    @private
    @method getViewId
    @param {Ember.View} view
   */

    function getViewId(view) {
      if (view.tagName !== '' && view.elementId) {
        return view.elementId;
      } else {
        return (0, _utils.guidFor)(view);
      }
    }

    var ELEMENT_VIEW = new WeakMap();
    var VIEW_ELEMENT = new WeakMap();

    function getElementView(element) {
      return ELEMENT_VIEW.get(element) || null;
    }
    /**
    @private
    @method getViewElement
    @param {Ember.View} view
   */

    function getViewElement(view) {
      return VIEW_ELEMENT.get(view) || null;
    }

    function setElementView(element, view) {
      ELEMENT_VIEW.set(element, view);
    }

    function setViewElement(view, element) {
      VIEW_ELEMENT.set(view, element);
    } // These are not needed for GC, but for correctness. We want to be able to
    // null-out these links while the objects are still live. Specifically, in
    // this case, we want to prevent access to the element (and vice verse) during
    // destruction.

    function clearElementView(element) {
      ELEMENT_VIEW.delete(element);
    }

    function clearViewElement(view) {
      VIEW_ELEMENT.delete(view);
    }

    var CHILD_VIEW_IDS = new WeakMap();
    /**
    @private
    @method getChildViews
    @param {Ember.View} view
  */

    function getChildViews(view) {
      var owner = (0, _owner.getOwner)(view);
      true &&
        !owner &&
        (0, _debug.assert)('View is unexpectedly missing an owner', owner);
      var registry = owner.lookup('-view-registry:main');
      return collectChildViews(view, registry);
    }

    function initChildViews(view) {
      var childViews = new Set();
      CHILD_VIEW_IDS.set(view, childViews);
      return childViews;
    }

    function addChildView(parent, child) {
      var childViews = CHILD_VIEW_IDS.get(parent);

      if (childViews === undefined) {
        childViews = initChildViews(parent);
      }

      childViews.add(getViewId(child));
    }

    function collectChildViews(view, registry) {
      var views = [];
      var childViews = CHILD_VIEW_IDS.get(view);

      if (childViews !== undefined) {
        childViews.forEach((id) => {
          var view = registry[id];

          if (view && !view.isDestroying && !view.isDestroyed) {
            views.push(view);
          }
        });
      }

      return views;
    }
    /**
    @private
    @method getViewBounds
    @param {Ember.View} view
  */

    function getViewBounds(view) {
      return view.renderer.getBounds(view);
    }
    /**
    @private
    @method getViewRange
    @param {Ember.View} view
  */

    function getViewRange(view) {
      var bounds = getViewBounds(view);
      var range = document.createRange();
      range.setStartBefore(bounds.firstNode);
      range.setEndAfter(bounds.lastNode);
      return range;
    }
    /**
    `getViewClientRects` provides information about the position of the border
    box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewClientRects
    @param {Ember.View} view
  */

    function getViewClientRects(view) {
      var range = getViewRange(view);
      return range.getClientRects();
    }
    /**
    `getViewBoundingClientRect` provides information about the position of the
    bounding border box edges of a view relative to the viewport.
  
    It is only intended to be used by development tools like the Ember Inspector
    and may not work on older browsers.
  
    @private
    @method getViewBoundingClientRect
    @param {Ember.View} view
  */

    function getViewBoundingClientRect(view) {
      var range = getViewRange(view);
      return range.getBoundingClientRect();
    }
    /**
    Determines if the element matches the specified selector.
  
    @private
    @method matches
    @param {DOMElement} el
    @param {String} selector
  */

    var elMatches =
      typeof Element !== 'undefined' ? Element.prototype.matches : undefined;
    _exports.elMatches = elMatches;

    function matches(el, selector) {
      true &&
        !(elMatches !== undefined) &&
        (0, _debug.assert)(
          'cannot call `matches` in fastboot mode',
          elMatches !== undefined,
        );
      return elMatches.call(el, selector);
    }

    function contains(a, b) {
      if (a.contains !== undefined) {
        return a.contains(b);
      }

      var current = b.parentNode;

      while (current && (current = current.parentNode)) {
        if (current === a) {
          return true;
        }
      }

      return false;
    }
  });
  define('@ember/-internals/views/lib/views/core_view', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/-internals/views/lib/views/states',
  ], function (_exports, _metal, _runtime, _states) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var __decorate =
      (void 0 && (void 0).__decorate) ||
      function (decorators, target, key, desc) {
        var c = arguments.length,
          r =
            c < 3
              ? target
              : desc === null
              ? (desc = Object.getOwnPropertyDescriptor(target, key))
              : desc,
          d;
        if (
          typeof Reflect === 'object' &&
          typeof Reflect.decorate === 'function'
        )
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--) {
            if ((d = decorators[i]))
              r =
                (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) ||
                r;
          }
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };

    class CoreView extends _runtime.FrameworkObject.extend(
      _runtime.Evented,
      _runtime.ActionHandler,
    ) {
      constructor() {
        super(...arguments);
        this.isView = true;
      }

      init(properties) {
        var _a;

        super.init(properties); // Handle methods from Evented
        // The native class inheritance will not work for mixins. To work around this,
        // we copy the existing trigger and has methods provided by the mixin and swap in the
        // new ones from our class.

        this._superTrigger = this.trigger;
        this.trigger = this._trigger;
        this._superHas = this.has;
        this.has = this._has;
        (_a = this.parentView) !== null && _a !== void 0
          ? _a
          : (this.parentView = null);
        this._state = 'preRender';
        this._currentState = this._states.preRender;
      }

      instrumentDetails(hash) {
        hash['object'] = this.toString();
        hash['containerKey'] = this._debugContainerKey;
        hash['view'] = this;
        return hash;
      }
      /**
      Override the default event firing from `Evented` to
      also call methods with the given name.
         @method trigger
      @param name {String}
      @private
    */
      // Changed to `trigger` on init

      _trigger(name) {
        for (
          var _len = arguments.length,
            args = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        this._superTrigger(name, ...args);

        var method = this[name];

        if (typeof method === 'function') {
          return method.apply(this, args);
        }
      } // Changed to `has` on init

      _has(name) {
        return typeof this[name] === 'function' || this._superHas(name);
      }
    }

    CoreView.isViewFactory = true;

    __decorate(
      [(0, _metal.inject)('renderer', '-dom')],
      CoreView.prototype,
      'renderer',
      void 0,
    ); // Declare on the prototype to have a single shared value.

    CoreView.prototype._states = _states.default;
    var _default = CoreView;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/views/states', [
    'exports',
    '@ember/-internals/views/lib/views/states/pre_render',
    '@ember/-internals/views/lib/views/states/has_element',
    '@ember/-internals/views/lib/views/states/in_dom',
    '@ember/-internals/views/lib/views/states/destroying',
  ], function (_exports, _pre_render, _has_element, _in_dom, _destroying) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /*
    Describe how the specified actions should behave in the various
    states that a view can exist in. Possible states:
  
    * preRender: when a view is first instantiated, and after its
      element was destroyed, it is in the preRender state
    * hasElement: the DOM representation of the view is created,
      and is ready to be inserted
    * inDOM: once a view has been inserted into the DOM it is in
      the inDOM state. A view spends the vast majority of its
      existence in this state.
    * destroyed: once a view has been destroyed (using the destroy
      method), it is in this state. No further actions can be invoked
      on a destroyed view.
  */
    var states = Object.freeze({
      preRender: _pre_render.default,
      inDOM: _in_dom.default,
      hasElement: _has_element.default,
      destroying: _destroying.default,
    });
    var _default = states;
    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/views/states/default', [
    'exports',
    '@ember/error',
  ], function (_exports, _error) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var _default = {
      // appendChild is only legal while rendering the buffer.
      appendChild() {
        throw new _error.default(
          "You can't use appendChild outside of the rendering process",
        );
      },

      // Handle events from `Ember.EventDispatcher`
      handleEvent() {
        return true; // continue event propagation
      },

      rerender() {},

      destroy() {},
    };

    var _default2 = Object.freeze(_default);

    _exports.default = _default2;
  });
  define('@ember/-internals/views/lib/views/states/destroying', [
    'exports',
    '@ember/error',
    '@ember/-internals/views/lib/views/states/default',
  ], function (_exports, _error, _default3) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var destroying = Object.assign(Object.assign({}, _default3.default), {
      appendChild() {
        throw new _error.default(
          "You can't call appendChild on a view being destroyed",
        );
      },

      rerender() {
        throw new _error.default(
          "You can't call rerender on a view being destroyed",
        );
      },
    });

    var _default2 = Object.freeze(destroying);

    _exports.default = _default2;
  });
  define('@ember/-internals/views/lib/views/states/has_element', [
    'exports',
    '@ember/-internals/views/lib/views/states/default',
    '@ember/runloop',
    '@ember/instrumentation',
  ], function (_exports, _default3, _runloop, _instrumentation) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var hasElement = Object.assign(Object.assign({}, _default3.default), {
      rerender(view) {
        view.renderer.rerender();
      },

      destroy(view) {
        view.renderer.remove(view);
      },

      // Handle events from `Ember.EventDispatcher`
      handleEvent(view, eventName, event) {
        if (view.has(eventName)) {
          // Handler should be able to re-dispatch events, so we don't
          // preventDefault or stopPropagation.
          return (0, _instrumentation.flaggedInstrument)(
            `interaction.${eventName}`,
            {
              event,
              view,
            },
            () => {
              return (0, _runloop.join)(view, view.trigger, eventName, event);
            },
          );
        } else {
          return true; // continue event propagation
        }
      },
    });

    var _default2 = Object.freeze(hasElement);

    _exports.default = _default2;
  });
  define('@ember/-internals/views/lib/views/states/in_dom', [
    'exports',
    '@ember/-internals/utils',
    '@ember/debug',
    '@ember/error',
    '@ember/-internals/views/lib/views/states/has_element',
  ], function (_exports, _utils, _debug, _error, _has_element) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var inDOM = Object.assign(Object.assign({}, _has_element.default), {
      enter(view) {
        // Register the view for event handling. This hash is used by
        // Ember.EventDispatcher to dispatch incoming events.
        view.renderer.register(view);

        if (
          true
          /* DEBUG */
        ) {
          var elementId = view.elementId;
          true &&
            !_utils.teardownMandatorySetter &&
            (0, _debug.assert)(
              '[BUG] Expected teardownMandatorySetter to be set in DEBUG mode',
              teardownMandatorySetter,
            );
          (0, _utils.teardownMandatorySetter)(view, 'elementId');
          Object.defineProperty(view, 'elementId', {
            configurable: true,
            enumerable: true,

            get() {
              return elementId;
            },

            set(value) {
              if (value !== elementId) {
                throw new _error.default(
                  "Changing a view's elementId after creation is not allowed",
                );
              }
            },
          });
        }
      },
    });

    var _default = Object.freeze(inDOM);

    _exports.default = _default;
  });
  define('@ember/-internals/views/lib/views/states/pre_render', [
    'exports',
    '@ember/-internals/views/lib/views/states/default',
  ], function (_exports, _default3) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var preRender = Object.assign({}, _default3.default);

    var _default2 = Object.freeze(preRender);

    _exports.default = _default2;
  });
  define('@ember/application/index', [
    'exports',
    '@ember/-internals/owner',
    '@ember/application/lib/lazy_load',
    '@ember/application/lib/application',
  ], function (_exports, _owner, _lazy_load, _application) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, '_loaded', {
      enumerable: true,
      get: function () {
        return _lazy_load._loaded;
      },
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _application.default;
      },
    });
    Object.defineProperty(_exports, 'getOwner', {
      enumerable: true,
      get: function () {
        return _owner.getOwner;
      },
    });
    Object.defineProperty(_exports, 'onLoad', {
      enumerable: true,
      get: function () {
        return _lazy_load.onLoad;
      },
    });
    Object.defineProperty(_exports, 'runLoadHooks', {
      enumerable: true,
      get: function () {
        return _lazy_load.runLoadHooks;
      },
    });
    Object.defineProperty(_exports, 'setOwner', {
      enumerable: true,
      get: function () {
        return _owner.setOwner;
      },
    });
  });
  define('@ember/application/instance', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/browser-environment',
    '@ember/engine/instance',
    '@ember/-internals/glimmer',
    '@ember/debug',
    '@ember/-internals/routing',
    '@ember/-internals/views',
  ], function (
    _exports,
    _metal,
    environment,
    _instance,
    _glimmer,
    _debug,
    _routing,
    _views,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/application
  */

    /**
    The `ApplicationInstance` encapsulates all of the stateful aspects of a
    running `Application`.
  
    At a high-level, we break application boot into two distinct phases:
  
    * Definition time, where all of the classes, templates, and other
      dependencies are loaded (typically in the browser).
    * Run time, where we begin executing the application once everything
      has loaded.
  
    Definition time can be expensive and only needs to happen once since it is
    an idempotent operation. For example, between test runs and FastBoot
    requests, the application stays the same. It is only the state that we want
    to reset.
  
    That state is what the `ApplicationInstance` manages: it is responsible for
    creating the container that contains all application state, and disposing of
    it once the particular test run or FastBoot request has finished.
  
    @public
    @class ApplicationInstance
    @extends EngineInstance
  */
    class ApplicationInstance extends _instance.default {
      constructor() {
        super(...arguments);
        /**
        The root DOM element of the Application as an element or a
        CSS selector.
               @private
        @property {String|DOMElement} rootElement
      */

        this.rootElement = null;
      }

      init(properties) {
        super.init(properties);

        this.application._watchInstance(this); // Register this instance in the per-instance registry.
        //
        // Why do we need to register the instance in the first place?
        // Because we need a good way for the root route (a.k.a ApplicationRoute)
        // to notify us when it has created the root-most view. That view is then
        // appended to the rootElement, in the case of apps, to the fixture harness
        // in tests, or rendered to a string in the case of FastBoot.

        this.register('-application-instance:main', this, {
          instantiate: false,
        });
      }
      /**
      Overrides the base `EngineInstance._bootSync` method with concerns relevant
      to booting application (instead of engine) instances.
         This method should only contain synchronous boot concerns. Asynchronous
      boot concerns should eventually be moved to the `boot` method, which
      returns a promise.
         Until all boot code has been made asynchronous, we need to continue to
      expose this method for use *internally* in places where we need to boot an
      instance synchronously.
         @private
    */

      _bootSync(options) {
        if (this._booted) {
          return this;
        }

        options = new _BootOptions(options);
        this.setupRegistry(options);

        if (options.rootElement) {
          this.rootElement = options.rootElement;
        } else {
          this.rootElement = this.application.rootElement;
        }

        if (options.location) {
          (0, _metal.set)(this.router, 'location', options.location);
        }

        this.application.runInstanceInitializers(this);

        if (options.isInteractive) {
          this.setupEventDispatcher();
        }

        this._booted = true;
        return this;
      }

      setupRegistry(options) {
        this.constructor.setupRegistry(this.__registry__, options);
      }

      get router() {
        if (!this._router) {
          var router = this.lookup('router:main');
          true &&
            !(router instanceof _routing.Router) &&
            (0, _debug.assert)(
              'expected an instance of Router',
              router instanceof _routing.Router,
            );
          this._router = router;
        }

        return this._router;
      }
      /**
      This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
      when it has finished creating the root View. By default, we simply take the
      view and append it to the `rootElement` specified on the Application.
         In cases like FastBoot and testing, we can override this hook and implement
      custom behavior, such as serializing to a string and sending over an HTTP
      socket rather than appending to DOM.
         @param view {Ember.View} the root-most view
      @deprecated
      @private
    */

      didCreateRootView(view) {
        view.appendTo(this.rootElement);
      }
      /**
      Tells the router to start routing. The router will ask the location for the
      current URL of the page to determine the initial URL to start routing to.
      To start the app at a specific URL, call `handleURL` instead.
         @private
    */

      startRouting() {
        this.router.startRouting();
      }
      /**
      Sets up the router, initializing the child router and configuring the
      location before routing begins.
         Because setup should only occur once, multiple calls to `setupRouter`
      beyond the first call have no effect.
         This is commonly used in order to confirm things that rely on the router
      are functioning properly from tests that are primarily rendering related.
         For example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s
      `setupRenderingTest` calling `this.owner.setupRouter()` would allow that
      rendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered
      have the correct URL.
         @public
    */

      setupRouter() {
        this.router.setupRouter();
      }
      /**
      Directs the router to route to a particular URL. This is useful in tests,
      for example, to tell the app to start at a particular URL.
         @param url {String} the URL the router should route to
      @private
    */

      handleURL(url) {
        this.setupRouter();
        return this.router.handleURL(url);
      }
      /**
      @private
    */

      setupEventDispatcher() {
        var dispatcher = this.lookup('event_dispatcher:main');
        true &&
          !(dispatcher instanceof _views.EventDispatcher) &&
          (0, _debug.assert)(
            'expected EventDispatcher',
            dispatcher instanceof _views.EventDispatcher,
          );
        var applicationCustomEvents = (0, _metal.get)(
          this.application,
          'customEvents',
        );
        var instanceCustomEvents = (0, _metal.get)(this, 'customEvents');
        var customEvents = Object.assign(
          {},
          applicationCustomEvents,
          instanceCustomEvents,
        );
        true &&
          !(
            this.rootElement === null ||
            typeof this.rootElement === 'string' ||
            this.rootElement instanceof Element
          ) &&
          (0, _debug.assert)(
            '[BUG] Tried to set up dispatcher with an invalid root element',
            this.rootElement === null ||
              typeof this.rootElement === 'string' ||
              this.rootElement instanceof Element,
          );
        dispatcher.setup(customEvents, this.rootElement);
        return dispatcher;
      }
      /**
      Returns the current URL of the app instance. This is useful when your
      app does not update the browsers URL bar (i.e. it uses the `'none'`
      location adapter).
         @public
      @return {String} the current URL
    */

      getURL() {
        return this.router.url;
      } // `instance.visit(url)` should eventually replace `instance.handleURL()`;
      // the test helpers can probably be switched to use this implementation too

      /**
      Navigate the instance to a particular URL. This is useful in tests, for
      example, or to tell the app to start at a particular URL. This method
      returns a promise that resolves with the app instance when the transition
      is complete, or rejects if the transion was aborted due to an error.
         @public
      @param url {String} the destination URL
      @return {Promise<ApplicationInstance>}
    */

      visit(url) {
        this.setupRouter();

        var bootOptions = this.__container__.lookup('-environment:main');

        var router = this.router;

        var handleTransitionResolve = () => {
          if (!bootOptions.options.shouldRender) {
            // No rendering is needed, and routing has completed, simply return.
            return this;
          } else {
            // Ensure that the visit promise resolves when all rendering has completed
            return (0, _glimmer.renderSettled)().then(() => this);
          }
        };

        var handleTransitionReject = (error) => {
          if (error.error) {
            throw error.error;
          } else if (
            error.name === 'TransitionAborted' &&
            router._routerMicrolib.activeTransition
          ) {
            return router._routerMicrolib.activeTransition.then(
              handleTransitionResolve,
              handleTransitionReject,
            );
          } else if (error.name === 'TransitionAborted') {
            throw new Error(error.message);
          } else {
            throw error;
          }
        };

        var location = (0, _metal.get)(router, 'location');
        true &&
          !(typeof location !== 'string') &&
          (0, _debug.assert)(
            'location has been initialized',
            typeof location !== 'string',
          ); // Keeps the location adapter's internal URL in-sync

        location.setURL(url); // getURL returns the set url with the rootURL stripped off

        return router
          .handleURL(location.getURL())
          .then(handleTransitionResolve, handleTransitionReject);
      }

      willDestroy() {
        super.willDestroy();

        this.application._unwatchInstance(this);
      }
      /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
    */

      static setupRegistry(registry, options) {
        if (options === void 0) {
          options = {};
        }

        var coptions =
          options instanceof _BootOptions ? options : new _BootOptions(options);
        registry.register('-environment:main', coptions.toEnvironment(), {
          instantiate: false,
        });
        registry.register('service:-document', coptions.document, {
          instantiate: false,
        });
        super.setupRegistry(registry, coptions);
      }
    }
    /**
    A list of boot-time configuration options for customizing the behavior of
    an `ApplicationInstance`.
  
    This is an interface class that exists purely to document the available
    options; you do not need to construct it manually. Simply pass a regular
    JavaScript object containing the desired options into methods that require
    one of these options object:
  
    ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
  
    Not all combinations of the supported options are valid. See the documentation
    on `Application#visit` for the supported configurations.
  
    Internal, experimental or otherwise unstable flags are marked as private.
  
    @class BootOptions
    @namespace ApplicationInstance
    @public
  */

    class _BootOptions {
      constructor(options) {
        if (options === void 0) {
          options = {};
        }

        /**
        If present, overrides the router's `location` property with this
        value. This is useful for environments where trying to modify the
        URL would be inappropriate.
               @property location
        @type string
        @default null
        @public
      */
        this.location = null;
        this.isInteractive = Boolean(environment.hasDOM); // This default is overridable below

        this._renderMode = options._renderMode;

        if (options.isBrowser !== undefined) {
          this.isBrowser = Boolean(options.isBrowser);
        } else {
          this.isBrowser = Boolean(environment.hasDOM);
        }

        if (!this.isBrowser) {
          this.isInteractive = false;
          this.location = 'none';
        }

        if (options.shouldRender !== undefined) {
          this.shouldRender = Boolean(options.shouldRender);
        } else {
          this.shouldRender = true;
        }

        if (!this.shouldRender) {
          this.isInteractive = false;
        }

        if (options.document) {
          this.document = options.document;
        } else {
          this.document = typeof document !== 'undefined' ? document : null;
        }

        if (options.rootElement) {
          this.rootElement = options.rootElement;
        } // Set these options last to give the user a chance to override the
        // defaults from the "combo" options like `isBrowser` (although in
        // practice, the resulting combination is probably invalid)

        if (options.location !== undefined) {
          this.location = options.location;
        }

        if (options.isInteractive !== undefined) {
          this.isInteractive = Boolean(options.isInteractive);
        }
      }

      toEnvironment() {
        // Do we really want to assign all of this!?
        return Object.assign(Object.assign({}, environment), {
          // For compatibility with existing code
          hasDOM: this.isBrowser,
          isInteractive: this.isInteractive,
          _renderMode: this._renderMode,
          options: this,
        });
      }
    }

    var _default = ApplicationInstance;
    _exports.default = _default;
  });
  define('@ember/application/lib/application', [
    'exports',
    '@ember/-internals/utils',
    '@ember/-internals/environment',
    '@ember/-internals/browser-environment',
    '@ember/debug',
    '@ember/runloop',
    '@ember/-internals/metal',
    '@ember/application/lib/lazy_load',
    '@ember/-internals/runtime',
    '@ember/-internals/views',
    '@ember/-internals/routing',
    '@ember/application/instance',
    '@ember/engine',
    '@ember/-internals/container',
    '@ember/-internals/glimmer',
  ], function (
    _exports,
    _utils,
    _environment,
    _browserEnvironment,
    _debug,
    _runloop,
    _metal,
    _lazy_load,
    _runtime,
    _views,
    _routing,
    _instance,
    _engine,
    _container,
    _glimmer,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/application
  */

    /**
    An instance of `Application` is the starting point for every Ember
    application. It instantiates, initializes and coordinates the
    objects that make up your app.
  
    Each Ember app has one and only one `Application` object. Although
    Ember CLI creates this object implicitly, the `Application` class
    is defined in the `app/app.js`. You can define a `ready` method on the
    `Application` class, which will be run by Ember when the application is
    initialized.
  
    ```app/app.js
    const App = Application.extend({
      ready() {
        // your code here
      }
    })
    ```
  
    Because `Application` ultimately inherits from `Ember.Namespace`, any classes
    you create will have useful string representations when calling `toString()`.
    See the `Ember.Namespace` documentation for more information.
  
    While you can think of your `Application` as a container that holds the
    other classes in your application, there are several other responsibilities
    going on under-the-hood that you may want to understand. It is also important
    to understand that an `Application` is different from an `ApplicationInstance`.
    Refer to the Guides to understand the difference between these.
  
    ### Event Delegation
  
    Ember uses a technique called _event delegation_. This allows the framework
    to set up a global, shared event listener instead of requiring each view to
    do it manually. For example, instead of each view registering its own
    `mousedown` listener on its associated element, Ember sets up a `mousedown`
    listener on the `body`.
  
    If a `mousedown` event occurs, Ember will look at the target of the event and
    start walking up the DOM node tree, finding corresponding views and invoking
    their `mouseDown` method as it goes.
  
    `Application` has a number of default events that it listens for, as
    well as a mapping from lowercase events to camel-cased view method names. For
    example, the `keypress` event causes the `keyPress` method on the view to be
    called, the `dblclick` event causes `doubleClick` to be called, and so on.
  
    If there is a bubbling browser event that Ember does not listen for by
    default, you can specify custom events and their corresponding view method
    names by setting the application's `customEvents` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    let App = Application.extend({
      customEvents: {
        // add support for the paste event
        paste: 'paste'
      }
    });
    ```
  
    To prevent Ember from setting up a listener for a default event,
    specify the event name with a `null` value in the `customEvents`
    property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    let App = Application.extend({
      customEvents: {
        // prevent listeners for mouseenter/mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
  
    By default, the application sets up these event listeners on the document
    body. However, in cases where you are embedding an Ember application inside
    an existing page, you may want it to set up the listeners on an element
    inside the body.
  
    For example, if only events inside a DOM element with the ID of `ember-app`
    should be delegated, set your application's `rootElement` property:
  
    ```app/app.js
    import Application from '@ember/application';
  
    let App = Application.extend({
      rootElement: '#ember-app'
    });
    ```
  
    The `rootElement` can be either a DOM element or a CSS selector
    string. Note that *views appended to the DOM outside the root element will
    not receive events.* If you specify a custom root element, make sure you only
    append views inside it!
  
    To learn more about the events Ember components use, see
  
    [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).
  
    ### Initializers
  
    To add behavior to the Application's boot process, you can define initializers in
    the `app/initializers` directory, or with `ember generate initializer` using Ember CLI.
    These files should export a named `initialize` function which will receive the created `application`
    object as its first argument.
  
    ```javascript
    export function initialize(application) {
      // application.inject('route', 'foo', 'service:foo');
    }
    ```
  
    Application initializers can be used for a variety of reasons including:
  
    - setting up external libraries
    - injecting dependencies
    - setting up event listeners in embedded apps
    - deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.
  
    ### Routing
  
    In addition to creating your application's router, `Application` is
    also responsible for telling the router when to start routing. Transitions
    between routes can be logged with the `LOG_TRANSITIONS` flag, and more
    detailed intra-transition logging can be logged with
    the `LOG_TRANSITIONS_INTERNAL` flag:
  
    ```javascript
    import Application from '@ember/application';
  
    let App = Application.create({
      LOG_TRANSITIONS: true, // basic logging of successful transitions
      LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
    });
    ```
  
    By default, the router will begin trying to translate the current URL into
    application state once the browser emits the `DOMContentReady` event. If you
    need to defer routing, you can call the application's `deferReadiness()`
    method. Once routing can begin, call the `advanceReadiness()` method.
  
    If there is any setup required before routing begins, you can implement a
    `ready()` method on your app that will be invoked immediately before routing
    begins.
  
    @class Application
    @extends Engine
    @public
  */
    class Application extends _engine.default {
      constructor() {
        super(...arguments);
        this._bootPromise = null;
        this._bootResolver = null;
      }
      /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */

      static buildRegistry(namespace) {
        var registry = super.buildRegistry(namespace);
        commonSetupRegistry(registry);
        (0, _glimmer.setupApplicationRegistry)(registry);
        return registry;
      }

      init(properties) {
        var _a, _b, _c, _d, _e, _f, _g, _h;

        super.init(properties);
        (_a = this.rootElement) !== null && _a !== void 0
          ? _a
          : (this.rootElement = 'body');
        (_b = this._document) !== null && _b !== void 0
          ? _b
          : (this._document = null);
        (_c = this.eventDispatcher) !== null && _c !== void 0
          ? _c
          : (this.eventDispatcher = null);
        (_d = this.customEvents) !== null && _d !== void 0
          ? _d
          : (this.customEvents = null);
        (_e = this.autoboot) !== null && _e !== void 0
          ? _e
          : (this.autoboot = true);
        (_f = this._document) !== null && _f !== void 0
          ? _f
          : (this._document = _browserEnvironment.hasDOM
              ? window.document
              : null);
        (_g = this._globalsMode) !== null && _g !== void 0
          ? _g
          : (this._globalsMode = true);

        if (
          true
          /* DEBUG */
        ) {
          if (_environment.ENV.LOG_VERSION) {
            // we only need to see this once per Application#init
            _environment.ENV.LOG_VERSION = false;
            (_h = _metal.libraries.logVersions) === null || _h === void 0
              ? void 0
              : _h.call(_metal.libraries);
          }
        } // Start off the number of deferrals at 1. This will be decremented by
        // the Application's own `boot` method.

        this._readinessDeferrals = 1;
        this._booted = false;
        this._applicationInstances = new Set();
        this.autoboot = this._globalsMode = Boolean(this.autoboot);

        if (this._globalsMode) {
          this._prepareForGlobalsMode();
        }

        if (this.autoboot) {
          this.waitForDOMReady();
        }
      }
      /**
      Create an ApplicationInstance for this application.
         @public
      @method buildInstance
      @return {ApplicationInstance} the application instance
    */

      buildInstance(options) {
        if (options === void 0) {
          options = {};
        }

        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot build new instances of this application since it has already been destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot build new instances of this application since it is being destroyed',
            !this.isDestroying,
          );
        return _instance.default.create(
          Object.assign(Object.assign({}, options), {
            base: this,
            application: this,
          }),
        );
      }
      /**
      Start tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is created.
         @private
      @method _watchInstance
    */

      _watchInstance(instance) {
        this._applicationInstances.add(instance);
      }
      /**
      Stop tracking an ApplicationInstance for this application.
      Used when the ApplicationInstance is about to be destroyed.
         @private
      @method _unwatchInstance
    */

      _unwatchInstance(instance) {
        return this._applicationInstances.delete(instance);
      }
      /**
      Enable the legacy globals mode by allowing this application to act
      as a global namespace. See the docs on the `_globalsMode` property
      for details.
         Most of these features are already deprecated in 1.x, so we can
      stop using them internally and try to remove them.
         @private
      @method _prepareForGlobalsMode
    */

      _prepareForGlobalsMode() {
        // Create subclass of Router for this Application instance.
        // This is to ensure that someone reopening `App.Router` does not
        // tamper with the default `Router`.
        this.Router = (this.Router || _routing.Router).extend();

        this._buildDeprecatedInstance();
      }
      /*
      Build the deprecated instance for legacy globals mode support.
      Called when creating and resetting the application.
         This is orthogonal to autoboot: the deprecated instance needs to
      be created at Application construction (not boot) time to expose
      App.__container__. If autoboot sees that this instance exists,
      it will continue booting it to avoid doing unncessary work (as
      opposed to building a new instance at boot time), but they are
      otherwise unrelated.
         @private
      @method _buildDeprecatedInstance
    */

      _buildDeprecatedInstance() {
        // Build a default instance
        var instance = this.buildInstance(); // Legacy support for App.__container__ and other global methods
        // on App that rely on a single, default instance.

        this.__deprecatedInstance__ = instance;
        this.__container__ = instance.__container__;
      }
      /**
      Automatically kick-off the boot process for the application once the
      DOM has become ready.
         The initialization itself is scheduled on the actions queue which
      ensures that code-loading finishes before booting.
         If you are asynchronously loading code, you should call `deferReadiness()`
      to defer booting, and then call `advanceReadiness()` once all of your code
      has finished loading.
         @private
      @method waitForDOMReady
    */

      waitForDOMReady() {
        var document = this._document; // SAFETY: Casting as Document should be safe since we're just reading a property.
        // If it's not actually a Document then it will evaluate false which is fine for our
        // purposes.

        if (document === null || document.readyState !== 'loading') {
          (0, _runloop.schedule)('actions', this, this.domReady);
        } else {
          // Ideally we'd just check `document instanceof Document` but currently some tests pass a fake document.
          true &&
            !(function (d) {
              return typeof d.removeEventListener === 'function';
            })(document) &&
            (0, _debug.assert)(
              '[BUG] Called waitForDOMReady with an invalid document',
              (function (d) {
                return typeof d.removeEventListener === 'function';
              })(document),
            );

          var callback = () => {
            document.removeEventListener('DOMContentLoaded', callback);
            (0, _runloop.run)(this, this.domReady);
          };

          document.addEventListener('DOMContentLoaded', callback);
        }
      }
      /**
      This is the autoboot flow:
         1. Boot the app by calling `this.boot()`
      2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
      3. Boot the instance by calling `instance.boot()`
      4. Invoke the `App.ready()` callback
      5. Kick-off routing on the instance
         Ideally, this is all we would need to do:
         ```javascript
      _autoBoot() {
        this.boot().then(() => {
          let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
          return instance.boot();
        }).then((instance) => {
          App.ready();
          instance.startRouting();
        });
      }
      ```
         Unfortunately, we cannot actually write this because we need to participate
      in the "synchronous" boot process. While the code above would work fine on
      the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
      boot a new instance synchronously (see the documentation on `_bootSync()`
      for details).
         Because of this restriction, the actual logic of this method is located
      inside `didBecomeReady()`.
         @private
      @method domReady
    */

      domReady() {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }

        this._bootSync(); // Continues to `didBecomeReady`
      }
      /**
      Use this to defer readiness until some condition is true.
         Example:
         ```javascript
      import Application from '@ember/application';
         let App = Application.create();
         App.deferReadiness();
         fetch('/auth-token')
      .then(response => response.json())
      .then(data => {
        App.token = data.token;
        App.advanceReadiness();
      });
      ```
         This allows you to perform asynchronous setup logic and defer
      booting your application until the setup has finished.
         However, if the setup requires a loading UI, it might be better
      to use the router for this purpose.
         @method deferReadiness
      @public
    */

      deferReadiness() {
        true &&
          !(this instanceof Application) &&
          (0, _debug.assert)(
            'You must call deferReadiness on an instance of Application',
            this instanceof Application,
          );
        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot defer readiness since application has already destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot defer readiness since the application is being destroyed',
            !this.isDestroying,
          );
        true &&
          !(this._readinessDeferrals > 0) &&
          (0, _debug.assert)(
            'You cannot defer readiness since the `ready()` hook has already been called',
            this._readinessDeferrals > 0,
          );
        this._readinessDeferrals++;
      }
      /**
      Call `advanceReadiness` after any asynchronous setup logic has completed.
      Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
      or the application will never become ready and routing will not begin.
         @method advanceReadiness
      @see {Application#deferReadiness}
      @public
    */

      advanceReadiness() {
        true &&
          !(this instanceof Application) &&
          (0, _debug.assert)(
            'You must call advanceReadiness on an instance of Application',
            this instanceof Application,
          );
        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot advance readiness since application has already destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot advance readiness since the application is being destroyed',
            !this.isDestroying,
          );
        true &&
          !(this._readinessDeferrals > 0) &&
          (0, _debug.assert)(
            'You cannot advance readiness since the `ready()` hook has already been called',
            this._readinessDeferrals > 0,
          );
        this._readinessDeferrals--;

        if (this._readinessDeferrals === 0) {
          (0, _runloop.once)(this, this.didBecomeReady);
        }
      }
      /**
      Initialize the application and return a promise that resolves with the `Application`
      object when the boot process is complete.
         Run any application initializers and run the application load hook. These hooks may
      choose to defer readiness. For example, an authentication hook might want to defer
      readiness until the auth token has been retrieved.
         By default, this method is called automatically on "DOM ready"; however, if autoboot
      is disabled, this is automatically called when the first application instance is
      created via `visit`.
         @public
      @method boot
      @return {Promise<Application,Error>}
    */

      boot() {
        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot boot this application since it has already been destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot boot this application since it is being destroyed',
            !this.isDestroying,
          );

        if (this._bootPromise) {
          return this._bootPromise;
        }

        try {
          this._bootSync();
        } catch (_) {
          // Ignore the error: in the asynchronous boot path, the error is already reflected
          // in the promise rejection
        }

        true &&
          !this._bootPromise &&
          (0, _debug.assert)('has boot promise', this._bootPromise);
        return this._bootPromise;
      }
      /**
      Unfortunately, a lot of existing code assumes the booting process is
      "synchronous". Specifically, a lot of tests assumes the last call to
      `app.advanceReadiness()` or `app.reset()` will result in the app being
      fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this assumption,
      so we created the asynchronous version above that returns a promise. But until
      we have migrated all the code, we would have to expose this method for use
      *internally* in places where we need to boot an app "synchronously".
         @private
    */

      _bootSync() {
        if (this._booted || this.isDestroying || this.isDestroyed) {
          return;
        } // Even though this returns synchronously, we still need to make sure the
        // boot promise exists for book-keeping purposes: if anything went wrong in
        // the boot process, we need to store the error as a rejection on the boot
        // promise so that a future caller of `boot()` can tell what failed.

        var defer = (this._bootResolver = _runtime.RSVP.defer());

        this._bootPromise = defer.promise;

        try {
          this.runInitializers();
          (0, _lazy_load.runLoadHooks)('application', this);
          this.advanceReadiness(); // Continues to `didBecomeReady`
        } catch (error) {
          // For the asynchronous boot path
          defer.reject(error); // For the synchronous boot path

          throw error;
        }
      }
      /**
      Reset the application. This is typically used only in tests. It cleans up
      the application in the following order:
         1. Deactivate existing routes
      2. Destroy all objects in the container
      3. Create a new application container
      4. Re-route to the existing url
         Typical Example:
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          App.reset();
        }
      });
         test('first test', function() {
        // App is freshly reset
      });
         test('second test', function() {
        // App is again freshly reset
      });
      ```
         Advanced Example:
         Occasionally you may want to prevent the app from initializing during
      setup. This could enable extra configuration, or enable asserting prior
      to the app becoming ready.
         ```javascript
      import Application from '@ember/application';
      let App;
         run(function() {
        App = Application.create();
      });
         module('acceptance test', {
        setup: function() {
          run(function() {
            App.reset();
            App.deferReadiness();
          });
        }
      });
         test('first test', function() {
        ok(true, 'something before app is initialized');
           run(function() {
          App.advanceReadiness();
        });
           ok(true, 'something after app is initialized');
      });
      ```
         @method reset
      @public
    */

      reset() {
        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot reset this application since it has already been destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot reset this application since it is being destroyed',
            !this.isDestroying,
          );
        true &&
          !(this._globalsMode && this.autoboot) &&
          (0, _debug.assert)(
            `Calling reset() on instances of \`Application\` is not
            supported when globals mode is disabled; call \`visit()\` to
            create new \`ApplicationInstance\`s and dispose them
            via their \`destroy()\` method instead.`,
            this._globalsMode && this.autoboot,
          );
        var instance = this.__deprecatedInstance__;
        this._readinessDeferrals = 1;
        this._bootPromise = null;
        this._bootResolver = null;
        this._booted = false;

        function handleReset() {
          true &&
            !instance &&
            (0, _debug.assert)('expected instance', instance);
          (0, _runloop.run)(instance, 'destroy');

          this._buildDeprecatedInstance();

          (0, _runloop.schedule)('actions', this, '_bootSync');
        }

        (0, _runloop.join)(this, handleReset);
      }
      /**
      @private
      @method didBecomeReady
    */

      didBecomeReady() {
        if (this.isDestroying || this.isDestroyed) {
          return;
        }

        true &&
          !this._bootResolver &&
          (0, _debug.assert)('expected _bootResolver', this._bootResolver);

        try {
          // TODO: Is this still needed for _globalsMode = false?
          // See documentation on `_autoboot()` for details
          if (this.autoboot) {
            var instance;

            if (this._globalsMode) {
              // If we already have the __deprecatedInstance__ lying around, boot it to
              // avoid unnecessary work
              instance = this.__deprecatedInstance__;
              true &&
                !instance &&
                (0, _debug.assert)('expected instance', instance);
            } else {
              // Otherwise, build an instance and boot it. This is currently unreachable,
              // because we forced _globalsMode to === autoboot; but having this branch
              // allows us to locally toggle that flag for weeding out legacy globals mode
              // dependencies independently
              instance = this.buildInstance();
            }

            instance._bootSync(); // TODO: App.ready() is not called when autoboot is disabled, is this correct?

            this.ready();
            instance.startRouting();
          } // For the asynchronous boot path

          this._bootResolver.resolve(this); // For the synchronous boot path

          this._booted = true;
        } catch (error) {
          // For the asynchronous boot path
          this._bootResolver.reject(error); // For the synchronous boot path

          throw error;
        }
      }
      /**
      Called when the Application has become ready, immediately before routing
      begins. The call will be delayed until the DOM has become ready.
         @event ready
      @public
    */

      ready() {
        return this;
      } // This method must be moved to the application instance object

      willDestroy() {
        super.willDestroy();

        if (_lazy_load._loaded['application'] === this) {
          _lazy_load._loaded['application'] = undefined;
        }

        if (this._applicationInstances.size) {
          this._applicationInstances.forEach((i) => i.destroy());

          this._applicationInstances.clear();
        }
      }
      /**
      Boot a new instance of `ApplicationInstance` for the current
      application and navigate it to the given `url`. Returns a `Promise` that
      resolves with the instance when the initial routing and rendering is
      complete, or rejects with any error that occurred during the boot process.
         When `autoboot` is disabled, calling `visit` would first cause the
      application to boot, which runs the application initializers.
         This method also takes a hash of boot-time configuration options for
      customizing the instance's behavior. See the documentation on
      `ApplicationInstance.BootOptions` for details.
         `ApplicationInstance.BootOptions` is an interface class that exists
      purely to document the available options; you do not need to construct it
      manually. Simply pass a regular JavaScript object containing of the
      desired options:
         ```javascript
      MyApp.visit("/", { location: "none", rootElement: "#container" });
      ```
         ### Supported Scenarios
         While the `BootOptions` class exposes a large number of knobs, not all
      combinations of them are valid; certain incompatible combinations might
      result in unexpected behavior.
         For example, booting the instance in the full browser environment
      while specifying a foreign `document` object (e.g. `{ isBrowser: true,
      document: iframe.contentDocument }`) does not work correctly today,
      largely due to Ember's jQuery dependency.
         Currently, there are three officially supported scenarios/configurations.
      Usages outside of these scenarios are not guaranteed to work, but please
      feel free to file bug reports documenting your experience and any issues
      you encountered to help expand support.
         #### Browser Applications (Manual Boot)
         The setup is largely similar to how Ember works out-of-the-box. Normally,
      Ember will boot a default instance for your Application on "DOM ready".
      However, you can customize this behavior by disabling `autoboot`.
         For example, this allows you to render a miniture demo of your application
      into a specific area on your marketing website:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let options = {
          // Override the router's location adapter to prevent it from updating
          // the URL in the address bar
          location: 'none',
             // Override the default `rootElement` on the app to render into a
          // specific `div` on the page
          rootElement: '#demo'
        };
           // Start the app at the special demo URL
        App.visit('/demo', options);
      });
      ```
         Or perhaps you might want to boot two instances of your app on the same
      page for a split-screen multiplayer experience:
         ```javascript
      import MyApp from 'my-app';
         $(function() {
        let App = MyApp.create({ autoboot: false });
           let sessionId = MyApp.generateSessionID();
           let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
        let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
           Promise.all([player1, player2]).then(() => {
          // Both apps have completed the initial render
          $('#loading').fadeOut();
        });
      });
      ```
         Do note that each app instance maintains their own registry/container, so
      they will run in complete isolation by default.
         #### Server-Side Rendering (also known as FastBoot)
         This setup allows you to run your Ember app in a server environment using
      Node.js and render its content into static HTML for SEO purposes.
         ```javascript
      const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
         function renderURL(url) {
        let dom = new SimpleDOM.Document();
        let rootElement = dom.body;
        let options = { isBrowser: false, document: dom, rootElement: rootElement };
           return MyApp.visit(options).then(instance => {
          try {
            return HTMLSerializer.serialize(rootElement.firstChild);
          } finally {
            instance.destroy();
          }
        });
      }
      ```
         In this scenario, because Ember does not have access to a global `document`
      object in the Node.js environment, you must provide one explicitly. In practice,
      in the non-browser environment, the stand-in `document` object only needs to
      implement a limited subset of the full DOM API. The `SimpleDOM` library is known
      to work.
         Since there is no DOM access in the non-browser environment, you must also
      specify a DOM `Element` object in the same `document` for the `rootElement` option
      (as opposed to a selector string like `"body"`).
         See the documentation on the `isBrowser`, `document` and `rootElement` properties
      on `ApplicationInstance.BootOptions` for details.
         #### Server-Side Resource Discovery
         This setup allows you to run the routing layer of your Ember app in a server
      environment using Node.js and completely disable rendering. This allows you
      to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
      a given request and eagerly "push" these resources to the client.
         ```app/initializers/network-service.js
      import BrowserNetworkService from 'app/services/network/browser';
      import NodeNetworkService from 'app/services/network/node';
         // Inject a (hypothetical) service for abstracting all AJAX calls and use
      // the appropriate implementation on the client/server. This also allows the
      // server to log all the AJAX calls made during a particular request and use
      // that for resource-discovery purpose.
         export function initialize(application) {
        if (window) { // browser
          application.register('service:network', BrowserNetworkService);
        } else { // node
          application.register('service:network', NodeNetworkService);
        }
      };
         export default {
        name: 'network-service',
        initialize: initialize
      };
      ```
         ```app/routes/post.js
      import Route from '@ember/routing/route';
      import { service } from '@ember/service';
         // An example of how the (hypothetical) service is used in routes.
         export default class IndexRoute extends Route {
        @service network;
           model(params) {
          return this.network.fetch(`/api/posts/${params.post_id}.json`);
        }
           afterModel(post) {
          if (post.isExternalContent) {
            return this.network.fetch(`/api/external/?url=${post.externalURL}`);
          } else {
            return post;
          }
        }
      }
      ```
         ```javascript
      // Finally, put all the pieces together
         function discoverResourcesFor(url) {
        return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
          let networkService = instance.lookup('service:network');
          return networkService.requests; // => { "/api/posts/123.json": "..." }
        });
      }
      ```
         @public
      @method visit
      @param url {String} The initial URL to navigate to
      @param options {ApplicationInstance.BootOptions}
      @return {Promise<ApplicationInstance, Error>}
    */

      visit(url, options) {
        true &&
          !!this.isDestroyed &&
          (0, _debug.assert)(
            'You cannot visit this application since it has already been destroyed',
            !this.isDestroyed,
          );
        true &&
          !!this.isDestroying &&
          (0, _debug.assert)(
            'You cannot visit this application since it is being destroyed',
            !this.isDestroying,
          );
        return this.boot().then(() => {
          var instance = this.buildInstance();
          return instance
            .boot(options)
            .then(() => instance.visit(url))
            .catch((error) => {
              (0, _runloop.run)(instance, 'destroy');
              throw error;
            });
        });
      }
    }

    Application.initializer = (0, _engine.buildInitializerMethod)(
      'initializers',
      'initializer',
    );
    Application.instanceInitializer = (0, _engine.buildInitializerMethod)(
      'instanceInitializers',
      'instance initializer',
    );

    function commonSetupRegistry(registry) {
      registry.register('router:main', _routing.Router);
      registry.register('-view-registry:main', {
        create() {
          return (0, _utils.dictionary)(null);
        },
      });
      registry.register('route:basic', _routing.Route);
      registry.register('event_dispatcher:main', _views.EventDispatcher);
      registry.register('location:auto', _routing.AutoLocation);
      registry.register('location:hash', _routing.HashLocation);
      registry.register('location:history', _routing.HistoryLocation);
      registry.register('location:none', _routing.NoneLocation);
      registry.register((0, _container.privatize)`-bucket-cache:main`, {
        create() {
          return new _routing.BucketCache();
        },
      });
      registry.register('service:router', _routing.RouterService);
    }

    var _default = Application;
    _exports.default = _default;
  });
  define('@ember/application/lib/lazy_load', [
    'exports',
    '@ember/-internals/environment',
    '@ember/-internals/browser-environment',
  ], function (_exports, _environment, _browserEnvironment) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports._loaded = void 0;
    _exports.onLoad = onLoad;
    _exports.runLoadHooks = runLoadHooks;

    /*globals CustomEvent */

    /**
    @module @ember/application
  */
    var loadHooks = _environment.ENV.EMBER_LOAD_HOOKS || {};
    var loaded = {};
    var _loaded = loaded;
    /**
    Detects when a specific package of Ember (e.g. 'Application')
    has fully loaded and is available for extension.
  
    The provided `callback` will be called with the `name` passed
    resolved from a string into the object:
  
    ``` javascript
    import { onLoad } from '@ember/application';
  
    onLoad('Ember.Application' function(hbars) {
      hbars.registerHelper(...);
    });
    ```
  
    @method onLoad
    @static
    @for @ember/application
    @param name {String} name of hook
    @param callback {Function} callback to be called
    @private
  */

    _exports._loaded = _loaded;

    function onLoad(name, callback) {
      var _a;

      var object = loaded[name];
      var hooks =
        (_a = loadHooks[name]) !== null && _a !== void 0
          ? _a
          : (loadHooks[name] = []);
      hooks.push(callback);

      if (object) {
        callback(object);
      }
    }
    /**
    Called when an Ember.js package (e.g Application) has finished
    loading. Triggers any callbacks registered for this event.
  
    @method runLoadHooks
    @static
    @for @ember/application
    @param name {String} name of hook
    @param object {Object} object to pass to callbacks
    @private
  */

    function runLoadHooks(name, object) {
      var _a;

      loaded[name] = object;

      if (_browserEnvironment.window && typeof CustomEvent === 'function') {
        var event = new CustomEvent(name, {
          detail: object,
        });

        _browserEnvironment.window.dispatchEvent(event);
      }

      (_a = loadHooks[name]) === null || _a === void 0
        ? void 0
        : _a.forEach((callback) => callback(object));
    }
  });
  define('@ember/application/namespace', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Namespace;
      },
    });
  });
  define('@ember/array/index', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/-internals/utils',
  ], function (_exports, _runtime, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'A', {
      enumerable: true,
      get: function () {
        return _runtime.A;
      },
    });
    Object.defineProperty(_exports, 'NativeArray', {
      enumerable: true,
      get: function () {
        return _runtime.NativeArray;
      },
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Array;
      },
    });
    Object.defineProperty(_exports, 'isArray', {
      enumerable: true,
      get: function () {
        return _runtime.isArray;
      },
    });
    Object.defineProperty(_exports, 'makeArray', {
      enumerable: true,
      get: function () {
        return _utils.makeArray;
      },
    });
  });
  define('@ember/array/mutable', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.MutableArray;
      },
    });
  });
  define('@ember/array/proxy', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.ArrayProxy;
      },
    });
  });
  define('@ember/canary-features/index', [
    'exports',
    '@ember/-internals/environment',
  ], function (_exports, _environment) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.FEATURES = _exports.EMBER_UNIQUE_ID_HELPER = _exports.EMBER_LIBRARIES_ISREGISTERED = _exports.EMBER_IMPROVED_INSTRUMENTATION = _exports.EMBER_DEFAULT_HELPER_MANAGER = _exports.DEFAULT_FEATURES = void 0;
    _exports.isEnabled = isEnabled;

    /**
    Set `EmberENV.FEATURES` in your application's `config/environment.js` file
    to enable canary features in your application.
  
    See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
    for more details.
  
    @module @ember/canary-features
    @public
  */
    var DEFAULT_FEATURES = {
      EMBER_LIBRARIES_ISREGISTERED: false,
      EMBER_IMPROVED_INSTRUMENTATION: false,
      EMBER_UNIQUE_ID_HELPER: true,
      EMBER_DEFAULT_HELPER_MANAGER: true,
    };
    /**
    The hash of enabled Canary features. Add to this, any canary features
    before creating your application.
  
    @class FEATURES
    @static
    @since 1.1.0
    @public
  */

    _exports.DEFAULT_FEATURES = DEFAULT_FEATURES;
    var FEATURES = Object.assign(DEFAULT_FEATURES, _environment.ENV.FEATURES);
    /**
    Determine whether the specified `feature` is enabled. Used by Ember's
    build tools to exclude experimental features from beta/stable builds.
  
    You can define the following configuration options:
  
    * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
      enabled/disabled.
  
    @method isEnabled
    @param {String} feature The feature to check
    @return {Boolean}
    @since 1.1.0
    @public
  */

    _exports.FEATURES = FEATURES;

    function isEnabled(feature) {
      var value = FEATURES[feature];

      if (value === true || value === false) {
        return value;
      } else if (_environment.ENV.ENABLE_OPTIONAL_FEATURES) {
        return true;
      } else {
        return false;
      }
    }

    function featureValue(value) {
      if (_environment.ENV.ENABLE_OPTIONAL_FEATURES && value === null) {
        return true;
      }

      return value;
    }

    var EMBER_LIBRARIES_ISREGISTERED = featureValue(
      FEATURES.EMBER_LIBRARIES_ISREGISTERED,
    );
    _exports.EMBER_LIBRARIES_ISREGISTERED = EMBER_LIBRARIES_ISREGISTERED;
    var EMBER_IMPROVED_INSTRUMENTATION = featureValue(
      FEATURES.EMBER_IMPROVED_INSTRUMENTATION,
    );
    _exports.EMBER_IMPROVED_INSTRUMENTATION = EMBER_IMPROVED_INSTRUMENTATION;
    var EMBER_UNIQUE_ID_HELPER = featureValue(FEATURES.EMBER_UNIQUE_ID_HELPER);
    _exports.EMBER_UNIQUE_ID_HELPER = EMBER_UNIQUE_ID_HELPER;
    var EMBER_DEFAULT_HELPER_MANAGER = featureValue(
      FEATURES.EMBER_DEFAULT_HELPER_MANAGER,
    );
    _exports.EMBER_DEFAULT_HELPER_MANAGER = EMBER_DEFAULT_HELPER_MANAGER;
  });
  define('@ember/component/helper', [
    'exports',
    '@ember/-internals/glimmer',
  ], function (_exports, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _glimmer.Helper;
      },
    });
    Object.defineProperty(_exports, 'helper', {
      enumerable: true,
      get: function () {
        return _glimmer.helper;
      },
    });
  });
  define('@ember/component/index', [
    'exports',
    '@glimmer/manager',
    '@ember/-internals/glimmer',
  ], function (_exports, _manager, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'Input', {
      enumerable: true,
      get: function () {
        return _glimmer.Input;
      },
    });
    Object.defineProperty(_exports, 'Textarea', {
      enumerable: true,
      get: function () {
        return _glimmer.Textarea;
      },
    });
    Object.defineProperty(_exports, 'capabilities', {
      enumerable: true,
      get: function () {
        return _glimmer.componentCapabilities;
      },
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _glimmer.Component;
      },
    });
    Object.defineProperty(_exports, 'getComponentTemplate', {
      enumerable: true,
      get: function () {
        return _manager.getComponentTemplate;
      },
    });
    Object.defineProperty(_exports, 'setComponentManager', {
      enumerable: true,
      get: function () {
        return _glimmer.setComponentManager;
      },
    });
    Object.defineProperty(_exports, 'setComponentTemplate', {
      enumerable: true,
      get: function () {
        return _manager.setComponentTemplate;
      },
    });
  });
  define('@ember/component/template-only', [
    'exports',
    '@glimmer/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.templateOnlyComponent;
      },
    });
  });
  define('@ember/controller/index', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/-internals/metal',
    '@ember/controller/lib/controller_mixin',
  ], function (_exports, _runtime, _metal, _controller_mixin) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.inject = inject;

    class Controller extends _runtime.FrameworkObject.extend(
      _controller_mixin.default,
    ) {}

    function inject() {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      return (0, _metal.inject)('controller', ...args);
    }

    var _default = Controller;
    _exports.default = _default;
  });
  define('@ember/controller/lib/controller_mixin', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/-internals/utils',
  ], function (_exports, _metal, _runtime, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var MODEL = (0, _utils.symbol)('MODEL');

    var ControllerMixin = _metal.Mixin.create(_runtime.ActionHandler, {
      /* ducktype as a controller */
      isController: true,

      /**
      The object to which actions from the view should be sent.
         For example, when a Handlebars template uses the `{{action}}` helper,
      it will attempt to send the action to the view's controller's `target`.
         By default, the value of the target property is set to the router, and
      is injected when a controller is instantiated. This injection is applied
      as part of the application's initialization process. In most cases the
      `target` property will automatically be set to the logical consumer of
      actions for the controller.
         @property target
      @default null
      @public
    */
      target: null,
      store: null,

      /**
      The controller's current model. When retrieving or modifying a controller's
      model, this property should be used instead of the `content` property.
         @property model
      @public
    */
      model: (0, _metal.computed)({
        get() {
          return this[MODEL];
        },

        set(_key, value) {
          return (this[MODEL] = value);
        },
      }),
    });

    var _default = ControllerMixin;
    _exports.default = _default;
  });
  define('@ember/debug/container-debug-adapter', [
    'exports',
    '@ember/-internals/extension-support',
  ], function (_exports, _extensionSupport) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _extensionSupport.ContainerDebugAdapter;
      },
    });
  });
  define('@ember/debug/data-adapter', [
    'exports',
    '@ember/-internals/extension-support',
  ], function (_exports, _extensionSupport) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _extensionSupport.DataAdapter;
      },
    });
  });
  define('@ember/debug/index', [
    'exports',
    '@ember/-internals/browser-environment',
    '@ember/error',
    '@ember/debug/lib/deprecate',
    '@ember/debug/lib/testing',
    '@ember/debug/lib/warn',
    '@ember/-internals/utils',
    '@ember/debug/lib/capture-render-tree',
  ], function (
    _exports,
    _browserEnvironment,
    _error,
    _deprecate2,
    _testing,
    _warn2,
    _utils,
    _captureRenderTree,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.assert = _exports._warnIfUsingStrippedFeatureFlags = void 0;
    Object.defineProperty(_exports, 'captureRenderTree', {
      enumerable: true,
      get: function () {
        return _captureRenderTree.default;
      },
    });
    _exports.info = _exports.getDebugFunction = _exports.deprecateFunc = _exports.deprecate = _exports.debugSeal = _exports.debugFreeze = _exports.debug = void 0;
    Object.defineProperty(_exports, 'inspect', {
      enumerable: true,
      get: function () {
        return _utils.inspect;
      },
    });
    Object.defineProperty(_exports, 'isTesting', {
      enumerable: true,
      get: function () {
        return _testing.isTesting;
      },
    });
    Object.defineProperty(_exports, 'registerDeprecationHandler', {
      enumerable: true,
      get: function () {
        return _deprecate2.registerHandler;
      },
    });
    Object.defineProperty(_exports, 'registerWarnHandler', {
      enumerable: true,
      get: function () {
        return _warn2.registerHandler;
      },
    });
    _exports.setDebugFunction = _exports.runInDebug = void 0;
    Object.defineProperty(_exports, 'setTesting', {
      enumerable: true,
      get: function () {
        return _testing.setTesting;
      },
    });
    _exports.warn = void 0;

    // These are the default production build versions:
    var noop = () => {};

    var assert = noop;
    _exports.assert = assert;
    var info = noop;
    _exports.info = info;
    var warn = noop;
    _exports.warn = warn;
    var debug = noop;
    _exports.debug = debug;
    var deprecate = noop;
    _exports.deprecate = deprecate;
    var debugSeal = noop;
    _exports.debugSeal = debugSeal;
    var debugFreeze = noop;
    _exports.debugFreeze = debugFreeze;
    var runInDebug = noop;
    _exports.runInDebug = runInDebug;
    var setDebugFunction = noop;
    _exports.setDebugFunction = setDebugFunction;
    var getDebugFunction = noop;
    _exports.getDebugFunction = getDebugFunction;

    var deprecateFunc = function () {
      return arguments[arguments.length - 1];
    };

    _exports.deprecateFunc = deprecateFunc;

    if (
      true
      /* DEBUG */
    ) {
      _exports.setDebugFunction = setDebugFunction = function (type, callback) {
        switch (type) {
          case 'assert':
            return (_exports.assert = assert = callback);

          case 'info':
            return (_exports.info = info = callback);

          case 'warn':
            return (_exports.warn = warn = callback);

          case 'debug':
            return (_exports.debug = debug = callback);

          case 'deprecate':
            return (_exports.deprecate = deprecate = callback);

          case 'debugSeal':
            return (_exports.debugSeal = debugSeal = callback);

          case 'debugFreeze':
            return (_exports.debugFreeze = debugFreeze = callback);

          case 'runInDebug':
            return (_exports.runInDebug = runInDebug = callback);

          case 'deprecateFunc':
            return (_exports.deprecateFunc = deprecateFunc = callback);
        }
      };

      _exports.getDebugFunction = getDebugFunction = function (type) {
        switch (type) {
          case 'assert':
            return assert;

          case 'info':
            return info;

          case 'warn':
            return warn;

          case 'debug':
            return debug;

          case 'deprecate':
            return deprecate;

          case 'debugSeal':
            return debugSeal;

          case 'debugFreeze':
            return debugFreeze;

          case 'runInDebug':
            return runInDebug;

          case 'deprecateFunc':
            return deprecateFunc;
        }
      };
    }
    /**
  @module @ember/debug
  */

    if (
      true
      /* DEBUG */
    ) {
      /**
      Verify that a certain expectation is met, or throw a exception otherwise.
         This is useful for communicating assumptions in the code to other human
      readers as well as catching bugs that accidentally violates these
      expectations.
         Assertions are removed from production builds, so they can be freely added
      for documentation and debugging purposes without worries of incuring any
      performance penalty. However, because of that, they should not be used for
      checks that could reasonably fail during normal usage. Furthermore, care
      should be taken to avoid accidentally relying on side-effects produced from
      evaluating the condition itself, since the code will not run in production.
         ```javascript
      import { assert } from '@ember/debug';
         // Test for truthiness
      assert('Must pass a string', typeof str === 'string');
         // Fail unconditionally
      assert('This code path should never be run');
      ```
         @method assert
      @static
      @for @ember/debug
      @param {String} description Describes the expectation. This will become the
        text of the Error thrown if the assertion fails.
      @param {any} condition Must be truthy for the assertion to pass. If
        falsy, an exception will be thrown.
      @public
      @since 1.0.0
    */
      setDebugFunction('assert', function assert(desc, test) {
        if (!test) {
          throw new _error.default(`Assertion Failed: ${desc}`);
        }
      });
      /**
      Display a debug notice.
         Calls to this function are not invoked in production builds.
         ```javascript
      import { debug } from '@ember/debug';
         debug('I\'m a debug notice!');
      ```
         @method debug
      @for @ember/debug
      @static
      @param {String} message A debug message to display.
      @public
    */

      setDebugFunction('debug', function debug(message) {
        /* eslint-disable no-console */
        if (console.debug) {
          console.debug(`DEBUG: ${message}`);
        } else {
          console.log(`DEBUG: ${message}`);
        }
        /* eslint-enable no-console */
      });
      /**
      Display an info notice.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         @method info
      @private
    */

      setDebugFunction('info', function info() {
        console.info(...arguments);
        /* eslint-disable-line no-console */
      });
      /**
     @module @ember/debug
     @public
    */

      /**
      Alias an old, deprecated method with its new counterpart.
         Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only) when the assigned method is called.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import { deprecateFunc } from '@ember/debug';
         Ember.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);
      ```
         @method deprecateFunc
      @static
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Object} [options] The options object for `deprecate`.
      @param {Function} func The new function called to replace its deprecated counterpart.
      @return {Function} A new function that wraps the original function with a deprecation warning
      @private
    */

      setDebugFunction('deprecateFunc', function deprecateFunc() {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        if (args.length === 3) {
          var [message, options, func] = args;
          return function () {
            deprecate(message, false, options);

            for (
              var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2] = arguments[_key2];
            }

            return func.apply(this, args);
          };
        } else {
          var [_message, _func] = args;
          return function () {
            deprecate(_message);
            return _func.apply(this, arguments);
          };
        }
      });
      /**
     @module @ember/debug
     @public
    */

      /**
      Run a function meant for debugging.
         Calls to this function are removed from production builds, so they can be
      freely added for documentation and debugging purposes without worries of
      incuring any performance penalty.
         ```javascript
      import Component from '@ember/component';
      import { runInDebug } from '@ember/debug';
         runInDebug(() => {
        Component.reopen({
          didInsertElement() {
            console.log("I'm happy");
          }
        });
      });
      ```
         @method runInDebug
      @for @ember/debug
      @static
      @param {Function} func The function to be executed.
      @since 1.5.0
      @public
    */

      setDebugFunction('runInDebug', function runInDebug(func) {
        func();
      });
      setDebugFunction('debugSeal', function debugSeal(obj) {
        Object.seal(obj);
      });
      setDebugFunction('debugFreeze', function debugFreeze(obj) {
        // re-freezing an already frozen object introduces a significant
        // performance penalty on Chrome (tested through 59).
        //
        // See: https://bugs.chromium.org/p/v8/issues/detail?id=6450
        if (!Object.isFrozen(obj)) {
          Object.freeze(obj);
        }
      });
      setDebugFunction('deprecate', _deprecate2.default);
      setDebugFunction('warn', _warn2.default);
    }

    var _warnIfUsingStrippedFeatureFlags;

    _exports._warnIfUsingStrippedFeatureFlags = _warnIfUsingStrippedFeatureFlags;

    if (
      true &&
      /* DEBUG */
      !(0, _testing.isTesting)()
    ) {
      if (
        typeof window !== 'undefined' &&
        (_browserEnvironment.isFirefox || _browserEnvironment.isChrome) &&
        window.addEventListener
      ) {
        window.addEventListener(
          'load',
          () => {
            if (
              document.documentElement &&
              document.documentElement.dataset &&
              !document.documentElement.dataset['emberExtension']
            ) {
              var downloadURL;

              if (_browserEnvironment.isChrome) {
                downloadURL =
                  'https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi';
              } else if (_browserEnvironment.isFirefox) {
                downloadURL =
                  'https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/';
              }

              debug(
                `For more advanced debugging, install the Ember Inspector from ${downloadURL}`,
              );
            }
          },
          false,
        );
      }
    }
  });
  define('@ember/debug/lib/capture-render-tree', [
    'exports',
    '@glimmer/util',
  ], function (_exports, _util) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = captureRenderTree;

    /**
    @module @ember/debug
  */

    /**
    Ember Inspector calls this function to capture the current render tree.
  
    In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`
    before loading Ember.
  
    @private
    @static
    @method captureRenderTree
    @for @ember/debug
    @param app {ApplicationInstance} An `ApplicationInstance`.
    @since 3.14.0
  */
    function captureRenderTree(app) {
      // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.
      // This is only for debug stuff so not very risky.
      var renderer = (0, _util.expect)(
        app.lookup('renderer:-dom'),
        `BUG: owner is missing renderer`,
      );
      return renderer.debugRenderTree.capture();
    }
  });
  define('@ember/debug/lib/deprecate', [
    'exports',
    '@ember/-internals/environment',
    '@ember/debug/index',
    '@ember/debug/lib/handlers',
  ], function (_exports, _environment, _index, _handlers) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.missingOptionDeprecation = _exports.default = void 0;

    /**
   @module @ember/debug
   @public
  */

    /**
    Allows for runtime registration of handler functions that override the default deprecation behavior.
    Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).
    The following example demonstrates its usage by registering a handler that throws an error if the
    message contains the word "should", otherwise defers to the default handler.
  
    ```javascript
    import { registerDeprecationHandler } from '@ember/debug';
  
    registerDeprecationHandler((message, options, next) => {
      if (message.indexOf('should') !== -1) {
        throw new Error(`Deprecation message with should: ${message}`);
      } else {
        // defer to whatever handler was registered before this one
        next(message, options);
      }
    });
    ```
  
    The handler function takes the following arguments:
  
    <ul>
      <li> <code>message</code> - The message received from the deprecation call.</li>
      <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
        <ul>
          <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
          <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
        </ul>
      <li> <code>next</code> - A function that calls into the previously registered handler.</li>
    </ul>
  
    @public
    @static
    @method registerDeprecationHandler
    @for @ember/debug
    @param handler {Function} A function to handle deprecation calls.
    @since 2.1.0
  */
    var registerHandler = () => {};

    _exports.registerHandler = registerHandler;
    var missingOptionsDeprecation;
    _exports.missingOptionsDeprecation = missingOptionsDeprecation;
    var missingOptionsIdDeprecation;
    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;

    var missingOptionDeprecation = () => '';

    _exports.missingOptionDeprecation = missingOptionDeprecation;

    var deprecate = () => {};

    if (
      true
      /* DEBUG */
    ) {
      _exports.registerHandler = registerHandler = function registerHandler(
        handler,
      ) {
        (0, _handlers.registerHandler)('deprecate', handler);
      };

      var formatMessage = function formatMessage(_message, options) {
        var message = _message;

        if (options === null || options === void 0 ? void 0 : options.id) {
          message = message + ` [deprecation id: ${options.id}]`;
        }

        if (options === null || options === void 0 ? void 0 : options.until) {
          message =
            message + ` This will be removed in Ember ${options.until}.`;
        }

        if (options === null || options === void 0 ? void 0 : options.url) {
          message += ` See ${options.url} for more details.`;
        }

        return message;
      };

      registerHandler(function logDeprecationToConsole(message, options) {
        var updatedMessage = formatMessage(message, options);
        console.warn(`DEPRECATION: ${updatedMessage}`); // eslint-disable-line no-console
      });
      var captureErrorForStack;

      if (new Error().stack) {
        captureErrorForStack = () => new Error();
      } else {
        captureErrorForStack = () => {
          try {
            __fail__.fail();
          } catch (e) {
            return e;
          }
        };
      }

      registerHandler(function logDeprecationStackTrace(
        message,
        options,
        next,
      ) {
        if (_environment.ENV.LOG_STACKTRACE_ON_DEPRECATION) {
          var stackStr = '';
          var error = captureErrorForStack();
          var stack;

          if (error instanceof Error) {
            if (error.stack) {
              if (error['arguments']) {
                // Chrome
                stack = error.stack
                  .replace(/^\s+at\s+/gm, '')
                  .replace(/^([^(]+?)([\n$])/gm, '{anonymous}($1)$2')
                  .replace(
                    /^Object.<anonymous>\s*\(([^)]+)\)/gm,
                    '{anonymous}($1)',
                  )
                  .split('\n');
                stack.shift();
              } else {
                // Firefox
                stack = error.stack
                  .replace(/(?:\n@:0)?\s+$/m, '')
                  .replace(/^\(/gm, '{anonymous}(')
                  .split('\n');
              }

              stackStr = `\n    ${stack.slice(2).join('\n    ')}`;
            }
          }

          var updatedMessage = formatMessage(message, options);
          console.warn(`DEPRECATION: ${updatedMessage}${stackStr}`); // eslint-disable-line no-console
        } else {
          next(message, options);
        }
      });
      registerHandler(function raiseOnDeprecation(message, options, next) {
        if (_environment.ENV.RAISE_ON_DEPRECATION) {
          var updatedMessage = formatMessage(message);
          throw new Error(updatedMessage);
        } else {
          next(message, options);
        }
      });
      _exports.missingOptionsDeprecation = missingOptionsDeprecation =
        'When calling `deprecate` you ' +
        'must provide an `options` hash as the third parameter.  ' +
        '`options` should include `id` and `until` properties.';
      _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation =
        'When calling `deprecate` you must provide `id` in options.';

      _exports.missingOptionDeprecation = missingOptionDeprecation = (
        id,
        missingOption,
      ) => {
        return `When calling \`deprecate\` you must provide \`${missingOption}\` in options. Missing options.${missingOption} in "${id}" deprecation`;
      };
      /**
     @module @ember/debug
     @public
     */

      /**
      Display a deprecation warning with the provided message and a stack trace
      (Chrome and Firefox only).
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         @method deprecate
      @for @ember/debug
      @param {String} message A description of the deprecation.
      @param {Boolean} test A boolean. If falsy, the deprecation will be displayed.
      @param {Object} options
      @param {String} options.id A unique id for this deprecation. The id can be
        used by Ember debugging tools to change the behavior (raise, log or silence)
        for that specific deprecation. The id should be namespaced by dots, e.g.
        "view.helper.select".
      @param {string} options.until The version of Ember when this deprecation
        warning will be removed.
      @param {String} options.for A namespace for the deprecation, usually the package name
      @param {Object} options.since Describes when the deprecation became available and enabled.
      @param {String} [options.url] An optional url to the transition guide on the
            emberjs.com website.
      @static
      @public
      @since 1.0.0
    */

      deprecate = function deprecate(message, test, options) {
        (0, _index.assert)(
          missingOptionsDeprecation,
          Boolean(options && (options.id || options.until)),
        );
        (0, _index.assert)(missingOptionsIdDeprecation, Boolean(options.id));
        (0, _index.assert)(
          missingOptionDeprecation(options.id, 'until'),
          Boolean(options.until),
        );
        (0, _index.assert)(
          missingOptionDeprecation(options.id, 'for'),
          Boolean(options.for),
        );
        (0, _index.assert)(
          missingOptionDeprecation(options.id, 'since'),
          Boolean(options.since),
        );
        (0, _handlers.invoke)('deprecate', message, test, options);
      };
    }

    var _default = deprecate;
    _exports.default = _default;
  });
  define('@ember/debug/lib/handlers', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.registerHandler = _exports.invoke = _exports.HANDLERS = void 0;
    var HANDLERS = {};
    _exports.HANDLERS = HANDLERS;

    var registerHandler = function registerHandler(_type, _callback) {};

    _exports.registerHandler = registerHandler;

    var invoke = () => {};

    _exports.invoke = invoke;

    if (
      true
      /* DEBUG */
    ) {
      _exports.registerHandler = registerHandler = function registerHandler(
        type,
        callback,
      ) {
        var nextHandler = HANDLERS[type] || (() => {});

        HANDLERS[type] = (message, options) => {
          callback(message, options, nextHandler);
        };
      };

      _exports.invoke = invoke = function invoke(type, message, test, options) {
        if (test) {
          return;
        }

        var handlerForType = HANDLERS[type];

        if (handlerForType) {
          handlerForType(message, options);
        }
      };
    }
  });
  define('@ember/debug/lib/testing', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.isTesting = isTesting;
    _exports.setTesting = setTesting;
    var testing = false;

    function isTesting() {
      return testing;
    }

    function setTesting(value) {
      testing = Boolean(value);
    }
  });
  define('@ember/debug/lib/warn', [
    'exports',
    '@ember/debug/index',
    '@ember/debug/lib/handlers',
  ], function (_exports, _index, _handlers) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.registerHandler = _exports.missingOptionsIdDeprecation = _exports.missingOptionsDeprecation = _exports.default = void 0;

    var registerHandler = () => {};

    _exports.registerHandler = registerHandler;

    var warn = () => {};

    var missingOptionsDeprecation;
    _exports.missingOptionsDeprecation = missingOptionsDeprecation;
    var missingOptionsIdDeprecation;
    /**
  @module @ember/debug
  */

    _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation;

    if (
      true
      /* DEBUG */
    ) {
      /**
      Allows for runtime registration of handler functions that override the default warning behavior.
      Warnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).
      The following example demonstrates its usage by registering a handler that does nothing overriding Ember's
      default warning behavior.
         ```javascript
      import { registerWarnHandler } from '@ember/debug';
         // next is not called, so no warnings get the default behavior
      registerWarnHandler(() => {});
      ```
         The handler function takes the following arguments:
         <ul>
        <li> <code>message</code> - The message received from the warn call. </li>
        <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>
          <ul>
            <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>
          </ul>
        <li> <code>next</code> - A function that calls into the previously registered handler.</li>
      </ul>
         @public
      @static
      @method registerWarnHandler
      @for @ember/debug
      @param handler {Function} A function to handle warnings.
      @since 2.1.0
    */
      _exports.registerHandler = registerHandler = function registerHandler(
        handler,
      ) {
        (0, _handlers.registerHandler)('warn', handler);
      };

      registerHandler(function logWarning(message) {
        /* eslint-disable no-console */
        console.warn(`WARNING: ${message}`);
        /* eslint-enable no-console */
      });
      _exports.missingOptionsDeprecation = missingOptionsDeprecation =
        'When calling `warn` you ' +
        'must provide an `options` hash as the third parameter.  ' +
        '`options` should include an `id` property.';
      _exports.missingOptionsIdDeprecation = missingOptionsIdDeprecation =
        'When calling `warn` you must provide `id` in options.';
      /**
      Display a warning with the provided message.
         * In a production build, this method is defined as an empty function (NOP).
      Uses of this method in Ember itself are stripped from the ember.prod.js build.
         ```javascript
      import { warn } from '@ember/debug';
      import tomsterCount from './tomster-counter'; // a module in my project
         // Log a warning if we have more than 3 tomsters
      warn('Too many tomsters!', tomsterCount <= 3, {
        id: 'ember-debug.too-many-tomsters'
      });
      ```
         @method warn
      @for @ember/debug
      @static
      @param {String} message A warning to display.
      @param {Boolean} test An optional boolean. If falsy, the warning
        will be displayed.
      @param {Object} options An object that can be used to pass a unique
        `id` for this warning.  The `id` can be used by Ember debugging tools
        to change the behavior (raise, log, or silence) for that specific warning.
        The `id` should be namespaced by dots, e.g. "ember-debug.feature-flag-with-features-stripped"
      @public
      @since 1.0.0
    */

      warn = function warn(message, test, options) {
        if (arguments.length === 2 && typeof test === 'object') {
          options = test;
          test = false;
        }

        (0, _index.assert)(missingOptionsDeprecation, Boolean(options));
        (0, _index.assert)(
          missingOptionsIdDeprecation,
          Boolean(options && options.id),
        );
        (0, _handlers.invoke)('warn', message, test, options);
      };
    }

    var _default = warn;
    _exports.default = _default;
  });
  define('@ember/deprecated-features/index', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.ASSIGN = void 0;

    /* eslint-disable no-implicit-coercion */
    // These versions should be the version that the deprecation was _introduced_,
    // not the version that the feature will be removed.
    var ASSIGN = !!'4.0.0-beta.1';
    _exports.ASSIGN = ASSIGN;
  });
  define('@ember/destroyable/index', [
    'exports',
    '@glimmer/destroyable',
  ], function (_exports, _destroyable) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'assertDestroyablesDestroyed', {
      enumerable: true,
      get: function () {
        return _destroyable.assertDestroyablesDestroyed;
      },
    });
    Object.defineProperty(_exports, 'associateDestroyableChild', {
      enumerable: true,
      get: function () {
        return _destroyable.associateDestroyableChild;
      },
    });
    Object.defineProperty(_exports, 'destroy', {
      enumerable: true,
      get: function () {
        return _destroyable.destroy;
      },
    });
    Object.defineProperty(_exports, 'enableDestroyableTracking', {
      enumerable: true,
      get: function () {
        return _destroyable.enableDestroyableTracking;
      },
    });
    Object.defineProperty(_exports, 'isDestroyed', {
      enumerable: true,
      get: function () {
        return _destroyable.isDestroyed;
      },
    });
    Object.defineProperty(_exports, 'isDestroying', {
      enumerable: true,
      get: function () {
        return _destroyable.isDestroying;
      },
    });
    _exports.registerDestructor = registerDestructor;
    _exports.unregisterDestructor = unregisterDestructor;

    /**
    Ember manages the lifecycles and lifetimes of many built in constructs, such
    as components, and does so in a hierarchical way - when a parent component is
    destroyed, all of its children are destroyed as well.
  
    This destroyables API exposes the basic building blocks for destruction:
  
    * registering a function to be ran when an object is destroyyed
    * checking if an object is in a destroying state
    * associate an object as a child of another so that the child object will be destroyed
      when the associated parent object is destroyed.
  
    @module @ember/destroyable
    @public
  */

    /**
    This function is used to associate a destroyable object with a parent. When the parent
    is destroyed, all registered children will also be destroyed.
  
    ```js
    class CustomSelect extends Component {
      constructor(...args) {
        super(...args);
  
        // obj is now a child of the component. When the component is destroyed,
        // obj will also be destroyed, and have all of its destructors triggered.
        this.obj = associateDestroyableChild(this, {});
      }
    }
    ```
  
    Returns the associated child for convenience.
  
    @method associateDestroyableChild
    @for @ember/destroyable
    @param {Object|Function} parent the destroyable to entangle the child destroyables lifetime with
    @param {Object|Function} child the destroyable to be entangled with the parents lifetime
    @returns {Object|Function} the child argument
    @static
    @public
  */

    /**
   Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns
   false.
  
    ```js
    let obj = {};
    isDestroying(obj); // false
    destroy(obj);
    isDestroying(obj); // true
    // ...sometime later, after scheduled destruction
    isDestroyed(obj); // true
    isDestroying(obj); // true
    ```
  
    @method isDestroying
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */

    /**
    Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise
    returns false.
  
    ```js
    let obj = {};
  
    isDestroyed(obj); // false
    destroy(obj);
  
    // ...sometime later, after scheduled destruction
  
    isDestroyed(obj); // true
    ```
  
    @method isDestroyed
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to check
    @returns {Boolean}
    @static
    @public
  */

    /**
    Initiates the destruction of a destroyable object. It runs all associated destructors, and then
    destroys all children recursively.
  
    ```js
    let obj = {};
  
    registerDestructor(obj, () => console.log('destroyed!'));
  
    destroy(obj); // this will schedule the destructor to be called
  
    // ...some time later, during scheduled destruction
  
    // destroyed!
    ```
  
    Destruction via `destroy()` follows these steps:
  
    1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`
    2, Call `destroy()` on each of the destroyable's associated children
    3, Schedule calling the destroyable's destructors
    4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`
  
    This results in the entire tree of destroyables being first marked as destroying,
    then having all of their destructors called, and finally all being marked as isDestroyed.
    There won't be any in between states where some items are marked as `isDestroying` while
    destroying, while others are not.
  
    @method destroy
    @for @ember/destroyable
    @param {Object|Function} destroyable the object to destroy
    @static
    @public
  */

    /**
    This function asserts that all objects which have associated destructors or associated children
    have been destroyed at the time it is called. It is meant to be a low level hook that testing
    frameworks can use to hook into and validate that all destroyables have in fact been destroyed.
  
    This function requires that `enableDestroyableTracking` was called previously, and is only
    available in non-production builds.
  
    @method assertDestroyablesDestroyed
    @for @ember/destroyable
    @static
    @public
  */

    /**
    This function instructs the destroyable system to keep track of all destroyables (their
    children, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`
    to be used to ensure that all destroyable tasks (registered destructors and associated children)
    have completed when `assertDestroyablesDestroyed` is called.
  
    @method enableDestroyableTracking
    @for @ember/destroyable
    @static
    @public
  */

    /**
    Receives a destroyable object and a destructor function, and associates the
    function with it. When the destroyable is destroyed with destroy, or when its
    parent is destroyed, the destructor function will be called.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, () => this.resize.unregister(this));
      }
    }
    ```
  
    Multiple destructors can be associated with a given destroyable, and they can be
    associated over time, allowing libraries to dynamically add destructors as needed.
    `registerDestructor` also returns the associated destructor function, for convenience.
  
    The destructor function is passed a single argument, which is the destroyable itself.
    This allows the function to be reused multiple times for many destroyables, rather
    than creating a closure function per destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor } from '@ember/destroyable';
  
    function unregisterResize(instance) {
      instance.resize.unregister(instance);
    }
  
    class Modal extends Component {
      @service resize;
  
      constructor(...args) {
        super(...args);
  
        this.resize.register(this, this.layout);
  
        registerDestructor(this, unregisterResize);
      }
    }
    ```
  
    @method registerDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to register the destructor function with
    @param {Function} destructor the destructor to run when the destroyable object is destroyed
    @static
    @public
  */
    function registerDestructor(destroyable, destructor) {
      return (0, _destroyable.registerDestructor)(destroyable, destructor);
    }
    /**
    Receives a destroyable and a destructor function, and de-associates the destructor
    from the destroyable.
  
    ```js
    import Component from '@glimmer/component';
    import { registerDestructor, unregisterDestructor } from '@ember/destroyable';
  
    class Modal extends Component {
      @service modals;
  
      constructor(...args) {
        super(...args);
  
        this.modals.add(this);
  
        this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));
      }
  
      @action pinModal() {
        unregisterDestructor(this, this.modalDestructor);
      }
    }
    ```
  
    @method unregisterDestructor
    @for @ember/destroyable
    @param {Object|Function} destroyable the destroyable to unregister the destructor function from
    @param {Function} destructor the destructor to remove from the destroyable
    @static
    @public
  */

    function unregisterDestructor(destroyable, destructor) {
      return (0, _destroyable.unregisterDestructor)(destroyable, destructor);
    }
  });
  define('@ember/engine/index', [
    'exports',
    '@ember/engine/lib/engine-parent',
    '@ember/-internals/utils',
    '@ember/controller',
    '@ember/-internals/runtime',
    '@ember/-internals/container',
    'dag-map',
    '@ember/debug',
    '@ember/-internals/metal',
    '@ember/engine/instance',
    '@ember/-internals/routing',
    '@ember/-internals/extension-support',
    '@ember/-internals/views',
    '@ember/-internals/glimmer',
    '@ember/-internals/runtime/lib/mixins/registry_proxy',
  ], function (
    _exports,
    _engineParent,
    _utils,
    _controller,
    _runtime,
    _container,
    _dagMap,
    _debug,
    _metal,
    _instance,
    _routing,
    _extensionSupport,
    _views,
    _glimmer,
    _registry_proxy,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.buildInitializerMethod = buildInitializerMethod;
    _exports.default = void 0;
    Object.defineProperty(_exports, 'getEngineParent', {
      enumerable: true,
      get: function () {
        return _engineParent.getEngineParent;
      },
    });
    Object.defineProperty(_exports, 'setEngineParent', {
      enumerable: true,
      get: function () {
        return _engineParent.setEngineParent;
      },
    });

    function props(obj) {
      var properties = [];

      for (var key in obj) {
        properties.push(key);
      }

      return properties;
    }

    class Engine extends _runtime.Namespace.extend(_registry_proxy.default) {
      constructor() {
        super(...arguments);
        /**
        A private flag indicating whether an engine's initializers have run yet.
               @private
        @property _initializersRan
      */

        this._initializersRan = false;
      }
      /**
      This creates a registry with the default Ember naming conventions.
         It also configures the registry:
         * registered views are created every time they are looked up (they are
        not singletons)
      * registered templates are not factories; the registered value is
        returned directly.
      * the router receives the application as its `namespace` property
      * all controllers receive the router as their `target` and `controllers`
        properties
      * all controllers receive the application as their `namespace` property
      * the application view receives the application controller as its
        `controller` property
      * the application view receives the application template as its
        `defaultTemplate` property
         @method buildRegistry
      @static
      @param {Application} namespace the application for which to
        build the registry
      @return {Ember.Registry} the built registry
      @private
    */

      static buildRegistry(namespace) {
        var registry = new _container.Registry({
          resolver: resolverFor(namespace),
        });
        registry.set = _metal.set;
        registry.register('application:main', namespace, {
          instantiate: false,
        });
        commonSetupRegistry(registry);
        (0, _glimmer.setupEngineRegistry)(registry);
        return registry;
      }

      init(properties) {
        super.init(properties);
        this.buildRegistry();
      }
      /**
      Ensure that initializers are run once, and only once, per engine.
         @private
      @method ensureInitializers
    */

      ensureInitializers() {
        if (!this._initializersRan) {
          this.runInitializers();
          this._initializersRan = true;
        }
      }
      /**
      Create an EngineInstance for this engine.
         @public
      @method buildInstance
      @return {EngineInstance} the engine instance
    */

      buildInstance(options) {
        if (options === void 0) {
          options = {};
        }

        this.ensureInitializers();
        return _instance.default.create(
          Object.assign(Object.assign({}, options), {
            base: this,
          }),
        );
      }
      /**
      Build and configure the registry for the current engine.
         @private
      @method buildRegistry
      @return {Ember.Registry} the configured registry
    */

      buildRegistry() {
        var registry = (this.__registry__ = this.constructor.buildRegistry(
          this,
        ));
        return registry;
      }
      /**
      @private
      @method initializer
    */

      initializer(initializer) {
        this.constructor.initializer(initializer);
      }
      /**
      @private
      @method instanceInitializer
    */

      instanceInitializer(initializer) {
        this.constructor.instanceInitializer(initializer);
      }
      /**
      @private
      @method runInitializers
    */

      runInitializers() {
        this._runInitializer('initializers', (name, initializer) => {
          true &&
            !initializer &&
            (0, _debug.assert)(
              `No application initializer named '${name}'`,
              initializer,
            );
          initializer.initialize(this);
        });
      }
      /**
      @private
      @since 1.12.0
      @method runInstanceInitializers
    */

      runInstanceInitializers(instance) {
        this._runInitializer('instanceInitializers', (name, initializer) => {
          true &&
            !initializer &&
            (0, _debug.assert)(
              `No instance initializer named '${name}'`,
              initializer,
            );
          initializer.initialize(instance);
        });
      }

      _runInitializer(bucketName, cb) {
        var initializersByName = (0, _metal.get)(this.constructor, bucketName);
        var initializers = props(initializersByName);
        var graph = new _dagMap.default();
        var initializer;

        for (var name of initializers) {
          initializer = initializersByName[name];
          true &&
            !initializer &&
            (0, _debug.assert)(`missing ${bucketName}: ${name}`, initializer);
          graph.add(
            initializer.name,
            initializer,
            initializer.before,
            initializer.after,
          );
        }

        graph.topsort(cb);
      }
    }

    Engine.initializers = Object.create(null);
    Engine.instanceInitializers = Object.create(null);
    /**
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.
  
    Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.
  
    ```app/initializer/named-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running namedInitializer!');
    }
  
    export default {
      name: 'named-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    An example of ordering initializers, we create an initializer named `first`:
  
    ```app/initializer/first.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('First initializer!');
    }
  
    export default {
      name: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: First initializer!
    ```
  
    We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:
  
    ```app/initializer/second.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Second initializer!');
    }
  
    export default {
      name: 'second',
      after: 'first',
      initialize
    };
    ```
  
    ```
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:
  
    ```app/initializer/pre.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Pre initializer!');
    }
  
    export default {
      name: 'pre',
      before: 'first',
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
  
    Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:
  
    ```app/initializer/post.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Post initializer!');
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```
  
    * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.
  
    Example of using `application` to register an adapter:
  
    ```app/initializer/api-adapter.js
    import ApiAdapter from '../utils/api-adapter';
  
    export function initialize(application) {
      application.register('api-adapter:main', ApiAdapter);
    }
  
    export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
  
    @method initializer
    @param initializer {Object}
    @public
  */

    Engine.initializer = buildInitializerMethod('initializers', 'initializer');
    /**
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.
  
    Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
  
    * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.
  
    ```app/initializer/named-instance-initializer.js
    import { debug } from '@ember/debug';
  
    export function initialize() {
      debug('Running named-instance-initializer!');
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
  
    * See Application.initializer for discussion on the usage of before
    and after.
  
    Example instanceInitializer to preload data into the store.
  
    ```app/initializer/preload-data.js
  
    export function initialize(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
  
        // Grab the encoded data from the meta tag
        userConfigEncoded = document.querySelector('head meta[name=app-user-config]').attr('content');
  
        // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
  
        // Lookup the store
        store = application.lookup('service:store');
  
        // Push the encoded JSON into the store
        store.pushPayload(userConfig);
    }
  
    export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
  
    @method instanceInitializer
    @param instanceInitializer
    @public
  */

    Engine.instanceInitializer = buildInitializerMethod(
      'instanceInitializers',
      'instance initializer',
    );
    /**
    This function defines the default lookup rules for container lookups:
  
    * templates are looked up on `Ember.TEMPLATES`
    * other names are looked up on the application after classifying the name.
      For example, `controller:post` looks up `App.PostController` by default.
    * if the default lookup fails, look for registered classes on the container
  
    This allows the application to register default injections in the container
    that could be overridden by the normal naming convention.
  
    @private
    @method resolverFor
    @param {Ember.Enginer} namespace the namespace to look for classes
    @return {*} the resolved value for a given lookup
  */

    function resolverFor(namespace) {
      var ResolverClass = namespace.Resolver;
      var props = {
        namespace,
      };
      return ResolverClass.create(props);
    }
    /** @internal */

    function buildInitializerMethod(bucketName, humanName) {
      return function (initializer) {
        // If this is the first initializer being added to a subclass, we are going to reopen the class
        // to make sure we have a new `initializers` object, which extends from the parent class' using
        // prototypal inheritance. Without this, attempting to add initializers to the subclass would
        // pollute the parent class as well as other subclasses.
        // SAFETY: The superclass may be an Engine, we don't call unless we confirmed it was ok.
        var superclass = this.superclass;

        if (
          superclass[bucketName] !== undefined &&
          superclass[bucketName] === this[bucketName]
        ) {
          var attrs = {
            [bucketName]: Object.create(this[bucketName]),
          };
          this.reopenClass(attrs);
        }

        true &&
          !!this[bucketName][initializer.name] &&
          (0, _debug.assert)(
            `The ${humanName} '${initializer.name}' has already been registered`,
            !this[bucketName][initializer.name],
          );
        true &&
          !(0, _utils.canInvoke)(initializer, 'initialize') &&
          (0, _debug.assert)(
            `An ${humanName} cannot be registered without an initialize function`,
            (0, _utils.canInvoke)(initializer, 'initialize'),
          );
        true &&
          !(initializer.name !== undefined) &&
          (0, _debug.assert)(
            `An ${humanName} cannot be registered without a name property`,
            initializer.name !== undefined,
          );
        var initializers = this[bucketName];
        initializers[initializer.name] = initializer;
      };
    }

    function commonSetupRegistry(registry) {
      registry.optionsForType('component', {
        singleton: false,
      });
      registry.optionsForType('view', {
        singleton: false,
      });
      registry.register('controller:basic', _controller.default, {
        instantiate: false,
      }); // Register the routing service...

      registry.register('service:-routing', _routing.RoutingService); // DEBUGGING

      registry.register('resolver-for-debugging:main', registry.resolver, {
        instantiate: false,
      });
      registry.register(
        'container-debug-adapter:main',
        _extensionSupport.ContainerDebugAdapter,
      );
      registry.register('component-lookup:main', _views.ComponentLookup);
    }

    var _default = Engine;
    _exports.default = _default;
  });
  define('@ember/engine/instance', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/debug',
    '@ember/error',
    '@ember/-internals/container',
    '@ember/-internals/utils',
    '@ember/engine/lib/engine-parent',
    '@ember/-internals/runtime/lib/mixins/registry_proxy',
    '@ember/-internals/runtime/lib/mixins/container_proxy',
    '@ember/-internals/owner',
    '@ember/engine',
  ], function (
    _exports,
    _runtime,
    _debug,
    _error,
    _container,
    _utils,
    _engineParent,
    _registry_proxy,
    _container_proxy,
    _owner,
    _engine,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
  @module @ember/engine
  */
    var CEngine = _engine.default;

    class EngineInstance extends _runtime.Object.extend(
      _registry_proxy.default,
      _container_proxy.default,
    ) {
      constructor() {
        super(...arguments);
        this._booted = false;
        this._bootPromise = null;
      }
      /**
     @private
     @method setupRegistry
     @param {Registry} registry
     @param {BootOptions} options
     */

      static setupRegistry(_registry, _options) {}

      init(properties) {
        var _a;

        super.init(properties); // Ensure the guid gets setup for this instance

        (0, _utils.guidFor)(this);
        (_a = this.base) !== null && _a !== void 0
          ? _a
          : (this.base = this.application); // Create a per-instance registry that will use the application's registry
        // as a fallback for resolving registrations.

        var registry = (this.__registry__ = new _container.Registry({
          fallback: this.base.__registry__,
        })); // Create a per-instance container from the instance's registry

        this.__container__ = registry.container({
          owner: this,
        });
        this._booted = false;
      }
      /**
      Initialize the `EngineInstance` and return a promise that resolves
      with the instance itself when the boot process is complete.
         The primary task here is to run any registered instance initializers.
         See the documentation on `BootOptions` for the options it takes.
         @public
      @method boot
      @param options {Object}
      @return {Promise<EngineInstance,Error>}
    */

      boot(options) {
        if (this._bootPromise) {
          return this._bootPromise;
        }

        this._bootPromise = new _runtime.RSVP.Promise((resolve) => {
          resolve(this._bootSync(options));
        });
        return this._bootPromise;
      }
      /**
      Unfortunately, a lot of existing code assumes booting an instance is
      synchronous – specifically, a lot of tests assume the last call to
      `app.advanceReadiness()` or `app.reset()` will result in a new instance
      being fully-booted when the current runloop completes.
         We would like new code (like the `visit` API) to stop making this
      assumption, so we created the asynchronous version above that returns a
      promise. But until we have migrated all the code, we would have to expose
      this method for use *internally* in places where we need to boot an instance
      synchronously.
         @private
    */

      _bootSync(options) {
        if (this._booted) {
          return this;
        }

        true &&
          !(0, _engineParent.getEngineParent)(this) &&
          (0, _debug.assert)(
            "An engine instance's parent must be set via `setEngineParent(engine, parent)` prior to calling `engine.boot()`.",
            (0, _engineParent.getEngineParent)(this),
          );
        this.cloneParentDependencies();
        this.setupRegistry(options);
        this.base.runInstanceInitializers(this);
        this._booted = true;
        return this;
      }

      setupRegistry(options) {
        if (options === void 0) {
          options = this.__container__.lookup('-environment:main');
        }

        this.constructor.setupRegistry(this.__registry__, options);
      }
      /**
     Unregister a factory.
        Overrides `RegistryProxy#unregister` in order to clear any cached instances
     of the unregistered factory.
        @public
     @method unregister
     @param {String} fullName
     */

      unregister(fullName) {
        this.__container__.reset(fullName); // We overwrote this method from RegistryProxyMixin.

        this.__registry__.unregister(fullName);
      }
      /**
      Build a new `EngineInstance` that's a child of this instance.
         Engines must be registered by name with their parent engine
      (or application).
         @private
      @method buildChildEngineInstance
      @param name {String} the registered name of the engine.
      @param options {Object} options provided to the engine instance.
      @return {EngineInstance,Error}
    */

      buildChildEngineInstance(name, options) {
        if (options === void 0) {
          options = {};
        }

        var Engine = this.lookup(`engine:${name}`);

        if (!Engine) {
          throw new _error.default(
            `You attempted to mount the engine '${name}', but it is not registered with its parent.`,
          );
        }

        true &&
          !(Engine instanceof CEngine) &&
          (0, _debug.assert)('expected an Engine', Engine instanceof CEngine);
        var engineInstance = Engine.buildInstance(options);
        (0, _engineParent.setEngineParent)(engineInstance, this);
        return engineInstance;
      }
      /**
      Clone dependencies shared between an engine instance and its parent.
         @private
      @method cloneParentDependencies
    */

      cloneParentDependencies() {
        var parent = (0, _engineParent.getEngineParent)(this);
        true && !parent && (0, _debug.assert)('expected parent', parent);
        var registrations = ['route:basic', 'service:-routing'];
        registrations.forEach((key) => {
          var registration = parent.resolveRegistration(key);
          true &&
            !(0, _owner.isFactory)(registration) &&
            (0, _debug.assert)(
              'expected registration to be a factory',
              (0, _owner.isFactory)(registration),
            );
          this.register(key, registration);
        });
        var env = parent.lookup('-environment:main');
        this.register('-environment:main', env, {
          instantiate: false,
        });
        var singletons = [
          'router:main',
          (0, _container.privatize)`-bucket-cache:main`,
          '-view-registry:main',
          `renderer:-dom`,
          'service:-document',
        ];

        if (env['isInteractive']) {
          singletons.push('event_dispatcher:main');
        }

        singletons.forEach((key) => {
          // SAFETY: We already expect this to be a singleton
          var singleton = parent.lookup(key);
          this.register(key, singleton, {
            instantiate: false,
          });
        });
      }
    }

    var _default = EngineInstance;
    _exports.default = _default;
  });
  define('@ember/engine/lib/engine-parent', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.ENGINE_PARENT = void 0;
    _exports.getEngineParent = getEngineParent;
    _exports.setEngineParent = setEngineParent;
    var ENGINE_PARENT = Symbol('ENGINE_PARENT');
    /**
    `getEngineParent` retrieves an engine instance's parent instance.
  
    @method getEngineParent
    @param {EngineInstance} engine An engine instance.
    @return {EngineInstance} The parent engine instance.
    @for @ember/engine
    @static
    @private
  */

    _exports.ENGINE_PARENT = ENGINE_PARENT;

    function getEngineParent(engine) {
      return engine[ENGINE_PARENT];
    }
    /**
    `setEngineParent` sets an engine instance's parent instance.
  
    @method setEngineParent
    @param {EngineInstance} engine An engine instance.
    @param {EngineInstance} parent The parent engine instance.
    @private
  */

    function setEngineParent(engine, parent) {
      engine[ENGINE_PARENT] = parent;
    }
  });
  define('@ember/enumerable/index', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Enumerable;
      },
    });
  });
  define('@ember/error/index', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
   @module @ember/error
  */

    /**
    The JavaScript Error object used by Ember.assert.
  
    @class Error
    @namespace Ember
    @extends Error
    @constructor
    @public
  */
    var _default = Error;
    _exports.default = _default;
  });
  define('@ember/helper/index', [
    'exports',
    '@glimmer/manager',
    '@glimmer/runtime',
  ], function (_exports, _manager, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'array', {
      enumerable: true,
      get: function () {
        return _runtime.array;
      },
    });
    Object.defineProperty(_exports, 'capabilities', {
      enumerable: true,
      get: function () {
        return _manager.helperCapabilities;
      },
    });
    Object.defineProperty(_exports, 'concat', {
      enumerable: true,
      get: function () {
        return _runtime.concat;
      },
    });
    Object.defineProperty(_exports, 'fn', {
      enumerable: true,
      get: function () {
        return _runtime.fn;
      },
    });
    Object.defineProperty(_exports, 'get', {
      enumerable: true,
      get: function () {
        return _runtime.get;
      },
    });
    Object.defineProperty(_exports, 'hash', {
      enumerable: true,
      get: function () {
        return _runtime.hash;
      },
    });
    Object.defineProperty(_exports, 'invokeHelper', {
      enumerable: true,
      get: function () {
        return _runtime.invokeHelper;
      },
    });
    Object.defineProperty(_exports, 'setHelperManager', {
      enumerable: true,
      get: function () {
        return _manager.setHelperManager;
      },
    });
  });
  define('@ember/instrumentation/index', [
    'exports',
    '@ember/-internals/environment',
    '@ember/debug',
  ], function (_exports, _environment, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports._instrumentStart = _instrumentStart;
    _exports.flaggedInstrument = void 0;
    _exports.instrument = instrument;
    _exports.reset = reset;
    _exports.subscribe = subscribe;
    _exports.subscribers = void 0;
    _exports.unsubscribe = unsubscribe;

    /* eslint no-console:off */

    /* global console */

    /**
  @module @ember/instrumentation
  @private
  */

    /**
    The purpose of the Ember Instrumentation module is
    to provide efficient, general-purpose instrumentation
    for Ember.
  
    Subscribe to a listener by using `subscribe`:
  
    ```javascript
    import { subscribe } from '@ember/instrumentation';
  
    subscribe("render", {
      before(name, timestamp, payload) {
  
      },
  
      after(name, timestamp, payload) {
  
      }
    });
    ```
  
    If you return a value from the `before` callback, that same
    value will be passed as a fourth parameter to the `after`
    callback.
  
    Instrument a block of code by using `instrument`:
  
    ```javascript
    import { instrument } from '@ember/instrumentation';
  
    instrument("render.handlebars", payload, function() {
      // rendering logic
    }, binding);
    ```
  
    Event names passed to `instrument` are namespaced
    by periods, from more general to more specific. Subscribers
    can listen for events by whatever level of granularity they
    are interested in.
  
    In the above example, the event is `render.handlebars`,
    and the subscriber listened for all events beginning with
    `render`. It would receive callbacks for events named
    `render`, `render.handlebars`, `render.container`, or
    even `render.handlebars.layout`.
  
    @class Instrumentation
    @static
    @private
  */
    var subscribers = [];
    _exports.subscribers = subscribers;
    var cache = {};

    function populateListeners(name) {
      var listeners = [];

      for (var subscriber of subscribers) {
        if (subscriber.regex.test(name)) {
          listeners.push(subscriber.object);
        }
      }

      cache[name] = listeners;
      return listeners;
    }

    var time = (() => {
      var perf = 'undefined' !== typeof window ? window.performance || {} : {};
      var fn =
        perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
      return fn ? fn.bind(perf) : Date.now;
    })();

    function isCallback(value) {
      return typeof value === 'function';
    }

    function instrument(name, p1, p2, p3) {
      var _payload;

      var callback;
      var binding;

      if (arguments.length <= 3 && isCallback(p1)) {
        callback = p1;
        binding = p2;
      } else {
        _payload = p1;
        callback = p2;
        binding = p3;
      } // fast path

      if (subscribers.length === 0) {
        return callback.call(binding);
      } // avoid allocating the payload in fast path

      var payload = _payload || {};

      var finalizer = _instrumentStart(name, () => payload);

      if (finalizer === NOOP) {
        return callback.call(binding);
      } else {
        return withFinalizer(callback, finalizer, payload, binding);
      }
    }

    var flaggedInstrument;
    _exports.flaggedInstrument = flaggedInstrument;

    if (
      false
      /* EMBER_IMPROVED_INSTRUMENTATION */
    ) {
      _exports.flaggedInstrument = flaggedInstrument = instrument;
    } else {
      _exports.flaggedInstrument = flaggedInstrument = function instrument(
        _name,
        _payload,
        callback,
      ) {
        return callback();
      };
    }

    function withFinalizer(callback, finalizer, payload, binding) {
      try {
        return callback.call(binding);
      } catch (e) {
        payload.exception = e;
        throw e;
      } finally {
        finalizer();
      }
    }

    function NOOP() {}

    function _instrumentStart(name, payloadFunc, payloadArg) {
      if (subscribers.length === 0) {
        return NOOP;
      }

      var listeners = cache[name];

      if (!listeners) {
        listeners = populateListeners(name);
      }

      if (listeners.length === 0) {
        return NOOP;
      }

      var payload = payloadFunc(payloadArg);
      var STRUCTURED_PROFILE = _environment.ENV.STRUCTURED_PROFILE;
      var timeName;

      if (STRUCTURED_PROFILE) {
        timeName = `${name}: ${payload.object}`;
        console.time(timeName);
      }

      var beforeValues = [];
      var timestamp = time();

      for (var listener of listeners) {
        beforeValues.push(listener.before(name, timestamp, payload));
      }

      var constListeners = listeners;
      return function _instrumentEnd() {
        var timestamp = time();

        for (var i = 0; i < constListeners.length; i++) {
          var _listener = constListeners[i];
          true && !_listener && (0, _debug.assert)('has listener', _listener); // Iterating over values

          if (typeof _listener.after === 'function') {
            _listener.after(name, timestamp, payload, beforeValues[i]);
          }
        }

        if (STRUCTURED_PROFILE) {
          console.timeEnd(timeName);
        }
      };
    }
    /**
    Subscribes to a particular event or instrumented block of code.
  
    @method subscribe
    @for @ember/instrumentation
    @static
  
    @param {String} [pattern] Namespaced event name.
    @param {Object} [object] Before and After hooks.
  
    @return {Subscriber}
    @private
  */

    function subscribe(pattern, object) {
      var paths = pattern.split('.');
      var regexes = [];

      for (var path of paths) {
        if (path === '*') {
          regexes.push('[^\\.]*');
        } else {
          regexes.push(path);
        }
      }

      var regex = regexes.join('\\.');
      regex = `${regex}(\\..*)?`;
      var subscriber = {
        pattern,
        regex: new RegExp(`^${regex}$`),
        object,
      };
      subscribers.push(subscriber);
      cache = {};
      return subscriber;
    }
    /**
    Unsubscribes from a particular event or instrumented block of code.
  
    @method unsubscribe
    @for @ember/instrumentation
    @static
  
    @param {Object} [subscriber]
    @private
  */

    function unsubscribe(subscriber) {
      var index = 0;

      for (var i = 0; i < subscribers.length; i++) {
        if (subscribers[i] === subscriber) {
          index = i;
        }
      }

      subscribers.splice(index, 1);
      cache = {};
    }
    /**
    Resets `Instrumentation` by flushing list of subscribers.
  
    @method reset
    @for @ember/instrumentation
    @static
    @private
  */

    function reset() {
      subscribers.length = 0;
      cache = {};
    }
  });
  define('@ember/modifier/index', [
    'exports',
    '@glimmer/manager',
    '@ember/-internals/glimmer',
    '@glimmer/runtime',
  ], function (_exports, _manager, _glimmer, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'capabilities', {
      enumerable: true,
      get: function () {
        return _glimmer.modifierCapabilities;
      },
    });
    Object.defineProperty(_exports, 'on', {
      enumerable: true,
      get: function () {
        return _runtime.on;
      },
    });
    Object.defineProperty(_exports, 'setModifierManager', {
      enumerable: true,
      get: function () {
        return _manager.setModifierManager;
      },
    });
  });
  define('@ember/object/compat', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
    '@glimmer/validator',
  ], function (_exports, _metal, _debug, _validator) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.dependentKeyCompat = dependentKeyCompat;

    var wrapGetterSetter = function (target, key, desc) {
      var { get: originalGet } = desc;
      true &&
        !((0, _metal.descriptorForProperty)(target, key) === undefined) &&
        (0, _debug.assert)(
          'You attempted to use @dependentKeyCompat on a property that already has been decorated with either @computed or @tracked. @dependentKeyCompat is only necessary for native getters that are not decorated with @computed.',
          (0, _metal.descriptorForProperty)(target, key) === undefined,
        );

      if (originalGet !== undefined) {
        desc.get = function () {
          var propertyTag = (0, _validator.tagFor)(this, key);
          var ret;
          var tag = (0, _validator.track)(() => {
            ret = originalGet.call(this);
          });
          (0, _validator.updateTag)(propertyTag, tag);
          (0, _validator.consumeTag)(tag);
          return ret;
        };
      }

      return desc;
    };

    function dependentKeyCompat() {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      if ((0, _metal.isElementDescriptor)(args)) {
        var [target, key, desc] = args;
        true &&
          !(
            desc != null &&
            (typeof desc.get === 'function' || typeof desc.set === 'function')
          ) &&
          (0, _debug.assert)(
            'The @dependentKeyCompat decorator must be applied to getters/setters when used in native classes',
            desc != null &&
              (typeof desc.get === 'function' ||
                typeof desc.set === 'function'),
          );
        return wrapGetterSetter(target, key, desc);
      } else {
        var _desc2 = args[0];
        true &&
          !((value) => {
            if (value && typeof value === 'object') {
              var cast = value;
              return (
                (cast.configurable === undefined ||
                  cast.configurable === false ||
                  cast.configurable === true) &&
                (cast.enumerable === undefined ||
                  cast.enumerable === false ||
                  cast.enumerable === true) &&
                (cast.writable === undefined ||
                  cast.writable === false ||
                  cast.writable === true) &&
                (cast.get === undefined || typeof cast.get === 'function') &&
                (cast.set === undefined || typeof cast.set === 'function')
              );
            }

            return false;
          })(_desc2) &&
          (0, _debug.assert)(
            'expected valid PropertyDescriptor',
            ((value) => {
              if (value && typeof value === 'object') {
                var cast = value;
                return (
                  (cast.configurable === undefined ||
                    cast.configurable === false ||
                    cast.configurable === true) &&
                  (cast.enumerable === undefined ||
                    cast.enumerable === false ||
                    cast.enumerable === true) &&
                  (cast.writable === undefined ||
                    cast.writable === false ||
                    cast.writable === true) &&
                  (cast.get === undefined || typeof cast.get === 'function') &&
                  (cast.set === undefined || typeof cast.set === 'function')
                );
              }

              return false;
            })(_desc2),
          );

        var decorator = function (
          target,
          key,
          _desc,
          _meta,
          isClassicDecorator,
        ) {
          true &&
            !isClassicDecorator &&
            (0, _debug.assert)(
              'The @dependentKeyCompat decorator may only be passed a method when used in classic classes. You should decorate getters/setters directly in native classes',
              isClassicDecorator,
            );
          true &&
            !(
              typeof _desc2.get === 'function' ||
              typeof _desc2.set === 'function'
            ) &&
            (0, _debug.assert)(
              'The dependentKeyCompat() decorator must be passed a getter or setter when used in classic classes',
              typeof _desc2.get === 'function' ||
                typeof _desc2.set === 'function',
            );
          return wrapGetterSetter(target, key, _desc2);
        };

        (0, _metal.setClassicDecorator)(decorator);
        return decorator;
      }
    }

    (0, _metal.setClassicDecorator)(dependentKeyCompat);
  });
  define('@ember/object/computed', [
    'exports',
    '@ember/-internals/metal',
    '@ember/object/lib/computed/computed_macros',
    '@ember/object/lib/computed/reduce_computed_macros',
  ], function (_exports, _metal, _computed_macros, _reduce_computed_macros) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'alias', {
      enumerable: true,
      get: function () {
        return _metal.alias;
      },
    });
    Object.defineProperty(_exports, 'and', {
      enumerable: true,
      get: function () {
        return _computed_macros.and;
      },
    });
    Object.defineProperty(_exports, 'bool', {
      enumerable: true,
      get: function () {
        return _computed_macros.bool;
      },
    });
    Object.defineProperty(_exports, 'collect', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.collect;
      },
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _metal.ComputedProperty;
      },
    });
    Object.defineProperty(_exports, 'deprecatingAlias', {
      enumerable: true,
      get: function () {
        return _computed_macros.deprecatingAlias;
      },
    });
    Object.defineProperty(_exports, 'empty', {
      enumerable: true,
      get: function () {
        return _computed_macros.empty;
      },
    });
    Object.defineProperty(_exports, 'equal', {
      enumerable: true,
      get: function () {
        return _computed_macros.equal;
      },
    });
    Object.defineProperty(_exports, 'expandProperties', {
      enumerable: true,
      get: function () {
        return _metal.expandProperties;
      },
    });
    Object.defineProperty(_exports, 'filter', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.filter;
      },
    });
    Object.defineProperty(_exports, 'filterBy', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.filterBy;
      },
    });
    Object.defineProperty(_exports, 'gt', {
      enumerable: true,
      get: function () {
        return _computed_macros.gt;
      },
    });
    Object.defineProperty(_exports, 'gte', {
      enumerable: true,
      get: function () {
        return _computed_macros.gte;
      },
    });
    Object.defineProperty(_exports, 'intersect', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.intersect;
      },
    });
    Object.defineProperty(_exports, 'lt', {
      enumerable: true,
      get: function () {
        return _computed_macros.lt;
      },
    });
    Object.defineProperty(_exports, 'lte', {
      enumerable: true,
      get: function () {
        return _computed_macros.lte;
      },
    });
    Object.defineProperty(_exports, 'map', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.map;
      },
    });
    Object.defineProperty(_exports, 'mapBy', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.mapBy;
      },
    });
    Object.defineProperty(_exports, 'match', {
      enumerable: true,
      get: function () {
        return _computed_macros.match;
      },
    });
    Object.defineProperty(_exports, 'max', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.max;
      },
    });
    Object.defineProperty(_exports, 'min', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.min;
      },
    });
    Object.defineProperty(_exports, 'none', {
      enumerable: true,
      get: function () {
        return _computed_macros.none;
      },
    });
    Object.defineProperty(_exports, 'not', {
      enumerable: true,
      get: function () {
        return _computed_macros.not;
      },
    });
    Object.defineProperty(_exports, 'notEmpty', {
      enumerable: true,
      get: function () {
        return _computed_macros.notEmpty;
      },
    });
    Object.defineProperty(_exports, 'oneWay', {
      enumerable: true,
      get: function () {
        return _computed_macros.oneWay;
      },
    });
    Object.defineProperty(_exports, 'or', {
      enumerable: true,
      get: function () {
        return _computed_macros.or;
      },
    });
    Object.defineProperty(_exports, 'readOnly', {
      enumerable: true,
      get: function () {
        return _computed_macros.readOnly;
      },
    });
    Object.defineProperty(_exports, 'reads', {
      enumerable: true,
      get: function () {
        return _computed_macros.oneWay;
      },
    });
    Object.defineProperty(_exports, 'setDiff', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.setDiff;
      },
    });
    Object.defineProperty(_exports, 'sort', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.sort;
      },
    });
    Object.defineProperty(_exports, 'sum', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.sum;
      },
    });
    Object.defineProperty(_exports, 'union', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.union;
      },
    });
    Object.defineProperty(_exports, 'uniq', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.uniq;
      },
    });
    Object.defineProperty(_exports, 'uniqBy', {
      enumerable: true,
      get: function () {
        return _reduce_computed_macros.uniqBy;
      },
    });
  });
  define('@ember/object/core', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.CoreObject;
      },
    });
  });
  define('@ember/object/evented', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/-internals/metal',
  ], function (_exports, _runtime, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Evented;
      },
    });
    Object.defineProperty(_exports, 'on', {
      enumerable: true,
      get: function () {
        return _metal.on;
      },
    });
  });
  define('@ember/object/events', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'addListener', {
      enumerable: true,
      get: function () {
        return _metal.addListener;
      },
    });
    Object.defineProperty(_exports, 'removeListener', {
      enumerable: true,
      get: function () {
        return _metal.removeListener;
      },
    });
    Object.defineProperty(_exports, 'sendEvent', {
      enumerable: true,
      get: function () {
        return _metal.sendEvent;
      },
    });
  });
  define('@ember/object/index', [
    'exports',
    '@ember/debug',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
  ], function (_exports, _debug, _metal, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.action = action;
    Object.defineProperty(_exports, 'computed', {
      enumerable: true,
      get: function () {
        return _metal.computed;
      },
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Object;
      },
    });
    Object.defineProperty(_exports, 'defineProperty', {
      enumerable: true,
      get: function () {
        return _metal.defineProperty;
      },
    });
    Object.defineProperty(_exports, 'get', {
      enumerable: true,
      get: function () {
        return _metal.get;
      },
    });
    Object.defineProperty(_exports, 'getProperties', {
      enumerable: true,
      get: function () {
        return _metal.getProperties;
      },
    });
    Object.defineProperty(_exports, 'notifyPropertyChange', {
      enumerable: true,
      get: function () {
        return _metal.notifyPropertyChange;
      },
    });
    Object.defineProperty(_exports, 'observer', {
      enumerable: true,
      get: function () {
        return _metal.observer;
      },
    });
    Object.defineProperty(_exports, 'set', {
      enumerable: true,
      get: function () {
        return _metal.set;
      },
    });
    Object.defineProperty(_exports, 'setProperties', {
      enumerable: true,
      get: function () {
        return _metal.setProperties;
      },
    });
    Object.defineProperty(_exports, 'trySet', {
      enumerable: true,
      get: function () {
        return _metal.trySet;
      },
    });

    /**
    Decorator that turns the target function into an Action which can be accessed
    directly by reference.
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
    ```hbs
    <!-- template.hbs -->
    <button {{action this.toggleShowing}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    Decorated actions also interop with the string style template actions:
  
    ```hbs
    <!-- template.hbs -->
    <button {{action "toggleShowing"}}>Show tooltip</button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    It also binds the function directly to the instance, so it can be used in any
    context and will correctly refer to the class it came from:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert this.toggleShowing}}
      {{on "click" this.toggleShowing}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    This can also be used in JavaScript code directly:
  
    ```js
    import Component from '@ember/component';
    import { action, set } from '@ember/object';
  
    export default class Tooltip extends Component {
      constructor() {
        super(...arguments);
  
        // this.toggleShowing is still bound correctly when added to
        // the event listener
        document.addEventListener('click', this.toggleShowing);
      }
  
      @action
      toggleShowing() {
        set(this, 'isShowing', !this.isShowing);
      }
    }
    ```
  
    This is considered best practice, since it means that methods will be bound
    correctly no matter where they are used. By contrast, the `{{action}}` helper
    and modifier can also be used to bind context, but it will be required for
    every usage of the method:
  
    ```hbs
    <!-- template.hbs -->
    <button
      {{did-insert (action this.toggleShowing)}}
      {{on "click" (action this.toggleShowing)}}
    >
      Show tooltip
    </button>
  
    {{#if isShowing}}
      <div class="tooltip">
        I'm a tooltip!
      </div>
    {{/if}}
    ```
  
    They also do not have equivalents in JavaScript directly, so they cannot be
    used for other situations where binding would be useful.
  
    @public
    @method action
    @for @ember/object
    @static
    @param {Function|undefined} callback The function to turn into an action,
                                         when used in classic classes
    @return {PropertyDecorator} property decorator instance
  */
    var BINDINGS_MAP = new WeakMap();

    function hasProto(obj) {
      return (
        obj != null &&
        obj.constructor !== undefined &&
        typeof obj.constructor.proto === 'function'
      );
    }

    function setupAction(target, key, actionFn) {
      if (hasProto(target)) {
        target.constructor.proto();
      }

      if (!Object.prototype.hasOwnProperty.call(target, 'actions')) {
        var parentActions = target.actions; // we need to assign because of the way mixins copy actions down when inheriting

        target.actions = parentActions ? Object.assign({}, parentActions) : {};
      }

      true &&
        !(target.actions != null) &&
        (0, _debug.assert)(
          "[BUG] Somehow the target doesn't have actions!",
          target.actions != null,
        );
      target.actions[key] = actionFn;
      return {
        get() {
          var bindings = BINDINGS_MAP.get(this);

          if (bindings === undefined) {
            bindings = new Map();
            BINDINGS_MAP.set(this, bindings);
          }

          var fn = bindings.get(actionFn);

          if (fn === undefined) {
            fn = actionFn.bind(this);
            bindings.set(actionFn, fn);
          }

          return fn;
        },
      };
    }

    function action() {
      var actionFn;

      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      if (!(0, _metal.isElementDescriptor)(args)) {
        actionFn = args[0];

        var decorator = function (
          target,
          key,
          _desc,
          _meta,
          isClassicDecorator,
        ) {
          true &&
            !isClassicDecorator &&
            (0, _debug.assert)(
              'The @action decorator may only be passed a method when used in classic classes. You should decorate methods directly in native classes',
              isClassicDecorator,
            );
          true &&
            !(typeof actionFn === 'function') &&
            (0, _debug.assert)(
              'The action() decorator must be passed a method when used in classic classes',
              typeof actionFn === 'function',
            );
          return setupAction(target, key, actionFn);
        };

        (0, _metal.setClassicDecorator)(decorator);
        return decorator;
      }

      var [target, key, desc] = args;
      actionFn = desc === null || desc === void 0 ? void 0 : desc.value;
      true &&
        !(typeof actionFn === 'function') &&
        (0, _debug.assert)(
          'The @action decorator must be applied to methods when used in native classes',
          typeof actionFn === 'function',
        ); // SAFETY: TS types are weird with decorators. This should work.

      return setupAction(target, key, actionFn);
    } // SAFETY: TS types are weird with decorators. This should work.

    (0, _metal.setClassicDecorator)(action);
  });
  define('@ember/object/internals', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/utils',
  ], function (_exports, _metal, _utils) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'cacheFor', {
      enumerable: true,
      get: function () {
        return _metal.getCachedValueFor;
      },
    });
    Object.defineProperty(_exports, 'guidFor', {
      enumerable: true,
      get: function () {
        return _utils.guidFor;
      },
    });
  });
  define('@ember/object/lib/computed/computed_macros', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
  ], function (_exports, _metal, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.and = void 0;
    _exports.bool = bool;
    _exports.deprecatingAlias = deprecatingAlias;
    _exports.empty = empty;
    _exports.equal = equal;
    _exports.gt = gt;
    _exports.gte = gte;
    _exports.lt = lt;
    _exports.lte = lte;
    _exports.match = match;
    _exports.none = none;
    _exports.not = not;
    _exports.notEmpty = notEmpty;
    _exports.oneWay = oneWay;
    _exports.or = void 0;
    _exports.readOnly = readOnly;

    /**
  @module @ember/object
  */
    function expandPropertiesToArray(predicateName, properties) {
      var expandedProperties = [];

      function extractProperty(entry) {
        expandedProperties.push(entry);
      }

      for (var property of properties) {
        true &&
          !(property.indexOf(' ') < 0) &&
          (0, _debug.assert)(
            `Dependent keys passed to \`${predicateName}\` computed macro can't have spaces.`,
            property.indexOf(' ') < 0,
          );
        (0, _metal.expandProperties)(property, extractProperty);
      }

      return expandedProperties;
    }

    function generateComputedWithPredicate(name, predicate) {
      return function (dependentKey) {
        for (
          var _len = arguments.length,
            additionalDependentKeys = new Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          additionalDependentKeys[_key - 1] = arguments[_key];
        }

        var properties = [dependentKey, ...additionalDependentKeys];
        true &&
          !!(0, _metal.isElementDescriptor)(properties) &&
          (0, _debug.assert)(
            `You attempted to use @${name} as a decorator directly, but it requires at least one dependent key parameter`,
            !(0, _metal.isElementDescriptor)(properties),
          );
        var dependentKeys = expandPropertiesToArray(name, properties);
        var computedFunc = (0, _metal.computed)(...dependentKeys, function () {
          var lastIdx = dependentKeys.length - 1;

          for (var i = 0; i < lastIdx; i++) {
            // SAFETY: `i` is derived from the length of `dependentKeys`
            var value = (0, _metal.get)(this, dependentKeys[i]);

            if (!predicate(value)) {
              return value;
            }
          } // SAFETY: `lastIdx` is derived from the length of `dependentKeys`

          return (0, _metal.get)(this, dependentKeys[lastIdx]);
        });
        return computedFunc;
      };
    }
    /**
    A computed property macro that returns true if the value of the dependent
    property is null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { empty } from '@ember/object/computed';
  
    class ToDoList {
      constructor(todos) {
        set(this, 'todos', todos);
      }
  
      @empty('todos') isDone;
    }
  
    let todoList = new ToDoList(
      ['Unit Test', 'Documentation', 'Release']
    );
  
    todoList.isDone; // false
    set(todoList, 'todos', []);
    todoList.isDone; // true
    ```
  
    @since 1.6.0
    @method empty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if the value
    of the dependent property is null, an empty string, empty array, or empty
    function and false if the underlying value is not empty.
  
    @public
  */

    function empty(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @empty as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(`${dependentKey}.length`, function () {
        return (0, _metal.isEmpty)((0, _metal.get)(this, dependentKey));
      });
    }
    /**
    A computed property that returns true if the value of the dependent property
    is NOT null, an empty string, empty array, or empty function.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { notEmpty } from '@ember/object/computed';
  
    class Hamster {
      constructor(backpack) {
        set(this, 'backpack', backpack);
      }
  
      @notEmpty('backpack') hasStuff
    }
  
    let hamster = new Hamster(
      ['Food', 'Sleeping Bag', 'Tent']
    );
  
    hamster.hasStuff; // true
    set(hamster, 'backpack', []);
    hamster.hasStuff; // false
    ```
  
    @method notEmpty
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is not empty.
    @public
  */

    function notEmpty(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @notEmpty as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(`${dependentKey}.length`, function () {
        return !(0, _metal.isEmpty)((0, _metal.get)(this, dependentKey));
      });
    }
    /**
    A computed property that returns true if the value of the dependent property
    is null or undefined. This avoids errors from JSLint complaining about use of
    ==, which can be technically confusing.
  
    ```javascript
    import { set } from '@ember/object';
    import { none } from '@ember/object/computed';
  
    class Hamster {
      @none('food') isHungry;
    }
  
    let hamster = new Hamster();
  
    hamster.isHungry; // true
  
    set(hamster, 'food', 'Banana');
    hamster.isHungry; // false
  
    set(hamster, 'food', null);
    hamster.isHungry; // true
    ```
  
    @method none
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns true if original
    value for property is null or undefined.
    @public
  */

    function none(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @none as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.isNone)((0, _metal.get)(this, dependentKey));
      });
    }
    /**
    A computed property that returns the inverse boolean value of the original
    value for the dependent property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { not } from '@ember/object/computed';
  
    class User {
      loggedIn = false;
  
      @not('loggedIn') isAnonymous;
    }
  
    let user = new User();
  
    user.isAnonymous; // true
    set(user, 'loggedIn', true);
    user.isAnonymous; // false
    ```
  
    @method not
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which returns inverse of the
    original value for property
    @public
  */

    function not(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @not as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return !(0, _metal.get)(this, dependentKey);
      });
    }
    /**
    A computed property that converts the provided dependent property into a
    boolean value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { bool } from '@ember/object/computed';
  
  
    class Hamster {
      @bool('numBananas') hasBananas
    }
  
    let hamster = new Hamster();
  
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 0);
    hamster.hasBananas; // false
  
    set(hamster, 'numBananas', 1);
    hamster.hasBananas; // true
  
    set(hamster, 'numBananas', null);
    hamster.hasBananas; // false
    ```
  
    @method bool
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which converts to boolean the
    original value for property
    @public
  */

    function bool(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @bool as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return Boolean((0, _metal.get)(this, dependentKey));
      });
    }
    /**
    A computed property which matches the original value for the dependent
    property against a given RegExp, returning `true` if the value matches the
    RegExp and `false` if it does not.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { match } from '@ember/object/computed';
  
    class User {
      @match('email', /^.+@.+\..+$/) hasValidEmail;
    }
  
    let user = new User();
  
    user.hasValidEmail; // false
  
    set(user, 'email', '');
    user.hasValidEmail; // false
  
    set(user, 'email', 'ember_hamster@example.com');
    user.hasValidEmail; // true
    ```
  
    @method match
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {RegExp} regexp
    @return {ComputedProperty} computed property which match the original value
    for property against a given RegExp
    @public
  */

    function match(dependentKey, regexp) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @match as a decorator directly, but it requires `dependentKey` and `regexp` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        var value = (0, _metal.get)(this, dependentKey);
        return regexp.test(value);
      });
    }
    /**
    A computed property that returns true if the provided dependent property is
    equal to the given value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { equal } from '@ember/object/computed';
  
    class Hamster {
      @equal('percentCarrotsEaten', 100) satisfied;
    }
  
    let hamster = new Hamster();
  
    hamster.satisfied; // false
  
    set(hamster, 'percentCarrotsEaten', 100);
    hamster.satisfied; // true
  
    set(hamster, 'percentCarrotsEaten', 50);
    hamster.satisfied; // false
    ```
  
    @method equal
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {String|Number|Object} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is equal to the given value.
    @public
  */

    function equal(dependentKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @equal as a decorator directly, but it requires `dependentKey` and `value` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.get)(this, dependentKey) === value;
      });
    }
    /**
    A computed property that returns true if the provided dependent property is
    greater than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gt } from '@ember/object/computed';
  
    class Hamster {
      @gt('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 11);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater than given value.
    @public
  */

    function gt(dependentKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @gt as a decorator directly, but it requires `dependentKey` and `value` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.get)(this, dependentKey) > value;
      });
    }
    /**
    A computed property that returns true if the provided dependent property is
    greater than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { gte } from '@ember/object/computed';
  
    class Hamster {
      @gte('numBananas', 10) hasTooManyBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.hasTooManyBananas; // false
  
    set(hamster, 'numBananas', 10);
    hamster.hasTooManyBananas; // true
    ```
  
    @method gte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is greater or equal then given value.
    @public
  */

    function gte(dependentKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @gte as a decorator directly, but it requires `dependentKey` and `value` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.get)(this, dependentKey) >= value;
      });
    }
    /**
    A computed property that returns true if the provided dependent property is
    less than the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lt } from '@ember/object/computed';
  
    class Hamster {
      @lt('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 2);
    hamster.needsMoreBananas; // true
    ```
  
    @method lt
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less then given value.
    @public
  */

    function lt(dependentKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @lt as a decorator directly, but it requires `dependentKey` and `value` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.get)(this, dependentKey) < value;
      });
    }
    /**
    A computed property that returns true if the provided dependent property is
    less than or equal to the provided value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { lte } from '@ember/object/computed';
  
    class Hamster {
      @lte('numBananas', 3) needsMoreBananas;
    }
  
    let hamster = new Hamster();
  
    hamster.needsMoreBananas; // true
  
    set(hamster, 'numBananas', 5);
    hamster.needsMoreBananas; // false
  
    set(hamster, 'numBananas', 3);
    hamster.needsMoreBananas; // true
    ```
  
    @method lte
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Number} value
    @return {ComputedProperty} computed property which returns true if the
    original value for property is less or equal than given value.
    @public
  */

    function lte(dependentKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @lte as a decorator directly, but it requires `dependentKey` and `value` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, function () {
        return (0, _metal.get)(this, dependentKey) <= value;
      });
    }
    /**
    A computed property that performs a logical `and` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first falsy value or last
    truthy value just like JavaScript's `&&` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { and } from '@ember/object/computed';
  
    class Hamster {
      @and('hasTent', 'hasBackpack') readyForCamp;
      @and('hasWalkingStick', 'hasBackpack') readyForHike;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForCamp; // false
  
    set(tomster, 'hasTent', true);
    tomster.readyForCamp; // false
  
    set(tomster, 'hasBackpack', true);
    tomster.readyForCamp; // true
  
    set(tomster, 'hasBackpack', 'Yes');
    tomster.readyForCamp; // 'Yes'
  
    set(tomster, 'hasWalkingStick', null);
    tomster.readyForHike; // null
    ```
  
    @method and
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `and` on
    the values of all the original values for properties.
    @public
  */

    var and = generateComputedWithPredicate('and', (value) => value);
    /**
    A computed property which performs a logical `or` on the original values for
    the provided dependent properties.
  
    You may pass in more than two properties and even use property brace
    expansion.  The computed property will return the first truthy value or last
    falsy value just like JavaScript's `||` operator.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { or } from '@ember/object/computed';
  
    class Hamster {
      @or('hasJacket', 'hasUmbrella') readyForRain;
      @or('hasSunscreen', 'hasUmbrella') readyForBeach;
    }
  
    let tomster = new Hamster();
  
    tomster.readyForRain; // undefined
  
    set(tomster, 'hasUmbrella', true);
    tomster.readyForRain; // true
  
    set(tomster, 'hasJacket', 'Yes');
    tomster.readyForRain; // 'Yes'
  
    set(tomster, 'hasSunscreen', 'Check');
    tomster.readyForBeach; // 'Check'
    ```
  
    @method or
    @static
    @for @ember/object/computed
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which performs a logical `or` on
    the values of all the original values for properties.
    @public
  */

    _exports.and = and;
    var or = generateComputedWithPredicate('or', (value) => !value);
    /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { alias } from '@ember/object/computed';
  
    class Person {
      name = 'Alex Matchneer';
  
      @alias('name') nomen;
    }
  
    let alex = new Person();
  
    alex.nomen; // 'Alex Matchneer'
    alex.name;  // 'Alex Matchneer'
  
    set(alex, 'nomen', '@machty');
    alex.name;  // '@machty'
    ```
  
    @method alias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates an alias to the
    original value for property.
    @public
  */

    /**
    Where the `alias` computed macro aliases `get` and `set`, and allows for
    bidirectional data flow, the `oneWay` computed macro only provides an aliased
    `get`. The `set` will not mutate the upstream property, rather causes the
    current property to become the value set. This causes the downstream property
    to permanently diverge from the upstream property.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { oneWay }from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @oneWay('firstName') nickName;
    }
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear');
    teddy.firstName; // 'Teddy'
    teddy.nickName; // 'TeddyBear'
    ```
  
    @method oneWay
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @public
  */

    _exports.or = or;

    function oneWay(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @oneWay as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.alias)(dependentKey).oneWay();
    }
    /**
    This is a more semantically meaningful alias of the `oneWay` computed macro,
    whose name is somewhat ambiguous as to which direction the data flows.
  
    @method reads
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
      property to the original value for property.
    @public
   */

    /**
    Where `oneWay` computed macro provides oneWay bindings, the `readOnly`
    computed macro provides a readOnly one way binding. Very often when using
    the `oneWay` macro one does not also want changes to propagate back up, as
    they will replace the value.
  
    This prevents the reverse flow, and also throws an exception when it occurs.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { readOnly } from '@ember/object/computed';
  
    class User {
      constructor(firstName, lastName) {
        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);
      }
  
      @readOnly('firstName') nickName;
    });
  
    let teddy = new User('Teddy', 'Zeenny');
  
    teddy.nickName; // 'Teddy'
  
    set(teddy, 'nickName', 'TeddyBear'); // throws Exception
    // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`
  
    teddy.firstName; // 'Teddy'
    ```
  
    @method readOnly
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
    @since 1.5.0
    @public
  */

    function readOnly(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @readOnly as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.alias)(dependentKey).readOnly();
    }
    /**
    Creates a new property that is an alias for another property on an object.
    Calls to `get` or `set` this property behave as though they were called on the
    original property, but also print a deprecation warning.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { deprecatingAlias } from '@ember/object/computed';
  
    class Hamster {
      @deprecatingAlias('cavendishCount', {
        id: 'hamster.deprecate-banana',
        until: '3.0.0'
      })
      bananaCount;
    }
  
    let hamster = new Hamster();
  
    set(hamster, 'bananaCount', 5); // Prints a deprecation warning.
    hamster.cavendishCount; // 5
    ```
  
    @method deprecatingAlias
    @static
    @for @ember/object/computed
    @param {String} dependentKey
    @param {Object} options Options for `deprecate`.
    @return {ComputedProperty} computed property which creates an alias with a
    deprecation to the original value for property.
    @since 1.7.0
    @public
  */

    function deprecatingAlias(dependentKey, options) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @deprecatingAlias as a decorator directly, but it requires `dependentKey` and `options` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return (0, _metal.computed)(dependentKey, {
        get(key) {
          true &&
            !false &&
            (0, _debug.deprecate)(
              `Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`,
              false,
              options,
            );
          return (0, _metal.get)(this, dependentKey);
        },

        set(key, value) {
          true &&
            !false &&
            (0, _debug.deprecate)(
              `Usage of \`${key}\` is deprecated, use \`${dependentKey}\` instead.`,
              false,
              options,
            );
          (0, _metal.set)(this, dependentKey, value);
          return value;
        },
      });
    }
  });
  define('@ember/object/lib/computed/reduce_computed_macros', [
    'exports',
    '@ember/debug',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
    '@ember/-internals/runtime/lib/mixins/array',
  ], function (_exports, _debug, _metal, _runtime, _array) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.collect = collect;
    _exports.filter = filter;
    _exports.filterBy = filterBy;
    _exports.intersect = intersect;
    _exports.map = map;
    _exports.mapBy = mapBy;
    _exports.max = max;
    _exports.min = min;
    _exports.setDiff = setDiff;
    _exports.sort = sort;
    _exports.sum = sum;
    _exports.union = void 0;
    _exports.uniq = uniq;
    _exports.uniqBy = uniqBy;

    /**
  @module @ember/object
  */
    function isNativeOrEmberArray(obj) {
      return Array.isArray(obj) || _array.default.detect(obj);
    }

    function reduceMacro(dependentKey, callback, initialValue, name) {
      true &&
        !!/[[\]{}]/g.test(dependentKey) &&
        (0, _debug.assert)(
          `Dependent key passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`,
          !/[[\]{}]/g.test(dependentKey),
        );
      return (0, _metal.computed)(`${dependentKey}.[]`, function () {
        var arr = (0, _metal.get)(this, dependentKey);

        if (arr === null || typeof arr !== 'object') {
          return initialValue;
        }

        return arr.reduce(callback, initialValue, this);
      }).readOnly();
    }

    function arrayMacro(dependentKey, additionalDependentKeys, callback) {
      // This is a bit ugly
      var propertyName;

      if (/@each/.test(dependentKey)) {
        propertyName = dependentKey.replace(/\.@each.*$/, '');
      } else {
        propertyName = dependentKey;
        dependentKey += '.[]';
      }

      return (0, _metal.computed)(
        dependentKey,
        ...additionalDependentKeys,
        function () {
          var value = (0, _metal.get)(this, propertyName);

          if (isNativeOrEmberArray(value)) {
            return (0, _runtime.A)(callback.call(this, value));
          } else {
            return (0, _runtime.A)();
          }
        },
      ).readOnly();
    }

    function multiArrayMacro(_dependentKeys, callback, name) {
      true &&
        !_dependentKeys.every(
          (dependentKey) => !/[[\]{}]/g.test(dependentKey),
        ) &&
        (0, _debug.assert)(
          `Dependent keys passed to \`${name}\` computed macro shouldn't contain brace expanding pattern.`,
          _dependentKeys.every(
            (dependentKey) => !/[[\]{}]/g.test(dependentKey),
          ),
        );

      var dependentKeys = _dependentKeys.map((key) => `${key}.[]`);

      return (0, _metal.computed)(...dependentKeys, function () {
        return (0, _runtime.A)(callback.call(this, _dependentKeys));
      }).readOnly();
    }
    /**
    A computed property that returns the sum of the values in the dependent array.
  
    Example:
  
    ```javascript
    import { sum } from '@ember/object/computed';
  
    class Invoice {
      lineItems = [1.00, 2.50, 9.99];
  
      @sum('lineItems') total;
    }
  
    let invoice = new Invoice();
  
    invoice.total; // 13.49
    ```
  
    @method sum
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the sum of all values in the
    dependentKey's array
    @since 1.4.0
    @public
  */

    function sum(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @sum as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return reduceMacro(dependentKey, (sum, item) => sum + item, 0, 'sum');
    }
    /**
    A computed property that calculates the maximum value in the dependent array.
    This will return `-Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, max } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @max('childAges') maxChildAge;
    }
  
    let lordByron = new Person();
  
    lordByron.maxChildAge; // -Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.maxChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.maxChildAge; // 8
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the max of a list of Date objects will be the highest timestamp as a `Number`.
    This behavior is consistent with `Math.max`.
  
    @method max
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the largest value in the dependentKey's
    array
    @public
  */

    function max(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @max as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return reduceMacro(
        dependentKey,
        (max, item) => Math.max(max, item),
        -Infinity,
        'max',
      );
    }
    /**
    A computed property that calculates the minimum value in the dependent array.
    This will return `Infinity` when the dependent array is empty.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy, min } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
      @min('childAges') minChildAge;
    }
  
    let lordByron = Person.create({ children: [] });
  
    lordByron.minChildAge; // Infinity
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.minChildAge; // 7
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.minChildAge; // 5
    ```
  
    If the types of the arguments are not numbers, they will be converted to
    numbers and the type of the return value will always be `Number`. For example,
    the min of a list of Date objects will be the lowest timestamp as a `Number`.
    This behavior is consistent with `Math.min`.
  
    @method min
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @return {ComputedProperty} computes the smallest value in the dependentKey's array
    @public
  */

    function min(dependentKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @min as a decorator directly, but it requires a `dependentKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      return reduceMacro(
        dependentKey,
        (min, item) => Math.min(min, item),
        Infinity,
        'min',
      );
    }

    function map(dependentKey, additionalDependentKeysOrCallback, callback) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @map as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !(
          typeof callback === 'function' ||
          (callback === undefined &&
            typeof additionalDependentKeysOrCallback === 'function')
        ) &&
        (0, _debug.assert)(
          'The final parameter provided to map must be a callback function',
          typeof callback === 'function' ||
            (callback === undefined &&
              typeof additionalDependentKeysOrCallback === 'function'),
        );
      true &&
        !(
          Array.isArray(additionalDependentKeysOrCallback) ||
          typeof additionalDependentKeysOrCallback === 'function'
        ) &&
        (0, _debug.assert)(
          'The second parameter provided to map must either be the callback or an array of additional dependent keys',
          Array.isArray(additionalDependentKeysOrCallback) ||
            typeof additionalDependentKeysOrCallback === 'function',
        );
      var additionalDependentKeys;

      if (typeof additionalDependentKeysOrCallback === 'function') {
        callback = additionalDependentKeysOrCallback;
        additionalDependentKeys = [];
      } else {
        additionalDependentKeys = additionalDependentKeysOrCallback;
      }

      var cCallback = callback;
      true &&
        !cCallback &&
        (0, _debug.assert)('[BUG] Missing callback', cCallback);
      return arrayMacro(
        dependentKey,
        additionalDependentKeys,
        function (value) {
          // This is so dumb...
          return Array.isArray(value)
            ? value.map(cCallback, this)
            : value.map(cCallback, this);
        },
      );
    }
    /**
    Returns an array mapped to the specified key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { mapBy } from '@ember/object/computed';
  
    class Person {
      children = [];
  
      @mapBy('children', 'age') childAges;
    }
  
    let lordByron = new Person();
  
    lordByron.childAges; // []
  
    set(lordByron, 'children', [
      {
        name: 'Augusta Ada Byron',
        age: 7
      }
    ]);
    lordByron.childAges; // [7]
  
    set(lordByron, 'children', [
      ...lordByron.children,
      {
        name: 'Allegra Byron',
        age: 5
      }, {
        name: 'Elizabeth Medora Leigh',
        age: 8
      }
    ]);
    lordByron.childAges; // [7, 5, 8]
    ```
  
    @method mapBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} an array mapped to the specified key
    @public
  */

    function mapBy(dependentKey, propertyKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @mapBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !(typeof propertyKey === 'string') &&
        (0, _debug.assert)(
          '`mapBy` computed macro expects a property string for its second argument, ' +
            'perhaps you meant to use "map"',
          typeof propertyKey === 'string',
        );
      true &&
        !!/[[\]{}]/g.test(dependentKey) &&
        (0, _debug.assert)(
          `Dependent key passed to \`mapBy\` computed macro shouldn't contain brace expanding pattern.`,
          !/[[\]{}]/g.test(dependentKey),
        );
      return map(`${dependentKey}.@each.${propertyKey}`, (item) =>
        (0, _metal.get)(item, propertyKey),
      );
    }

    function filter(dependentKey, additionalDependentKeysOrCallback, callback) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @filter as a decorator directly, but it requires atleast `dependentKey` and `callback` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !(
          typeof callback === 'function' ||
          (callback === undefined &&
            typeof additionalDependentKeysOrCallback === 'function')
        ) &&
        (0, _debug.assert)(
          'The final parameter provided to filter must be a callback function',
          typeof callback === 'function' ||
            (callback === undefined &&
              typeof additionalDependentKeysOrCallback === 'function'),
        );
      true &&
        !(
          Array.isArray(additionalDependentKeysOrCallback) ||
          typeof additionalDependentKeysOrCallback === 'function'
        ) &&
        (0, _debug.assert)(
          'The second parameter provided to filter must either be the callback or an array of additional dependent keys',
          Array.isArray(additionalDependentKeysOrCallback) ||
            typeof additionalDependentKeysOrCallback === 'function',
        );
      var additionalDependentKeys;

      if (typeof additionalDependentKeysOrCallback === 'function') {
        callback = additionalDependentKeysOrCallback;
        additionalDependentKeys = [];
      } else {
        additionalDependentKeys = additionalDependentKeysOrCallback;
      }

      var cCallback = callback;
      return arrayMacro(
        dependentKey,
        additionalDependentKeys,
        function (value) {
          // This is a really silly way to keep TS happy
          return Array.isArray(value)
            ? value.filter(cCallback, this)
            : value.filter(cCallback, this);
        },
      );
    }
    /**
    Filters the array by the property and value.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { filterBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(chores) {
        set(this, 'chores', chores);
      }
  
      @filterBy('chores', 'done', false) remainingChores;
    }
  
    let hamster = new Hamster([
      { name: 'cook', done: true },
      { name: 'clean', done: true },
      { name: 'write more unit tests', done: false }
    ]);
  
    hamster.remainingChores; // [{ name: 'write more unit tests', done: false }]
    ```
  
    @method filterBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @param {*} value
    @return {ComputedProperty} the filtered array
    @public
  */

    function filterBy(dependentKey, propertyKey, value) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @filterBy as a decorator directly, but it requires atleast `dependentKey` and `propertyKey` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !!/[[\]{}]/g.test(dependentKey) &&
        (0, _debug.assert)(
          `Dependent key passed to \`filterBy\` computed macro shouldn't contain brace expanding pattern.`,
          !/[[\]{}]/g.test(dependentKey),
        );
      var callback;

      if (arguments.length === 2) {
        callback = (item) => (0, _metal.get)(item, propertyKey);
      } else {
        callback = (item) => (0, _metal.get)(item, propertyKey) === value;
      }

      return filter(`${dependentKey}.@each.${propertyKey}`, callback);
    }
    /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniq } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniq('fruits') uniqueFruits;
    }
  
    let hamster = new Hamster([
      'banana',
      'grape',
      'kale',
      'banana'
    ]);
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale']
    ```
  
    @method uniq
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */

    function uniq(dependentKey) {
      for (
        var _len = arguments.length,
          additionalDependentKeys = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        additionalDependentKeys[_key - 1] = arguments[_key];
      }

      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @uniq/@union as a decorator directly, but it requires atleast one dependent key parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      var args = [dependentKey, ...additionalDependentKeys];
      return multiArrayMacro(
        args,
        function (dependentKeys) {
          var uniq = (0, _runtime.A)();
          var seen = new Set();
          dependentKeys.forEach((dependentKey) => {
            var value = (0, _metal.get)(this, dependentKey);

            if (isNativeOrEmberArray(value)) {
              value.forEach((item) => {
                if (!seen.has(item)) {
                  seen.add(item);
                  uniq.push(item);
                }
              });
            }
          });
          return uniq;
        },
        'uniq',
      );
    }
    /**
    A computed property which returns a new array with all the unique elements
    from an array, with uniqueness determined by specific key.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { uniqBy } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits) {
        set(this, 'fruits', fruits);
      }
  
      @uniqBy('fruits', 'id') uniqueFruits;
    }
  
    let hamster = new Hamster([
      { id: 1, 'banana' },
      { id: 2, 'grape' },
      { id: 3, 'peach' },
      { id: 1, 'banana' }
    ]);
  
    hamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]
    ```
  
    @method uniqBy
    @for @ember/object/computed
    @static
    @param {String} dependentKey
    @param {String} propertyKey
    @return {ComputedProperty} computes a new array with all the
    unique elements from the dependent array
    @public
  */

    function uniqBy(dependentKey, propertyKey) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @uniqBy as a decorator directly, but it requires `dependentKey` and `propertyKey` parameters',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !!/[[\]{}]/g.test(dependentKey) &&
        (0, _debug.assert)(
          `Dependent key passed to \`uniqBy\` computed macro shouldn't contain brace expanding pattern.`,
          !/[[\]{}]/g.test(dependentKey),
        );
      return (0, _metal.computed)(`${dependentKey}.[]`, function () {
        var list = (0, _metal.get)(this, dependentKey);
        return isNativeOrEmberArray(list)
          ? (0, _runtime.uniqBy)(list, propertyKey)
          : (0, _runtime.A)();
      }).readOnly();
    }
    /**
    A computed property which returns a new array with all the unique elements
    from one or more dependent arrays.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { union } from '@ember/object/computed';
  
    class Hamster {
      constructor(fruits, vegetables) {
        set(this, 'fruits', fruits);
        set(this, 'vegetables', vegetables);
      }
  
      @union('fruits', 'vegetables') uniqueFruits;
    });
  
    let hamster = new, Hamster(
      [
        'banana',
        'grape',
        'kale',
        'banana',
        'tomato'
      ],
      [
        'tomato',
        'carrot',
        'lettuce'
      ]
    );
  
    hamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']
    ```
  
    @method union
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the unique elements
    from one or more dependent arrays.
    @public
  */

    var union = uniq;
    /**
    A computed property which returns a new array with all the elements
    two or more dependent arrays have in common.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { intersect } from '@ember/object/computed';
  
    class FriendGroups {
      constructor(adaFriends, charlesFriends) {
        set(this, 'adaFriends', adaFriends);
        set(this, 'charlesFriends', charlesFriends);
      }
  
      @intersect('adaFriends', 'charlesFriends') friendsInCommon;
    }
  
    let groups = new FriendGroups(
      ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],
      ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']
    );
  
    groups.friendsInCommon; // ['William King', 'Mary Somerville']
    ```
  
    @method intersect
    @for @ember/object/computed
    @static
    @param {String} propertyKey*
    @return {ComputedProperty} computes a new array with all the duplicated
    elements from the dependent arrays
    @public
  */

    _exports.union = union;

    function intersect(dependentKey) {
      for (
        var _len2 = arguments.length,
          additionalDependentKeys = new Array(_len2 > 1 ? _len2 - 1 : 0),
          _key2 = 1;
        _key2 < _len2;
        _key2++
      ) {
        additionalDependentKeys[_key2 - 1] = arguments[_key2];
      }

      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @intersect as a decorator directly, but it requires atleast one dependent key parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      var args = [dependentKey, ...additionalDependentKeys];
      return multiArrayMacro(
        args,
        function (dependentKeys) {
          var arrays = dependentKeys.map((dependentKey) => {
            var array = (0, _metal.get)(this, dependentKey);
            return Array.isArray(array) ? array : [];
          });
          var firstArray = arrays.pop();
          true &&
            !firstArray &&
            (0, _debug.assert)(
              'Attempted to apply multiArrayMacro for intersect without any dependentKeys',
              firstArray,
            );
          var results = firstArray.filter((candidate) => {
            for (var array of arrays) {
              var found = false;

              for (var item of array) {
                if (item === candidate) {
                  found = true;
                  break;
                }
              }

              if (found === false) {
                return false;
              }
            }

            return true;
          });
          return (0, _runtime.A)(results);
        },
        'intersect',
      );
    }
    /**
    A computed property which returns a new array with all the properties from the
    first dependent array that are not in the second dependent array.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { setDiff } from '@ember/object/computed';
  
    class Hamster {
      constructor(likes, fruits) {
        set(this, 'likes', likes);
        set(this, 'fruits', fruits);
      }
  
      @setDiff('likes', 'fruits') wants;
    }
  
    let hamster = new Hamster(
      [
        'banana',
        'grape',
        'kale'
      ],
      [
        'grape',
        'kale',
      ]
    );
  
    hamster.wants; // ['banana']
    ```
  
    @method setDiff
    @for @ember/object/computed
    @static
    @param {String} setAProperty
    @param {String} setBProperty
    @return {ComputedProperty} computes a new array with all the items from the
    first dependent array that are not in the second dependent array
    @public
  */

    function setDiff(setAProperty, setBProperty) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @setDiff as a decorator directly, but it requires atleast one dependent key parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      true &&
        !(arguments.length === 2) &&
        (0, _debug.assert)(
          '`setDiff` computed macro requires exactly two dependent arrays.',
          arguments.length === 2,
        );
      true &&
        !(!/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty)) &&
        (0, _debug.assert)(
          `Dependent keys passed to \`setDiff\` computed macro shouldn't contain brace expanding pattern.`,
          !/[[\]{}]/g.test(setAProperty) && !/[[\]{}]/g.test(setBProperty),
        );
      return (0, _metal.computed)(
        `${setAProperty}.[]`,
        `${setBProperty}.[]`,
        function () {
          var setA = (0, _metal.get)(this, setAProperty);
          var setB = (0, _metal.get)(this, setBProperty);

          if (!isNativeOrEmberArray(setA)) {
            return (0, _runtime.A)();
          }

          if (!isNativeOrEmberArray(setB)) {
            return setA;
          }

          return setA.filter((x) => setB.indexOf(x) === -1);
        },
      ).readOnly();
    }
    /**
    A computed property that returns the array of values for the provided
    dependent properties.
  
    Example:
  
    ```javascript
    import { set } from '@ember/object';
    import { collect } from '@ember/object/computed';
  
    class Hamster {
      @collect('hat', 'shirt') clothes;
    }
  
    let hamster = new Hamster();
  
    hamster.clothes; // [null, null]
  
    set(hamster, 'hat', 'Camp Hat');
    set(hamster, 'shirt', 'Camp Shirt');
    hamster.clothes; // ['Camp Hat', 'Camp Shirt']
    ```
  
    @method collect
    @for @ember/object/computed
    @static
    @param {String} dependentKey*
    @return {ComputedProperty} computed property which maps values of all passed
    in properties to an array.
    @public
  */

    function collect(dependentKey) {
      for (
        var _len3 = arguments.length,
          additionalDependentKeys = new Array(_len3 > 1 ? _len3 - 1 : 0),
          _key3 = 1;
        _key3 < _len3;
        _key3++
      ) {
        additionalDependentKeys[_key3 - 1] = arguments[_key3];
      }

      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @collect as a decorator directly, but it requires atleast one dependent key parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );
      var dependentKeys = [dependentKey, ...additionalDependentKeys];
      return multiArrayMacro(
        dependentKeys,
        function () {
          var res = dependentKeys.map((key) => {
            var val = (0, _metal.get)(this, key);
            return val === undefined ? null : val;
          });
          return (0, _runtime.A)(res);
        },
        'collect',
      );
    }

    function sort(
      itemsKey,
      additionalDependentKeysOrDefinition,
      sortDefinition,
    ) {
      true &&
        !!(0, _metal.isElementDescriptor)(
          Array.prototype.slice.call(arguments),
        ) &&
        (0, _debug.assert)(
          'You attempted to use @sort as a decorator directly, but it requires atleast an `itemsKey` parameter',
          !(0, _metal.isElementDescriptor)(
            Array.prototype.slice.call(arguments),
          ),
        );

      if (
        true
        /* DEBUG */
      ) {
        var argumentsValid = false;

        if (arguments.length === 2) {
          argumentsValid =
            typeof itemsKey === 'string' &&
            (typeof additionalDependentKeysOrDefinition === 'string' ||
              typeof additionalDependentKeysOrDefinition === 'function');
        }

        if (arguments.length === 3) {
          argumentsValid =
            typeof itemsKey === 'string' &&
            Array.isArray(additionalDependentKeysOrDefinition) &&
            typeof sortDefinition === 'function';
        }

        true &&
          !argumentsValid &&
          (0, _debug.assert)(
            'The `sort` computed macro can either be used with an array of sort properties or with a sort function. If used with an array of sort properties, it must receive exactly two arguments: the key of the array to sort, and the key of the array of sort properties. If used with a sort function, it may receive up to three arguments: the key of the array to sort, an optional additional array of dependent keys for the computed property, and the sort function.',
            argumentsValid,
          );
      }

      var additionalDependentKeys;
      var sortDefinitionOrString;

      if (Array.isArray(additionalDependentKeysOrDefinition)) {
        additionalDependentKeys = additionalDependentKeysOrDefinition;
        sortDefinitionOrString = sortDefinition;
      } else {
        additionalDependentKeys = [];
        sortDefinitionOrString = additionalDependentKeysOrDefinition;
      }

      if (typeof sortDefinitionOrString === 'function') {
        return customSort(
          itemsKey,
          additionalDependentKeys,
          sortDefinitionOrString,
        );
      } else {
        return propertySort(itemsKey, sortDefinitionOrString);
      }
    }

    function customSort(itemsKey, additionalDependentKeys, comparator) {
      return arrayMacro(itemsKey, additionalDependentKeys, function (value) {
        return value.slice().sort((x, y) => comparator.call(this, x, y));
      });
    } // This one needs to dynamically set up and tear down observers on the itemsKey
    // depending on the sortProperties

    function propertySort(itemsKey, sortPropertiesKey) {
      var cp = (0, _metal.autoComputed)(function (key) {
        var sortProperties = (0, _metal.get)(this, sortPropertiesKey);
        true &&
          !(function (arr) {
            return (
              isNativeOrEmberArray(arr) &&
              arr.every((s) => typeof s === 'string')
            );
          })(sortProperties) &&
          (0, _debug.assert)(
            `The sort definition for '${key}' on ${this} must be a function or an array of strings`,
            (function (arr) {
              return (
                isNativeOrEmberArray(arr) &&
                arr.every((s) => typeof s === 'string')
              );
            })(sortProperties),
          );
        var itemsKeyIsAtThis = itemsKey === '@this';
        var normalizedSortProperties = normalizeSortProperties(sortProperties);
        var items = itemsKeyIsAtThis ? this : (0, _metal.get)(this, itemsKey);

        if (!isNativeOrEmberArray(items)) {
          return (0, _runtime.A)();
        }

        if (normalizedSortProperties.length === 0) {
          return (0, _runtime.A)(items.slice());
        } else {
          return sortByNormalizedSortProperties(
            items,
            normalizedSortProperties,
          );
        }
      }).readOnly();
      return cp;
    }

    function normalizeSortProperties(sortProperties) {
      var callback = (p) => {
        var [prop, direction] = p.split(':');
        direction = direction || 'asc'; // SAFETY: There will always be at least one value returned by split

        return [prop, direction];
      }; // This nonsense is necessary since technically the two map implementations diverge.

      return Array.isArray(sortProperties)
        ? sortProperties.map(callback)
        : sortProperties.map(callback);
    }

    function sortByNormalizedSortProperties(items, normalizedSortProperties) {
      return (0, _runtime.A)(
        items.slice().sort((itemA, itemB) => {
          for (var [prop, direction] of normalizedSortProperties) {
            var result = (0, _runtime.compare)(
              (0, _metal.get)(itemA, prop),
              (0, _metal.get)(itemB, prop),
            );

            if (result !== 0) {
              return direction === 'desc' ? -1 * result : result;
            }
          }

          return 0;
        }),
      );
    }
  });
  define('@ember/object/mixin', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _metal.Mixin;
      },
    });
  });
  define('@ember/object/observable', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.Observable;
      },
    });
  });
  define('@ember/object/observers', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'addObserver', {
      enumerable: true,
      get: function () {
        return _metal.addObserver;
      },
    });
    Object.defineProperty(_exports, 'removeObserver', {
      enumerable: true,
      get: function () {
        return _metal.removeObserver;
      },
    });
  });
  define('@ember/object/promise-proxy-mixin', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.PromiseProxyMixin;
      },
    });
  });
  define('@ember/object/proxy', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _runtime.ObjectProxy;
      },
    });
  });
  define('@ember/polyfills/index', [
    'exports',
    '@ember/polyfills/lib/assign',
  ], function (_exports, _assign) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'assign', {
      enumerable: true,
      get: function () {
        return _assign.assign;
      },
    });
    _exports.hasPropertyAccessors = void 0;
    var hasPropertyAccessors = true;
    _exports.hasPropertyAccessors = hasPropertyAccessors;
  });
  define('@ember/polyfills/lib/assign', ['exports', '@ember/debug'], function (
    _exports,
    _debug,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.assign = assign;

    /**
    Copy properties from a source object to a target object. Source arguments remain unchanged.
  
    ```javascript
    import { assign } from '@ember/polyfills';
  
    var a = { first: 'Yehuda' };
    var b = { last: 'Katz' };
    var c = { company: 'Other Company' };
    var d = { company: 'Tilde Inc.' };
    assign(a, b, c, d); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' };
    ```
  
    @method assign
    @for @ember/polyfills
    @param {Object} target The object to assign into
    @param {Object} ...args The objects to copy properties from
    @return {Object}
    @public
    @static
  */
    function assign(target) {
      true &&
        !false &&
        (0, _debug.deprecate)(
          'Use of `assign` has been deprecated. Please use `Object.assign` or the spread operator instead.',
          false,
          {
            id: 'ember-polyfills.deprecate-assign',
            until: '5.0.0',
            url:
              'https://deprecations.emberjs.com/v4.x/#toc_ember-polyfills-deprecate-assign',
            for: 'ember-source',
            since: {
              available: '4.0.0',
              enabled: '4.0.0',
            },
          },
        );

      for (
        var _len = arguments.length,
          rest = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        rest[_key - 1] = arguments[_key];
      }

      return Object.assign(target, ...rest);
    }
  });
  define('@ember/renderer/index', [
    'exports',
    '@ember/-internals/glimmer',
  ], function (_exports, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'renderSettled', {
      enumerable: true,
      get: function () {
        return _glimmer.renderSettled;
      },
    });
  });
  define('@ember/routing/auto-location', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.AutoLocation;
      },
    });
  });
  define('@ember/routing/hash-location', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.HashLocation;
      },
    });
  });
  define('@ember/routing/history-location', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.HistoryLocation;
      },
    });
  });
  define('@ember/routing/index', [
    'exports',
    '@ember/-internals/glimmer',
  ], function (_exports, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'LinkTo', {
      enumerable: true,
      get: function () {
        return _glimmer.LinkTo;
      },
    });
  });
  define('@ember/routing/location', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.Location;
      },
    });
  });
  define('@ember/routing/none-location', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.NoneLocation;
      },
    });
  });
  define('@ember/routing/route', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.Route;
      },
    });
  });
  define('@ember/routing/router-service', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.RouterService;
      },
    });
  });
  define('@ember/routing/router', [
    'exports',
    '@ember/-internals/routing',
  ], function (_exports, _routing) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'default', {
      enumerable: true,
      get: function () {
        return _routing.Router;
      },
    });
  });
  define('@ember/runloop/index', [
    'exports',
    '@ember/debug',
    '@ember/-internals/error-handling',
    '@ember/-internals/metal',
    'backburner',
  ], function (_exports, _debug, _errorHandling, _metal, _backburner2) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports._backburner = void 0;
    _exports._cancelTimers = _cancelTimers;
    _exports._getCurrentRunLoop = _getCurrentRunLoop;
    _exports._hasScheduledTimers = _hasScheduledTimers;
    _exports._rsvpErrorQueue = _exports._queues = void 0;
    _exports.begin = begin;
    _exports.bind = bind;
    _exports.cancel = cancel;
    _exports.debounce = debounce;
    _exports.end = end;
    _exports.join = join;
    _exports.later = later;
    _exports.next = next;
    _exports.once = once;
    _exports.run = run;
    _exports.schedule = schedule;
    _exports.scheduleOnce = scheduleOnce;
    _exports.throttle = throttle;
    var currentRunLoop = null;

    function _getCurrentRunLoop() {
      return currentRunLoop;
    }

    function onBegin(current) {
      currentRunLoop = current;
    }

    function onEnd(_current, next) {
      currentRunLoop = next;
      (0, _metal.flushAsyncObservers)();
    }

    function flush(queueName, next) {
      if (queueName === 'render' || queueName === _rsvpErrorQueue) {
        (0, _metal.flushAsyncObservers)();
      }

      next();
    }

    var _rsvpErrorQueue = `${Math.random()}${Date.now()}`.replace('.', '');
    /**
    Array of named queues. This array determines the order in which queues
    are flushed at the end of the RunLoop. You can define your own queues by
    simply adding the queue name to this array. Normally you should not need
    to inspect or modify this property.
  
    @property queues
    @type Array
    @default ['actions', 'destroy']
    @private
  */

    _exports._rsvpErrorQueue = _rsvpErrorQueue;
    var _queues = [
      'actions', // used in router transitions to prevent unnecessary loading state entry
      // if all context promises resolve on the 'actions' queue first
      'routerTransitions',
      'render',
      'afterRender',
      'destroy', // used to re-throw unhandled RSVP rejection errors specifically in this
      // position to avoid breaking anything rendered in the other sections
      _rsvpErrorQueue,
    ];
    _exports._queues = _queues;

    var _backburner = new _backburner2.default(_queues, {
      defaultQueue: 'actions',
      onBegin,
      onEnd,
      onErrorTarget: _errorHandling.onErrorTarget,
      onErrorMethod: 'onerror',
      flush,
    });

    _exports._backburner = _backburner;

    function run() {
      // @ts-expect-error TS doesn't like our spread args
      return _backburner.run(...arguments);
    }

    function join(methodOrTarget, methodOrArg) {
      for (
        var _len = arguments.length,
          additionalArgs = new Array(_len > 2 ? _len - 2 : 0),
          _key = 2;
        _key < _len;
        _key++
      ) {
        additionalArgs[_key - 2] = arguments[_key];
      }

      return _backburner.join(methodOrTarget, methodOrArg, ...additionalArgs);
    }

    function bind() {
      for (
        var _len2 = arguments.length, curried = new Array(_len2), _key2 = 0;
        _key2 < _len2;
        _key2++
      ) {
        curried[_key2] = arguments[_key2];
      }

      true &&
        !(function (methodOrTarget, methodOrArg) {
          // Applies the same logic as backburner parseArgs for detecting if a method
          // is actually being passed.
          var length = arguments.length;

          if (length === 0) {
            return false;
          } else if (length === 1) {
            return typeof methodOrTarget === 'function';
          } else {
            return (
              typeof methodOrArg === 'function' || // second argument is a function
              (methodOrTarget !== null &&
                typeof methodOrArg === 'string' &&
                methodOrArg in methodOrTarget) || // second argument is the name of a method in first argument
              typeof methodOrTarget === 'function' //first argument is a function
            );
          } // @ts-expect-error TS doesn't like our spread args
        })(...curried) &&
        (0, _debug.assert)(
          'could not find a suitable method to bind',
          (function (methodOrTarget, methodOrArg) {
            var length = arguments.length;

            if (length === 0) {
              return false;
            } else if (length === 1) {
              return typeof methodOrTarget === 'function';
            } else {
              return (
                typeof methodOrArg === 'function' ||
                (methodOrTarget !== null &&
                  typeof methodOrArg === 'string' &&
                  methodOrArg in methodOrTarget) ||
                typeof methodOrTarget === 'function'
              );
            }
          })(...curried),
        ); // @ts-expect-error TS doesn't like our spread args

      return function () {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3];
        }

        return join(...curried.concat(args));
      };
    }
    /**
    Begins a new RunLoop. Any deferred actions invoked after the begin will
    be buffered until you invoke a matching call to `end()`. This is
    a lower-level way to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method begin
    @static
    @for @ember/runloop
    @return {void}
    @public
  */

    function begin() {
      _backburner.begin();
    }
    /**
    Ends a RunLoop. This must be called sometime after you call
    `begin()` to flush any deferred actions. This is a lower-level way
    to use a RunLoop instead of using `run()`.
  
    ```javascript
    import { begin, end } from '@ember/runloop';
  
    begin();
    // code to be executed within a RunLoop
    end();
    ```
  
    @method end
    @static
    @for @ember/runloop
    @return {void}
    @public
  */

    function end() {
      _backburner.end();
    }

    function schedule() {
      // @ts-expect-error TS doesn't like the rest args here
      return _backburner.schedule(...arguments);
    } // Used by global test teardown

    function _hasScheduledTimers() {
      return _backburner.hasTimers();
    } // Used by global test teardown

    function _cancelTimers() {
      _backburner.cancelTimers();
    }

    function later() {
      return _backburner.later(...arguments);
    }

    function once() {
      for (
        var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
        _key4 < _len4;
        _key4++
      ) {
        args[_key4] = arguments[_key4];
      }

      // @ts-expect-error TS doesn't like the rest args here
      return _backburner.scheduleOnce('actions', ...args);
    }

    function scheduleOnce() {
      // @ts-expect-error TS doesn't like the rest args here
      return _backburner.scheduleOnce(...arguments);
    }

    function next() {
      for (
        var _len5 = arguments.length, args = new Array(_len5), _key5 = 0;
        _key5 < _len5;
        _key5++
      ) {
        args[_key5] = arguments[_key5];
      }

      return _backburner.later(...args, 1);
    }
    /**
    Cancels a scheduled item. Must be a value returned by `later()`,
    `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
    `throttle()`.
  
    ```javascript
    import {
      next,
      cancel,
      later,
      scheduleOnce,
      once,
      throttle,
      debounce
    } from '@ember/runloop';
  
    let runNext = next(myContext, function() {
      // will not be executed
    });
  
    cancel(runNext);
  
    let runLater = later(myContext, function() {
      // will not be executed
    }, 500);
  
    cancel(runLater);
  
    let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
      // will not be executed
    });
  
    cancel(runScheduleOnce);
  
    let runOnce = once(myContext, function() {
      // will not be executed
    });
  
    cancel(runOnce);
  
    let throttle = throttle(myContext, function() {
      // will not be executed
    }, 1, false);
  
    cancel(throttle);
  
    let debounce = debounce(myContext, function() {
      // will not be executed
    }, 1);
  
    cancel(debounce);
  
    let debounceImmediate = debounce(myContext, function() {
      // will be executed since we passed in true (immediate)
    }, 100, true);
  
    // the 100ms delay until this method can be called again will be canceled
    cancel(debounceImmediate);
    ```
  
    @method cancel
    @static
    @for @ember/runloop
    @param {Object} timer Timer object to cancel
    @return {Boolean} true if canceled or false/undefined if it wasn't found
    @public
  */

    function cancel(timer) {
      return _backburner.cancel(timer);
    }

    function debounce() {
      // @ts-expect-error TS doesn't like the rest args here
      return _backburner.debounce(...arguments);
    }

    function throttle() {
      // @ts-expect-error TS doesn't like the rest args here
      return _backburner.throttle(...arguments);
    }
  });
  define('@ember/runloop/type-tests.ts/begin-end.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    (0, _expectType.expectTypeOf)((0, _runloop.begin)()).toEqualTypeOf(); // code to be executed within a RunLoop

    (0, _expectType.expectTypeOf)((0, _runloop.end)()).toEqualTypeOf();
  });
  define('@ember/runloop/type-tests.ts/bind.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)((_foo, _bar, _baz) => {
        return 1;
      }),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)((_foo, _bar, _baz) => {
        return 1;
      }, 1),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'baz',
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _runloop.bind)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, function (_foo, _bar, _baz) {
        (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
        return 1;
      }),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'baz',
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.bind)(
      foo,
      function (_foo) {
        return 1;
      },
      'string',
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, 'test'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, 'test', 1),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, 'test', 1, true),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, 'test', 1, true, 'baz'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.bind)(foo, 'test', 1, true, undefined),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.bind)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/cancel.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    var runNext = (0, _runloop.next)(null, () => {
      // will not be executed
    });
    (0, _expectType.expectTypeOf)(
      (0, _runloop.cancel)(runNext),
    ).toEqualTypeOf();
  });
  define('@ember/runloop/type-tests.ts/debounce.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    // From Docs
    function whoRan() {
      // Do stuff
    }

    var myContext = {
      name: 'debounce',

      test(_foo, _baz) {},
    };
    (0, _runloop.debounce)(myContext, whoRan, 150); // less than 150ms passes

    (0, _runloop.debounce)(myContext, whoRan, 150);
    (0, _runloop.debounce)(myContext, whoRan, 150, true); // console logs 'debounce ran.' one time immediately.
    // 100ms passes

    (0, _runloop.debounce)(myContext, whoRan, 150, true); // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched

    (0, _runloop.debounce)(myContext, whoRan, 150, true); // console logs 'debounce ran.' one time immediately.
    // 150ms passes and nothing else is logged to the console and
    // the debouncee is no longer being watched
    // Method only

    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)((_foo, _baz) => {}, 1, undefined, 1),
    ).toEqualTypeOf(); // @ts-expect-error Requires wait

    (0, _runloop.debounce)((_foo, _baz) => {}, 1, true); // @ts-expect-error Requires all args

    (0, _runloop.debounce)((_foo, _baz) => {}, 1, 1); // Can set immediate

    (0, _runloop.debounce)((_foo, _baz) => {}, 1, true, 1, true); // With target

    (0, _runloop.debounce)(
      myContext,
      function (_foo, _baz) {
        (0, _expectType.expectTypeOf)(this).toEqualTypeOf(myContext);
      },
      1,
      true,
      1,
      true,
    ); // With key

    (0, _runloop.debounce)(myContext, 'test', 1, true, 1, true); // @ts-expect-error invalid key

    (0, _runloop.debounce)(myContext, 'invalid');

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf();
    (0, _runloop.debounce)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.debounce)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
      1,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(foo, 'test', 1, true, 'string', 1),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.debounce)(foo, 'test', 1, true, undefined, 1),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.debounce)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/join.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.join)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.join)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(foo, 'test', 1, true),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.join)(foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.join)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/later.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf();
    (0, _runloop.later)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.later)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
      1,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(foo, 'test', 1, true, 'string', 1),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.later)(foo, 'test', 1, true, undefined, 1),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.later)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/next.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.next)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.next)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.next)(foo, 'test', 1, true),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.next)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/once.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.once)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.once)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.once)(foo, 'test', 1, true),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.once)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/run.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.run)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.run)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.run)(foo, 'test', 1, true),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.run)(foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/schedule-once.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)(
        'my-queue',
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)(
        'my-queue',
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.scheduleOnce)(
      'my-queue',
      (_foo) => {
        return 1;
      }, // @ts-expect-error invalid argument
      'string',
    ); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)(
        'my-queue',
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)(
        'my-queue',
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.scheduleOnce)(
      'my-queue',
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)('my-queue', foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.scheduleOnce)('my-queue', foo, 'test', 1, true),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.scheduleOnce)('my-queue', foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/schedule.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)(
        'my-queue',
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)(
        'my-queue',
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf();
    (0, _runloop.schedule)(
      'my-queue',
      (_foo) => {
        return 1;
      }, // @ts-expect-error invalid argument
      'string',
    ); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)(
        'my-queue',
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)(
        'my-queue',
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.schedule)(
      'my-queue',
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)('my-queue', foo, 'test', 1, true, 'string'),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.schedule)('my-queue', foo, 'test', 1, true),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.schedule)('my-queue', foo, 'test', 'string');
  });
  define('@ember/runloop/type-tests.ts/throttle.test', [
    '@ember/runloop',
    'expect-type',
  ], function (_runloop, _expectType) {
    'use strict';

    // From Docs
    function whoRan() {
      // Do stuff
    }

    var myContext = {
      name: 'throttle',

      test(_foo, _baz) {},
    };
    (0, _runloop.throttle)(myContext, whoRan, 150); // less than 150ms passes

    (0, _runloop.throttle)(myContext, whoRan, 150);
    (0, _runloop.throttle)(myContext, whoRan, 150, true); // console logs 'throttle ran.' one time immediately.
    // 100ms passes

    (0, _runloop.throttle)(myContext, whoRan, 150, true); // 150ms passes and nothing else is logged to the console and
    // the throttlee is no longer being watched

    (0, _runloop.throttle)(myContext, whoRan, 150, true); // console logs 'throttle ran.' one time immediately.
    // 150ms passes and nothing else is logged to the console and
    // the throttlee is no longer being watched
    // Method only

    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)((_foo, _baz) => {}, 1, undefined, 1),
    ).toEqualTypeOf(); // Wait is optional

    (0, _runloop.throttle)((_foo, _baz) => {}, 1, true); // @ts-expect-error Requires all args

    (0, _runloop.throttle)((_foo, _baz) => {}, 1, 1); // Can set immediate

    (0, _runloop.throttle)((_foo, _baz) => {}, 1, true, 1, true); // With target

    (0, _runloop.throttle)(
      myContext,
      function (_foo, _baz) {
        (0, _expectType.expectTypeOf)(this).toEqualTypeOf(myContext);
      },
      1,
      true,
      1,
      true,
    ); // With key

    (0, _runloop.throttle)(myContext, 'test', 1, true, 1, true); // @ts-expect-error invalid key

    (0, _runloop.throttle)(myContext, 'invalid');

    class Foo {
      test(_foo, _bar, _baz) {
        return 1;
      }
    }

    var foo = new Foo(); // With only function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(
        (_foo, _bar, _baz) => {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf();
    (0, _runloop.throttle)((_foo) => {
      return 1; // @ts-expect-error invalid argument
    }, 'string'); // With target and function

    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(
        foo,
        function (_foo, _bar, _baz) {
          (0, _expectType.expectTypeOf)(this).toEqualTypeOf();
          return 1;
        },
        1,
        true,
        undefined,
        1,
      ),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(
        foo,
        function (_foo, _bar, _baz) {
          return 1;
        },
        1,
        true,
        'string',
        1,
      ),
    ).toEqualTypeOf(); // @ts-expect-error invalid args

    (0, _runloop.throttle)(
      foo,
      function (_foo, _bar, _baz) {
        return 1;
      },
      1,
      'string',
      true,
      1,
    ); // With function string reference

    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(foo, 'test', 1, true, 'string', 1),
    ).toEqualTypeOf();
    (0, _expectType.expectTypeOf)(
      (0, _runloop.throttle)(foo, 'test', 1, true, undefined, 1),
    ).toEqualTypeOf(); // @ts-expect-error Invalid args

    (0, _runloop.throttle)(foo, 'test', 'string');
  });
  define('@ember/service/index', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/-internals/metal',
  ], function (_exports, _runtime, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.inject = inject;
    _exports.service = service;

    function inject() {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      return (0, _metal.inject)('service', ...args);
    }

    function service() {
      for (
        var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
        _key2 < _len2;
        _key2++
      ) {
        args[_key2] = arguments[_key2];
      }

      return (0, _metal.inject)('service', ...args);
    }
    /**
    @class Service
    @extends EmberObject
    @since 1.10.0
    @public
  */

    class Service extends _runtime.FrameworkObject {}

    _exports.default = Service;
    Service.isServiceFactory = true;
  });
  define('@ember/string/index', [
    'exports',
    '@ember/string/lib/string_registry',
    '@ember/-internals/utils',
    '@ember/debug',
    '@ember/-internals/glimmer',
  ], function (_exports, _string_registry, _utils, _debug, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, '_getStrings', {
      enumerable: true,
      get: function () {
        return _string_registry.getStrings;
      },
    });
    Object.defineProperty(_exports, '_setStrings', {
      enumerable: true,
      get: function () {
        return _string_registry.setStrings;
      },
    });
    _exports.camelize = camelize;
    _exports.capitalize = capitalize;
    _exports.classify = classify;
    _exports.dasherize = dasherize;
    _exports.decamelize = decamelize;
    _exports.htmlSafe = htmlSafe;
    _exports.isHTMLSafe = isHTMLSafe;
    _exports.underscore = underscore;
    _exports.w = w;

    /**
  @module @ember/string
  */
    var STRING_DASHERIZE_REGEXP = /[ _]/g;
    var STRING_DASHERIZE_CACHE = new _utils.Cache(1000, (key) =>
      decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'),
    );
    var STRING_CAMELIZE_REGEXP_1 = /(-|_|\.|\s)+(.)?/g;
    var STRING_CAMELIZE_REGEXP_2 = /(^|\/)([A-Z])/g;
    var CAMELIZE_CACHE = new _utils.Cache(1000, (key) =>
      key
        .replace(STRING_CAMELIZE_REGEXP_1, (_match, _separator, chr) =>
          chr ? chr.toUpperCase() : '',
        )
        .replace(STRING_CAMELIZE_REGEXP_2, (
          match,
          /*, separator, chr */
        ) => match.toLowerCase()),
    );
    var STRING_CLASSIFY_REGEXP_1 = /^(-|_)+(.)?/;
    var STRING_CLASSIFY_REGEXP_2 = /(.)(-|_|\.|\s)+(.)?/g;
    var STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
    var CLASSIFY_CACHE = new _utils.Cache(1000, (str) => {
      var replace1 = (_match, _separator, chr) =>
        chr ? `_${chr.toUpperCase()}` : '';

      var replace2 = (_match, initialChar, _separator, chr) =>
        initialChar + (chr ? chr.toUpperCase() : '');

      var parts = str.split('/');

      for (var i = 0; i < parts.length; i++) {
        parts[i] = parts[i]
          .replace(STRING_CLASSIFY_REGEXP_1, replace1)
          .replace(STRING_CLASSIFY_REGEXP_2, replace2);
      }

      return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (
        match,
        /*, separator, chr */
      ) => match.toUpperCase());
    });
    var STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
    var STRING_UNDERSCORE_REGEXP_2 = /-|\s+/g;
    var UNDERSCORE_CACHE = new _utils.Cache(1000, (str) =>
      str
        .replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2')
        .replace(STRING_UNDERSCORE_REGEXP_2, '_')
        .toLowerCase(),
    );
    var STRING_CAPITALIZE_REGEXP = /(^|\/)([a-z\u00C0-\u024F])/g;
    var CAPITALIZE_CACHE = new _utils.Cache(1000, (str) =>
      str.replace(STRING_CAPITALIZE_REGEXP, (
        match,
        /*, separator, chr */
      ) => match.toUpperCase()),
    );
    var STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
    var DECAMELIZE_CACHE = new _utils.Cache(1000, (str) =>
      str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase(),
    );
    /**
    Defines string helper methods including string formatting and localization.
  
    @class String
    @public
  */

    /**
    Splits a string into separate units separated by spaces, eliminating any
    empty strings in the process.
  
    ```javascript
    import { w } from '@ember/string';
  
    w("alpha beta gamma").forEach(function(key) {
      console.log(key);
    });
  
    // > alpha
    // > beta
    // > gamma
    ```
  
    @method w
    @param {String} str The string to split
    @return {Array} array containing the split strings
    @public
  */

    function w(str) {
      return str.split(/\s+/);
    }
    /**
    Converts a camelized string into all lower case separated by underscores.
  
    ```javascript
    import { decamelize } from '@ember/string';
  
    decamelize('innerHTML');          // 'inner_html'
    decamelize('action_name');        // 'action_name'
    decamelize('css-class-name');     // 'css-class-name'
    decamelize('my favorite items');  // 'my favorite items'
    ```
  
    @method decamelize
    @param {String} str The string to decamelize.
    @return {String} the decamelized string.
    @public
  */

    function decamelize(str) {
      return DECAMELIZE_CACHE.get(str);
    }
    /**
    Replaces underscores, spaces, or camelCase with dashes.
  
    ```javascript
    import { dasherize } from '@ember/string';
  
    dasherize('innerHTML');                // 'inner-html'
    dasherize('action_name');              // 'action-name'
    dasherize('css-class-name');           // 'css-class-name'
    dasherize('my favorite items');        // 'my-favorite-items'
    dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
    ```
  
    @method dasherize
    @param {String} str The string to dasherize.
    @return {String} the dasherized string.
    @public
  */

    function dasherize(str) {
      return STRING_DASHERIZE_CACHE.get(str);
    }
    /**
    Returns the lowerCamelCase form of a string.
  
    ```javascript
    import { camelize } from '@ember/string';
  
    camelize('innerHTML');                   // 'innerHTML'
    camelize('action_name');                 // 'actionName'
    camelize('css-class-name');              // 'cssClassName'
    camelize('my favorite items');           // 'myFavoriteItems'
    camelize('My Favorite Items');           // 'myFavoriteItems'
    camelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'
    ```
  
    @method camelize
    @param {String} str The string to camelize.
    @return {String} the camelized string.
    @public
  */

    function camelize(str) {
      return CAMELIZE_CACHE.get(str);
    }
    /**
    Returns the UpperCamelCase form of a string.
  
    ```javascript
    import { classify } from '@ember/string';
  
    classify('innerHTML');                   // 'InnerHTML'
    classify('action_name');                 // 'ActionName'
    classify('css-class-name');              // 'CssClassName'
    classify('my favorite items');           // 'MyFavoriteItems'
    classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
    ```
  
    @method classify
    @param {String} str the string to classify
    @return {String} the classified string
    @public
  */

    function classify(str) {
      return CLASSIFY_CACHE.get(str);
    }
    /**
    More general than decamelize. Returns the lower\_case\_and\_underscored
    form of a string.
  
    ```javascript
    import { underscore } from '@ember/string';
  
    underscore('innerHTML');                 // 'inner_html'
    underscore('action_name');               // 'action_name'
    underscore('css-class-name');            // 'css_class_name'
    underscore('my favorite items');         // 'my_favorite_items'
    underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
    ```
  
    @method underscore
    @param {String} str The string to underscore.
    @return {String} the underscored string.
    @public
  */

    function underscore(str) {
      return UNDERSCORE_CACHE.get(str);
    }
    /**
    Returns the Capitalized form of a string
  
    ```javascript
    import { capitalize } from '@ember/string';
  
    capitalize('innerHTML')                 // 'InnerHTML'
    capitalize('action_name')               // 'Action_name'
    capitalize('css-class-name')            // 'Css-class-name'
    capitalize('my favorite items')         // 'My favorite items'
    capitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'
    ```
  
    @method capitalize
    @param {String} str The string to capitalize.
    @return {String} The capitalized string.
    @public
  */

    function capitalize(str) {
      return CAPITALIZE_CACHE.get(str);
    }

    function deprecateImportFromString(name, message) {
      if (message === void 0) {
        message = `Importing ${name} from '@ember/string' is deprecated. Please import ${name} from '@ember/template' instead.`;
      }

      // Disabling this deprecation due to unintended errors in 3.25
      // See https://github.com/emberjs/ember.js/issues/19393 fo more information.
      true &&
        !true &&
        (0, _debug.deprecate)(message, true, {
          id: 'ember-string.htmlsafe-ishtmlsafe',
          for: 'ember-source',
          since: {
            available: '3.25',
            enabled: '3.25',
          },
          until: '4.0.0',
          url:
            'https://deprecations.emberjs.com/v3.x/#toc_ember-string-htmlsafe-ishtmlsafe',
        });
    }

    function htmlSafe(str) {
      deprecateImportFromString('htmlSafe');
      return (0, _glimmer.htmlSafe)(str);
    }

    function isHTMLSafe(str) {
      deprecateImportFromString('isHTMLSafe');
      return (0, _glimmer.isHTMLSafe)(str);
    }
  });
  define('@ember/string/lib/string_registry', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.getString = getString;
    _exports.getStrings = getStrings;
    _exports.setStrings = setStrings;
    // STATE within a module is frowned upon, this exists
    // to support Ember.STRINGS but shield ember internals from this legacy global
    // API.
    var STRINGS = {};

    function setStrings(strings) {
      STRINGS = strings;
    }

    function getStrings() {
      return STRINGS;
    }

    function getString(name) {
      return STRINGS[name];
    }
  });
  define('@ember/template-compilation/index', [
    'exports',
    'ember-template-compiler',
  ], function (_exports, _emberTemplateCompiler) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'compileTemplate', {
      enumerable: true,
      get: function () {
        return _emberTemplateCompiler.compile;
      },
    });
    _exports.precompileTemplate = void 0;
    var precompileTemplate;
    _exports.precompileTemplate = precompileTemplate;

    if (
      true
      /* DEBUG */
    ) {
      _exports.precompileTemplate = precompileTemplate = () => {
        throw new Error(
          'Attempted to call `precompileTemplate` at runtime, but this API is meant to be used at compile time. You should use `compileTemplate` instead.',
        );
      };
    }
  });
  define('@ember/template-factory/index', [
    'exports',
    '@glimmer/opcode-compiler',
  ], function (_exports, _opcodeCompiler) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'createTemplateFactory', {
      enumerable: true,
      get: function () {
        return _opcodeCompiler.templateFactory;
      },
    });
  });
  define('@ember/template/index', [
    'exports',
    '@ember/-internals/glimmer',
  ], function (_exports, _glimmer) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'htmlSafe', {
      enumerable: true,
      get: function () {
        return _glimmer.htmlSafe;
      },
    });
    Object.defineProperty(_exports, 'isHTMLSafe', {
      enumerable: true,
      get: function () {
        return _glimmer.isHTMLSafe;
      },
    });
  });
  define('@ember/test/adapter', ['exports', 'ember-testing'], function (
    _exports,
    _emberTesting,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var _default = _emberTesting.Adapter;
    _exports.default = _default;
  });
  define('@ember/test/index', ['exports', 'require'], function (
    _exports,
    _require,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.unregisterWaiter = _exports.unregisterHelper = _exports.registerWaiter = _exports.registerHelper = _exports.registerAsyncHelper = void 0;
    var registerAsyncHelper;
    _exports.registerAsyncHelper = registerAsyncHelper;
    var registerHelper;
    _exports.registerHelper = registerHelper;
    var registerWaiter;
    _exports.registerWaiter = registerWaiter;
    var unregisterHelper;
    _exports.unregisterHelper = unregisterHelper;
    var unregisterWaiter;
    _exports.unregisterWaiter = unregisterWaiter;

    if ((0, _require.has)('ember-testing')) {
      var { Test } = (0, _require.default)('ember-testing');
      _exports.registerAsyncHelper = registerAsyncHelper =
        Test.registerAsyncHelper;
      _exports.registerHelper = registerHelper = Test.registerHelper;
      _exports.registerWaiter = registerWaiter = Test.registerWaiter;
      _exports.unregisterHelper = unregisterHelper = Test.unregisterHelper;
      _exports.unregisterWaiter = unregisterWaiter = Test.unregisterWaiter;
    } else {
      var testingNotAvailableMessage = () => {
        throw new Error(
          'Attempted to use test utilities, but `ember-testing` was not included',
        );
      };

      _exports.registerAsyncHelper = registerAsyncHelper = testingNotAvailableMessage;
      _exports.registerHelper = registerHelper = testingNotAvailableMessage;
      _exports.registerWaiter = registerWaiter = testingNotAvailableMessage;
      _exports.unregisterHelper = unregisterHelper = testingNotAvailableMessage;
      _exports.unregisterWaiter = unregisterWaiter = testingNotAvailableMessage;
    }
  });
  define('@ember/utils/index', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/runtime',
  ], function (_exports, _metal, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'compare', {
      enumerable: true,
      get: function () {
        return _runtime.compare;
      },
    });
    Object.defineProperty(_exports, 'isBlank', {
      enumerable: true,
      get: function () {
        return _metal.isBlank;
      },
    });
    Object.defineProperty(_exports, 'isEmpty', {
      enumerable: true,
      get: function () {
        return _metal.isEmpty;
      },
    });
    Object.defineProperty(_exports, 'isEqual', {
      enumerable: true,
      get: function () {
        return _runtime.isEqual;
      },
    });
    Object.defineProperty(_exports, 'isNone', {
      enumerable: true,
      get: function () {
        return _metal.isNone;
      },
    });
    Object.defineProperty(_exports, 'isPresent', {
      enumerable: true,
      get: function () {
        return _metal.isPresent;
      },
    });
    Object.defineProperty(_exports, 'typeOf', {
      enumerable: true,
      get: function () {
        return _runtime.typeOf;
      },
    });
  });
  define('@ember/version/index', ['exports', 'ember/version'], function (
    _exports,
    _version,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'VERSION', {
      enumerable: true,
      get: function () {
        return _version.default;
      },
    });
  });
  define('@glimmer/destroyable', [
    'exports',
    '@glimmer/util',
    '@glimmer/global-context',
  ], function (_exports, _util, _globalContext) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports._hasDestroyableChildren = _hasDestroyableChildren;
    _exports.assertDestroyablesDestroyed = void 0;
    _exports.associateDestroyableChild = associateDestroyableChild;
    _exports.destroy = destroy;
    _exports.destroyChildren = destroyChildren;
    _exports.enableDestroyableTracking = void 0;
    _exports.isDestroyed = isDestroyed;
    _exports.isDestroying = isDestroying;
    _exports.registerDestructor = registerDestructor;
    _exports.unregisterDestructor = unregisterDestructor;
    var DESTROYABLE_META = new WeakMap();

    function push(collection, newItem) {
      if (collection === null) {
        return newItem;
      } else if (Array.isArray(collection)) {
        collection.push(newItem);
        return collection;
      } else {
        return [collection, newItem];
      }
    }

    function iterate(collection, fn) {
      if (Array.isArray(collection)) {
        for (var i = 0; i < collection.length; i++) {
          fn(collection[i]);
        }
      } else if (collection !== null) {
        fn(collection);
      }
    }

    function remove(collection, item, message) {
      if (
        true
        /* DEBUG */
      ) {
        var collectionIsItem = collection === item;
        var collectionContainsItem =
          Array.isArray(collection) && collection.indexOf(item) !== -1;

        if (!collectionIsItem && !collectionContainsItem) {
          throw new Error(String(message));
        }
      }

      if (Array.isArray(collection) && collection.length > 1) {
        var index = collection.indexOf(item);
        collection.splice(index, 1);
        return collection;
      } else {
        return null;
      }
    }

    function getDestroyableMeta(destroyable) {
      var meta = DESTROYABLE_META.get(destroyable);

      if (meta === undefined) {
        meta = {
          parents: null,
          children: null,
          eagerDestructors: null,
          destructors: null,
          state: 0,
          /* Live */
        };

        if (
          true
          /* DEBUG */
        ) {
          meta.source = destroyable;
        }

        DESTROYABLE_META.set(destroyable, meta);
      }

      return meta;
    }

    function associateDestroyableChild(parent, child) {
      if (
        true &&
        /* DEBUG */
        isDestroying(parent)
      ) {
        throw new Error(
          'Attempted to associate a destroyable child with an object that is already destroying or destroyed',
        );
      }

      var parentMeta = getDestroyableMeta(parent);
      var childMeta = getDestroyableMeta(child);
      parentMeta.children = push(parentMeta.children, child);
      childMeta.parents = push(childMeta.parents, parent);
      return child;
    }

    function registerDestructor(destroyable, destructor, eager) {
      if (eager === void 0) {
        eager = false;
      }

      if (
        true &&
        /* DEBUG */
        isDestroying(destroyable)
      ) {
        throw new Error(
          'Attempted to register a destructor with an object that is already destroying or destroyed',
        );
      }

      var meta = getDestroyableMeta(destroyable);
      var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
      meta[destructorsKey] = push(meta[destructorsKey], destructor);
      return destructor;
    }

    function unregisterDestructor(destroyable, destructor, eager) {
      if (eager === void 0) {
        eager = false;
      }

      if (
        true &&
        /* DEBUG */
        isDestroying(destroyable)
      ) {
        throw new Error(
          'Attempted to unregister a destructor with an object that is already destroying or destroyed',
        );
      }

      var meta = getDestroyableMeta(destroyable);
      var destructorsKey = eager === true ? 'eagerDestructors' : 'destructors';
      meta[destructorsKey] = remove(
        meta[destructorsKey],
        destructor,
        true &&
          /* DEBUG */
          'attempted to remove a destructor that was not registered with the destroyable',
      );
    } ////////////

    function destroy(destroyable) {
      var meta = getDestroyableMeta(destroyable);
      if (
        meta.state >= 1
        /* Destroying */
      )
        return;
      var { parents, children, eagerDestructors, destructors } = meta;
      meta.state = 1;
      /* Destroying */
      iterate(children, destroy);
      iterate(eagerDestructors, (destructor) => destructor(destroyable));
      iterate(destructors, (destructor) =>
        (0, _globalContext.scheduleDestroy)(destroyable, destructor),
      );
      (0, _globalContext.scheduleDestroyed)(() => {
        iterate(parents, (parent) =>
          removeChildFromParent(destroyable, parent),
        );
        meta.state = 2;
        /* Destroyed */
      });
    }

    function removeChildFromParent(child, parent) {
      var parentMeta = getDestroyableMeta(parent);

      if (
        parentMeta.state === 0
        /* Live */
      ) {
        parentMeta.children = remove(
          parentMeta.children,
          child,
          true &&
            /* DEBUG */
            "attempted to remove child from parent, but the parent's children did not contain the child. This is likely a bug with destructors.",
        );
      }
    }

    function destroyChildren(destroyable) {
      var { children } = getDestroyableMeta(destroyable);
      iterate(children, destroy);
    }

    function _hasDestroyableChildren(destroyable) {
      var meta = DESTROYABLE_META.get(destroyable);
      return meta === undefined ? false : meta.children !== null;
    }

    function isDestroying(destroyable) {
      var meta = DESTROYABLE_META.get(destroyable);
      return meta === undefined ? false : meta.state >= 1;
      /* Destroying */
    }

    function isDestroyed(destroyable) {
      var meta = DESTROYABLE_META.get(destroyable);
      return meta === undefined ? false : meta.state >= 2;
      /* Destroyed */
    } ////////////

    var enableDestroyableTracking;
    _exports.enableDestroyableTracking = enableDestroyableTracking;
    var assertDestroyablesDestroyed;
    _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed;

    if (
      true
      /* DEBUG */
    ) {
      var isTesting = false;

      _exports.enableDestroyableTracking = enableDestroyableTracking = () => {
        if (isTesting) {
          // Reset destroyable meta just in case, before throwing the error
          DESTROYABLE_META = new WeakMap();
          throw new Error(
            'Attempted to start destroyable testing, but you did not end the previous destroyable test. Did you forget to call `assertDestroyablesDestroyed()`',
          );
        }

        isTesting = true;
        DESTROYABLE_META = new Map();
      };

      _exports.assertDestroyablesDestroyed = assertDestroyablesDestroyed = () => {
        if (!isTesting) {
          throw new Error(
            'Attempted to assert destroyables destroyed, but you did not start a destroyable test. Did you forget to call `enableDestroyableTracking()`',
          );
        }

        isTesting = false;
        var map = DESTROYABLE_META;
        DESTROYABLE_META = new WeakMap();
        var undestroyed = [];
        map.forEach((meta) => {
          if (
            meta.state !== 2
            /* Destroyed */
          ) {
            undestroyed.push(meta.source);
          }
        });

        if (undestroyed.length > 0) {
          var objectsToString = undestroyed
            .map(_util.debugToString)
            .join('\n    ');
          var error = new Error(
            `Some destroyables were not destroyed during this test:\n    ${objectsToString}`,
          );
          error.destroyables = undestroyed;
          throw error;
        }
      };
    }
  });
  define('@glimmer/encoder', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.InstructionEncoderImpl = void 0;

    class InstructionEncoderImpl {
      constructor(buffer) {
        this.buffer = buffer;
        this.size = 0;
      }

      encode(type, machine) {
        if (
          type > 255
          /* TYPE_SIZE */
        ) {
          throw new Error(`Opcode type over 8-bits. Got ${type}.`);
        }

        var first = type | machine | ((arguments.length - 2) << 8);
        /* ARG_SHIFT */
        this.buffer.push(first);

        for (var i = 2; i < arguments.length; i++) {
          var op = arguments[i];

          if (
            true &&
            /* DEBUG */
            typeof op === 'number' &&
            op > 2147483647
            /* MAX_SIZE */
          ) {
            throw new Error(`Operand over 32-bits. Got ${op}.`);
          }

          this.buffer.push(op);
        }

        this.size = this.buffer.length;
      }

      patch(position, target) {
        if (this.buffer[position + 1] === -1) {
          this.buffer[position + 1] = target;
        } else {
          throw new Error(
            'Trying to patch operand in populated slot instead of a reserved slot.',
          );
        }
      }
    }

    _exports.InstructionEncoderImpl = InstructionEncoderImpl;
  });
  define('@glimmer/env', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.DEBUG = _exports.CI = void 0;
    var DEBUG = false;
    _exports.DEBUG = DEBUG;
    var CI = false;
    _exports.CI = CI;
  });
  define('@glimmer/global-context', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.warnIfStyleNotTrusted = _exports.toIterator = _exports.toBool = _exports.testOverrideGlobalContext = _exports.setProp = _exports.setPath = _exports.scheduleRevalidate = _exports.scheduleDestroyed = _exports.scheduleDestroy = _exports.getProp = _exports.getPath = _exports.deprecate = _exports.default = _exports.assertGlobalContextWasSet = _exports.assert = _exports.FEATURE_DEFAULT_HELPER_MANAGER = void 0;

    /**
     * This package contains global context functions for Glimmer. These functions
     * are set by the embedding environment and must be set before initial render.
     *
     * These functions should meet the following criteria:
     *
     * - Must be provided by the embedder, due to having framework specific
     *   behaviors (e.g. interop with classic Ember behaviors that should not be
     *   upstreamed) or to being out of scope for the VM (e.g. scheduling a
     *   revalidation)
     * - Never differ between render roots
     * - Never change over time
     *
     */
    var FEATURE_DEFAULT_HELPER_MANAGER = true; //////////

    /**
     * Schedules a VM revalidation.
     *
     * Note: this has a default value so that tags can warm themselves when first loaded.
     */

    _exports.FEATURE_DEFAULT_HELPER_MANAGER = FEATURE_DEFAULT_HELPER_MANAGER;

    var scheduleRevalidate = () => {};
    /**
     * Schedules a destructor to run
     *
     * @param destroyable The destroyable being destroyed
     * @param destructor The destructor being scheduled
     */

    _exports.scheduleRevalidate = scheduleRevalidate;
    var scheduleDestroy;
    /**
     * Finalizes destruction
     *
     * @param finalizer finalizer function
     */

    _exports.scheduleDestroy = scheduleDestroy;
    var scheduleDestroyed;
    /**
     * Hook to provide iterators for `{{each}}` loops
     *
     * @param value The value to create an iterator for
     */

    _exports.scheduleDestroyed = scheduleDestroyed;
    var toIterator;
    /**
     * Hook to specify truthiness within Glimmer templates
     *
     * @param value The value to convert to a boolean
     */

    _exports.toIterator = toIterator;
    var toBool;
    /**
     * Hook for specifying how Glimmer should access properties in cases where it
     * needs to. For instance, accessing an object's values in templates.
     *
     * @param obj The object provided to get a value from
     * @param path The path to get the value from
     */

    _exports.toBool = toBool;
    var getProp;
    /**
     * Hook for specifying how Glimmer should update props in cases where it needs
     * to. For instance, when updating a template reference (e.g. 2-way-binding)
     *
     * @param obj The object provided to get a value from
     * @param prop The prop to set the value at
     * @param value The value to set the value to
     */

    _exports.getProp = getProp;
    var setProp;
    /**
     * Hook for specifying how Glimmer should access paths in cases where it needs
     * to. For instance, the `key` value of `{{each}}` loops.
     *
     * @param obj The object provided to get a value from
     * @param path The path to get the value from
     */

    _exports.setProp = setProp;
    var getPath;
    /**
     * Hook for specifying how Glimmer should update paths in cases where it needs
     * to. For instance, when updating a template reference (e.g. 2-way-binding)
     *
     * @param obj The object provided to get a value from
     * @param path The path to get the value from
     */

    _exports.getPath = getPath;
    var setPath;
    /**
     * Hook to warn if a style binding string or value was not marked as trusted
     * (e.g. HTMLSafe)
     */

    _exports.setPath = setPath;
    var warnIfStyleNotTrusted;
    /**
     * Hook to customize assertion messages in the VM. Usages can be stripped out
     * by using the @glimmer/vm-babel-plugins package.
     */

    _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted;
    var assert;
    /**
     * Hook to customize deprecation messages in the VM. Usages can be stripped out
     * by using the @glimmer/vm-babel-plugins package.
     */

    _exports.assert = assert;
    var deprecate;
    _exports.deprecate = deprecate;
    var globalContextWasSet = false;

    function setGlobalContext(context) {
      var _a;

      if (
        true
        /* DEBUG */
      ) {
        if (globalContextWasSet) {
          throw new Error(
            'Attempted to set the global context twice. This should only be set once.',
          );
        }

        globalContextWasSet = true;
      }

      _exports.scheduleRevalidate = scheduleRevalidate =
        context.scheduleRevalidate;
      _exports.scheduleDestroy = scheduleDestroy = context.scheduleDestroy;
      _exports.scheduleDestroyed = scheduleDestroyed =
        context.scheduleDestroyed;
      _exports.toIterator = toIterator = context.toIterator;
      _exports.toBool = toBool = context.toBool;
      _exports.getProp = getProp = context.getProp;
      _exports.setProp = setProp = context.setProp;
      _exports.getPath = getPath = context.getPath;
      _exports.setPath = setPath = context.setPath;
      _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted =
        context.warnIfStyleNotTrusted;
      _exports.assert = assert = context.assert;
      _exports.deprecate = deprecate = context.deprecate;

      if (
        typeof ((_a = context.FEATURES) === null || _a === void 0
          ? void 0
          : _a.DEFAULT_HELPER_MANAGER) === 'boolean'
      ) {
        _exports.FEATURE_DEFAULT_HELPER_MANAGER = FEATURE_DEFAULT_HELPER_MANAGER =
          context.FEATURES.DEFAULT_HELPER_MANAGER;
      }
    }

    var assertGlobalContextWasSet;
    _exports.assertGlobalContextWasSet = assertGlobalContextWasSet;
    var testOverrideGlobalContext;
    _exports.testOverrideGlobalContext = testOverrideGlobalContext;

    if (
      true
      /* DEBUG */
    ) {
      _exports.assertGlobalContextWasSet = assertGlobalContextWasSet = () => {
        if (globalContextWasSet === false) {
          throw new Error(
            'The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`',
          );
        }
      };

      _exports.testOverrideGlobalContext = testOverrideGlobalContext = (
        context,
      ) => {
        var originalGlobalContext = globalContextWasSet
          ? {
              scheduleRevalidate,
              scheduleDestroy,
              scheduleDestroyed,
              toIterator,
              toBool,
              getProp,
              setProp,
              getPath,
              setPath,
              warnIfStyleNotTrusted,
              assert,
              deprecate,
            }
          : null;

        if (context === null) {
          globalContextWasSet = false;
        } else {
          globalContextWasSet = true;
        } // We use `undefined as any` here to unset the values when resetting the
        // context at the end of a test.

        _exports.scheduleRevalidate = scheduleRevalidate =
          (context === null || context === void 0
            ? void 0
            : context.scheduleRevalidate) || undefined;
        _exports.scheduleDestroy = scheduleDestroy =
          (context === null || context === void 0
            ? void 0
            : context.scheduleDestroy) || undefined;
        _exports.scheduleDestroyed = scheduleDestroyed =
          (context === null || context === void 0
            ? void 0
            : context.scheduleDestroyed) || undefined;
        _exports.toIterator = toIterator =
          (context === null || context === void 0
            ? void 0
            : context.toIterator) || undefined;
        _exports.toBool = toBool =
          (context === null || context === void 0 ? void 0 : context.toBool) ||
          undefined;
        _exports.getProp = getProp =
          (context === null || context === void 0 ? void 0 : context.getProp) ||
          undefined;
        _exports.setProp = setProp =
          (context === null || context === void 0 ? void 0 : context.setProp) ||
          undefined;
        _exports.getPath = getPath =
          (context === null || context === void 0 ? void 0 : context.getPath) ||
          undefined;
        _exports.setPath = setPath =
          (context === null || context === void 0 ? void 0 : context.setPath) ||
          undefined;
        _exports.warnIfStyleNotTrusted = warnIfStyleNotTrusted =
          (context === null || context === void 0
            ? void 0
            : context.warnIfStyleNotTrusted) || undefined;
        _exports.assert = assert =
          (context === null || context === void 0 ? void 0 : context.assert) ||
          undefined;
        _exports.deprecate = deprecate =
          (context === null || context === void 0
            ? void 0
            : context.deprecate) || undefined;
        return originalGlobalContext;
      };
    }

    var _default = setGlobalContext;
    _exports.default = _default;
  });
  define('@glimmer/low-level', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.Storage = _exports.Stack = void 0;

    class Storage {
      constructor() {
        this.array = [];
        this.next = 0;
      }

      add(element) {
        var { next: slot, array } = this;

        if (slot === array.length) {
          this.next++;
        } else {
          var prev = array[slot];
          this.next = prev;
        }

        this.array[slot] = element;
        return slot;
      }

      deref(pointer) {
        return this.array[pointer];
      }

      drop(pointer) {
        this.array[pointer] = this.next;
        this.next = pointer;
      }
    }

    _exports.Storage = Storage;

    class Stack {
      constructor(vec) {
        if (vec === void 0) {
          vec = [];
        }

        this.vec = vec;
      }

      clone() {
        return new Stack(this.vec.slice());
      }

      sliceFrom(start) {
        return new Stack(this.vec.slice(start));
      }

      slice(start, end) {
        return new Stack(this.vec.slice(start, end));
      }

      copy(from, to) {
        this.vec[to] = this.vec[from];
      } // TODO: how to model u64 argument?

      writeRaw(pos, value) {
        // TODO: Grow?
        this.vec[pos] = value;
      } // TODO: partially decoded enum?

      getRaw(pos) {
        return this.vec[pos];
      }

      reset() {
        this.vec.length = 0;
      }

      len() {
        return this.vec.length;
      }
    }

    _exports.Stack = Stack;
  });
  define('@glimmer/manager', [
    'exports',
    '@glimmer/util',
    '@glimmer/reference',
    '@glimmer/validator',
    '@glimmer/destroyable',
    '@glimmer/global-context',
  ], function (
    _exports,
    _util,
    _reference,
    _validator,
    _destroyable,
    _globalContext,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.CustomModifierManager = _exports.CustomHelperManager = _exports.CustomComponentManager = void 0;
    _exports.capabilityFlagsFrom = capabilityFlagsFrom;
    _exports.componentCapabilities = componentCapabilities;
    _exports.getComponentTemplate = getComponentTemplate;
    _exports.getCustomTagFor = getCustomTagFor;
    _exports.getInternalComponentManager = getInternalComponentManager;
    _exports.getInternalHelperManager = getInternalHelperManager;
    _exports.getInternalModifierManager = getInternalModifierManager;
    _exports.hasCapability = hasCapability;
    _exports.hasDestroyable = hasDestroyable;
    _exports.hasInternalComponentManager = hasInternalComponentManager;
    _exports.hasInternalHelperManager = hasInternalHelperManager;
    _exports.hasInternalModifierManager = hasInternalModifierManager;
    _exports.hasValue = hasValue;
    _exports.helperCapabilities = helperCapabilities;
    _exports.managerHasCapability = managerHasCapability;
    _exports.modifierCapabilities = modifierCapabilities;
    _exports.setComponentManager = setComponentManager;
    _exports.setComponentTemplate = setComponentTemplate;
    _exports.setCustomTagFor = setCustomTagFor;
    _exports.setHelperManager = setHelperManager;
    _exports.setInternalComponentManager = setInternalComponentManager;
    _exports.setInternalHelperManager = setInternalHelperManager;
    _exports.setInternalModifierManager = setInternalModifierManager;
    _exports.setModifierManager = setModifierManager;
    var FROM_CAPABILITIES = true ? /* DEBUG */ new _util._WeakSet() : undefined;

    function buildCapabilities(capabilities) {
      if (
        true
        /* DEBUG */
      ) {
        FROM_CAPABILITIES.add(capabilities);
        Object.freeze(capabilities);
      }

      return capabilities;
    }
    /**
     * Converts a ComponentCapabilities object into a 32-bit integer representation.
     */

    function capabilityFlagsFrom(capabilities) {
      return (
        0 |
        (capabilities.dynamicLayout ? 1 : /* DynamicLayout */ 0) |
        (capabilities.dynamicTag ? 2 : /* DynamicTag */ 0) |
        (capabilities.prepareArgs ? 4 : /* PrepareArgs */ 0) |
        (capabilities.createArgs ? 8 : /* CreateArgs */ 0) |
        (capabilities.attributeHook ? 16 : /* AttributeHook */ 0) |
        (capabilities.elementHook ? 32 : /* ElementHook */ 0) |
        (capabilities.dynamicScope ? 64 : /* DynamicScope */ 0) |
        (capabilities.createCaller ? 128 : /* CreateCaller */ 0) |
        (capabilities.updateHook ? 256 : /* UpdateHook */ 0) |
        (capabilities.createInstance ? 512 : /* CreateInstance */ 0) |
        (capabilities.wrapped ? 1024 : /* Wrapped */ 0) |
        (capabilities.willDestroy ? 2048 : /* WillDestroy */ 0) |
        (capabilities.hasSubOwner ? 4096 : /* HasSubOwner */ 0)
      );
    }

    function managerHasCapability(_manager, capabilities, capability) {
      return !!(capabilities & capability);
    }

    function hasCapability(capabilities, capability) {
      return !!(capabilities & capability);
    }

    var CUSTOM_TAG_FOR = new WeakMap();

    function getCustomTagFor(obj) {
      return CUSTOM_TAG_FOR.get(obj);
    }

    function setCustomTagFor(obj, customTagFn) {
      CUSTOM_TAG_FOR.set(obj, customTagFn);
    }

    function convertToInt(prop) {
      if (typeof prop === 'symbol') return null;
      var num = Number(prop);
      if (isNaN(num)) return null;
      return num % 1 === 0 ? num : null;
    }

    function tagForNamedArg(namedArgs, key) {
      return (0, _validator.track)(() => {
        if (key in namedArgs) {
          (0, _reference.valueForRef)(namedArgs[key]);
        }
      });
    }

    function tagForPositionalArg(positionalArgs, key) {
      return (0, _validator.track)(() => {
        if (key === '[]') {
          // consume all of the tags in the positional array
          positionalArgs.forEach(_reference.valueForRef);
        }

        var parsed = convertToInt(key);

        if (parsed !== null && parsed < positionalArgs.length) {
          // consume the tag of the referenced index
          (0, _reference.valueForRef)(positionalArgs[parsed]);
        }
      });
    }

    var argsProxyFor;

    class NamedArgsProxy {
      constructor(named) {
        this.named = named;
      }

      get(_target, prop) {
        var ref = this.named[prop];

        if (ref !== undefined) {
          return (0, _reference.valueForRef)(ref);
        }
      }

      has(_target, prop) {
        return prop in this.named;
      }

      ownKeys() {
        return Object.keys(this.named);
      }

      isExtensible() {
        return false;
      }

      getOwnPropertyDescriptor(_target, prop) {
        if (
          true &&
          /* DEBUG */
          !(prop in this.named)
        ) {
          throw new Error(
            `args proxies do not have real property descriptors, so you should never need to call getOwnPropertyDescriptor yourself. This code exists for enumerability, such as in for-in loops and Object.keys(). Attempted to get the descriptor for \`${String(
              prop,
            )}\``,
          );
        }

        return {
          enumerable: true,
          configurable: true,
        };
      }
    }

    class PositionalArgsProxy {
      constructor(positional) {
        this.positional = positional;
      }

      get(target, prop) {
        var { positional } = this;

        if (prop === 'length') {
          return positional.length;
        }

        var parsed = convertToInt(prop);

        if (parsed !== null && parsed < positional.length) {
          return (0, _reference.valueForRef)(positional[parsed]);
        }

        return target[prop];
      }

      isExtensible() {
        return false;
      }

      has(_target, prop) {
        var parsed = convertToInt(prop);
        return parsed !== null && parsed < this.positional.length;
      }
    }

    if (_util.HAS_NATIVE_PROXY) {
      argsProxyFor = (capturedArgs, type) => {
        var { named, positional } = capturedArgs;

        var getNamedTag = (_obj, key) => tagForNamedArg(named, key);

        var getPositionalTag = (_obj, key) =>
          tagForPositionalArg(positional, key);

        var namedHandler = new NamedArgsProxy(named);
        var positionalHandler = new PositionalArgsProxy(positional);
        var namedTarget = Object.create(null);
        var positionalTarget = [];

        if (
          true
          /* DEBUG */
        ) {
          var setHandler = function (_target, prop) {
            throw new Error(
              `You attempted to set ${String(
                prop,
              )} on the arguments of a component, helper, or modifier. Arguments are immutable and cannot be updated directly; they always represent the values that are passed down. If you want to set default values, you should use a getter and local tracked state instead.`,
            );
          };

          var forInDebugHandler = () => {
            throw new Error(
              `Object.keys() was called on the positional arguments array for a ${type}, which is not supported. This function is a low-level function that should not need to be called for positional argument arrays. You may be attempting to iterate over the array using for...in instead of for...of.`,
            );
          };

          namedHandler.set = setHandler;
          positionalHandler.set = setHandler;
          positionalHandler.ownKeys = forInDebugHandler;
        }

        var namedProxy = new Proxy(namedTarget, namedHandler);
        var positionalProxy = new Proxy(positionalTarget, positionalHandler);
        setCustomTagFor(namedProxy, getNamedTag);
        setCustomTagFor(positionalProxy, getPositionalTag);
        return {
          named: namedProxy,
          positional: positionalProxy,
        };
      };
    } else {
      argsProxyFor = (capturedArgs, _type) => {
        var { named, positional } = capturedArgs;

        var getNamedTag = (_obj, key) => tagForNamedArg(named, key);

        var getPositionalTag = (_obj, key) =>
          tagForPositionalArg(positional, key);

        var namedProxy = {};
        var positionalProxy = [];
        setCustomTagFor(namedProxy, getNamedTag);
        setCustomTagFor(positionalProxy, getPositionalTag);
        Object.keys(named).forEach((name) => {
          Object.defineProperty(namedProxy, name, {
            enumerable: true,
            configurable: true,

            get() {
              return (0, _reference.valueForRef)(named[name]);
            },
          });
        });
        positional.forEach((ref, index) => {
          Object.defineProperty(positionalProxy, index, {
            enumerable: true,
            configurable: true,

            get() {
              return (0, _reference.valueForRef)(ref);
            },
          });
        });

        if (
          true
          /* DEBUG */
        ) {
          // Prevent mutations in development mode. This will not prevent the
          // proxy from updating, but will prevent assigning new values or pushing
          // for instance.
          Object.freeze(namedProxy);
          Object.freeze(positionalProxy);
        }

        return {
          named: namedProxy,
          positional: positionalProxy,
        };
      };
    }

    function helperCapabilities(managerAPI, options) {
      if (options === void 0) {
        options = {};
      }

      if (
        true &&
        /* DEBUG */
        managerAPI !== '3.23'
      ) {
        throw new Error('Invalid helper manager compatibility specified');
      }

      if (
        true &&
        /* DEBUG */
        (!(options.hasValue || options.hasScheduledEffect) ||
          (options.hasValue && options.hasScheduledEffect))
      ) {
        throw new Error(
          'You must pass either the `hasValue` OR the `hasScheduledEffect` capability when defining a helper manager. Passing neither, or both, is not permitted.',
        );
      }

      if (
        true &&
        /* DEBUG */
        options.hasScheduledEffect
      ) {
        throw new Error(
          'The `hasScheduledEffect` capability has not yet been implemented for helper managers. Please pass `hasValue` instead',
        );
      }

      return buildCapabilities({
        hasValue: Boolean(options.hasValue),
        hasDestroyable: Boolean(options.hasDestroyable),
        hasScheduledEffect: Boolean(options.hasScheduledEffect),
      });
    } ////////////

    function hasValue(manager) {
      return manager.capabilities.hasValue;
    }

    function hasDestroyable(manager) {
      return manager.capabilities.hasDestroyable;
    } ////////////

    class CustomHelperManager {
      constructor(factory) {
        this.factory = factory;
        this.helperManagerDelegates = new WeakMap();
        this.undefinedDelegate = null;
      }

      getDelegateForOwner(owner) {
        var delegate = this.helperManagerDelegates.get(owner);

        if (delegate === undefined) {
          var { factory } = this;
          delegate = factory(owner);

          if (
            true &&
            /* DEBUG */
            !FROM_CAPABILITIES.has(delegate.capabilities)
          ) {
            // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
            throw new Error(
              `Custom helper managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.23')\` (imported via \`import { capabilities } from '@ember/helper';\`). Received: \`${JSON.stringify(
                delegate.capabilities,
              )}\` for: \`${delegate}\``,
            );
          }

          this.helperManagerDelegates.set(owner, delegate);
        }

        return delegate;
      }

      getDelegateFor(owner) {
        if (owner === undefined) {
          var { undefinedDelegate } = this;

          if (undefinedDelegate === null) {
            var { factory } = this;
            this.undefinedDelegate = undefinedDelegate = factory(undefined);
          }

          return undefinedDelegate;
        } else {
          return this.getDelegateForOwner(owner);
        }
      }

      getHelper(definition) {
        return (capturedArgs, owner) => {
          var _a, _b;

          var manager = this.getDelegateFor(owner);
          var args = argsProxyFor(capturedArgs, 'helper');
          var bucket = manager.createHelper(definition, args);

          if (hasValue(manager)) {
            var cache = (0, _reference.createComputeRef)(
              () => manager.getValue(bucket),
              null,
              true &&
                /* DEBUG */
                manager.getDebugName &&
                manager.getDebugName(definition),
            );

            if (hasDestroyable(manager)) {
              (0, _destroyable.associateDestroyableChild)(
                cache,
                manager.getDestroyable(bucket),
              );
            }

            return cache;
          } else if (hasDestroyable(manager)) {
            var ref = (0, _reference.createConstRef)(
              undefined,
              true &&
                /* DEBUG */
                ((_b =
                  (_a = manager.getDebugName) === null || _a === void 0
                    ? void 0
                    : _a.call(manager, definition)) !== null && _b !== void 0
                  ? _b
                  : 'unknown helper'),
            );
            (0, _destroyable.associateDestroyableChild)(
              ref,
              manager.getDestroyable(bucket),
            );
            return ref;
          } else {
            return _reference.UNDEFINED_REFERENCE;
          }
        };
      }
    }

    _exports.CustomHelperManager = CustomHelperManager;

    class FunctionHelperManager {
      constructor() {
        this.capabilities = buildCapabilities({
          hasValue: true,
          hasDestroyable: false,
          hasScheduledEffect: false,
        });
      }

      createHelper(fn, args) {
        return {
          fn,
          args,
        };
      }

      getValue(_ref) {
        var { fn, args } = _ref;

        if (Object.keys(args.named).length > 0) {
          var argsForFn = [...args.positional, args.named];
          return fn(...argsForFn);
        }

        return fn(...args.positional);
      }

      getDebugName(fn) {
        if (fn.name) {
          return `(helper function ${fn.name})`;
        }

        return '(anonymous helper function)';
      }
    }

    var COMPONENT_MANAGERS = new WeakMap();
    var MODIFIER_MANAGERS = new WeakMap();
    var HELPER_MANAGERS = new WeakMap(); ///////////

    var getPrototypeOf = Object.getPrototypeOf;

    function setManager(map, manager, obj) {
      if (
        true &&
        /* DEBUG */
        (typeof obj !== 'object' || obj === null) &&
        typeof obj !== 'function'
      ) {
        throw new Error(
          `Attempted to set a manager on a non-object value. Managers can only be associated with objects or functions. Value was ${(0,
          _util.debugToString)(obj)}`,
        );
      }

      if (
        true &&
        /* DEBUG */
        map.has(obj)
      ) {
        throw new Error(
          `Attempted to set the same type of manager multiple times on a value. You can only associate one manager of each type with a given value. Value was ${(0,
          _util.debugToString)(obj)}`,
        );
      }

      map.set(obj, manager);
      return obj;
    }

    function getManager(map, obj) {
      var pointer = obj;

      while (pointer !== undefined && pointer !== null) {
        var manager = map.get(pointer);

        if (manager !== undefined) {
          return manager;
        }

        pointer = getPrototypeOf(pointer);
      }

      return undefined;
    } ///////////

    function setInternalModifierManager(manager, definition) {
      return setManager(MODIFIER_MANAGERS, manager, definition);
    }

    function getInternalModifierManager(definition, isOptional) {
      if (
        true &&
        /* DEBUG */
        typeof definition !== 'function' &&
        (typeof definition !== 'object' || definition === null)
      ) {
        throw new Error(
          `Attempted to use a value as a modifier, but it was not an object or function. Modifier definitions must be objects or functions with an associated modifier manager. The value was: ${definition}`,
        );
      }

      var manager = getManager(MODIFIER_MANAGERS, definition);

      if (manager === undefined) {
        if (isOptional === true) {
          return null;
        } else if (
          true
          /* DEBUG */
        ) {
          throw new Error(
            `Attempted to load a modifier, but there wasn't a modifier manager associated with the definition. The definition was: ${(0,
            _util.debugToString)(definition)}`,
          );
        }
      }

      return manager;
    }

    function setInternalHelperManager(manager, definition) {
      return setManager(HELPER_MANAGERS, manager, definition);
    }

    var DEFAULT_MANAGER = new CustomHelperManager(
      () => new FunctionHelperManager(),
    );

    function getInternalHelperManager(definition, isOptional) {
      if (
        true &&
        /* DEBUG */
        typeof definition !== 'function' &&
        (typeof definition !== 'object' || definition === null)
      ) {
        throw new Error(
          `Attempted to use a value as a helper, but it was not an object or function. Helper definitions must be objects or functions with an associated helper manager. The value was: ${definition}`,
        );
      }

      var manager = getManager(HELPER_MANAGERS, definition);

      if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
        // Functions are special-cased because functions are defined
        // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
        if (manager === undefined && typeof definition === 'function') {
          manager = DEFAULT_MANAGER;
        }
      }

      if (manager) {
        return manager;
      } else if (isOptional === true) {
        return null;
      } else if (
        true
        /* DEBUG */
      ) {
        throw new Error(
          `Attempted to load a helper, but there wasn't a helper manager associated with the definition. The definition was: ${(0,
          _util.debugToString)(definition)}`,
        );
      }

      return null;
    }

    function setInternalComponentManager(factory, obj) {
      return setManager(COMPONENT_MANAGERS, factory, obj);
    }

    function getInternalComponentManager(definition, isOptional) {
      if (
        true &&
        /* DEBUG */
        typeof definition !== 'function' &&
        (typeof definition !== 'object' || definition === null)
      ) {
        throw new Error(
          `Attempted to use a value as a component, but it was not an object or function. Component definitions must be objects or functions with an associated component manager. The value was: ${definition}`,
        );
      }

      var manager = getManager(COMPONENT_MANAGERS, definition);

      if (manager === undefined) {
        if (isOptional === true) {
          return null;
        } else if (
          true
          /* DEBUG */
        ) {
          throw new Error(
            `Attempted to load a component, but there wasn't a component manager associated with the definition. The definition was: ${(0,
            _util.debugToString)(definition)}`,
          );
        }
      }

      return manager;
    } ///////////

    function hasInternalComponentManager(definition) {
      return (
        hasDefaultComponentManager(definition) ||
        getManager(COMPONENT_MANAGERS, definition) !== undefined
      );
    }

    function hasInternalHelperManager(definition) {
      return (
        hasDefaultHelperManager(definition) ||
        getManager(HELPER_MANAGERS, definition) !== undefined
      );
    }

    function hasInternalModifierManager(definition) {
      return (
        hasDefaultModifierManager(definition) ||
        getManager(MODIFIER_MANAGERS, definition) !== undefined
      );
    }

    function hasDefaultComponentManager(_definition) {
      return false;
    }

    function hasDefaultHelperManager(definition) {
      if (_globalContext.FEATURE_DEFAULT_HELPER_MANAGER) {
        return typeof definition === 'function';
      }

      return false;
    }

    function hasDefaultModifierManager(_definition) {
      return false;
    }

    var CAPABILITIES = {
      dynamicLayout: false,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: true,
      attributeHook: false,
      elementHook: false,
      createCaller: false,
      dynamicScope: true,
      updateHook: true,
      createInstance: true,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };

    function componentCapabilities(managerAPI, options) {
      if (options === void 0) {
        options = {};
      }

      if (
        true &&
        /* DEBUG */
        managerAPI !== '3.13'
      ) {
        throw new Error('Invalid component manager compatibility specified');
      }

      var updateHook = Boolean(options.updateHook);
      return buildCapabilities({
        asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
        destructor: Boolean(options.destructor),
        updateHook,
      });
    }

    function hasAsyncLifeCycleCallbacks(delegate) {
      return delegate.capabilities.asyncLifeCycleCallbacks;
    }

    function hasUpdateHook(delegate) {
      return delegate.capabilities.updateHook;
    }

    function hasAsyncUpdateHook(delegate) {
      return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
    }

    function hasDestructors(delegate) {
      return delegate.capabilities.destructor;
    }
    /**
    The CustomComponentManager allows addons to provide custom component
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom component manager, which
    implements a set of hooks that determine component behavior.
  
    To create a custom component manager, instantiate a new CustomComponentManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomComponentManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a component, the component manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
  
    * `create()` - invoked when a new instance of a component should be created
    * `update()` - invoked when the arguments passed to a component change
    * `getContext()` - returns the object that should be
  */

    class CustomComponentManager {
      constructor(factory) {
        this.factory = factory;
        this.componentManagerDelegates = new WeakMap();
      }

      getDelegateFor(owner) {
        var { componentManagerDelegates } = this;
        var delegate = componentManagerDelegates.get(owner);

        if (delegate === undefined) {
          var { factory } = this;
          delegate = factory(owner);

          if (
            true &&
            /* DEBUG */
            !FROM_CAPABILITIES.has(delegate.capabilities)
          ) {
            // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
            throw new Error(
              `Custom component managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.13')\` (imported via \`import { capabilities } from '@ember/component';\`). Received: \`${JSON.stringify(
                delegate.capabilities,
              )}\` for: \`${delegate}\``,
            );
          }

          componentManagerDelegates.set(owner, delegate);
        }

        return delegate;
      }

      create(owner, definition, vmArgs) {
        var delegate = this.getDelegateFor(owner);
        var args = argsProxyFor(vmArgs.capture(), 'component');
        var component = delegate.createComponent(definition, args);
        return new CustomComponentState(component, delegate, args);
      }

      getDebugName(definition) {
        return typeof definition === 'function'
          ? definition.name
          : definition.toString();
      }

      update(bucket) {
        var { delegate } = bucket;

        if (hasUpdateHook(delegate)) {
          var { component, args } = bucket;
          delegate.updateComponent(component, args);
        }
      }

      didCreate(_ref2) {
        var { component, delegate } = _ref2;

        if (hasAsyncLifeCycleCallbacks(delegate)) {
          delegate.didCreateComponent(component);
        }
      }

      didUpdate(_ref3) {
        var { component, delegate } = _ref3;

        if (hasAsyncUpdateHook(delegate)) {
          delegate.didUpdateComponent(component);
        }
      }

      didRenderLayout() {}

      didUpdateLayout() {}

      getSelf(_ref4) {
        var { component, delegate } = _ref4;
        return (0, _reference.createConstRef)(
          delegate.getContext(component),
          'this',
        );
      }

      getDestroyable(bucket) {
        var { delegate } = bucket;

        if (hasDestructors(delegate)) {
          var { component } = bucket;
          (0, _destroyable.registerDestructor)(bucket, () =>
            delegate.destroyComponent(component),
          );
          return bucket;
        }

        return null;
      }

      getCapabilities() {
        return CAPABILITIES;
      }
    }
    /**
     * Stores internal state about a component instance after it's been created.
     */

    _exports.CustomComponentManager = CustomComponentManager;

    class CustomComponentState {
      constructor(component, delegate, args) {
        this.component = component;
        this.delegate = delegate;
        this.args = args;
      }
    }

    function modifierCapabilities(managerAPI, optionalFeatures) {
      if (optionalFeatures === void 0) {
        optionalFeatures = {};
      }

      if (
        true &&
        /* DEBUG */
        managerAPI !== '3.22'
      ) {
        throw new Error('Invalid modifier manager compatibility specified');
      }

      return buildCapabilities({
        disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking),
      });
    }
    /**
    The CustomModifierManager allows addons to provide custom modifier
    implementations that integrate seamlessly into Ember. This is accomplished
    through a delegate, registered with the custom modifier manager, which
    implements a set of hooks that determine modifier behavior.
    To create a custom modifier manager, instantiate a new CustomModifierManager
    class and pass the delegate as the first argument:
  
    ```js
    let manager = new CustomModifierManager({
      // ...delegate implementation...
    });
    ```
  
    ## Delegate Hooks
  
    Throughout the lifecycle of a modifier, the modifier manager will invoke
    delegate hooks that are responsible for surfacing those lifecycle changes to
    the end developer.
    * `createModifier()` - invoked when a new instance of a modifier should be created
    * `installModifier()` - invoked when the modifier is installed on the element
    * `updateModifier()` - invoked when the arguments passed to a modifier change
    * `destroyModifier()` - invoked when the modifier is about to be destroyed
  */

    class CustomModifierManager {
      constructor(factory) {
        this.factory = factory;
        this.componentManagerDelegates = new WeakMap();
      }

      getDelegateFor(owner) {
        var { componentManagerDelegates } = this;
        var delegate = componentManagerDelegates.get(owner);

        if (delegate === undefined) {
          var { factory } = this;
          delegate = factory(owner);

          if (
            true &&
            /* DEBUG */
            !FROM_CAPABILITIES.has(delegate.capabilities)
          ) {
            // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
            throw new Error(
              `Custom modifier managers must have a \`capabilities\` property that is the result of calling the \`capabilities('3.22')\` (imported via \`import { capabilities } from '@ember/modifier';\`). Received: \`${JSON.stringify(
                delegate.capabilities,
              )}\` for: \`${delegate}\``,
            );
          }

          componentManagerDelegates.set(owner, delegate);
        }

        return delegate;
      }

      create(owner, element, definition, capturedArgs) {
        var delegate = this.getDelegateFor(owner);
        var args = argsProxyFor(capturedArgs, 'modifier');
        var instance = delegate.createModifier(definition, args);
        var tag = (0, _validator.createUpdatableTag)();
        var state;
        state = {
          tag,
          element,
          delegate,
          args,
          modifier: instance,
        };

        if (
          true
          /* DEBUG */
        ) {
          state.debugName =
            typeof definition === 'function'
              ? definition.name
              : definition.toString();
        }

        (0, _destroyable.registerDestructor)(state, () =>
          delegate.destroyModifier(instance, args),
        );
        return state;
      }

      getDebugName(_ref5) {
        var { debugName } = _ref5;
        return debugName;
      }

      getTag(_ref6) {
        var { tag } = _ref6;
        return tag;
      }

      install(_ref7) {
        var { element, args, modifier, delegate } = _ref7;
        var { capabilities } = delegate;

        if (capabilities.disableAutoTracking === true) {
          (0, _validator.untrack)(() =>
            delegate.installModifier(modifier, element, args),
          );
        } else {
          delegate.installModifier(modifier, element, args);
        }
      }

      update(_ref8) {
        var { args, modifier, delegate } = _ref8;
        var { capabilities } = delegate;

        if (capabilities.disableAutoTracking === true) {
          (0, _validator.untrack)(() =>
            delegate.updateModifier(modifier, args),
          );
        } else {
          delegate.updateModifier(modifier, args);
        }
      }

      getDestroyable(state) {
        return state;
      }
    }

    _exports.CustomModifierManager = CustomModifierManager;

    function setComponentManager(factory, obj) {
      return setInternalComponentManager(
        new CustomComponentManager(factory),
        obj,
      );
    }

    function setModifierManager(factory, obj) {
      return setInternalModifierManager(
        new CustomModifierManager(factory),
        obj,
      );
    }

    function setHelperManager(factory, obj) {
      return setInternalHelperManager(new CustomHelperManager(factory), obj);
    }

    var TEMPLATES = new WeakMap();
    var getPrototypeOf$1 = Object.getPrototypeOf;

    function setComponentTemplate(factory, obj) {
      if (
        true &&
        /* DEBUG */
        !(
          obj !== null &&
          (typeof obj === 'object' || typeof obj === 'function')
        )
      ) {
        throw new Error(
          `Cannot call \`setComponentTemplate\` on \`${(0, _util.debugToString)(
            obj,
          )}\``,
        );
      }

      if (
        true &&
        /* DEBUG */
        TEMPLATES.has(obj)
      ) {
        throw new Error(
          `Cannot call \`setComponentTemplate\` multiple times on the same class (\`${(0,
          _util.debugToString)(obj)}\`)`,
        );
      }

      TEMPLATES.set(obj, factory);
      return obj;
    }

    function getComponentTemplate(obj) {
      var pointer = obj;

      while (pointer !== null) {
        var template = TEMPLATES.get(pointer);

        if (template !== undefined) {
          return template;
        }

        pointer = getPrototypeOf$1(pointer);
      }

      return undefined;
    }
  });
  define('@glimmer/node', [
    'exports',
    '@glimmer/runtime',
    '@simple-dom/document',
  ], function (_exports, _runtime, _document) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.NodeDOMTreeConstruction = void 0;
    _exports.serializeBuilder = serializeBuilder;

    class NodeDOMTreeConstruction extends _runtime.DOMTreeConstruction {
      constructor(doc) {
        super(doc || (0, _document.default)());
      } // override to prevent usage of `this.document` until after the constructor

      setupUselessElement() {}

      insertHTMLBefore(parent, reference, html) {
        var raw = this.document.createRawHTMLSection(html);
        parent.insertBefore(raw, reference);
        return new _runtime.ConcreteBounds(parent, raw, raw);
      } // override to avoid SVG detection/work when in node (this is not needed in SSR)

      createElement(tag) {
        return this.document.createElement(tag);
      } // override to avoid namespace shenanigans when in node (this is not needed in SSR)

      setAttribute(element, name, value) {
        element.setAttribute(name, value);
      }
    }

    _exports.NodeDOMTreeConstruction = NodeDOMTreeConstruction;
    var TEXT_NODE = 3;
    var NEEDS_EXTRA_CLOSE = new WeakMap();

    function currentNode(cursor) {
      var { element, nextSibling } = cursor;

      if (nextSibling === null) {
        return element.lastChild;
      } else {
        return nextSibling.previousSibling;
      }
    }

    class SerializeBuilder extends _runtime.NewElementBuilder {
      constructor() {
        super(...arguments);
        this.serializeBlockDepth = 0;
      }

      __openBlock() {
        var { tagName } = this.element;

        if (
          tagName !== 'TITLE' &&
          tagName !== 'SCRIPT' &&
          tagName !== 'STYLE'
        ) {
          var depth = this.serializeBlockDepth++;

          this.__appendComment(`%+b:${depth}%`);
        }

        super.__openBlock();
      }

      __closeBlock() {
        var { tagName } = this.element;

        super.__closeBlock();

        if (
          tagName !== 'TITLE' &&
          tagName !== 'SCRIPT' &&
          tagName !== 'STYLE'
        ) {
          var depth = --this.serializeBlockDepth;

          this.__appendComment(`%-b:${depth}%`);
        }
      }

      __appendHTML(html) {
        var { tagName } = this.element;

        if (
          tagName === 'TITLE' ||
          tagName === 'SCRIPT' ||
          tagName === 'STYLE'
        ) {
          return super.__appendHTML(html);
        } // Do we need to run the html tokenizer here?

        var first = this.__appendComment('%glmr%');

        if (tagName === 'TABLE') {
          var openIndex = html.indexOf('<');

          if (openIndex > -1) {
            var tr = html.slice(openIndex + 1, openIndex + 3);

            if (tr === 'tr') {
              html = `<tbody>${html}</tbody>`;
            }
          }
        }

        if (html === '') {
          this.__appendComment('% %');
        } else {
          super.__appendHTML(html);
        }

        var last = this.__appendComment('%glmr%');

        return new _runtime.ConcreteBounds(this.element, first, last);
      }

      __appendText(string) {
        var { tagName } = this.element;
        var current = currentNode(this);

        if (
          tagName === 'TITLE' ||
          tagName === 'SCRIPT' ||
          tagName === 'STYLE'
        ) {
          return super.__appendText(string);
        } else if (string === '') {
          return this.__appendComment('% %');
        } else if (current && current.nodeType === TEXT_NODE) {
          this.__appendComment('%|%');
        }

        return super.__appendText(string);
      }

      closeElement() {
        if (NEEDS_EXTRA_CLOSE.has(this.element)) {
          NEEDS_EXTRA_CLOSE.delete(this.element);
          super.closeElement();
        }

        return super.closeElement();
      }

      openElement(tag) {
        if (tag === 'tr') {
          if (
            this.element.tagName !== 'TBODY' &&
            this.element.tagName !== 'THEAD' &&
            this.element.tagName !== 'TFOOT'
          ) {
            this.openElement('tbody'); // This prevents the closeBlock comment from being re-parented
            // under the auto inserted tbody. Rehydration builder needs to
            // account for the insertion since it is injected here and not
            // really in the template.

            NEEDS_EXTRA_CLOSE.set(this.constructing, true);
            this.flushElement(null);
          }
        }

        return super.openElement(tag);
      }

      pushRemoteElement(element, cursorId, insertBefore) {
        if (insertBefore === void 0) {
          insertBefore = null;
        }

        var { dom } = this;
        var script = dom.createElement('script');
        script.setAttribute('glmr', cursorId);
        dom.insertBefore(element, script, insertBefore);
        return super.pushRemoteElement(element, cursorId, insertBefore);
      }
    }

    function serializeBuilder(env, cursor) {
      return SerializeBuilder.forInitialRender(env, cursor);
    }
  });
  define('@glimmer/opcode-compiler', [
    'exports',
    '@glimmer/util',
    '@glimmer/vm',
    '@glimmer/global-context',
    '@glimmer/manager',
    '@glimmer/encoder',
  ], function (_exports, _util, _vm, _globalContext, _manager, _encoder) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.WrappedBuilder = _exports.StdLib = _exports.MINIMAL_CAPABILITIES = _exports.EMPTY_BLOCKS = _exports.DEFAULT_CAPABILITIES = _exports.CompileTimeCompilationContextImpl = void 0;
    _exports.compilable = compilable;
    _exports.compileStatements = compileStatements;
    _exports.compileStd = compileStd;
    _exports.debugCompiler = void 0;
    _exports.invokeStaticBlock = InvokeStaticBlock;
    _exports.invokeStaticBlockWithStack = InvokeStaticBlockWithStack;
    _exports.meta = meta;
    _exports.programCompilationContext = programCompilationContext;
    _exports.templateCacheCounters = void 0;
    _exports.templateCompilationContext = templateCompilationContext;
    _exports.templateFactory = templateFactory;

    class NamedBlocksImpl {
      constructor(blocks) {
        this.blocks = blocks;
        this.names = blocks ? Object.keys(blocks) : [];
      }

      get(name) {
        if (!this.blocks) return null;
        return this.blocks[name] || null;
      }

      has(name) {
        var { blocks } = this;
        return blocks !== null && name in blocks;
      }

      with(name, block) {
        var { blocks } = this;

        if (blocks) {
          return new NamedBlocksImpl(
            (0, _util.assign)({}, blocks, {
              [name]: block,
            }),
          );
        } else {
          return new NamedBlocksImpl({
            [name]: block,
          });
        }
      }

      get hasAny() {
        return this.blocks !== null;
      }
    }

    var EMPTY_BLOCKS = new NamedBlocksImpl(null);
    _exports.EMPTY_BLOCKS = EMPTY_BLOCKS;

    function namedBlocks(blocks) {
      if (blocks === null) {
        return EMPTY_BLOCKS;
      }

      var out = (0, _util.dict)();
      var [keys, values] = blocks;

      for (var i = 0; i < keys.length; i++) {
        out[keys[i]] = values[i];
      }

      return new NamedBlocksImpl(out);
    }

    function labelOperand(value) {
      return {
        type: 1,
        /* Label */
        value,
      };
    }

    function evalSymbolsOperand() {
      return {
        type: 3,
        /* EvalSymbols */
        value: undefined,
      };
    }

    function isStrictMode() {
      return {
        type: 2,
        /* IsStrictMode */
        value: undefined,
      };
    }

    function blockOperand(value) {
      return {
        type: 4,
        /* Block */
        value,
      };
    }

    function stdlibOperand(value) {
      return {
        type: 5,
        /* StdLib */
        value,
      };
    }

    function nonSmallIntOperand(value) {
      return {
        type: 6,
        /* NonSmallInt */
        value,
      };
    }

    function symbolTableOperand(value) {
      return {
        type: 7,
        /* SymbolTable */
        value,
      };
    }

    function layoutOperand(value) {
      return {
        type: 8,
        /* Layout */
        value,
      };
    }

    function isGetLikeTuple(opcode) {
      return Array.isArray(opcode) && opcode.length === 2;
    }

    function makeResolutionTypeVerifier(typeToVerify) {
      return (opcode) => {
        if (!isGetLikeTuple(opcode)) return false;
        var type = opcode[0];
        return (
          type === 31 ||
          /* GetStrictFree */
          type === 32 ||
          /* GetTemplateSymbol */
          type === typeToVerify
        );
      };
    }

    var isGetFreeComponent = makeResolutionTypeVerifier(
      39,
      /* GetFreeAsComponentHead */
    );
    var isGetFreeModifier = makeResolutionTypeVerifier(
      38,
      /* GetFreeAsModifierHead */
    );
    var isGetFreeHelper = makeResolutionTypeVerifier(
      37,
      /* GetFreeAsHelperHead */
    );
    var isGetFreeComponentOrHelper = makeResolutionTypeVerifier(
      35,
      /* GetFreeAsComponentOrHelperHead */
    );
    var isGetFreeOptionalComponentOrHelper = makeResolutionTypeVerifier(
      34,
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
    );

    function assertResolverInvariants(meta) {
      if (
        true
        /* DEBUG */
      ) {
        if (!meta.upvars) {
          throw new Error(
            'Attempted to resolve a component, helper, or modifier, but no free vars were found',
          );
        }

        if (!meta.owner) {
          throw new Error(
            'Attempted to resolve a component, helper, or modifier, but no owner was associated with the template it was being resolved from',
          );
        }
      }

      return meta;
    }
    /**
     * <Foo/>
     * <Foo></Foo>
     * <Foo @arg={{true}} />
     */

    function resolveComponent(resolver, constants, meta, _ref) {
      var [, expr, then] = _ref;
      var type = expr[0];

      if (
        true &&
        /* DEBUG */
        expr[0] === 31
        /* GetStrictFree */
      ) {
        throw new Error(
          `Attempted to resolve a component in a strict mode template, but that value was not in scope: ${
            meta.upvars[expr[1]]
          }`,
        );
      }

      if (
        type === 32
        /* GetTemplateSymbol */
      ) {
        var { scopeValues, owner } = meta;
        var definition = scopeValues[expr[1]];
        then(constants.component(definition, owner));
      } else {
        var { upvars, owner: _owner } = assertResolverInvariants(meta);
        var name = upvars[expr[1]];

        var _definition = resolver.lookupComponent(name, _owner);

        if (
          true &&
          /* DEBUG */
          (typeof _definition !== 'object' || _definition === null)
        ) {
          throw new Error(
            `Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`,
          );
        }

        then(constants.resolvedComponent(_definition, name));
      }
    }
    /**
     * (helper)
     * (helper arg)
     */

    function resolveHelper(resolver, constants, meta, _ref2) {
      var [, expr, then] = _ref2;
      var type = expr[0];

      if (
        type === 32
        /* GetTemplateSymbol */
      ) {
        var { scopeValues } = meta;
        var definition = scopeValues[expr[1]];
        then(constants.helper(definition));
      } else if (
        type === 31
        /* GetStrictFree */
      ) {
        then(lookupBuiltInHelper(expr, resolver, meta, constants, 'helper'));
      } else {
        var { upvars, owner } = assertResolverInvariants(meta);
        var name = upvars[expr[1]];
        var helper = resolver.lookupHelper(name, owner);

        if (
          true &&
          /* DEBUG */
          helper === null
        ) {
          throw new Error(
            `Attempted to resolve \`${name}\`, which was expected to be a helper, but nothing was found.`,
          );
        }

        then(constants.helper(helper, name));
      }
    }
    /**
     * <div {{modifier}}/>
     * <div {{modifier arg}}/>
     * <Foo {{modifier}}/>
     */

    function resolveModifier(resolver, constants, meta, _ref3) {
      var [, expr, then] = _ref3;
      var type = expr[0];

      if (
        type === 32
        /* GetTemplateSymbol */
      ) {
        var { scopeValues } = meta;
        var definition = scopeValues[expr[1]];
        then(constants.modifier(definition));
      } else if (
        type === 31
        /* GetStrictFree */
      ) {
        var { upvars } = assertResolverInvariants(meta);
        var name = upvars[expr[1]];
        var modifier = resolver.lookupBuiltInModifier(name);

        if (
          true &&
          /* DEBUG */
          modifier === null
        ) {
          throw new Error(
            `Attempted to resolve a modifier in a strict mode template, but it was not in scope: ${name}`,
          );
        }

        then(constants.modifier(modifier, name));
      } else {
        var { upvars: _upvars, owner } = assertResolverInvariants(meta);
        var _name2 = _upvars[expr[1]];

        var _modifier = resolver.lookupModifier(_name2, owner);

        if (
          true &&
          /* DEBUG */
          _modifier === null
        ) {
          throw new Error(
            `Attempted to resolve \`${_name2}\`, which was expected to be a modifier, but nothing was found.`,
          );
        }

        then(constants.modifier(_modifier, _name2));
      }
    }
    /**
     * {{component-or-helper arg}}
     */

    function resolveComponentOrHelper(resolver, constants, meta, _ref4) {
      var [, expr, { ifComponent, ifHelper }] = _ref4;
      var type = expr[0];

      if (
        type === 32
        /* GetTemplateSymbol */
      ) {
        var { scopeValues, owner } = meta;
        var definition = scopeValues[expr[1]];
        var component = constants.component(definition, owner, true);

        if (component !== null) {
          ifComponent(component);
          return;
        }

        var helper = constants.helper(definition, null, true);

        if (
          true &&
          /* DEBUG */
          helper === null
        ) {
          throw new Error(
            `Attempted to use a value as either a component or helper, but it did not have a component manager or helper manager associated with it. The value was: ${(0,
            _util.debugToString)(definition)}`,
          );
        }

        ifHelper(helper);
      } else if (
        type === 31
        /* GetStrictFree */
      ) {
        ifHelper(
          lookupBuiltInHelper(
            expr,
            resolver,
            meta,
            constants,
            'component or helper',
          ),
        );
      } else {
        var { upvars, owner: _owner2 } = assertResolverInvariants(meta);
        var name = upvars[expr[1]];

        var _definition2 = resolver.lookupComponent(name, _owner2);

        if (_definition2 !== null) {
          ifComponent(constants.resolvedComponent(_definition2, name));
        } else {
          var _helper = resolver.lookupHelper(name, _owner2);

          if (
            true &&
            /* DEBUG */
            _helper === null
          ) {
            throw new Error(
              `Attempted to resolve \`${name}\`, which was expected to be a component or helper, but nothing was found.`,
            );
          }

          ifHelper(constants.helper(_helper, name));
        }
      }
    }
    /**
     * <Foo @arg={{helper}}>
     */

    function resolveOptionalHelper(resolver, constants, meta, _ref5) {
      var [, expr, { ifHelper }] = _ref5;
      var { upvars, owner } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var helper = resolver.lookupHelper(name, owner);

      if (helper) {
        ifHelper(constants.helper(helper, name), name, meta.moduleName);
      }
    }
    /**
     * {{maybeHelperOrComponent}}
     */

    function resolveOptionalComponentOrHelper(
      resolver,
      constants,
      meta,
      _ref6,
    ) {
      var [, expr, { ifComponent, ifHelper, ifValue }] = _ref6;
      var type = expr[0];

      if (
        type === 32
        /* GetTemplateSymbol */
      ) {
        var { scopeValues, owner } = meta;
        var definition = scopeValues[expr[1]];

        if (
          typeof definition !== 'function' &&
          (typeof definition !== 'object' || definition === null)
        ) {
          // The value is not an object, so it can't be a component or helper.
          ifValue(constants.value(definition));
          return;
        }

        var component = constants.component(definition, owner, true);

        if (component !== null) {
          ifComponent(component);
          return;
        }

        var helper = constants.helper(definition, null, true);

        if (helper !== null) {
          ifHelper(helper);
          return;
        }

        ifValue(constants.value(definition));
      } else if (
        type === 31
        /* GetStrictFree */
      ) {
        ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants, 'value'));
      } else {
        var { upvars, owner: _owner3 } = assertResolverInvariants(meta);
        var name = upvars[expr[1]];

        var _definition3 = resolver.lookupComponent(name, _owner3);

        if (_definition3 !== null) {
          ifComponent(constants.resolvedComponent(_definition3, name));
          return;
        }

        var _helper2 = resolver.lookupHelper(name, _owner3);

        if (_helper2 !== null) {
          ifHelper(constants.helper(_helper2, name));
        }
      }
    }

    function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
      var { upvars } = assertResolverInvariants(meta);
      var name = upvars[expr[1]];
      var helper = resolver.lookupBuiltInHelper(name);

      if (
        true &&
        /* DEBUG */
        helper === null
      ) {
        // Keyword helper did not exist, which means that we're attempting to use a
        // value of some kind that is not in scope
        throw new Error(
          `Attempted to resolve a ${type} in a strict mode template, but that value was not in scope: ${
            meta.upvars[expr[1]]
          }`,
        );
      }

      return constants.helper(helper, name);
    }

    class Compilers {
      constructor() {
        this.names = {};
        this.funcs = [];
      }

      add(name, func) {
        this.names[name] = this.funcs.push(func) - 1;
      }

      compile(op, sexp) {
        var name = sexp[0];
        var index = this.names[name];
        var func = this.funcs[index];
        func(op, sexp);
      }
    }

    var EXPRESSIONS = new Compilers();
    EXPRESSIONS.add(
      29,
      /* Concat */
      (op, _ref7) => {
        var [, parts] = _ref7;

        for (var part of parts) {
          expr(op, part);
        }

        op(
          27,
          /* Concat */
          parts.length,
        );
      },
    );
    EXPRESSIONS.add(
      28,
      /* Call */
      (op, _ref8) => {
        var [, expression, positional, named] = _ref8;

        if (isGetFreeHelper(expression)) {
          op(
            1005,
            /* ResolveHelper */
            expression,
            (handle) => {
              Call(op, handle, positional, named);
            },
          );
        } else {
          expr(op, expression);
          CallDynamic(op, positional, named);
        }
      },
    );
    EXPRESSIONS.add(
      50,
      /* Curry */
      (op, _ref9) => {
        var [, expr$$1, type, positional, named] = _ref9;
        Curry(op, type, expr$$1, positional, named);
      },
    );
    EXPRESSIONS.add(
      30,
      /* GetSymbol */
      (op, _ref10) => {
        var [, sym, path] = _ref10;
        op(
          21,
          /* GetVariable */
          sym,
        );
        withPath(op, path);
      },
    );
    EXPRESSIONS.add(
      32,
      /* GetTemplateSymbol */
      (op, _ref11) => {
        var [, sym, path] = _ref11;
        op(
          1011,
          /* ResolveTemplateLocal */
          sym,
          (handle) => {
            op(
              29,
              /* ConstantReference */
              handle,
            );
            withPath(op, path);
          },
        );
      },
    );
    EXPRESSIONS.add(
      31,
      /* GetStrictFree */
      (op, _ref12) => {
        var [, sym, _path] = _ref12;
        op(
          1009,
          /* ResolveFree */
          sym,
          (_handle) => {
            // TODO: Implement in strict mode
          },
        );
      },
    );
    EXPRESSIONS.add(
      34,
      /* GetFreeAsComponentOrHelperHeadOrThisFallback */
      () => {
        // TODO: The logic for this opcode currently exists in STATEMENTS.Append, since
        // we want different wrapping logic depending on if we are invoking a component,
        // helper, or {{this}} fallback. Eventually we fix the opcodes so that we can
        // traverse the subexpression tree like normal in this location.
        throw new Error('unimplemented opcode');
      },
    );
    EXPRESSIONS.add(
      36,
      /* GetFreeAsHelperHeadOrThisFallback */
      (op, expr$$1) => {
        // <div id={{baz}}>
        op(
          1010,
          /* ResolveLocal */
          expr$$1[1],
          (_name) => {
            op(
              1006,
              /* ResolveOptionalHelper */
              expr$$1,
              {
                ifHelper: (handle) => {
                  Call(op, handle, null, null);
                },
              },
            );
          },
        );
      },
    );
    EXPRESSIONS.add(
      99,
      /* GetFreeAsDeprecatedHelperHeadOrThisFallback */
      (op, expr$$1) => {
        // <Foo @bar={{baz}}>
        op(
          1010,
          /* ResolveLocal */
          expr$$1[1],
          (_name) => {
            op(
              1006,
              /* ResolveOptionalHelper */
              expr$$1,
              {
                ifHelper: (handle, name, moduleName) => {
                  true &&
                    (0, _globalContext.assert)(
                      expr$$1[2] && expr$$1[2].length === 1,
                      '[BUG] Missing argument name',
                    );
                  var arg = expr$$1[2][0];
                  true &&
                    !false &&
                    (0, _globalContext.deprecate)(
                      `The \`${name}\` helper was used in the \`${moduleName}\` template as \`${arg}={{${name}}}\`. ` +
                        `This is ambigious between wanting the \`${arg}\` argument to be the \`${name}\` helper itself, ` +
                        `or the result of invoking the \`${name}\` helper (current behavior). ` +
                        `This implicit invocation behavior has been deprecated.\n\n` +
                        `Instead, please explicitly invoke the helper with parenthesis, i.e. \`${arg}={{(${name})}}\`.\n\n` +
                        `Note: the parenthesis are only required in this exact scenario where an ambiguity is present – where ` +
                        `\`${name}\` referes to a global helper (as opposed to a local variable), AND ` +
                        `the \`${name}\` helper invocation does not take any arguments, AND ` +
                        `this occurs in a named argument position of a component invocation.\n\n` +
                        `We expect this combination to be quite rare, as most helpers require at least one argument. ` +
                        `There is no need to refactor helper invocations in cases where this deprecation was not triggered.`,
                      false,
                      {
                        id: 'argument-less-helper-paren-less-invocation',
                      },
                    );
                  Call(op, handle, null, null);
                },
              },
            );
          },
        );
      },
    );

    function withPath(op, path) {
      if (path === undefined || path.length === 0) return;

      for (var i = 0; i < path.length; i++) {
        op(
          22,
          /* GetProperty */
          path[i],
        );
      }
    }

    EXPRESSIONS.add(
      27,
      /* Undefined */
      (op) => PushPrimitiveReference(op, undefined),
    );
    EXPRESSIONS.add(
      48,
      /* HasBlock */
      (op, _ref13) => {
        var [, block] = _ref13;
        expr(op, block);
        op(
          25,
          /* HasBlock */
        );
      },
    );
    EXPRESSIONS.add(
      49,
      /* HasBlockParams */
      (op, _ref14) => {
        var [, block] = _ref14;
        expr(op, block);
        op(
          24,
          /* SpreadBlock */
        );
        op(
          61,
          /* CompileBlock */
        );
        op(
          26,
          /* HasBlockParams */
        );
      },
    );
    EXPRESSIONS.add(
      52,
      /* IfInline */
      (op, _ref15) => {
        var [, condition, truthy, falsy] = _ref15;
        // Push in reverse order
        expr(op, falsy);
        expr(op, truthy);
        expr(op, condition);
        op(
          109,
          /* IfInline */
        );
      },
    );
    EXPRESSIONS.add(
      51,
      /* Not */
      (op, _ref16) => {
        var [, value] = _ref16;
        expr(op, value);
        op(
          110,
          /* Not */
        );
      },
    );
    EXPRESSIONS.add(
      53,
      /* GetDynamicVar */
      (op, _ref17) => {
        var [, expression] = _ref17;
        expr(op, expression);
        op(
          111,
          /* GetDynamicVar */
        );
      },
    );
    EXPRESSIONS.add(
      54,
      /* Log */
      (op, _ref18) => {
        var [, positional] = _ref18;
        op(
          0,
          /* PushFrame */
        );
        SimpleArgs(op, positional, null, false);
        op(
          112,
          /* Log */
        );
        op(
          1,
          /* PopFrame */
        );
        op(
          36,
          /* Fetch */
          _vm.$v0,
        );
      },
    );

    function expr(op, expression) {
      if (Array.isArray(expression)) {
        EXPRESSIONS.compile(op, expression);
      } else {
        PushPrimitive(op, expression);
        op(
          31,
          /* PrimitiveReference */
        );
      }
    }
    /**
     * Compile arguments, pushing an Arguments object onto the stack.
     *
     * @param args.params
     * @param args.hash
     * @param args.blocks
     * @param args.atNames
     */

    function CompileArgs(op, positional, named, blocks, atNames) {
      var blockNames = blocks.names;

      for (var i = 0; i < blockNames.length; i++) {
        PushYieldableBlock(op, blocks.get(blockNames[i]));
      }

      var count = CompilePositional(op, positional);
      var flags = count << 4;
      if (atNames) flags |= 0b1000;

      if (blocks) {
        flags |= 0b111;
      }

      var names = _util.EMPTY_ARRAY;

      if (named) {
        names = named[0];
        var val = named[1];

        for (var _i = 0; _i < val.length; _i++) {
          expr(op, val[_i]);
        }
      }

      op(
        82,
        /* PushArgs */
        names,
        blockNames,
        flags,
      );
    }

    function SimpleArgs(op, positional, named, atNames) {
      if (positional === null && named === null) {
        op(
          83,
          /* PushEmptyArgs */
        );
        return;
      }

      var count = CompilePositional(op, positional);
      var flags = count << 4;
      if (atNames) flags |= 0b1000;
      var names = _util.EMPTY_STRING_ARRAY;

      if (named) {
        names = named[0];
        var val = named[1];

        for (var i = 0; i < val.length; i++) {
          expr(op, val[i]);
        }
      }

      op(
        82,
        /* PushArgs */
        names,
        _util.EMPTY_STRING_ARRAY,
        flags,
      );
    }
    /**
     * Compile an optional list of positional arguments, which pushes each argument
     * onto the stack and returns the number of parameters compiled
     *
     * @param positional an optional list of positional arguments
     */

    function CompilePositional(op, positional) {
      if (positional === null) return 0;

      for (var i = 0; i < positional.length; i++) {
        expr(op, positional[i]);
      }

      return positional.length;
    }

    function meta(layout) {
      var _a, _b;

      var [, symbols, , upvars] = layout.block;
      return {
        evalSymbols: evalSymbols(layout),
        upvars: upvars,
        scopeValues:
          (_b =
            (_a = layout.scope) === null || _a === void 0
              ? void 0
              : _a.call(layout)) !== null && _b !== void 0
            ? _b
            : null,
        isStrictMode: layout.isStrictMode,
        moduleName: layout.moduleName,
        owner: layout.owner,
        size: symbols.length,
      };
    }

    function evalSymbols(layout) {
      var { block } = layout;
      var [, symbols, hasEval] = block;
      return hasEval ? symbols : null;
    }
    /**
     * Push a reference onto the stack corresponding to a statically known primitive
     * @param value A JavaScript primitive (undefined, null, boolean, number or string)
     */

    function PushPrimitiveReference(op, value) {
      PushPrimitive(op, value);
      op(
        31,
        /* PrimitiveReference */
      );
    }
    /**
     * Push an encoded representation of a JavaScript primitive on the stack
     *
     * @param value A JavaScript primitive (undefined, null, boolean, number or string)
     */

    function PushPrimitive(op, primitive) {
      var p = primitive;

      if (typeof p === 'number') {
        p = (0, _util.isSmallInt)(p)
          ? (0, _util.encodeImmediate)(p)
          : nonSmallIntOperand(p);
      }

      op(
        30,
        /* Primitive */
        p,
      );
    }
    /**
     * Invoke a foreign function (a "helper") based on a statically known handle
     *
     * @param op The op creation function
     * @param handle A handle
     * @param positional An optional list of expressions to compile
     * @param named An optional list of named arguments (name + expression) to compile
     */

    function Call(op, handle, positional, named) {
      op(
        0,
        /* PushFrame */
      );
      SimpleArgs(op, positional, named, false);
      op(
        16,
        /* Helper */
        handle,
      );
      op(
        1,
        /* PopFrame */
      );
      op(
        36,
        /* Fetch */
        _vm.$v0,
      );
    }
    /**
     * Invoke a foreign function (a "helper") based on a dynamically loaded definition
     *
     * @param op The op creation function
     * @param positional An optional list of expressions to compile
     * @param named An optional list of named arguments (name + expression) to compile
     */

    function CallDynamic(op, positional, named, append) {
      op(
        0,
        /* PushFrame */
      );
      SimpleArgs(op, positional, named, false);
      op(
        33,
        /* Dup */
        _vm.$fp,
        1,
      );
      op(
        107,
        /* DynamicHelper */
      );

      if (append) {
        op(
          36,
          /* Fetch */
          _vm.$v0,
        );
        append();
        op(
          1,
          /* PopFrame */
        );
        op(
          34,
          /* Pop */
          1,
        );
      } else {
        op(
          1,
          /* PopFrame */
        );
        op(
          34,
          /* Pop */
          1,
        );
        op(
          36,
          /* Fetch */
          _vm.$v0,
        );
      }
    }
    /**
     * Evaluate statements in the context of new dynamic scope entries. Move entries from the
     * stack into named entries in the dynamic scope, then evaluate the statements, then pop
     * the dynamic scope
     *
     * @param names a list of dynamic scope names
     * @param block a function that returns a list of statements to evaluate
     */

    function DynamicScope(op, names, block) {
      op(
        59,
        /* PushDynamicScope */
      );
      op(
        58,
        /* BindDynamicScope */
        names,
      );
      block();
      op(
        60,
        /* PopDynamicScope */
      );
    }

    function Curry(op, type, definition, positional, named) {
      op(
        0,
        /* PushFrame */
      );
      SimpleArgs(op, positional, named, false);
      op(
        86,
        /* CaptureArgs */
      );
      expr(op, definition);
      op(
        77,
        /* Curry */
        type,
        isStrictMode(),
      );
      op(
        1,
        /* PopFrame */
      );
      op(
        36,
        /* Fetch */
        _vm.$v0,
      );
    }
    /**
     * Yield to a block located at a particular symbol location.
     *
     * @param to the symbol containing the block to yield to
     * @param params optional block parameters to yield to the block
     */

    function YieldBlock(op, to, positional) {
      SimpleArgs(op, positional, null, true);
      op(
        23,
        /* GetBlock */
        to,
      );
      op(
        24,
        /* SpreadBlock */
      );
      op(
        61,
        /* CompileBlock */
      );
      op(
        64,
        /* InvokeYield */
      );
      op(
        40,
        /* PopScope */
      );
      op(
        1,
        /* PopFrame */
      );
    }
    /**
     * Push an (optional) yieldable block onto the stack. The yieldable block must be known
     * statically at compile time.
     *
     * @param block An optional Compilable block
     */

    function PushYieldableBlock(op, block) {
      PushSymbolTable(op, block && block[1]);
      op(
        62,
        /* PushBlockScope */
      );
      PushCompilable(op, block);
    }
    /**
     * Invoke a block that is known statically at compile time.
     *
     * @param block a Compilable block
     */

    function InvokeStaticBlock(op, block) {
      op(
        0,
        /* PushFrame */
      );
      PushCompilable(op, block);
      op(
        61,
        /* CompileBlock */
      );
      op(
        2,
        /* InvokeVirtual */
      );
      op(
        1,
        /* PopFrame */
      );
    }
    /**
     * Invoke a static block, preserving some number of stack entries for use in
     * updating.
     *
     * @param block A compilable block
     * @param callerCount A number of stack entries to preserve
     */

    function InvokeStaticBlockWithStack(op, block, callerCount) {
      var parameters = block[1];
      var calleeCount = parameters.length;
      var count = Math.min(callerCount, calleeCount);

      if (count === 0) {
        InvokeStaticBlock(op, block);
        return;
      }

      op(
        0,
        /* PushFrame */
      );

      if (count) {
        op(
          39,
          /* ChildScope */
        );

        for (var i = 0; i < count; i++) {
          op(
            33,
            /* Dup */
            _vm.$fp,
            callerCount - i,
          );
          op(
            19,
            /* SetVariable */
            parameters[i],
          );
        }
      }

      PushCompilable(op, block);
      op(
        61,
        /* CompileBlock */
      );
      op(
        2,
        /* InvokeVirtual */
      );

      if (count) {
        op(
          40,
          /* PopScope */
        );
      }

      op(
        1,
        /* PopFrame */
      );
    }

    function PushSymbolTable(op, parameters) {
      if (parameters !== null) {
        op(
          63,
          /* PushSymbolTable */
          symbolTableOperand({
            parameters,
          }),
        );
      } else {
        PushPrimitive(op, null);
      }
    }

    function PushCompilable(op, _block) {
      if (_block === null) {
        PushPrimitive(op, null);
      } else {
        op(
          28,
          /* Constant */
          blockOperand(_block),
        );
      }
    }

    function SwitchCases(op, bootstrap, callback) {
      // Setup the switch DSL
      var clauses = [];
      var count = 0;

      function when(match, callback) {
        clauses.push({
          match,
          callback,
          label: `CLAUSE${count++}`,
        });
      } // Call the callback

      callback(when); // Emit the opcodes for the switch

      op(
        69,
        /* Enter */
        1,
      );
      bootstrap();
      op(
        1001,
        /* StartLabels */
      ); // First, emit the jump opcodes. We don't need a jump for the last
      // opcode, since it bleeds directly into its clause.

      for (var clause of clauses.slice(0, -1)) {
        op(
          67,
          /* JumpEq */
          labelOperand(clause.label),
          clause.match,
        );
      } // Enumerate the clauses in reverse order. Earlier matches will
      // require fewer checks.

      for (var i = clauses.length - 1; i >= 0; i--) {
        var _clause = clauses[i];
        op(
          1000,
          /* Label */
          _clause.label,
        );
        op(
          34,
          /* Pop */
          1,
        );

        _clause.callback(); // The first match is special: it is placed directly before the END
        // label, so no additional jump is needed at the end of it.

        if (i !== 0) {
          op(
            4,
            /* Jump */
            labelOperand('END'),
          );
        }
      }

      op(
        1000,
        /* Label */
        'END',
      );
      op(
        1002,
        /* StopLabels */
      );
      op(
        70,
        /* Exit */
      );
    }
    /**
     * A convenience for pushing some arguments on the stack and
     * running some code if the code needs to be re-executed during
     * updating execution if some of the arguments have changed.
     *
     * # Initial Execution
     *
     * The `args` function should push zero or more arguments onto
     * the stack and return the number of arguments pushed.
     *
     * The `body` function provides the instructions to execute both
     * during initial execution and during updating execution.
     *
     * Internally, this function starts by pushing a new frame, so
     * that the body can return and sets the return point ($ra) to
     * the ENDINITIAL label.
     *
     * It then executes the `args` function, which adds instructions
     * responsible for pushing the arguments for the block to the
     * stack. These arguments will be restored to the stack before
     * updating execution.
     *
     * Next, it adds the Enter opcode, which marks the current position
     * in the DOM, and remembers the current $pc (the next instruction)
     * as the first instruction to execute during updating execution.
     *
     * Next, it runs `body`, which adds the opcodes that should
     * execute both during initial execution and during updating execution.
     * If the `body` wishes to finish early, it should Jump to the
     * `FINALLY` label.
     *
     * Next, it adds the FINALLY label, followed by:
     *
     * - the Exit opcode, which finalizes the marked DOM started by the
     *   Enter opcode.
     * - the Return opcode, which returns to the current return point
     *   ($ra).
     *
     * Finally, it adds the ENDINITIAL label followed by the PopFrame
     * instruction, which restores $fp, $sp and $ra.
     *
     * # Updating Execution
     *
     * Updating execution for this `replayable` occurs if the `body` added an
     * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
     *
     * If, during updating executon, the assertion fails, the initial VM is
     * restored, and the stored arguments are pushed onto the stack. The DOM
     * between the starting and ending markers is cleared, and the VM's cursor
     * is set to the area just cleared.
     *
     * The return point ($ra) is set to -1, the exit instruction.
     *
     * Finally, the $pc is set to to the instruction saved off by the
     * Enter opcode during initial execution, and execution proceeds as
     * usual.
     *
     * The only difference is that when a `Return` instruction is
     * encountered, the program jumps to -1 rather than the END label,
     * and the PopFrame opcode is not needed.
     */

    function Replayable(op, args, body) {
      // Start a new label frame, to give END and RETURN
      // a unique meaning.
      op(
        1001,
        /* StartLabels */
      );
      op(
        0,
        /* PushFrame */
      ); // If the body invokes a block, its return will return to
      // END. Otherwise, the return in RETURN will return to END.

      op(
        6,
        /* ReturnTo */
        labelOperand('ENDINITIAL'),
      ); // Push the arguments onto the stack. The args() function
      // tells us how many stack elements to retain for re-execution
      // when updating.

      var count = args(); // Start a new updating closure, remembering `count` elements
      // from the stack. Everything after this point, and before END,
      // will execute both initially and to update the block.
      //
      // The enter and exit opcodes also track the area of the DOM
      // associated with this block. If an assertion inside the block
      // fails (for example, the test value changes from true to false
      // in an #if), the DOM is cleared and the program is re-executed,
      // restoring `count` elements to the stack and executing the
      // instructions between the enter and exit.

      op(
        69,
        /* Enter */
        count,
      ); // Evaluate the body of the block. The body of the block may
      // return, which will jump execution to END during initial
      // execution, and exit the updating routine.

      body(); // All execution paths in the body should run the FINALLY once
      // they are done. It is executed both during initial execution
      // and during updating execution.

      op(
        1000,
        /* Label */
        'FINALLY',
      ); // Finalize the DOM.

      op(
        70,
        /* Exit */
      ); // In initial execution, this is a noop: it returns to the
      // immediately following opcode. In updating execution, this
      // exits the updating routine.

      op(
        5,
        /* Return */
      ); // Cleanup code for the block. Runs on initial execution
      // but not on updating.

      op(
        1000,
        /* Label */
        'ENDINITIAL',
      );
      op(
        1,
        /* PopFrame */
      );
      op(
        1002,
        /* StopLabels */
      );
    }
    /**
     * A specialized version of the `replayable` convenience that allows the
     * caller to provide different code based upon whether the item at
     * the top of the stack is true or false.
     *
     * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
     *
     * During the initial execution, a `return` will continue execution
     * in the cleanup code, which finalizes the current DOM block and pops
     * the current frame.
     *
     * During the updating execution, a `return` will exit the updating
     * routine, as it can reuse the DOM block and is always only a single
     * frame deep.
     */

    function ReplayableIf(op, args, ifTrue, ifFalse) {
      return Replayable(op, args, () => {
        // If the conditional is false, jump to the ELSE label.
        op(
          66,
          /* JumpUnless */
          labelOperand('ELSE'),
        ); // Otherwise, execute the code associated with the true branch.

        ifTrue(); // We're done, so return. In the initial execution, this runs
        // the cleanup code. In the updating VM, it exits the updating
        // routine.

        op(
          4,
          /* Jump */
          labelOperand('FINALLY'),
        );
        op(
          1000,
          /* Label */
          'ELSE',
        ); // If the conditional is false, and code associatied ith the
        // false branch was provided, execute it. If there was no code
        // associated with the false branch, jumping to the else statement
        // has no other behavior.

        if (ifFalse !== undefined) {
          ifFalse();
        }
      });
    }

    var ATTRS_BLOCK = '&attrs';

    function InvokeComponent(
      op,
      component,
      _elementBlock,
      positional,
      named,
      _blocks,
    ) {
      var { compilable, capabilities, handle } = component;
      var elementBlock = _elementBlock ? [_elementBlock, []] : null;
      var blocks =
        Array.isArray(_blocks) || _blocks === null
          ? namedBlocks(_blocks)
          : _blocks;

      if (compilable) {
        op(
          78,
          /* PushComponentDefinition */
          handle,
        );
        InvokeStaticComponent(op, {
          capabilities: capabilities,
          layout: compilable,
          elementBlock,
          positional,
          named,
          blocks,
        });
      } else {
        op(
          78,
          /* PushComponentDefinition */
          handle,
        );
        InvokeNonStaticComponent(op, {
          capabilities: capabilities,
          elementBlock,
          positional,
          named,
          atNames: true,
          blocks,
        });
      }
    }

    function InvokeDynamicComponent(
      op,
      definition,
      _elementBlock,
      positional,
      named,
      _blocks,
      atNames,
      curried,
    ) {
      var elementBlock = _elementBlock ? [_elementBlock, []] : null;
      var blocks =
        Array.isArray(_blocks) || _blocks === null
          ? namedBlocks(_blocks)
          : _blocks;
      Replayable(
        op,
        () => {
          expr(op, definition);
          op(
            33,
            /* Dup */
            _vm.$sp,
            0,
          );
          return 2;
        },
        () => {
          op(
            66,
            /* JumpUnless */
            labelOperand('ELSE'),
          );

          if (curried) {
            op(
              81,
              /* ResolveCurriedComponent */
            );
          } else {
            op(
              80,
              /* ResolveDynamicComponent */
              isStrictMode(),
            );
          }

          op(
            79,
            /* PushDynamicComponentInstance */
          );
          InvokeNonStaticComponent(op, {
            capabilities: true,
            elementBlock,
            positional,
            named,
            atNames,
            blocks,
          });
          op(
            1000,
            /* Label */
            'ELSE',
          );
        },
      );
    }

    function InvokeStaticComponent(op, _ref19) {
      var {
        capabilities,
        layout,
        elementBlock,
        positional,
        named,
        blocks,
      } = _ref19;
      var { symbolTable } = layout;
      var bailOut =
        symbolTable.hasEval ||
        (0, _manager.hasCapability)(
          capabilities,
          4,
          /* PrepareArgs */
        );

      if (bailOut) {
        InvokeNonStaticComponent(op, {
          capabilities,
          elementBlock,
          positional,
          named,
          atNames: true,
          blocks,
          layout,
        });
        return;
      }

      op(
        36,
        /* Fetch */
        _vm.$s0,
      );
      op(
        33,
        /* Dup */
        _vm.$sp,
        1,
      );
      op(
        35,
        /* Load */
        _vm.$s0,
      );
      op(
        0,
        /* PushFrame */
      ); // Setup arguments

      var { symbols } = symbolTable; // As we push values onto the stack, we store the symbols associated  with them
      // so that we can set them on the scope later on with SetVariable and SetBlock

      var blockSymbols = [];
      var argSymbols = [];
      var argNames = []; // First we push the blocks onto the stack

      var blockNames = blocks.names; // Starting with the attrs block, if it exists and is referenced in the component

      if (elementBlock !== null) {
        var symbol = symbols.indexOf(ATTRS_BLOCK);

        if (symbol !== -1) {
          PushYieldableBlock(op, elementBlock);
          blockSymbols.push(symbol);
        }
      } // Followed by the other blocks, if they exist and are referenced in the component.
      // Also store the index of the associated symbol.

      for (var i = 0; i < blockNames.length; i++) {
        var name = blockNames[i];

        var _symbol = symbols.indexOf(`&${name}`);

        if (_symbol !== -1) {
          PushYieldableBlock(op, blocks.get(name));
          blockSymbols.push(_symbol);
        }
      } // Next up we have arguments. If the component has the `createArgs` capability,
      // then it wants access to the arguments in JavaScript. We can't know whether
      // or not an argument is used, so we have to give access to all of them.

      if (
        (0, _manager.hasCapability)(
          capabilities,
          8,
          /* CreateArgs */
        )
      ) {
        // First we push positional arguments
        var count = CompilePositional(op, positional); // setup the flags with the count of positionals, and to indicate that atNames
        // are used

        var flags = count << 4;
        flags |= 0b1000;
        var names = _util.EMPTY_STRING_ARRAY; // Next, if named args exist, push them all. If they have an associated symbol
        // in the invoked component (e.g. they are used within its template), we push
        // that symbol. If not, we still push the expression as it may be used, and
        // we store the symbol as -1 (this is used later).

        if (named !== null) {
          names = named[0];
          var val = named[1];

          for (var _i2 = 0; _i2 < val.length; _i2++) {
            var _symbol2 = symbols.indexOf(names[_i2]);

            expr(op, val[_i2]);
            argSymbols.push(_symbol2);
          }
        } // Finally, push the VM arguments themselves. These args won't need access
        // to blocks (they aren't accessible from userland anyways), so we push an
        // empty array instead of the actual block names.

        op(
          82,
          /* PushArgs */
          names,
          _util.EMPTY_STRING_ARRAY,
          flags,
        ); // And push an extra pop operation to remove the args before we begin setting
        // variables on the local context

        argSymbols.push(-1);
      } else if (named !== null) {
        // If the component does not have the `createArgs` capability, then the only
        // expressions we need to push onto the stack are those that are actually
        // referenced in the template of the invoked component (e.g. have symbols).
        var _names = named[0];
        var _val = named[1];

        for (var _i3 = 0; _i3 < _val.length; _i3++) {
          var _name3 = _names[_i3];

          var _symbol3 = symbols.indexOf(_name3);

          if (_symbol3 !== -1) {
            expr(op, _val[_i3]);
            argSymbols.push(_symbol3);
            argNames.push(_name3);
          }
        }
      }

      op(
        97,
        /* BeginComponentTransaction */
        _vm.$s0,
      );

      if (
        (0, _manager.hasCapability)(
          capabilities,
          64,
          /* DynamicScope */
        )
      ) {
        op(
          59,
          /* PushDynamicScope */
        );
      }

      if (
        (0, _manager.hasCapability)(
          capabilities,
          512,
          /* CreateInstance */
        )
      ) {
        op(
          87,
          /* CreateComponent */
          blocks.has('default') | 0,
          _vm.$s0,
        );
      }

      op(
        88,
        /* RegisterComponentDestructor */
        _vm.$s0,
      );

      if (
        (0, _manager.hasCapability)(
          capabilities,
          8,
          /* CreateArgs */
        )
      ) {
        op(
          90,
          /* GetComponentSelf */
          _vm.$s0,
        );
      } else {
        op(
          90,
          /* GetComponentSelf */
          _vm.$s0,
          argNames,
        );
      } // Setup the new root scope for the component

      op(
        37,
        /* RootScope */
        symbols.length + 1,
        Object.keys(blocks).length > 0 ? 1 : 0,
      ); // Pop the self reference off the stack and set it to the symbol for `this`
      // in the new scope. This is why all subsequent symbols are increased by one.

      op(
        19,
        /* SetVariable */
        0,
      ); // Going in reverse, now we pop the args/blocks off the stack, starting with
      // arguments, and assign them to their symbols in the new scope.

      for (var _i4 = argSymbols.length - 1; _i4 >= 0; _i4--) {
        var _symbol4 = argSymbols[_i4];

        if (_symbol4 === -1) {
          // The expression was not bound to a local symbol, it was only pushed to be
          // used with VM args in the javascript side
          op(
            34,
            /* Pop */
            1,
          );
        } else {
          op(
            19,
            /* SetVariable */
            _symbol4 + 1,
          );
        }
      } // if any positional params exist, pop them off the stack as well

      if (positional !== null) {
        op(
          34,
          /* Pop */
          positional.length,
        );
      } // Finish up by popping off and assigning blocks

      for (var _i5 = blockSymbols.length - 1; _i5 >= 0; _i5--) {
        var _symbol5 = blockSymbols[_i5];
        op(
          20,
          /* SetBlock */
          _symbol5 + 1,
        );
      }

      op(
        28,
        /* Constant */
        layoutOperand(layout),
      );
      op(
        61,
        /* CompileBlock */
      );
      op(
        2,
        /* InvokeVirtual */
      );
      op(
        100,
        /* DidRenderLayout */
        _vm.$s0,
      );
      op(
        1,
        /* PopFrame */
      );
      op(
        40,
        /* PopScope */
      );

      if (
        (0, _manager.hasCapability)(
          capabilities,
          64,
          /* DynamicScope */
        )
      ) {
        op(
          60,
          /* PopDynamicScope */
        );
      }

      op(
        98,
        /* CommitComponentTransaction */
      );
      op(
        35,
        /* Load */
        _vm.$s0,
      );
    }

    function InvokeNonStaticComponent(op, _ref20) {
      var {
        capabilities,
        elementBlock,
        positional,
        named,
        atNames,
        blocks: namedBlocks$$1,
        layout,
      } = _ref20;
      var bindableBlocks = !!namedBlocks$$1;
      var bindableAtNames =
        capabilities === true ||
        (0, _manager.hasCapability)(
          capabilities,
          4,
          /* PrepareArgs */
        ) ||
        !!(named && named[0].length !== 0);
      var blocks = namedBlocks$$1.with('attrs', elementBlock);
      op(
        36,
        /* Fetch */
        _vm.$s0,
      );
      op(
        33,
        /* Dup */
        _vm.$sp,
        1,
      );
      op(
        35,
        /* Load */
        _vm.$s0,
      );
      op(
        0,
        /* PushFrame */
      );
      CompileArgs(op, positional, named, blocks, atNames);
      op(
        85,
        /* PrepareArgs */
        _vm.$s0,
      );
      invokePreparedComponent(
        op,
        blocks.has('default'),
        bindableBlocks,
        bindableAtNames,
        () => {
          if (layout) {
            op(
              63,
              /* PushSymbolTable */
              symbolTableOperand(layout.symbolTable),
            );
            op(
              28,
              /* Constant */
              layoutOperand(layout),
            );
            op(
              61,
              /* CompileBlock */
            );
          } else {
            op(
              92,
              /* GetComponentLayout */
              _vm.$s0,
            );
          }

          op(
            95,
            /* PopulateLayout */
            _vm.$s0,
          );
        },
      );
      op(
        35,
        /* Load */
        _vm.$s0,
      );
    }

    function WrappedComponent(op, layout, attrsBlockNumber) {
      op(
        1001,
        /* StartLabels */
      );
      WithSavedRegister(op, _vm.$s1, () => {
        op(
          91,
          /* GetComponentTagName */
          _vm.$s0,
        );
        op(
          31,
          /* PrimitiveReference */
        );
        op(
          33,
          /* Dup */
          _vm.$sp,
          0,
        );
      });
      op(
        66,
        /* JumpUnless */
        labelOperand('BODY'),
      );
      op(
        36,
        /* Fetch */
        _vm.$s1,
      );
      op(
        89,
        /* PutComponentOperations */
      );
      op(
        49,
        /* OpenDynamicElement */
      );
      op(
        99,
        /* DidCreateElement */
        _vm.$s0,
      );
      YieldBlock(op, attrsBlockNumber, null);
      op(
        54,
        /* FlushElement */
      );
      op(
        1000,
        /* Label */
        'BODY',
      );
      InvokeStaticBlock(op, [layout.block[0], []]);
      op(
        36,
        /* Fetch */
        _vm.$s1,
      );
      op(
        66,
        /* JumpUnless */
        labelOperand('END'),
      );
      op(
        55,
        /* CloseElement */
      );
      op(
        1000,
        /* Label */
        'END',
      );
      op(
        35,
        /* Load */
        _vm.$s1,
      );
      op(
        1002,
        /* StopLabels */
      );
    }

    function invokePreparedComponent(
      op,
      hasBlock,
      bindableBlocks,
      bindableAtNames,
      populateLayout,
    ) {
      if (populateLayout === void 0) {
        populateLayout = null;
      }

      op(
        97,
        /* BeginComponentTransaction */
        _vm.$s0,
      );
      op(
        59,
        /* PushDynamicScope */
      );
      op(
        87,
        /* CreateComponent */
        hasBlock | 0,
        _vm.$s0,
      ); // this has to run after createComponent to allow
      // for late-bound layouts, but a caller is free
      // to populate the layout earlier if it wants to
      // and do nothing here.

      if (populateLayout) {
        populateLayout();
      }

      op(
        88,
        /* RegisterComponentDestructor */
        _vm.$s0,
      );
      op(
        90,
        /* GetComponentSelf */
        _vm.$s0,
      );
      op(
        38,
        /* VirtualRootScope */
        _vm.$s0,
      );
      op(
        19,
        /* SetVariable */
        0,
      );
      op(
        94,
        /* SetupForEval */
        _vm.$s0,
      );
      if (bindableAtNames)
        op(
          17,
          /* SetNamedVariables */
          _vm.$s0,
        );
      if (bindableBlocks)
        op(
          18,
          /* SetBlocks */
          _vm.$s0,
        );
      op(
        34,
        /* Pop */
        1,
      );
      op(
        96,
        /* InvokeComponentLayout */
        _vm.$s0,
      );
      op(
        100,
        /* DidRenderLayout */
        _vm.$s0,
      );
      op(
        1,
        /* PopFrame */
      );
      op(
        40,
        /* PopScope */
      );
      op(
        60,
        /* PopDynamicScope */
      );
      op(
        98,
        /* CommitComponentTransaction */
      );
    }

    function InvokeBareComponent(op) {
      op(
        36,
        /* Fetch */
        _vm.$s0,
      );
      op(
        33,
        /* Dup */
        _vm.$sp,
        1,
      );
      op(
        35,
        /* Load */
        _vm.$s0,
      );
      op(
        0,
        /* PushFrame */
      );
      op(
        83,
        /* PushEmptyArgs */
      );
      op(
        85,
        /* PrepareArgs */
        _vm.$s0,
      );
      invokePreparedComponent(op, false, false, true, () => {
        op(
          92,
          /* GetComponentLayout */
          _vm.$s0,
        );
        op(
          95,
          /* PopulateLayout */
          _vm.$s0,
        );
      });
      op(
        35,
        /* Load */
        _vm.$s0,
      );
    }

    function WithSavedRegister(op, register, block) {
      op(
        36,
        /* Fetch */
        register,
      );
      block();
      op(
        35,
        /* Load */
        register,
      );
    }

    class StdLib {
      constructor(
        main,
        trustingGuardedAppend,
        cautiousGuardedAppend,
        trustingNonDynamicAppend,
        cautiousNonDynamicAppend,
      ) {
        this.main = main;
        this.trustingGuardedAppend = trustingGuardedAppend;
        this.cautiousGuardedAppend = cautiousGuardedAppend;
        this.trustingNonDynamicAppend = trustingNonDynamicAppend;
        this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
      }

      get 'trusting-append'() {
        return this.trustingGuardedAppend;
      }

      get 'cautious-append'() {
        return this.cautiousGuardedAppend;
      }

      get 'trusting-non-dynamic-append'() {
        return this.trustingNonDynamicAppend;
      }

      get 'cautious-non-dynamic-append'() {
        return this.cautiousNonDynamicAppend;
      }

      getAppend(trusting) {
        return trusting
          ? this.trustingGuardedAppend
          : this.cautiousGuardedAppend;
      }
    }

    _exports.StdLib = StdLib;

    function programCompilationContext(artifacts, resolver) {
      return new CompileTimeCompilationContextImpl(artifacts, resolver);
    }

    function templateCompilationContext(program, meta) {
      var encoder = new EncoderImpl(program.heap, meta, program.stdlib);
      return {
        program,
        encoder,
        meta,
      };
    }

    var debugCompiler;
    _exports.debugCompiler = debugCompiler;
    var STATEMENTS = new Compilers();
    var INFLATE_ATTR_TABLE = [
      'class',
      'id',
      'value',
      'name',
      'type',
      'style',
      'href',
    ];
    var INFLATE_TAG_TABLE = ['div', 'span', 'p', 'a'];

    function inflateTagName(tagName) {
      return typeof tagName === 'string' ? tagName : INFLATE_TAG_TABLE[tagName];
    }

    function inflateAttrName(attrName) {
      return typeof attrName === 'string'
        ? attrName
        : INFLATE_ATTR_TABLE[attrName];
    }

    STATEMENTS.add(
      3,
      /* Comment */
      (op, sexp) =>
        op(
          42,
          /* Comment */
          sexp[1],
        ),
    );
    STATEMENTS.add(
      13,
      /* CloseElement */
      (op) =>
        op(
          55,
          /* CloseElement */
        ),
    );
    STATEMENTS.add(
      12,
      /* FlushElement */
      (op) =>
        op(
          54,
          /* FlushElement */
        ),
    );
    STATEMENTS.add(
      4,
      /* Modifier */
      (op, _ref21) => {
        var [, expression, positional, named] = _ref21;

        if (isGetFreeModifier(expression)) {
          op(
            1003,
            /* ResolveModifier */
            expression,
            (handle) => {
              op(
                0,
                /* PushFrame */
              );
              SimpleArgs(op, positional, named, false);
              op(
                57,
                /* Modifier */
                handle,
              );
              op(
                1,
                /* PopFrame */
              );
            },
          );
        } else {
          expr(op, expression);
          op(
            0,
            /* PushFrame */
          );
          SimpleArgs(op, positional, named, false);
          op(
            33,
            /* Dup */
            _vm.$fp,
            1,
          );
          op(
            108,
            /* DynamicModifier */
          );
          op(
            1,
            /* PopFrame */
          );
        }
      },
    );
    STATEMENTS.add(
      14,
      /* StaticAttr */
      (op, _ref22) => {
        var [, name, value, namespace] = _ref22;
        op(
          51,
          /* StaticAttr */
          inflateAttrName(name),
          value,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      24,
      /* StaticComponentAttr */
      (op, _ref23) => {
        var [, name, value, namespace] = _ref23;
        op(
          105,
          /* StaticComponentAttr */
          inflateAttrName(name),
          value,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      15,
      /* DynamicAttr */
      (op, _ref24) => {
        var [, name, value, namespace] = _ref24;
        expr(op, value);
        op(
          52,
          /* DynamicAttr */
          inflateAttrName(name),
          false,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      22,
      /* TrustingDynamicAttr */
      (op, _ref25) => {
        var [, name, value, namespace] = _ref25;
        expr(op, value);
        op(
          52,
          /* DynamicAttr */
          inflateAttrName(name),
          true,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      16,
      /* ComponentAttr */
      (op, _ref26) => {
        var [, name, value, namespace] = _ref26;
        expr(op, value);
        op(
          53,
          /* ComponentAttr */
          inflateAttrName(name),
          false,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      23,
      /* TrustingComponentAttr */
      (op, _ref27) => {
        var [, name, value, namespace] = _ref27;
        expr(op, value);
        op(
          53,
          /* ComponentAttr */
          inflateAttrName(name),
          true,
          namespace !== null && namespace !== void 0 ? namespace : null,
        );
      },
    );
    STATEMENTS.add(
      10,
      /* OpenElement */
      (op, _ref28) => {
        var [, tag] = _ref28;
        op(
          48,
          /* OpenElement */
          inflateTagName(tag),
        );
      },
    );
    STATEMENTS.add(
      11,
      /* OpenElementWithSplat */
      (op, _ref29) => {
        var [, tag] = _ref29;
        op(
          89,
          /* PutComponentOperations */
        );
        op(
          48,
          /* OpenElement */
          inflateTagName(tag),
        );
      },
    );
    STATEMENTS.add(
      8,
      /* Component */
      (op, _ref30) => {
        var [, expr$$1, elementBlock, named, blocks] = _ref30;

        if (isGetFreeComponent(expr$$1)) {
          op(
            1004,
            /* ResolveComponent */
            expr$$1,
            (component) => {
              InvokeComponent(op, component, elementBlock, null, named, blocks);
            },
          );
        } else {
          // otherwise, the component name was an expression, so resolve the expression
          // and invoke it as a dynamic component
          InvokeDynamicComponent(
            op,
            expr$$1,
            elementBlock,
            null,
            named,
            blocks,
            true,
            true,
          );
        }
      },
    );
    STATEMENTS.add(
      18,
      /* Yield */
      (op, _ref31) => {
        var [, to, params] = _ref31;
        return YieldBlock(op, to, params);
      },
    );
    STATEMENTS.add(
      17,
      /* AttrSplat */
      (op, _ref32) => {
        var [, to] = _ref32;
        return YieldBlock(op, to, null);
      },
    );
    STATEMENTS.add(
      26,
      /* Debugger */
      (op, _ref33) => {
        var [, evalInfo] = _ref33;
        return op(
          103,
          /* Debugger */
          evalSymbolsOperand(),
          evalInfo,
        );
      },
    );
    STATEMENTS.add(
      1,
      /* Append */
      (op, _ref34) => {
        var [, value] = _ref34;

        // Special case for static values
        if (!Array.isArray(value)) {
          op(
            41,
            /* Text */
            value === null || value === undefined ? '' : String(value),
          );
        } else if (isGetFreeOptionalComponentOrHelper(value)) {
          op(
            1008,
            /* ResolveOptionalComponentOrHelper */
            value,
            {
              ifComponent(component) {
                InvokeComponent(op, component, null, null, null, null);
              },

              ifHelper(handle) {
                op(
                  0,
                  /* PushFrame */
                );
                Call(op, handle, null, null);
                op(
                  3,
                  /* InvokeStatic */
                  stdlibOperand('cautious-non-dynamic-append'),
                );
                op(
                  1,
                  /* PopFrame */
                );
              },

              ifValue(handle) {
                op(
                  0,
                  /* PushFrame */
                );
                op(
                  29,
                  /* ConstantReference */
                  handle,
                );
                op(
                  3,
                  /* InvokeStatic */
                  stdlibOperand('cautious-non-dynamic-append'),
                );
                op(
                  1,
                  /* PopFrame */
                );
              },
            },
          );
        } else if (
          value[0] === 28
          /* Call */
        ) {
          var [, expression, positional, named] = value;

          if (isGetFreeComponentOrHelper(expression)) {
            op(
              1007,
              /* ResolveComponentOrHelper */
              expression,
              {
                ifComponent(component) {
                  InvokeComponent(
                    op,
                    component,
                    null,
                    positional,
                    hashToArgs(named),
                    null,
                  );
                },

                ifHelper(handle) {
                  op(
                    0,
                    /* PushFrame */
                  );
                  Call(op, handle, positional, named);
                  op(
                    3,
                    /* InvokeStatic */
                    stdlibOperand('cautious-non-dynamic-append'),
                  );
                  op(
                    1,
                    /* PopFrame */
                  );
                },
              },
            );
          } else {
            SwitchCases(
              op,
              () => {
                expr(op, expression);
                op(
                  106,
                  /* DynamicContentType */
                );
              },
              (when) => {
                when(
                  0,
                  /* Component */
                  () => {
                    op(
                      81,
                      /* ResolveCurriedComponent */
                    );
                    op(
                      79,
                      /* PushDynamicComponentInstance */
                    );
                    InvokeNonStaticComponent(op, {
                      capabilities: true,
                      elementBlock: null,
                      positional,
                      named,
                      atNames: false,
                      blocks: namedBlocks(null),
                    });
                  },
                );
                when(
                  1,
                  /* Helper */
                  () => {
                    CallDynamic(op, positional, named, () => {
                      op(
                        3,
                        /* InvokeStatic */
                        stdlibOperand('cautious-non-dynamic-append'),
                      );
                    });
                  },
                );
              },
            );
          }
        } else {
          op(
            0,
            /* PushFrame */
          );
          expr(op, value);
          op(
            3,
            /* InvokeStatic */
            stdlibOperand('cautious-append'),
          );
          op(
            1,
            /* PopFrame */
          );
        }
      },
    );
    STATEMENTS.add(
      2,
      /* TrustingAppend */
      (op, _ref35) => {
        var [, value] = _ref35;

        if (!Array.isArray(value)) {
          op(
            41,
            /* Text */
            value === null || value === undefined ? '' : String(value),
          );
        } else {
          op(
            0,
            /* PushFrame */
          );
          expr(op, value);
          op(
            3,
            /* InvokeStatic */
            stdlibOperand('trusting-append'),
          );
          op(
            1,
            /* PopFrame */
          );
        }
      },
    );
    STATEMENTS.add(
      6,
      /* Block */
      (op, _ref36) => {
        var [, expr$$1, positional, named, blocks] = _ref36;

        if (isGetFreeComponent(expr$$1)) {
          op(
            1004,
            /* ResolveComponent */
            expr$$1,
            (component) => {
              InvokeComponent(
                op,
                component,
                null,
                positional,
                hashToArgs(named),
                blocks,
              );
            },
          );
        } else {
          InvokeDynamicComponent(
            op,
            expr$$1,
            null,
            positional,
            named,
            blocks,
            false,
            false,
          );
        }
      },
    );
    STATEMENTS.add(
      40,
      /* InElement */
      (op, _ref37) => {
        var [, block, guid, destination, insertBefore] = _ref37;
        ReplayableIf(
          op,
          () => {
            expr(op, guid);

            if (insertBefore === undefined) {
              PushPrimitiveReference(op, undefined);
            } else {
              expr(op, insertBefore);
            }

            expr(op, destination);
            op(
              33,
              /* Dup */
              _vm.$sp,
              0,
            );
            return 4;
          },
          () => {
            op(
              50,
              /* PushRemoteElement */
            );
            InvokeStaticBlock(op, block);
            op(
              56,
              /* PopRemoteElement */
            );
          },
        );
      },
    );
    STATEMENTS.add(
      41,
      /* If */
      (op, _ref38) => {
        var [, condition, block, inverse] = _ref38;
        return ReplayableIf(
          op,
          () => {
            expr(op, condition);
            op(
              71,
              /* ToBoolean */
            );
            return 1;
          },
          () => {
            InvokeStaticBlock(op, block);
          },
          inverse
            ? () => {
                InvokeStaticBlock(op, inverse);
              }
            : undefined,
        );
      },
    );
    STATEMENTS.add(
      42,
      /* Each */
      (op, _ref39) => {
        var [, value, key, block, inverse] = _ref39;
        return Replayable(
          op,
          () => {
            if (key) {
              expr(op, key);
            } else {
              PushPrimitiveReference(op, null);
            }

            expr(op, value);
            return 2;
          },
          () => {
            op(
              72,
              /* EnterList */
              labelOperand('BODY'),
              labelOperand('ELSE'),
            );
            op(
              0,
              /* PushFrame */
            );
            op(
              33,
              /* Dup */
              _vm.$fp,
              1,
            );
            op(
              6,
              /* ReturnTo */
              labelOperand('ITER'),
            );
            op(
              1000,
              /* Label */
              'ITER',
            );
            op(
              74,
              /* Iterate */
              labelOperand('BREAK'),
            );
            op(
              1000,
              /* Label */
              'BODY',
            );
            InvokeStaticBlockWithStack(op, block, 2);
            op(
              34,
              /* Pop */
              2,
            );
            op(
              4,
              /* Jump */
              labelOperand('FINALLY'),
            );
            op(
              1000,
              /* Label */
              'BREAK',
            );
            op(
              1,
              /* PopFrame */
            );
            op(
              73,
              /* ExitList */
            );
            op(
              4,
              /* Jump */
              labelOperand('FINALLY'),
            );
            op(
              1000,
              /* Label */
              'ELSE',
            );

            if (inverse) {
              InvokeStaticBlock(op, inverse);
            }
          },
        );
      },
    );
    STATEMENTS.add(
      43,
      /* With */
      (op, _ref40) => {
        var [, value, block, inverse] = _ref40;
        ReplayableIf(
          op,
          () => {
            expr(op, value);
            op(
              33,
              /* Dup */
              _vm.$sp,
              0,
            );
            op(
              71,
              /* ToBoolean */
            );
            return 2;
          },
          () => {
            InvokeStaticBlockWithStack(op, block, 1);
          },
          () => {
            if (inverse) {
              InvokeStaticBlock(op, inverse);
            }
          },
        );
      },
    );
    STATEMENTS.add(
      44,
      /* Let */
      (op, _ref41) => {
        var [, positional, block] = _ref41;
        var count = CompilePositional(op, positional);
        InvokeStaticBlockWithStack(op, block, count);
      },
    );
    STATEMENTS.add(
      45,
      /* WithDynamicVars */
      (op, _ref42) => {
        var [, named, block] = _ref42;

        if (named) {
          var [names, expressions] = named;
          CompilePositional(op, expressions);
          DynamicScope(op, names, () => {
            InvokeStaticBlock(op, block);
          });
        } else {
          InvokeStaticBlock(op, block);
        }
      },
    );
    STATEMENTS.add(
      46,
      /* InvokeComponent */
      (op, _ref43) => {
        var [, expr$$1, positional, named, blocks] = _ref43;

        if (isGetFreeComponent(expr$$1)) {
          op(
            1004,
            /* ResolveComponent */
            expr$$1,
            (component) => {
              InvokeComponent(
                op,
                component,
                null,
                positional,
                hashToArgs(named),
                blocks,
              );
            },
          );
        } else {
          InvokeDynamicComponent(
            op,
            expr$$1,
            null,
            positional,
            named,
            blocks,
            false,
            false,
          );
        }
      },
    );

    function hashToArgs(hash) {
      if (hash === null) return null;
      var names = hash[0].map((key) => `@${key}`);
      return [names, hash[1]];
    }

    var PLACEHOLDER_HANDLE = -1;

    class CompilableTemplateImpl {
      constructor(
        statements,
        meta$$1, // Part of CompilableTemplate
        symbolTable, // Used for debugging
        moduleName,
      ) {
        if (moduleName === void 0) {
          moduleName = 'plain block';
        }

        this.statements = statements;
        this.meta = meta$$1;
        this.symbolTable = symbolTable;
        this.moduleName = moduleName;
        this.compiled = null;
      } // Part of CompilableTemplate

      compile(context) {
        return maybeCompile(this, context);
      }
    }

    function compilable(layout, moduleName) {
      var [statements, symbols, hasEval] = layout.block;
      return new CompilableTemplateImpl(
        statements,
        meta(layout),
        {
          symbols,
          hasEval,
        },
        moduleName,
      );
    }

    function maybeCompile(compilable, context) {
      if (compilable.compiled !== null) return compilable.compiled;
      compilable.compiled = PLACEHOLDER_HANDLE;
      var { statements, meta: meta$$1 } = compilable;
      var result = compileStatements(statements, meta$$1, context);
      compilable.compiled = result;
      return result;
    }

    function compileStatements(statements, meta$$1, syntaxContext) {
      var sCompiler = STATEMENTS;
      var context = templateCompilationContext(syntaxContext, meta$$1);
      var {
        encoder,
        program: { constants, resolver },
      } = context;

      function pushOp() {
        for (
          var _len = arguments.length, op = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          op[_key] = arguments[_key];
        }

        encodeOp(encoder, constants, resolver, meta$$1, op);
      }

      for (var i = 0; i < statements.length; i++) {
        sCompiler.compile(pushOp, statements[i]);
      }

      var handle = context.encoder.commit(meta$$1.size);
      return handle;
    }

    function compilableBlock(block, containing) {
      return new CompilableTemplateImpl(block[0], containing, {
        parameters: block[1] || _util.EMPTY_ARRAY,
      });
    }

    class Labels {
      constructor() {
        this.labels = (0, _util.dict)();
        this.targets = [];
      }

      label(name, index) {
        this.labels[name] = index;
      }

      target(at, target) {
        this.targets.push({
          at,
          target,
        });
      }

      patch(heap) {
        var { targets, labels } = this;

        for (var i = 0; i < targets.length; i++) {
          var { at, target } = targets[i];
          var address = labels[target] - at;
          heap.setbyaddr(at, address);
        }
      }
    }

    function encodeOp(encoder, constants, resolver, meta, op) {
      if (isBuilderOpcode(op[0])) {
        var [type, ...operands] = op;
        encoder.push(constants, type, ...operands);
      } else {
        switch (op[0]) {
          case 1000:
            /* Label */
            return encoder.label(op[1]);

          case 1001:
            /* StartLabels */
            return encoder.startLabels();

          case 1002:
            /* StopLabels */
            return encoder.stopLabels();

          case 1004:
            /* ResolveComponent */
            return resolveComponent(resolver, constants, meta, op);

          case 1003:
            /* ResolveModifier */
            return resolveModifier(resolver, constants, meta, op);

          case 1005:
            /* ResolveHelper */
            return resolveHelper(resolver, constants, meta, op);

          case 1007:
            /* ResolveComponentOrHelper */
            return resolveComponentOrHelper(resolver, constants, meta, op);

          case 1006:
            /* ResolveOptionalHelper */
            return resolveOptionalHelper(resolver, constants, meta, op);

          case 1008:
            /* ResolveOptionalComponentOrHelper */
            return resolveOptionalComponentOrHelper(
              resolver,
              constants,
              meta,
              op,
            );

          case 1010:
            /* ResolveLocal */
            var freeVar = op[1];
            var name = meta.upvars[freeVar];
            var andThen = op[2];
            andThen(name, meta.moduleName);
            break;

          case 1011:
            /* ResolveTemplateLocal */
            var [, valueIndex, then] = op;
            var value = meta.scopeValues[valueIndex];
            then(constants.value(value));
            break;

          case 1009:
            /* ResolveFree */
            if (
              true
              /* DEBUG */
            ) {
              var [, upvarIndex] = op;
              var freeName = meta.upvars[upvarIndex];
              throw new Error(
                `Attempted to resolve a value in a strict mode template, but that value was not in scope: ${freeName}`,
              );
            }

            break;

          default:
            throw new Error(`Unexpected high level opcode ${op[0]}`);
        }
      }
    }

    class EncoderImpl {
      constructor(heap, meta, stdlib) {
        this.heap = heap;
        this.meta = meta;
        this.stdlib = stdlib;
        this.labelsStack = new _util.Stack();
        this.encoder = new _encoder.InstructionEncoderImpl([]);
        this.errors = [];
        this.handle = heap.malloc();
      }

      error(error) {
        this.encoder.encode(
          30,
          /* Primitive */
          0,
        );
        this.errors.push(error);
      }

      commit(size) {
        var handle = this.handle;
        this.heap.push(
          5 |
            /* Return */
            1024,
          /* MACHINE_MASK */
        );
        this.heap.finishMalloc(handle, size);

        if (this.errors.length) {
          return {
            errors: this.errors,
            handle,
          };
        } else {
          return handle;
        }
      }

      push(constants, type) {
        var { heap } = this;

        if (
          true &&
          /* DEBUG */
          type > 255
          /* TYPE_SIZE */
        ) {
          throw new Error(`Opcode type over 8-bits. Got ${type}.`);
        }

        var machine = (0, _vm.isMachineOp)(type) ? 1024 : /* MACHINE_MASK */ 0;
        var first =
          type |
          machine |
          ((arguments.length <= 2 ? 0 : arguments.length - 2) << 8);
        /* ARG_SHIFT */
        heap.push(first);

        for (
          var i = 0;
          i < (arguments.length <= 2 ? 0 : arguments.length - 2);
          i++
        ) {
          var op =
            i + 2 < 2 || arguments.length <= i + 2
              ? undefined
              : arguments[i + 2];
          heap.push(this.operand(constants, op));
        }
      }

      operand(constants, operand) {
        if (typeof operand === 'number') {
          return operand;
        }

        if (typeof operand === 'object' && operand !== null) {
          if (Array.isArray(operand)) {
            return (0, _util.encodeHandle)(constants.array(operand));
          } else {
            switch (operand.type) {
              case 1:
                /* Label */
                this.currentLabels.target(this.heap.offset, operand.value);
                return -1;

              case 2:
                /* IsStrictMode */
                return (0, _util.encodeHandle)(
                  constants.value(this.meta.isStrictMode),
                );

              case 3:
                /* EvalSymbols */
                return (0, _util.encodeHandle)(
                  constants.array(
                    this.meta.evalSymbols || _util.EMPTY_STRING_ARRAY,
                  ),
                );

              case 4:
                /* Block */
                return (0, _util.encodeHandle)(
                  constants.value(compilableBlock(operand.value, this.meta)),
                );

              case 5:
                /* StdLib */
                return this.stdlib[operand.value];

              case 6:
              /* NonSmallInt */
              case 7:
              /* SymbolTable */
              case 8:
                /* Layout */
                return constants.value(operand.value);
            }
          }
        }

        return (0, _util.encodeHandle)(constants.value(operand));
      }

      get currentLabels() {
        return this.labelsStack.current;
      }

      label(name) {
        this.currentLabels.label(name, this.heap.offset + 1);
      }

      startLabels() {
        this.labelsStack.push(new Labels());
      }

      stopLabels() {
        var label = this.labelsStack.pop();
        label.patch(this.heap);
      }
    }

    function isBuilderOpcode(op) {
      return (
        op < 1000
        /* Start */
      );
    }

    function main(op) {
      op(
        75,
        /* Main */
        _vm.$s0,
      );
      invokePreparedComponent(op, false, false, true);
    }
    /**
     * Append content to the DOM. This standard function triages content and does the
     * right thing based upon whether it's a string, safe string, component, fragment
     * or node.
     *
     * @param trusting whether to interpolate a string as raw HTML (corresponds to
     * triple curlies)
     */

    function StdAppend(op, trusting, nonDynamicAppend) {
      SwitchCases(
        op,
        () =>
          op(
            76,
            /* ContentType */
          ),
        (when) => {
          when(
            2,
            /* String */
            () => {
              if (trusting) {
                op(
                  68,
                  /* AssertSame */
                );
                op(
                  43,
                  /* AppendHTML */
                );
              } else {
                op(
                  47,
                  /* AppendText */
                );
              }
            },
          );

          if (typeof nonDynamicAppend === 'number') {
            when(
              0,
              /* Component */
              () => {
                op(
                  81,
                  /* ResolveCurriedComponent */
                );
                op(
                  79,
                  /* PushDynamicComponentInstance */
                );
                InvokeBareComponent(op);
              },
            );
            when(
              1,
              /* Helper */
              () => {
                CallDynamic(op, null, null, () => {
                  op(
                    3,
                    /* InvokeStatic */
                    nonDynamicAppend,
                  );
                });
              },
            );
          } else {
            // when non-dynamic, we can no longer call the value (potentially because we've already called it)
            // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
            when(
              0,
              /* Component */
              () => {
                op(
                  47,
                  /* AppendText */
                );
              },
            );
            when(
              1,
              /* Helper */
              () => {
                op(
                  47,
                  /* AppendText */
                );
              },
            );
          }

          when(
            4,
            /* SafeString */
            () => {
              op(
                68,
                /* AssertSame */
              );
              op(
                44,
                /* AppendSafeHTML */
              );
            },
          );
          when(
            5,
            /* Fragment */
            () => {
              op(
                68,
                /* AssertSame */
              );
              op(
                45,
                /* AppendDocumentFragment */
              );
            },
          );
          when(
            6,
            /* Node */
            () => {
              op(
                68,
                /* AssertSame */
              );
              op(
                46,
                /* AppendNode */
              );
            },
          );
        },
      );
    }

    function compileStd(context) {
      var mainHandle = build(context, (op) => main(op));
      var trustingGuardedNonDynamicAppend = build(context, (op) =>
        StdAppend(op, true, null),
      );
      var cautiousGuardedNonDynamicAppend = build(context, (op) =>
        StdAppend(op, false, null),
      );
      var trustingGuardedDynamicAppend = build(context, (op) =>
        StdAppend(op, true, trustingGuardedNonDynamicAppend),
      );
      var cautiousGuardedDynamicAppend = build(context, (op) =>
        StdAppend(op, false, cautiousGuardedNonDynamicAppend),
      );
      return new StdLib(
        mainHandle,
        trustingGuardedDynamicAppend,
        cautiousGuardedDynamicAppend,
        trustingGuardedNonDynamicAppend,
        cautiousGuardedNonDynamicAppend,
      );
    }

    var STDLIB_META = {
      evalSymbols: null,
      upvars: null,
      moduleName: 'stdlib',
      // TODO: ??
      scopeValues: null,
      isStrictMode: true,
      owner: null,
      size: 0,
    };

    function build(program, callback) {
      var { constants, heap, resolver } = program;
      var encoder = new EncoderImpl(heap, STDLIB_META);

      function pushOp() {
        for (
          var _len2 = arguments.length, op = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          op[_key2] = arguments[_key2];
        }

        encodeOp(encoder, constants, resolver, STDLIB_META, op);
      }

      callback(pushOp);
      var result = encoder.commit(0);

      if (typeof result !== 'number') {
        // This shouldn't be possible
        throw new Error(`Unexpected errors compiling std`);
      } else {
        return result;
      }
    }

    class CompileTimeCompilationContextImpl {
      constructor(_ref44, resolver) {
        var { constants, heap } = _ref44;
        this.resolver = resolver;
        this.constants = constants;
        this.heap = heap;
        this.stdlib = compileStd(this);
      }
    }

    _exports.CompileTimeCompilationContextImpl = CompileTimeCompilationContextImpl;
    var DEFAULT_CAPABILITIES = {
      dynamicLayout: true,
      dynamicTag: true,
      prepareArgs: true,
      createArgs: true,
      attributeHook: false,
      elementHook: false,
      dynamicScope: true,
      createCaller: false,
      updateHook: true,
      createInstance: true,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };
    _exports.DEFAULT_CAPABILITIES = DEFAULT_CAPABILITIES;
    var MINIMAL_CAPABILITIES = {
      dynamicLayout: false,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: false,
      attributeHook: false,
      elementHook: false,
      dynamicScope: false,
      createCaller: false,
      updateHook: false,
      createInstance: false,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };
    _exports.MINIMAL_CAPABILITIES = MINIMAL_CAPABILITIES;

    class WrappedBuilder {
      constructor(layout, moduleName) {
        this.layout = layout;
        this.moduleName = moduleName;
        this.compiled = null;
        var { block } = layout;
        var [, symbols, hasEval] = block;
        symbols = symbols.slice(); // ensure ATTRS_BLOCK is always included (only once) in the list of symbols

        var attrsBlockIndex = symbols.indexOf(ATTRS_BLOCK);

        if (attrsBlockIndex === -1) {
          this.attrsBlockNumber = symbols.push(ATTRS_BLOCK);
        } else {
          this.attrsBlockNumber = attrsBlockIndex + 1;
        }

        this.symbolTable = {
          hasEval,
          symbols,
        };
      }

      compile(syntax) {
        if (this.compiled !== null) return this.compiled;
        var m = meta(this.layout);
        var context = templateCompilationContext(syntax, m);
        var {
          encoder,
          program: { constants, resolver },
        } = context;

        function pushOp() {
          for (
            var _len3 = arguments.length, op = new Array(_len3), _key3 = 0;
            _key3 < _len3;
            _key3++
          ) {
            op[_key3] = arguments[_key3];
          }

          encodeOp(encoder, constants, resolver, m, op);
        }

        WrappedComponent(pushOp, this.layout, this.attrsBlockNumber);
        var handle = context.encoder.commit(m.size);

        if (typeof handle !== 'number') {
          return handle;
        }

        this.compiled = handle;
        return handle;
      }
    }

    _exports.WrappedBuilder = WrappedBuilder;
    var clientId = 0;
    var templateCacheCounters = {
      cacheHit: 0,
      cacheMiss: 0,
    };
    /**
     * Wraps a template js in a template module to change it into a factory
     * that handles lazy parsing the template and to create per env singletons
     * of the template.
     */

    _exports.templateCacheCounters = templateCacheCounters;

    function templateFactory(_ref45) {
      var { id: templateId, moduleName, block, scope, isStrictMode } = _ref45;
      // TODO(template-refactors): This should be removed in the near future, as it
      // appears that id is unused. It is currently kept for backwards compat reasons.
      var id = templateId || `client-${clientId++}`; // TODO: This caches JSON serialized output once in case a template is
      // compiled by multiple owners, but we haven't verified if this is actually
      // helpful. We should benchmark this in the future.

      var parsedBlock;
      var ownerlessTemplate = null;
      var templateCache = new WeakMap();

      var factory = (owner) => {
        if (parsedBlock === undefined) {
          parsedBlock = JSON.parse(block);
        }

        if (owner === undefined) {
          if (ownerlessTemplate === null) {
            templateCacheCounters.cacheMiss++;
            ownerlessTemplate = new TemplateImpl({
              id,
              block: parsedBlock,
              moduleName,
              owner: null,
              scope,
              isStrictMode,
            });
          } else {
            templateCacheCounters.cacheHit++;
          }

          return ownerlessTemplate;
        }

        var result = templateCache.get(owner);

        if (result === undefined) {
          templateCacheCounters.cacheMiss++;
          result = new TemplateImpl({
            id,
            block: parsedBlock,
            moduleName,
            owner,
            scope,
            isStrictMode,
          });
          templateCache.set(owner, result);
        } else {
          templateCacheCounters.cacheHit++;
        }

        return result;
      };

      factory.__id = id;
      factory.__meta = {
        moduleName,
      };
      return factory;
    }

    class TemplateImpl {
      constructor(parsedLayout) {
        this.parsedLayout = parsedLayout;
        this.result = 'ok';
        this.layout = null;
        this.wrappedLayout = null;
      }

      get moduleName() {
        return this.parsedLayout.moduleName;
      }

      get id() {
        return this.parsedLayout.id;
      } // TODO(template-refactors): This should be removed in the near future, it is
      // only being exposed for backwards compatibility

      get referrer() {
        return {
          moduleName: this.parsedLayout.moduleName,
          owner: this.parsedLayout.owner,
        };
      }

      asLayout() {
        if (this.layout) return this.layout;
        return (this.layout = compilable(
          (0, _util.assign)({}, this.parsedLayout),
          this.moduleName,
        ));
      }

      asWrappedLayout() {
        if (this.wrappedLayout) return this.wrappedLayout;
        return (this.wrappedLayout = new WrappedBuilder(
          (0, _util.assign)({}, this.parsedLayout),
          this.moduleName,
        ));
      }
    }
  });
  define('@glimmer/owner', ['exports', '@glimmer/util'], function (
    _exports,
    _util,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.OWNER = void 0;
    _exports.getOwner = getOwner;
    _exports.setOwner = setOwner;
    var OWNER = (0, _util.symbol)('OWNER');
    /**
    Framework objects in a Glimmer application may receive an owner object.
    Glimmer is unopinionated about this owner, but will forward it through its
    internal resolution system, and through its managers if it is provided.
  */

    _exports.OWNER = OWNER;

    function getOwner(object) {
      return object[OWNER];
    }
    /**
    `setOwner` set's an object's owner
  */

    function setOwner(object, owner) {
      object[OWNER] = owner;
    }
  });
  define('@glimmer/program', [
    'exports',
    '@glimmer/util',
    '@glimmer/manager',
    '@glimmer/opcode-compiler',
  ], function (_exports, _util, _manager, _opcodeCompiler) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.RuntimeProgramImpl = _exports.RuntimeOpImpl = _exports.RuntimeHeapImpl = _exports.RuntimeConstantsImpl = _exports.HeapImpl = _exports.ConstantsImpl = _exports.CompileTimeConstantImpl = void 0;
    _exports.artifacts = artifacts;
    _exports.hydrateHeap = hydrateHeap;

    /**
     * Default component template, which is a plain yield
     */
    var DEFAULT_TEMPLATE_BLOCK = [
      [
        [
          18,
          /* Yield */
          1,
          null,
        ],
      ],
      ['&default'],
      false,
      [],
    ];
    var DEFAULT_TEMPLATE = {
      // random uuid
      id: '1b32f5c2-7623-43d6-a0ad-9672898920a1',
      moduleName: '__default__.hbs',
      block: JSON.stringify(DEFAULT_TEMPLATE_BLOCK),
      scope: null,
      isStrictMode: true,
    };
    var WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]);
    var STARTER_CONSTANTS = (0, _util.constants)(WELL_KNOWN_EMPTY_ARRAY);
    var WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(
      WELL_KNOWN_EMPTY_ARRAY,
    );

    class CompileTimeConstantImpl {
      constructor() {
        // `0` means NULL
        this.values = STARTER_CONSTANTS.slice();
        this.indexMap = new Map(
          this.values.map((value, index) => [value, index]),
        );
      }

      value(value) {
        var indexMap = this.indexMap;
        var index = indexMap.get(value);

        if (index === undefined) {
          index = this.values.push(value) - 1;
          indexMap.set(value, index);
        }

        return index;
      }

      array(values) {
        if (values.length === 0) {
          return WELL_KNOWN_EMPTY_ARRAY_POSITION;
        }

        var handles = new Array(values.length);

        for (var i = 0; i < values.length; i++) {
          handles[i] = this.value(values[i]);
        }

        return this.value(handles);
      }

      toPool() {
        return this.values;
      }
    }

    _exports.CompileTimeConstantImpl = CompileTimeConstantImpl;

    class RuntimeConstantsImpl {
      constructor(pool) {
        this.values = pool;
      }

      getValue(handle) {
        return this.values[handle];
      }

      getArray(value) {
        var handles = this.getValue(value);
        var reified = new Array(handles.length);

        for (var i = 0; i < handles.length; i++) {
          var n = handles[i];
          reified[i] = this.getValue(n);
        }

        return reified;
      }
    }

    _exports.RuntimeConstantsImpl = RuntimeConstantsImpl;

    class ConstantsImpl extends CompileTimeConstantImpl {
      constructor() {
        super(...arguments);
        this.reifiedArrs = {
          [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY,
        };
        this.defaultTemplate = (0, _opcodeCompiler.templateFactory)(
          DEFAULT_TEMPLATE,
        )(); // Used for tests and debugging purposes, and to be able to analyze large apps
        // This is why it's enabled even in production

        this.helperDefinitionCount = 0;
        this.modifierDefinitionCount = 0;
        this.componentDefinitionCount = 0;
        this.helperDefinitionCache = new WeakMap();
        this.modifierDefinitionCache = new WeakMap();
        this.componentDefinitionCache = new WeakMap();
      }

      helper(
        definitionState, // TODO: Add a way to expose resolved name for debugging
        _resolvedName,
        isOptional,
      ) {
        if (_resolvedName === void 0) {
          _resolvedName = null;
        }

        var handle = this.helperDefinitionCache.get(definitionState);

        if (handle === undefined) {
          var managerOrHelper = (0, _manager.getInternalHelperManager)(
            definitionState,
            isOptional,
          );

          if (managerOrHelper === null) {
            this.helperDefinitionCache.set(definitionState, null);
            return null;
          }

          var helper =
            typeof managerOrHelper === 'function'
              ? managerOrHelper
              : managerOrHelper.getHelper(definitionState);
          handle = this.value(helper);
          this.helperDefinitionCache.set(definitionState, handle);
          this.helperDefinitionCount++;
        }

        return handle;
      }

      modifier(definitionState, resolvedName, isOptional) {
        if (resolvedName === void 0) {
          resolvedName = null;
        }

        var handle = this.modifierDefinitionCache.get(definitionState);

        if (handle === undefined) {
          var manager = (0, _manager.getInternalModifierManager)(
            definitionState,
            isOptional,
          );

          if (manager === null) {
            this.modifierDefinitionCache.set(definitionState, null);
            return null;
          }

          var definition = {
            resolvedName,
            manager,
            state: definitionState,
          };
          handle = this.value(definition);
          this.modifierDefinitionCache.set(definitionState, handle);
          this.modifierDefinitionCount++;
        }

        return handle;
      }

      component(definitionState, owner, isOptional) {
        var _a;

        var definition = this.componentDefinitionCache.get(definitionState);

        if (definition === undefined) {
          var manager = (0, _manager.getInternalComponentManager)(
            definitionState,
            isOptional,
          );

          if (manager === null) {
            this.componentDefinitionCache.set(definitionState, null);
            return null;
          }

          var capabilities = (0, _manager.capabilityFlagsFrom)(
            manager.getCapabilities(definitionState),
          );
          var templateFactory$$1 = (0, _manager.getComponentTemplate)(
            definitionState,
          );
          var compilable = null;
          var template;

          if (
            !(0, _manager.managerHasCapability)(
              manager,
              capabilities,
              1,
              /* DynamicLayout */
            )
          ) {
            template =
              (_a =
                templateFactory$$1 === null || templateFactory$$1 === void 0
                  ? void 0
                  : templateFactory$$1(owner)) !== null && _a !== void 0
                ? _a
                : this.defaultTemplate;
          } else {
            template =
              templateFactory$$1 === null || templateFactory$$1 === void 0
                ? void 0
                : templateFactory$$1(owner);
          }

          if (template !== undefined) {
            template = (0, _util.unwrapTemplate)(template);
            compilable = (0, _manager.managerHasCapability)(
              manager,
              capabilities,
              1024,
              /* Wrapped */
            )
              ? template.asWrappedLayout()
              : template.asLayout();
          }

          definition = {
            resolvedName: null,
            handle: -1,
            manager,
            capabilities,
            state: definitionState,
            compilable,
          };
          definition.handle = this.value(definition);
          this.componentDefinitionCache.set(definitionState, definition);
          this.componentDefinitionCount++;
        }

        return definition;
      }

      resolvedComponent(resolvedDefinition, resolvedName) {
        var definition = this.componentDefinitionCache.get(resolvedDefinition);

        if (definition === undefined) {
          var { manager, state, template } = resolvedDefinition;
          var capabilities = (0, _manager.capabilityFlagsFrom)(
            manager.getCapabilities(resolvedDefinition),
          );
          var compilable = null;

          if (
            !(0, _manager.managerHasCapability)(
              manager,
              capabilities,
              1,
              /* DynamicLayout */
            )
          ) {
            template =
              template !== null && template !== void 0
                ? template
                : this.defaultTemplate;
          }

          if (template !== null) {
            template = (0, _util.unwrapTemplate)(template);
            compilable = (0, _manager.managerHasCapability)(
              manager,
              capabilities,
              1024,
              /* Wrapped */
            )
              ? template.asWrappedLayout()
              : template.asLayout();
          }

          definition = {
            resolvedName,
            handle: -1,
            manager,
            capabilities,
            state,
            compilable,
          };
          definition.handle = this.value(definition);
          this.componentDefinitionCache.set(resolvedDefinition, definition);
          this.componentDefinitionCount++;
        }

        return definition;
      }

      getValue(index) {
        return this.values[index];
      }

      getArray(index) {
        var reifiedArrs = this.reifiedArrs;
        var reified = reifiedArrs[index];

        if (reified === undefined) {
          var names = this.getValue(index);
          reified = new Array(names.length);

          for (var i = 0; i < names.length; i++) {
            reified[i] = this.getValue(names[i]);
          }

          reifiedArrs[index] = reified;
        }

        return reified;
      }
    }

    _exports.ConstantsImpl = ConstantsImpl;

    class RuntimeOpImpl {
      constructor(heap) {
        this.heap = heap;
        this.offset = 0;
      }

      get size() {
        var rawType = this.heap.getbyaddr(this.offset);
        return (
          ((rawType & 768) >>
            /* OPERAND_LEN_MASK */
            8) +
          /* ARG_SHIFT */
          1
        );
      }

      get isMachine() {
        var rawType = this.heap.getbyaddr(this.offset);
        return rawType & 1024 ? /* MACHINE_MASK */ 1 : 0;
      }

      get type() {
        return (
          this.heap.getbyaddr(this.offset) & 255
          /* TYPE_MASK */
        );
      }

      get op1() {
        return this.heap.getbyaddr(this.offset + 1);
      }

      get op2() {
        return this.heap.getbyaddr(this.offset + 2);
      }

      get op3() {
        return this.heap.getbyaddr(this.offset + 3);
      }
    }

    _exports.RuntimeOpImpl = RuntimeOpImpl;
    var PAGE_SIZE = 0x100000;

    class RuntimeHeapImpl {
      constructor(serializedHeap) {
        var { buffer, table } = serializedHeap;
        this.heap = new Int32Array(buffer);
        this.table = table;
      } // It is illegal to close over this address, as compaction
      // may move it. However, it is legal to use this address
      // multiple times between compactions.

      getaddr(handle) {
        return this.table[handle];
      }

      getbyaddr(address) {
        return this.heap[address];
      }

      sizeof(handle) {
        return sizeof(this.table, handle);
      }
    }

    _exports.RuntimeHeapImpl = RuntimeHeapImpl;

    function hydrateHeap(serializedHeap) {
      return new RuntimeHeapImpl(serializedHeap);
    }
    /**
     * The Heap is responsible for dynamically allocating
     * memory in which we read/write the VM's instructions
     * from/to. When we malloc we pass out a VMHandle, which
     * is used as an indirect way of accessing the memory during
     * execution of the VM. Internally we track the different
     * regions of the memory in an int array known as the table.
     *
     * The table 32-bit aligned and has the following layout:
     *
     * | ... | hp (u32) |       info (u32)   | size (u32) |
     * | ... |  Handle  | Scope Size | State | Size       |
     * | ... | 32bits   | 30bits     | 2bits | 32bit      |
     *
     * With this information we effectively have the ability to
     * control when we want to free memory. That being said you
     * can not free during execution as raw address are only
     * valid during the execution. This means you cannot close
     * over them as you will have a bad memory access exception.
     */

    class HeapImpl {
      constructor() {
        this.offset = 0;
        this.handle = 0;
        this.heap = new Int32Array(PAGE_SIZE);
        this.handleTable = [];
        this.handleState = [];
      }

      push(item) {
        this.sizeCheck();
        this.heap[this.offset++] = item;
      }

      sizeCheck() {
        var { heap } = this;

        if (this.offset === this.heap.length) {
          var newHeap = new Int32Array(heap.length + PAGE_SIZE);
          newHeap.set(heap, 0);
          this.heap = newHeap;
        }
      }

      getbyaddr(address) {
        return this.heap[address];
      }

      setbyaddr(address, value) {
        this.heap[address] = value;
      }

      malloc() {
        // push offset, info, size
        this.handleTable.push(this.offset);
        return this.handleTable.length - 1;
      }

      finishMalloc(handle) {}

      size() {
        return this.offset;
      } // It is illegal to close over this address, as compaction
      // may move it. However, it is legal to use this address
      // multiple times between compactions.

      getaddr(handle) {
        return this.handleTable[handle];
      }

      sizeof(handle) {
        return sizeof(this.handleTable, handle);
      }

      free(handle) {
        this.handleState[handle] = 1;
        /* Freed */
      }
      /**
       * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
       * reachable memory to the bottom of the heap and freeable
       * memory to the top of the heap. When we have shifted all
       * the reachable memory to the top of the heap, we move the
       * offset to the next free position.
       */

      compact() {
        var compactedSize = 0;
        var { handleTable, handleState, heap } = this;

        for (var i = 0; i < length; i++) {
          var offset = handleTable[i];
          var size = handleTable[i + 1] - offset;
          var state = handleState[i];

          if (
            state === 2
            /* Purged */
          ) {
            continue;
          } else if (
            state === 1
            /* Freed */
          ) {
            // transition to "already freed" aka "purged"
            // a good improvement would be to reuse
            // these slots
            handleState[i] = 2;
            /* Purged */
            compactedSize += size;
          } else if (
            state === 0
            /* Allocated */
          ) {
            for (var j = offset; j <= i + size; j++) {
              heap[j - compactedSize] = heap[j];
            }

            handleTable[i] = offset - compactedSize;
          } else if (
            state === 3
            /* Pointer */
          ) {
            handleTable[i] = offset - compactedSize;
          }
        }

        this.offset = this.offset - compactedSize;
      }

      capture(offset) {
        if (offset === void 0) {
          offset = this.offset;
        }

        // Only called in eager mode
        var buffer = slice(this.heap, 0, offset).buffer;
        return {
          handle: this.handle,
          table: this.handleTable,
          buffer: buffer,
        };
      }
    }

    _exports.HeapImpl = HeapImpl;

    class RuntimeProgramImpl {
      constructor(constants$$1, heap) {
        this.constants = constants$$1;
        this.heap = heap;
        this._opcode = new RuntimeOpImpl(this.heap);
      }

      opcode(offset) {
        this._opcode.offset = offset;
        return this._opcode;
      }
    }

    _exports.RuntimeProgramImpl = RuntimeProgramImpl;

    function slice(arr, start, end) {
      if (arr.slice !== undefined) {
        return arr.slice(start, end);
      }

      var ret = new Int32Array(end);

      for (; start < end; start++) {
        ret[start] = arr[start];
      }

      return ret;
    }

    function sizeof(table, handle) {
      {
        return -1;
      }
    }

    function artifacts() {
      return {
        constants: new ConstantsImpl(),
        heap: new HeapImpl(),
      };
    }
  });
  define('@glimmer/reference', [
    'exports',
    '@glimmer/global-context',
    '@glimmer/util',
    '@glimmer/validator',
  ], function (_exports, _globalContext, _util, _validator) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.UNDEFINED_REFERENCE = _exports.TRUE_REFERENCE = _exports.REFERENCE = _exports.NULL_REFERENCE = _exports.FALSE_REFERENCE = void 0;
    _exports.childRefFor = childRefFor;
    _exports.childRefFromParts = childRefFromParts;
    _exports.createComputeRef = createComputeRef;
    _exports.createConstRef = createConstRef;
    _exports.createDebugAliasRef = void 0;
    _exports.createInvokableRef = createInvokableRef;
    _exports.createIteratorItemRef = createIteratorItemRef;
    _exports.createIteratorRef = createIteratorRef;
    _exports.createPrimitiveRef = createPrimitiveRef;
    _exports.createReadOnlyRef = createReadOnlyRef;
    _exports.createUnboundRef = createUnboundRef;
    _exports.isConstRef = isConstRef;
    _exports.isInvokableRef = isInvokableRef;
    _exports.isUpdatableRef = isUpdatableRef;
    _exports.updateRef = updateRef;
    _exports.valueForRef = valueForRef;
    var REFERENCE = (0, _util.symbol)('REFERENCE');
    _exports.REFERENCE = REFERENCE;

    class ReferenceImpl {
      constructor(type) {
        this.tag = null;
        this.lastRevision = _validator.INITIAL;
        this.children = null;
        this.compute = null;
        this.update = null;
        this[REFERENCE] = type;
      }
    }

    function createPrimitiveRef(value) {
      var ref = new ReferenceImpl(
        2,
        /* Unbound */
      );
      ref.tag = _validator.CONSTANT_TAG;
      ref.lastValue = value;

      if (
        true
        /* DEBUG */
      ) {
        ref.debugLabel = String(value);
      }

      return ref;
    }

    var UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
    _exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
    var NULL_REFERENCE = createPrimitiveRef(null);
    _exports.NULL_REFERENCE = NULL_REFERENCE;
    var TRUE_REFERENCE = createPrimitiveRef(true);
    _exports.TRUE_REFERENCE = TRUE_REFERENCE;
    var FALSE_REFERENCE = createPrimitiveRef(false);
    _exports.FALSE_REFERENCE = FALSE_REFERENCE;

    function createConstRef(value, debugLabel) {
      var ref = new ReferenceImpl(
        0,
        /* Constant */
      );
      ref.lastValue = value;
      ref.tag = _validator.CONSTANT_TAG;

      if (
        true
        /* DEBUG */
      ) {
        ref.debugLabel = debugLabel;
      }

      return ref;
    }

    function createUnboundRef(value, debugLabel) {
      var ref = new ReferenceImpl(
        2,
        /* Unbound */
      );
      ref.lastValue = value;
      ref.tag = _validator.CONSTANT_TAG;

      if (
        true
        /* DEBUG */
      ) {
        ref.debugLabel = debugLabel;
      }

      return ref;
    }

    function createComputeRef(compute, update, debugLabel) {
      if (update === void 0) {
        update = null;
      }

      if (debugLabel === void 0) {
        debugLabel = 'unknown';
      }

      var ref = new ReferenceImpl(
        1,
        /* Compute */
      );
      ref.compute = compute;
      ref.update = update;

      if (
        true
        /* DEBUG */
      ) {
        ref.debugLabel = `(result of a \`${debugLabel}\` helper)`;
      }

      return ref;
    }

    function createReadOnlyRef(ref) {
      if (!isUpdatableRef(ref)) return ref;
      return createComputeRef(() => valueForRef(ref), null, ref.debugLabel);
    }

    function isInvokableRef(ref) {
      return (
        ref[REFERENCE] === 3
        /* Invokable */
      );
    }

    function createInvokableRef(inner) {
      var ref = createComputeRef(
        () => valueForRef(inner),
        (value) => updateRef(inner, value),
      );
      ref.debugLabel = inner.debugLabel;
      ref[REFERENCE] = 3;
      /* Invokable */
      return ref;
    }

    function isConstRef(_ref) {
      var ref = _ref;
      return ref.tag === _validator.CONSTANT_TAG;
    }

    function isUpdatableRef(_ref) {
      var ref = _ref;
      return ref.update !== null;
    }

    function valueForRef(_ref) {
      var ref = _ref;
      var { tag } = ref;

      if (tag === _validator.CONSTANT_TAG) {
        return ref.lastValue;
      }

      var { lastRevision } = ref;
      var lastValue;

      if (tag === null || !(0, _validator.validateTag)(tag, lastRevision)) {
        var { compute } = ref;
        tag = ref.tag = (0, _validator.track)(
          () => {
            lastValue = ref.lastValue = compute();
          },
          true &&
            /* DEBUG */
            ref.debugLabel,
        );
        ref.lastRevision = (0, _validator.valueForTag)(tag);
      } else {
        lastValue = ref.lastValue;
      }

      (0, _validator.consumeTag)(tag);
      return lastValue;
    }

    function updateRef(_ref, value) {
      var ref = _ref;
      var update = ref.update;
      update(value);
    }

    function childRefFor(_parentRef, path) {
      var parentRef = _parentRef;
      var type = parentRef[REFERENCE];
      var children = parentRef.children;
      var child;

      if (children === null) {
        children = parentRef.children = new Map();
      } else {
        child = children.get(path);

        if (child !== undefined) {
          return child;
        }
      }

      if (
        type === 2
        /* Unbound */
      ) {
        var parent = valueForRef(parentRef);

        if ((0, _util.isDict)(parent)) {
          child = createUnboundRef(
            parent[path],
            true &&
              /* DEBUG */
              `${parentRef.debugLabel}.${path}`,
          );
        } else {
          child = UNDEFINED_REFERENCE;
        }
      } else {
        child = createComputeRef(
          () => {
            var parent = valueForRef(parentRef);

            if ((0, _util.isDict)(parent)) {
              return (0, _globalContext.getProp)(parent, path);
            }
          },
          (val) => {
            var parent = valueForRef(parentRef);

            if ((0, _util.isDict)(parent)) {
              return (0, _globalContext.setProp)(parent, path, val);
            }
          },
        );

        if (
          true
          /* DEBUG */
        ) {
          child.debugLabel = `${parentRef.debugLabel}.${path}`;
        }
      }

      children.set(path, child);
      return child;
    }

    function childRefFromParts(root, parts) {
      var reference = root;

      for (var i = 0; i < parts.length; i++) {
        reference = childRefFor(reference, parts[i]);
      }

      return reference;
    }

    var createDebugAliasRef;
    _exports.createDebugAliasRef = createDebugAliasRef;

    if (
      true
      /* DEBUG */
    ) {
      _exports.createDebugAliasRef = createDebugAliasRef = (
        debugLabel,
        inner,
      ) => {
        var update = isUpdatableRef(inner)
          ? (value) => updateRef(inner, value)
          : null;
        var ref = createComputeRef(() => valueForRef(inner), update);
        ref[REFERENCE] = inner[REFERENCE];
        ref.debugLabel = debugLabel;
        return ref;
      };
    }

    var NULL_IDENTITY = {};

    var KEY = (_, index) => index;

    var INDEX = (_, index) => String(index);

    var IDENTITY = (item) => {
      if (item === null) {
        // Returning null as an identity will cause failures since the iterator
        // can't tell that it's actually supposed to be null
        return NULL_IDENTITY;
      }

      return item;
    };

    function keyForPath(path) {
      if (
        true &&
        /* DEBUG */
        path[0] === '@'
      ) {
        throw new Error(
          `invalid keypath: '${path}', valid keys: @index, @identity, or a path`,
        );
      }

      return uniqueKeyFor((item) => (0, _globalContext.getPath)(item, path));
    }

    function makeKeyFor(key) {
      switch (key) {
        case '@key':
          return uniqueKeyFor(KEY);

        case '@index':
          return uniqueKeyFor(INDEX);

        case '@identity':
          return uniqueKeyFor(IDENTITY);

        default:
          return keyForPath(key);
      }
    }

    class WeakMapWithPrimitives {
      get weakMap() {
        if (this._weakMap === undefined) {
          this._weakMap = new WeakMap();
        }

        return this._weakMap;
      }

      get primitiveMap() {
        if (this._primitiveMap === undefined) {
          this._primitiveMap = new Map();
        }

        return this._primitiveMap;
      }

      set(key, value) {
        if ((0, _util.isObject)(key)) {
          this.weakMap.set(key, value);
        } else {
          this.primitiveMap.set(key, value);
        }
      }

      get(key) {
        if ((0, _util.isObject)(key)) {
          return this.weakMap.get(key);
        } else {
          return this.primitiveMap.get(key);
        }
      }
    }

    var IDENTITIES = new WeakMapWithPrimitives();

    function identityForNthOccurence(value, count) {
      var identities = IDENTITIES.get(value);

      if (identities === undefined) {
        identities = [];
        IDENTITIES.set(value, identities);
      }

      var identity = identities[count];

      if (identity === undefined) {
        identity = {
          value,
          count,
        };
        identities[count] = identity;
      }

      return identity;
    }
    /**
     * When iterating over a list, it's possible that an item with the same unique
     * key could be encountered twice:
     *
     * ```js
     * let arr = ['same', 'different', 'same', 'same'];
     * ```
     *
     * In general, we want to treat these items as _unique within the list_. To do
     * this, we track the occurences of every item as we iterate the list, and when
     * an item occurs more than once, we generate a new unique key just for that
     * item, and that occurence within the list. The next time we iterate the list,
     * and encounter an item for the nth time, we can get the _same_ key, and let
     * Glimmer know that it should reuse the DOM for the previous nth occurence.
     */

    function uniqueKeyFor(keyFor) {
      var seen = new WeakMapWithPrimitives();
      return (value, memo) => {
        var key = keyFor(value, memo);
        var count = seen.get(key) || 0;
        seen.set(key, count + 1);

        if (count === 0) {
          return key;
        }

        return identityForNthOccurence(key, count);
      };
    }

    function createIteratorRef(listRef, key) {
      return createComputeRef(() => {
        var iterable = valueForRef(listRef);
        var keyFor = makeKeyFor(key);

        if (Array.isArray(iterable)) {
          return new ArrayIterator(iterable, keyFor);
        }

        var maybeIterator = (0, _globalContext.toIterator)(iterable);

        if (maybeIterator === null) {
          return new ArrayIterator(_util.EMPTY_ARRAY, () => null);
        }

        return new IteratorWrapper(maybeIterator, keyFor);
      });
    }

    function createIteratorItemRef(_value) {
      var value = _value;
      var tag = (0, _validator.createTag)();
      return createComputeRef(
        () => {
          (0, _validator.consumeTag)(tag);
          return value;
        },
        (newValue) => {
          if (value !== newValue) {
            value = newValue;
            (0, _validator.dirtyTag)(tag);
          }
        },
      );
    }

    class IteratorWrapper {
      constructor(inner, keyFor) {
        this.inner = inner;
        this.keyFor = keyFor;
      }

      isEmpty() {
        return this.inner.isEmpty();
      }

      next() {
        var nextValue = this.inner.next();

        if (nextValue !== null) {
          nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
        }

        return nextValue;
      }
    }

    class ArrayIterator {
      constructor(iterator, keyFor) {
        this.iterator = iterator;
        this.keyFor = keyFor;
        this.pos = 0;

        if (iterator.length === 0) {
          this.current = {
            kind: 'empty',
          };
        } else {
          this.current = {
            kind: 'first',
            value: iterator[this.pos],
          };
        }
      }

      isEmpty() {
        return this.current.kind === 'empty';
      }

      next() {
        var value;
        var current = this.current;

        if (current.kind === 'first') {
          this.current = {
            kind: 'progress',
          };
          value = current.value;
        } else if (this.pos >= this.iterator.length - 1) {
          return null;
        } else {
          value = this.iterator[++this.pos];
        }

        var { keyFor } = this;
        var key = keyFor(value, this.pos);
        var memo = this.pos;
        return {
          key,
          value,
          memo,
        };
      }
    }
  });
  define('@glimmer/runtime', [
    'exports',
    '@glimmer/util',
    '@glimmer/reference',
    '@glimmer/global-context',
    '@glimmer/destroyable',
    '@glimmer/vm',
    '@glimmer/validator',
    '@glimmer/manager',
    '@glimmer/program',
    '@glimmer/owner',
    '@glimmer/runtime',
  ], function (
    _exports,
    _util,
    _reference,
    _globalContext,
    _destroyable2,
    _vm2,
    _validator,
    _manager5,
    _program,
    _owner2,
    _runtime,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.array = _exports.UpdatingVM = _exports.UpdatableBlockImpl = _exports.TemplateOnlyComponentManager = _exports.TemplateOnlyComponent = _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = _exports.SimpleDynamicAttribute = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.RemoteLiveBlock = _exports.RehydrateBuilder = _exports.PartialScopeImpl = _exports.NewElementBuilder = _exports.LowLevelVM = _exports.IDOMChanges = _exports.EnvironmentImpl = _exports.EMPTY_POSITIONAL = _exports.EMPTY_NAMED = _exports.EMPTY_ARGS = _exports.DynamicScopeImpl = _exports.DynamicAttribute = _exports.DOMTreeConstruction = _exports.DOMChanges = _exports.CursorImpl = _exports.CurriedValue = _exports.ConcreteBounds = void 0;
    _exports.clear = clear;
    _exports.clientBuilder = clientBuilder;
    _exports.concat = void 0;
    _exports.createCapturedArgs = createCapturedArgs;
    _exports.curry = curry;
    Object.defineProperty(_exports, 'destroy', {
      enumerable: true,
      get: function () {
        return _destroyable2.destroy;
      },
    });
    _exports.dynamicAttribute = dynamicAttribute;
    _exports.hash = _exports.get = _exports.fn = void 0;
    _exports.inTransaction = inTransaction;
    _exports.invokeHelper = invokeHelper;
    Object.defineProperty(_exports, 'isDestroyed', {
      enumerable: true,
      get: function () {
        return _destroyable2.isDestroyed;
      },
    });
    Object.defineProperty(_exports, 'isDestroying', {
      enumerable: true,
      get: function () {
        return _destroyable2.isDestroying;
      },
    });
    _exports.isSerializationFirstNode = isSerializationFirstNode;
    _exports.isWhitespace = isWhitespace;
    _exports.normalizeProperty = normalizeProperty;
    _exports.on = void 0;
    Object.defineProperty(_exports, 'registerDestructor', {
      enumerable: true,
      get: function () {
        return _destroyable2.registerDestructor;
      },
    });
    _exports.rehydrationBuilder = rehydrationBuilder;
    _exports.reifyArgs = reifyArgs;
    _exports.reifyNamed = reifyNamed$1;
    _exports.reifyPositional = reifyPositional$1;
    _exports.renderComponent = renderComponent;
    _exports.renderMain = renderMain;
    _exports.renderSync = renderSync;
    _exports.resetDebuggerCallback = resetDebuggerCallback;
    _exports.runtimeContext = runtimeContext;
    _exports.setDebuggerCallback = setDebuggerCallback;
    _exports.templateOnlyComponent = templateOnlyComponent;

    class DynamicScopeImpl {
      constructor(bucket) {
        if (bucket) {
          this.bucket = (0, _util.assign)({}, bucket);
        } else {
          this.bucket = {};
        }
      }

      get(key) {
        return this.bucket[key];
      }

      set(key, reference) {
        return (this.bucket[key] = reference);
      }

      child() {
        return new DynamicScopeImpl(this.bucket);
      }
    }

    _exports.DynamicScopeImpl = DynamicScopeImpl;

    class PartialScopeImpl {
      constructor( // the 0th slot is `self`
        slots,
        owner,
        callerScope, // named arguments and blocks passed to a layout that uses eval
        evalScope, // locals in scope when the partial was invoked
        partialMap,
      ) {
        this.slots = slots;
        this.owner = owner;
        this.callerScope = callerScope;
        this.evalScope = evalScope;
        this.partialMap = partialMap;
      }

      static root(self, size, owner) {
        if (size === void 0) {
          size = 0;
        }

        var refs = new Array(size + 1);

        for (var i = 0; i <= size; i++) {
          refs[i] = _reference.UNDEFINED_REFERENCE;
        }

        return new PartialScopeImpl(refs, owner, null, null, null).init({
          self,
        });
      }

      static sized(size, owner) {
        if (size === void 0) {
          size = 0;
        }

        var refs = new Array(size + 1);

        for (var i = 0; i <= size; i++) {
          refs[i] = _reference.UNDEFINED_REFERENCE;
        }

        return new PartialScopeImpl(refs, owner, null, null, null);
      }

      init(_ref) {
        var { self } = _ref;
        this.slots[0] = self;
        return this;
      }

      getSelf() {
        return this.get(0);
      }

      getSymbol(symbol$$1) {
        return this.get(symbol$$1);
      }

      getBlock(symbol$$1) {
        var block = this.get(symbol$$1);
        return block === _reference.UNDEFINED_REFERENCE ? null : block;
      }

      getEvalScope() {
        return this.evalScope;
      }

      getPartialMap() {
        return this.partialMap;
      }

      bind(symbol$$1, value) {
        this.set(symbol$$1, value);
      }

      bindSelf(self) {
        this.set(0, self);
      }

      bindSymbol(symbol$$1, value) {
        this.set(symbol$$1, value);
      }

      bindBlock(symbol$$1, value) {
        this.set(symbol$$1, value);
      }

      bindEvalScope(map) {
        this.evalScope = map;
      }

      bindPartialMap(map) {
        this.partialMap = map;
      }

      bindCallerScope(scope) {
        this.callerScope = scope;
      }

      getCallerScope() {
        return this.callerScope;
      }

      child() {
        return new PartialScopeImpl(
          this.slots.slice(),
          this.owner,
          this.callerScope,
          this.evalScope,
          this.partialMap,
        );
      }

      get(index) {
        if (index >= this.slots.length) {
          throw new RangeError(
            `BUG: cannot get $${index} from scope; length=${this.slots.length}`,
          );
        }

        return this.slots[index];
      }

      set(index, value) {
        if (index >= this.slots.length) {
          throw new RangeError(
            `BUG: cannot get $${index} from scope; length=${this.slots.length}`,
          );
        }

        this.slots[index] = value;
      }
    } // the VM in other classes, but are not intended to be a part of
    // Glimmer's API.

    _exports.PartialScopeImpl = PartialScopeImpl;
    var INNER_VM = (0, _util.symbol)('INNER_VM');
    var DESTROYABLE_STACK = (0, _util.symbol)('DESTROYABLE_STACK');
    var STACKS = (0, _util.symbol)('STACKS');
    var REGISTERS = (0, _util.symbol)('REGISTERS');
    var HEAP = (0, _util.symbol)('HEAP');
    var CONSTANTS = (0, _util.symbol)('CONSTANTS');
    var ARGS = (0, _util.symbol)('ARGS');
    var PC = (0, _util.symbol)('PC');

    class CursorImpl {
      constructor(element, nextSibling) {
        this.element = element;
        this.nextSibling = nextSibling;
      }
    }

    _exports.CursorImpl = CursorImpl;

    class ConcreteBounds {
      constructor(parentNode, first, last) {
        this.parentNode = parentNode;
        this.first = first;
        this.last = last;
      }

      parentElement() {
        return this.parentNode;
      }

      firstNode() {
        return this.first;
      }

      lastNode() {
        return this.last;
      }
    }

    _exports.ConcreteBounds = ConcreteBounds;

    class SingleNodeBounds {
      constructor(parentNode, node) {
        this.parentNode = parentNode;
        this.node = node;
      }

      parentElement() {
        return this.parentNode;
      }

      firstNode() {
        return this.node;
      }

      lastNode() {
        return this.node;
      }
    }

    function move(bounds, reference) {
      var parent = bounds.parentElement();
      var first = bounds.firstNode();
      var last = bounds.lastNode();
      var current = first;

      while (true) {
        var next = current.nextSibling;
        parent.insertBefore(current, reference);

        if (current === last) {
          return next;
        }

        current = next;
      }
    }

    function clear(bounds) {
      var parent = bounds.parentElement();
      var first = bounds.firstNode();
      var last = bounds.lastNode();
      var current = first;

      while (true) {
        var next = current.nextSibling;
        parent.removeChild(current);

        if (current === last) {
          return next;
        }

        current = next;
      }
    }

    function normalizeStringValue(value) {
      if (isEmpty(value)) {
        return '';
      }

      return String(value);
    }

    function shouldCoerce(value) {
      return (
        isString(value) ||
        isEmpty(value) ||
        typeof value === 'boolean' ||
        typeof value === 'number'
      );
    }

    function isEmpty(value) {
      return (
        value === null ||
        value === undefined ||
        typeof value.toString !== 'function'
      );
    }

    function isSafeString(value) {
      return (
        typeof value === 'object' &&
        value !== null &&
        typeof value.toHTML === 'function'
      );
    }

    function isNode(value) {
      return (
        typeof value === 'object' &&
        value !== null &&
        typeof value.nodeType === 'number'
      );
    }

    function isFragment(value) {
      return isNode(value) && value.nodeType === 11;
    }

    function isString(value) {
      return typeof value === 'string';
    }
    /*
     * @method normalizeProperty
     * @param element {HTMLElement}
     * @param slotName {String}
     * @returns {Object} { name, type }
     */

    function normalizeProperty(element, slotName) {
      var type, normalized;

      if (slotName in element) {
        normalized = slotName;
        type = 'prop';
      } else {
        var lower = slotName.toLowerCase();

        if (lower in element) {
          type = 'prop';
          normalized = lower;
        } else {
          type = 'attr';
          normalized = slotName;
        }
      }

      if (
        type === 'prop' &&
        (normalized.toLowerCase() === 'style' ||
          preferAttr(element.tagName, normalized))
      ) {
        type = 'attr';
      }

      return {
        normalized,
        type,
      };
    } // * browser bug
    // * strange spec outlier

    var ATTR_OVERRIDES = {
      INPUT: {
        form: true,
        // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
        // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
        // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
        autocorrect: true,
        // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
        // Safari 9.1.3: 'list' in document.createElement('input') === false
        list: true,
      },
      // element.form is actually a legitimate readOnly property, that is to be
      // mutated, but must be mutated by setAttribute...
      SELECT: {
        form: true,
      },
      OPTION: {
        form: true,
      },
      TEXTAREA: {
        form: true,
      },
      LABEL: {
        form: true,
      },
      FIELDSET: {
        form: true,
      },
      LEGEND: {
        form: true,
      },
      OBJECT: {
        form: true,
      },
      OUTPUT: {
        form: true,
      },
      BUTTON: {
        form: true,
      },
    };

    function preferAttr(tagName, propName) {
      var tag = ATTR_OVERRIDES[tagName.toUpperCase()];
      return (tag && tag[propName.toLowerCase()]) || false;
    }

    var badProtocols = ['javascript:', 'vbscript:'];
    var badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];
    var badTagsForDataURI = ['EMBED'];
    var badAttributes = ['href', 'src', 'background', 'action'];
    var badAttributesForDataURI = ['src'];

    function has(array, item) {
      return array.indexOf(item) !== -1;
    }

    function checkURI(tagName, attribute) {
      return (
        (tagName === null || has(badTags, tagName)) &&
        has(badAttributes, attribute)
      );
    }

    function checkDataURI(tagName, attribute) {
      if (tagName === null) return false;
      return (
        has(badTagsForDataURI, tagName) &&
        has(badAttributesForDataURI, attribute)
      );
    }

    function requiresSanitization(tagName, attribute) {
      return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
    }

    var protocolForUrl;

    if (
      typeof URL === 'object' &&
      URL !== null && // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
      // thinks it is `never` without this `as unknown as any`
      typeof URL.parse === 'function'
    ) {
      // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
      // ultimately, this should be changed (so that we can either rely on the natural `URL` global
      // that exists) but for now we have to detect the specific `FastBoot` case first
      //
      // a future version of `fastboot` will detect if this legacy URL setup is required (by
      // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
      // constructor with `require('url')`.
      var nodeURL = URL;

      protocolForUrl = (url) => {
        var protocol = null;

        if (typeof url === 'string') {
          protocol = nodeURL.parse(url).protocol;
        }

        return protocol === null ? ':' : protocol;
      };
    } else if (typeof URL === 'function') {
      protocolForUrl = (_url) => {
        try {
          var url = new URL(_url);
          return url.protocol;
        } catch (error) {
          // any non-fully qualified url string will trigger an error (because there is no
          // baseURI that we can provide; in that case we **know** that the protocol is
          // "safe" because it isn't specifically one of the `badProtocols` listed above
          // (and those protocols can never be the default baseURI)
          return ':';
        }
      };
    } else {
      // fallback for IE11 support
      var parsingNode = document.createElement('a');

      protocolForUrl = (url) => {
        parsingNode.href = url;
        return parsingNode.protocol;
      };
    }

    function sanitizeAttributeValue(element, attribute, value) {
      var tagName = null;

      if (value === null || value === undefined) {
        return value;
      }

      if (isSafeString(value)) {
        return value.toHTML();
      }

      if (!element) {
        tagName = null;
      } else {
        tagName = element.tagName.toUpperCase();
      }

      var str = normalizeStringValue(value);

      if (checkURI(tagName, attribute)) {
        var protocol = protocolForUrl(str);

        if (has(badProtocols, protocol)) {
          return `unsafe:${str}`;
        }
      }

      if (checkDataURI(tagName, attribute)) {
        return `unsafe:${str}`;
      }

      return str;
    }

    function dynamicAttribute(element, attr, namespace, isTrusting) {
      if (isTrusting === void 0) {
        isTrusting = false;
      }

      var { tagName, namespaceURI } = element;
      var attribute = {
        element,
        name: attr,
        namespace,
      };

      if (
        true &&
        /* DEBUG */
        attr === 'style' &&
        !isTrusting
      ) {
        return new DebugStyleAttributeManager(attribute);
      }

      if (
        namespaceURI === 'http://www.w3.org/2000/svg'
        /* SVG */
      ) {
        return buildDynamicAttribute(tagName, attr, attribute);
      }

      var { type, normalized } = normalizeProperty(element, attr);

      if (type === 'attr') {
        return buildDynamicAttribute(tagName, normalized, attribute);
      } else {
        return buildDynamicProperty(tagName, normalized, attribute);
      }
    }

    function buildDynamicAttribute(tagName, name, attribute) {
      if (requiresSanitization(tagName, name)) {
        return new SafeDynamicAttribute(attribute);
      } else {
        return new SimpleDynamicAttribute(attribute);
      }
    }

    function buildDynamicProperty(tagName, name, attribute) {
      if (requiresSanitization(tagName, name)) {
        return new SafeDynamicProperty(name, attribute);
      }

      if (isUserInputValue(tagName, name)) {
        return new InputValueDynamicAttribute(name, attribute);
      }

      if (isOptionSelected(tagName, name)) {
        return new OptionSelectedDynamicAttribute(name, attribute);
      }

      return new DefaultDynamicProperty(name, attribute);
    }

    class DynamicAttribute {
      constructor(attribute) {
        this.attribute = attribute;
      }
    }

    _exports.DynamicAttribute = DynamicAttribute;

    class SimpleDynamicAttribute extends DynamicAttribute {
      set(dom, value, _env) {
        var normalizedValue = normalizeValue(value);

        if (normalizedValue !== null) {
          var { name, namespace } = this.attribute;

          dom.__setAttribute(name, normalizedValue, namespace);
        }
      }

      update(value, _env) {
        var normalizedValue = normalizeValue(value);
        var { element, name } = this.attribute;

        if (normalizedValue === null) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, normalizedValue);
        }
      }
    }

    _exports.SimpleDynamicAttribute = SimpleDynamicAttribute;

    class DefaultDynamicProperty extends DynamicAttribute {
      constructor(normalizedName, attribute) {
        super(attribute);
        this.normalizedName = normalizedName;
      }

      set(dom, value, _env) {
        if (value !== null && value !== undefined) {
          this.value = value;

          dom.__setProperty(this.normalizedName, value);
        }
      }

      update(value, _env) {
        var { element } = this.attribute;

        if (this.value !== value) {
          element[this.normalizedName] = this.value = value;

          if (value === null || value === undefined) {
            this.removeAttribute();
          }
        }
      }

      removeAttribute() {
        // TODO this sucks but to preserve properties first and to meet current
        // semantics we must do this.
        var { element, namespace } = this.attribute;

        if (namespace) {
          element.removeAttributeNS(namespace, this.normalizedName);
        } else {
          element.removeAttribute(this.normalizedName);
        }
      }
    }

    class SafeDynamicProperty extends DefaultDynamicProperty {
      set(dom, value, env) {
        var { element, name } = this.attribute;
        var sanitized = sanitizeAttributeValue(element, name, value);
        super.set(dom, sanitized, env);
      }

      update(value, env) {
        var { element, name } = this.attribute;
        var sanitized = sanitizeAttributeValue(element, name, value);
        super.update(sanitized, env);
      }
    }

    class SafeDynamicAttribute extends SimpleDynamicAttribute {
      set(dom, value, env) {
        var { element, name } = this.attribute;
        var sanitized = sanitizeAttributeValue(element, name, value);
        super.set(dom, sanitized, env);
      }

      update(value, env) {
        var { element, name } = this.attribute;
        var sanitized = sanitizeAttributeValue(element, name, value);
        super.update(sanitized, env);
      }
    }

    class InputValueDynamicAttribute extends DefaultDynamicProperty {
      set(dom, value) {
        dom.__setProperty('value', normalizeStringValue(value));
      }

      update(value) {
        var input = this.attribute.element;
        var currentValue = input.value;
        var normalizedValue = normalizeStringValue(value);

        if (currentValue !== normalizedValue) {
          input.value = normalizedValue;
        }
      }
    }

    class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
      set(dom, value) {
        if (value !== null && value !== undefined && value !== false) {
          dom.__setProperty('selected', true);
        }
      }

      update(value) {
        var option = this.attribute.element;

        if (value) {
          option.selected = true;
        } else {
          option.selected = false;
        }
      }
    }

    function isOptionSelected(tagName, attribute) {
      return tagName === 'OPTION' && attribute === 'selected';
    }

    function isUserInputValue(tagName, attribute) {
      return (
        (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value'
      );
    }

    function normalizeValue(value) {
      if (
        value === false ||
        value === undefined ||
        value === null ||
        typeof value.toString === 'undefined'
      ) {
        return null;
      }

      if (value === true) {
        return '';
      } // onclick function etc in SSR

      if (typeof value === 'function') {
        return null;
      }

      return String(value);
    }

    var DebugStyleAttributeManager;

    if (
      true
      /* DEBUG */
    ) {
      DebugStyleAttributeManager = class extends SimpleDynamicAttribute {
        set(dom, value, env) {
          (0, _globalContext.warnIfStyleNotTrusted)(value);
          super.set(dom, value, env);
        }

        update(value, env) {
          (0, _globalContext.warnIfStyleNotTrusted)(value);
          super.update(value, env);
        }
      };
    }

    var _a;

    class First {
      constructor(node) {
        this.node = node;
      }

      firstNode() {
        return this.node;
      }
    }

    class Last {
      constructor(node) {
        this.node = node;
      }

      lastNode() {
        return this.node;
      }
    }

    var CURSOR_STACK = (0, _util.symbol)('CURSOR_STACK');

    class NewElementBuilder {
      constructor(env, parentNode, nextSibling) {
        this.constructing = null;
        this.operations = null;
        this[_a] = new _util.Stack();
        this.modifierStack = new _util.Stack();
        this.blockStack = new _util.Stack();
        this.pushElement(parentNode, nextSibling);
        this.env = env;
        this.dom = env.getAppendOperations();
        this.updateOperations = env.getDOM();
      }

      static forInitialRender(env, cursor) {
        return new this(env, cursor.element, cursor.nextSibling).initialize();
      }

      static resume(env, block) {
        var parentNode = block.parentElement();
        var nextSibling = block.reset(env);
        var stack = new this(env, parentNode, nextSibling).initialize();
        stack.pushLiveBlock(block);
        return stack;
      }

      initialize() {
        this.pushSimpleBlock();
        return this;
      }

      debugBlocks() {
        return this.blockStack.toArray();
      }

      get element() {
        return this[CURSOR_STACK].current.element;
      }

      get nextSibling() {
        return this[CURSOR_STACK].current.nextSibling;
      }

      get hasBlocks() {
        return this.blockStack.size > 0;
      }

      block() {
        return this.blockStack.current;
      }

      popElement() {
        this[CURSOR_STACK].pop();
        this[CURSOR_STACK].current;
      }

      pushSimpleBlock() {
        return this.pushLiveBlock(new SimpleLiveBlock(this.element));
      }

      pushUpdatableBlock() {
        return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
      }

      pushBlockList(list) {
        return this.pushLiveBlock(new LiveBlockList(this.element, list));
      }

      pushLiveBlock(block, isRemote) {
        if (isRemote === void 0) {
          isRemote = false;
        }

        var current = this.blockStack.current;

        if (current !== null) {
          if (!isRemote) {
            current.didAppendBounds(block);
          }
        }

        this.__openBlock();

        this.blockStack.push(block);
        return block;
      }

      popBlock() {
        this.block().finalize(this);

        this.__closeBlock();

        return this.blockStack.pop();
      }

      __openBlock() {}

      __closeBlock() {} // todo return seems unused

      openElement(tag) {
        var element = this.__openElement(tag);

        this.constructing = element;
        return element;
      }

      __openElement(tag) {
        return this.dom.createElement(tag, this.element);
      }

      flushElement(modifiers) {
        var parent = this.element;
        var element = this.constructing;

        this.__flushElement(parent, element);

        this.constructing = null;
        this.operations = null;
        this.pushModifiers(modifiers);
        this.pushElement(element, null);
        this.didOpenElement(element);
      }

      __flushElement(parent, constructing) {
        this.dom.insertBefore(parent, constructing, this.nextSibling);
      }

      closeElement() {
        this.willCloseElement();
        this.popElement();
        return this.popModifiers();
      }

      pushRemoteElement(element, guid, insertBefore) {
        return this.__pushRemoteElement(element, guid, insertBefore);
      }

      __pushRemoteElement(element, _guid, insertBefore) {
        this.pushElement(element, insertBefore);

        if (insertBefore === undefined) {
          while (element.lastChild) {
            element.removeChild(element.lastChild);
          }
        }

        var block = new RemoteLiveBlock(element);
        return this.pushLiveBlock(block, true);
      }

      popRemoteElement() {
        this.popBlock();
        this.popElement();
      }

      pushElement(element, nextSibling) {
        if (nextSibling === void 0) {
          nextSibling = null;
        }

        this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));
      }

      pushModifiers(modifiers) {
        this.modifierStack.push(modifiers);
      }

      popModifiers() {
        return this.modifierStack.pop();
      }

      didAppendBounds(bounds) {
        this.block().didAppendBounds(bounds);
        return bounds;
      }

      didAppendNode(node) {
        this.block().didAppendNode(node);
        return node;
      }

      didOpenElement(element) {
        this.block().openElement(element);
        return element;
      }

      willCloseElement() {
        this.block().closeElement();
      }

      appendText(string) {
        return this.didAppendNode(this.__appendText(string));
      }

      __appendText(text) {
        var { dom, element, nextSibling } = this;
        var node = dom.createTextNode(text);
        dom.insertBefore(element, node, nextSibling);
        return node;
      }

      __appendNode(node) {
        this.dom.insertBefore(this.element, node, this.nextSibling);
        return node;
      }

      __appendFragment(fragment) {
        var first = fragment.firstChild;

        if (first) {
          var ret = new ConcreteBounds(this.element, first, fragment.lastChild);
          this.dom.insertBefore(this.element, fragment, this.nextSibling);
          return ret;
        } else {
          return new SingleNodeBounds(this.element, this.__appendComment(''));
        }
      }

      __appendHTML(html) {
        return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
      }

      appendDynamicHTML(value) {
        var bounds = this.trustedContent(value);
        this.didAppendBounds(bounds);
      }

      appendDynamicText(value) {
        var node = this.untrustedContent(value);
        this.didAppendNode(node);
        return node;
      }

      appendDynamicFragment(value) {
        var bounds = this.__appendFragment(value);

        this.didAppendBounds(bounds);
      }

      appendDynamicNode(value) {
        var node = this.__appendNode(value);

        var bounds = new SingleNodeBounds(this.element, node);
        this.didAppendBounds(bounds);
      }

      trustedContent(value) {
        return this.__appendHTML(value);
      }

      untrustedContent(value) {
        return this.__appendText(value);
      }

      appendComment(string) {
        return this.didAppendNode(this.__appendComment(string));
      }

      __appendComment(string) {
        var { dom, element, nextSibling } = this;
        var node = dom.createComment(string);
        dom.insertBefore(element, node, nextSibling);
        return node;
      }

      __setAttribute(name, value, namespace) {
        this.dom.setAttribute(this.constructing, name, value, namespace);
      }

      __setProperty(name, value) {
        this.constructing[name] = value;
      }

      setStaticAttribute(name, value, namespace) {
        this.__setAttribute(name, value, namespace);
      }

      setDynamicAttribute(name, value, trusting, namespace) {
        var element = this.constructing;
        var attribute = dynamicAttribute(element, name, namespace, trusting);
        attribute.set(this, value, this.env);
        return attribute;
      }
    }

    _exports.NewElementBuilder = NewElementBuilder;
    _a = CURSOR_STACK;

    class SimpleLiveBlock {
      constructor(parent) {
        this.parent = parent;
        this.first = null;
        this.last = null;
        this.nesting = 0;
      }

      parentElement() {
        return this.parent;
      }

      firstNode() {
        var first = this.first;
        return first.firstNode();
      }

      lastNode() {
        var last = this.last;
        return last.lastNode();
      }

      openElement(element) {
        this.didAppendNode(element);
        this.nesting++;
      }

      closeElement() {
        this.nesting--;
      }

      didAppendNode(node) {
        if (this.nesting !== 0) return;

        if (!this.first) {
          this.first = new First(node);
        }

        this.last = new Last(node);
      }

      didAppendBounds(bounds) {
        if (this.nesting !== 0) return;

        if (!this.first) {
          this.first = bounds;
        }

        this.last = bounds;
      }

      finalize(stack) {
        if (this.first === null) {
          stack.appendComment('');
        }
      }
    }

    class RemoteLiveBlock extends SimpleLiveBlock {
      constructor(parent) {
        super(parent);
        (0, _destroyable2.registerDestructor)(this, () => {
          // In general, you only need to clear the root of a hierarchy, and should never
          // need to clear any child nodes. This is an important constraint that gives us
          // a strong guarantee that clearing a subtree is a single DOM operation.
          //
          // Because remote blocks are not normally physically nested inside of the tree
          // that they are logically nested inside, we manually clear remote blocks when
          // a logical parent is cleared.
          //
          // HOWEVER, it is currently possible for a remote block to be physically nested
          // inside of the block it is logically contained inside of. This happens when
          // the remote block is appended to the end of the application's entire element.
          //
          // The problem with that scenario is that Glimmer believes that it owns more of
          // the DOM than it actually does. The code is attempting to write past the end
          // of the Glimmer-managed root, but Glimmer isn't aware of that.
          //
          // The correct solution to that problem is for Glimmer to be aware of the end
          // of the bounds that it owns, and once we make that change, this check could
          // be removed.
          //
          // For now, a more targeted fix is to check whether the node was already removed
          // and avoid clearing the node if it was. In most cases this shouldn't happen,
          // so this might hide bugs where the code clears nested nodes unnecessarily,
          // so we should eventually try to do the correct fix.
          if (this.parentElement() === this.firstNode().parentNode) {
            clear(this);
          }
        });
      }
    }

    _exports.RemoteLiveBlock = RemoteLiveBlock;

    class UpdatableBlockImpl extends SimpleLiveBlock {
      reset() {
        (0, _destroyable2.destroy)(this);
        var nextSibling = clear(this);
        this.first = null;
        this.last = null;
        this.nesting = 0;
        return nextSibling;
      }
    } // FIXME: All the noops in here indicate a modelling problem

    _exports.UpdatableBlockImpl = UpdatableBlockImpl;

    class LiveBlockList {
      constructor(parent, boundList) {
        this.parent = parent;
        this.boundList = boundList;
        this.parent = parent;
        this.boundList = boundList;
      }

      parentElement() {
        return this.parent;
      }

      firstNode() {
        var head = this.boundList[0];
        return head.firstNode();
      }

      lastNode() {
        var boundList = this.boundList;
        var tail = boundList[boundList.length - 1];
        return tail.lastNode();
      }

      openElement(_element) {}

      closeElement() {}

      didAppendNode(_node) {}

      didAppendBounds(_bounds) {}

      finalize(_stack) {}
    }

    function clientBuilder(env, cursor) {
      return NewElementBuilder.forInitialRender(env, cursor);
    }

    class AppendOpcodes {
      constructor() {
        this.evaluateOpcode = (0, _util.fillNulls)(
          104,
          /* Size */
        ).slice();
      }

      add(name, evaluate, kind) {
        if (kind === void 0) {
          kind = 'syscall';
        }

        this.evaluateOpcode[name] = {
          syscall: kind !== 'machine',
          evaluate,
        };
      }

      debugBefore(vm, opcode) {
        var params = undefined;
        var opName = undefined;
        var sp;
        return {
          sp: sp,
          pc: vm.fetchValue(_vm2.$pc),
          name: opName,
          params,
          type: opcode.type,
          isMachine: opcode.isMachine,
          size: opcode.size,
          state: undefined,
        };
      }

      debugAfter(vm, pre) {}

      evaluate(vm, opcode, type) {
        var operation = this.evaluateOpcode[type];

        if (operation.syscall) {
          operation.evaluate(vm, opcode);
        } else {
          operation.evaluate(vm[INNER_VM], opcode);
        }
      }
    }

    var APPEND_OPCODES = new AppendOpcodes();

    function createConcatRef(partsRefs) {
      return (0, _reference.createComputeRef)(() => {
        var parts = new Array();

        for (var i = 0; i < partsRefs.length; i++) {
          var value = (0, _reference.valueForRef)(partsRefs[i]);

          if (value !== null && value !== undefined) {
            parts[i] = castToString(value);
          }
        }

        if (parts.length > 0) {
          return parts.join('');
        }

        return null;
      });
    }

    function castToString(value) {
      if (typeof value.toString !== 'function') {
        return '';
      }

      return String(value);
    }

    var TYPE = (0, _util.symbol)('TYPE');
    var INNER = (0, _util.symbol)('INNER');
    var OWNER = (0, _util.symbol)('OWNER');
    var ARGS$1 = (0, _util.symbol)('ARGS');
    var RESOLVED = (0, _util.symbol)('RESOLVED');
    var CURRIED_VALUES = new _util._WeakSet();

    function isCurriedValue(value) {
      return CURRIED_VALUES.has(value);
    }

    function isCurriedType(value, type) {
      return isCurriedValue(value) && value[TYPE] === type;
    }

    class CurriedValue {
      /** @internal */
      constructor(type, inner, owner, args, resolved) {
        if (resolved === void 0) {
          resolved = false;
        }

        CURRIED_VALUES.add(this);
        this[TYPE] = type;
        this[INNER] = inner;
        this[OWNER] = owner;
        this[ARGS$1] = args;
        this[RESOLVED] = resolved;
      }
    }

    _exports.CurriedValue = CurriedValue;

    function resolveCurriedValue(curriedValue) {
      var currentWrapper = curriedValue;
      var positional;
      var named;
      var definition, owner, resolved;

      while (true) {
        var { [ARGS$1]: curriedArgs, [INNER]: inner } = currentWrapper;

        if (curriedArgs !== null) {
          var {
            named: curriedNamed,
            positional: curriedPositional,
          } = curriedArgs;

          if (curriedPositional.length > 0) {
            positional =
              positional === undefined
                ? curriedPositional
                : curriedPositional.concat(positional);
          }

          if (named === undefined) {
            named = [];
          }

          named.unshift(curriedNamed);
        }

        if (!isCurriedValue(inner)) {
          // Save off the owner that this helper was curried with. Later on,
          // we'll fetch the value of this register and set it as the owner on the
          // new root scope.
          definition = inner;
          owner = currentWrapper[OWNER];
          resolved = currentWrapper[RESOLVED];
          break;
        }

        currentWrapper = inner;
      }

      return {
        definition,
        owner,
        resolved,
        positional,
        named,
      };
    }

    function curry(type, spec, owner, args, resolved) {
      if (resolved === void 0) {
        resolved = false;
      }

      return new CurriedValue(type, spec, owner, args, resolved);
    }

    function createCurryRef(type, inner, owner, args, resolver, isStrict) {
      var lastValue, curriedDefinition;
      return (0, _reference.createComputeRef)(() => {
        var value = (0, _reference.valueForRef)(inner);

        if (value === lastValue) {
          return curriedDefinition;
        }

        if (isCurriedType(value, type)) {
          curriedDefinition = args ? curry(type, value, owner, args) : args;
        } else if (
          type === 0 &&
          /* Component */
          typeof value === 'string' &&
          value
        ) {
          // Only components should enter this path, as helpers and modifiers do not
          // support string based resolution
          if (
            true
            /* DEBUG */
          ) {
            if (isStrict) {
              throw new Error(
                `Attempted to resolve a dynamic component with a string definition, \`${value}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`,
              );
            }

            var resolvedDefinition = resolver.lookupComponent(value, owner);

            if (!resolvedDefinition) {
              throw new Error(
                `Attempted to resolve \`${value}\`, which was expected to be a component, but nothing was found.`,
              );
            }
          }

          curriedDefinition = curry(type, value, owner, args);
        } else if ((0, _util.isObject)(value)) {
          curriedDefinition = curry(type, value, owner, args);
        } else {
          curriedDefinition = null;
        }

        lastValue = value;
        return curriedDefinition;
      });
    }
    /*
    The calling convention is:
  
    * 0-N block arguments at the bottom
    * 0-N positional arguments next (left-to-right)
    * 0-N named arguments next
  */

    class VMArgumentsImpl {
      constructor() {
        this.stack = null;
        this.positional = new PositionalArgumentsImpl();
        this.named = new NamedArgumentsImpl();
        this.blocks = new BlockArgumentsImpl();
      }

      empty(stack) {
        var base = stack[REGISTERS][_vm2.$sp] + 1;
        this.named.empty(stack, base);
        this.positional.empty(stack, base);
        this.blocks.empty(stack, base);
        return this;
      }

      setup(stack, names, blockNames, positionalCount, atNames) {
        this.stack = stack;
        /*
             | ... | blocks      | positional  | named |
             | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
       index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
                     ^             ^             ^  ^
                   bbase         pbase       nbase  sp
      */

        var named = this.named;
        var namedCount = names.length;
        var namedBase = stack[REGISTERS][_vm2.$sp] - namedCount + 1;
        named.setup(stack, namedBase, namedCount, names, atNames);
        var positional = this.positional;
        var positionalBase = namedBase - positionalCount;
        positional.setup(stack, positionalBase, positionalCount);
        var blocks = this.blocks;
        var blocksCount = blockNames.length;
        var blocksBase = positionalBase - blocksCount * 3;
        blocks.setup(stack, blocksBase, blocksCount, blockNames);
      }

      get base() {
        return this.blocks.base;
      }

      get length() {
        return (
          this.positional.length + this.named.length + this.blocks.length * 3
        );
      }

      at(pos) {
        return this.positional.at(pos);
      }

      realloc(offset) {
        var { stack } = this;

        if (offset > 0 && stack !== null) {
          var { positional, named } = this;
          var newBase = positional.base + offset;
          var length = positional.length + named.length;

          for (var i = length - 1; i >= 0; i--) {
            stack.copy(i + positional.base, i + newBase);
          }

          positional.base += offset;
          named.base += offset;
          stack[REGISTERS][_vm2.$sp] += offset;
        }
      }

      capture() {
        var positional =
          this.positional.length === 0
            ? EMPTY_POSITIONAL
            : this.positional.capture();
        var named =
          this.named.length === 0 ? EMPTY_NAMED : this.named.capture();
        return {
          named,
          positional,
        };
      }

      clear() {
        var { stack, length } = this;
        if (length > 0 && stack !== null) stack.pop(length);
      }
    }

    var EMPTY_REFERENCES = (0, _util.emptyArray)();

    class PositionalArgumentsImpl {
      constructor() {
        this.base = 0;
        this.length = 0;
        this.stack = null;
        this._references = null;
      }

      empty(stack, base) {
        this.stack = stack;
        this.base = base;
        this.length = 0;
        this._references = EMPTY_REFERENCES;
      }

      setup(stack, base, length) {
        this.stack = stack;
        this.base = base;
        this.length = length;

        if (length === 0) {
          this._references = EMPTY_REFERENCES;
        } else {
          this._references = null;
        }
      }

      at(position) {
        var { base, length, stack } = this;

        if (position < 0 || position >= length) {
          return _reference.UNDEFINED_REFERENCE;
        }

        return stack.get(position, base);
      }

      capture() {
        return this.references;
      }

      prepend(other) {
        var additions = other.length;

        if (additions > 0) {
          var { base, length, stack } = this;
          this.base = base = base - additions;
          this.length = length + additions;

          for (var i = 0; i < additions; i++) {
            stack.set(other[i], i, base);
          }

          this._references = null;
        }
      }

      get references() {
        var references = this._references;

        if (!references) {
          var { stack, base, length } = this;
          references = this._references = stack.slice(base, base + length);
        }

        return references;
      }
    }

    class NamedArgumentsImpl {
      constructor() {
        this.base = 0;
        this.length = 0;
        this._references = null;
        this._names = _util.EMPTY_STRING_ARRAY;
        this._atNames = _util.EMPTY_STRING_ARRAY;
      }

      empty(stack, base) {
        this.stack = stack;
        this.base = base;
        this.length = 0;
        this._references = EMPTY_REFERENCES;
        this._names = _util.EMPTY_STRING_ARRAY;
        this._atNames = _util.EMPTY_STRING_ARRAY;
      }

      setup(stack, base, length, names, atNames) {
        this.stack = stack;
        this.base = base;
        this.length = length;

        if (length === 0) {
          this._references = EMPTY_REFERENCES;
          this._names = _util.EMPTY_STRING_ARRAY;
          this._atNames = _util.EMPTY_STRING_ARRAY;
        } else {
          this._references = null;

          if (atNames) {
            this._names = null;
            this._atNames = names;
          } else {
            this._names = names;
            this._atNames = null;
          }
        }
      }

      get names() {
        var names = this._names;

        if (!names) {
          names = this._names = this._atNames.map(this.toSyntheticName);
        }

        return names;
      }

      get atNames() {
        var atNames = this._atNames;

        if (!atNames) {
          atNames = this._atNames = this._names.map(this.toAtName);
        }

        return atNames;
      }

      has(name) {
        return this.names.indexOf(name) !== -1;
      }

      get(name, atNames) {
        if (atNames === void 0) {
          atNames = false;
        }

        var { base, stack } = this;
        var names = atNames ? this.atNames : this.names;
        var idx = names.indexOf(name);

        if (idx === -1) {
          return _reference.UNDEFINED_REFERENCE;
        }

        var ref = stack.get(idx, base);

        if (
          true
          /* DEBUG */
        ) {
          return (0, _reference.createDebugAliasRef)(
            atNames ? name : `@${name}`,
            ref,
          );
        } else {
          return ref;
        }
      }

      capture() {
        var { names, references } = this;
        var map = (0, _util.dict)();

        for (var i = 0; i < names.length; i++) {
          var name = names[i];

          if (
            true
            /* DEBUG */
          ) {
            map[name] = (0, _reference.createDebugAliasRef)(
              `@${name}`,
              references[i],
            );
          } else {
            map[name] = references[i];
          }
        }

        return map;
      }

      merge(other) {
        var keys = Object.keys(other);

        if (keys.length > 0) {
          var { names, length, stack } = this;
          var newNames = names.slice();

          for (var i = 0; i < keys.length; i++) {
            var name = keys[i];
            var idx = newNames.indexOf(name);

            if (idx === -1) {
              length = newNames.push(name);
              stack.push(other[name]);
            }
          }

          this.length = length;
          this._references = null;
          this._names = newNames;
          this._atNames = null;
        }
      }

      get references() {
        var references = this._references;

        if (!references) {
          var { base, length, stack } = this;
          references = this._references = stack.slice(base, base + length);
        }

        return references;
      }

      toSyntheticName(name) {
        return name.slice(1);
      }

      toAtName(name) {
        return `@${name}`;
      }
    }

    function toSymbolName(name) {
      return `&${name}`;
    }

    var EMPTY_BLOCK_VALUES = (0, _util.emptyArray)();

    class BlockArgumentsImpl {
      constructor() {
        this.internalValues = null;
        this._symbolNames = null;
        this.internalTag = null;
        this.names = _util.EMPTY_STRING_ARRAY;
        this.length = 0;
        this.base = 0;
      }

      empty(stack, base) {
        this.stack = stack;
        this.names = _util.EMPTY_STRING_ARRAY;
        this.base = base;
        this.length = 0;
        this._symbolNames = null;
        this.internalTag = _validator.CONSTANT_TAG;
        this.internalValues = EMPTY_BLOCK_VALUES;
      }

      setup(stack, base, length, names) {
        this.stack = stack;
        this.names = names;
        this.base = base;
        this.length = length;
        this._symbolNames = null;

        if (length === 0) {
          this.internalTag = _validator.CONSTANT_TAG;
          this.internalValues = EMPTY_BLOCK_VALUES;
        } else {
          this.internalTag = null;
          this.internalValues = null;
        }
      }

      get values() {
        var values = this.internalValues;

        if (!values) {
          var { base, length, stack } = this;
          values = this.internalValues = stack.slice(base, base + length * 3);
        }

        return values;
      }

      has(name) {
        return this.names.indexOf(name) !== -1;
      }

      get(name) {
        var idx = this.names.indexOf(name);

        if (idx === -1) {
          return null;
        }

        var { base, stack } = this;
        var table = stack.get(idx * 3, base);
        var scope = stack.get(idx * 3 + 1, base);
        var handle = stack.get(idx * 3 + 2, base);
        return handle === null ? null : [handle, scope, table];
      }

      capture() {
        return new CapturedBlockArgumentsImpl(this.names, this.values);
      }

      get symbolNames() {
        var symbolNames = this._symbolNames;

        if (symbolNames === null) {
          symbolNames = this._symbolNames = this.names.map(toSymbolName);
        }

        return symbolNames;
      }
    }

    class CapturedBlockArgumentsImpl {
      constructor(names, values) {
        this.names = names;
        this.values = values;
        this.length = names.length;
      }

      has(name) {
        return this.names.indexOf(name) !== -1;
      }

      get(name) {
        var idx = this.names.indexOf(name);
        if (idx === -1) return null;
        return [
          this.values[idx * 3 + 2],
          this.values[idx * 3 + 1],
          this.values[idx * 3],
        ];
      }
    }

    function createCapturedArgs(named, positional) {
      return {
        named,
        positional,
      };
    }

    function reifyNamed$1(named) {
      var reified = (0, _util.dict)();

      for (var key in named) {
        reified[key] = (0, _reference.valueForRef)(named[key]);
      }

      return reified;
    }

    function reifyPositional$1(positional) {
      return positional.map(_reference.valueForRef);
    }

    function reifyArgs(args) {
      return {
        named: reifyNamed$1(args.named),
        positional: reifyPositional$1(args.positional),
      };
    }

    var EMPTY_NAMED = Object.freeze(Object.create(null));
    _exports.EMPTY_NAMED = EMPTY_NAMED;
    var EMPTY_POSITIONAL = EMPTY_REFERENCES;
    _exports.EMPTY_POSITIONAL = EMPTY_POSITIONAL;
    var EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
    _exports.EMPTY_ARGS = EMPTY_ARGS;
    APPEND_OPCODES.add(
      77,
      /* Curry */
      (vm, _ref2) => {
        var { op1: type, op2: _isStrict } = _ref2;
        var stack = vm.stack;
        var definition = stack.pop();
        var capturedArgs = stack.pop();
        var owner = vm.getOwner();
        var resolver = vm.runtime.resolver;
        var isStrict = false;

        if (
          true
          /* DEBUG */
        ) {
          // strict check only happens in DEBUG builds, no reason to load it otherwise
          isStrict = vm[CONSTANTS].getValue((0, _util.decodeHandle)(_isStrict));
        }

        vm.loadValue(
          _vm2.$v0,
          createCurryRef(
            type,
            definition,
            owner,
            capturedArgs,
            resolver,
            isStrict,
          ),
        );
      },
    );
    APPEND_OPCODES.add(
      107,
      /* DynamicHelper */
      (vm) => {
        var stack = vm.stack;
        var ref = stack.pop();
        var args = stack.pop().capture();
        var helperRef;
        var initialOwner = vm.getOwner();
        var helperInstanceRef = (0, _reference.createComputeRef)(() => {
          if (helperRef !== undefined) {
            (0, _destroyable2.destroy)(helperRef);
          }

          var definition = (0, _reference.valueForRef)(ref);

          if (
            isCurriedType(
              definition,
              1,
              /* Helper */
            )
          ) {
            var {
              definition: resolvedDef,
              owner,
              positional,
              named,
            } = resolveCurriedValue(definition);

            var _helper = resolveHelper(vm[CONSTANTS], resolvedDef, ref);

            if (named !== undefined) {
              args.named = (0, _util.assign)({}, ...named, args.named);
            }

            if (positional !== undefined) {
              args.positional = positional.concat(args.positional);
            }

            helperRef = _helper(args, owner);
            (0, _destroyable2.associateDestroyableChild)(
              helperInstanceRef,
              helperRef,
            );
          } else if ((0, _util.isObject)(definition)) {
            var _helper2 = resolveHelper(vm[CONSTANTS], definition, ref);

            helperRef = _helper2(args, initialOwner);

            if ((0, _destroyable2._hasDestroyableChildren)(helperRef)) {
              (0, _destroyable2.associateDestroyableChild)(
                helperInstanceRef,
                helperRef,
              );
            }
          } else {
            helperRef = _reference.UNDEFINED_REFERENCE;
          }
        });
        var helperValueRef = (0, _reference.createComputeRef)(() => {
          (0, _reference.valueForRef)(helperInstanceRef);
          return (0, _reference.valueForRef)(helperRef);
        });
        vm.associateDestroyable(helperInstanceRef);
        vm.loadValue(_vm2.$v0, helperValueRef);
      },
    );

    function resolveHelper(constants, definition, ref) {
      var handle = constants.helper(definition, null, true);

      if (
        true &&
        /* DEBUG */
        handle === null
      ) {
        throw new Error(
          `Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \`{{${
            ref.debugLabel
          }}}\` or \`(${
            ref.debugLabel
          })\`, and the incorrect definition is the value at the path \`${
            ref.debugLabel
          }\`, which was: ${(0, _util.debugToString)(definition)}`,
        );
      }

      return constants.getValue(handle);
    }

    APPEND_OPCODES.add(
      16,
      /* Helper */
      (vm, _ref3) => {
        var { op1: handle } = _ref3;
        var stack = vm.stack;
        var helper = vm[CONSTANTS].getValue(handle);
        var args = stack.pop();
        var value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());

        if ((0, _destroyable2._hasDestroyableChildren)(value)) {
          vm.associateDestroyable(value);
        }

        vm.loadValue(_vm2.$v0, value);
      },
    );
    APPEND_OPCODES.add(
      21,
      /* GetVariable */
      (vm, _ref4) => {
        var { op1: symbol$$1 } = _ref4;
        var expr = vm.referenceForSymbol(symbol$$1);
        vm.stack.push(expr);
      },
    );
    APPEND_OPCODES.add(
      19,
      /* SetVariable */
      (vm, _ref5) => {
        var { op1: symbol$$1 } = _ref5;
        var expr = vm.stack.pop();
        vm.scope().bindSymbol(symbol$$1, expr);
      },
    );
    APPEND_OPCODES.add(
      20,
      /* SetBlock */
      (vm, _ref6) => {
        var { op1: symbol$$1 } = _ref6;
        var handle = vm.stack.pop();
        var scope = vm.stack.pop();
        var table = vm.stack.pop();
        vm.scope().bindBlock(symbol$$1, [handle, scope, table]);
      },
    );
    APPEND_OPCODES.add(
      102,
      /* ResolveMaybeLocal */
      (vm, _ref7) => {
        var { op1: _name } = _ref7;
        var name = vm[CONSTANTS].getValue(_name);
        var locals = vm.scope().getPartialMap();
        var ref = locals[name];

        if (ref === undefined) {
          ref = (0, _reference.childRefFor)(vm.getSelf(), name);
        }

        vm.stack.push(ref);
      },
    );
    APPEND_OPCODES.add(
      37,
      /* RootScope */
      (vm, _ref8) => {
        var { op1: symbols } = _ref8;
        vm.pushRootScope(symbols, vm.getOwner());
      },
    );
    APPEND_OPCODES.add(
      22,
      /* GetProperty */
      (vm, _ref9) => {
        var { op1: _key } = _ref9;
        var key = vm[CONSTANTS].getValue(_key);
        var expr = vm.stack.pop();
        vm.stack.push((0, _reference.childRefFor)(expr, key));
      },
    );
    APPEND_OPCODES.add(
      23,
      /* GetBlock */
      (vm, _ref10) => {
        var { op1: _block } = _ref10;
        var { stack } = vm;
        var block = vm.scope().getBlock(_block);
        stack.push(block);
      },
    );
    APPEND_OPCODES.add(
      24,
      /* SpreadBlock */
      (vm) => {
        var { stack } = vm;
        var block = stack.pop();

        if (block && !isUndefinedReference(block)) {
          var [handleOrCompilable, scope, table] = block;
          stack.push(table);
          stack.push(scope);
          stack.push(handleOrCompilable);
        } else {
          stack.push(null);
          stack.push(null);
          stack.push(null);
        }
      },
    );

    function isUndefinedReference(input) {
      return input === _reference.UNDEFINED_REFERENCE;
    }

    APPEND_OPCODES.add(
      25,
      /* HasBlock */
      (vm) => {
        var { stack } = vm;
        var block = stack.pop();

        if (block && !isUndefinedReference(block)) {
          stack.push(_reference.TRUE_REFERENCE);
        } else {
          stack.push(_reference.FALSE_REFERENCE);
        }
      },
    );
    APPEND_OPCODES.add(
      26,
      /* HasBlockParams */
      (vm) => {
        // FIXME(mmun): should only need to push the symbol table
        var block = vm.stack.pop();
        var scope = vm.stack.pop();
        var table = vm.stack.pop();
        var hasBlockParams = table && table.parameters.length;
        vm.stack.push(
          hasBlockParams
            ? _reference.TRUE_REFERENCE
            : _reference.FALSE_REFERENCE,
        );
      },
    );
    APPEND_OPCODES.add(
      27,
      /* Concat */
      (vm, _ref11) => {
        var { op1: count } = _ref11;
        var out = new Array(count);

        for (var i = count; i > 0; i--) {
          var offset = i - 1;
          out[offset] = vm.stack.pop();
        }

        vm.stack.push(createConcatRef(out));
      },
    );
    APPEND_OPCODES.add(
      109,
      /* IfInline */
      (vm) => {
        var condition = vm.stack.pop();
        var truthy = vm.stack.pop();
        var falsy = vm.stack.pop();
        vm.stack.push(
          (0, _reference.createComputeRef)(() => {
            if (
              (0, _globalContext.toBool)(
                (0, _reference.valueForRef)(condition),
              ) === true
            ) {
              return (0, _reference.valueForRef)(truthy);
            } else {
              return (0, _reference.valueForRef)(falsy);
            }
          }),
        );
      },
    );
    APPEND_OPCODES.add(
      110,
      /* Not */
      (vm) => {
        var ref = vm.stack.pop();
        vm.stack.push(
          (0, _reference.createComputeRef)(() => {
            return !(0, _globalContext.toBool)(
              (0, _reference.valueForRef)(ref),
            );
          }),
        );
      },
    );
    APPEND_OPCODES.add(
      111,
      /* GetDynamicVar */
      (vm) => {
        var scope = vm.dynamicScope();
        var stack = vm.stack;
        var nameRef = stack.pop();
        stack.push(
          (0, _reference.createComputeRef)(() => {
            var name = String((0, _reference.valueForRef)(nameRef));
            return (0, _reference.valueForRef)(scope.get(name));
          }),
        );
      },
    );
    APPEND_OPCODES.add(
      112,
      /* Log */
      (vm) => {
        var { positional } = vm.stack.pop().capture();
        vm.loadValue(
          _vm2.$v0,
          (0, _reference.createComputeRef)(() => {
            // eslint-disable-next-line no-console
            console.log(...reifyPositional$1(positional));
          }),
        );
      },
    );

    function resolveComponent(resolver, constants, name, owner) {
      var definition = resolver.lookupComponent(name, owner);

      if (
        true &&
        /* DEBUG */
        !definition
      ) {
        throw new Error(
          `Attempted to resolve \`${name}\`, which was expected to be a component, but nothing was found.`,
        );
      }

      return constants.resolvedComponent(definition, name);
    }
    /** @internal */

    function hasCustomDebugRenderTreeLifecycle(manager) {
      return 'getDebugCustomRenderTree' in manager;
    }

    function createClassListRef(list) {
      return (0, _reference.createComputeRef)(() => {
        var ret = [];

        for (var i = 0; i < list.length; i++) {
          var ref = list[i];
          var value = normalizeStringValue(
            typeof ref === 'string'
              ? ref
              : (0, _reference.valueForRef)(list[i]),
          );
          if (value) ret.push(value);
        }

        return ret.length === 0 ? null : ret.join(' ');
      });
    }

    APPEND_OPCODES.add(
      39,
      /* ChildScope */
      (vm) => vm.pushChildScope(),
    );
    APPEND_OPCODES.add(
      40,
      /* PopScope */
      (vm) => vm.popScope(),
    );
    APPEND_OPCODES.add(
      59,
      /* PushDynamicScope */
      (vm) => vm.pushDynamicScope(),
    );
    APPEND_OPCODES.add(
      60,
      /* PopDynamicScope */
      (vm) => vm.popDynamicScope(),
    );
    APPEND_OPCODES.add(
      28,
      /* Constant */
      (vm, _ref12) => {
        var { op1: other } = _ref12;
        vm.stack.push(vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)));
      },
    );
    APPEND_OPCODES.add(
      29,
      /* ConstantReference */
      (vm, _ref13) => {
        var { op1: other } = _ref13;
        vm.stack.push(
          (0, _reference.createConstRef)(
            vm[CONSTANTS].getValue((0, _util.decodeHandle)(other)),
            false,
          ),
        );
      },
    );
    APPEND_OPCODES.add(
      30,
      /* Primitive */
      (vm, _ref14) => {
        var { op1: primitive } = _ref14;
        var stack = vm.stack;

        if ((0, _util.isHandle)(primitive)) {
          // it is a handle which does not already exist on the stack
          var value = vm[CONSTANTS].getValue(
            (0, _util.decodeHandle)(primitive),
          );
          stack.push(value);
        } else {
          // is already an encoded immediate or primitive handle
          stack.push((0, _util.decodeImmediate)(primitive));
        }
      },
    );
    APPEND_OPCODES.add(
      31,
      /* PrimitiveReference */
      (vm) => {
        var stack = vm.stack;
        var value = stack.pop();
        var ref;

        if (value === undefined) {
          ref = _reference.UNDEFINED_REFERENCE;
        } else if (value === null) {
          ref = _reference.NULL_REFERENCE;
        } else if (value === true) {
          ref = _reference.TRUE_REFERENCE;
        } else if (value === false) {
          ref = _reference.FALSE_REFERENCE;
        } else {
          ref = (0, _reference.createPrimitiveRef)(value);
        }

        stack.push(ref);
      },
    );
    APPEND_OPCODES.add(
      33,
      /* Dup */
      (vm, _ref15) => {
        var { op1: register, op2: offset } = _ref15;
        var position = vm.fetchValue(register) - offset;
        vm.stack.dup(position);
      },
    );
    APPEND_OPCODES.add(
      34,
      /* Pop */
      (vm, _ref16) => {
        var { op1: count } = _ref16;
        vm.stack.pop(count);
      },
    );
    APPEND_OPCODES.add(
      35,
      /* Load */
      (vm, _ref17) => {
        var { op1: register } = _ref17;
        vm.load(register);
      },
    );
    APPEND_OPCODES.add(
      36,
      /* Fetch */
      (vm, _ref18) => {
        var { op1: register } = _ref18;
        vm.fetch(register);
      },
    );
    APPEND_OPCODES.add(
      58,
      /* BindDynamicScope */
      (vm, _ref19) => {
        var { op1: _names } = _ref19;
        var names = vm[CONSTANTS].getArray(_names);
        vm.bindDynamicScope(names);
      },
    );
    APPEND_OPCODES.add(
      69,
      /* Enter */
      (vm, _ref20) => {
        var { op1: args } = _ref20;
        vm.enter(args);
      },
    );
    APPEND_OPCODES.add(
      70,
      /* Exit */
      (vm) => {
        vm.exit();
      },
    );
    APPEND_OPCODES.add(
      63,
      /* PushSymbolTable */
      (vm, _ref21) => {
        var { op1: _table } = _ref21;
        var stack = vm.stack;
        stack.push(vm[CONSTANTS].getValue(_table));
      },
    );
    APPEND_OPCODES.add(
      62,
      /* PushBlockScope */
      (vm) => {
        var stack = vm.stack;
        stack.push(vm.scope());
      },
    );
    APPEND_OPCODES.add(
      61,
      /* CompileBlock */
      (vm) => {
        var stack = vm.stack;
        var block = stack.pop();

        if (block) {
          stack.push(vm.compile(block));
        } else {
          stack.push(null);
        }
      },
    );
    APPEND_OPCODES.add(
      64,
      /* InvokeYield */
      (vm) => {
        var { stack } = vm;
        var handle = stack.pop();
        var scope = stack.pop();
        var table = stack.pop();
        var args = stack.pop();

        if (table === null) {
          // To balance the pop{Frame,Scope}
          vm.pushFrame();
          vm.pushScope(scope !== null && scope !== void 0 ? scope : vm.scope());
          return;
        }

        var invokingScope = scope; // If necessary, create a child scope

        {
          var locals = table.parameters;
          var localsCount = locals.length;

          if (localsCount > 0) {
            invokingScope = invokingScope.child();

            for (var i = 0; i < localsCount; i++) {
              invokingScope.bindSymbol(locals[i], args.at(i));
            }
          }
        }
        vm.pushFrame();
        vm.pushScope(invokingScope);
        vm.call(handle);
      },
    );
    APPEND_OPCODES.add(
      65,
      /* JumpIf */
      (vm, _ref22) => {
        var { op1: target } = _ref22;
        var reference = vm.stack.pop();
        var value = Boolean((0, _reference.valueForRef)(reference));

        if ((0, _reference.isConstRef)(reference)) {
          if (value === true) {
            vm.goto(target);
          }
        } else {
          if (value === true) {
            vm.goto(target);
          }

          vm.updateWith(new Assert(reference));
        }
      },
    );
    APPEND_OPCODES.add(
      66,
      /* JumpUnless */
      (vm, _ref23) => {
        var { op1: target } = _ref23;
        var reference = vm.stack.pop();
        var value = Boolean((0, _reference.valueForRef)(reference));

        if ((0, _reference.isConstRef)(reference)) {
          if (value === false) {
            vm.goto(target);
          }
        } else {
          if (value === false) {
            vm.goto(target);
          }

          vm.updateWith(new Assert(reference));
        }
      },
    );
    APPEND_OPCODES.add(
      67,
      /* JumpEq */
      (vm, _ref24) => {
        var { op1: target, op2: comparison } = _ref24;
        var other = vm.stack.peek();

        if (other === comparison) {
          vm.goto(target);
        }
      },
    );
    APPEND_OPCODES.add(
      68,
      /* AssertSame */
      (vm) => {
        var reference = vm.stack.peek();

        if ((0, _reference.isConstRef)(reference) === false) {
          vm.updateWith(new Assert(reference));
        }
      },
    );
    APPEND_OPCODES.add(
      71,
      /* ToBoolean */
      (vm) => {
        var { stack } = vm;
        var valueRef = stack.pop();
        stack.push(
          (0, _reference.createComputeRef)(() =>
            (0, _globalContext.toBool)((0, _reference.valueForRef)(valueRef)),
          ),
        );
      },
    );

    class Assert {
      constructor(ref) {
        this.ref = ref;
        this.last = (0, _reference.valueForRef)(ref);
      }

      evaluate(vm) {
        var { last, ref } = this;
        var current = (0, _reference.valueForRef)(ref);

        if (last !== current) {
          vm.throw();
        }
      }
    }

    class AssertFilter {
      constructor(ref, filter) {
        this.ref = ref;
        this.filter = filter;
        this.last = filter((0, _reference.valueForRef)(ref));
      }

      evaluate(vm) {
        var { last, ref, filter } = this;
        var current = filter((0, _reference.valueForRef)(ref));

        if (last !== current) {
          vm.throw();
        }
      }
    }

    class JumpIfNotModifiedOpcode {
      constructor() {
        this.tag = _validator.CONSTANT_TAG;
        this.lastRevision = _validator.INITIAL;
      }

      finalize(tag, target) {
        this.target = target;
        this.didModify(tag);
      }

      evaluate(vm) {
        var { tag, target, lastRevision } = this;

        if (
          !vm.alwaysRevalidate &&
          (0, _validator.validateTag)(tag, lastRevision)
        ) {
          (0, _validator.consumeTag)(tag);
          vm.goto(target);
        }
      }

      didModify(tag) {
        this.tag = tag;
        this.lastRevision = (0, _validator.valueForTag)(this.tag);
        (0, _validator.consumeTag)(tag);
      }
    }

    class BeginTrackFrameOpcode {
      constructor(debugLabel) {
        this.debugLabel = debugLabel;
      }

      evaluate() {
        (0, _validator.beginTrackFrame)(this.debugLabel);
      }
    }

    class EndTrackFrameOpcode {
      constructor(target) {
        this.target = target;
      }

      evaluate() {
        var tag = (0, _validator.endTrackFrame)();
        this.target.didModify(tag);
      }
    }

    APPEND_OPCODES.add(
      41,
      /* Text */
      (vm, _ref25) => {
        var { op1: text } = _ref25;
        vm.elements().appendText(vm[CONSTANTS].getValue(text));
      },
    );
    APPEND_OPCODES.add(
      42,
      /* Comment */
      (vm, _ref26) => {
        var { op1: text } = _ref26;
        vm.elements().appendComment(vm[CONSTANTS].getValue(text));
      },
    );
    APPEND_OPCODES.add(
      48,
      /* OpenElement */
      (vm, _ref27) => {
        var { op1: tag } = _ref27;
        vm.elements().openElement(vm[CONSTANTS].getValue(tag));
      },
    );
    APPEND_OPCODES.add(
      49,
      /* OpenDynamicElement */
      (vm) => {
        var tagName = (0, _reference.valueForRef)(vm.stack.pop());
        vm.elements().openElement(tagName);
      },
    );
    APPEND_OPCODES.add(
      50,
      /* PushRemoteElement */
      (vm) => {
        var elementRef = vm.stack.pop();
        var insertBeforeRef = vm.stack.pop();
        var guidRef = vm.stack.pop();
        var element = (0, _reference.valueForRef)(elementRef);
        var insertBefore = (0, _reference.valueForRef)(insertBeforeRef);
        var guid = (0, _reference.valueForRef)(guidRef);

        if (!(0, _reference.isConstRef)(elementRef)) {
          vm.updateWith(new Assert(elementRef));
        }

        if (
          insertBefore !== undefined &&
          !(0, _reference.isConstRef)(insertBeforeRef)
        ) {
          vm.updateWith(new Assert(insertBeforeRef));
        }

        var block = vm
          .elements()
          .pushRemoteElement(element, guid, insertBefore);
        if (block) vm.associateDestroyable(block);
      },
    );
    APPEND_OPCODES.add(
      56,
      /* PopRemoteElement */
      (vm) => {
        vm.elements().popRemoteElement();
      },
    );
    APPEND_OPCODES.add(
      54,
      /* FlushElement */
      (vm) => {
        var operations = vm.fetchValue(_vm2.$t0);
        var modifiers = null;

        if (operations) {
          modifiers = operations.flush(vm);
          vm.loadValue(_vm2.$t0, null);
        }

        vm.elements().flushElement(modifiers);
      },
    );
    APPEND_OPCODES.add(
      55,
      /* CloseElement */
      (vm) => {
        var modifiers = vm.elements().closeElement();

        if (modifiers) {
          modifiers.forEach((modifier) => {
            vm.env.scheduleInstallModifier(modifier);
            var { manager, state } = modifier;
            var d = manager.getDestroyable(state);

            if (d) {
              vm.associateDestroyable(d);
            }
          });
        }
      },
    );
    APPEND_OPCODES.add(
      57,
      /* Modifier */
      (vm, _ref28) => {
        var { op1: handle } = _ref28;

        if (vm.env.isInteractive === false) {
          return;
        }

        var owner = vm.getOwner();
        var args = vm.stack.pop();
        var definition = vm[CONSTANTS].getValue(handle);
        var { manager } = definition;
        var { constructing } = vm.elements();
        var state = manager.create(
          owner,
          constructing,
          definition.state,
          args.capture(),
        );
        var instance = {
          manager,
          state,
          definition,
        };
        var operations = vm.fetchValue(_vm2.$t0);
        operations.addModifier(instance);
        var tag = manager.getTag(state);

        if (tag !== null) {
          (0, _validator.consumeTag)(tag);
          return vm.updateWith(new UpdateModifierOpcode(tag, instance));
        }
      },
    );
    APPEND_OPCODES.add(
      108,
      /* DynamicModifier */
      (vm) => {
        if (vm.env.isInteractive === false) {
          return;
        }

        var { stack, [CONSTANTS]: constants } = vm;
        var ref = stack.pop();
        var args = stack.pop().capture();
        var { constructing } = vm.elements();
        var initialOwner = vm.getOwner();
        var instanceRef = (0, _reference.createComputeRef)(() => {
          var value = (0, _reference.valueForRef)(ref);
          var owner;

          if (!(0, _util.isObject)(value)) {
            return;
          }

          var hostDefinition;

          if (
            isCurriedType(
              value,
              2,
              /* Modifier */
            )
          ) {
            var {
              definition: resolvedDefinition,
              owner: curriedOwner,
              positional,
              named,
            } = resolveCurriedValue(value);
            hostDefinition = resolvedDefinition;
            owner = curriedOwner;

            if (positional !== undefined) {
              args.positional = positional.concat(args.positional);
            }

            if (named !== undefined) {
              args.named = (0, _util.assign)({}, ...named, args.named);
            }
          } else {
            hostDefinition = value;
            owner = initialOwner;
          }

          var handle = constants.modifier(hostDefinition, null, true);

          if (
            true &&
            /* DEBUG */
            handle === null
          ) {
            throw new Error(
              `Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \`{{${
                ref.debugLabel
              }}}\`, and the incorrect definition is the value at the path \`${
                ref.debugLabel
              }\`, which was: ${(0, _util.debugToString)(hostDefinition)}`,
            );
          }

          var definition = constants.getValue(handle);
          var { manager } = definition;
          var state = manager.create(
            owner,
            constructing,
            definition.state,
            args,
          );
          return {
            manager,
            state,
            definition,
          };
        });
        var instance = (0, _reference.valueForRef)(instanceRef);
        var tag = null;

        if (instance !== undefined) {
          var operations = vm.fetchValue(_vm2.$t0);
          operations.addModifier(instance);
          tag = instance.manager.getTag(instance.state);

          if (tag !== null) {
            (0, _validator.consumeTag)(tag);
          }
        }

        if (!(0, _reference.isConstRef)(ref) || tag) {
          return vm.updateWith(
            new UpdateDynamicModifierOpcode(tag, instance, instanceRef),
          );
        }
      },
    );

    class UpdateModifierOpcode {
      constructor(tag, modifier) {
        this.tag = tag;
        this.modifier = modifier;
        this.lastUpdated = (0, _validator.valueForTag)(tag);
      }

      evaluate(vm) {
        var { modifier, tag, lastUpdated } = this;
        (0, _validator.consumeTag)(tag);

        if (!(0, _validator.validateTag)(tag, lastUpdated)) {
          vm.env.scheduleUpdateModifier(modifier);
          this.lastUpdated = (0, _validator.valueForTag)(tag);
        }
      }
    }

    class UpdateDynamicModifierOpcode {
      constructor(tag, instance, instanceRef) {
        this.tag = tag;
        this.instance = instance;
        this.instanceRef = instanceRef;
        this.lastUpdated = (0, _validator.valueForTag)(
          tag !== null && tag !== void 0 ? tag : _validator.CURRENT_TAG,
        );
      }

      evaluate(vm) {
        var { tag, lastUpdated, instance, instanceRef } = this;
        var newInstance = (0, _reference.valueForRef)(instanceRef);

        if (newInstance !== instance) {
          if (instance !== undefined) {
            var destroyable = instance.manager.getDestroyable(instance.state);

            if (destroyable !== null) {
              (0, _destroyable2.destroy)(destroyable);
            }
          }

          if (newInstance !== undefined) {
            var { manager, state } = newInstance;

            var _destroyable = manager.getDestroyable(state);

            if (_destroyable !== null) {
              (0, _destroyable2.associateDestroyableChild)(this, _destroyable);
            }

            tag = manager.getTag(state);

            if (tag !== null) {
              this.lastUpdated = (0, _validator.valueForTag)(tag);
            }

            this.tag = tag;
            vm.env.scheduleInstallModifier(newInstance);
          }

          this.instance = newInstance;
        } else if (
          tag !== null &&
          !(0, _validator.validateTag)(tag, lastUpdated)
        ) {
          vm.env.scheduleUpdateModifier(instance);
          this.lastUpdated = (0, _validator.valueForTag)(tag);
        }

        if (tag !== null) {
          (0, _validator.consumeTag)(tag);
        }
      }
    }

    APPEND_OPCODES.add(
      51,
      /* StaticAttr */
      (vm, _ref29) => {
        var { op1: _name, op2: _value, op3: _namespace } = _ref29;
        var name = vm[CONSTANTS].getValue(_name);
        var value = vm[CONSTANTS].getValue(_value);
        var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
        vm.elements().setStaticAttribute(name, value, namespace);
      },
    );
    APPEND_OPCODES.add(
      52,
      /* DynamicAttr */
      (vm, _ref30) => {
        var { op1: _name, op2: _trusting, op3: _namespace } = _ref30;
        var name = vm[CONSTANTS].getValue(_name);
        var trusting = vm[CONSTANTS].getValue(_trusting);
        var reference = vm.stack.pop();
        var value = (0, _reference.valueForRef)(reference);
        var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
        var attribute = vm
          .elements()
          .setDynamicAttribute(name, value, trusting, namespace);

        if (!(0, _reference.isConstRef)(reference)) {
          vm.updateWith(
            new UpdateDynamicAttributeOpcode(reference, attribute, vm.env),
          );
        }
      },
    );

    class UpdateDynamicAttributeOpcode {
      constructor(reference, attribute, env) {
        var initialized = false;
        this.updateRef = (0, _reference.createComputeRef)(() => {
          var value = (0, _reference.valueForRef)(reference);

          if (initialized === true) {
            attribute.update(value, env);
          } else {
            initialized = true;
          }
        });
        (0, _reference.valueForRef)(this.updateRef);
      }

      evaluate() {
        (0, _reference.valueForRef)(this.updateRef);
      }
    }

    APPEND_OPCODES.add(
      78,
      /* PushComponentDefinition */
      (vm, _ref31) => {
        var { op1: handle } = _ref31;
        var definition = vm[CONSTANTS].getValue(handle);
        var { manager, capabilities } = definition;
        var instance = {
          definition,
          manager,
          capabilities,
          state: null,
          handle: null,
          table: null,
          lookup: null,
        };
        vm.stack.push(instance);
      },
    );
    APPEND_OPCODES.add(
      80,
      /* ResolveDynamicComponent */
      (vm, _ref32) => {
        var { op1: _isStrict } = _ref32;
        var stack = vm.stack;
        var component = (0, _reference.valueForRef)(stack.pop());
        var constants = vm[CONSTANTS];
        var owner = vm.getOwner();
        var isStrict = constants.getValue(_isStrict);
        vm.loadValue(_vm2.$t1, null); // Clear the temp register

        var definition;

        if (typeof component === 'string') {
          if (
            true &&
            /* DEBUG */
            isStrict
          ) {
            throw new Error(
              `Attempted to resolve a dynamic component with a string definition, \`${component}\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`,
            );
          }

          var resolvedDefinition = resolveComponent(
            vm.runtime.resolver,
            constants,
            component,
            owner,
          );
          definition = resolvedDefinition;
        } else if (isCurriedValue(component)) {
          definition = component;
        } else {
          definition = constants.component(component, owner);
        }

        stack.push(definition);
      },
    );
    APPEND_OPCODES.add(
      81,
      /* ResolveCurriedComponent */
      (vm) => {
        var stack = vm.stack;
        var ref = stack.pop();
        var value = (0, _reference.valueForRef)(ref);
        var constants = vm[CONSTANTS];
        var definition;

        if (
          true &&
          /* DEBUG */
          !(
            typeof value === 'function' ||
            (typeof value === 'object' && value !== null)
          )
        ) {
          throw new Error(
            `Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where "${ref.debugLabel}" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`,
          );
        }

        if (isCurriedValue(value)) {
          definition = value;
        } else {
          definition = constants.component(value, vm.getOwner(), true);

          if (
            true &&
            /* DEBUG */
            definition === null
          ) {
            throw new Error(
              `Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \`<${
                ref.debugLabel
              }>\` or \`{{${
                ref.debugLabel
              }}}\`, and the incorrect definition is the value at the path \`${
                ref.debugLabel
              }\`, which was: ${(0, _util.debugToString)(value)}`,
            );
          }
        }

        stack.push(definition);
      },
    );
    APPEND_OPCODES.add(
      79,
      /* PushDynamicComponentInstance */
      (vm) => {
        var { stack } = vm;
        var definition = stack.pop();
        var capabilities, manager;

        if (isCurriedValue(definition)) {
          manager = capabilities = null;
        } else {
          manager = definition.manager;
          capabilities = definition.capabilities;
        }

        stack.push({
          definition,
          capabilities,
          manager,
          state: null,
          handle: null,
          table: null,
        });
      },
    );
    APPEND_OPCODES.add(
      82,
      /* PushArgs */
      (vm, _ref33) => {
        var { op1: _names, op2: _blockNames, op3: flags } = _ref33;
        var stack = vm.stack;
        var names = vm[CONSTANTS].getArray(_names);
        var positionalCount = flags >> 4;
        var atNames = flags & 0b1000;
        var blockNames =
          flags & 0b0111
            ? vm[CONSTANTS].getArray(_blockNames)
            : _util.EMPTY_STRING_ARRAY;
        vm[ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);
        stack.push(vm[ARGS]);
      },
    );
    APPEND_OPCODES.add(
      83,
      /* PushEmptyArgs */
      (vm) => {
        var { stack } = vm;
        stack.push(vm[ARGS].empty(stack));
      },
    );
    APPEND_OPCODES.add(
      86,
      /* CaptureArgs */
      (vm) => {
        var stack = vm.stack;
        var args = stack.pop();
        var capturedArgs = args.capture();
        stack.push(capturedArgs);
      },
    );
    APPEND_OPCODES.add(
      85,
      /* PrepareArgs */
      (vm, _ref34) => {
        var { op1: _state } = _ref34;
        var stack = vm.stack;
        var instance = vm.fetchValue(_state);
        var args = stack.pop();
        var { definition } = instance;

        if (
          isCurriedType(
            definition,
            0,
            /* Component */
          )
        ) {
          var constants = vm[CONSTANTS];
          var {
            definition: resolvedDefinition,
            owner,
            resolved,
            positional,
            named,
          } = resolveCurriedValue(definition);

          if (resolved === true) {
            definition = resolvedDefinition;
          } else if (typeof resolvedDefinition === 'string') {
            var resolvedValue = vm.runtime.resolver.lookupComponent(
              resolvedDefinition,
              owner,
            );
            definition = constants.resolvedComponent(
              resolvedValue,
              resolvedDefinition,
            );
          } else {
            definition = constants.component(resolvedDefinition, owner);
          }

          if (named !== undefined) {
            args.named.merge((0, _util.assign)({}, ...named));
          }

          if (positional !== undefined) {
            args.realloc(positional.length);
            args.positional.prepend(positional);
          }

          var { manager: _manager } = definition;
          instance.definition = definition;
          instance.manager = _manager;
          instance.capabilities = definition.capabilities; // Save off the owner that this component was curried with. Later on,
          // we'll fetch the value of this register and set it as the owner on the
          // new root scope.

          vm.loadValue(_vm2.$t1, owner);
        }

        var { manager, state } = definition;
        var capabilities = instance.capabilities;

        if (
          !(0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            4,
            /* PrepareArgs */
          )
        ) {
          stack.push(args);
          return;
        }

        var blocks = args.blocks.values;
        var blockNames = args.blocks.names;
        var preparedArgs = manager.prepareArgs(state, args);

        if (preparedArgs) {
          args.clear();

          for (var i = 0; i < blocks.length; i++) {
            stack.push(blocks[i]);
          }

          var { positional: _positional, named: _named } = preparedArgs;
          var positionalCount = _positional.length;

          for (var _i = 0; _i < positionalCount; _i++) {
            stack.push(_positional[_i]);
          }

          var names = Object.keys(_named);

          for (var _i2 = 0; _i2 < names.length; _i2++) {
            stack.push(_named[names[_i2]]);
          }

          args.setup(stack, names, blockNames, positionalCount, false);
        }

        stack.push(args);
      },
    );
    APPEND_OPCODES.add(
      87,
      /* CreateComponent */
      (vm, _ref35) => {
        var { op1: flags, op2: _state } = _ref35;
        var instance = vm.fetchValue(_state);
        var { definition, manager, capabilities } = instance;

        if (
          !(0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            512,
            /* CreateInstance */
          )
        ) {
          // TODO: Closure and Main components are always invoked dynamically, so this
          // opcode may run even if this capability is not enabled. In the future we
          // should handle this in a better way.
          return;
        }

        var dynamicScope = null;

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            64,
            /* DynamicScope */
          )
        ) {
          dynamicScope = vm.dynamicScope();
        }

        var hasDefaultBlock = flags & 1;
        var args = null;

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            8,
            /* CreateArgs */
          )
        ) {
          args = vm.stack.peek();
        }

        var self = null;

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            128,
            /* CreateCaller */
          )
        ) {
          self = vm.getSelf();
        }

        var state = manager.create(
          vm.getOwner(),
          definition.state,
          args,
          vm.env,
          dynamicScope,
          self,
          !!hasDefaultBlock,
        ); // We want to reuse the `state` POJO here, because we know that the opcodes
        // only transition at exactly one place.

        instance.state = state;

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            256,
            /* UpdateHook */
          )
        ) {
          vm.updateWith(
            new UpdateComponentOpcode(state, manager, dynamicScope),
          );
        }
      },
    );
    APPEND_OPCODES.add(
      88,
      /* RegisterComponentDestructor */
      (vm, _ref36) => {
        var { op1: _state } = _ref36;
        var { manager, state, capabilities } = vm.fetchValue(_state);
        var d = manager.getDestroyable(state);

        if (
          true &&
          /* DEBUG */
          !(0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            2048,
            /* WillDestroy */
          ) &&
          d !== null &&
          typeof 'willDestroy' in d
        ) {
          throw new Error(
            'BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into',
          );
        }

        if (d) vm.associateDestroyable(d);
      },
    );
    APPEND_OPCODES.add(
      97,
      /* BeginComponentTransaction */
      (vm, _ref37) => {
        var { op1: _state } = _ref37;

        var _a;

        var name;

        if (
          true
          /* DEBUG */
        ) {
          var { definition, manager } = vm.fetchValue(_state);
          name =
            (_a = definition.resolvedName) !== null && _a !== void 0
              ? _a
              : manager.getDebugName(definition.state);
        }

        vm.beginCacheGroup(name);
        vm.elements().pushSimpleBlock();
      },
    );
    APPEND_OPCODES.add(
      89,
      /* PutComponentOperations */
      (vm) => {
        vm.loadValue(_vm2.$t0, new ComponentElementOperations());
      },
    );
    APPEND_OPCODES.add(
      53,
      /* ComponentAttr */
      (vm, _ref38) => {
        var { op1: _name, op2: _trusting, op3: _namespace } = _ref38;
        var name = vm[CONSTANTS].getValue(_name);
        var trusting = vm[CONSTANTS].getValue(_trusting);
        var reference = vm.stack.pop();
        var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
        vm.fetchValue(_vm2.$t0).setAttribute(
          name,
          reference,
          trusting,
          namespace,
        );
      },
    );
    APPEND_OPCODES.add(
      105,
      /* StaticComponentAttr */
      (vm, _ref39) => {
        var { op1: _name, op2: _value, op3: _namespace } = _ref39;
        var name = vm[CONSTANTS].getValue(_name);
        var value = vm[CONSTANTS].getValue(_value);
        var namespace = _namespace ? vm[CONSTANTS].getValue(_namespace) : null;
        vm.fetchValue(_vm2.$t0).setStaticAttribute(name, value, namespace);
      },
    );

    class ComponentElementOperations {
      constructor() {
        this.attributes = (0, _util.dict)();
        this.classes = [];
        this.modifiers = [];
      }

      setAttribute(name, value, trusting, namespace) {
        var deferred = {
          value,
          namespace,
          trusting,
        };

        if (name === 'class') {
          this.classes.push(value);
        }

        this.attributes[name] = deferred;
      }

      setStaticAttribute(name, value, namespace) {
        var deferred = {
          value,
          namespace,
        };

        if (name === 'class') {
          this.classes.push(value);
        }

        this.attributes[name] = deferred;
      }

      addModifier(modifier) {
        this.modifiers.push(modifier);
      }

      flush(vm) {
        var type;
        var attributes = this.attributes;

        for (var name in this.attributes) {
          if (name === 'type') {
            type = attributes[name];
            continue;
          }

          var attr = this.attributes[name];

          if (name === 'class') {
            setDeferredAttr(
              vm,
              'class',
              mergeClasses(this.classes),
              attr.namespace,
              attr.trusting,
            );
          } else {
            setDeferredAttr(
              vm,
              name,
              attr.value,
              attr.namespace,
              attr.trusting,
            );
          }
        }

        if (type !== undefined) {
          setDeferredAttr(
            vm,
            'type',
            type.value,
            type.namespace,
            type.trusting,
          );
        }

        return this.modifiers;
      }
    }

    function mergeClasses(classes) {
      if (classes.length === 0) {
        return '';
      }

      if (classes.length === 1) {
        return classes[0];
      }

      if (allStringClasses(classes)) {
        return classes.join(' ');
      }

      return createClassListRef(classes);
    }

    function allStringClasses(classes) {
      for (var i = 0; i < classes.length; i++) {
        if (typeof classes[i] !== 'string') {
          return false;
        }
      }

      return true;
    }

    function setDeferredAttr(vm, name, value, namespace, trusting) {
      if (trusting === void 0) {
        trusting = false;
      }

      if (typeof value === 'string') {
        vm.elements().setStaticAttribute(name, value, namespace);
      } else {
        var attribute = vm
          .elements()
          .setDynamicAttribute(
            name,
            (0, _reference.valueForRef)(value),
            trusting,
            namespace,
          );

        if (!(0, _reference.isConstRef)(value)) {
          vm.updateWith(
            new UpdateDynamicAttributeOpcode(value, attribute, vm.env),
          );
        }
      }
    }

    APPEND_OPCODES.add(
      99,
      /* DidCreateElement */
      (vm, _ref40) => {
        var { op1: _state } = _ref40;
        var { definition, state } = vm.fetchValue(_state);
        var { manager } = definition;
        var operations = vm.fetchValue(_vm2.$t0);
        manager.didCreateElement(state, vm.elements().constructing, operations);
      },
    );
    APPEND_OPCODES.add(
      90,
      /* GetComponentSelf */
      (vm, _ref41) => {
        var { op1: _state, op2: _names } = _ref41;

        var _a;

        var instance = vm.fetchValue(_state);
        var { definition, state } = instance;
        var { manager } = definition;
        var selfRef = manager.getSelf(state);

        if (vm.env.debugRenderTree !== undefined) {
          var _instance = vm.fetchValue(_state);

          var { definition: _definition, manager: _manager2 } = _instance;
          var args;

          if (vm.stack.peek() === vm[ARGS]) {
            args = vm[ARGS].capture();
          } else {
            var names = vm[CONSTANTS].getArray(_names);
            vm[ARGS].setup(vm.stack, names, [], 0, true);
            args = vm[ARGS].capture();
          }

          var moduleName;
          var compilable = _definition.compilable;

          if (compilable === null) {
            compilable = _manager2.getDynamicLayout(state, vm.runtime.resolver);

            if (compilable !== null) {
              moduleName = compilable.moduleName;
            } else {
              moduleName = '__default__.hbs';
            }
          } else {
            moduleName = compilable.moduleName;
          } // For tearing down the debugRenderTree

          vm.associateDestroyable(_instance);

          if (hasCustomDebugRenderTreeLifecycle(_manager2)) {
            var nodes = _manager2.getDebugCustomRenderTree(
              _instance.definition.state,
              _instance.state,
              args,
              moduleName,
            );

            nodes.forEach((node) => {
              var { bucket } = node;
              vm.env.debugRenderTree.create(bucket, node);
              (0, _destroyable2.registerDestructor)(_instance, () => {
                var _a;

                (_a = vm.env.debugRenderTree) === null || _a === void 0
                  ? void 0
                  : _a.willDestroy(bucket);
              });
              vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
            });
          } else {
            var name =
              (_a = _definition.resolvedName) !== null && _a !== void 0
                ? _a
                : _manager2.getDebugName(_definition.state);
            vm.env.debugRenderTree.create(_instance, {
              type: 'component',
              name,
              args,
              template: moduleName,
              instance: (0, _reference.valueForRef)(selfRef),
            });
            vm.associateDestroyable(_instance);
            (0, _destroyable2.registerDestructor)(_instance, () => {
              var _a;

              (_a = vm.env.debugRenderTree) === null || _a === void 0
                ? void 0
                : _a.willDestroy(_instance);
            });
            vm.updateWith(new DebugRenderTreeUpdateOpcode(_instance));
          }
        }

        vm.stack.push(selfRef);
      },
    );
    APPEND_OPCODES.add(
      91,
      /* GetComponentTagName */
      (vm, _ref42) => {
        var { op1: _state } = _ref42;
        var { definition, state } = vm.fetchValue(_state);
        var { manager } = definition;
        var tagName = manager.getTagName(state); // User provided value from JS, so we don't bother to encode

        vm.stack.push(tagName);
      },
    ); // Dynamic Invocation Only

    APPEND_OPCODES.add(
      92,
      /* GetComponentLayout */
      (vm, _ref43) => {
        var { op1: _state } = _ref43;
        var instance = vm.fetchValue(_state);
        var { manager, definition } = instance;
        var { stack } = vm;
        var { compilable } = definition;

        if (compilable === null) {
          var { capabilities } = instance;
          compilable = manager.getDynamicLayout(
            instance.state,
            vm.runtime.resolver,
          );

          if (compilable === null) {
            if (
              (0, _manager5.managerHasCapability)(
                manager,
                capabilities,
                1024,
                /* Wrapped */
              )
            ) {
              compilable = (0, _util.unwrapTemplate)(
                vm[CONSTANTS].defaultTemplate,
              ).asWrappedLayout();
            } else {
              compilable = (0, _util.unwrapTemplate)(
                vm[CONSTANTS].defaultTemplate,
              ).asLayout();
            }
          }
        }

        var handle = compilable.compile(vm.context);
        stack.push(compilable.symbolTable);
        stack.push(handle);
      },
    );
    APPEND_OPCODES.add(
      75,
      /* Main */
      (vm, _ref44) => {
        var { op1: register } = _ref44;
        var definition = vm.stack.pop();
        var invocation = vm.stack.pop();
        var { manager, capabilities } = definition;
        var state = {
          definition,
          manager,
          capabilities,
          state: null,
          handle: invocation.handle,
          table: invocation.symbolTable,
          lookup: null,
        };
        vm.loadValue(register, state);
      },
    );
    APPEND_OPCODES.add(
      95,
      /* PopulateLayout */
      (vm, _ref45) => {
        var { op1: _state } = _ref45;
        var { stack } = vm; // In DEBUG handles could be ErrHandle objects

        var handle = stack.pop();
        var table = stack.pop();
        var state = vm.fetchValue(_state);
        state.handle = handle;
        state.table = table;
      },
    );
    APPEND_OPCODES.add(
      38,
      /* VirtualRootScope */
      (vm, _ref46) => {
        var { op1: _state } = _ref46;
        var { table, manager, capabilities, state } = vm.fetchValue(_state);
        var owner;

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            4096,
            /* HasSubOwner */
          )
        ) {
          owner = manager.getOwner(state);
          vm.loadValue(_vm2.$t1, null); // Clear the temp register
        } else {
          // Check the temp register to see if an owner was resolved from currying
          owner = vm.fetchValue(_vm2.$t1);

          if (owner === null) {
            // If an owner wasn't found, default to using the current owner. This
            // will happen for normal dynamic component invocation,
            // e.g. <SomeClassicEmberComponent/>
            owner = vm.getOwner();
          } else {
            // Else the owner was found, so clear the temp register. This will happen
            // if we are loading a curried component, e.g. <@someCurriedComponent/>
            vm.loadValue(_vm2.$t1, null);
          }
        }

        vm.pushRootScope(table.symbols.length + 1, owner);
      },
    );
    APPEND_OPCODES.add(
      94,
      /* SetupForEval */
      (vm, _ref47) => {
        var { op1: _state } = _ref47;
        var state = vm.fetchValue(_state);

        if (state.table.hasEval) {
          var lookup = (state.lookup = (0, _util.dict)());
          vm.scope().bindEvalScope(lookup);
        }
      },
    );
    APPEND_OPCODES.add(
      17,
      /* SetNamedVariables */
      (vm, _ref48) => {
        var { op1: _state } = _ref48;
        var state = vm.fetchValue(_state);
        var scope = vm.scope();
        var args = vm.stack.peek();
        var callerNames = args.named.atNames;

        for (var i = callerNames.length - 1; i >= 0; i--) {
          var atName = callerNames[i];
          var symbol$$1 = state.table.symbols.indexOf(callerNames[i]);
          var value = args.named.get(atName, true);
          if (symbol$$1 !== -1) scope.bindSymbol(symbol$$1 + 1, value);
          if (state.lookup) state.lookup[atName] = value;
        }
      },
    );

    function bindBlock(symbolName, blockName, state, blocks, vm) {
      var symbol$$1 = state.table.symbols.indexOf(symbolName);
      var block = blocks.get(blockName);
      if (symbol$$1 !== -1) vm.scope().bindBlock(symbol$$1 + 1, block);
      if (state.lookup) state.lookup[symbolName] = block;
    }

    APPEND_OPCODES.add(
      18,
      /* SetBlocks */
      (vm, _ref49) => {
        var { op1: _state } = _ref49;
        var state = vm.fetchValue(_state);
        var { blocks } = vm.stack.peek();

        for (var i = 0; i < blocks.names.length; i++) {
          bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
        }
      },
    ); // Dynamic Invocation Only

    APPEND_OPCODES.add(
      96,
      /* InvokeComponentLayout */
      (vm, _ref50) => {
        var { op1: _state } = _ref50;
        var state = vm.fetchValue(_state);
        vm.call(state.handle);
      },
    );
    APPEND_OPCODES.add(
      100,
      /* DidRenderLayout */
      (vm, _ref51) => {
        var { op1: _state } = _ref51;
        var instance = vm.fetchValue(_state);
        var { manager, state, capabilities } = instance;
        var bounds = vm.elements().popBlock();

        if (vm.env.debugRenderTree !== undefined) {
          if (hasCustomDebugRenderTreeLifecycle(manager)) {
            var nodes = manager.getDebugCustomRenderTree(
              instance.definition.state,
              state,
              EMPTY_ARGS,
            );
            nodes.reverse().forEach((node) => {
              var { bucket } = node;
              vm.env.debugRenderTree.didRender(bucket, bounds);
              vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
            });
          } else {
            vm.env.debugRenderTree.didRender(instance, bounds);
            vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));
          }
        }

        if (
          (0, _manager5.managerHasCapability)(
            manager,
            capabilities,
            512,
            /* CreateInstance */
          )
        ) {
          var mgr = manager;
          mgr.didRenderLayout(state, bounds);
          vm.env.didCreate(instance);
          vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds));
        }
      },
    );
    APPEND_OPCODES.add(
      98,
      /* CommitComponentTransaction */
      (vm) => {
        vm.commitCacheGroup();
      },
    );

    class UpdateComponentOpcode {
      constructor(component, manager, dynamicScope) {
        this.component = component;
        this.manager = manager;
        this.dynamicScope = dynamicScope;
      }

      evaluate(_vm) {
        var { component, manager, dynamicScope } = this;
        manager.update(component, dynamicScope);
      }
    }

    class DidUpdateLayoutOpcode {
      constructor(component, bounds) {
        this.component = component;
        this.bounds = bounds;
      }

      evaluate(vm) {
        var { component, bounds } = this;
        var { manager, state } = component;
        manager.didUpdateLayout(state, bounds);
        vm.env.didUpdate(component);
      }
    }

    class DebugRenderTreeUpdateOpcode {
      constructor(bucket) {
        this.bucket = bucket;
      }

      evaluate(vm) {
        var _a;

        (_a = vm.env.debugRenderTree) === null || _a === void 0
          ? void 0
          : _a.update(this.bucket);
      }
    }

    class DebugRenderTreeDidRenderOpcode {
      constructor(bucket, bounds) {
        this.bucket = bucket;
        this.bounds = bounds;
      }

      evaluate(vm) {
        var _a;

        (_a = vm.env.debugRenderTree) === null || _a === void 0
          ? void 0
          : _a.didRender(this.bucket, this.bounds);
      }
    }

    class DynamicTextContent {
      constructor(node, reference, lastValue) {
        this.node = node;
        this.reference = reference;
        this.lastValue = lastValue;
      }

      evaluate() {
        var value = (0, _reference.valueForRef)(this.reference);
        var { lastValue } = this;
        if (value === lastValue) return;
        var normalized;

        if (isEmpty(value)) {
          normalized = '';
        } else if (isString(value)) {
          normalized = value;
        } else {
          normalized = String(value);
        }

        if (normalized !== lastValue) {
          var textNode = this.node;
          textNode.nodeValue = this.lastValue = normalized;
        }
      }
    }

    function toContentType(value) {
      if (shouldCoerce(value)) {
        return 2;
        /* String */
      } else if (
        isCurriedType(
          value,
          0,
          /* Component */
        ) ||
        (0, _manager5.hasInternalComponentManager)(value)
      ) {
        return 0;
        /* Component */
      } else if (
        isCurriedType(
          value,
          1,
          /* Helper */
        ) ||
        (0, _manager5.hasInternalHelperManager)(value)
      ) {
        return 1;
        /* Helper */
      } else if (isSafeString(value)) {
        return 4;
        /* SafeString */
      } else if (isFragment(value)) {
        return 5;
        /* Fragment */
      } else if (isNode(value)) {
        return 6;
        /* Node */
      } else {
        return 2;
        /* String */
      }
    }

    function toDynamicContentType(value) {
      if (!(0, _util.isObject)(value)) {
        return 2;
        /* String */
      }

      if (
        isCurriedType(
          value,
          0,
          /* Component */
        ) ||
        (0, _manager5.hasInternalComponentManager)(value)
      ) {
        return 0;
        /* Component */
      } else {
        if (
          true &&
          /* DEBUG */
          !isCurriedType(
            value,
            1,
            /* Helper */
          ) &&
          !(0, _manager5.hasInternalHelperManager)(value)
        ) {
          throw new Error(
            `Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`,
          );
        }

        return 1;
        /* Helper */
      }
    }

    APPEND_OPCODES.add(
      76,
      /* ContentType */
      (vm) => {
        var reference = vm.stack.peek();
        vm.stack.push(toContentType((0, _reference.valueForRef)(reference)));

        if (!(0, _reference.isConstRef)(reference)) {
          vm.updateWith(new AssertFilter(reference, toContentType));
        }
      },
    );
    APPEND_OPCODES.add(
      106,
      /* DynamicContentType */
      (vm) => {
        var reference = vm.stack.peek();
        vm.stack.push(
          toDynamicContentType((0, _reference.valueForRef)(reference)),
        );

        if (!(0, _reference.isConstRef)(reference)) {
          vm.updateWith(new AssertFilter(reference, toDynamicContentType));
        }
      },
    );
    APPEND_OPCODES.add(
      43,
      /* AppendHTML */
      (vm) => {
        var reference = vm.stack.pop();
        var rawValue = (0, _reference.valueForRef)(reference);
        var value = isEmpty(rawValue) ? '' : String(rawValue);
        vm.elements().appendDynamicHTML(value);
      },
    );
    APPEND_OPCODES.add(
      44,
      /* AppendSafeHTML */
      (vm) => {
        var reference = vm.stack.pop();
        var rawValue = (0, _reference.valueForRef)(reference).toHTML();
        var value = isEmpty(rawValue) ? '' : rawValue;
        vm.elements().appendDynamicHTML(value);
      },
    );
    APPEND_OPCODES.add(
      47,
      /* AppendText */
      (vm) => {
        var reference = vm.stack.pop();
        var rawValue = (0, _reference.valueForRef)(reference);
        var value = isEmpty(rawValue) ? '' : String(rawValue);
        var node = vm.elements().appendDynamicText(value);

        if (!(0, _reference.isConstRef)(reference)) {
          vm.updateWith(new DynamicTextContent(node, reference, value));
        }
      },
    );
    APPEND_OPCODES.add(
      45,
      /* AppendDocumentFragment */
      (vm) => {
        var reference = vm.stack.pop();
        var value = (0, _reference.valueForRef)(reference);
        vm.elements().appendDynamicFragment(value);
      },
    );
    APPEND_OPCODES.add(
      46,
      /* AppendNode */
      (vm) => {
        var reference = vm.stack.pop();
        var value = (0, _reference.valueForRef)(reference);
        vm.elements().appendDynamicNode(value);
      },
    );

    function debugCallback(context, get) {
      // eslint-disable-next-line no-console
      console.info('Use `context`, and `get(<path>)` to debug this template.'); // for example...
      // eslint-disable-next-line no-unused-expressions

      context === get('this'); // eslint-disable-next-line no-debugger

      debugger;
    }

    var callback = debugCallback; // For testing purposes

    function setDebuggerCallback(cb) {
      callback = cb;
    }

    function resetDebuggerCallback() {
      callback = debugCallback;
    }

    class ScopeInspector {
      constructor(scope, symbols, evalInfo) {
        this.scope = scope;
        this.locals = (0, _util.dict)();

        for (var i = 0; i < evalInfo.length; i++) {
          var slot = evalInfo[i];
          var name = symbols[slot - 1];
          var ref = scope.getSymbol(slot);
          this.locals[name] = ref;
        }
      }

      get(path) {
        var { scope, locals } = this;
        var parts = path.split('.');
        var [head, ...tail] = path.split('.');
        var evalScope = scope.getEvalScope();
        var ref;

        if (head === 'this') {
          ref = scope.getSelf();
        } else if (locals[head]) {
          ref = locals[head];
        } else if (head.indexOf('@') === 0 && evalScope[head]) {
          ref = evalScope[head];
        } else {
          ref = this.scope.getSelf();
          tail = parts;
        }

        return tail.reduce(
          (r, part) => (0, _reference.childRefFor)(r, part),
          ref,
        );
      }
    }

    APPEND_OPCODES.add(
      103,
      /* Debugger */
      (vm, _ref52) => {
        var { op1: _symbols, op2: _evalInfo } = _ref52;
        var symbols = vm[CONSTANTS].getArray(_symbols);
        var evalInfo = vm[CONSTANTS].getArray(
          (0, _util.decodeHandle)(_evalInfo),
        );
        var inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);
        callback((0, _reference.valueForRef)(vm.getSelf()), (path) =>
          (0, _reference.valueForRef)(inspector.get(path)),
        );
      },
    );
    APPEND_OPCODES.add(
      72,
      /* EnterList */
      (vm, _ref53) => {
        var { op1: relativeStart, op2: elseTarget } = _ref53;
        var stack = vm.stack;
        var listRef = stack.pop();
        var keyRef = stack.pop();
        var keyValue = (0, _reference.valueForRef)(keyRef);
        var key = keyValue === null ? '@identity' : String(keyValue);
        var iteratorRef = (0, _reference.createIteratorRef)(listRef, key);
        var iterator = (0, _reference.valueForRef)(iteratorRef);
        vm.updateWith(
          new AssertFilter(iteratorRef, (iterator) => iterator.isEmpty()),
        );

        if (iterator.isEmpty() === true) {
          // TODO: Fix this offset, should be accurate
          vm.goto(elseTarget + 1);
        } else {
          vm.enterList(iteratorRef, relativeStart);
          vm.stack.push(iterator);
        }
      },
    );
    APPEND_OPCODES.add(
      73,
      /* ExitList */
      (vm) => {
        vm.exitList();
      },
    );
    APPEND_OPCODES.add(
      74,
      /* Iterate */
      (vm, _ref54) => {
        var { op1: breaks } = _ref54;
        var stack = vm.stack;
        var iterator = stack.peek();
        var item = iterator.next();

        if (item !== null) {
          vm.registerItem(vm.enterItem(item));
        } else {
          vm.goto(breaks);
        }
      },
    );
    var CAPABILITIES = {
      dynamicLayout: false,
      dynamicTag: false,
      prepareArgs: false,
      createArgs: false,
      attributeHook: false,
      elementHook: false,
      createCaller: false,
      dynamicScope: false,
      updateHook: false,
      createInstance: false,
      wrapped: false,
      willDestroy: false,
      hasSubOwner: false,
    };

    class TemplateOnlyComponentManager {
      getCapabilities() {
        return CAPABILITIES;
      }

      getDebugName(_ref55) {
        var { name } = _ref55;
        return name;
      }

      getSelf() {
        return _reference.NULL_REFERENCE;
      }

      getDestroyable() {
        return null;
      }
    }

    _exports.TemplateOnlyComponentManager = TemplateOnlyComponentManager;
    var TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager(); // This is only exported for types, don't use this class directly

    _exports.TEMPLATE_ONLY_COMPONENT_MANAGER = TEMPLATE_ONLY_COMPONENT_MANAGER;

    class TemplateOnlyComponentDefinition {
      constructor(moduleName, name) {
        if (moduleName === void 0) {
          moduleName = '@glimmer/component/template-only';
        }

        if (name === void 0) {
          name = '(unknown template-only component)';
        }

        this.moduleName = moduleName;
        this.name = name;
      }

      toString() {
        return this.moduleName;
      }
    }

    _exports.TemplateOnlyComponent = TemplateOnlyComponentDefinition;
    (0, _manager5.setInternalComponentManager)(
      TEMPLATE_ONLY_COMPONENT_MANAGER,
      TemplateOnlyComponentDefinition.prototype,
    );
    /**
    This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
    is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
    without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
    Specifically, this means that the template will be rendered as "outer HTML".
  
    In general, this method will be used by build time tooling and would not be directly written in an application. However,
    at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
    to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
    `template-only-glimmer-components` optional feature.
  
    @example
  
    ```js
    import { templateOnlyComponent } from '@glimmer/runtime';
  
    export default templateOnlyComponent();
    ```
  
    @public
    @method templateOnly
    @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
    @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
  */

    function templateOnlyComponent(moduleName, name) {
      return new TemplateOnlyComponentDefinition(moduleName, name);
    } // http://www.w3.org/TR/html/syntax.html#html-integration-point

    var SVG_INTEGRATION_POINTS = {
      foreignObject: 1,
      desc: 1,
      title: 1,
    }; // http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
    // TODO: Adjust SVG attributes
    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
    // TODO: Adjust SVG elements
    // http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign

    var BLACKLIST_TABLE = Object.create(null);

    class DOMOperations {
      constructor(document) {
        this.document = document;
        this.setupUselessElement();
      } // split into separate method so that NodeDOMTreeConstruction
      // can override it.

      setupUselessElement() {
        this.uselessElement = this.document.createElement('div');
      }

      createElement(tag, context) {
        var isElementInSVGNamespace, isHTMLIntegrationPoint;

        if (context) {
          isElementInSVGNamespace =
            context.namespaceURI === 'http://www.w3.org/2000/svg' ||
            /* SVG */
            tag === 'svg';
          isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName];
        } else {
          isElementInSVGNamespace = tag === 'svg';
          isHTMLIntegrationPoint = false;
        }

        if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
          // FIXME: This does not properly handle <font> with color, face, or
          // size attributes, which is also disallowed by the spec. We should fix
          // this.
          if (BLACKLIST_TABLE[tag]) {
            throw new Error(`Cannot create a ${tag} inside an SVG context`);
          }

          return this.document.createElementNS(
            'http://www.w3.org/2000/svg',
            /* SVG */
            tag,
          );
        } else {
          return this.document.createElement(tag);
        }
      }

      insertBefore(parent, node, reference) {
        parent.insertBefore(node, reference);
      }

      insertHTMLBefore(parent, nextSibling, html) {
        if (html === '') {
          var comment = this.createComment('');
          parent.insertBefore(comment, nextSibling);
          return new ConcreteBounds(parent, comment, comment);
        }

        var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
        var last;

        if (nextSibling === null) {
          parent.insertAdjacentHTML(
            'beforeend',
            /* beforeend */
            html,
          );
          last = parent.lastChild;
        } else if (nextSibling instanceof HTMLElement) {
          nextSibling.insertAdjacentHTML('beforebegin', html);
          last = nextSibling.previousSibling;
        } else {
          // Non-element nodes do not support insertAdjacentHTML, so add an
          // element and call it on that element. Then remove the element.
          //
          // This also protects Edge, IE and Firefox w/o the inspector open
          // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
          var { uselessElement } = this;
          parent.insertBefore(uselessElement, nextSibling);
          uselessElement.insertAdjacentHTML(
            'beforebegin',
            /* beforebegin */
            html,
          );
          last = uselessElement.previousSibling;
          parent.removeChild(uselessElement);
        }

        var first = prev ? prev.nextSibling : parent.firstChild;
        return new ConcreteBounds(parent, first, last);
      }

      createTextNode(text) {
        return this.document.createTextNode(text);
      }

      createComment(data) {
        return this.document.createComment(data);
      }
    }

    function moveNodesBefore(source, target, nextSibling) {
      var first = source.firstChild;
      var last = first;
      var current = first;

      while (current) {
        var next = current.nextSibling;
        target.insertBefore(current, nextSibling);
        last = current;
        current = next;
      }

      return new ConcreteBounds(target, first, last);
    }

    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Patch:    insertAdjacentHTML on SVG Fix
    /* SVG */
    // Browsers: Safari, IE, Edge, Firefox ~33-34
    // Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
    //           present but throws an exception on IE and Edge. Old versions of
    //           Firefox create nodes in the incorrect namespace.
    // Fix:      Since IE and Edge silently fail to create SVG nodes using
    //           innerHTML, and because Firefox may create nodes in the incorrect
    //           namespace using innerHTML on SVG elements, an HTML-string wrapping
    //           approach is used. A pre/post SVG tag is added to the string, then
    //           that whole string is added to a div. The created nodes are plucked
    //           out and applied to the target location on DOM.

    function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
      if (!document) return DOMClass;

      if (!shouldApplyFix(document, svgNamespace)) {
        return DOMClass;
      }

      var div = document.createElement('div');
      return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {
        insertHTMLBefore(parent, nextSibling, html) {
          if (html === '') {
            return super.insertHTMLBefore(parent, nextSibling, html);
          }

          if (parent.namespaceURI !== svgNamespace) {
            return super.insertHTMLBefore(parent, nextSibling, html);
          }

          return fixSVG(parent, div, html, nextSibling);
        }
      };
    }

    function fixSVG(parent, div, html, reference) {
      var source; // This is important, because descendants of the <foreignObject> integration
      // point are parsed in the HTML namespace

      if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {
        // IE, Edge: also do not correctly support using `innerHTML` on SVG
        // namespaced elements. So here a wrapper is used.
        var wrappedHtml =
          '<svg><foreignObject>' + html + '</foreignObject></svg>';
        (0, _util.clearElement)(div);
        div.insertAdjacentHTML(
          'afterbegin',
          /* afterbegin */
          wrappedHtml,
        );
        source = div.firstChild.firstChild;
      } else {
        // IE, Edge: also do not correctly support using `innerHTML` on SVG
        // namespaced elements. So here a wrapper is used.
        var _wrappedHtml = '<svg>' + html + '</svg>';

        (0, _util.clearElement)(div);
        div.insertAdjacentHTML(
          'afterbegin',
          /* afterbegin */
          _wrappedHtml,
        );
        source = div.firstChild;
      }

      return moveNodesBefore(source, parent, reference);
    }

    function shouldApplyFix(document, svgNamespace) {
      var svg = document.createElementNS(svgNamespace, 'svg');

      try {
        svg.insertAdjacentHTML(
          'beforeend',
          /* beforeend */
          '<circle></circle>',
        );
      } catch (e) {
        // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
        // Safari: Will throw, insertAdjacentHTML is not present on SVG
      } finally {
        // FF: Old versions will create a node in the wrong namespace
        if (
          svg.childNodes.length === 1 &&
          svg.firstChild.namespaceURI === SVG_NAMESPACE
        ) {
          // The test worked as expected, no fix required
          return false;
        }

        return true;
      }
    } // Patch:    Adjacent text node merging fix
    // Browsers: IE, Edge, Firefox w/o inspector open
    // Reason:   These browsers will merge adjacent text nodes. For example given
    //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
    //           with proper behavior will populate div.childNodes with two items.
    //           These browsers will populate it with one merged node instead.
    // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
    //           of that wrapper and move the nodes to their target location. Note
    //           that potential SVG bugs will have been handled before this fix.
    //           Note that this fix must only apply to the previous text node, as
    //           the base implementation of `insertHTMLBefore` already handles
    //           following text nodes correctly.

    function applyTextNodeMergingFix(document, DOMClass) {
      if (!document) return DOMClass;

      if (!shouldApplyFix$1(document)) {
        return DOMClass;
      }

      return class DOMChangesWithTextNodeMergingFix extends DOMClass {
        constructor(document) {
          super(document);
          this.uselessComment = document.createComment('');
        }

        insertHTMLBefore(parent, nextSibling, html) {
          if (html === '') {
            return super.insertHTMLBefore(parent, nextSibling, html);
          }

          var didSetUselessComment = false;
          var nextPrevious = nextSibling
            ? nextSibling.previousSibling
            : parent.lastChild;

          if (nextPrevious && nextPrevious instanceof Text) {
            didSetUselessComment = true;
            parent.insertBefore(this.uselessComment, nextSibling);
          }

          var bounds = super.insertHTMLBefore(parent, nextSibling, html);

          if (didSetUselessComment) {
            parent.removeChild(this.uselessComment);
          }

          return bounds;
        }
      };
    }

    function shouldApplyFix$1(document) {
      var mergingTextDiv = document.createElement('div');
      mergingTextDiv.appendChild(document.createTextNode('first'));
      mergingTextDiv.insertAdjacentHTML(
        'beforeend',
        /* beforeend */
        'second',
      );

      if (mergingTextDiv.childNodes.length === 2) {
        // It worked as expected, no fix required
        return false;
      }

      return true;
    }

    [
      'b',
      'big',
      'blockquote',
      'body',
      'br',
      'center',
      'code',
      'dd',
      'div',
      'dl',
      'dt',
      'em',
      'embed',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'hr',
      'i',
      'img',
      'li',
      'listing',
      'main',
      'meta',
      'nobr',
      'ol',
      'p',
      'pre',
      'ruby',
      's',
      'small',
      'span',
      'strong',
      'strike',
      'sub',
      'sup',
      'table',
      'tt',
      'u',
      'ul',
      'var',
    ].forEach((tag) => (BLACKLIST_TABLE[tag] = 1));
    var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
    var doc = typeof document === 'undefined' ? null : document;

    function isWhitespace(string) {
      return WHITESPACE.test(string);
    }

    var DOM;

    (function (DOM) {
      class TreeConstruction extends DOMOperations {
        createElementNS(namespace, tag) {
          return this.document.createElementNS(namespace, tag);
        }

        setAttribute(element, name, value, namespace) {
          if (namespace === void 0) {
            namespace = null;
          }

          if (namespace) {
            element.setAttributeNS(namespace, name, value);
          } else {
            element.setAttribute(name, value);
          }
        }
      }

      DOM.TreeConstruction = TreeConstruction;
      var appliedTreeConstruction = TreeConstruction;
      appliedTreeConstruction = applyTextNodeMergingFix(
        doc,
        appliedTreeConstruction,
      );
      appliedTreeConstruction = applySVGInnerHTMLFix(
        doc,
        appliedTreeConstruction,
        'http://www.w3.org/2000/svg',
        /* SVG */
      );
      DOM.DOMTreeConstruction = appliedTreeConstruction;
    })(DOM || (DOM = {}));

    class DOMChangesImpl extends DOMOperations {
      constructor(document) {
        super(document);
        this.document = document;
        this.namespace = null;
      }

      setAttribute(element, name, value) {
        element.setAttribute(name, value);
      }

      removeAttribute(element, name) {
        element.removeAttribute(name);
      }

      insertAfter(element, node, reference) {
        this.insertBefore(element, node, reference.nextSibling);
      }
    }

    _exports.IDOMChanges = DOMChangesImpl;
    var helper = DOMChangesImpl;
    helper = applyTextNodeMergingFix(doc, helper);
    helper = applySVGInnerHTMLFix(
      doc,
      helper,
      'http://www.w3.org/2000/svg',
      /* SVG */
    );
    var helper$1 = helper;
    _exports.DOMChanges = helper$1;
    var DOMTreeConstruction = DOM.DOMTreeConstruction;
    _exports.DOMTreeConstruction = DOMTreeConstruction;
    var GUID = 0;

    class Ref {
      constructor(value) {
        this.id = GUID++;
        this.value = value;
      }

      get() {
        return this.value;
      }

      release() {
        if (
          true &&
          /* DEBUG */
          this.value === null
        ) {
          throw new Error('BUG: double release?');
        }

        this.value = null;
      }

      toString() {
        var label = `Ref ${this.id}`;

        if (this.value === null) {
          return `${label} (released)`;
        } else {
          try {
            return `${label}: ${this.value}`;
          } catch (_a) {
            return label;
          }
        }
      }
    }

    class DebugRenderTreeImpl {
      constructor() {
        this.stack = new _util.Stack();
        this.refs = new WeakMap();
        this.roots = new Set();
        this.nodes = new WeakMap();
      }

      begin() {
        this.reset();
      }

      create(state, node) {
        var internalNode = (0, _util.assign)({}, node, {
          bounds: null,
          refs: new Set(),
        });
        this.nodes.set(state, internalNode);
        this.appendChild(internalNode, state);
        this.enter(state);
      }

      update(state) {
        this.enter(state);
      }

      didRender(state, bounds) {
        if (
          true &&
          /* DEBUG */
          this.stack.current !== state
        ) {
          throw new Error(`BUG: expecting ${this.stack.current}, got ${state}`);
        }

        this.nodeFor(state).bounds = bounds;
        this.exit();
      }

      willDestroy(state) {
        this.refs.get(state).release();
      }

      commit() {
        this.reset();
      }

      capture() {
        return this.captureRefs(this.roots);
      }

      reset() {
        if (this.stack.size !== 0) {
          // We probably encountered an error during the rendering loop. This will
          // likely trigger undefined behavior and memory leaks as the error left
          // things in an inconsistent state. It is recommended that the user
          // refresh the page.
          // TODO: We could warn here? But this happens all the time in our tests?
          // Clean up the root reference to prevent errors from happening if we
          // attempt to capture the render tree (Ember Inspector may do this)
          var root = this.stack.toArray()[0];
          var ref = this.refs.get(root);

          if (ref !== undefined) {
            this.roots.delete(ref);
          }

          while (!this.stack.isEmpty()) {
            this.stack.pop();
          }
        }
      }

      enter(state) {
        this.stack.push(state);
      }

      exit() {
        if (
          true &&
          /* DEBUG */
          this.stack.size === 0
        ) {
          throw new Error('BUG: unbalanced pop');
        }

        this.stack.pop();
      }

      nodeFor(state) {
        return this.nodes.get(state);
      }

      appendChild(node, state) {
        if (
          true &&
          /* DEBUG */
          this.refs.has(state)
        ) {
          throw new Error('BUG: child already appended');
        }

        var parent = this.stack.current;
        var ref = new Ref(state);
        this.refs.set(state, ref);

        if (parent) {
          var parentNode = this.nodeFor(parent);
          parentNode.refs.add(ref);
          node.parent = parentNode;
        } else {
          this.roots.add(ref);
        }
      }

      captureRefs(refs) {
        var captured = [];
        refs.forEach((ref) => {
          var state = ref.get();

          if (state) {
            captured.push(this.captureNode(`render-node:${ref.id}`, state));
          } else {
            refs.delete(ref);
          }
        });
        return captured;
      }

      captureNode(id, state) {
        var node = this.nodeFor(state);
        var { type, name, args, instance, refs } = node;
        var template = this.captureTemplate(node);
        var bounds = this.captureBounds(node);
        var children = this.captureRefs(refs);
        return {
          id,
          type,
          name,
          args: reifyArgs(args),
          instance,
          template,
          bounds,
          children,
        };
      }

      captureTemplate(_ref56) {
        var { template } = _ref56;
        return template || null;
      }

      captureBounds(node) {
        var bounds = node.bounds;
        var parentElement = bounds.parentElement();
        var firstNode = bounds.firstNode();
        var lastNode = bounds.lastNode();
        return {
          parentElement,
          firstNode,
          lastNode,
        };
      }
    }

    var _a$1;

    var TRANSACTION = (0, _util.symbol)('TRANSACTION');

    class TransactionImpl {
      constructor() {
        this.scheduledInstallModifiers = [];
        this.scheduledUpdateModifiers = [];
        this.createdComponents = [];
        this.updatedComponents = [];
      }

      didCreate(component) {
        this.createdComponents.push(component);
      }

      didUpdate(component) {
        this.updatedComponents.push(component);
      }

      scheduleInstallModifier(modifier) {
        this.scheduledInstallModifiers.push(modifier);
      }

      scheduleUpdateModifier(modifier) {
        this.scheduledUpdateModifiers.push(modifier);
      }

      commit() {
        var { createdComponents, updatedComponents } = this;

        for (var i = 0; i < createdComponents.length; i++) {
          var { manager: _manager3, state: _state2 } = createdComponents[i];

          _manager3.didCreate(_state2);
        }

        for (var _i3 = 0; _i3 < updatedComponents.length; _i3++) {
          var { manager: _manager4, state: _state3 } = updatedComponents[_i3];

          _manager4.didUpdate(_state3);
        }

        var { scheduledInstallModifiers, scheduledUpdateModifiers } = this; // Prevent a transpilation issue we guard against in Ember, the
        // throw-if-closure-required issue

        var manager, state;

        for (var _i4 = 0; _i4 < scheduledInstallModifiers.length; _i4++) {
          var modifier = scheduledInstallModifiers[_i4];
          manager = modifier.manager;
          state = modifier.state;
          var modifierTag = manager.getTag(state);

          if (modifierTag !== null) {
            var tag = (0, _validator.track)(
              // eslint-disable-next-line no-loop-func
              () => manager.install(state),
              true &&
                /* DEBUG */
                `- While rendering:\n  (instance of a \`${
                  modifier.definition.resolvedName ||
                  manager.getDebugName(modifier.definition.state)
                }\` modifier)`,
            );
            (0, _validator.updateTag)(modifierTag, tag);
          } else {
            manager.install(state);
          }
        }

        for (var _i5 = 0; _i5 < scheduledUpdateModifiers.length; _i5++) {
          var _modifier = scheduledUpdateModifiers[_i5];
          manager = _modifier.manager;
          state = _modifier.state;

          var _modifierTag = manager.getTag(state);

          if (_modifierTag !== null) {
            var _tag = (0, _validator.track)(
              // eslint-disable-next-line no-loop-func
              () => manager.update(state),
              true &&
                /* DEBUG */
                `- While rendering:\n  (instance of a \`${
                  _modifier.definition.resolvedName ||
                  manager.getDebugName(_modifier.definition.state)
                }\` modifier)`,
            );

            (0, _validator.updateTag)(_modifierTag, _tag);
          } else {
            manager.update(state);
          }
        }
      }
    }

    class EnvironmentImpl {
      constructor(options, delegate) {
        this.delegate = delegate;
        this[_a$1] = null; // Delegate methods and values

        this.isInteractive = this.delegate.isInteractive;
        this.debugRenderTree = this.delegate.enableDebugTooling
          ? new DebugRenderTreeImpl()
          : undefined;

        if (options.appendOperations) {
          this.appendOperations = options.appendOperations;
          this.updateOperations = options.updateOperations;
        } else if (options.document) {
          this.appendOperations = new DOMTreeConstruction(options.document);
          this.updateOperations = new DOMChangesImpl(options.document);
        } else if (
          true
          /* DEBUG */
        ) {
          throw new Error(
            'you must pass document or appendOperations to a new runtime',
          );
        }
      }

      getAppendOperations() {
        return this.appendOperations;
      }

      getDOM() {
        return this.updateOperations;
      }

      begin() {
        var _b;

        (_b = this.debugRenderTree) === null || _b === void 0
          ? void 0
          : _b.begin();
        this[TRANSACTION] = new TransactionImpl();
      }

      get transaction() {
        return this[TRANSACTION];
      }

      didCreate(component) {
        this.transaction.didCreate(component);
      }

      didUpdate(component) {
        this.transaction.didUpdate(component);
      }

      scheduleInstallModifier(modifier) {
        if (this.isInteractive) {
          this.transaction.scheduleInstallModifier(modifier);
        }
      }

      scheduleUpdateModifier(modifier) {
        if (this.isInteractive) {
          this.transaction.scheduleUpdateModifier(modifier);
        }
      }

      commit() {
        var _b;

        var transaction = this.transaction;
        this[TRANSACTION] = null;
        transaction.commit();
        (_b = this.debugRenderTree) === null || _b === void 0
          ? void 0
          : _b.commit();
        this.delegate.onTransactionCommit();
      }
    }

    _exports.EnvironmentImpl = EnvironmentImpl;
    _a$1 = TRANSACTION;

    function runtimeContext(options, delegate, artifacts, resolver) {
      return {
        env: new EnvironmentImpl(options, delegate),
        program: new _program.RuntimeProgramImpl(
          artifacts.constants,
          artifacts.heap,
        ),
        resolver: resolver,
      };
    }

    function inTransaction(env, cb) {
      if (!env[TRANSACTION]) {
        env.begin();

        try {
          cb();
        } finally {
          env.commit();
        }
      } else {
        cb();
      }
    }

    function initializeRegistersWithSP(sp) {
      return [0, -1, sp, 0];
    }

    class LowLevelVM {
      constructor(stack, heap, program, externs, registers) {
        this.stack = stack;
        this.heap = heap;
        this.program = program;
        this.externs = externs;
        this.registers = registers;
        this.currentOpSize = 0;
      }

      fetchRegister(register) {
        return this.registers[register];
      }

      loadRegister(register, value) {
        this.registers[register] = value;
      }

      setPc(pc) {
        this.registers[_vm2.$pc] = pc;
      } // Start a new frame and save $ra and $fp on the stack

      pushFrame() {
        this.stack.push(this.registers[_vm2.$ra]);
        this.stack.push(this.registers[_vm2.$fp]);
        this.registers[_vm2.$fp] = this.registers[_vm2.$sp] - 1;
      } // Restore $ra, $sp and $fp

      popFrame() {
        this.registers[_vm2.$sp] = this.registers[_vm2.$fp] - 1;
        this.registers[_vm2.$ra] = this.stack.get(0);
        this.registers[_vm2.$fp] = this.stack.get(1);
      }

      pushSmallFrame() {
        this.stack.push(this.registers[_vm2.$ra]);
      }

      popSmallFrame() {
        this.registers[_vm2.$ra] = this.stack.pop();
      } // Jump to an address in `program`

      goto(offset) {
        this.setPc(this.target(offset));
      }

      target(offset) {
        return this.registers[_vm2.$pc] + offset - this.currentOpSize;
      } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

      call(handle) {
        this.registers[_vm2.$ra] = this.registers[_vm2.$pc];
        this.setPc(this.heap.getaddr(handle));
      } // Put a specific `program` address in $ra

      returnTo(offset) {
        this.registers[_vm2.$ra] = this.target(offset);
      } // Return to the `program` address stored in $ra

      return() {
        this.setPc(this.registers[_vm2.$ra]);
      }

      nextStatement() {
        var { registers, program } = this;
        var pc = registers[_vm2.$pc];

        if (pc === -1) {
          return null;
        } // We have to save off the current operations size so that
        // when we do a jump we can calculate the correct offset
        // to where we are going. We can't simply ask for the size
        // in a jump because we have have already incremented the
        // program counter to the next instruction prior to executing.

        var opcode = program.opcode(pc);
        var operationSize = (this.currentOpSize = opcode.size);
        this.registers[_vm2.$pc] += operationSize;
        return opcode;
      }

      evaluateOuter(opcode, vm) {
        {
          this.evaluateInner(opcode, vm);
        }
      }

      evaluateInner(opcode, vm) {
        if (opcode.isMachine) {
          this.evaluateMachine(opcode);
        } else {
          this.evaluateSyscall(opcode, vm);
        }
      }

      evaluateMachine(opcode) {
        switch (opcode.type) {
          case 0:
            /* PushFrame */
            return this.pushFrame();

          case 1:
            /* PopFrame */
            return this.popFrame();

          case 3:
            /* InvokeStatic */
            return this.call(opcode.op1);

          case 2:
            /* InvokeVirtual */
            return this.call(this.stack.pop());

          case 4:
            /* Jump */
            return this.goto(opcode.op1);

          case 5:
            /* Return */
            return this.return();

          case 6:
            /* ReturnTo */
            return this.returnTo(opcode.op1);
        }
      }

      evaluateSyscall(opcode, vm) {
        APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
      }
    }

    class UpdatingVMImpl {
      constructor(env, _ref57) {
        var { alwaysRevalidate = false } = _ref57;
        this.frameStack = new _util.Stack();
        this.env = env;
        this.dom = env.getDOM();
        this.alwaysRevalidate = alwaysRevalidate;
      }

      execute(opcodes, handler) {
        if (
          true
          /* DEBUG */
        ) {
          var hasErrored = true;

          try {
            (0, _validator.runInTrackingTransaction)(
              () => this._execute(opcodes, handler),
              '- While rendering:',
            ); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
            // which would happen with a `catch` + `throw`

            hasErrored = false;
          } finally {
            if (hasErrored) {
              // eslint-disable-next-line no-console
              console.error(
                `\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`,
              );
            }
          }
        } else {
          this._execute(opcodes, handler);
        }
      }

      _execute(opcodes, handler) {
        var { frameStack } = this;
        this.try(opcodes, handler);

        while (true) {
          if (frameStack.isEmpty()) break;
          var opcode = this.frame.nextStatement();

          if (opcode === undefined) {
            frameStack.pop();
            continue;
          }

          opcode.evaluate(this);
        }
      }

      get frame() {
        return this.frameStack.current;
      }

      goto(index) {
        this.frame.goto(index);
      }

      try(ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(ops, handler));
      }

      throw() {
        this.frame.handleException();
        this.frameStack.pop();
      }
    }

    _exports.UpdatingVM = UpdatingVMImpl;

    class ResumableVMStateImpl {
      constructor(state, resumeCallback) {
        this.state = state;
        this.resumeCallback = resumeCallback;
      }

      resume(runtime, builder) {
        return this.resumeCallback(runtime, this.state, builder);
      }
    }

    class BlockOpcode {
      constructor(state, runtime, bounds, children) {
        this.state = state;
        this.runtime = runtime;
        this.children = children;
        this.bounds = bounds;
      }

      parentElement() {
        return this.bounds.parentElement();
      }

      firstNode() {
        return this.bounds.firstNode();
      }

      lastNode() {
        return this.bounds.lastNode();
      }

      evaluate(vm) {
        vm.try(this.children, null);
      }
    }

    class TryOpcode extends BlockOpcode {
      constructor() {
        super(...arguments);
        this.type = 'try';
      }

      evaluate(vm) {
        vm.try(this.children, this);
      }

      handleException() {
        var { state, bounds, runtime } = this;
        (0, _destroyable2.destroyChildren)(this);
        var elementStack = NewElementBuilder.resume(runtime.env, bounds);
        var vm = state.resume(runtime, elementStack);
        var updating = [];
        var children = (this.children = []);
        var result = vm.execute((vm) => {
          vm.pushUpdating(updating);
          vm.updateWith(this);
          vm.pushUpdating(children);
        });
        (0, _destroyable2.associateDestroyableChild)(this, result.drop);
      }
    }

    class ListItemOpcode extends TryOpcode {
      constructor(state, runtime, bounds, key, memo, value) {
        super(state, runtime, bounds, []);
        this.key = key;
        this.memo = memo;
        this.value = value;
        this.retained = false;
        this.index = -1;
      }

      updateReferences(item) {
        this.retained = true;
        (0, _reference.updateRef)(this.value, item.value);
        (0, _reference.updateRef)(this.memo, item.memo);
      }

      shouldRemove() {
        return !this.retained;
      }

      reset() {
        this.retained = false;
      }
    }

    class ListBlockOpcode extends BlockOpcode {
      constructor(state, runtime, bounds, children, iterableRef) {
        super(state, runtime, bounds, children);
        this.iterableRef = iterableRef;
        this.type = 'list-block';
        this.opcodeMap = new Map();
        this.marker = null;
        this.lastIterator = (0, _reference.valueForRef)(iterableRef);
      }

      initializeChild(opcode) {
        opcode.index = this.children.length - 1;
        this.opcodeMap.set(opcode.key, opcode);
      }

      evaluate(vm) {
        var iterator = (0, _reference.valueForRef)(this.iterableRef);

        if (this.lastIterator !== iterator) {
          var { bounds } = this;
          var { dom } = vm;
          var marker = (this.marker = dom.createComment(''));
          dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
          this.sync(iterator);
          this.parentElement().removeChild(marker);
          this.marker = null;
          this.lastIterator = iterator;
        } // Run now-updated updating opcodes

        super.evaluate(vm);
      }

      sync(iterator) {
        var { opcodeMap: itemMap, children } = this;
        var currentOpcodeIndex = 0;
        var seenIndex = 0;
        this.children = this.bounds.boundList = [];

        while (true) {
          var item = iterator.next();
          if (item === null) break;
          var opcode = children[currentOpcodeIndex];
          var { key } = item; // Items that have already been found and moved will already be retained,
          // we can continue until we find the next unretained item

          while (opcode !== undefined && opcode.retained === true) {
            opcode = children[++currentOpcodeIndex];
          }

          if (opcode !== undefined && opcode.key === key) {
            this.retainItem(opcode, item);
            currentOpcodeIndex++;
          } else if (itemMap.has(key)) {
            var itemOpcode = itemMap.get(key); // The item opcode was seen already, so we should move it.

            if (itemOpcode.index < seenIndex) {
              this.moveItem(itemOpcode, item, opcode);
            } else {
              // Update the seen index, we are going to be moving this item around
              // so any other items that come before it will likely need to move as
              // well.
              seenIndex = itemOpcode.index;
              var seenUnretained = false; // iterate through all of the opcodes between the current position and
              // the position of the item's opcode, and determine if they are all
              // retained.

              for (var i = currentOpcodeIndex + 1; i < seenIndex; i++) {
                if (children[i].retained === false) {
                  seenUnretained = true;
                  break;
                }
              } // If we have seen only retained opcodes between this and the matching
              // opcode, it means that all the opcodes in between have been moved
              // already, and we can safely retain this item's opcode.

              if (seenUnretained === false) {
                this.retainItem(itemOpcode, item);
                currentOpcodeIndex = seenIndex + 1;
              } else {
                this.moveItem(itemOpcode, item, opcode);
                currentOpcodeIndex++;
              }
            }
          } else {
            this.insertItem(item, opcode);
          }
        }

        for (var _i6 = 0; _i6 < children.length; _i6++) {
          var _opcode = children[_i6];

          if (_opcode.retained === false) {
            this.deleteItem(_opcode);
          } else {
            _opcode.reset();
          }
        }
      }

      retainItem(opcode, item) {
        var { children } = this;
        (0, _reference.updateRef)(opcode.memo, item.memo);
        (0, _reference.updateRef)(opcode.value, item.value);
        opcode.retained = true;
        opcode.index = children.length;
        children.push(opcode);
      }

      insertItem(item, before) {
        var { opcodeMap, bounds, state, runtime, children } = this;
        var { key } = item;
        var nextSibling =
          before === undefined ? this.marker : before.firstNode();
        var elementStack = NewElementBuilder.forInitialRender(runtime.env, {
          element: bounds.parentElement(),
          nextSibling,
        });
        var vm = state.resume(runtime, elementStack);
        vm.execute((vm) => {
          vm.pushUpdating();
          var opcode = vm.enterItem(item);
          opcode.index = children.length;
          children.push(opcode);
          opcodeMap.set(key, opcode);
          (0, _destroyable2.associateDestroyableChild)(this, opcode);
        });
      }

      moveItem(opcode, item, before) {
        var { children } = this;
        (0, _reference.updateRef)(opcode.memo, item.memo);
        (0, _reference.updateRef)(opcode.value, item.value);
        opcode.retained = true;
        var currentSibling, nextSibling;

        if (before === undefined) {
          move(opcode, this.marker);
        } else {
          currentSibling = opcode.lastNode().nextSibling;
          nextSibling = before.firstNode(); // Items are moved throughout the algorithm, so there are cases where the
          // the items already happen to be siblings (e.g. an item in between was
          // moved before this move happened). Check to see if they are siblings
          // first before doing the move.

          if (currentSibling !== nextSibling) {
            move(opcode, nextSibling);
          }
        }

        opcode.index = children.length;
        children.push(opcode);
      }

      deleteItem(opcode) {
        (0, _destroyable2.destroy)(opcode);
        clear(opcode);
        this.opcodeMap.delete(opcode.key);
      }
    }

    class UpdatingVMFrame {
      constructor(ops, exceptionHandler) {
        this.ops = ops;
        this.exceptionHandler = exceptionHandler;
        this.current = 0;
      }

      goto(index) {
        this.current = index;
      }

      nextStatement() {
        return this.ops[this.current++];
      }

      handleException() {
        if (this.exceptionHandler) {
          this.exceptionHandler.handleException();
        }
      }
    }

    class RenderResultImpl {
      constructor(env, updating, bounds, drop) {
        this.env = env;
        this.updating = updating;
        this.bounds = bounds;
        this.drop = drop;
        (0, _destroyable2.associateDestroyableChild)(this, drop);
        (0, _destroyable2.registerDestructor)(this, () => clear(this.bounds));
      }

      rerender(_temp) {
        var { alwaysRevalidate = false } =
          _temp === void 0
            ? {
                alwaysRevalidate: false,
              }
            : _temp;
        var { env, updating } = this;
        var vm = new UpdatingVMImpl(env, {
          alwaysRevalidate,
        });
        vm.execute(updating, this);
      }

      parentElement() {
        return this.bounds.parentElement();
      }

      firstNode() {
        return this.bounds.firstNode();
      }

      lastNode() {
        return this.bounds.lastNode();
      }

      handleException() {
        throw 'this should never happen';
      }
    }

    class EvaluationStackImpl {
      // fp -> sp
      constructor(stack, registers) {
        if (stack === void 0) {
          stack = [];
        }

        this.stack = stack;
        this[REGISTERS] = registers;
      }

      static restore(snapshot) {
        return new this(
          snapshot.slice(),
          initializeRegistersWithSP(snapshot.length - 1),
        );
      }

      push(value) {
        this.stack[++this[REGISTERS][_vm2.$sp]] = value;
      }

      dup(position) {
        if (position === void 0) {
          position = this[REGISTERS][_vm2.$sp];
        }

        this.stack[++this[REGISTERS][_vm2.$sp]] = this.stack[position];
      }

      copy(from, to) {
        this.stack[to] = this.stack[from];
      }

      pop(n) {
        if (n === void 0) {
          n = 1;
        }

        var top = this.stack[this[REGISTERS][_vm2.$sp]];
        this[REGISTERS][_vm2.$sp] -= n;
        return top;
      }

      peek(offset) {
        if (offset === void 0) {
          offset = 0;
        }

        return this.stack[this[REGISTERS][_vm2.$sp] - offset];
      }

      get(offset, base) {
        if (base === void 0) {
          base = this[REGISTERS][_vm2.$fp];
        }

        return this.stack[base + offset];
      }

      set(value, offset, base) {
        if (base === void 0) {
          base = this[REGISTERS][_vm2.$fp];
        }

        this.stack[base + offset] = value;
      }

      slice(start, end) {
        return this.stack.slice(start, end);
      }

      capture(items) {
        var end = this[REGISTERS][_vm2.$sp] + 1;
        var start = end - items;
        return this.stack.slice(start, end);
      }

      reset() {
        this.stack.length = 0;
      }

      toArray() {
        return this.stack.slice(
          this[REGISTERS][_vm2.$fp],
          this[REGISTERS][_vm2.$sp] + 1,
        );
      }
    }

    var _a$2, _b;

    class Stacks {
      constructor() {
        this.scope = new _util.Stack();
        this.dynamicScope = new _util.Stack();
        this.updating = new _util.Stack();
        this.cache = new _util.Stack();
        this.list = new _util.Stack();
      }
    }

    class VM {
      /**
       * End of migrated.
       */
      constructor(runtime, _ref58, elementStack, context) {
        var { pc, scope, dynamicScope, stack } = _ref58;
        this.runtime = runtime;
        this.elementStack = elementStack;
        this.context = context;
        this[_a$2] = new Stacks();
        this[_b] = new _util.Stack();
        this.s0 = null;
        this.s1 = null;
        this.t0 = null;
        this.t1 = null;
        this.v0 = null;
        this.resume = initVM(this.context);

        if (
          true
          /* DEBUG */
        ) {
          (0, _globalContext.assertGlobalContextWasSet)();
        }

        var evalStack = EvaluationStackImpl.restore(stack);
        evalStack[REGISTERS][_vm2.$pc] = pc;
        evalStack[REGISTERS][_vm2.$sp] = stack.length - 1;
        evalStack[REGISTERS][_vm2.$fp] = -1;
        this[HEAP] = this.program.heap;
        this[CONSTANTS] = this.program.constants;
        this.elementStack = elementStack;
        this[STACKS].scope.push(scope);
        this[STACKS].dynamicScope.push(dynamicScope);
        this[ARGS] = new VMArgumentsImpl();
        this[INNER_VM] = new LowLevelVM(
          evalStack,
          this[HEAP],
          runtime.program,
          {
            debugBefore: (opcode) => {
              return APPEND_OPCODES.debugBefore(this, opcode);
            },
            debugAfter: (state) => {
              APPEND_OPCODES.debugAfter(this, state);
            },
          },
          evalStack[REGISTERS],
        );
        this.destructor = {};
        this[DESTROYABLE_STACK].push(this.destructor);
      }

      get stack() {
        return this[INNER_VM].stack;
      }
      /* Registers */

      get pc() {
        return this[INNER_VM].fetchRegister(_vm2.$pc);
      } // Fetch a value from a register onto the stack

      fetch(register) {
        var value = this.fetchValue(register);
        this.stack.push(value);
      } // Load a value from the stack into a register

      load(register) {
        var value = this.stack.pop();
        this.loadValue(register, value);
      }

      fetchValue(register) {
        if ((0, _vm2.isLowLevelRegister)(register)) {
          return this[INNER_VM].fetchRegister(register);
        }

        switch (register) {
          case _vm2.$s0:
            return this.s0;

          case _vm2.$s1:
            return this.s1;

          case _vm2.$t0:
            return this.t0;

          case _vm2.$t1:
            return this.t1;

          case _vm2.$v0:
            return this.v0;
        }
      } // Load a value into a register

      loadValue(register, value) {
        if ((0, _vm2.isLowLevelRegister)(register)) {
          this[INNER_VM].loadRegister(register, value);
        }

        switch (register) {
          case _vm2.$s0:
            this.s0 = value;
            break;

          case _vm2.$s1:
            this.s1 = value;
            break;

          case _vm2.$t0:
            this.t0 = value;
            break;

          case _vm2.$t1:
            this.t1 = value;
            break;

          case _vm2.$v0:
            this.v0 = value;
            break;
        }
      }
      /**
       * Migrated to Inner
       */
      // Start a new frame and save $ra and $fp on the stack

      pushFrame() {
        this[INNER_VM].pushFrame();
      } // Restore $ra, $sp and $fp

      popFrame() {
        this[INNER_VM].popFrame();
      } // Jump to an address in `program`

      goto(offset) {
        this[INNER_VM].goto(offset);
      } // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)

      call(handle) {
        this[INNER_VM].call(handle);
      } // Put a specific `program` address in $ra

      returnTo(offset) {
        this[INNER_VM].returnTo(offset);
      } // Return to the `program` address stored in $ra

      return() {
        this[INNER_VM].return();
      }

      static initial(runtime, context, _ref59) {
        var {
          handle,
          self,
          dynamicScope,
          treeBuilder,
          numSymbols,
          owner,
        } = _ref59;
        var scope = PartialScopeImpl.root(self, numSymbols, owner);
        var state = vmState(
          runtime.program.heap.getaddr(handle),
          scope,
          dynamicScope,
        );
        var vm = initVM(context)(runtime, state, treeBuilder);
        vm.pushUpdating();
        return vm;
      }

      static empty(runtime, _ref60, context) {
        var { handle, treeBuilder, dynamicScope, owner } = _ref60;
        var vm = initVM(context)(
          runtime,
          vmState(
            runtime.program.heap.getaddr(handle),
            PartialScopeImpl.root(_reference.UNDEFINED_REFERENCE, 0, owner),
            dynamicScope,
          ),
          treeBuilder,
        );
        vm.pushUpdating();
        return vm;
      }

      compile(block) {
        var handle = (0, _util.unwrapHandle)(block.compile(this.context));
        return handle;
      }

      get program() {
        return this.runtime.program;
      }

      get env() {
        return this.runtime.env;
      }

      captureState(args, pc) {
        if (pc === void 0) {
          pc = this[INNER_VM].fetchRegister(_vm2.$pc);
        }

        return {
          pc,
          scope: this.scope(),
          dynamicScope: this.dynamicScope(),
          stack: this.stack.capture(args),
        };
      }

      capture(args, pc) {
        if (pc === void 0) {
          pc = this[INNER_VM].fetchRegister(_vm2.$pc);
        }

        return new ResumableVMStateImpl(
          this.captureState(args, pc),
          this.resume,
        );
      }

      beginCacheGroup(name) {
        var opcodes = this.updating();
        var guard = new JumpIfNotModifiedOpcode();
        opcodes.push(guard);
        opcodes.push(new BeginTrackFrameOpcode(name));
        this[STACKS].cache.push(guard);
        (0, _validator.beginTrackFrame)(name);
      }

      commitCacheGroup() {
        var opcodes = this.updating();
        var guard = this[STACKS].cache.pop();
        var tag = (0, _validator.endTrackFrame)();
        opcodes.push(new EndTrackFrameOpcode(guard));
        guard.finalize(tag, opcodes.length);
      }

      enter(args) {
        var updating = [];
        var state = this.capture(args);
        var block = this.elements().pushUpdatableBlock();
        var tryOpcode = new TryOpcode(state, this.runtime, block, updating);
        this.didEnter(tryOpcode);
      }

      enterItem(_ref61) {
        var { key, value, memo } = _ref61;
        var { stack } = this;
        var valueRef = (0, _reference.createIteratorItemRef)(value);
        var memoRef = (0, _reference.createIteratorItemRef)(memo);
        stack.push(valueRef);
        stack.push(memoRef);
        var state = this.capture(2);
        var block = this.elements().pushUpdatableBlock();
        var opcode = new ListItemOpcode(
          state,
          this.runtime,
          block,
          key,
          memoRef,
          valueRef,
        );
        this.didEnter(opcode);
        return opcode;
      }

      registerItem(opcode) {
        this.listBlock().initializeChild(opcode);
      }

      enterList(iterableRef, offset) {
        var updating = [];
        var addr = this[INNER_VM].target(offset);
        var state = this.capture(0, addr);
        var list = this.elements().pushBlockList(updating);
        var opcode = new ListBlockOpcode(
          state,
          this.runtime,
          list,
          updating,
          iterableRef,
        );
        this[STACKS].list.push(opcode);
        this.didEnter(opcode);
      }

      didEnter(opcode) {
        this.associateDestroyable(opcode);
        this[DESTROYABLE_STACK].push(opcode);
        this.updateWith(opcode);
        this.pushUpdating(opcode.children);
      }

      exit() {
        this[DESTROYABLE_STACK].pop();
        this.elements().popBlock();
        this.popUpdating();
      }

      exitList() {
        this.exit();
        this[STACKS].list.pop();
      }

      pushUpdating(list) {
        if (list === void 0) {
          list = [];
        }

        this[STACKS].updating.push(list);
      }

      popUpdating() {
        return this[STACKS].updating.pop();
      }

      updateWith(opcode) {
        this.updating().push(opcode);
      }

      listBlock() {
        return this[STACKS].list.current;
      }

      associateDestroyable(child) {
        var parent = this[DESTROYABLE_STACK].current;
        (0, _destroyable2.associateDestroyableChild)(parent, child);
      }

      tryUpdating() {
        return this[STACKS].updating.current;
      }

      updating() {
        return this[STACKS].updating.current;
      }

      elements() {
        return this.elementStack;
      }

      scope() {
        return this[STACKS].scope.current;
      }

      dynamicScope() {
        return this[STACKS].dynamicScope.current;
      }

      pushChildScope() {
        this[STACKS].scope.push(this.scope().child());
      }

      pushDynamicScope() {
        var child = this.dynamicScope().child();
        this[STACKS].dynamicScope.push(child);
        return child;
      }

      pushRootScope(size, owner) {
        var scope = PartialScopeImpl.sized(size, owner);
        this[STACKS].scope.push(scope);
        return scope;
      }

      pushScope(scope) {
        this[STACKS].scope.push(scope);
      }

      popScope() {
        this[STACKS].scope.pop();
      }

      popDynamicScope() {
        this[STACKS].dynamicScope.pop();
      } /// SCOPE HELPERS

      getOwner() {
        return this.scope().owner;
      }

      getSelf() {
        return this.scope().getSelf();
      }

      referenceForSymbol(symbol$$1) {
        return this.scope().getSymbol(symbol$$1);
      } /// EXECUTION

      execute(initialize) {
        if (
          true
          /* DEBUG */
        ) {
          var hasErrored = true;

          try {
            var value = this._execute(initialize); // using a boolean here to avoid breaking ergonomics of "pause on uncaught exceptions"
            // which would happen with a `catch` + `throw`

            hasErrored = false;
            return value;
          } finally {
            if (hasErrored) {
              // If any existing blocks are open, due to an error or something like
              // that, we need to close them all and clean things up properly.
              var elements = this.elements();

              while (elements.hasBlocks) {
                elements.popBlock();
              } // eslint-disable-next-line no-console

              console.error(
                `\n\nError occurred:\n\n${(0, _validator.resetTracking)()}\n\n`,
              );
            }
          }
        } else {
          return this._execute(initialize);
        }
      }

      _execute(initialize) {
        if (initialize) initialize(this);
        var result;

        while (true) {
          result = this.next();
          if (result.done) break;
        }

        return result.value;
      }

      next() {
        var { env, elementStack } = this;
        var opcode = this[INNER_VM].nextStatement();
        var result;

        if (opcode !== null) {
          this[INNER_VM].evaluateOuter(opcode, this);
          result = {
            done: false,
            value: null,
          };
        } else {
          // Unload the stack
          this.stack.reset();
          result = {
            done: true,
            value: new RenderResultImpl(
              env,
              this.popUpdating(),
              elementStack.popBlock(),
              this.destructor,
            ),
          };
        }

        return result;
      }

      bindDynamicScope(names) {
        var scope = this.dynamicScope();

        for (var i = names.length - 1; i >= 0; i--) {
          var name = names[i];
          scope.set(name, this.stack.pop());
        }
      }
    }

    _exports.LowLevelVM = VM;
    (_a$2 = STACKS), (_b = DESTROYABLE_STACK);

    function vmState(pc, scope, dynamicScope) {
      return {
        pc,
        scope,
        dynamicScope,
        stack: [],
      };
    }

    function initVM(context) {
      return (runtime, state, builder) =>
        new VM(runtime, state, builder, context);
    }

    class TemplateIteratorImpl {
      constructor(vm) {
        this.vm = vm;
      }

      next() {
        return this.vm.next();
      }

      sync() {
        if (
          true
          /* DEBUG */
        ) {
          return (0, _validator.runInTrackingTransaction)(
            () => this.vm.execute(),
            '- While rendering:',
          );
        } else {
          return this.vm.execute();
        }
      }
    }

    function renderSync(env, iterator) {
      var result;
      inTransaction(env, () => (result = iterator.sync()));
      return result;
    }

    function renderMain(
      runtime,
      context,
      owner,
      self,
      treeBuilder,
      layout,
      dynamicScope,
    ) {
      if (dynamicScope === void 0) {
        dynamicScope = new DynamicScopeImpl();
      }

      var handle = (0, _util.unwrapHandle)(layout.compile(context));
      var numSymbols = layout.symbolTable.symbols.length;
      var vm = VM.initial(runtime, context, {
        self,
        dynamicScope,
        treeBuilder,
        handle,
        numSymbols,
        owner,
      });
      return new TemplateIteratorImpl(vm);
    }

    function renderInvocation(vm, context, owner, definition, args) {
      // Get a list of tuples of argument names and references, like
      // [['title', reference], ['name', reference]]
      var argList = Object.keys(args).map((key) => [key, args[key]]);
      var blockNames = ['main', 'else', 'attrs']; // Prefix argument names with `@` symbol

      var argNames = argList.map((_ref62) => {
        var [name] = _ref62;
        return `@${name}`;
      });
      var reified = vm[CONSTANTS].component(definition, owner);
      vm.pushFrame(); // Push blocks on to the stack, three stack values per block

      for (var i = 0; i < 3 * blockNames.length; i++) {
        vm.stack.push(null);
      }

      vm.stack.push(null); // For each argument, push its backing reference on to the stack

      argList.forEach((_ref63) => {
        var [, reference] = _ref63;
        vm.stack.push(reference);
      }); // Configure VM based on blocks and args just pushed on to the stack.

      vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
      var compilable = reified.compilable;
      var layoutHandle = (0, _util.unwrapHandle)(compilable.compile(context));
      var invocation = {
        handle: layoutHandle,
        symbolTable: compilable.symbolTable,
      }; // Needed for the Op.Main opcode: arguments, component invocation object, and
      // component definition.

      vm.stack.push(vm[ARGS]);
      vm.stack.push(invocation);
      vm.stack.push(reified);
      return new TemplateIteratorImpl(vm);
    }

    function renderComponent(
      runtime,
      treeBuilder,
      context,
      owner,
      definition,
      args,
      dynamicScope,
    ) {
      if (args === void 0) {
        args = {};
      }

      if (dynamicScope === void 0) {
        dynamicScope = new DynamicScopeImpl();
      }

      var vm = VM.empty(
        runtime,
        {
          treeBuilder,
          handle: context.stdlib.main,
          dynamicScope,
          owner,
        },
        context,
      );
      return renderInvocation(
        vm,
        context,
        owner,
        definition,
        recordToReference(args),
      );
    }

    function recordToReference(record) {
      var root = (0, _reference.createConstRef)(record, 'args');
      return Object.keys(record).reduce((acc, key) => {
        acc[key] = (0, _reference.childRefFor)(root, key);
        return acc;
      }, {});
    }

    var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
    _exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;

    function isSerializationFirstNode(node) {
      return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
    }

    class RehydratingCursor extends CursorImpl {
      constructor(element, nextSibling, startingBlockDepth) {
        super(element, nextSibling);
        this.startingBlockDepth = startingBlockDepth;
        this.candidate = null;
        this.injectedOmittedNode = false;
        this.openBlockDepth = startingBlockDepth - 1;
      }
    }

    class RehydrateBuilder extends NewElementBuilder {
      constructor(env, parentNode, nextSibling) {
        super(env, parentNode, nextSibling);
        this.unmatchedAttributes = null;
        this.blockDepth = 0;
        if (nextSibling)
          throw new Error('Rehydration with nextSibling not supported');
        var node = this.currentCursor.element.firstChild;

        while (node !== null) {
          if (isOpenBlock(node)) {
            break;
          }

          node = node.nextSibling;
        }

        this.candidate = node;
        var startingBlockOffset = getBlockDepth(node);

        if (startingBlockOffset !== 0) {
          // We are rehydrating from a partial tree and not the root component
          // We need to add an extra block before the first block to rehydrate correctly
          // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
          var newBlockDepth = startingBlockOffset - 1;
          var newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);
          node.parentNode.insertBefore(newCandidate, this.candidate);
          var closingNode = node.nextSibling;

          while (closingNode !== null) {
            if (
              isCloseBlock(closingNode) &&
              getBlockDepth(closingNode) === startingBlockOffset
            ) {
              break;
            }

            closingNode = closingNode.nextSibling;
          }

          var newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);
          node.parentNode.insertBefore(
            newClosingBlock,
            closingNode.nextSibling,
          );
          this.candidate = newCandidate;
          this.startingBlockOffset = newBlockDepth;
        } else {
          this.startingBlockOffset = 0;
        }
      }

      get currentCursor() {
        return this[CURSOR_STACK].current;
      }

      get candidate() {
        if (this.currentCursor) {
          return this.currentCursor.candidate;
        }

        return null;
      }

      set candidate(node) {
        var currentCursor = this.currentCursor;
        currentCursor.candidate = node;
      }

      disableRehydration(nextSibling) {
        var currentCursor = this.currentCursor; // rehydration will be disabled until we either:
        // * hit popElement (and return to using the parent elements cursor)
        // * hit closeBlock and the next sibling is a close block comment
        //   matching the expected openBlockDepth

        currentCursor.candidate = null;
        currentCursor.nextSibling = nextSibling;
      }

      enableRehydration(candidate) {
        var currentCursor = this.currentCursor;
        currentCursor.candidate = candidate;
        currentCursor.nextSibling = null;
      }

      pushElement(element, nextSibling) {
        if (nextSibling === void 0) {
          nextSibling = null;
        }

        var cursor = new RehydratingCursor(
          element,
          nextSibling,
          this.blockDepth || 0,
        );
        /**
         * <div>   <---------------  currentCursor.element
         *   <!--%+b:1%--> <-------  would have been removed during openBlock
         *   <div> <---------------  currentCursor.candidate -> cursor.element
         *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
         *     Foo
         *     <!--%-b:2%-->
         *   </div>
         *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
         */

        if (this.candidate !== null) {
          cursor.candidate = element.firstChild;
          this.candidate = element.nextSibling;
        }

        this[CURSOR_STACK].push(cursor);
      } // clears until the end of the current container
      // either the current open block or higher

      clearMismatch(candidate) {
        var current = candidate;
        var currentCursor = this.currentCursor;

        if (currentCursor !== null) {
          var openBlockDepth = currentCursor.openBlockDepth;

          if (openBlockDepth >= currentCursor.startingBlockDepth) {
            while (current) {
              if (isCloseBlock(current)) {
                var closeBlockDepth = getBlockDepthWithOffset(
                  current,
                  this.startingBlockOffset,
                );

                if (openBlockDepth >= closeBlockDepth) {
                  break;
                }
              }

              current = this.remove(current);
            }
          } else {
            while (current !== null) {
              current = this.remove(current);
            }
          } // current cursor parentNode should be openCandidate if element
          // or openCandidate.parentNode if comment

          this.disableRehydration(current);
        }
      }

      __openBlock() {
        var { currentCursor } = this;
        if (currentCursor === null) return;
        var blockDepth = this.blockDepth;
        this.blockDepth++;
        var { candidate } = currentCursor;
        if (candidate === null) return;
        var { tagName } = currentCursor.element;

        if (
          isOpenBlock(candidate) &&
          getBlockDepthWithOffset(candidate, this.startingBlockOffset) ===
            blockDepth
        ) {
          this.candidate = this.remove(candidate);
          currentCursor.openBlockDepth = blockDepth;
        } else if (
          tagName !== 'TITLE' &&
          tagName !== 'SCRIPT' &&
          tagName !== 'STYLE'
        ) {
          this.clearMismatch(candidate);
        }
      }

      __closeBlock() {
        var { currentCursor } = this;
        if (currentCursor === null) return; // openBlock is the last rehydrated open block

        var openBlockDepth = currentCursor.openBlockDepth; // this currently is the expected next open block depth

        this.blockDepth--;
        var { candidate } = currentCursor;
        var isRehydrating = false;

        if (candidate !== null) {
          isRehydrating = true; //assert(
          //  openBlockDepth === this.blockDepth,
          //  'when rehydrating, openBlockDepth should match this.blockDepth here'
          //);

          if (
            isCloseBlock(candidate) &&
            getBlockDepthWithOffset(candidate, this.startingBlockOffset) ===
              openBlockDepth
          ) {
            var nextSibling = this.remove(candidate);
            this.candidate = nextSibling;
            currentCursor.openBlockDepth--;
          } else {
            // close the block and clear mismatch in parent container
            // we will be either at the end of the element
            // or at the end of our containing block
            this.clearMismatch(candidate);
            isRehydrating = false;
          }
        }

        if (isRehydrating === false) {
          // check if nextSibling matches our expected close block
          // if so, we remove the close block comment and
          // restore rehydration after clearMismatch disabled
          var _nextSibling = currentCursor.nextSibling;

          if (
            _nextSibling !== null &&
            isCloseBlock(_nextSibling) &&
            getBlockDepthWithOffset(_nextSibling, this.startingBlockOffset) ===
              this.blockDepth
          ) {
            // restore rehydration state
            var _candidate2 = this.remove(_nextSibling);

            this.enableRehydration(_candidate2);
            currentCursor.openBlockDepth--;
          }
        }
      }

      __appendNode(node) {
        var { candidate } = this; // This code path is only used when inserting precisely one node. It needs more
        // comparison logic, but we can probably lean on the cases where this code path
        // is actually used.

        if (candidate) {
          return candidate;
        } else {
          return super.__appendNode(node);
        }
      }

      __appendHTML(html) {
        var candidateBounds = this.markerBounds();

        if (candidateBounds) {
          var first = candidateBounds.firstNode();
          var last = candidateBounds.lastNode();
          var newBounds = new ConcreteBounds(
            this.element,
            first.nextSibling,
            last.previousSibling,
          );
          var possibleEmptyMarker = this.remove(first);
          this.remove(last);

          if (possibleEmptyMarker !== null && isEmpty$1(possibleEmptyMarker)) {
            this.candidate = this.remove(possibleEmptyMarker);

            if (this.candidate !== null) {
              this.clearMismatch(this.candidate);
            }
          }

          return newBounds;
        } else {
          return super.__appendHTML(html);
        }
      }

      remove(node) {
        var element = node.parentNode;
        var next = node.nextSibling;
        element.removeChild(node);
        return next;
      }

      markerBounds() {
        var _candidate = this.candidate;

        if (_candidate && isMarker(_candidate)) {
          var first = _candidate;
          var last = first.nextSibling;

          while (last && !isMarker(last)) {
            last = last.nextSibling;
          }

          return new ConcreteBounds(this.element, first, last);
        } else {
          return null;
        }
      }

      __appendText(string) {
        var { candidate } = this;

        if (candidate) {
          if (isTextNode(candidate)) {
            if (candidate.nodeValue !== string) {
              candidate.nodeValue = string;
            }

            this.candidate = candidate.nextSibling;
            return candidate;
          } else if (isSeparator(candidate)) {
            this.candidate = this.remove(candidate);
            return this.__appendText(string);
          } else if (isEmpty$1(candidate) && string === '') {
            this.candidate = this.remove(candidate);
            return this.__appendText(string);
          } else {
            this.clearMismatch(candidate);
            return super.__appendText(string);
          }
        } else {
          return super.__appendText(string);
        }
      }

      __appendComment(string) {
        var _candidate = this.candidate;

        if (_candidate && isComment(_candidate)) {
          if (_candidate.nodeValue !== string) {
            _candidate.nodeValue = string;
          }

          this.candidate = _candidate.nextSibling;
          return _candidate;
        } else if (_candidate) {
          this.clearMismatch(_candidate);
        }

        return super.__appendComment(string);
      }

      __openElement(tag) {
        var _candidate = this.candidate;

        if (
          _candidate &&
          isElement(_candidate) &&
          isSameNodeType(_candidate, tag)
        ) {
          this.unmatchedAttributes = [].slice.call(_candidate.attributes);
          return _candidate;
        } else if (_candidate) {
          if (isElement(_candidate) && _candidate.tagName === 'TBODY') {
            this.pushElement(_candidate, null);
            this.currentCursor.injectedOmittedNode = true;
            return this.__openElement(tag);
          }

          this.clearMismatch(_candidate);
        }

        return super.__openElement(tag);
      }

      __setAttribute(name, value, namespace) {
        var unmatched = this.unmatchedAttributes;

        if (unmatched) {
          var attr = findByName(unmatched, name);

          if (attr) {
            if (attr.value !== value) {
              attr.value = value;
            }

            unmatched.splice(unmatched.indexOf(attr), 1);
            return;
          }
        }

        return super.__setAttribute(name, value, namespace);
      }

      __setProperty(name, value) {
        var unmatched = this.unmatchedAttributes;

        if (unmatched) {
          var attr = findByName(unmatched, name);

          if (attr) {
            if (attr.value !== value) {
              attr.value = value;
            }

            unmatched.splice(unmatched.indexOf(attr), 1);
            return;
          }
        }

        return super.__setProperty(name, value);
      }

      __flushElement(parent, constructing) {
        var { unmatchedAttributes: unmatched } = this;

        if (unmatched) {
          for (var i = 0; i < unmatched.length; i++) {
            this.constructing.removeAttribute(unmatched[i].name);
          }

          this.unmatchedAttributes = null;
        } else {
          super.__flushElement(parent, constructing);
        }
      }

      willCloseElement() {
        var { candidate, currentCursor } = this;

        if (candidate !== null) {
          this.clearMismatch(candidate);
        }

        if (currentCursor && currentCursor.injectedOmittedNode) {
          this.popElement();
        }

        super.willCloseElement();
      }

      getMarker(element, guid) {
        var marker = element.querySelector(`script[glmr="${guid}"]`);

        if (marker) {
          return marker;
        }

        return null;
      }

      __pushRemoteElement(element, cursorId, insertBefore) {
        var marker = this.getMarker(element, cursorId);

        if (insertBefore === undefined) {
          while (element.firstChild !== null && element.firstChild !== marker) {
            this.remove(element.firstChild);
          }

          insertBefore = null;
        }

        var cursor = new RehydratingCursor(element, null, this.blockDepth);
        this[CURSOR_STACK].push(cursor);

        if (marker === null) {
          this.disableRehydration(insertBefore);
        } else {
          this.candidate = this.remove(marker);
        }

        var block = new RemoteLiveBlock(element);
        return this.pushLiveBlock(block, true);
      }

      didAppendBounds(bounds) {
        super.didAppendBounds(bounds);

        if (this.candidate) {
          var last = bounds.lastNode();
          this.candidate = last && last.nextSibling;
        }

        return bounds;
      }
    }

    _exports.RehydrateBuilder = RehydrateBuilder;

    function isTextNode(node) {
      return node.nodeType === 3;
    }

    function isComment(node) {
      return node.nodeType === 8;
    }

    function isOpenBlock(node) {
      return (
        node.nodeType === 8 &&
        /* COMMENT_NODE */
        node.nodeValue.lastIndexOf('%+b:', 0) === 0
      );
    }

    function isCloseBlock(node) {
      return (
        node.nodeType === 8 &&
        /* COMMENT_NODE */
        node.nodeValue.lastIndexOf('%-b:', 0) === 0
      );
    }

    function getBlockDepth(node) {
      return parseInt(node.nodeValue.slice(4), 10);
    }

    function getBlockDepthWithOffset(node, offset) {
      return getBlockDepth(node) - offset;
    }

    function isElement(node) {
      return node.nodeType === 1;
    }

    function isMarker(node) {
      return node.nodeType === 8 && node.nodeValue === '%glmr%';
    }

    function isSeparator(node) {
      return node.nodeType === 8 && node.nodeValue === '%|%';
    }

    function isEmpty$1(node) {
      return node.nodeType === 8 && node.nodeValue === '% %';
    }

    function isSameNodeType(candidate, tag) {
      if (
        candidate.namespaceURI === 'http://www.w3.org/2000/svg'
        /* SVG */
      ) {
        return candidate.tagName === tag;
      }

      return candidate.tagName === tag.toUpperCase();
    }

    function findByName(array, name) {
      for (var i = 0; i < array.length; i++) {
        var attr = array[i];
        if (attr.name === name) return attr;
      }

      return undefined;
    }

    function rehydrationBuilder(env, cursor) {
      return RehydrateBuilder.forInitialRender(env, cursor);
    }

    var ARGS_CACHES = true ? /* DEBUG */ new WeakMap() : undefined;

    function getArgs(proxy) {
      return (0, _validator.getValue)(
        true ? /* DEBUG */ ARGS_CACHES.get(proxy) : proxy.argsCache,
      );
    }

    class SimpleArgsProxy {
      constructor(context, computeArgs) {
        if (computeArgs === void 0) {
          computeArgs = () => EMPTY_ARGS;
        }

        var argsCache = (0, _validator.createCache)(() => computeArgs(context));

        if (
          true
          /* DEBUG */
        ) {
          ARGS_CACHES.set(this, argsCache);
          Object.freeze(this);
        } else {
          this.argsCache = argsCache;
        }
      }

      get named() {
        return getArgs(this).named || EMPTY_NAMED;
      }

      get positional() {
        return getArgs(this).positional || EMPTY_POSITIONAL;
      }
    } ////////////

    function invokeHelper(context, definition, computeArgs) {
      if (
        true &&
        /* DEBUG */
        (typeof context !== 'object' || context === null)
      ) {
        throw new Error(
          `Expected a context object to be passed as the first parameter to invokeHelper, got ${context}`,
        );
      }

      var owner = (0, _owner2.getOwner)(context);
      var internalManager = (0, _manager5.getInternalHelperManager)(definition); // TODO: figure out why assert isn't using the TS assert thing

      if (
        true &&
        /* DEBUG */
        !internalManager
      ) {
        throw new Error(
          `Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was \`${(0,
          _util.debugToString)(
            definition,
          )}\`. Did you use setHelperManager to associate a helper manager with this value?`,
        );
      }

      if (
        true &&
        /* DEBUG */
        typeof internalManager === 'function'
      ) {
        throw new Error(
          'Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.',
        );
      }

      var manager = internalManager.getDelegateFor(owner);
      var args = new SimpleArgsProxy(context, computeArgs);
      var bucket = manager.createHelper(definition, args);
      var cache;

      if ((0, _manager5.hasValue)(manager)) {
        cache = (0, _validator.createCache)(() => {
          if (
            true &&
            /* DEBUG */
            ((0, _destroyable2.isDestroying)(cache) ||
              (0, _destroyable2.isDestroyed)(cache))
          ) {
            throw new Error(
              `You attempted to get the value of a helper after the helper was destroyed, which is not allowed`,
            );
          }

          return manager.getValue(bucket);
        });
        (0, _destroyable2.associateDestroyableChild)(context, cache);
      } else {
        throw new Error(
          'TODO: unreachable, to be implemented with hasScheduledEffect',
        );
      }

      if ((0, _manager5.hasDestroyable)(manager)) {
        var destroyable = manager.getDestroyable(bucket);
        (0, _destroyable2.associateDestroyableChild)(cache, destroyable);
      }

      return cache;
    }

    function internalHelper(helper) {
      return (0, _manager5.setInternalHelperManager)(helper, {});
    }

    var context = (0, _util.buildUntouchableThis)('`fn` helper');
    /**
    The `fn` helper allows you to ensure a function that you are passing off
    to another component, helper, or modifier has access to arguments that are
    available in the template.
  
    For example, if you have an `each` helper looping over a number of items, you
    may need to pass a function that expects to receive the item as an argument
    to a component invoked within the loop. Here's how you could use the `fn`
    helper to pass both the function and its arguments together:
  
      ```app/templates/components/items-listing.hbs
    {{#each @items as |item|}}
      <DisplayItem @item=item @select={{fn this.handleSelected item}} />
    {{/each}}
    ```
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class ItemsList extends Component {
      handleSelected = (item) => {
        // ...snip...
      }
    }
    ```
  
    In this case the `display-item` component will receive a normal function
    that it can invoke. When it invokes the function, the `handleSelected`
    function will receive the `item` and any arguments passed, thanks to the
    `fn` helper.
  
    Let's take look at what that means in a couple circumstances:
  
    - When invoked as `this.args.select()` the `handleSelected` function will
      receive the `item` from the loop as its first and only argument.
    - When invoked as `this.args.select('foo')` the `handleSelected` function
      will receive the `item` from the loop as its first argument and the
      string `'foo'` as its second argument.
  
    In the example above, we used an arrow function to ensure that
    `handleSelected` is properly bound to the `items-list`, but let's explore what
    happens if we left out the arrow function:
  
    ```app/components/items-list.js
    import Component from '@glimmer/component';
  
    export default class ItemsList extends Component {
      handleSelected(item) {
        // ...snip...
      }
    }
    ```
  
    In this example, when `handleSelected` is invoked inside the `display-item`
    component, it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `fn`!
  
    See also [partial application](https://en.wikipedia.org/wiki/Partial_application).
  
    @method fn
    @public
  */

    var fn = internalHelper((_ref64) => {
      var { positional } = _ref64;
      var callbackRef = positional[0];
      if (
        true
        /* DEBUG */
      )
        assertCallbackIsFn(callbackRef);
      return (0, _reference.createComputeRef)(
        () => {
          return function () {
            var [fn, ...args] = (0, _runtime.reifyPositional)(positional);
            if (
              true
              /* DEBUG */
            )
              assertCallbackIsFn(callbackRef);

            for (
              var _len = arguments.length,
                invocationArgs = new Array(_len),
                _key2 = 0;
              _key2 < _len;
              _key2++
            ) {
              invocationArgs[_key2] = arguments[_key2];
            }

            if ((0, _reference.isInvokableRef)(callbackRef)) {
              var value = args.length > 0 ? args[0] : invocationArgs[0];
              return (0, _reference.updateRef)(callbackRef, value);
            } else {
              return fn.call(context, ...args, ...invocationArgs);
            }
          };
        },
        null,
        'fn',
      );
    });
    _exports.fn = fn;

    function assertCallbackIsFn(callbackRef) {
      if (
        !(
          callbackRef &&
          ((0, _reference.isInvokableRef)(callbackRef) ||
            typeof (0, _reference.valueForRef)(callbackRef) === 'function')
        )
      ) {
        throw new Error(
          `You must pass a function as the \`fn\` helper's first argument, you passed ${
            callbackRef ? (0, _reference.valueForRef)(callbackRef) : callbackRef
          }. While rendering:\n\n${
            callbackRef === null || callbackRef === void 0
              ? void 0
              : callbackRef.debugLabel
          }`,
        );
      }
    }

    var wrapHashProxy;

    if (
      true
      /* DEBUG */
    ) {
      wrapHashProxy = (hash) => {
        return new Proxy(hash, {
          set(target, key, value) {
            true &&
              !false &&
              (0, _globalContext.deprecate)(
                `You set the '${String(
                  key,
                )}' property on a {{hash}} object. Setting properties on objects generated by {{hash}} is deprecated. Please update to use an object created with a tracked property or getter, or with a custom helper.`,
                false,
                {
                  id: 'setting-on-hash',
                },
              );
            target[key] = value;
            return true;
          },
        });
      };
    }
    /**
     Use the `{{hash}}` helper to create a hash to pass as an option to your
     components. This is specially useful for contextual components where you can
     just yield a hash:
  
     ```handlebars
     {{yield (hash
        name='Sarah'
        title=office
     )}}
     ```
  
     Would result in an object such as:
  
     ```js
     { name: 'Sarah', title: this.get('office') }
     ```
  
     Where the `title` is bound to updates of the `office` property.
  
     Note that the hash is an empty object with no prototype chain, therefore
     common methods like `toString` are not available in the resulting hash.
     If you need to use such a method, you can use the `call` or `apply`
     approach:
  
     ```js
     function toString(obj) {
       return Object.prototype.toString.apply(obj);
     }
     ```
  
     @method hash
     @param {Object} options
     @return {Object} Hash
     @public
   */

    var hash = internalHelper((_ref65) => {
      var { named } = _ref65;
      var ref = (0, _reference.createComputeRef)(
        () => {
          var hash = (0, _runtime.reifyNamed)(named);

          if (
            true &&
            /* DEBUG */
            _util.HAS_NATIVE_PROXY
          ) {
            hash = wrapHashProxy(hash);
          }

          return hash;
        },
        null,
        'hash',
      ); // Setup the children so that templates can bypass getting the value of
      // the reference and treat children lazily

      var children = new Map();

      for (var name in named) {
        children.set(name, named[name]);
      }

      ref.children = children;
      return ref;
    });
    /**
     Use the `{{array}}` helper to create an array to pass as an option to your
     components.
  
     ```handlebars
     <MyComponent @people={{array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson}}
     />
     ```
      or
     ```handlebars
     {{my-component people=(array
       'Tom Dale'
       'Yehuda Katz'
       this.myOtherPerson)
     }}
     ```
  
     Would result in an object such as:
  
     ```js
     ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
     ```
  
     Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.
  
     @method array
     @param {Array} options
     @return {Array} Array
     @public
   */

    _exports.hash = hash;
    var array = internalHelper((_ref66) => {
      var { positional } = _ref66;
      return (0, _reference.createComputeRef)(
        () => (0, _runtime.reifyPositional)(positional),
        null,
        'array',
      );
    });
    /**
    Dynamically look up a property on an object. The second argument to `{{get}}`
    should have a string value, although it can be bound.
  
    For example, these two usages are equivalent:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
    }
    ```
  
    ```handlebars
    {{this.developer.name}}
    {{get this.developer "name"}}
    ```
  
    If there were several facts about a person, the `{{get}}` helper can dynamically
    pick one:
  
    ```app/templates/application.hbs
    <DeveloperDetail @factName="language" />
    ```
  
    ```handlebars
    {{get this.developer @factName}}
    ```
  
    For a more complex example, this template would allow the user to switch
    between showing the user's height and weight with a click:
  
    ```app/components/developer-detail.js
    import Component from '@glimmer/component';
    import { tracked } from '@glimmer/tracking';
  
    export default class extends Component {
      @tracked developer = {
        name: "Sandi Metz",
        language: "Ruby"
      }
  
      @tracked currentFact = 'name'
  
      showFact = (fact) => {
        this.currentFact = fact;
      }
    }
    ```
  
    ```app/components/developer-detail.js
    {{get this.developer this.currentFact}}
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    The `{{get}}` helper can also respect mutable values itself. For example:
  
    ```app/components/developer-detail.js
    <Input @value={{mut (get this.person this.currentFact)}} />
  
    <button {{on 'click' (fn this.showFact "name")}}>Show name</button>
    <button {{on 'click' (fn this.showFact "language")}}>Show language</button>
    ```
  
    Would allow the user to swap what fact is being displayed, and also edit
    that fact via a two-way mutable binding.
  
    @public
    @method get
   */

    _exports.array = array;
    var get = internalHelper((_ref67) => {
      var { positional } = _ref67;

      var _a, _b;

      var sourceRef =
        (_a = positional[0]) !== null && _a !== void 0
          ? _a
          : _reference.UNDEFINED_REFERENCE;
      var pathRef =
        (_b = positional[1]) !== null && _b !== void 0
          ? _b
          : _reference.UNDEFINED_REFERENCE;
      return (0, _reference.createComputeRef)(
        () => {
          var source = (0, _reference.valueForRef)(sourceRef);

          if ((0, _util.isDict)(source)) {
            return (0, _globalContext.getPath)(
              source,
              String((0, _reference.valueForRef)(pathRef)),
            );
          }
        },
        (value) => {
          var source = (0, _reference.valueForRef)(sourceRef);

          if ((0, _util.isDict)(source)) {
            return (0, _globalContext.setPath)(
              source,
              String((0, _reference.valueForRef)(pathRef)),
              value,
            );
          }
        },
        'get',
      );
    });
    _exports.get = get;

    var isEmpty$2 = (value) => {
      return (
        value === null ||
        value === undefined ||
        typeof value.toString !== 'function'
      );
    };

    var normalizeTextValue = (value) => {
      if (isEmpty$2(value)) {
        return '';
      }

      return String(value);
    };
    /**
    Concatenates the given arguments into a string.
  
    Example:
  
    ```handlebars
    {{some-component name=(concat firstName " " lastName)}}
  
    {{! would pass name="<first name value> <last name value>" to the component}}
    ```
  
    or for angle bracket invocation, you actually don't need concat at all.
  
    ```handlebars
    <SomeComponent @name="{{firstName}} {{lastName}}" />
    ```
  
    @public
    @method concat
  */

    var concat = internalHelper((_ref68) => {
      var { positional } = _ref68;
      return (0, _reference.createComputeRef)(
        () =>
          (0, _runtime.reifyPositional)(positional)
            .map(normalizeTextValue)
            .join(''),
        null,
        'concat',
      );
    });
    _exports.concat = concat;
    var untouchableContext = (0, _util.buildUntouchableThis)('`on` modifier');
    /*
    Internet Explorer 11 does not support `once` and also does not support
    passing `eventOptions`. In some situations it then throws a weird script
    error, like:
  
    ```
    Could not complete the operation due to error 80020101
    ```
  
    This flag determines, whether `{ once: true }` and thus also event options in
    general are supported.
  */

    var SUPPORTS_EVENT_OPTIONS = (() => {
      try {
        var div = document.createElement('div');
        var counter = 0;
        div.addEventListener('click', () => counter++, {
          once: true,
        });
        var event;

        if (typeof Event === 'function') {
          event = new Event('click');
        } else {
          event = document.createEvent('Event');
          event.initEvent('click', true, true);
        }

        div.dispatchEvent(event);
        div.dispatchEvent(event);
        return counter === 1;
      } catch (error) {
        return false;
      }
    })();

    class OnModifierState {
      constructor(element, args) {
        this.tag = (0, _validator.createUpdatableTag)();
        this.shouldUpdate = true;
        this.element = element;
        this.args = args;
      }

      updateFromArgs() {
        var { args } = this;
        var { once, passive, capture } = (0, _runtime.reifyNamed)(args.named);

        if (once !== this.once) {
          this.once = once;
          this.shouldUpdate = true;
        }

        if (passive !== this.passive) {
          this.passive = passive;
          this.shouldUpdate = true;
        }

        if (capture !== this.capture) {
          this.capture = capture;
          this.shouldUpdate = true;
        }

        var options;

        if (once || passive || capture) {
          options = this.options = {
            once,
            passive,
            capture,
          };
        } else {
          this.options = undefined;
        }

        if (
          true &&
          /* DEBUG */
          (args.positional[0] === undefined ||
            typeof (0, _reference.valueForRef)(args.positional[0]) !== 'string')
        ) {
          throw new Error(
            'You must pass a valid DOM event name as the first argument to the `on` modifier',
          );
        }

        var eventName = (0, _reference.valueForRef)(args.positional[0]);

        if (eventName !== this.eventName) {
          this.eventName = eventName;
          this.shouldUpdate = true;
        }

        var userProvidedCallbackReference = args.positional[1];

        if (
          true
          /* DEBUG */
        ) {
          if (args.positional[1] === undefined) {
            throw new Error(
              `You must pass a function as the second argument to the \`on\` modifier.`,
            );
          }

          var value = (0, _reference.valueForRef)(
            userProvidedCallbackReference,
          );

          if (typeof value !== 'function') {
            throw new Error(
              `You must pass a function as the second argument to the \`on\` modifier; you passed ${
                value === null ? 'null' : typeof value
              }. While rendering:\n\n${
                userProvidedCallbackReference.debugLabel
              }`,
            );
          }
        }

        var userProvidedCallback = (0, _reference.valueForRef)(
          userProvidedCallbackReference,
        );

        if (userProvidedCallback !== this.userProvidedCallback) {
          this.userProvidedCallback = userProvidedCallback;
          this.shouldUpdate = true;
        }

        if (
          true &&
          /* DEBUG */
          args.positional.length !== 2
        ) {
          throw new Error(
            `You can only pass two positional arguments (event name and callback) to the \`on\` modifier, but you provided ${args.positional.length}. Consider using the \`fn\` helper to provide additional arguments to the \`on\` callback.`,
          );
        }

        var needsCustomCallback =
          (SUPPORTS_EVENT_OPTIONS === false && once) ||
          /* needs manual once implementation */
          (true &&
            /* DEBUG */
            passive);
        /* needs passive enforcement */

        if (this.shouldUpdate) {
          if (needsCustomCallback) {
            var _callback = (this.callback = function (event) {
              if (
                true &&
                /* DEBUG */
                passive
              ) {
                event.preventDefault = () => {
                  throw new Error(
                    `You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \n\n${userProvidedCallback}`,
                  );
                };
              }

              if (!SUPPORTS_EVENT_OPTIONS && once) {
                removeEventListener(this, eventName, _callback, options);
              }

              return userProvidedCallback.call(untouchableContext, event);
            });
          } else if (
            true
            /* DEBUG */
          ) {
            // prevent the callback from being bound to the element
            this.callback = userProvidedCallback.bind(untouchableContext);
          } else {
            this.callback = userProvidedCallback;
          }
        }
      }
    }

    var adds = 0;
    var removes = 0;

    function removeEventListener(element, eventName, callback, options) {
      removes++;

      if (SUPPORTS_EVENT_OPTIONS) {
        // when options are supported, use them across the board
        element.removeEventListener(eventName, callback, options);
      } else if (options !== undefined && options.capture) {
        // used only in the following case:
        //
        // `{ once: true | false, passive: true | false, capture: true }
        //
        // `once` is handled via a custom callback that removes after first
        // invocation so we only care about capture here as a boolean
        element.removeEventListener(eventName, callback, true);
      } else {
        // used only in the following cases:
        //
        // * where there is no options
        // * `{ once: true | false, passive: true | false, capture: false }
        element.removeEventListener(eventName, callback);
      }
    }

    function addEventListener(element, eventName, callback, options) {
      adds++;

      if (SUPPORTS_EVENT_OPTIONS) {
        // when options are supported, use them across the board
        element.addEventListener(eventName, callback, options);
      } else if (options !== undefined && options.capture) {
        // used only in the following case:
        //
        // `{ once: true | false, passive: true | false, capture: true }
        //
        // `once` is handled via a custom callback that removes after first
        // invocation so we only care about capture here as a boolean
        element.addEventListener(eventName, callback, true);
      } else {
        // used only in the following cases:
        //
        // * where there is no options
        // * `{ once: true | false, passive: true | false, capture: false }
        element.addEventListener(eventName, callback);
      }
    }
    /**
    The `{{on}}` modifier lets you easily add event listeners (it uses
    [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
    internally).
  
    For example, if you'd like to run a function on your component when a `<button>`
    in the components template is clicked you might do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' this.saveLike}}>Like this post!</button>
    ```
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
    import { action } from '@ember/object';
  
    export default class LikePostComponent extends Component {
      saveLike = () => {
        // someone likes your post!
        // better send a request off to your server...
      }
    }
    ```
  
    ### Arguments
  
    `{{on}}` accepts two positional arguments, and a few named arguments.
  
    The positional arguments are:
  
    - `event` -- the name to use when calling `addEventListener`
    - `callback` -- the function to be passed to `addEventListener`
  
    The named arguments are:
  
    - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
    - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
    - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.
  
    The callback function passed to `{{on}}` will receive any arguments that are passed
    to the event handler. Most commonly this would be the `event` itself.
  
    If you would like to pass additional arguments to the function you should use
    the `{{fn}}` helper.
  
    For example, in our example case above if you'd like to pass in the post that
    was being liked when the button is clicked you could do something like:
  
    ```app/components/like-post.hbs
    <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
    ```
  
    In this case, the `saveLike` function will receive two arguments: the click event
    and the value of `@post`.
  
    ### Function Context
  
    In the example above, we used an arrow function to ensure that `likePost` is
    properly bound to the `items-list`, but let's explore what happens if we
    left out the arrow function:
  
    ```app/components/like-post.js
    import Component from '@glimmer/component';
  
    export default class LikePostComponent extends Component {
      saveLike() {
        // ...snip...
      }
    }
    ```
  
    In this example, when the button is clicked `saveLike` will be invoked,
    it will **not** have access to the component instance. In other
    words, it will have no `this` context, so please make sure your functions
    are bound (via an arrow function or other means) before passing into `on`!
  
    @method on
    @public
  */

    class OnModifierManager {
      constructor() {
        this.SUPPORTS_EVENT_OPTIONS = SUPPORTS_EVENT_OPTIONS;
      }

      getDebugName() {
        return 'on';
      }

      get counters() {
        return {
          adds,
          removes,
        };
      }

      create(_owner, element, _state, args) {
        return new OnModifierState(element, args);
      }

      getTag(state) {
        if (state === null) {
          return null;
        }

        return state.tag;
      }

      install(state) {
        if (state === null) {
          return;
        }

        state.updateFromArgs();
        var { element, eventName, callback, options } = state;
        addEventListener(element, eventName, callback, options);
        (0, _destroyable2.registerDestructor)(state, () =>
          removeEventListener(element, eventName, callback, options),
        );
        state.shouldUpdate = false;
      }

      update(state) {
        if (state === null) {
          return;
        } // stash prior state for el.removeEventListener

        var { element, eventName, callback, options } = state;
        state.updateFromArgs();

        if (!state.shouldUpdate) {
          return;
        } // use prior state values for removal

        removeEventListener(element, eventName, callback, options); // read updated values from the state object

        addEventListener(
          state.element,
          state.eventName,
          state.callback,
          state.options,
        );
        state.shouldUpdate = false;
      }

      getDestroyable(state) {
        return state;
      }
    }

    var on = (0, _manager5.setInternalModifierManager)(
      new OnModifierManager(),
      {},
    );
    _exports.on = on;
  });
  define('@glimmer/tracking/index', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'cached', {
      enumerable: true,
      get: function () {
        return _metal.cached;
      },
    });
    Object.defineProperty(_exports, 'tracked', {
      enumerable: true,
      get: function () {
        return _metal.tracked;
      },
    });
  });
  define('@glimmer/tracking/primitives/cache', [
    'exports',
    '@ember/-internals/metal',
  ], function (_exports, _metal) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'createCache', {
      enumerable: true,
      get: function () {
        return _metal.createCache;
      },
    });
    Object.defineProperty(_exports, 'getValue', {
      enumerable: true,
      get: function () {
        return _metal.getValue;
      },
    });
    Object.defineProperty(_exports, 'isConst', {
      enumerable: true,
      get: function () {
        return _metal.isConst;
      },
    });
  });
  define('@glimmer/util', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports._WeakSet = _exports.Stack = _exports.SERIALIZATION_FIRST_NODE_STRING = _exports.LOGGER = _exports.LOCAL_LOGGER = _exports.HAS_NATIVE_SYMBOL = _exports.HAS_NATIVE_PROXY = _exports.EMPTY_STRING_ARRAY = _exports.EMPTY_NUMBER_ARRAY = _exports.EMPTY_ARRAY = void 0;
    _exports.assert = debugAssert$$1;
    _exports.assertNever = assertNever;
    _exports.assertPresent = assertPresent;
    _exports.beginTestSteps = _exports.assign = void 0;
    _exports.buildUntouchableThis = buildUntouchableThis;
    _exports.castToBrowser = castToBrowser;
    _exports.castToSimple = castToSimple;
    _exports.checkNode = checkNode;
    _exports.clearElement = clearElement;
    _exports.constants = constants;
    _exports.debugToString = void 0;
    _exports.decodeHandle = decodeHandle;
    _exports.decodeImmediate = decodeImmediate;
    _exports.decodeNegative = decodeNegative;
    _exports.decodePositive = decodePositive;
    _exports.deprecate = deprecate$$1;
    _exports.dict = dict;
    _exports.emptyArray = emptyArray;
    _exports.encodeHandle = encodeHandle;
    _exports.encodeImmediate = encodeImmediate;
    _exports.encodeNegative = encodeNegative;
    _exports.encodePositive = encodePositive;
    _exports.endTestSteps = void 0;
    _exports.enumerableSymbol = enumerableSymbol;
    _exports.exhausted = exhausted;
    _exports.expect = expect;
    _exports.extractHandle = extractHandle;
    _exports.fillNulls = fillNulls;
    _exports.ifPresent = ifPresent;
    _exports.intern = intern;
    _exports.isDict = isDict;
    _exports.isEmptyArray = isEmptyArray;
    _exports.isErrHandle = isErrHandle;
    _exports.isHandle = isHandle;
    _exports.isNonPrimitiveHandle = isNonPrimitiveHandle;
    _exports.isObject = isObject;
    _exports.isOkHandle = isOkHandle;
    _exports.isPresent = isPresent;
    _exports.isSerializationFirstNode = isSerializationFirstNode;
    _exports.isSmallInt = isSmallInt;
    _exports.keys = keys;
    _exports.logStep = void 0;
    _exports.mapPresent = mapPresent;
    _exports.strip = strip;
    _exports.symbol = void 0;
    _exports.toPresentOption = toPresentOption;
    _exports.tuple = void 0;
    _exports.unreachable = unreachable;
    _exports.unwrap = unwrap;
    _exports.unwrapHandle = unwrapHandle;
    _exports.unwrapTemplate = unwrapTemplate;
    _exports.values = values;
    _exports.verifySteps = void 0;
    var EMPTY_ARRAY = Object.freeze([]);
    _exports.EMPTY_ARRAY = EMPTY_ARRAY;

    function emptyArray() {
      return EMPTY_ARRAY;
    }

    var EMPTY_STRING_ARRAY = emptyArray();
    _exports.EMPTY_STRING_ARRAY = EMPTY_STRING_ARRAY;
    var EMPTY_NUMBER_ARRAY = emptyArray();
    /**
     * This function returns `true` if the input array is the special empty array sentinel,
     * which is sometimes used for optimizations.
     */

    _exports.EMPTY_NUMBER_ARRAY = EMPTY_NUMBER_ARRAY;

    function isEmptyArray(input) {
      return input === EMPTY_ARRAY;
    } // import Logger from './logger';

    function debugAssert$$1(test, msg) {
      // if (!alreadyWarned) {
      //   alreadyWarned = true;
      //   Logger.warn("Don't leave debug assertions on in public builds");
      // }
      if (!test) {
        throw new Error(msg || 'assertion failure');
      }
    }

    function deprecate$$1(desc) {
      LOCAL_LOGGER.warn(`DEPRECATION: ${desc}`);
    }

    function dict() {
      return Object.create(null);
    }

    function isDict(u) {
      return u !== null && u !== undefined;
    }

    function isObject(u) {
      return typeof u === 'function' || (typeof u === 'object' && u !== null);
    }

    class StackImpl {
      constructor(values) {
        if (values === void 0) {
          values = [];
        }

        this.current = null;
        this.stack = values;
      }

      get size() {
        return this.stack.length;
      }

      push(item) {
        this.current = item;
        this.stack.push(item);
      }

      pop() {
        var item = this.stack.pop();
        var len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
      }

      nth(from) {
        var len = this.stack.length;
        return len < from ? null : this.stack[len - from];
      }

      isEmpty() {
        return this.stack.length === 0;
      }

      toArray() {
        return this.stack;
      }
    }

    _exports.Stack = StackImpl;

    function clearElement(parent) {
      var current = parent.firstChild;

      while (current) {
        var next = current.nextSibling;
        parent.removeChild(current);
        current = next;
      }
    }

    var SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';
    _exports.SERIALIZATION_FIRST_NODE_STRING = SERIALIZATION_FIRST_NODE_STRING;

    function isSerializationFirstNode(node) {
      return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;
    }

    var assign = Object.assign;
    _exports.assign = assign;

    function fillNulls(count) {
      var arr = new Array(count);

      for (var i = 0; i < count; i++) {
        arr[i] = null;
      }

      return arr;
    }

    function values(obj) {
      var vals = [];

      for (var key in obj) {
        vals.push(obj[key]);
      }

      return vals;
    }
    /**
    Strongly hint runtimes to intern the provided string.
  
    When do I need to use this function?
  
    For the most part, never. Pre-mature optimization is bad, and often the
    runtime does exactly what you need it to, and more often the trade-off isn't
    worth it.
  
    Why?
  
    Runtimes store strings in at least 2 different representations:
    Ropes and Symbols (interned strings). The Rope provides a memory efficient
    data-structure for strings created from concatenation or some other string
    manipulation like splitting.
  
    Unfortunately checking equality of different ropes can be quite costly as
    runtimes must resort to clever string comparison algorithms. These
    algorithms typically cost in proportion to the length of the string.
    Luckily, this is where the Symbols (interned strings) shine. As Symbols are
    unique by their string content, equality checks can be done by pointer
    comparison.
  
    How do I know if my string is a rope or symbol?
  
    Typically (warning general sweeping statement, but truthy in runtimes at
    present) static strings created as part of the JS source are interned.
    Strings often used for comparisons can be interned at runtime if some
    criteria are met.  One of these criteria can be the size of the entire rope.
    For example, in chrome 38 a rope longer then 12 characters will not
    intern, nor will segments of that rope.
  
    Some numbers: http://jsperf.com/eval-vs-keys/8
  
    Known Trick™
  
    @private
    @return {String} interned version of the provided string
  */

    function intern(str) {
      var obj = {};
      obj[str] = 1;

      for (var key in obj) {
        if (key === str) {
          return key;
        }
      }

      return str;
    }

    var HAS_NATIVE_PROXY = typeof Proxy === 'function';
    _exports.HAS_NATIVE_PROXY = HAS_NATIVE_PROXY;

    var HAS_NATIVE_SYMBOL = (function () {
      if (typeof Symbol !== 'function') {
        return false;
      } // eslint-disable-next-line symbol-description

      return typeof Symbol() === 'symbol';
    })();

    _exports.HAS_NATIVE_SYMBOL = HAS_NATIVE_SYMBOL;

    function keys(obj) {
      return Object.keys(obj);
    }

    function unwrap(val) {
      if (val === null || val === undefined)
        throw new Error(`Expected value to be present`);
      return val;
    }

    function expect(val, message) {
      if (val === null || val === undefined) throw new Error(message);
      return val;
    }

    function unreachable(message) {
      if (message === void 0) {
        message = 'unreachable';
      }

      return new Error(message);
    }

    function exhausted(value) {
      throw new Error(`Exhausted ${value}`);
    }

    var tuple = function () {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      return args;
    };

    _exports.tuple = tuple;

    function enumerableSymbol(key) {
      return intern(`__${key}${Math.floor(Math.random() * Date.now())}__`);
    }

    var symbol = HAS_NATIVE_SYMBOL ? Symbol : enumerableSymbol;
    _exports.symbol = symbol;

    function strip(strings) {
      var out = '';

      for (
        var _len2 = arguments.length,
          args = new Array(_len2 > 1 ? _len2 - 1 : 0),
          _key2 = 1;
        _key2 < _len2;
        _key2++
      ) {
        args[_key2 - 1] = arguments[_key2];
      }

      for (var i = 0; i < strings.length; i++) {
        var string = strings[i];
        var dynamic = args[i] !== undefined ? String(args[i]) : '';
        out += `${string}${dynamic}`;
      }

      var lines = out.split('\n');

      while (lines.length && lines[0].match(/^\s*$/)) {
        lines.shift();
      }

      while (lines.length && lines[lines.length - 1].match(/^\s*$/)) {
        lines.pop();
      }

      var min = Infinity;

      for (var line of lines) {
        var leading = line.match(/^\s*/)[0].length;
        min = Math.min(min, leading);
      }

      var stripped = [];

      for (var _line of lines) {
        stripped.push(_line.slice(min));
      }

      return stripped.join('\n');
    }

    function isHandle(value) {
      return value >= 0;
    }

    function isNonPrimitiveHandle(value) {
      return (
        value > 3
        /* ENCODED_UNDEFINED_HANDLE */
      );
    }

    function constants() {
      for (
        var _len3 = arguments.length, values = new Array(_len3), _key3 = 0;
        _key3 < _len3;
        _key3++
      ) {
        values[_key3] = arguments[_key3];
      }

      return [false, true, null, undefined, ...values];
    }

    function isSmallInt(value) {
      return (
        value % 1 === 0 &&
        value <= 536870911 &&
        /* MAX_INT */
        value >= -536870912
        /* MIN_INT */
      );
    }

    function encodeNegative(num) {
      return (
        num & -536870913
        /* SIGN_BIT */
      );
    }

    function decodeNegative(num) {
      return (
        num | ~-536870913
        /* SIGN_BIT */
      );
    }

    function encodePositive(num) {
      return ~num;
    }

    function decodePositive(num) {
      return ~num;
    }

    function encodeHandle(num) {
      return num;
    }

    function decodeHandle(num) {
      return num;
    }

    function encodeImmediate(num) {
      num |= 0;
      return num < 0 ? encodeNegative(num) : encodePositive(num);
    }

    function decodeImmediate(num) {
      num |= 0;
      return num > -536870913
        ? /* SIGN_BIT */
          decodePositive(num)
        : decodeNegative(num);
    } // Warm

    [1, -1].forEach((x) => decodeImmediate(encodeImmediate(x)));

    function unwrapHandle(handle) {
      if (typeof handle === 'number') {
        return handle;
      } else {
        var error = handle.errors[0];
        throw new Error(
          `Compile Error: ${error.problem} @ ${error.span.start}..${error.span.end}`,
        );
      }
    }

    function unwrapTemplate(template) {
      if (template.result === 'error') {
        throw new Error(
          `Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`,
        );
      }

      return template;
    }

    function extractHandle(handle) {
      if (typeof handle === 'number') {
        return handle;
      } else {
        return handle.handle;
      }
    }

    function isOkHandle(handle) {
      return typeof handle === 'number';
    }

    function isErrHandle(handle) {
      return typeof handle === 'number';
    }

    var weakSet =
      typeof WeakSet === 'function'
        ? WeakSet
        : class WeakSetPolyFill {
            constructor() {
              this._map = new WeakMap();
            }

            add(val) {
              this._map.set(val, true);

              return this;
            }

            delete(val) {
              return this._map.delete(val);
            }

            has(val) {
              return this._map.has(val);
            }
          };
    _exports._WeakSet = weakSet;

    function castToSimple(node) {
      if (isDocument(node)) {
        return node;
      } else if (isElement(node)) {
        return node;
      } else {
        return node;
      }
    }

    function castToBrowser(node, sugaryCheck) {
      if (node === null || node === undefined) {
        return null;
      }

      if (typeof document === undefined) {
        throw new Error(
          'Attempted to cast to a browser node in a non-browser context',
        );
      }

      if (isDocument(node)) {
        return node;
      }

      if (node.ownerDocument !== document) {
        throw new Error(
          'Attempted to cast to a browser node with a node that was not created from this document',
        );
      }

      return checkNode(node, sugaryCheck);
    }

    function checkError(from, check) {
      return new Error(`cannot cast a ${from} into ${check}`);
    }

    function isDocument(node) {
      return (
        node.nodeType === 9
        /* DOCUMENT_NODE */
      );
    }

    function isElement(node) {
      return (
        node.nodeType === 1
        /* ELEMENT_NODE */
      );
    }

    function checkNode(node, check) {
      var isMatch = false;

      if (node !== null) {
        if (typeof check === 'string') {
          isMatch = stringCheckNode(node, check);
        } else if (Array.isArray(check)) {
          isMatch = check.some((c) => stringCheckNode(node, c));
        } else {
          throw unreachable();
        }
      }

      if (isMatch) {
        return node;
      } else {
        throw checkError(`SimpleElement(${node})`, check);
      }
    }

    function stringCheckNode(node, check) {
      switch (check) {
        case 'NODE':
          return true;

        case 'HTML':
          return node instanceof HTMLElement;

        case 'SVG':
          return node instanceof SVGElement;

        case 'ELEMENT':
          return node instanceof Element;

        default:
          if (check.toUpperCase() === check) {
            throw new Error(
              `BUG: this code is missing handling for a generic node type`,
            );
          }

          return (
            node instanceof Element && node.tagName.toLowerCase() === check
          );
      }
    }

    function isPresent(list) {
      return list.length > 0;
    }

    function ifPresent(list, ifPresent, otherwise) {
      if (isPresent(list)) {
        return ifPresent(list);
      } else {
        return otherwise();
      }
    }

    function toPresentOption(list) {
      if (isPresent(list)) {
        return list;
      } else {
        return null;
      }
    }

    function assertPresent(list, message) {
      if (message === void 0) {
        message = `unexpected empty list`;
      }

      if (!isPresent(list)) {
        throw new Error(message);
      }
    }

    function mapPresent(list, callback) {
      if (list === null) {
        return null;
      }

      var out = [];

      for (var item of list) {
        out.push(callback(item));
      }

      return out;
    }

    function buildUntouchableThis(source) {
      var context = null;

      if (
        true &&
        /* DEBUG */
        HAS_NATIVE_PROXY
      ) {
        var assertOnProperty = (property) => {
          throw new Error(
            `You accessed \`this.${String(
              property,
            )}\` from a function passed to the ${source}, but the function itself was not bound to a valid \`this\` context. Consider updating to use a bound function (for instance, use an arrow function, \`() => {}\`).`,
          );
        };

        context = new Proxy(
          {},
          {
            get(_target, property) {
              assertOnProperty(property);
            },

            set(_target, property) {
              assertOnProperty(property);
              return false;
            },

            has(_target, property) {
              assertOnProperty(property);
              return false;
            },
          },
        );
      }

      return context;
    }

    var debugToString;

    if (
      true
      /* DEBUG */
    ) {
      var getFunctionName = (fn) => {
        var functionName = fn.name;

        if (functionName === undefined) {
          var match = Function.prototype.toString
            .call(fn)
            .match(/function (\w+)\s*\(/);
          functionName = (match && match[1]) || '';
        }

        return functionName.replace(/^bound /, '');
      };

      var getObjectName = (obj) => {
        var name;
        var className;

        if (obj.constructor && typeof obj.constructor === 'function') {
          className = getFunctionName(obj.constructor);
        }

        if (
          'toString' in obj &&
          obj.toString !== Object.prototype.toString &&
          obj.toString !== Function.prototype.toString
        ) {
          name = obj.toString();
        } // If the class has a decent looking name, and the `toString` is one of the
        // default Ember toStrings, replace the constructor portion of the toString
        // with the class name. We check the length of the class name to prevent doing
        // this when the value is minified.

        if (
          name &&
          name.match(/<.*:ember\d+>/) &&
          className &&
          className[0] !== '_' &&
          className.length > 2 &&
          className !== 'Class'
        ) {
          return name.replace(/<.*:/, `<${className}:`);
        }

        return name || className;
      };

      var getPrimitiveName = (value) => {
        return String(value);
      };

      debugToString = (value) => {
        if (typeof value === 'function') {
          return getFunctionName(value) || `(unknown function)`;
        } else if (typeof value === 'object' && value !== null) {
          return getObjectName(value) || `(unknown object)`;
        } else {
          return getPrimitiveName(value);
        }
      };
    }

    var debugToString$1 = debugToString;
    _exports.debugToString = debugToString$1;
    var beginTestSteps;
    _exports.beginTestSteps = beginTestSteps;
    var endTestSteps;
    _exports.endTestSteps = endTestSteps;
    var verifySteps;
    _exports.verifySteps = verifySteps;
    var logStep;
    /**
     * This constant exists to make it easier to differentiate normal logs from
     * errant console.logs. LOCAL_LOGGER should only be used inside a
     * LOCAL_SHOULD_LOG check.
     *
     * It does not alleviate the need to check LOCAL_SHOULD_LOG, which is used
     * for stripping.
     */

    _exports.logStep = logStep;
    var LOCAL_LOGGER = console;
    /**
     * This constant exists to make it easier to differentiate normal logs from
     * errant console.logs. LOGGER can be used outside of LOCAL_SHOULD_LOG checks,
     * and is meant to be used in the rare situation where a console.* call is
     * actually appropriate.
     */

    _exports.LOCAL_LOGGER = LOCAL_LOGGER;
    var LOGGER = console;
    _exports.LOGGER = LOGGER;

    function assertNever(value, desc) {
      if (desc === void 0) {
        desc = 'unexpected unreachable branch';
      }

      LOGGER.log('unreachable', value);
      LOGGER.log(`${desc} :: ${JSON.stringify(value)} (${value})`);
      throw new Error(`code reached unreachable`);
    }
  });
  define('@glimmer/validator', [
    'exports',
    '@glimmer/global-context',
  ], function (_exports, _globalContext) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.VolatileTag = _exports.VOLATILE_TAG = _exports.VOLATILE = _exports.INITIAL = _exports.CurrentTag = _exports.CURRENT_TAG = _exports.CONSTANT_TAG = _exports.CONSTANT = _exports.COMPUTE = _exports.ALLOW_CYCLES = void 0;
    _exports.beginTrackFrame = beginTrackFrame;
    _exports.beginTrackingTransaction = void 0;
    _exports.beginUntrackFrame = beginUntrackFrame;
    _exports.bump = bump;
    _exports.combine = void 0;
    _exports.consumeTag = consumeTag;
    _exports.createCache = createCache;
    _exports.createTag = createTag;
    _exports.createUpdatableTag = createUpdatableTag;
    _exports.dirtyTag = void 0;
    _exports.dirtyTagFor = dirtyTagFor;
    _exports.endTrackFrame = endTrackFrame;
    _exports.endTrackingTransaction = void 0;
    _exports.endUntrackFrame = endUntrackFrame;
    _exports.getValue = getValue;
    _exports.isConst = isConst;
    _exports.isConstTag = isConstTag;
    _exports.isTracking = isTracking;
    _exports.logTrackingStack = void 0;
    _exports.resetTracking = resetTracking;
    _exports.setTrackingTransactionEnv = _exports.runInTrackingTransaction = void 0;
    _exports.tagFor = tagFor;
    _exports.tagMetaFor = tagMetaFor;
    _exports.track = track;
    _exports.trackedData = trackedData;
    _exports.untrack = untrack;
    _exports.updateTag = void 0;
    _exports.validateTag = validateTag;
    _exports.valueForTag = valueForTag;

    // eslint-disable-next-line @typescript-eslint/ban-types
    function indexable(input) {
      return input;
    } // This is a duplicate utility from @glimmer/util because `@glimmer/validator`
    // should not depend on any other @glimmer packages, in order to avoid pulling
    // in types and prevent regressions in `@glimmer/tracking` (which has public types).

    var symbol =
      typeof Symbol !== 'undefined'
        ? Symbol // eslint-disable-next-line @typescript-eslint/no-explicit-any
        : (key) => `__${key}${Math.floor(Math.random() * Date.now())}__`; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    var symbolFor =
      typeof Symbol !== 'undefined'
        ? Symbol.for
        : (key) => `__GLIMMER_VALIDATOR_SYMBOL_FOR_${key}`;

    function getGlobal() {
      // eslint-disable-next-line node/no-unsupported-features/es-builtins
      if (typeof globalThis !== 'undefined') return indexable(globalThis);
      if (typeof self !== 'undefined') return indexable(self);
      if (typeof window !== 'undefined') return indexable(window);
      if (typeof global !== 'undefined') return indexable(global);
      throw new Error('unable to locate global object');
    }

    function unwrap(val) {
      if (val === null || val === undefined)
        throw new Error(`Expected value to be present`);
      return val;
    }

    var beginTrackingTransaction;
    _exports.beginTrackingTransaction = beginTrackingTransaction;
    var endTrackingTransaction;
    _exports.endTrackingTransaction = endTrackingTransaction;
    var runInTrackingTransaction;
    _exports.runInTrackingTransaction = runInTrackingTransaction;
    var resetTrackingTransaction;
    var setTrackingTransactionEnv;
    _exports.setTrackingTransactionEnv = setTrackingTransactionEnv;
    var assertTagNotConsumed;
    var markTagAsConsumed;
    var logTrackingStack;
    _exports.logTrackingStack = logTrackingStack;

    if (
      true
      /* DEBUG */
    ) {
      var CONSUMED_TAGS = null;
      var TRANSACTION_STACK = []; /////////

      var TRANSACTION_ENV = {
        debugMessage(obj, keyName) {
          var objName;

          if (typeof obj === 'function') {
            objName = obj.name;
          } else if (typeof obj === 'object' && obj !== null) {
            var className =
              (obj.constructor && obj.constructor.name) || '(unknown class)';
            objName = `(an instance of ${className})`;
          } else if (obj === undefined) {
            objName = '(an unknown tag)';
          } else {
            objName = String(obj);
          }

          var dirtyString = keyName
            ? `\`${keyName}\` on \`${objName}\``
            : `\`${objName}\``;
          return `You attempted to update ${dirtyString}, but it had already been used previously in the same computation.  Attempting to update a value after using it in a computation can cause logical errors, infinite revalidation bugs, and performance issues, and is not supported.`;
        },
      };

      _exports.setTrackingTransactionEnv = setTrackingTransactionEnv = (env) =>
        Object.assign(TRANSACTION_ENV, env);

      _exports.beginTrackingTransaction = beginTrackingTransaction = (
        _debugLabel,
      ) => {
        CONSUMED_TAGS = CONSUMED_TAGS || new WeakMap();
        var debugLabel = _debugLabel || undefined;
        var parent = TRANSACTION_STACK[TRANSACTION_STACK.length - 1] || null;
        TRANSACTION_STACK.push({
          parent,
          debugLabel,
        });
      };

      _exports.endTrackingTransaction = endTrackingTransaction = () => {
        if (TRANSACTION_STACK.length === 0) {
          throw new Error(
            'attempted to close a tracking transaction, but one was not open',
          );
        }

        TRANSACTION_STACK.pop();

        if (TRANSACTION_STACK.length === 0) {
          CONSUMED_TAGS = null;
        }
      };

      resetTrackingTransaction = () => {
        var stack = '';

        if (TRANSACTION_STACK.length > 0) {
          stack = logTrackingStack(
            TRANSACTION_STACK[TRANSACTION_STACK.length - 1],
          );
        }

        TRANSACTION_STACK = [];
        CONSUMED_TAGS = null;
        return stack;
      };
      /**
       * Creates a global autotracking transaction. This will prevent any backflow
       * in any `track` calls within the transaction, even if they are not
       * externally consumed.
       *
       * `runInAutotrackingTransaction` can be called within itself, and it will add
       * onto the existing transaction if one exists.
       *
       * TODO: Only throw an error if the `track` is consumed.
       */

      _exports.runInTrackingTransaction = runInTrackingTransaction = (
        fn,
        debugLabel,
      ) => {
        beginTrackingTransaction(debugLabel);
        var didError = true;

        try {
          var value = fn();
          didError = false;
          return value;
        } finally {
          if (didError !== true) {
            endTrackingTransaction();
          }
        }
      };

      var nthIndex = function (str, pattern, n, startingPos) {
        if (startingPos === void 0) {
          startingPos = -1;
        }

        var i = startingPos;

        while (n-- > 0 && i++ < str.length) {
          i = str.indexOf(pattern, i);
          if (i < 0) break;
        }

        return i;
      };

      var makeTrackingErrorMessage = (transaction, obj, keyName) => {
        var message = [
          TRANSACTION_ENV.debugMessage(obj, keyName && String(keyName)),
        ];
        message.push(`\`${String(keyName)}\` was first used:`);
        message.push(logTrackingStack(transaction));
        message.push(`Stack trace for the update:`);
        return message.join('\n\n');
      };

      _exports.logTrackingStack = logTrackingStack = (transaction) => {
        var trackingStack = [];
        var current =
          transaction || TRANSACTION_STACK[TRANSACTION_STACK.length - 1];
        if (current === undefined) return '';

        while (current) {
          if (current.debugLabel) {
            trackingStack.unshift(current.debugLabel);
          }

          current = current.parent;
        } // TODO: Use String.prototype.repeat here once we can drop support for IE11

        return trackingStack
          .map((label, index) => Array(2 * index + 1).join(' ') + label)
          .join('\n');
      };

      markTagAsConsumed = (_tag) => {
        if (!CONSUMED_TAGS || CONSUMED_TAGS.has(_tag)) return;
        CONSUMED_TAGS.set(
          _tag,
          TRANSACTION_STACK[TRANSACTION_STACK.length - 1],
        ); // We need to mark the tag and all of its subtags as consumed, so we need to
        // cast it and access its internals. In the future this shouldn't be necessary,
        // this is only for computed properties.

        var tag = _tag;

        if (tag.subtag) {
          markTagAsConsumed(tag.subtag);
        }

        if (tag.subtags) {
          tag.subtags.forEach((tag) => markTagAsConsumed(tag));
        }
      };

      assertTagNotConsumed = (tag, obj, keyName) => {
        if (CONSUMED_TAGS === null) return;
        var transaction = CONSUMED_TAGS.get(tag);
        if (!transaction) return; // This hack makes the assertion message nicer, we can cut off the first
        // few lines of the stack trace and let users know where the actual error
        // occurred.

        try {
          true &&
            (0, _globalContext.assert)(
              false,
              makeTrackingErrorMessage(transaction, obj, keyName),
            );
        } catch (e) {
          if (e.stack) {
            var updateStackBegin = e.stack.indexOf(
              'Stack trace for the update:',
            );

            if (updateStackBegin !== -1) {
              var start = nthIndex(e.stack, '\n', 1, updateStackBegin);
              var end = nthIndex(e.stack, '\n', 4, updateStackBegin);
              e.stack = e.stack.substr(0, start) + e.stack.substr(end);
            }
          }

          throw e;
        }
      };
    }

    var CONSTANT = 0;
    _exports.CONSTANT = CONSTANT;
    var INITIAL = 1;
    _exports.INITIAL = INITIAL;
    var VOLATILE = NaN;
    _exports.VOLATILE = VOLATILE;
    var $REVISION = INITIAL;

    function bump() {
      $REVISION++;
    } //////////

    var COMPUTE = symbol('TAG_COMPUTE'); //////////

    /**
     * `value` receives a tag and returns an opaque Revision based on that tag. This
     * snapshot can then later be passed to `validate` with the same tag to
     * determine if the tag has changed at all since the time that `value` was
     * called.
     *
     * @param tag
     */

    _exports.COMPUTE = COMPUTE;

    function valueForTag(tag) {
      return tag[COMPUTE]();
    }
    /**
     * `validate` receives a tag and a snapshot from a previous call to `value` with
     * the same tag, and determines if the tag is still valid compared to the
     * snapshot. If the tag's state has changed at all since then, `validate` will
     * return false, otherwise it will return true. This is used to determine if a
     * calculation related to the tags should be rerun.
     *
     * @param tag
     * @param snapshot
     */

    function validateTag(tag, snapshot) {
      return snapshot >= tag[COMPUTE]();
    }

    var TYPE = symbol('TAG_TYPE'); // this is basically a const
    // eslint-disable-next-line @typescript-eslint/naming-convention

    var ALLOW_CYCLES;
    _exports.ALLOW_CYCLES = ALLOW_CYCLES;

    if (
      true
      /* DEBUG */
    ) {
      _exports.ALLOW_CYCLES = ALLOW_CYCLES = new WeakMap();
    }

    function allowsCycles(tag) {
      if (ALLOW_CYCLES === undefined) {
        return true;
      } else {
        return ALLOW_CYCLES.has(tag);
      }
    }

    class MonomorphicTagImpl {
      constructor(type) {
        this.revision = INITIAL;
        this.lastChecked = INITIAL;
        this.lastValue = INITIAL;
        this.isUpdating = false;
        this.subtag = null;
        this.subtagBufferCache = null;
        this[TYPE] = type;
      }

      static combine(tags) {
        switch (tags.length) {
          case 0:
            return CONSTANT_TAG;

          case 1:
            return tags[0];

          default:
            var tag = new MonomorphicTagImpl(
              2,
              /* Combinator */
            );
            tag.subtag = tags;
            return tag;
        }
      }

      [COMPUTE]() {
        var { lastChecked } = this;

        if (this.isUpdating === true) {
          if (
            true &&
            /* DEBUG */
            !allowsCycles(this)
          ) {
            throw new Error('Cycles in tags are not allowed');
          }

          this.lastChecked = ++$REVISION;
        } else if (lastChecked !== $REVISION) {
          this.isUpdating = true;
          this.lastChecked = $REVISION;

          try {
            var { subtag, revision } = this;

            if (subtag !== null) {
              if (Array.isArray(subtag)) {
                for (var i = 0; i < subtag.length; i++) {
                  var value = subtag[i][COMPUTE]();
                  revision = Math.max(value, revision);
                }
              } else {
                var subtagValue = subtag[COMPUTE]();

                if (subtagValue === this.subtagBufferCache) {
                  revision = Math.max(revision, this.lastValue);
                } else {
                  // Clear the temporary buffer cache
                  this.subtagBufferCache = null;
                  revision = Math.max(revision, subtagValue);
                }
              }
            }

            this.lastValue = revision;
          } finally {
            this.isUpdating = false;
          }
        }

        return this.lastValue;
      }

      static updateTag(_tag, _subtag) {
        if (
          true &&
          /* DEBUG */
          _tag[TYPE] !== 1
          /* Updatable */
        ) {
          throw new Error('Attempted to update a tag that was not updatable');
        } // TODO: TS 3.7 should allow us to do this via assertion

        var tag = _tag;
        var subtag = _subtag;

        if (subtag === CONSTANT_TAG) {
          tag.subtag = null;
        } else {
          // There are two different possibilities when updating a subtag:
          //
          // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
          // 2. subtag[COMPUTE]() > tag[COMPUTE]();
          //
          // The first possibility is completely fine within our caching model, but
          // the second possibility presents a problem. If the parent tag has
          // already been read, then it's value is cached and will not update to
          // reflect the subtag's greater value. Next time the cache is busted, the
          // subtag's value _will_ be read, and it's value will be _greater_ than
          // the saved snapshot of the parent, causing the resulting calculation to
          // be rerun erroneously.
          //
          // In order to prevent this, when we first update to a new subtag we store
          // its computed value, and then check against that computed value on
          // subsequent updates. If its value hasn't changed, then we return the
          // parent's previous value. Once the subtag changes for the first time,
          // we clear the cache and everything is finally in sync with the parent.
          tag.subtagBufferCache = subtag[COMPUTE]();
          tag.subtag = subtag;
        }
      }

      static dirtyTag(tag, disableConsumptionAssertion) {
        if (
          true &&
          /* DEBUG */
          !(
            (
              tag[TYPE] === 1 ||
              /* Updatable */
              tag[TYPE] === 0
            )
            /* Dirtyable */
          )
        ) {
          throw new Error('Attempted to dirty a tag that was not dirtyable');
        }

        if (
          true &&
          /* DEBUG */
          disableConsumptionAssertion !== true
        ) {
          // Usually by this point, we've already asserted with better error information,
          // but this is our last line of defense.
          unwrap(assertTagNotConsumed)(tag);
        }

        tag.revision = ++$REVISION;
        (0, _globalContext.scheduleRevalidate)();
      }
    }

    var DIRTY_TAG = MonomorphicTagImpl.dirtyTag;
    _exports.dirtyTag = DIRTY_TAG;
    var UPDATE_TAG = MonomorphicTagImpl.updateTag; //////////

    _exports.updateTag = UPDATE_TAG;

    function createTag() {
      return new MonomorphicTagImpl(
        0,
        /* Dirtyable */
      );
    }

    function createUpdatableTag() {
      return new MonomorphicTagImpl(
        1,
        /* Updatable */
      );
    } //////////

    var CONSTANT_TAG = new MonomorphicTagImpl(
      3,
      /* Constant */
    );
    _exports.CONSTANT_TAG = CONSTANT_TAG;

    function isConstTag(tag) {
      return tag === CONSTANT_TAG;
    } //////////

    class VolatileTag {
      [COMPUTE]() {
        return VOLATILE;
      }
    }

    _exports.VolatileTag = VolatileTag;
    var VOLATILE_TAG = new VolatileTag(); //////////

    _exports.VOLATILE_TAG = VOLATILE_TAG;

    class CurrentTag {
      [COMPUTE]() {
        return $REVISION;
      }
    }

    _exports.CurrentTag = CurrentTag;
    var CURRENT_TAG = new CurrentTag(); //////////

    _exports.CURRENT_TAG = CURRENT_TAG;
    var combine = MonomorphicTagImpl.combine; // Warm

    _exports.combine = combine;
    var tag1 = createUpdatableTag();
    var tag2 = createUpdatableTag();
    var tag3 = createUpdatableTag();
    valueForTag(tag1);
    DIRTY_TAG(tag1);
    valueForTag(tag1);
    UPDATE_TAG(tag1, combine([tag2, tag3]));
    valueForTag(tag1);
    DIRTY_TAG(tag2);
    valueForTag(tag1);
    DIRTY_TAG(tag3);
    valueForTag(tag1);
    UPDATE_TAG(tag1, tag3);
    valueForTag(tag1);
    DIRTY_TAG(tag3);
    valueForTag(tag1);

    function isObjectLike(u) {
      return (typeof u === 'object' && u !== null) || typeof u === 'function';
    }

    var TRACKED_TAGS = new WeakMap();

    function dirtyTagFor(obj, key, meta) {
      if (
        true &&
        /* DEBUG */
        !isObjectLike(obj)
      ) {
        throw new Error(`BUG: Can't update a tag for a primitive`);
      }

      var tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

      if (tags === undefined) return; // Dirty the tag for the specific property if it exists

      var propertyTag = tags.get(key);

      if (propertyTag !== undefined) {
        if (
          true
          /* DEBUG */
        ) {
          unwrap(assertTagNotConsumed)(propertyTag, obj, key);
        }

        DIRTY_TAG(propertyTag, true);
      }
    }

    function tagMetaFor(obj) {
      var tags = TRACKED_TAGS.get(obj);

      if (tags === undefined) {
        tags = new Map();
        TRACKED_TAGS.set(obj, tags);
      }

      return tags;
    }

    function tagFor(obj, key, meta) {
      var tags = meta === undefined ? tagMetaFor(obj) : meta;
      var tag = tags.get(key);

      if (tag === undefined) {
        tag = createUpdatableTag();
        tags.set(key, tag);
      }

      return tag;
    }
    /**
     * An object that that tracks @tracked properties that were consumed.
     */

    class Tracker {
      constructor() {
        this.tags = new Set();
        this.last = null;
      }

      add(tag) {
        if (tag === CONSTANT_TAG) return;
        this.tags.add(tag);

        if (
          true
          /* DEBUG */
        ) {
          unwrap(markTagAsConsumed)(tag);
        }

        this.last = tag;
      }

      combine() {
        var { tags } = this;

        if (tags.size === 0) {
          return CONSTANT_TAG;
        } else if (tags.size === 1) {
          return this.last;
        } else {
          var tagsArr = [];
          tags.forEach((tag) => tagsArr.push(tag));
          return combine(tagsArr);
        }
      }
    }
    /**
     * Whenever a tracked computed property is entered, the current tracker is
     * saved off and a new tracker is replaced.
     *
     * Any tracked properties consumed are added to the current tracker.
     *
     * When a tracked computed property is exited, the tracker's tags are
     * combined and added to the parent tracker.
     *
     * The consequence is that each tracked computed property has a tag
     * that corresponds to the tracked properties consumed inside of
     * itself, including child tracked computed properties.
     */

    var CURRENT_TRACKER = null;
    var OPEN_TRACK_FRAMES = [];

    function beginTrackFrame(debuggingContext) {
      OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
      CURRENT_TRACKER = new Tracker();

      if (
        true
        /* DEBUG */
      ) {
        unwrap(beginTrackingTransaction)(debuggingContext);
      }
    }

    function endTrackFrame() {
      var current = CURRENT_TRACKER;

      if (
        true
        /* DEBUG */
      ) {
        if (OPEN_TRACK_FRAMES.length === 0) {
          throw new Error(
            'attempted to close a tracking frame, but one was not open',
          );
        }

        unwrap(endTrackingTransaction)();
      }

      CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
      return unwrap(current).combine();
    }

    function beginUntrackFrame() {
      OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
      CURRENT_TRACKER = null;
    }

    function endUntrackFrame() {
      if (
        true &&
        /* DEBUG */
        OPEN_TRACK_FRAMES.length === 0
      ) {
        throw new Error(
          'attempted to close a tracking frame, but one was not open',
        );
      }

      CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
    } // This function is only for handling errors and resetting to a valid state

    function resetTracking() {
      while (OPEN_TRACK_FRAMES.length > 0) {
        OPEN_TRACK_FRAMES.pop();
      }

      CURRENT_TRACKER = null;

      if (
        true
        /* DEBUG */
      ) {
        return unwrap(resetTrackingTransaction)();
      }
    }

    function isTracking() {
      return CURRENT_TRACKER !== null;
    }

    function consumeTag(tag) {
      if (CURRENT_TRACKER !== null) {
        CURRENT_TRACKER.add(tag);
      }
    } //////////

    var FN = symbol('FN');
    var LAST_VALUE = symbol('LAST_VALUE');
    var TAG = symbol('TAG');
    var SNAPSHOT = symbol('SNAPSHOT');
    var DEBUG_LABEL = symbol('DEBUG_LABEL');

    function createCache(fn, debuggingLabel) {
      if (
        true &&
        /* DEBUG */
        !(typeof fn === 'function')
      ) {
        throw new Error(
          `createCache() must be passed a function as its first parameter. Called with: ${String(
            fn,
          )}`,
        );
      }

      var cache = {
        [FN]: fn,
        [LAST_VALUE]: undefined,
        [TAG]: undefined,
        [SNAPSHOT]: -1,
      };

      if (
        true
        /* DEBUG */
      ) {
        cache[DEBUG_LABEL] = debuggingLabel;
      }

      return cache;
    }

    function getValue(cache) {
      assertCache(cache, 'getValue');
      var fn = cache[FN];
      var tag = cache[TAG];
      var snapshot = cache[SNAPSHOT];

      if (tag === undefined || !validateTag(tag, snapshot)) {
        beginTrackFrame();

        try {
          cache[LAST_VALUE] = fn();
        } finally {
          tag = endTrackFrame();
          cache[TAG] = tag;
          cache[SNAPSHOT] = valueForTag(tag);
          consumeTag(tag);
        }
      } else {
        consumeTag(tag);
      }

      return cache[LAST_VALUE];
    }

    function isConst(cache) {
      assertCache(cache, 'isConst');
      var tag = cache[TAG];
      assertTag(tag, cache);
      return isConstTag(tag);
    }

    function assertCache(value, fnName) {
      if (
        true &&
        /* DEBUG */
        !(typeof value === 'object' && value !== null && FN in value)
      ) {
        throw new Error(
          `${fnName}() can only be used on an instance of a cache created with createCache(). Called with: ${String(
            value,
          )}`,
        );
      }
    } // replace this with `expect` when we can

    function assertTag(tag, cache) {
      if (
        true &&
        /* DEBUG */
        tag === undefined
      ) {
        throw new Error(
          `isConst() can only be used on a cache once getValue() has been called at least once. Called with cache function:\n\n${String(
            cache[FN],
          )}`,
        );
      }
    } //////////
    // Legacy tracking APIs
    // track() shouldn't be necessary at all in the VM once the autotracking
    // refactors are merged, and we should generally be moving away from it. It may
    // be necessary in Ember for a while longer, but I think we'll be able to drop
    // it in favor of cache sooner rather than later.

    function track(callback, debugLabel) {
      beginTrackFrame(debugLabel);
      var tag;

      try {
        callback();
      } finally {
        tag = endTrackFrame();
      }

      return tag;
    } // untrack() is currently mainly used to handle places that were previously not
    // tracked, and that tracking now would cause backtracking rerender assertions.
    // I think once we move everyone forward onto modern APIs, we'll probably be
    // able to remove it, but I'm not sure yet.

    function untrack(callback) {
      beginUntrackFrame();

      try {
        return callback();
      } finally {
        endUntrackFrame();
      }
    }

    function trackedData(key, initializer) {
      var values = new WeakMap();
      var hasInitializer = typeof initializer === 'function';

      function getter(self) {
        consumeTag(tagFor(self, key));
        var value; // If the field has never been initialized, we should initialize it

        if (hasInitializer && !values.has(self)) {
          value = initializer.call(self);
          values.set(self, value);
        } else {
          value = values.get(self);
        }

        return value;
      }

      function setter(self, value) {
        dirtyTagFor(self, key);
        values.set(self, value);
      }

      return {
        getter,
        setter,
      };
    }

    var GLIMMER_VALIDATOR_REGISTRATION = symbolFor(
      'GLIMMER_VALIDATOR_REGISTRATION',
    );
    var globalObj = getGlobal();

    if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
      throw new Error(
        'The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.',
      );
    }

    globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
  });
  define('@glimmer/vm', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.TemporaryRegister = _exports.SavedRegister = _exports.$v0 = _exports.$t1 = _exports.$t0 = _exports.$sp = _exports.$s1 = _exports.$s0 = _exports.$ra = _exports.$pc = _exports.$fp = void 0;
    _exports.isLowLevelRegister = isLowLevelRegister;
    _exports.isMachineOp = isMachineOp;
    _exports.isOp = isOp;

    /* This file is generated by build/debug.js */
    function isMachineOp(value) {
      return value >= 0 && value <= 15;
    }

    function isOp(value) {
      return value >= 16;
    }
    /**
     * Registers
     *
     * For the most part, these follows MIPS naming conventions, however the
     * register numbers are different.
     */
    // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit

    var $pc = 0; // $1 or $ra (return address): pointer into `program` for the return

    _exports.$pc = $pc;
    var $ra = 1; // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack

    _exports.$ra = $ra;
    var $fp = 2; // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack

    _exports.$fp = $fp;
    var $sp = 3; // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers

    _exports.$sp = $sp;
    var $s0 = 4;
    _exports.$s0 = $s0;
    var $s1 = 5; // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers

    _exports.$s1 = $s1;
    var $t0 = 6;
    _exports.$t0 = $t0;
    var $t1 = 7; // $8 or $v0 (return value)

    _exports.$t1 = $t1;
    var $v0 = 8;
    _exports.$v0 = $v0;

    function isLowLevelRegister(register) {
      return register <= $sp;
    }

    var SavedRegister;
    _exports.SavedRegister = SavedRegister;

    (function (SavedRegister) {
      SavedRegister[(SavedRegister['s0'] = 4)] = 's0';
      SavedRegister[(SavedRegister['s1'] = 5)] = 's1';
    })(SavedRegister || (_exports.SavedRegister = SavedRegister = {}));

    var TemporaryRegister;
    _exports.TemporaryRegister = TemporaryRegister;

    (function (TemporaryRegister) {
      TemporaryRegister[(TemporaryRegister['t0'] = 6)] = 't0';
      TemporaryRegister[(TemporaryRegister['t1'] = 7)] = 't1';
    })(
      TemporaryRegister ||
        (_exports.TemporaryRegister = TemporaryRegister = {}),
    );
  });
  define('@glimmer/wire-format', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.getStringFromValue = getStringFromValue;
    _exports.is = is;
    _exports.isArgument = isArgument;
    _exports.isAttribute = isAttribute;
    _exports.isGet = _exports.isFlushElement = void 0;
    _exports.isHelper = isHelper;
    _exports.isStringLiteral = isStringLiteral;

    function is(variant) {
      return function (value) {
        return Array.isArray(value) && value[0] === variant;
      };
    } // Statements

    var isFlushElement = is(
      12,
      /* FlushElement */
    );
    _exports.isFlushElement = isFlushElement;

    function isAttribute(val) {
      return (
        val[0] === 14 ||
        /* StaticAttr */
        val[0] === 15 ||
        /* DynamicAttr */
        val[0] === 22 ||
        /* TrustingDynamicAttr */
        val[0] === 16 ||
        /* ComponentAttr */
        val[0] === 24 ||
        /* StaticComponentAttr */
        val[0] === 23 ||
        /* TrustingComponentAttr */
        val[0] === 17 ||
        /* AttrSplat */
        val[0] === 4
        /* Modifier */
      );
    }

    function isStringLiteral(expr) {
      return typeof expr === 'string';
    }

    function getStringFromValue(expr) {
      return expr;
    }

    function isArgument(val) {
      return (
        val[0] === 21 ||
        /* StaticArg */
        val[0] === 20
        /* DynamicArg */
      );
    }

    function isHelper(expr) {
      return (
        Array.isArray(expr) && expr[0] === 28
        /* Call */
      );
    } // Expressions

    var isGet = is(
      30,
      /* GetSymbol */
    );
    _exports.isGet = isGet;
  });
  define('@simple-dom/document', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var EMPTY_ATTRS = [];

    function indexOfAttribute(attributes, namespaceURI, localName) {
      for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i];

        if (
          attr.namespaceURI === namespaceURI &&
          attr.localName === localName
        ) {
          return i;
        }
      }

      return -1;
    }

    function adjustAttrName(namespaceURI, localName) {
      return namespaceURI === 'http://www.w3.org/1999/xhtml'
        ? /* HTML */
          localName.toLowerCase()
        : localName;
    }

    function getAttribute(attributes, namespaceURI, localName) {
      var index = indexOfAttribute(attributes, namespaceURI, localName);
      return index === -1 ? null : attributes[index].value;
    }

    function removeAttribute(attributes, namespaceURI, localName) {
      var index = indexOfAttribute(attributes, namespaceURI, localName);

      if (index !== -1) {
        attributes.splice(index, 1);
      }
    } // https://dom.spec.whatwg.org/#dom-element-setattributens

    function setAttribute(element, namespaceURI, prefix, localName, value) {
      if (typeof value !== 'string') {
        value = '' + value;
      }

      var { attributes } = element;

      if (attributes === EMPTY_ATTRS) {
        attributes = element.attributes = [];
      } else {
        var index = indexOfAttribute(attributes, namespaceURI, localName);

        if (index !== -1) {
          attributes[index].value = value;
          return;
        }
      }

      attributes.push({
        localName,
        name: prefix === null ? localName : prefix + ':' + localName,
        namespaceURI,
        prefix,
        specified: true,
        value,
      });
    }

    class ChildNodes {
      constructor(node) {
        this.node = node;
        this.stale = true;
        this._length = 0;
      }

      get length() {
        if (this.stale) {
          this.stale = false;
          var len = 0;
          var child = this.node.firstChild;

          for (; child !== null; len++) {
            this[len] = child;
            child = child.nextSibling;
          }

          var oldLen = this._length;
          this._length = len;

          for (; len < oldLen; len++) {
            delete this[len];
          }
        }

        return this._length;
      }

      item(index) {
        return index < this.length ? this[index] : null;
      }
    }

    function cloneNode(node, deep) {
      var clone = nodeFrom(node);

      if (deep) {
        var child = node.firstChild;
        var nextChild = child;

        while (child !== null) {
          nextChild = child.nextSibling;
          clone.appendChild(child.cloneNode(true));
          child = nextChild;
        }
      }

      return clone;
    }

    function nodeFrom(node) {
      var namespaceURI;

      if (
        node.nodeType === 1
        /* ELEMENT_NODE */
      ) {
        namespaceURI = node.namespaceURI;
      }

      var clone = new SimpleNodeImpl(
        node.ownerDocument,
        node.nodeType,
        node.nodeName,
        node.nodeValue,
        namespaceURI,
      );

      if (
        node.nodeType === 1
        /* ELEMENT_NODE */
      ) {
        clone.attributes = copyAttrs(node.attributes);
      }

      return clone;
    }

    function copyAttrs(attrs) {
      if (attrs === EMPTY_ATTRS) {
        return EMPTY_ATTRS;
      }

      var copy = [];

      for (var i = 0; i < attrs.length; i++) {
        var attr = attrs[i];
        copy.push({
          localName: attr.localName,
          name: attr.name,
          namespaceURI: attr.namespaceURI,
          prefix: attr.prefix,
          specified: true,
          value: attr.value,
        });
      }

      return copy;
    }

    function insertBefore(parentNode, newChild, refChild) {
      invalidate(parentNode);
      insertBetween(
        parentNode,
        newChild,
        refChild === null ? parentNode.lastChild : refChild.previousSibling,
        refChild,
      );
    }

    function removeChild(parentNode, oldChild) {
      invalidate(parentNode);
      removeBetween(
        parentNode,
        oldChild,
        oldChild.previousSibling,
        oldChild.nextSibling,
      );
    }

    function invalidate(parentNode) {
      var childNodes = parentNode._childNodes;

      if (childNodes !== undefined) {
        childNodes.stale = true;
      }
    }

    function insertBetween(parentNode, newChild, previousSibling, nextSibling) {
      if (
        newChild.nodeType === 11
        /* DOCUMENT_FRAGMENT_NODE */
      ) {
        insertFragment(newChild, parentNode, previousSibling, nextSibling);
        return;
      }

      if (newChild.parentNode !== null) {
        removeChild(newChild.parentNode, newChild);
      }

      newChild.parentNode = parentNode;
      newChild.previousSibling = previousSibling;
      newChild.nextSibling = nextSibling;

      if (previousSibling === null) {
        parentNode.firstChild = newChild;
      } else {
        previousSibling.nextSibling = newChild;
      }

      if (nextSibling === null) {
        parentNode.lastChild = newChild;
      } else {
        nextSibling.previousSibling = newChild;
      }
    }

    function removeBetween(parentNode, oldChild, previousSibling, nextSibling) {
      oldChild.parentNode = null;
      oldChild.previousSibling = null;
      oldChild.nextSibling = null;

      if (previousSibling === null) {
        parentNode.firstChild = nextSibling;
      } else {
        previousSibling.nextSibling = nextSibling;
      }

      if (nextSibling === null) {
        parentNode.lastChild = previousSibling;
      } else {
        nextSibling.previousSibling = previousSibling;
      }
    }

    function insertFragment(
      fragment,
      parentNode,
      previousSibling,
      nextSibling,
    ) {
      var firstChild = fragment.firstChild;

      if (firstChild === null) {
        return;
      }

      fragment.firstChild = null;
      fragment.lastChild = null;
      var lastChild = firstChild;
      var newChild = firstChild;
      firstChild.previousSibling = previousSibling;

      if (previousSibling === null) {
        parentNode.firstChild = firstChild;
      } else {
        previousSibling.nextSibling = firstChild;
      }

      while (newChild !== null) {
        newChild.parentNode = parentNode;
        lastChild = newChild;
        newChild = newChild.nextSibling;
      }

      lastChild.nextSibling = nextSibling;

      if (nextSibling === null) {
        parentNode.lastChild = lastChild;
      } else {
        nextSibling.previousSibling = lastChild;
      }
    }

    function parseQualifiedName(qualifiedName) {
      var localName = qualifiedName;
      var prefix = null;
      var i = qualifiedName.indexOf(':');

      if (i !== -1) {
        prefix = qualifiedName.slice(0, i);
        localName = qualifiedName.slice(i + 1);
      }

      return [prefix, localName];
    }

    class SimpleNodeImpl {
      constructor(ownerDocument, nodeType, nodeName, nodeValue, namespaceURI) {
        this.ownerDocument = ownerDocument;
        this.nodeType = nodeType;
        this.nodeName = nodeName;
        this.nodeValue = nodeValue;
        this.namespaceURI = namespaceURI;
        this.parentNode = null;
        this.previousSibling = null;
        this.nextSibling = null;
        this.firstChild = null;
        this.lastChild = null;
        this.attributes = EMPTY_ATTRS;
        /**
         * @internal
         */

        this._childNodes = undefined;
      }

      get tagName() {
        return this.nodeName;
      }

      get childNodes() {
        var children = this._childNodes;

        if (children === undefined) {
          children = this._childNodes = new ChildNodes(this);
        }

        return children;
      }

      cloneNode(deep) {
        return cloneNode(this, deep === true);
      }

      appendChild(newChild) {
        insertBefore(this, newChild, null);
        return newChild;
      }

      insertBefore(newChild, refChild) {
        insertBefore(this, newChild, refChild);
        return newChild;
      }

      removeChild(oldChild) {
        removeChild(this, oldChild);
        return oldChild;
      }

      insertAdjacentHTML(position, html) {
        var raw = new SimpleNodeImpl(
          this.ownerDocument,
          -1,
          /* RAW_NODE */
          '#raw',
          html,
          void 0,
        );
        var parentNode;
        var nextSibling;

        switch (position) {
          case 'beforebegin':
            parentNode = this.parentNode;
            nextSibling = this;
            break;

          case 'afterbegin':
            parentNode = this;
            nextSibling = this.firstChild;
            break;

          case 'beforeend':
            parentNode = this;
            nextSibling = null;
            break;

          case 'afterend':
            parentNode = this.parentNode;
            nextSibling = this.nextSibling;
            break;

          default:
            throw new Error('invalid position');
        }

        if (parentNode === null) {
          throw new Error(`${position} requires a parentNode`);
        }

        insertBefore(parentNode, raw, nextSibling);
      }

      getAttribute(name) {
        var localName = adjustAttrName(this.namespaceURI, name);
        return getAttribute(this.attributes, null, localName);
      }

      getAttributeNS(namespaceURI, localName) {
        return getAttribute(this.attributes, namespaceURI, localName);
      }

      setAttribute(name, value) {
        var localName = adjustAttrName(this.namespaceURI, name);
        setAttribute(this, null, null, localName, value);
      }

      setAttributeNS(namespaceURI, qualifiedName, value) {
        var [prefix, localName] = parseQualifiedName(qualifiedName);
        setAttribute(this, namespaceURI, prefix, localName, value);
      }

      removeAttribute(name) {
        var localName = adjustAttrName(this.namespaceURI, name);
        removeAttribute(this.attributes, null, localName);
      }

      removeAttributeNS(namespaceURI, localName) {
        removeAttribute(this.attributes, namespaceURI, localName);
      }

      get doctype() {
        return this.firstChild;
      }

      get documentElement() {
        return this.lastChild;
      }

      get head() {
        return this.documentElement.firstChild;
      }

      get body() {
        return this.documentElement.lastChild;
      }

      createElement(name) {
        return new SimpleNodeImpl(
          this,
          1,
          /* ELEMENT_NODE */
          name.toUpperCase(),
          null,
          'http://www.w3.org/1999/xhtml',
          /* HTML */
        );
      }

      createElementNS(namespace, qualifiedName) {
        // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts
        // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815
        var nodeName =
          namespace === 'http://www.w3.org/1999/xhtml'
            ? /* HTML */
              qualifiedName.toUpperCase()
            : qualifiedName; // we don't care to parse the qualified name because we only support HTML documents
        // which don't support prefixed elements

        return new SimpleNodeImpl(
          this,
          1,
          /* ELEMENT_NODE */
          nodeName,
          null,
          namespace,
        );
      }

      createTextNode(text) {
        return new SimpleNodeImpl(
          this,
          3,
          /* TEXT_NODE */
          '#text',
          text,
          void 0,
        );
      }

      createComment(text) {
        return new SimpleNodeImpl(
          this,
          8,
          /* COMMENT_NODE */
          '#comment',
          text,
          void 0,
        );
      }
      /**
       * Backwards compat
       * @deprecated
       */

      createRawHTMLSection(text) {
        return new SimpleNodeImpl(
          this,
          -1,
          /* RAW_NODE */
          '#raw',
          text,
          void 0,
        );
      }

      createDocumentFragment() {
        return new SimpleNodeImpl(
          this,
          11,
          /* DOCUMENT_FRAGMENT_NODE */
          '#document-fragment',
          null,
          void 0,
        );
      }
    }

    function createHTMLDocument() {
      // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null
      var document = new SimpleNodeImpl(
        null,
        9,
        /* DOCUMENT_NODE */
        '#document',
        null,
        'http://www.w3.org/1999/xhtml',
        /* HTML */
      );
      var doctype = new SimpleNodeImpl(
        document,
        10,
        /* DOCUMENT_TYPE_NODE */
        'html',
        null,
        'http://www.w3.org/1999/xhtml',
        /* HTML */
      );
      var html = new SimpleNodeImpl(
        document,
        1,
        /* ELEMENT_NODE */
        'HTML',
        null,
        'http://www.w3.org/1999/xhtml',
        /* HTML */
      );
      var head = new SimpleNodeImpl(
        document,
        1,
        /* ELEMENT_NODE */
        'HEAD',
        null,
        'http://www.w3.org/1999/xhtml',
        /* HTML */
      );
      var body = new SimpleNodeImpl(
        document,
        1,
        /* ELEMENT_NODE */
        'BODY',
        null,
        'http://www.w3.org/1999/xhtml',
        /* HTML */
      );
      html.appendChild(head);
      html.appendChild(body);
      document.appendChild(doctype);
      document.appendChild(html);
      return document;
    }

    var _default = createHTMLDocument;
    _exports.default = _default;
  });
  define('backburner', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.buildPlatform = buildPlatform;
    _exports.default = void 0;
    var SET_TIMEOUT = setTimeout;

    var NOOP = () => {};

    function buildNext(flush) {
      // Using "promises first" here to:
      //
      // 1) Ensure more consistent experience on browsers that
      //    have differently queued microtasks (separate queues for
      //    MutationObserver vs Promises).
      // 2) Ensure better debugging experiences (it shows up in Chrome
      //    call stack as "Promise.then (async)") which is more consistent
      //    with user expectations
      //
      // When Promise is unavailable use MutationObserver (mostly so that we
      // still get microtasks on IE11), and when neither MutationObserver and
      // Promise are present use a plain old setTimeout.
      if (typeof Promise === 'function') {
        var autorunPromise = Promise.resolve();
        return () => autorunPromise.then(flush);
      } else if (typeof MutationObserver === 'function') {
        var iterations = 0;
        var observer = new MutationObserver(flush);
        var node = document.createTextNode('');
        observer.observe(node, {
          characterData: true,
        });
        return () => {
          iterations = ++iterations % 2;
          node.data = '' + iterations;
          return iterations;
        };
      } else {
        return () => SET_TIMEOUT(flush, 0);
      }
    }

    function buildPlatform(flush) {
      var clearNext = NOOP;
      return {
        setTimeout(fn, ms) {
          return setTimeout(fn, ms);
        },

        clearTimeout(timerId) {
          return clearTimeout(timerId);
        },

        now() {
          return Date.now();
        },

        next: buildNext(flush),
        clearNext,
      };
    }

    var NUMBER = /\d+/;
    var TIMERS_OFFSET = 6;

    function isCoercableNumber(suspect) {
      var type = typeof suspect;
      return (
        (type === 'number' && suspect === suspect) ||
        (type === 'string' && NUMBER.test(suspect))
      );
    }

    function getOnError(options) {
      return (
        options.onError ||
        (options.onErrorTarget && options.onErrorTarget[options.onErrorMethod])
      );
    }

    function findItem(target, method, collection) {
      var index = -1;

      for (var i = 0, l = collection.length; i < l; i += 4) {
        if (collection[i] === target && collection[i + 1] === method) {
          index = i;
          break;
        }
      }

      return index;
    }

    function findTimerItem(target, method, collection) {
      var index = -1;

      for (var i = 2, l = collection.length; i < l; i += 6) {
        if (collection[i] === target && collection[i + 1] === method) {
          index = i - 2;
          break;
        }
      }

      return index;
    }

    function getQueueItems(items, queueItemLength, queueItemPositionOffset) {
      if (queueItemPositionOffset === void 0) {
        queueItemPositionOffset = 0;
      }

      var queueItems = [];

      for (var i = 0; i < items.length; i += queueItemLength) {
        var maybeError =
          items[
            i +
              3 +
              /* stack */
              queueItemPositionOffset
          ];
        var queueItem = {
          target:
            items[
              i +
                0 +
                /* target */
                queueItemPositionOffset
            ],
          method:
            items[
              i +
                1 +
                /* method */
                queueItemPositionOffset
            ],
          args:
            items[
              i +
                2 +
                /* args */
                queueItemPositionOffset
            ],
          stack:
            maybeError !== undefined && 'stack' in maybeError
              ? maybeError.stack
              : '',
        };
        queueItems.push(queueItem);
      }

      return queueItems;
    }

    function binarySearch(time, timers) {
      var start = 0;
      var end = timers.length - TIMERS_OFFSET;
      var middle;
      var l;

      while (start < end) {
        // since timers is an array of pairs 'l' will always
        // be an integer
        l = (end - start) / TIMERS_OFFSET; // compensate for the index in case even number
        // of pairs inside timers

        middle = start + l - (l % TIMERS_OFFSET);

        if (time >= timers[middle]) {
          start = middle + TIMERS_OFFSET;
        } else {
          end = middle;
        }
      }

      return time >= timers[start] ? start + TIMERS_OFFSET : start;
    }

    var QUEUE_ITEM_LENGTH = 4;

    class Queue {
      constructor(name, options, globalOptions) {
        if (options === void 0) {
          options = {};
        }

        if (globalOptions === void 0) {
          globalOptions = {};
        }

        this._queueBeingFlushed = [];
        this.targetQueues = new Map();
        this.index = 0;
        this._queue = [];
        this.name = name;
        this.options = options;
        this.globalOptions = globalOptions;
      }

      stackFor(index) {
        if (index < this._queue.length) {
          var entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];

          if (entry) {
            return entry.stack;
          } else {
            return null;
          }
        }
      }

      flush(sync) {
        var { before, after } = this.options;
        var target;
        var method;
        var args;
        var errorRecordedForStack;
        this.targetQueues.clear();

        if (this._queueBeingFlushed.length === 0) {
          this._queueBeingFlushed = this._queue;
          this._queue = [];
        }

        if (before !== undefined) {
          before();
        }

        var invoke;
        var queueItems = this._queueBeingFlushed;

        if (queueItems.length > 0) {
          var onError = getOnError(this.globalOptions);
          invoke = onError ? this.invokeWithOnError : this.invoke;

          for (
            var i = this.index;
            i < queueItems.length;
            i += QUEUE_ITEM_LENGTH
          ) {
            this.index += QUEUE_ITEM_LENGTH;
            method = queueItems[i + 1]; // method could have been nullified / canceled during flush

            if (method !== null) {
              //
              //    ** Attention intrepid developer **
              //
              //    To find out the stack of this task when it was scheduled onto
              //    the run loop, add the following to your app.js:
              //
              //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
              //
              //    Once that is in place, when you are at a breakpoint and navigate
              //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
              //    which will be the captured stack when this job was scheduled.
              //
              //    One possible long-term solution is the following Chrome issue:
              //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
              //
              target = queueItems[i];
              args = queueItems[i + 2];
              errorRecordedForStack = queueItems[i + 3]; // Debugging assistance

              invoke(target, method, args, onError, errorRecordedForStack);
            }

            if (
              this.index !== this._queueBeingFlushed.length &&
              this.globalOptions.mustYield &&
              this.globalOptions.mustYield()
            ) {
              return 1;
              /* Pause */
            }
          }
        }

        if (after !== undefined) {
          after();
        }

        this._queueBeingFlushed.length = 0;
        this.index = 0;

        if (sync !== false && this._queue.length > 0) {
          // check if new items have been added
          this.flush(true);
        }
      }

      hasWork() {
        return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
      }

      cancel(_ref) {
        var { target, method } = _ref;
        var queue = this._queue;
        var targetQueueMap = this.targetQueues.get(target);

        if (targetQueueMap !== undefined) {
          targetQueueMap.delete(method);
        }

        var index = findItem(target, method, queue);

        if (index > -1) {
          queue.splice(index, QUEUE_ITEM_LENGTH);
          return true;
        } // if not found in current queue
        // could be in the queue that is being flushed

        queue = this._queueBeingFlushed;
        index = findItem(target, method, queue);

        if (index > -1) {
          queue[index + 1] = null;
          return true;
        }

        return false;
      }

      push(target, method, args, stack) {
        this._queue.push(target, method, args, stack);

        return {
          queue: this,
          target,
          method,
        };
      }

      pushUnique(target, method, args, stack) {
        var localQueueMap = this.targetQueues.get(target);

        if (localQueueMap === undefined) {
          localQueueMap = new Map();
          this.targetQueues.set(target, localQueueMap);
        }

        var index = localQueueMap.get(method);

        if (index === undefined) {
          var queueIndex =
            this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
          localQueueMap.set(method, queueIndex);
        } else {
          var queue = this._queue;
          queue[index + 2] = args; // replace args

          queue[index + 3] = stack; // replace stack
        }

        return {
          queue: this,
          target,
          method,
        };
      }

      _getDebugInfo(debugEnabled) {
        if (debugEnabled) {
          var debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
          return debugInfo;
        }

        return undefined;
      }

      invoke(
        target,
        method,
        args,
        /*, onError, errorRecordedForStack */
      ) {
        if (args === undefined) {
          method.call(target);
        } else {
          method.apply(target, args);
        }
      }

      invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
        try {
          if (args === undefined) {
            method.call(target);
          } else {
            method.apply(target, args);
          }
        } catch (error) {
          onError(error, errorRecordedForStack);
        }
      }
    }

    class DeferredActionQueues {
      constructor(queueNames, options) {
        if (queueNames === void 0) {
          queueNames = [];
        }

        this.queues = {};
        this.queueNameIndex = 0;
        this.queueNames = queueNames;
        queueNames.reduce(function (queues, queueName) {
          queues[queueName] = new Queue(queueName, options[queueName], options);
          return queues;
        }, this.queues);
      }
      /**
       * @method schedule
       * @param {String} queueName
       * @param {Any} target
       * @param {Any} method
       * @param {Any} args
       * @param {Boolean} onceFlag
       * @param {Any} stack
       * @return queue
       */

      schedule(queueName, target, method, args, onceFlag, stack) {
        var queues = this.queues;
        var queue = queues[queueName];

        if (queue === undefined) {
          throw new Error(
            `You attempted to schedule an action in a queue (${queueName}) that doesn\'t exist`,
          );
        }

        if (method === undefined || method === null) {
          throw new Error(
            `You attempted to schedule an action in a queue (${queueName}) for a method that doesn\'t exist`,
          );
        }

        this.queueNameIndex = 0;

        if (onceFlag) {
          return queue.pushUnique(target, method, args, stack);
        } else {
          return queue.push(target, method, args, stack);
        }
      }
      /**
       * DeferredActionQueues.flush() calls Queue.flush()
       *
       * @method flush
       * @param {Boolean} fromAutorun
       */

      flush(fromAutorun) {
        if (fromAutorun === void 0) {
          fromAutorun = false;
        }

        var queue;
        var queueName;
        var numberOfQueues = this.queueNames.length;

        while (this.queueNameIndex < numberOfQueues) {
          queueName = this.queueNames[this.queueNameIndex];
          queue = this.queues[queueName];

          if (queue.hasWork() === false) {
            this.queueNameIndex++;

            if (fromAutorun && this.queueNameIndex < numberOfQueues) {
              return 1;
              /* Pause */
            }
          } else {
            if (
              queue.flush(
                false,
                /* async */
              ) === 1
              /* Pause */
            ) {
              return 1;
              /* Pause */
            }
          }
        }
      }
      /**
       * Returns debug information for the current queues.
       *
       * @method _getDebugInfo
       * @param {Boolean} debugEnabled
       * @returns {IDebugInfo | undefined}
       */

      _getDebugInfo(debugEnabled) {
        if (debugEnabled) {
          var debugInfo = {};
          var queue;
          var queueName;
          var numberOfQueues = this.queueNames.length;
          var i = 0;

          while (i < numberOfQueues) {
            queueName = this.queueNames[i];
            queue = this.queues[queueName];
            debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
            i++;
          }

          return debugInfo;
        }

        return;
      }
    }

    function iteratorDrain(fn) {
      var iterator = fn();
      var result = iterator.next();

      while (result.done === false) {
        result.value();
        result = iterator.next();
      }
    }

    var noop = function () {};

    var DISABLE_SCHEDULE = Object.freeze([]);

    function parseArgs() {
      var length = arguments.length;
      var args;
      var method;
      var target;
      if (length === 0);
      else if (length === 1) {
        target = null;
        method = arguments[0];
      } else {
        var argsIndex = 2;
        var methodOrTarget = arguments[0];
        var methodOrArgs = arguments[1];
        var type = typeof methodOrArgs;

        if (type === 'function') {
          target = methodOrTarget;
          method = methodOrArgs;
        } else if (
          methodOrTarget !== null &&
          type === 'string' &&
          methodOrArgs in methodOrTarget
        ) {
          target = methodOrTarget;
          method = target[methodOrArgs];
        } else if (typeof methodOrTarget === 'function') {
          argsIndex = 1;
          target = null;
          method = methodOrTarget;
        }

        if (length > argsIndex) {
          var len = length - argsIndex;
          args = new Array(len);

          for (var i = 0; i < len; i++) {
            args[i] = arguments[i + argsIndex];
          }
        }
      }
      return [target, method, args];
    }

    function parseTimerArgs() {
      var [target, method, args] = parseArgs(...arguments);
      var wait = 0;
      var length = args !== undefined ? args.length : 0;

      if (length > 0) {
        var last = args[length - 1];

        if (isCoercableNumber(last)) {
          wait = parseInt(args.pop(), 10);
        }
      }

      return [target, method, args, wait];
    }

    function parseDebounceArgs() {
      var target;
      var method;
      var isImmediate;
      var args;
      var wait;

      if (arguments.length === 2) {
        method = arguments[0];
        wait = arguments[1];
        target = null;
      } else {
        [target, method, args] = parseArgs(...arguments);

        if (args === undefined) {
          wait = 0;
        } else {
          wait = args.pop();

          if (!isCoercableNumber(wait)) {
            isImmediate = wait === true;
            wait = args.pop();
          }
        }
      }

      wait = parseInt(wait, 10);
      return [target, method, args, wait, isImmediate];
    }

    var UUID = 0;
    var beginCount = 0;
    var endCount = 0;
    var beginEventCount = 0;
    var endEventCount = 0;
    var runCount = 0;
    var joinCount = 0;
    var deferCount = 0;
    var scheduleCount = 0;
    var scheduleIterableCount = 0;
    var deferOnceCount = 0;
    var scheduleOnceCount = 0;
    var setTimeoutCount = 0;
    var laterCount = 0;
    var throttleCount = 0;
    var debounceCount = 0;
    var cancelTimersCount = 0;
    var cancelCount = 0;
    var autorunsCreatedCount = 0;
    var autorunsCompletedCount = 0;
    var deferredActionQueuesCreatedCount = 0;
    var nestedDeferredActionQueuesCreated = 0;

    class Backburner {
      constructor(queueNames, options) {
        this.DEBUG = false;
        this.currentInstance = null;
        this.instanceStack = [];
        this._eventCallbacks = {
          end: [],
          begin: [],
        };
        this._timerTimeoutId = null;
        this._timers = [];
        this._autorun = false;
        this._autorunStack = null;
        this.queueNames = queueNames;
        this.options = options || {};

        if (typeof this.options.defaultQueue === 'string') {
          this._defaultQueue = this.options.defaultQueue;
        } else {
          this._defaultQueue = this.queueNames[0];
        }

        this._onBegin = this.options.onBegin || noop;
        this._onEnd = this.options.onEnd || noop;
        this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);

        this._boundAutorunEnd = () => {
          autorunsCompletedCount++; // if the autorun was already flushed, do nothing

          if (this._autorun === false) {
            return;
          }

          this._autorun = false;
          this._autorunStack = null;

          this._end(
            true,
            /* fromAutorun */
          );
        };

        var builder = this.options._buildPlatform || buildPlatform;
        this._platform = builder(this._boundAutorunEnd);
      }

      get counters() {
        return {
          begin: beginCount,
          end: endCount,
          events: {
            begin: beginEventCount,
            end: endEventCount,
          },
          autoruns: {
            created: autorunsCreatedCount,
            completed: autorunsCompletedCount,
          },
          run: runCount,
          join: joinCount,
          defer: deferCount,
          schedule: scheduleCount,
          scheduleIterable: scheduleIterableCount,
          deferOnce: deferOnceCount,
          scheduleOnce: scheduleOnceCount,
          setTimeout: setTimeoutCount,
          later: laterCount,
          throttle: throttleCount,
          debounce: debounceCount,
          cancelTimers: cancelTimersCount,
          cancel: cancelCount,
          loops: {
            total: deferredActionQueuesCreatedCount,
            nested: nestedDeferredActionQueuesCreated,
          },
        };
      }

      get defaultQueue() {
        return this._defaultQueue;
      }
      /*
      @method begin
      @return instantiated class DeferredActionQueues
    */

      begin() {
        beginCount++;
        var options = this.options;
        var previousInstance = this.currentInstance;
        var current;

        if (this._autorun !== false) {
          current = previousInstance;

          this._cancelAutorun();
        } else {
          if (previousInstance !== null) {
            nestedDeferredActionQueuesCreated++;
            this.instanceStack.push(previousInstance);
          }

          deferredActionQueuesCreatedCount++;
          current = this.currentInstance = new DeferredActionQueues(
            this.queueNames,
            options,
          );
          beginEventCount++;

          this._trigger('begin', current, previousInstance);
        }

        this._onBegin(current, previousInstance);

        return current;
      }

      end() {
        endCount++;

        this._end(false);
      }

      on(eventName, callback) {
        if (typeof callback !== 'function') {
          throw new TypeError(`Callback must be a function`);
        }

        var callbacks = this._eventCallbacks[eventName];

        if (callbacks !== undefined) {
          callbacks.push(callback);
        } else {
          throw new TypeError(
            `Cannot on() event ${eventName} because it does not exist`,
          );
        }
      }

      off(eventName, callback) {
        var callbacks = this._eventCallbacks[eventName];

        if (!eventName || callbacks === undefined) {
          throw new TypeError(
            `Cannot off() event ${eventName} because it does not exist`,
          );
        }

        var callbackFound = false;

        if (callback) {
          for (var i = 0; i < callbacks.length; i++) {
            if (callbacks[i] === callback) {
              callbackFound = true;
              callbacks.splice(i, 1);
              i--;
            }
          }
        }

        if (!callbackFound) {
          throw new TypeError(`Cannot off() callback that does not exist`);
        }
      }

      run() {
        runCount++;
        var [target, method, args] = parseArgs(...arguments);
        return this._run(target, method, args);
      }

      join() {
        joinCount++;
        var [target, method, args] = parseArgs(...arguments);
        return this._join(target, method, args);
      }
      /**
       * @deprecated please use schedule instead.
       */

      defer(queueName, target, method) {
        deferCount++;

        for (
          var _len = arguments.length,
            args = new Array(_len > 3 ? _len - 3 : 0),
            _key = 3;
          _key < _len;
          _key++
        ) {
          args[_key - 3] = arguments[_key];
        }

        return this.schedule(queueName, target, method, ...args);
      }

      schedule(queueName) {
        scheduleCount++;

        for (
          var _len2 = arguments.length,
            _args = new Array(_len2 > 1 ? _len2 - 1 : 0),
            _key2 = 1;
          _key2 < _len2;
          _key2++
        ) {
          _args[_key2 - 1] = arguments[_key2];
        }

        var [target, method, args] = parseArgs(..._args);
        var stack = this.DEBUG ? new Error() : undefined;
        return this._ensureInstance().schedule(
          queueName,
          target,
          method,
          args,
          false,
          stack,
        );
      }
      /*
      Defer the passed iterable of functions to run inside the specified queue.
         @method scheduleIterable
      @param {String} queueName
      @param {Iterable} an iterable of functions to execute
      @return method result
    */

      scheduleIterable(queueName, iterable) {
        scheduleIterableCount++;
        var stack = this.DEBUG ? new Error() : undefined;
        return this._ensureInstance().schedule(
          queueName,
          null,
          iteratorDrain,
          [iterable],
          false,
          stack,
        );
      }
      /**
       * @deprecated please use scheduleOnce instead.
       */

      deferOnce(queueName, target, method) {
        deferOnceCount++;

        for (
          var _len3 = arguments.length,
            args = new Array(_len3 > 3 ? _len3 - 3 : 0),
            _key3 = 3;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3 - 3] = arguments[_key3];
        }

        return this.scheduleOnce(queueName, target, method, ...args);
      }

      scheduleOnce(queueName) {
        scheduleOnceCount++;

        for (
          var _len4 = arguments.length,
            _args = new Array(_len4 > 1 ? _len4 - 1 : 0),
            _key4 = 1;
          _key4 < _len4;
          _key4++
        ) {
          _args[_key4 - 1] = arguments[_key4];
        }

        var [target, method, args] = parseArgs(..._args);
        var stack = this.DEBUG ? new Error() : undefined;
        return this._ensureInstance().schedule(
          queueName,
          target,
          method,
          args,
          true,
          stack,
        );
      }

      setTimeout() {
        setTimeoutCount++;
        return this.later(...arguments);
      }

      later() {
        laterCount++;
        var [target, method, args, wait] = parseTimerArgs(...arguments);
        return this._later(target, method, args, wait);
      }

      throttle() {
        throttleCount++;
        var [
          target,
          method,
          args,
          wait,
          isImmediate = true,
        ] = parseDebounceArgs(...arguments);
        var index = findTimerItem(target, method, this._timers);
        var timerId;

        if (index === -1) {
          timerId = this._later(
            target,
            method,
            isImmediate ? DISABLE_SCHEDULE : args,
            wait,
          );

          if (isImmediate) {
            this._join(target, method, args);
          }
        } else {
          timerId = this._timers[index + 1];
          var argIndex = index + 4;

          if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
            this._timers[argIndex] = args;
          }
        }

        return timerId;
      }

      debounce() {
        debounceCount++;
        var [
          target,
          method,
          args,
          wait,
          isImmediate = false,
        ] = parseDebounceArgs(...arguments);
        var _timers = this._timers;
        var index = findTimerItem(target, method, _timers);
        var timerId;

        if (index === -1) {
          timerId = this._later(
            target,
            method,
            isImmediate ? DISABLE_SCHEDULE : args,
            wait,
          );

          if (isImmediate) {
            this._join(target, method, args);
          }
        } else {
          var executeAt = this._platform.now() + wait;
          var argIndex = index + 4;

          if (_timers[argIndex] === DISABLE_SCHEDULE) {
            args = DISABLE_SCHEDULE;
          }

          timerId = _timers[index + 1];
          var i = binarySearch(executeAt, _timers);

          if (index + TIMERS_OFFSET === i) {
            _timers[index] = executeAt;
            _timers[argIndex] = args;
          } else {
            var stack = this._timers[index + 5];

            this._timers.splice(
              i,
              0,
              executeAt,
              timerId,
              target,
              method,
              args,
              stack,
            );

            this._timers.splice(index, TIMERS_OFFSET);
          }

          if (index === 0) {
            this._reinstallTimerTimeout();
          }
        }

        return timerId;
      }

      cancelTimers() {
        cancelTimersCount++;

        this._clearTimerTimeout();

        this._timers = [];

        this._cancelAutorun();
      }

      hasTimers() {
        return this._timers.length > 0 || this._autorun;
      }

      cancel(timer) {
        cancelCount++;

        if (timer === null || timer === undefined) {
          return false;
        }

        var timerType = typeof timer;

        if (timerType === 'number') {
          // we're cancelling a setTimeout or throttle or debounce
          return this._cancelLaterTimer(timer);
        } else if (timerType === 'object' && timer.queue && timer.method) {
          // we're cancelling a deferOnce
          return timer.queue.cancel(timer);
        }

        return false;
      }

      ensureInstance() {
        this._ensureInstance();
      }
      /**
       * Returns debug information related to the current instance of Backburner
       *
       * @method getDebugInfo
       * @returns {Object | undefined} Will return and Object containing debug information if
       * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
       */

      getDebugInfo() {
        if (this.DEBUG) {
          return {
            autorun: this._autorunStack,
            counters: this.counters,
            timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
            instanceStack: [this.currentInstance, ...this.instanceStack].map(
              (deferredActionQueue) =>
                deferredActionQueue &&
                deferredActionQueue._getDebugInfo(this.DEBUG),
            ),
          };
        }

        return undefined;
      }

      _end(fromAutorun) {
        var currentInstance = this.currentInstance;
        var nextInstance = null;

        if (currentInstance === null) {
          throw new Error(`end called without begin`);
        } // Prevent double-finally bug in Safari 6.0.2 and iOS 6
        // This bug appears to be resolved in Safari 6.0.5 and iOS 7

        var finallyAlreadyCalled = false;
        var result;

        try {
          result = currentInstance.flush(fromAutorun);
        } finally {
          if (!finallyAlreadyCalled) {
            finallyAlreadyCalled = true;

            if (
              result === 1
              /* Pause */
            ) {
              var plannedNextQueue = this.queueNames[
                currentInstance.queueNameIndex
              ];

              this._scheduleAutorun(plannedNextQueue);
            } else {
              this.currentInstance = null;

              if (this.instanceStack.length > 0) {
                nextInstance = this.instanceStack.pop();
                this.currentInstance = nextInstance;
              }

              this._trigger('end', currentInstance, nextInstance);

              this._onEnd(currentInstance, nextInstance);
            }
          }
        }
      }

      _join(target, method, args) {
        if (this.currentInstance === null) {
          return this._run(target, method, args);
        }

        if (target === undefined && args === undefined) {
          return method();
        } else {
          return method.apply(target, args);
        }
      }

      _run(target, method, args) {
        var onError = getOnError(this.options);
        this.begin();

        if (onError) {
          try {
            return method.apply(target, args);
          } catch (error) {
            onError(error);
          } finally {
            this.end();
          }
        } else {
          try {
            return method.apply(target, args);
          } finally {
            this.end();
          }
        }
      }

      _cancelAutorun() {
        if (this._autorun) {
          this._platform.clearNext();

          this._autorun = false;
          this._autorunStack = null;
        }
      }

      _later(target, method, args, wait) {
        var stack = this.DEBUG ? new Error() : undefined;
        var executeAt = this._platform.now() + wait;
        var id = UUID++;

        if (this._timers.length === 0) {
          this._timers.push(executeAt, id, target, method, args, stack);

          this._installTimerTimeout();
        } else {
          // find position to insert
          var i = binarySearch(executeAt, this._timers);

          this._timers.splice(i, 0, executeAt, id, target, method, args, stack); // always reinstall since it could be out of sync

          this._reinstallTimerTimeout();
        }

        return id;
      }

      _cancelLaterTimer(timer) {
        for (var i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
          if (this._timers[i] === timer) {
            this._timers.splice(i - 1, TIMERS_OFFSET);

            if (i === 1) {
              this._reinstallTimerTimeout();
            }

            return true;
          }
        }

        return false;
      }
      /**
     Trigger an event. Supports up to two arguments. Designed around
     triggering transition events from one run loop instance to the
     next, which requires an argument for the  instance and then
     an argument for the next instance.
        @private
     @method _trigger
     @param {String} eventName
     @param {any} arg1
     @param {any} arg2
     */

      _trigger(eventName, arg1, arg2) {
        var callbacks = this._eventCallbacks[eventName];

        if (callbacks !== undefined) {
          for (var i = 0; i < callbacks.length; i++) {
            callbacks[i](arg1, arg2);
          }
        }
      }

      _runExpiredTimers() {
        this._timerTimeoutId = null;

        if (this._timers.length > 0) {
          this.begin();

          this._scheduleExpiredTimers();

          this.end();
        }
      }

      _scheduleExpiredTimers() {
        var timers = this._timers;
        var i = 0;
        var l = timers.length;
        var defaultQueue = this._defaultQueue;

        var n = this._platform.now();

        for (; i < l; i += TIMERS_OFFSET) {
          var executeAt = timers[i];

          if (executeAt > n) {
            break;
          }

          var args = timers[i + 4];

          if (args !== DISABLE_SCHEDULE) {
            var target = timers[i + 2];
            var method = timers[i + 3];
            var stack = timers[i + 5];
            this.currentInstance.schedule(
              defaultQueue,
              target,
              method,
              args,
              false,
              stack,
            );
          }
        }

        timers.splice(0, i);

        this._installTimerTimeout();
      }

      _reinstallTimerTimeout() {
        this._clearTimerTimeout();

        this._installTimerTimeout();
      }

      _clearTimerTimeout() {
        if (this._timerTimeoutId === null) {
          return;
        }

        this._platform.clearTimeout(this._timerTimeoutId);

        this._timerTimeoutId = null;
      }

      _installTimerTimeout() {
        if (this._timers.length === 0) {
          return;
        }

        var minExpiresAt = this._timers[0];

        var n = this._platform.now();

        var wait = Math.max(0, minExpiresAt - n);
        this._timerTimeoutId = this._platform.setTimeout(
          this._boundRunExpiredTimers,
          wait,
        );
      }

      _ensureInstance() {
        var currentInstance = this.currentInstance;

        if (currentInstance === null) {
          this._autorunStack = this.DEBUG ? new Error() : undefined;
          currentInstance = this.begin();

          this._scheduleAutorun(this.queueNames[0]);
        }

        return currentInstance;
      }

      _scheduleAutorun(plannedNextQueue) {
        autorunsCreatedCount++;
        var next = this._platform.next;
        var flush = this.options.flush;

        if (flush) {
          flush(plannedNextQueue, next);
        } else {
          next();
        }

        this._autorun = true;
      }
    }

    Backburner.Queue = Queue;
    Backburner.buildPlatform = buildPlatform;
    Backburner.buildNext = buildNext;
    var _default = Backburner;
    _exports.default = _default;
  });
  define('dag-map', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
     * A topologically ordered map of key/value pairs with a simple API for adding constraints.
     *
     * Edges can forward reference keys that have not been added yet (the forward reference will
     * map the key to undefined).
     */
    var DAG = (function () {
      function DAG() {
        this._vertices = new Vertices();
      }
      /**
       * Adds a key/value pair with dependencies on other key/value pairs.
       *
       * @public
       * @param key    The key of the vertex to be added.
       * @param value  The value of that vertex.
       * @param before A key or array of keys of the vertices that must
       *               be visited before this vertex.
       * @param after  An string or array of strings with the keys of the
       *               vertices that must be after this vertex is visited.
       */

      DAG.prototype.add = function (key, value, before, after) {
        if (!key) throw new Error('argument `key` is required');
        var vertices = this._vertices;
        var v = vertices.add(key);
        v.val = value;

        if (before) {
          if (typeof before === 'string') {
            vertices.addEdge(v, vertices.add(before));
          } else {
            for (var i = 0; i < before.length; i++) {
              vertices.addEdge(v, vertices.add(before[i]));
            }
          }
        }

        if (after) {
          if (typeof after === 'string') {
            vertices.addEdge(vertices.add(after), v);
          } else {
            for (var i = 0; i < after.length; i++) {
              vertices.addEdge(vertices.add(after[i]), v);
            }
          }
        }
      };
      /**
       * @deprecated please use add.
       */

      DAG.prototype.addEdges = function (key, value, before, after) {
        this.add(key, value, before, after);
      };
      /**
       * Visits key/value pairs in topological order.
       *
       * @public
       * @param callback The function to be invoked with each key/value.
       */

      DAG.prototype.each = function (callback) {
        this._vertices.walk(callback);
      };
      /**
       * @deprecated please use each.
       */

      DAG.prototype.topsort = function (callback) {
        this.each(callback);
      };

      return DAG;
    })();

    var _default = DAG;
    /** @private */

    _exports.default = _default;

    var Vertices = (function () {
      function Vertices() {
        this.length = 0;
        this.stack = new IntStack();
        this.path = new IntStack();
        this.result = new IntStack();
      }

      Vertices.prototype.add = function (key) {
        if (!key) throw new Error('missing key');
        var l = this.length | 0;
        var vertex;

        for (var i = 0; i < l; i++) {
          vertex = this[i];
          if (vertex.key === key) return vertex;
        }

        this.length = l + 1;
        return (this[l] = {
          idx: l,
          key: key,
          val: undefined,
          out: false,
          flag: false,
          length: 0,
        });
      };

      Vertices.prototype.addEdge = function (v, w) {
        this.check(v, w.key);
        var l = w.length | 0;

        for (var i = 0; i < l; i++) {
          if (w[i] === v.idx) return;
        }

        w.length = l + 1;
        w[l] = v.idx;
        v.out = true;
      };

      Vertices.prototype.walk = function (cb) {
        this.reset();

        for (var i = 0; i < this.length; i++) {
          var vertex = this[i];
          if (vertex.out) continue;
          this.visit(vertex, '');
        }

        this.each(this.result, cb);
      };

      Vertices.prototype.check = function (v, w) {
        if (v.key === w) {
          throw new Error('cycle detected: ' + w + ' <- ' + w);
        } // quick check

        if (v.length === 0) return; // shallow check

        for (var i = 0; i < v.length; i++) {
          var key = this[v[i]].key;

          if (key === w) {
            throw new Error(
              'cycle detected: ' + w + ' <- ' + v.key + ' <- ' + w,
            );
          }
        } // deep check

        this.reset();
        this.visit(v, w);

        if (this.path.length > 0) {
          var msg_1 = 'cycle detected: ' + w;
          this.each(this.path, function (key) {
            msg_1 += ' <- ' + key;
          });
          throw new Error(msg_1);
        }
      };

      Vertices.prototype.reset = function () {
        this.stack.length = 0;
        this.path.length = 0;
        this.result.length = 0;

        for (var i = 0, l = this.length; i < l; i++) {
          this[i].flag = false;
        }
      };

      Vertices.prototype.visit = function (start, search) {
        var _a = this,
          stack = _a.stack,
          path = _a.path,
          result = _a.result;

        stack.push(start.idx);

        while (stack.length) {
          var index = stack.pop() | 0;

          if (index >= 0) {
            // enter
            var vertex = this[index];
            if (vertex.flag) continue;
            vertex.flag = true;
            path.push(index);
            if (search === vertex.key) break; // push exit

            stack.push(~index);
            this.pushIncoming(vertex);
          } else {
            // exit
            path.pop();
            result.push(~index);
          }
        }
      };

      Vertices.prototype.pushIncoming = function (incomming) {
        var stack = this.stack;

        for (var i = incomming.length - 1; i >= 0; i--) {
          var index = incomming[i];

          if (!this[index].flag) {
            stack.push(index);
          }
        }
      };

      Vertices.prototype.each = function (indices, cb) {
        for (var i = 0, l = indices.length; i < l; i++) {
          var vertex = this[indices[i]];
          cb(vertex.key, vertex.val);
        }
      };

      return Vertices;
    })();
    /** @private */

    var IntStack = (function () {
      function IntStack() {
        this.length = 0;
      }

      IntStack.prototype.push = function (n) {
        this[this.length++] = n | 0;
      };

      IntStack.prototype.pop = function () {
        return this[--this.length] | 0;
      };

      return IntStack;
    })();
  });
  define('ember-babel', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.assertThisInitialized = assertThisInitialized;
    _exports.classCallCheck = classCallCheck;
    _exports.createClass = createClass;
    _exports.createForOfIteratorHelperLoose = createForOfIteratorHelperLoose;
    _exports.createSuper = createSuper;
    _exports.inheritsLoose = inheritsLoose;
    _exports.objectDestructuringEmpty = objectDestructuringEmpty;
    _exports.possibleConstructorReturn = possibleConstructorReturn;
    _exports.taggedTemplateLiteralLoose = taggedTemplateLiteralLoose;
    _exports.wrapNativeSuper = wrapNativeSuper;

    /* globals Reflect */
    var setPrototypeOf = Object.setPrototypeOf;
    var getPrototypeOf = Object.getPrototypeOf;
    var hasReflectConstruct =
      typeof Reflect === 'object' && typeof Reflect.construct === 'function';
    var nativeWrapperCache = new Map(); // Super minimal version of Babel's wrapNativeSuper. We only use this for
    // extending Function, for ComputedDecoratorImpl and AliasDecoratorImpl. We know
    // we will never directly create an instance of these classes so no need to
    // include `construct` code or other helpers.

    function wrapNativeSuper(Class) {
      if (nativeWrapperCache.has(Class)) {
        return nativeWrapperCache.get(Class);
      }

      function Wrapper() {}

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        },
      });
      nativeWrapperCache.set(Class, Wrapper);
      return setPrototypeOf(Wrapper, Class);
    }

    function classCallCheck(instance, Constructor) {
      if (
        true
        /* DEBUG */
      ) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function');
        }
      }
    }
    /*
    Overrides default `inheritsLoose` to _also_ call `Object.setPrototypeOf`.
    This is needed so that we can use `loose` option with the
    `@babel/plugin-transform-classes` (because we want simple assignment to the
    prototype wherever possible) but also keep our constructor based prototypal
    inheritance working properly
  */

    function inheritsLoose(subClass, superClass) {
      if (
        true
        /* DEBUG */
      ) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function',
          );
        }
      }

      subClass.prototype = Object.create(
        superClass === null ? null : superClass.prototype,
        {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true,
          },
        },
      );

      if (superClass !== null) {
        setPrototypeOf(subClass, superClass);
      }
    }

    function taggedTemplateLiteralLoose(strings, raw) {
      if (!raw) {
        raw = strings.slice(0);
      }

      strings.raw = raw;
      return strings;
    }

    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ('value' in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    /*
    Differs from default implementation by avoiding boolean coercion of
    `protoProps` and `staticProps`.
  */

    function createClass(Constructor, protoProps, staticProps) {
      if (protoProps !== null && protoProps !== undefined) {
        _defineProperties(Constructor.prototype, protoProps);
      }

      if (staticProps !== null && staticProps !== undefined) {
        _defineProperties(Constructor, staticProps);
      }

      return Constructor;
    }

    function assertThisInitialized(self) {
      if (
        true &&
        /* DEBUG */
        self === void 0
      ) {
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called",
        );
      }

      return self;
    }
    /*
    Adds `DEBUG` guard to error being thrown, and avoids boolean coercion of `call`.
  */

    function possibleConstructorReturn(self, call) {
      if (
        (typeof call === 'object' && call !== null) ||
        typeof call === 'function'
      ) {
        return call;
      }

      return assertThisInitialized(self);
    }

    function objectDestructuringEmpty(obj) {
      if (
        true &&
        /* DEBUG */
        (obj === null || obj === undefined)
      ) {
        throw new TypeError('Cannot destructure undefined');
      }
    }
    /*
    Differs from default implementation by checking for _any_ `Reflect.construct`
    (the default implementation tries to ensure that `Reflect.construct` is truly
    the native one).
  
    Original source: https://github.com/babel/babel/blob/v7.9.2/packages/babel-helpers/src/helpers.js#L738-L757
  */

    function createSuper(Derived) {
      return function () {
        var Super = getPrototypeOf(Derived);
        var result;

        if (hasReflectConstruct) {
          // NOTE: This doesn't work if this.__proto__.constructor has been modified.
          var NewTarget = getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }

        return possibleConstructorReturn(this, result);
      };
    }
    /*
    Does not differ from default implementation.
  */

    function arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      var arr2 = new Array(len);

      for (var i = 0; i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
    /*
    Does not differ from default implementation.
  */

    function unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === 'string') return arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === 'Object' && o.constructor) n = o.constructor.name;
      if (n === 'Map' || n === 'Set') return Array.from(n);
      if (
        n === 'Arguments' ||
        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
      )
        return arrayLikeToArray(o, minLen);
    }
    /*
    Does not differ from default implementation.
  */

    function createForOfIteratorHelperLoose(o) {
      var i = 0;

      if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {
        // Fallback for engines without symbol support
        if (Array.isArray(o) || (o = unsupportedIterableToArray(o)))
          return function () {
            if (i >= o.length)
              return {
                done: true,
              };
            return {
              done: false,
              value: o[i++],
            };
          };
        throw new TypeError(
          'Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
        );
      }

      i = o[Symbol.iterator]();
      return i.next.bind(i);
    }
  });
  define('ember-testing/index', [
    'exports',
    'ember-testing/lib/test',
    'ember-testing/lib/adapters/adapter',
    'ember-testing/lib/setup_for_testing',
    'ember-testing/lib/adapters/qunit',
    'ember-testing/lib/ext/application',
    'ember-testing/lib/ext/rsvp',
    'ember-testing/lib/helpers',
    'ember-testing/lib/initializers',
  ], function (
    _exports,
    _test,
    _adapter,
    _setup_for_testing,
    _qunit,
    _application,
    _rsvp,
    _helpers,
    _initializers,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    Object.defineProperty(_exports, 'Adapter', {
      enumerable: true,
      get: function () {
        return _adapter.default;
      },
    });
    Object.defineProperty(_exports, 'QUnitAdapter', {
      enumerable: true,
      get: function () {
        return _qunit.default;
      },
    });
    Object.defineProperty(_exports, 'Test', {
      enumerable: true,
      get: function () {
        return _test.default;
      },
    });
    Object.defineProperty(_exports, 'setupForTesting', {
      enumerable: true,
      get: function () {
        return _setup_for_testing.default;
      },
    });
  });
  define('ember-testing/lib/adapters/adapter', [
    'exports',
    '@ember/-internals/runtime',
  ], function (_exports, _runtime) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    var Adapter = _runtime.Object.extend({
      /**
      This callback will be called whenever an async operation is about to start.
         Override this to call your framework's methods that handle async
      operations.
         @public
      @method asyncStart
    */
      asyncStart() {},

      /**
      This callback will be called whenever an async operation has completed.
         @public
      @method asyncEnd
    */
      asyncEnd() {},

      /**
      Override this method with your testing framework's false assertion.
      This function is called whenever an exception occurs causing the testing
      promise to fail.
         QUnit example:
         ```javascript
        exception: function(error) {
          ok(false, error);
        };
      ```
         @public
      @method exception
      @param {String} error The exception to be raised.
    */
      exception(error) {
        throw error;
      },
    });

    var _default = Adapter;
    _exports.default = _default;
  });
  define('ember-testing/lib/adapters/qunit', [
    'exports',
    '@ember/-internals/utils',
    'ember-testing/lib/adapters/adapter',
  ], function (_exports, _utils, _adapter) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /* globals QUnit */
    function isVeryOldQunit(obj) {
      return obj != null && typeof obj.stop === 'function';
    }

    var QUnitAdapter = _adapter.default.extend({
      init() {
        this.doneCallbacks = [];
      },

      asyncStart() {
        if (isVeryOldQunit(QUnit)) {
          // very old QUnit version
          // eslint-disable-next-line qunit/no-qunit-stop
          QUnit.stop();
        } else {
          this.doneCallbacks.push(
            QUnit.config.current ? QUnit.config.current.assert.async() : null,
          );
        }
      },

      asyncEnd() {
        // checking for QUnit.stop here (even though we _need_ QUnit.start) because
        // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
        // inside a test context)
        if (isVeryOldQunit(QUnit)) {
          QUnit.start();
        } else {
          var done = this.doneCallbacks.pop(); // This can be null if asyncStart() was called outside of a test

          if (done) {
            done();
          }
        }
      },

      exception(error) {
        QUnit.config.current.assert.ok(false, (0, _utils.inspect)(error));
      },
    });

    var _default = QUnitAdapter;
    _exports.default = _default;
  });
  define('ember-testing/lib/ext/application', [
    '@ember/application',
    'ember-testing/lib/setup_for_testing',
    'ember-testing/lib/test/helpers',
    'ember-testing/lib/test/promise',
    'ember-testing/lib/test/run',
    'ember-testing/lib/test/on_inject_helpers',
    'ember-testing/lib/test/adapter',
    '@ember/debug',
  ], function (
    _application,
    _setup_for_testing,
    _helpers,
    _promise,
    _run,
    _on_inject_helpers,
    _adapter,
    _debug,
  ) {
    'use strict';

    _application.default.reopen({
      /**
     This property contains the testing helpers for the current application. These
     are created once you call `injectTestHelpers` on your `Application`
     instance. The included helpers are also available on the `window` object by
     default, but can be used from this object on the individual application also.
         @property testHelpers
      @type {Object}
      @default {}
      @public
    */
      testHelpers: {},

      /**
     This property will contain the original methods that were registered
     on the `helperContainer` before `injectTestHelpers` is called.
        When `removeTestHelpers` is called, these methods are restored to the
     `helperContainer`.
         @property originalMethods
      @type {Object}
      @default {}
      @private
      @since 1.3.0
    */
      originalMethods: {},

      /**
    This property indicates whether or not this application is currently in
    testing mode. This is set when `setupForTesting` is called on the current
    application.
       @property testing
    @type {Boolean}
    @default false
    @since 1.3.0
    @public
    */
      testing: false,

      /**
      This hook defers the readiness of the application, so that you can start
      the app when your tests are ready to run. It also sets the router's
      location to 'none', so that the window's location will not be modified
      (preventing both accidental leaking of state between tests and interference
      with your testing framework). `setupForTesting` should only be called after
      setting a custom `router` class (for example `App.Router = Router.extend(`).
         Example:
         ```
      App.setupForTesting();
      ```
         @method setupForTesting
      @public
    */
      setupForTesting() {
        (0, _setup_for_testing.default)();
        this.testing = true;
        this.resolveRegistration('router:main').reopen({
          location: 'none',
        });
      },

      /**
      This will be used as the container to inject the test helpers into. By
      default the helpers are injected into `window`.
         @property helperContainer
      @type {Object} The object to be used for test helpers.
      @default window
      @since 1.2.0
      @private
    */
      helperContainer: null,

      /**
      This injects the test helpers into the `helperContainer` object. If an object is provided
      it will be used as the helperContainer. If `helperContainer` is not set it will default
      to `window`. If a function of the same name has already been defined it will be cached
      (so that it can be reset if the helper is removed with `unregisterHelper` or
      `removeTestHelpers`).
         Any callbacks registered with `onInjectHelpers` will be called once the
      helpers have been injected.
         Example:
      ```
      App.injectTestHelpers();
      ```
         @method injectTestHelpers
      @public
    */
      injectTestHelpers(helperContainer) {
        if (helperContainer) {
          this.helperContainer = helperContainer;
        } else {
          this.helperContainer = window;
        }

        this.reopen({
          willDestroy() {
            this._super(...arguments);

            this.removeTestHelpers();
          },
        });
        this.testHelpers = {};

        for (var name in _helpers.helpers) {
          // SAFETY: It is safe to access a property on an object
          this.originalMethods[name] = this.helperContainer[name]; // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.

          this.testHelpers[name] = this.helperContainer[name] = helper(
            this,
            name,
          ); // SAFETY: We checked that it exists

          protoWrap(
            _promise.default.prototype,
            name,
            helper(this, name),
            _helpers.helpers[name].meta.wait,
          );
        }

        (0, _on_inject_helpers.invokeInjectHelpersCallbacks)(this);
      },

      /**
      This removes all helpers that have been registered, and resets and functions
      that were overridden by the helpers.
         Example:
         ```javascript
      App.removeTestHelpers();
      ```
         @public
      @method removeTestHelpers
    */
      removeTestHelpers() {
        if (!this.helperContainer) {
          return;
        }

        for (var name in _helpers.helpers) {
          this.helperContainer[name] = this.originalMethods[name]; // SAFETY: This is a weird thing, but it's not technically unsafe here.

          delete _promise.default.prototype[name];
          delete this.testHelpers[name];
          delete this.originalMethods[name];
        }
      },
    }); // This method is no longer needed
    // But still here for backwards compatibility
    // of helper chaining

    function protoWrap(proto, name, callback, isAsync) {
      // SAFETY: This isn't entirely safe, but it _seems_ to be ok.
      proto[name] = function () {
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key];
        }

        if (isAsync) {
          return callback.apply(this, args);
        } else {
          // SAFETY: This is not actually safe.
          return this.then(function () {
            return callback.apply(this, args);
          });
        }
      };
    }

    function helper(app, name) {
      var helper = _helpers.helpers[name];
      true &&
        !helper &&
        (0, _debug.assert)(`[BUG] Missing helper: ${name}`, helper);
      var fn = helper.method;
      var meta = helper.meta;

      if (!meta.wait) {
        return function () {
          for (
            var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2] = arguments[_key2];
          }

          return fn.apply(app, [app, ...args]);
        };
      }

      return function () {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3];
        }

        var lastPromise = (0, _run.default)(() =>
          (0, _promise.resolve)((0, _promise.getLastPromise)()),
        ); // wait for last helper's promise to resolve and then
        // execute. To be safe, we need to tell the adapter we're going
        // asynchronous here, because fn may not be invoked before we
        // return.

        (0, _adapter.asyncStart)();
        return lastPromise
          .then(() => fn.apply(app, [app, ...args]))
          .finally(_adapter.asyncEnd);
      };
    }
  });
  define('ember-testing/lib/ext/rsvp', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/runloop',
    '@ember/debug',
    'ember-testing/lib/test/adapter',
  ], function (_exports, _runtime, _runloop, _debug, _adapter) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    _runtime.RSVP.configure('async', function (callback, promise) {
      // if schedule will cause autorun, we need to inform adapter
      if ((0, _debug.isTesting)() && !_runloop._backburner.currentInstance) {
        (0, _adapter.asyncStart)();

        _runloop._backburner.schedule('actions', () => {
          (0, _adapter.asyncEnd)();
          callback(promise);
        });
      } else {
        _runloop._backburner.schedule('actions', () => callback(promise));
      }
    });

    var _default = _runtime.RSVP;
    _exports.default = _default;
  });
  define('ember-testing/lib/helpers', [
    'ember-testing/lib/test/helpers',
    'ember-testing/lib/helpers/and_then',
    'ember-testing/lib/helpers/current_path',
    'ember-testing/lib/helpers/current_route_name',
    'ember-testing/lib/helpers/current_url',
    'ember-testing/lib/helpers/pause_test',
    'ember-testing/lib/helpers/visit',
    'ember-testing/lib/helpers/wait',
  ], function (
    _helpers,
    _and_then,
    _current_path,
    _current_route_name,
    _current_url,
    _pause_test,
    _visit,
    _wait,
  ) {
    'use strict';

    (0, _helpers.registerAsyncHelper)('visit', _visit.default);
    (0, _helpers.registerAsyncHelper)('wait', _wait.default);
    (0, _helpers.registerAsyncHelper)('andThen', _and_then.default);
    (0, _helpers.registerAsyncHelper)('pauseTest', _pause_test.pauseTest);
    (0, _helpers.registerHelper)(
      'currentRouteName',
      _current_route_name.default,
    );
    (0, _helpers.registerHelper)('currentPath', _current_path.default);
    (0, _helpers.registerHelper)('currentURL', _current_url.default);
    (0, _helpers.registerHelper)('resumeTest', _pause_test.resumeTest);
  });
  define('ember-testing/lib/helpers/and_then', [
    'exports',
    '@ember/debug',
  ], function (_exports, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = andThen;

    function andThen(app, callback) {
      var wait = app.testHelpers['wait'];
      true && !wait && (0, _debug.assert)('[BUG] Missing wait helper', wait);
      return wait(callback(app));
    }
  });
  define('ember-testing/lib/helpers/current_path', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/routing',
    '@ember/debug',
  ], function (_exports, _metal, _routing, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = currentPath;

    /**
  @module ember
  */

    /**
    Returns the current path.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentPath(), 'some.path.index', "correct path was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentPath
  @return {Object} The currently active path.
  @since 1.5.0
  @public
  */
    function currentPath(app) {
      true &&
        !app.__container__ &&
        (0, _debug.assert)(
          '[BUG] app.__container__ is not set',
          app.__container__,
        );

      var routingService = app.__container__.lookup('service:-routing');

      true &&
        !(routingService instanceof _routing.RoutingService) &&
        (0, _debug.assert)(
          '[BUG] service:-routing is not a RoutingService',
          routingService instanceof _routing.RoutingService,
        );
      return (0, _metal.get)(routingService, 'currentPath');
    }
  });
  define('ember-testing/lib/helpers/current_route_name', [
    'exports',
    '@ember/-internals/metal',
    '@ember/-internals/routing',
    '@ember/debug',
  ], function (_exports, _metal, _routing, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = currentRouteName;

    /**
  @module ember
  */

    /**
    Returns the currently active route name.
  
  Example:
  
  ```javascript
  function validateRouteName() {
    equal(currentRouteName(), 'some.path', "correct route was transitioned into.");
  }
  visit('/some/path').then(validateRouteName)
  ```
  
  @method currentRouteName
  @return {Object} The name of the currently active route.
  @since 1.5.0
  @public
  */
    function currentRouteName(app) {
      true &&
        !app.__container__ &&
        (0, _debug.assert)(
          '[BUG] app.__container__ is not set',
          app.__container__,
        );

      var routingService = app.__container__.lookup('service:-routing');

      true &&
        !(routingService instanceof _routing.RoutingService) &&
        (0, _debug.assert)(
          '[BUG] service:-routing is not a RoutingService',
          routingService instanceof _routing.RoutingService,
        );
      return (0, _metal.get)(routingService, 'currentRouteName');
    }
  });
  define('ember-testing/lib/helpers/current_url', [
    'exports',
    '@ember/-internals/metal',
    '@ember/debug',
    '@ember/routing/router',
  ], function (_exports, _metal, _debug, _router) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = currentURL;

    /**
  @module ember
  */

    /**
    Returns the current URL.
  
  Example:
  
  ```javascript
  function validateURL() {
    equal(currentURL(), '/some/path', "correct URL was transitioned into.");
  }
  
  click('#some-link-id').then(validateURL);
  ```
  
  @method currentURL
  @return {Object} The currently active URL.
  @since 1.5.0
  @public
  */
    function currentURL(app) {
      true &&
        !app.__container__ &&
        (0, _debug.assert)(
          '[BUG] app.__container__ is not set',
          app.__container__,
        );

      var router = app.__container__.lookup('router:main');

      true &&
        !(router instanceof _router.default) &&
        (0, _debug.assert)(
          '[BUG] router:main is not a Router',
          router instanceof _router.default,
        );
      var location = (0, _metal.get)(router, 'location');
      true &&
        !(typeof location !== 'string') &&
        (0, _debug.assert)(
          '[BUG] location is still a string',
          typeof location !== 'string',
        );
      return location.getURL();
    }
  });
  define('ember-testing/lib/helpers/pause_test', [
    'exports',
    '@ember/-internals/runtime',
    '@ember/debug',
  ], function (_exports, _runtime, _debug) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.pauseTest = pauseTest;
    _exports.resumeTest = resumeTest;

    /**
  @module ember
  */
    var resume;
    /**
   Resumes a test paused by `pauseTest`.
  
   @method resumeTest
   @return {void}
   @public
  */

    function resumeTest() {
      true &&
        !resume &&
        (0, _debug.assert)(
          'Testing has not been paused. There is nothing to resume.',
          resume,
        );
      resume();
      resume = undefined;
    }
    /**
   Pauses the current test - this is useful for debugging while testing or for test-driving.
   It allows you to inspect the state of your application at any point.
   Example (The test will pause before clicking the button):
  
   ```javascript
   visit('/')
   return pauseTest();
   click('.btn');
   ```
  
   You may want to turn off the timeout before pausing.
  
   qunit (timeout available to use as of 2.4.0):
  
   ```
   visit('/');
   assert.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
   mocha (timeout happens automatically as of ember-mocha v0.14.0):
  
   ```
   visit('/');
   this.timeout(0);
   return pauseTest();
   click('.btn');
   ```
  
  
   @since 1.9.0
   @method pauseTest
   @return {Object} A promise that will never resolve
   @public
  */

    function pauseTest() {
      (0, _debug.info)('Testing paused. Use `resumeTest()` to continue.');
      return new _runtime.RSVP.Promise((resolve) => {
        resume = resolve;
      }, 'TestAdapter paused promise');
    }
  });
  define('ember-testing/lib/helpers/visit', [
    'exports',
    '@ember/debug',
    '@ember/routing/router',
    '@ember/runloop',
  ], function (_exports, _debug, _router, _runloop) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = visit;

    /**
    Loads a route, sets up any controllers, and renders any templates associated
    with the route as though a real user had triggered the route change while
    using your app.
  
    Example:
  
    ```javascript
    visit('posts/index').then(function() {
      // assert something
    });
    ```
  
    @method visit
    @param {String} url the name of the route
    @return {RSVP.Promise<undefined>}
    @public
  */
    function visit(app, url) {
      true &&
        !app.__container__ &&
        (0, _debug.assert)('[BUG] Missing container', app.__container__);

      var router = app.__container__.lookup('router:main');

      true &&
        !(router instanceof _router.default) &&
        (0, _debug.assert)(
          '[BUG] router:main is not a Router',
          router instanceof _router.default,
        );
      var shouldHandleURL = false;
      app.boot().then(() => {
        true &&
          !(typeof router.location !== 'string') &&
          (0, _debug.assert)(
            '[BUG] router.location is still a string',
            typeof router.location !== 'string',
          );
        router.location.setURL(url);

        if (shouldHandleURL) {
          true &&
            !app.__deprecatedInstance__ &&
            (0, _debug.assert)(
              "[BUG] __deprecatedInstance__ isn't set",
              app.__deprecatedInstance__,
            );
          (0, _runloop.run)(app.__deprecatedInstance__, 'handleURL', url);
        }
      });

      if (app._readinessDeferrals > 0) {
        // SAFETY: This should be safe, though it is odd.
        router.initialURL = url;
        (0, _runloop.run)(app, 'advanceReadiness');
        delete router.initialURL;
      } else {
        shouldHandleURL = true;
      }

      var wait = app.testHelpers['wait'];
      true && !wait && (0, _debug.assert)('[BUG] missing wait helper', wait);
      return wait();
    }
  });
  define('ember-testing/lib/helpers/wait', [
    'exports',
    'ember-testing/lib/test/waiters',
    '@ember/-internals/runtime',
    '@ember/runloop',
    'ember-testing/lib/test/pending_requests',
    '@ember/debug',
    '@ember/routing/router',
  ], function (
    _exports,
    _waiters,
    _runtime,
    _runloop,
    _pending_requests,
    _debug,
    _router,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = wait;

    /**
  @module ember
  */

    /**
    Causes the run loop to process any pending events. This is used to ensure that
    any async operations from other helpers (or your assertions) have been processed.
  
    This is most often used as the return value for the helper functions (see 'click',
    'fillIn','visit',etc). However, there is a method to register a test helper which
    utilizes this method without the need to actually call `wait()` in your helpers.
  
    The `wait` helper is built into `registerAsyncHelper` by default. You will not need
    to `return app.testHelpers.wait();` - the wait behavior is provided for you.
  
    Example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('loginUser', function(app, username, password) {
      visit('secured/path/here')
        .fillIn('#username', username)
        .fillIn('#password', password)
        .click('.submit');
    });
    ```
  
    @method wait
    @param {Object} value The value to be returned.
    @return {RSVP.Promise<any>} Promise that resolves to the passed value.
    @public
    @since 1.0.0
  */
    function wait(app, value) {
      return new _runtime.RSVP.Promise(function (resolve) {
        true &&
          !app.__container__ &&
          (0, _debug.assert)('[BUG] Missing container', app.__container__);

        var router = app.__container__.lookup('router:main');

        true &&
          !(router instanceof _router.default) &&
          (0, _debug.assert)(
            '[BUG] Expected router:main to be a subclass of Ember Router',
            router instanceof _router.default,
          ); // Every 10ms, poll for the async thing to have finished

        var watcher = setInterval(() => {
          // 1. If the router is loading, keep polling
          var routerIsLoading =
            router._routerMicrolib &&
            Boolean(router._routerMicrolib.activeTransition);

          if (routerIsLoading) {
            return;
          } // 2. If there are pending Ajax requests, keep polling

          if ((0, _pending_requests.pendingRequests)()) {
            return;
          } // 3. If there are scheduled timers or we are inside of a run loop, keep polling

          if (
            (0, _runloop._hasScheduledTimers)() ||
            (0, _runloop._getCurrentRunLoop)()
          ) {
            return;
          }

          if ((0, _waiters.checkWaiters)()) {
            return;
          } // Stop polling

          clearInterval(watcher); // Synchronously resolve the promise

          (0, _runloop.run)(null, resolve, value);
        }, 10);
      });
    }
  });
  define('ember-testing/lib/initializers', ['@ember/application'], function (
    _application,
  ) {
    'use strict';

    var name = 'deferReadiness in `testing` mode';
    (0, _application.onLoad)('Ember.Application', function (ApplicationClass) {
      if (!ApplicationClass.initializers[name]) {
        ApplicationClass.initializer({
          name: name,

          initialize(application) {
            if (application.testing) {
              application.deferReadiness();
            }
          },
        });
      }
    });
  });
  define('ember-testing/lib/setup_for_testing', [
    'exports',
    '@ember/debug',
    'ember-testing/lib/test/adapter',
    'ember-testing/lib/adapters/adapter',
    'ember-testing/lib/adapters/qunit',
  ], function (_exports, _debug, _adapter, _adapter2, _qunit) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = setupForTesting;

    /* global self */

    /**
    Sets Ember up for testing. This is useful to perform
    basic setup steps in order to unit test.
  
    Use `App.setupForTesting` to perform integration tests (full
    application testing).
  
    @method setupForTesting
    @namespace Ember
    @since 1.5.0
    @private
  */
    function setupForTesting() {
      (0, _debug.setTesting)(true);
      var adapter = (0, _adapter.getAdapter)(); // if adapter is not manually set default to QUnit

      if (!adapter) {
        (0, _adapter.setAdapter)(
          typeof self.QUnit === 'undefined'
            ? _adapter2.default.create()
            : _qunit.default.create(),
        );
      }
    }
  });
  define('ember-testing/lib/test', [
    'exports',
    'ember-testing/lib/test/helpers',
    'ember-testing/lib/test/on_inject_helpers',
    'ember-testing/lib/test/promise',
    'ember-testing/lib/test/waiters',
    'ember-testing/lib/test/adapter',
  ], function (
    _exports,
    _helpers,
    _on_inject_helpers,
    _promise,
    _waiters,
    _adapter,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;

    /**
    @module ember
  */

    /**
    This is a container for an assortment of testing related functionality:
  
    * Choose your default test adapter (for your framework of choice).
    * Register/Unregister additional test helpers.
    * Setup callbacks to be fired when the test helpers are injected into
      your application.
  
    @class Test
    @namespace Ember
    @public
  */
    var Test = {
      /**
      Hash containing all known test helpers.
         @property _helpers
      @private
      @since 1.7.0
    */
      _helpers: _helpers.helpers,
      registerHelper: _helpers.registerHelper,
      registerAsyncHelper: _helpers.registerAsyncHelper,
      unregisterHelper: _helpers.unregisterHelper,
      onInjectHelpers: _on_inject_helpers.onInjectHelpers,
      Promise: _promise.default,
      promise: _promise.promise,
      resolve: _promise.resolve,
      registerWaiter: _waiters.registerWaiter,
      unregisterWaiter: _waiters.unregisterWaiter,
      checkWaiters: _waiters.checkWaiters,
    };
    /**
   Used to allow ember-testing to communicate with a specific testing
   framework.
  
   You can manually set it before calling `App.setupForTesting()`.
  
   Example:
  
   ```javascript
   Ember.Test.adapter = MyCustomAdapter.create()
   ```
  
   If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.
  
   @public
   @for Ember.Test
   @property adapter
   @type {Class} The adapter to be used.
   @default Ember.Test.QUnitAdapter
  */

    Object.defineProperty(Test, 'adapter', {
      get: _adapter.getAdapter,
      set: _adapter.setAdapter,
    });
    var _default = Test;
    _exports.default = _default;
  });
  define('ember-testing/lib/test/adapter', [
    'exports',
    '@ember/-internals/error-handling',
  ], function (_exports, _errorHandling) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.asyncEnd = asyncEnd;
    _exports.asyncStart = asyncStart;
    _exports.getAdapter = getAdapter;
    _exports.setAdapter = setAdapter;
    var adapter;

    function getAdapter() {
      return adapter;
    }

    function setAdapter(value) {
      adapter = value;

      if (value && typeof value.exception === 'function') {
        (0, _errorHandling.setDispatchOverride)(adapterDispatch);
      } else {
        (0, _errorHandling.setDispatchOverride)(null);
      }
    }

    function asyncStart() {
      if (adapter) {
        adapter.asyncStart();
      }
    }

    function asyncEnd() {
      if (adapter) {
        adapter.asyncEnd();
      }
    }

    function adapterDispatch(error) {
      adapter.exception(error); // @ts-expect-error Normally unreachable

      console.error(error.stack); // eslint-disable-line no-console
    }
  });
  define('ember-testing/lib/test/helpers', [
    'exports',
    'ember-testing/lib/test/promise',
  ], function (_exports, _promise) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.helpers = void 0;
    _exports.registerAsyncHelper = registerAsyncHelper;
    _exports.registerHelper = registerHelper;
    _exports.unregisterHelper = unregisterHelper;
    var helpers = {};
    /**
   @module @ember/test
  */

    /**
    `registerHelper` is used to register a test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    This helper can later be called without arguments because it will be
    called with `app` as the first parameter.
  
    ```javascript
    import Application from '@ember/application';
  
    App = Application.create();
    App.injectTestHelpers();
    boot();
    ```
  
    @public
    @for @ember/test
    @static
    @method registerHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @param options {Object}
  */

    _exports.helpers = helpers;

    function registerHelper(name, helperMethod) {
      helpers[name] = {
        method: helperMethod,
        meta: {
          wait: false,
        },
      };
    }
    /**
    `registerAsyncHelper` is used to register an async test helper that will be injected
    when `App.injectTestHelpers` is called.
  
    The helper method will always be called with the current Application as
    the first parameter.
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
    import { run } from '@ember/runloop';
  
    registerAsyncHelper('boot', function(app) {
      run(app, app.advanceReadiness);
    });
    ```
  
    The advantage of an async helper is that it will not run
    until the last async helper has completed.  All async helpers
    after it will wait for it complete before running.
  
  
    For example:
  
    ```javascript
    import { registerAsyncHelper } from '@ember/test';
  
    registerAsyncHelper('deletePost', function(app, postId) {
      click('.delete-' + postId);
    });
  
    // ... in your test
    visit('/post/2');
    deletePost(2);
    visit('/post/3');
    deletePost(3);
    ```
  
    @public
    @for @ember/test
    @method registerAsyncHelper
    @param {String} name The name of the helper method to add.
    @param {Function} helperMethod
    @since 1.2.0
  */

    function registerAsyncHelper(name, helperMethod) {
      helpers[name] = {
        method: helperMethod,
        meta: {
          wait: true,
        },
      };
    }
    /**
    Remove a previously added helper method.
  
    Example:
  
    ```javascript
    import { unregisterHelper } from '@ember/test';
  
    unregisterHelper('wait');
    ```
  
    @public
    @method unregisterHelper
    @static
    @for @ember/test
    @param {String} name The helper to remove.
  */

    function unregisterHelper(name) {
      delete helpers[name]; // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here
      // it won't error.

      delete _promise.default.prototype[name];
    }
  });
  define('ember-testing/lib/test/on_inject_helpers', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.callbacks = void 0;
    _exports.invokeInjectHelpersCallbacks = invokeInjectHelpersCallbacks;
    _exports.onInjectHelpers = onInjectHelpers;
    var callbacks = [];
    /**
    Used to register callbacks to be fired whenever `App.injectTestHelpers`
    is called.
  
    The callback will receive the current application as an argument.
  
    Example:
  
    ```javascript
    import $ from 'jquery';
  
    Ember.Test.onInjectHelpers(function() {
      $(document).ajaxSend(function() {
        Test.pendingRequests++;
      });
  
      $(document).ajaxComplete(function() {
        Test.pendingRequests--;
      });
    });
    ```
  
    @public
    @for Ember.Test
    @method onInjectHelpers
    @param {Function} callback The function to be called.
  */

    _exports.callbacks = callbacks;

    function onInjectHelpers(callback) {
      callbacks.push(callback);
    }

    function invokeInjectHelpersCallbacks(app) {
      for (var callback of callbacks) {
        callback(app);
      }
    }
  });
  define('ember-testing/lib/test/pending_requests', ['exports'], function (
    _exports,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.clearPendingRequests = clearPendingRequests;
    _exports.decrementPendingRequests = decrementPendingRequests;
    _exports.incrementPendingRequests = incrementPendingRequests;
    _exports.pendingRequests = pendingRequests;
    var requests = [];

    function pendingRequests() {
      return requests.length;
    }

    function clearPendingRequests() {
      requests.length = 0;
    }

    function incrementPendingRequests(_, xhr) {
      requests.push(xhr);
    }

    function decrementPendingRequests(_, xhr) {
      setTimeout(function () {
        for (var i = 0; i < requests.length; i++) {
          if (xhr === requests[i]) {
            requests.splice(i, 1);
            break;
          }
        }
      }, 0);
    }
  });
  define('ember-testing/lib/test/promise', [
    'exports',
    '@ember/-internals/runtime',
    'ember-testing/lib/test/run',
  ], function (_exports, _runtime, _run) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    _exports.getLastPromise = getLastPromise;
    _exports.promise = promise;
    _exports.resolve = resolve;
    var lastPromise = null;

    class TestPromise extends _runtime.RSVP.Promise {
      constructor(executor, label) {
        super(executor, label);
        lastPromise = this;
      }

      then(onFulfilled, onRejected, label) {
        var normalizedOnFulfilled =
          typeof onFulfilled === 'function'
            ? (result) => isolate(onFulfilled, result)
            : undefined;
        return super.then(normalizedOnFulfilled, onRejected, label);
      }
    }
    /**
    This returns a thenable tailored for testing.  It catches failed
    `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
    callback in the last chained then.
  
    This method should be returned by async helpers such as `wait`.
  
    @public
    @for Ember.Test
    @method promise
    @param {Function} resolver The function used to resolve the promise.
    @param {String} label An optional string for identifying the promise.
  */

    _exports.default = TestPromise;

    function promise(resolver, label) {
      var fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;
      return new TestPromise(resolver, fullLabel);
    }
    /**
    Replacement for `Ember.RSVP.resolve`
    The only difference is this uses
    an instance of `Ember.Test.Promise`
  
    @public
    @for Ember.Test
    @method resolve
    @param {Mixed} The value to resolve
    @since 1.2.0
  */

    function resolve(result, label) {
      return TestPromise.resolve(result, label);
    }

    function getLastPromise() {
      return lastPromise;
    } // This method isolates nested async methods
    // so that they don't conflict with other last promises.
    //
    // 1. Set `Ember.Test.lastPromise` to null
    // 2. Invoke method
    // 3. Return the last promise created during method

    function isolate(onFulfilled, result) {
      // Reset lastPromise for nested helpers
      lastPromise = null;
      var value = onFulfilled(result);
      var promise = lastPromise;
      lastPromise = null; // If the method returned a promise
      // return that promise. If not,
      // return the last async helper's promise

      if ((value && value instanceof TestPromise) || !promise) {
        return value;
      } else {
        return (0, _run.default)(() => resolve(promise).then(() => value));
      }
    }
  });
  define('ember-testing/lib/test/run', ['exports', '@ember/runloop'], function (
    _exports,
    _runloop,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = run;

    function run(fn) {
      if (!(0, _runloop._getCurrentRunLoop)()) {
        return (0, _runloop.run)(fn);
      } else {
        return fn();
      }
    }
  });
  define('ember-testing/lib/test/waiters', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.checkWaiters = checkWaiters;
    _exports.registerWaiter = registerWaiter;
    _exports.unregisterWaiter = unregisterWaiter;

    /**
   @module @ember/test
  */
    var contexts = [];
    var callbacks = [];

    function registerWaiter() {
      var checkedCallback;
      var checkedContext;

      if (arguments.length === 1) {
        checkedContext = null;
        checkedCallback = arguments.length <= 0 ? undefined : arguments[0];
      } else {
        checkedContext = arguments.length <= 0 ? undefined : arguments[0];
        checkedCallback = arguments.length <= 1 ? undefined : arguments[1];
      }

      if (indexOf(checkedContext, checkedCallback) > -1) {
        return;
      }

      contexts.push(checkedContext);
      callbacks.push(checkedCallback);
    }
    /**
     `unregisterWaiter` is used to unregister a callback that was
     registered with `registerWaiter`.
  
     @public
     @for @ember/test
     @static
     @method unregisterWaiter
     @param {Object} context (optional)
     @param {Function} callback
     @since 1.2.0
  */

    function unregisterWaiter(context, callback) {
      if (!callbacks.length) {
        return;
      }

      if (arguments.length === 1) {
        callback = context;
        context = null;
      }

      var i = indexOf(context, callback);

      if (i === -1) {
        return;
      }

      contexts.splice(i, 1);
      callbacks.splice(i, 1);
    }
    /**
    Iterates through each registered test waiter, and invokes
    its callback. If any waiter returns false, this method will return
    true indicating that the waiters have not settled yet.
  
    This is generally used internally from the acceptance/integration test
    infrastructure.
  
    @public
    @for @ember/test
    @static
    @method checkWaiters
  */

    function checkWaiters() {
      if (!callbacks.length) {
        return false;
      }

      for (var i = 0; i < callbacks.length; i++) {
        var context = contexts[i];
        var callback = callbacks[i]; // SAFETY: The loop ensures that this exists

        if (!callback.call(context)) {
          return true;
        }
      }

      return false;
    }

    function indexOf(context, callback) {
      for (var i = 0; i < callbacks.length; i++) {
        if (callbacks[i] === callback && contexts[i] === context) {
          return i;
        }
      }

      return -1;
    }
  });
  define('ember/index', [
    'exports',
    'require',
    '@ember/-internals/environment',
    '@ember/-internals/utils',
    '@ember/-internals/container',
    '@ember/instrumentation',
    '@ember/-internals/meta',
    '@ember/-internals/metal',
    '@ember/canary-features',
    '@ember/debug',
    'backburner',
    '@ember/controller',
    '@ember/controller/lib/controller_mixin',
    '@ember/string',
    '@ember/service',
    '@ember/object',
    '@ember/object/compat',
    '@ember/-internals/runtime',
    '@ember/-internals/glimmer',
    'ember/version',
    '@ember/-internals/views',
    '@ember/-internals/routing',
    '@ember/-internals/extension-support',
    '@ember/error',
    '@ember/runloop',
    '@ember/-internals/error-handling',
    '@ember/-internals/owner',
    '@ember/application',
    '@ember/application/instance',
    '@ember/engine',
    '@ember/engine/instance',
    '@ember/polyfills',
    '@glimmer/runtime',
    '@glimmer/manager',
    '@ember/destroyable',
  ], function (
    _exports,
    _require,
    _environment,
    utils,
    _container,
    instrumentation,
    _meta,
    metal,
    _canaryFeatures,
    EmberDebug,
    _backburner,
    _controller,
    _controller_mixin,
    _string,
    _service,
    _object,
    _compat,
    _runtime,
    _glimmer,
    _version,
    views,
    routing,
    extensionSupport,
    _error,
    _runloop,
    _errorHandling,
    _owner,
    _application,
    _instance,
    _engine,
    _instance2,
    _polyfills,
    _runtime2,
    _manager,
    _destroyable,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    // ****@ember/-internals/environment****
    var Ember = {};
    Ember.isNamespace = true;

    Ember.toString = function () {
      return 'Ember';
    };

    Object.defineProperty(Ember, 'ENV', {
      get: _environment.getENV,
      enumerable: false,
    });
    Object.defineProperty(Ember, 'lookup', {
      get: _environment.getLookup,
      set: _environment.setLookup,
      enumerable: false,
    }); // ****@ember/application****

    Ember.getOwner = _owner.getOwner;
    Ember.setOwner = _owner.setOwner;
    Ember.Application = _application.default;
    Ember.ApplicationInstance = _instance.default; // ****@ember/engine****

    Ember.Engine = _engine.default;
    Ember.EngineInstance = _instance2.default; // ****@ember/polyfills****

    Ember.assign = _polyfills.assign; // ****@ember/-internals/utils****

    Ember.generateGuid = utils.generateGuid;
    Ember.GUID_KEY = utils.GUID_KEY;
    Ember.guidFor = utils.guidFor;
    Ember.inspect = utils.inspect;
    Ember.makeArray = utils.makeArray;
    Ember.canInvoke = utils.canInvoke;
    Ember.wrap = utils.wrap;
    Ember.uuid = utils.uuid; // ****@ember/-internals/container****

    Ember.Container = _container.Container;
    Ember.Registry = _container.Registry; // ****@ember/debug****

    Ember.assert = EmberDebug.assert;
    Ember.warn = EmberDebug.warn;
    Ember.debug = EmberDebug.debug;
    Ember.deprecate = EmberDebug.deprecate;
    Ember.deprecateFunc = EmberDebug.deprecateFunc;
    Ember.runInDebug = EmberDebug.runInDebug; // ****@ember/error****

    Ember.Error = _error.default;
    /**
    @public
    @class Ember.Debug
  */

    Ember.Debug = {
      registerDeprecationHandler: EmberDebug.registerDeprecationHandler,
      registerWarnHandler: EmberDebug.registerWarnHandler,
      isComputed: metal.isComputed,
    }; // ****@ember/instrumentation****

    Ember.instrument = instrumentation.instrument;
    Ember.subscribe = instrumentation.subscribe;
    Ember.Instrumentation = {
      instrument: instrumentation.instrument,
      subscribe: instrumentation.subscribe,
      unsubscribe: instrumentation.unsubscribe,
      reset: instrumentation.reset,
    }; // ****@ember/runloop****

    Ember.run = _runloop.run; // ****@ember/-internals/metal****
    // in globals builds

    Ember.computed = _object.computed;
    Ember._descriptor = metal.nativeDescDecorator;
    Ember._tracked = metal.tracked;
    Ember.cacheFor = metal.getCachedValueFor;
    Ember.ComputedProperty = metal.ComputedProperty;
    Ember._setClassicDecorator = metal.setClassicDecorator;
    Ember.meta = _meta.meta;
    Ember.get = metal.get;
    Ember._getPath = metal._getPath;
    Ember.set = metal.set;
    Ember.trySet = metal.trySet;
    Ember.FEATURES = Object.assign(
      {
        isEnabled: _canaryFeatures.isEnabled,
      },
      _canaryFeatures.FEATURES,
    );
    Ember._Cache = utils.Cache;
    Ember.on = metal.on;
    Ember.addListener = metal.addListener;
    Ember.removeListener = metal.removeListener;
    Ember.sendEvent = metal.sendEvent;
    Ember.hasListeners = metal.hasListeners;
    Ember.isNone = metal.isNone;
    Ember.isEmpty = metal.isEmpty;
    Ember.isBlank = metal.isBlank;
    Ember.isPresent = metal.isPresent;
    Ember.notifyPropertyChange = metal.notifyPropertyChange;
    Ember.beginPropertyChanges = metal.beginPropertyChanges;
    Ember.endPropertyChanges = metal.endPropertyChanges;
    Ember.changeProperties = metal.changeProperties;
    Ember.platform = {
      defineProperty: true,
      hasPropertyAccessors: true,
    };
    Ember.defineProperty = metal.defineProperty;
    Ember.destroy = _destroyable.destroy;
    Ember.libraries = metal.libraries;
    Ember.getProperties = metal.getProperties;
    Ember.setProperties = metal.setProperties;
    Ember.expandProperties = metal.expandProperties;
    Ember.addObserver = metal.addObserver;
    Ember.removeObserver = metal.removeObserver;
    Ember.observer = metal.observer;
    Ember.mixin = metal.mixin;
    Ember.Mixin = metal.Mixin;
    Ember._createCache = metal.createCache;
    Ember._cacheGetValue = metal.getValue;
    Ember._cacheIsConst = metal.isConst;
    Ember._registerDestructor = _destroyable.registerDestructor;
    Ember._unregisterDestructor = _destroyable.unregisterDestructor;
    Ember._associateDestroyableChild = _destroyable.associateDestroyableChild;
    Ember._assertDestroyablesDestroyed =
      _destroyable.assertDestroyablesDestroyed;
    Ember._enableDestroyableTracking = _destroyable.enableDestroyableTracking;
    Ember._isDestroying = _destroyable.isDestroying;
    Ember._isDestroyed = _destroyable.isDestroyed;
    /**
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.
  
    ```javascript
  
    Ember.onerror = function(error) {
      const payload = {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      };
  
      fetch('/report-error', {
        method: 'POST',
        body: JSON.stringify(payload)
      });
    };
    ```
  
    Internally, `Ember.onerror` is used as Backburner's error handler.
  
    @event onerror
    @for Ember
    @param {Exception} error the error object
    @public
  */

    Object.defineProperty(Ember, 'onerror', {
      get: _errorHandling.getOnerror,
      set: _errorHandling.setOnerror,
      enumerable: false,
    });
    Object.defineProperty(Ember, 'testing', {
      get: EmberDebug.isTesting,
      set: EmberDebug.setTesting,
      enumerable: false,
    });
    Ember._Backburner = _backburner.default; // ****@ember/-internals/runtime****

    Ember.A = _runtime.A;
    Ember.String = {
      loc: _string.loc,
      w: _string.w,
      dasherize: _string.dasherize,
      decamelize: _string.decamelize,
      camelize: _string.camelize,
      classify: _string.classify,
      underscore: _string.underscore,
      capitalize: _string.capitalize,
    };
    Ember.Object = _runtime.Object;
    Ember._RegistryProxyMixin = _runtime.RegistryProxyMixin;
    Ember._ContainerProxyMixin = _runtime.ContainerProxyMixin;
    Ember.compare = _runtime.compare;
    Ember.isEqual = _runtime.isEqual;
    /**
  @module ember
  */

    /**
    Namespace for injection helper methods.
  
    @class inject
    @namespace Ember
    @static
    @public
  */

    Ember.inject = function inject() {
      true &&
        !false &&
        (0, EmberDebug.assert)(
          `Injected properties must be created through helpers, see '${Object.keys(
            inject,
          )
            .map((k) => `'inject.${k}'`)
            .join(' or ')}'`,
        );
    };

    Ember.inject.service = _service.service;
    Ember.inject.controller = _controller.inject;
    Ember.Array = _runtime.Array;
    Ember.Comparable = _runtime.Comparable;
    Ember.Enumerable = _runtime.Enumerable;
    Ember.ArrayProxy = _runtime.ArrayProxy;
    Ember.ObjectProxy = _runtime.ObjectProxy;
    Ember.ActionHandler = _runtime.ActionHandler;
    Ember.CoreObject = _runtime.CoreObject;
    Ember.NativeArray = _runtime.NativeArray;
    Ember.MutableEnumerable = _runtime.MutableEnumerable;
    Ember.MutableArray = _runtime.MutableArray;
    Ember.Evented = _runtime.Evented;
    Ember.PromiseProxyMixin = _runtime.PromiseProxyMixin;
    Ember.Observable = _runtime.Observable;
    Ember.typeOf = _runtime.typeOf;
    Ember.isArray = _runtime.isArray;
    Ember.Object = _runtime.Object;
    Ember.onLoad = _application.onLoad;
    Ember.runLoadHooks = _application.runLoadHooks;
    Ember.Controller = _controller.default;
    Ember.ControllerMixin = _controller_mixin.default;
    Ember.Service = _service.default;
    Ember._ProxyMixin = _runtime._ProxyMixin;
    Ember.RSVP = _runtime.RSVP;
    Ember.Namespace = _runtime.Namespace;
    Ember._action = _object.action;
    Ember._dependentKeyCompat = _compat.dependentKeyCompat;
    /**
    Defines the hash of localized strings for the current language. Used by
    the `String.loc` helper. To localize, add string values to this
    hash.
  
    @property STRINGS
    @for Ember
    @type Object
    @private
  */

    Object.defineProperty(Ember, 'STRINGS', {
      configurable: false,
      get: _string._getStrings,
      set: _string._setStrings,
    });
    /**
    Whether searching on the global for new Namespace instances is enabled.
  
    This is only exported here as to not break any addons.  Given the new
    visit API, you will have issues if you treat this as a indicator of
    booted.
  
    Internally this is only exposing a flag in Namespace.
  
    @property BOOTED
    @for Ember
    @type Boolean
    @private
  */

    Object.defineProperty(Ember, 'BOOTED', {
      configurable: false,
      enumerable: false,
      get: metal.isNamespaceSearchDisabled,
      set: metal.setNamespaceSearchDisabled,
    }); // ****@ember/-internals/glimmer****

    Ember.Component = _glimmer.Component;
    _glimmer.Helper.helper = _glimmer.helper;
    Ember.Helper = _glimmer.Helper;
    Ember._setComponentManager = _glimmer.setComponentManager;
    Ember._componentManagerCapabilities = _glimmer.componentCapabilities;
    Ember._setModifierManager = _manager.setModifierManager;
    Ember._modifierManagerCapabilities = _glimmer.modifierCapabilities;
    Ember._getComponentTemplate = _manager.getComponentTemplate;
    Ember._setComponentTemplate = _manager.setComponentTemplate;
    Ember._templateOnlyComponent = _runtime2.templateOnlyComponent;
    Ember._Input = _glimmer.Input;
    Ember._hash = _runtime2.hash;
    Ember._array = _runtime2.array;
    Ember._concat = _runtime2.concat;
    Ember._get = _runtime2.get;
    Ember._on = _runtime2.on;
    Ember._fn = _runtime2.fn;
    Ember._helperManagerCapabilities = _manager.helperCapabilities;
    Ember._setHelperManager = _manager.setHelperManager;
    Ember._invokeHelper = _runtime2.invokeHelper;
    Ember._captureRenderTree = EmberDebug.captureRenderTree;

    var deprecateImportFromString = function (name, message) {
      if (message === void 0) {
        message = `Importing ${name} from '@ember/string' is deprecated. Please import ${name} from '@ember/template' instead.`;
      }

      // Disabling this deprecation due to unintended errors in 3.25
      // See https://github.com/emberjs/ember.js/issues/19393 fo more information.
      true &&
        !true &&
        (0, EmberDebug.deprecate)(message, true, {
          id: 'ember-string.htmlsafe-ishtmlsafe',
          for: 'ember-source',
          since: {
            available: '3.25',
            enabled: '3.25',
          },
          until: '4.0.0',
          url:
            'https://deprecations.emberjs.com/v3.x/#toc_ember-string-htmlsafe-ishtmlsafe',
        });
    };

    Object.defineProperty(Ember.String, 'htmlSafe', {
      enumerable: true,
      configurable: true,

      get() {
        deprecateImportFromString('htmlSafe');
        return _glimmer.htmlSafe;
      },
    });
    Object.defineProperty(Ember.String, 'isHTMLSafe', {
      enumerable: true,
      configurable: true,

      get() {
        deprecateImportFromString('isHTMLSafe');
        return _glimmer.isHTMLSafe;
      },
    });
    /**
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
  
    @property TEMPLATES
    @for Ember
    @type Object
    @private
  */

    Object.defineProperty(Ember, 'TEMPLATES', {
      get: _glimmer.getTemplates,
      set: _glimmer.setTemplates,
      configurable: false,
      enumerable: false,
    });
    /**
    The semantic version
  
    @property VERSION
    @type String
    @public
  */

    Ember.VERSION = _version.default;
    Ember.ViewUtils = {
      isSimpleClick: views.isSimpleClick,
      getElementView: views.getElementView,
      getViewElement: views.getViewElement,
      getViewBounds: views.getViewBounds,
      getViewClientRects: views.getViewClientRects,
      getViewBoundingClientRect: views.getViewBoundingClientRect,
      getRootViews: views.getRootViews,
      getChildViews: views.getChildViews,
      isSerializationFirstNode: _glimmer.isSerializationFirstNode,
    };
    Ember.ComponentLookup = views.ComponentLookup;
    Ember.EventDispatcher = views.EventDispatcher; // ****@ember/-internals/routing****

    Ember.Location = routing.Location;
    Ember.AutoLocation = routing.AutoLocation;
    Ember.HashLocation = routing.HashLocation;
    Ember.HistoryLocation = routing.HistoryLocation;
    Ember.NoneLocation = routing.NoneLocation;
    Ember.controllerFor = routing.controllerFor;
    Ember.generateControllerFactory = routing.generateControllerFactory;
    Ember.generateController = routing.generateController;
    Ember.RouterDSL = routing.RouterDSL;
    Ember.Router = routing.Router;
    Ember.Route = routing.Route;
    (0, _application.runLoadHooks)('Ember.Application', _application.default);
    Ember.DataAdapter = extensionSupport.DataAdapter;
    Ember.ContainerDebugAdapter = extensionSupport.ContainerDebugAdapter;
    var EmberHandlebars = {
      template: _glimmer.template,
      Utils: {
        escapeExpression: _glimmer.escapeExpression,
      },
    };
    var EmberHTMLBars = {
      template: _glimmer.template,
    };

    function defineEmberTemplateCompilerLazyLoad(key) {
      Object.defineProperty(Ember, key, {
        configurable: true,
        enumerable: true,

        get() {
          if ((0, _require.has)('ember-template-compiler')) {
            var templateCompiler = (0, _require.default)(
              'ember-template-compiler',
            );
            EmberHTMLBars.precompile = EmberHandlebars.precompile =
              templateCompiler.precompile;
            EmberHTMLBars.compile = EmberHandlebars.compile =
              templateCompiler.compile;
            Object.defineProperty(Ember, 'HTMLBars', {
              configurable: true,
              writable: true,
              enumerable: true,
              value: EmberHTMLBars,
            });
            Object.defineProperty(Ember, 'Handlebars', {
              configurable: true,
              writable: true,
              enumerable: true,
              value: EmberHandlebars,
            });
          }

          return key === 'Handlebars' ? EmberHandlebars : EmberHTMLBars;
        },
      });
    }

    defineEmberTemplateCompilerLazyLoad('HTMLBars');
    defineEmberTemplateCompilerLazyLoad('Handlebars'); // do this to ensure that Ember.Test is defined properly on the global
    // if it is present.

    function defineEmberTestingLazyLoad(key) {
      Object.defineProperty(Ember, key, {
        configurable: true,
        enumerable: true,

        get() {
          if ((0, _require.has)('ember-testing')) {
            var testing = (0, _require.default)('ember-testing');
            var { Test, Adapter, QUnitAdapter, setupForTesting } = testing;
            Test.Adapter = Adapter;
            Test.QUnitAdapter = QUnitAdapter;
            Object.defineProperty(Ember, 'Test', {
              configurable: true,
              writable: true,
              enumerable: true,
              value: Test,
            });
            Object.defineProperty(Ember, 'setupForTesting', {
              configurable: true,
              writable: true,
              enumerable: true,
              value: setupForTesting,
            });
            return key === 'Test' ? Test : setupForTesting;
          }

          return undefined;
        },
      });
    }

    defineEmberTestingLazyLoad('Test');
    defineEmberTestingLazyLoad('setupForTesting');
    (0, _application.runLoadHooks)('Ember');
    Ember.__loader = {
      require: _require.default,
      // eslint-disable-next-line no-undef
      define,
      // eslint-disable-next-line no-undef
      registry:
        typeof requirejs !== 'undefined'
          ? requirejs.entries
          : _require.default.entries,
    };
    var _default = Ember;
    _exports.default = _default;
  });
  define('ember/version', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var _default = '4.6.0';
    _exports.default = _default;
  });
  define('route-recognizer', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = void 0;
    var createObject = Object.create;

    function createMap() {
      var map = createObject(null);
      map['__'] = undefined;
      delete map['__'];
      return map;
    }

    var Target = function Target(path, matcher, delegate) {
      this.path = path;
      this.matcher = matcher;
      this.delegate = delegate;
    };

    Target.prototype.to = function to(target, callback) {
      var delegate = this.delegate;

      if (delegate && delegate.willAddRoute) {
        target = delegate.willAddRoute(this.matcher.target, target);
      }

      this.matcher.add(this.path, target);

      if (callback) {
        if (callback.length === 0) {
          throw new Error(
            'You must have an argument in the function passed to `to`',
          );
        }

        this.matcher.addChild(this.path, target, callback, this.delegate);
      }
    };

    var Matcher = function Matcher(target) {
      this.routes = createMap();
      this.children = createMap();
      this.target = target;
    };

    Matcher.prototype.add = function add(path, target) {
      this.routes[path] = target;
    };

    Matcher.prototype.addChild = function addChild(
      path,
      target,
      callback,
      delegate,
    ) {
      var matcher = new Matcher(target);
      this.children[path] = matcher;
      var match = generateMatch(path, matcher, delegate);

      if (delegate && delegate.contextEntered) {
        delegate.contextEntered(target, match);
      }

      callback(match);
    };

    function generateMatch(startingPath, matcher, delegate) {
      function match(path, callback) {
        var fullPath = startingPath + path;

        if (callback) {
          callback(generateMatch(fullPath, matcher, delegate));
        } else {
          return new Target(fullPath, matcher, delegate);
        }
      }

      return match;
    }

    function addRoute(routeArray, path, handler) {
      var len = 0;

      for (var i = 0; i < routeArray.length; i++) {
        len += routeArray[i].path.length;
      }

      path = path.substr(len);
      var route = {
        path: path,
        handler: handler,
      };
      routeArray.push(route);
    }

    function eachRoute(baseRoute, matcher, callback, binding) {
      var routes = matcher.routes;
      var paths = Object.keys(routes);

      for (var i = 0; i < paths.length; i++) {
        var path = paths[i];
        var routeArray = baseRoute.slice();
        addRoute(routeArray, path, routes[path]);
        var nested = matcher.children[path];

        if (nested) {
          eachRoute(routeArray, nested, callback, binding);
        } else {
          callback.call(binding, routeArray);
        }
      }
    }

    var map = function (callback, addRouteCallback) {
      var matcher = new Matcher();
      callback(generateMatch('', matcher, this.delegate));
      eachRoute(
        [],
        matcher,
        function (routes) {
          if (addRouteCallback) {
            addRouteCallback(this, routes);
          } else {
            this.add(routes);
          }
        },
        this,
      );
    }; // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
    // values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
    // chars are "/" and "%".
    // Safe to call multiple times on the same path.
    // Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded

    function normalizePath(path) {
      return path.split('/').map(normalizeSegment).join('/');
    } // We want to ensure the characters "%" and "/" remain in percent-encoded
    // form when normalizing paths, so replace them with their encoded form after
    // decoding the rest of the path

    var SEGMENT_RESERVED_CHARS = /%|\//g;

    function normalizeSegment(segment) {
      if (segment.length < 3 || segment.indexOf('%') === -1) {
        return segment;
      }

      return decodeURIComponent(segment).replace(
        SEGMENT_RESERVED_CHARS,
        encodeURIComponent,
      );
    } // We do not want to encode these characters when generating dynamic path segments
    // See https://tools.ietf.org/html/rfc3986#section-3.3
    // sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
    // others allowed by RFC 3986: ":", "@"
    //
    // First encode the entire path segment, then decode any of the encoded special chars.
    //
    // The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
    // so the possible encoded chars are:
    // ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].

    var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;

    function encodePathSegment(str) {
      return encodeURIComponent(str).replace(
        PATH_SEGMENT_ENCODINGS,
        decodeURIComponent,
      );
    }

    var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
    var isArray = Array.isArray;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function getParam(params, key) {
      if (typeof params !== 'object' || params === null) {
        throw new Error(
          'You must pass an object as the second argument to `generate`.',
        );
      }

      if (!hasOwnProperty.call(params, key)) {
        throw new Error('You must provide param `' + key + '` to `generate`.');
      }

      var value = params[key];
      var str = typeof value === 'string' ? value : '' + value;

      if (str.length === 0) {
        throw new Error('You must provide a param `' + key + '`.');
      }

      return str;
    }

    var eachChar = [];

    eachChar[0] =
      /* Static */
      function (segment, currentState) {
        var state = currentState;
        var value = segment.value;

        for (var i = 0; i < value.length; i++) {
          var ch = value.charCodeAt(i);
          state = state.put(ch, false, false);
        }

        return state;
      };

    eachChar[1] =
      /* Dynamic */
      function (_, currentState) {
        return currentState.put(
          47,
          /* SLASH */
          true,
          true,
        );
      };

    eachChar[2] =
      /* Star */
      function (_, currentState) {
        return currentState.put(
          -1,
          /* ANY */
          false,
          true,
        );
      };

    eachChar[4] =
      /* Epsilon */
      function (_, currentState) {
        return currentState;
      };

    var regex = [];

    regex[0] =
      /* Static */
      function (segment) {
        return segment.value.replace(escapeRegex, '\\$1');
      };

    regex[1] =
      /* Dynamic */
      function () {
        return '([^/]+)';
      };

    regex[2] =
      /* Star */
      function () {
        return '(.+)';
      };

    regex[4] =
      /* Epsilon */
      function () {
        return '';
      };

    var generate = [];

    generate[0] =
      /* Static */
      function (segment) {
        return segment.value;
      };

    generate[1] =
      /* Dynamic */
      function (segment, params) {
        var value = getParam(params, segment.value);

        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
          return encodePathSegment(value);
        } else {
          return value;
        }
      };

    generate[2] =
      /* Star */
      function (segment, params) {
        return getParam(params, segment.value);
      };

    generate[4] =
      /* Epsilon */
      function () {
        return '';
      };

    var EmptyObject = Object.freeze({});
    var EmptyArray = Object.freeze([]); // The `names` will be populated with the paramter name for each dynamic/star
    // segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
    // segment, indicating whether it should be decoded during recognition.

    function parse(segments, route, types) {
      // normalize route as not starting with a "/". Recognition will
      // also normalize.
      if (
        route.length > 0 &&
        route.charCodeAt(0) === 47
        /* SLASH */
      ) {
        route = route.substr(1);
      }

      var parts = route.split('/');
      var names = undefined;
      var shouldDecodes = undefined;

      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        var flags = 0;
        var type = 0;

        if (part === '') {
          type = 4;
          /* Epsilon */
        } else if (
          part.charCodeAt(0) === 58
          /* COLON */
        ) {
          type = 1;
          /* Dynamic */
        } else if (
          part.charCodeAt(0) === 42
          /* STAR */
        ) {
          type = 2;
          /* Star */
        } else {
          type = 0;
          /* Static */
        }

        flags = 2 << type;

        if (
          flags & 12
          /* Named */
        ) {
          part = part.slice(1);
          names = names || [];
          names.push(part);
          shouldDecodes = shouldDecodes || [];
          shouldDecodes.push(
            (flags & 4) !==
              /* Decoded */
              0,
          );
        }

        if (
          flags & 14
          /* Counted */
        ) {
          types[type]++;
        }

        segments.push({
          type: type,
          value: normalizeSegment(part),
        });
      }

      return {
        names: names || EmptyArray,
        shouldDecodes: shouldDecodes || EmptyArray,
      };
    }

    function isEqualCharSpec(spec, char, negate) {
      return spec.char === char && spec.negate === negate;
    } // A State has a character specification and (`charSpec`) and a list of possible
    // subsequent states (`nextStates`).
    //
    // If a State is an accepting state, it will also have several additional
    // properties:
    //
    // * `regex`: A regular expression that is used to extract parameters from paths
    //   that reached this accepting state.
    // * `handlers`: Information on how to convert the list of captures into calls
    //   to registered handlers with the specified parameters
    // * `types`: How many static, dynamic or star segments in this route. Used to
    //   decide which route to use if multiple registered routes match a path.
    //
    // Currently, State is implemented naively by looping over `nextStates` and
    // comparing a character specification against a character. A more efficient
    // implementation would use a hash of keys pointing at one or more next states.

    var State = function State(states, id, char, negate, repeat) {
      this.states = states;
      this.id = id;
      this.char = char;
      this.negate = negate;
      this.nextStates = repeat ? id : null;
      this.pattern = '';
      this._regex = undefined;
      this.handlers = undefined;
      this.types = undefined;
    };

    State.prototype.regex = function regex$1() {
      if (!this._regex) {
        this._regex = new RegExp(this.pattern);
      }

      return this._regex;
    };

    State.prototype.get = function get(char, negate) {
      var this$1 = this;
      var nextStates = this.nextStates;

      if (nextStates === null) {
        return;
      }

      if (isArray(nextStates)) {
        for (var i = 0; i < nextStates.length; i++) {
          var child = this$1.states[nextStates[i]];

          if (isEqualCharSpec(child, char, negate)) {
            return child;
          }
        }
      } else {
        var child$1 = this.states[nextStates];

        if (isEqualCharSpec(child$1, char, negate)) {
          return child$1;
        }
      }
    };

    State.prototype.put = function put(char, negate, repeat) {
      var state; // If the character specification already exists in a child of the current
      // state, just return that state.

      if ((state = this.get(char, negate))) {
        return state;
      } // Make a new state for the character spec

      var states = this.states;
      state = new State(states, states.length, char, negate, repeat);
      states[states.length] = state; // Insert the new state as a child of the current state

      if (this.nextStates == null) {
        this.nextStates = state.id;
      } else if (isArray(this.nextStates)) {
        this.nextStates.push(state.id);
      } else {
        this.nextStates = [this.nextStates, state.id];
      } // Return the new state

      return state;
    }; // Find a list of child states matching the next character

    State.prototype.match = function match(ch) {
      var this$1 = this;
      var nextStates = this.nextStates;

      if (!nextStates) {
        return [];
      }

      var returned = [];

      if (isArray(nextStates)) {
        for (var i = 0; i < nextStates.length; i++) {
          var child = this$1.states[nextStates[i]];

          if (isMatch(child, ch)) {
            returned.push(child);
          }
        }
      } else {
        var child$1 = this.states[nextStates];

        if (isMatch(child$1, ch)) {
          returned.push(child$1);
        }
      }

      return returned;
    };

    function isMatch(spec, char) {
      return spec.negate
        ? spec.char !== char && spec.char !== -1
        : /* ANY */
          spec.char === char || spec.char === -1;
      /* ANY */
    } // This is a somewhat naive strategy, but should work in a lot of cases
    // A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
    //
    // This strategy generally prefers more static and less dynamic matching.
    // Specifically, it
    //
    //  * prefers fewer stars to more, then
    //  * prefers using stars for less of the match to more, then
    //  * prefers fewer dynamic segments to more, then
    //  * prefers more static segments to more

    function sortSolutions(states) {
      return states.sort(function (a, b) {
        var ref = a.types || [0, 0, 0];
        var astatics = ref[0];
        var adynamics = ref[1];
        var astars = ref[2];
        var ref$1 = b.types || [0, 0, 0];
        var bstatics = ref$1[0];
        var bdynamics = ref$1[1];
        var bstars = ref$1[2];

        if (astars !== bstars) {
          return astars - bstars;
        }

        if (astars) {
          if (astatics !== bstatics) {
            return bstatics - astatics;
          }

          if (adynamics !== bdynamics) {
            return bdynamics - adynamics;
          }
        }

        if (adynamics !== bdynamics) {
          return adynamics - bdynamics;
        }

        if (astatics !== bstatics) {
          return bstatics - astatics;
        }

        return 0;
      });
    }

    function recognizeChar(states, ch) {
      var nextStates = [];

      for (var i = 0, l = states.length; i < l; i++) {
        var state = states[i];
        nextStates = nextStates.concat(state.match(ch));
      }

      return nextStates;
    }

    var RecognizeResults = function RecognizeResults(queryParams) {
      this.length = 0;
      this.queryParams = queryParams || {};
    };

    RecognizeResults.prototype.splice = Array.prototype.splice;
    RecognizeResults.prototype.slice = Array.prototype.slice;
    RecognizeResults.prototype.push = Array.prototype.push;

    function findHandler(state, originalPath, queryParams) {
      var handlers = state.handlers;
      var regex = state.regex();

      if (!regex || !handlers) {
        throw new Error('state not initialized');
      }

      var captures = originalPath.match(regex);
      var currentCapture = 1;
      var result = new RecognizeResults(queryParams);
      result.length = handlers.length;

      for (var i = 0; i < handlers.length; i++) {
        var handler = handlers[i];
        var names = handler.names;
        var shouldDecodes = handler.shouldDecodes;
        var params = EmptyObject;
        var isDynamic = false;

        if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
          for (var j = 0; j < names.length; j++) {
            isDynamic = true;
            var name = names[j];
            var capture = captures && captures[currentCapture++];

            if (params === EmptyObject) {
              params = {};
            }

            if (
              RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS &&
              shouldDecodes[j]
            ) {
              params[name] = capture && decodeURIComponent(capture);
            } else {
              params[name] = capture;
            }
          }
        }

        result[i] = {
          handler: handler.handler,
          params: params,
          isDynamic: isDynamic,
        };
      }

      return result;
    }

    function decodeQueryParamPart(part) {
      // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
      part = part.replace(/\+/gm, '%20');
      var result;

      try {
        result = decodeURIComponent(part);
      } catch (error) {
        result = '';
      }

      return result;
    }

    var RouteRecognizer = function RouteRecognizer() {
      this.names = createMap();
      var states = [];
      var state = new State(
        states,
        0,
        -1,
        /* ANY */
        true,
        false,
      );
      states[0] = state;
      this.states = states;
      this.rootState = state;
    };

    RouteRecognizer.prototype.add = function add(routes, options) {
      var currentState = this.rootState;
      var pattern = '^';
      var types = [0, 0, 0];
      var handlers = new Array(routes.length);
      var allSegments = [];
      var isEmpty = true;
      var j = 0;

      for (var i = 0; i < routes.length; i++) {
        var route = routes[i];
        var ref = parse(allSegments, route.path, types);
        var names = ref.names;
        var shouldDecodes = ref.shouldDecodes; // preserve j so it points to the start of newly added segments

        for (; j < allSegments.length; j++) {
          var segment = allSegments[j];

          if (
            segment.type === 4
            /* Epsilon */
          ) {
            continue;
          }

          isEmpty = false; // Add a "/" for the new segment

          currentState = currentState.put(
            47,
            /* SLASH */
            false,
            false,
          );
          pattern += '/'; // Add a representation of the segment to the NFA and regex

          currentState = eachChar[segment.type](segment, currentState);
          pattern += regex[segment.type](segment);
        }

        handlers[i] = {
          handler: route.handler,
          names: names,
          shouldDecodes: shouldDecodes,
        };
      }

      if (isEmpty) {
        currentState = currentState.put(
          47,
          /* SLASH */
          false,
          false,
        );
        pattern += '/';
      }

      currentState.handlers = handlers;
      currentState.pattern = pattern + '$';
      currentState.types = types;
      var name;

      if (typeof options === 'object' && options !== null && options.as) {
        name = options.as;
      }

      if (name) {
        // if (this.names[name]) {
        //   throw new Error("You may not add a duplicate route named `" + name + "`.");
        // }
        this.names[name] = {
          segments: allSegments,
          handlers: handlers,
        };
      }
    };

    RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
      var route = this.names[name];

      if (!route) {
        throw new Error('There is no route named ' + name);
      }

      var result = new Array(route.handlers.length);

      for (var i = 0; i < route.handlers.length; i++) {
        var handler = route.handlers[i];
        result[i] = handler;
      }

      return result;
    };

    RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
      return !!this.names[name];
    };

    RouteRecognizer.prototype.generate = function generate$1(name, params) {
      var route = this.names[name];
      var output = '';

      if (!route) {
        throw new Error('There is no route named ' + name);
      }

      var segments = route.segments;

      for (var i = 0; i < segments.length; i++) {
        var segment = segments[i];

        if (
          segment.type === 4
          /* Epsilon */
        ) {
          continue;
        }

        output += '/';
        output += generate[segment.type](segment, params);
      }

      if (output.charAt(0) !== '/') {
        output = '/' + output;
      }

      if (params && params.queryParams) {
        output += this.generateQueryString(params.queryParams);
      }

      return output;
    };

    RouteRecognizer.prototype.generateQueryString = function generateQueryString(
      params,
    ) {
      var pairs = [];
      var keys = Object.keys(params);
      keys.sort();

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = params[key];

        if (value == null) {
          continue;
        }

        var pair = encodeURIComponent(key);

        if (isArray(value)) {
          for (var j = 0; j < value.length; j++) {
            var arrayPair = key + '[]' + '=' + encodeURIComponent(value[j]);
            pairs.push(arrayPair);
          }
        } else {
          pair += '=' + encodeURIComponent(value);
          pairs.push(pair);
        }
      }

      if (pairs.length === 0) {
        return '';
      }

      return '?' + pairs.join('&');
    };

    RouteRecognizer.prototype.parseQueryString = function parseQueryString(
      queryString,
    ) {
      var pairs = queryString.split('&');
      var queryParams = {};

      for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split('='),
          key = decodeQueryParamPart(pair[0]),
          keyLength = key.length,
          isArray = false,
          value = void 0;

        if (pair.length === 1) {
          value = 'true';
        } else {
          // Handle arrays
          if (keyLength > 2 && key.slice(keyLength - 2) === '[]') {
            isArray = true;
            key = key.slice(0, keyLength - 2);

            if (!queryParams[key]) {
              queryParams[key] = [];
            }
          }

          value = pair[1] ? decodeQueryParamPart(pair[1]) : '';
        }

        if (isArray) {
          queryParams[key].push(value);
        } else {
          queryParams[key] = value;
        }
      }

      return queryParams;
    };

    RouteRecognizer.prototype.recognize = function recognize(path) {
      var results;
      var states = [this.rootState];
      var queryParams = {};
      var isSlashDropped = false;
      var hashStart = path.indexOf('#');

      if (hashStart !== -1) {
        path = path.substr(0, hashStart);
      }

      var queryStart = path.indexOf('?');

      if (queryStart !== -1) {
        var queryString = path.substr(queryStart + 1, path.length);
        path = path.substr(0, queryStart);
        queryParams = this.parseQueryString(queryString);
      }

      if (path.charAt(0) !== '/') {
        path = '/' + path;
      }

      var originalPath = path;

      if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
        path = normalizePath(path);
      } else {
        path = decodeURI(path);
        originalPath = decodeURI(originalPath);
      }

      var pathLen = path.length;

      if (pathLen > 1 && path.charAt(pathLen - 1) === '/') {
        path = path.substr(0, pathLen - 1);
        originalPath = originalPath.substr(0, originalPath.length - 1);
        isSlashDropped = true;
      }

      for (var i = 0; i < path.length; i++) {
        states = recognizeChar(states, path.charCodeAt(i));

        if (!states.length) {
          break;
        }
      }

      var solutions = [];

      for (var i$1 = 0; i$1 < states.length; i$1++) {
        if (states[i$1].handlers) {
          solutions.push(states[i$1]);
        }
      }

      states = sortSolutions(solutions);
      var state = solutions[0];

      if (state && state.handlers) {
        // if a trailing slash was dropped and a star segment is the last segment
        // specified, put the trailing slash back
        if (
          isSlashDropped &&
          state.pattern &&
          state.pattern.slice(-5) === '(.+)$'
        ) {
          originalPath = originalPath + '/';
        }

        results = findHandler(state, originalPath, queryParams);
      }

      return results;
    };

    RouteRecognizer.VERSION = '0.3.4'; // Set to false to opt-out of encoding and decoding path segments.
    // See https://github.com/tildeio/route-recognizer/pull/55

    RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
    RouteRecognizer.Normalizer = {
      normalizeSegment: normalizeSegment,
      normalizePath: normalizePath,
      encodePathSegment: encodePathSegment,
    };
    RouteRecognizer.prototype.map = map;
    var _default = RouteRecognizer;
    _exports.default = _default;
  });
  define('router_js', ['exports', 'rsvp', 'route-recognizer'], function (
    _exports,
    _rsvp,
    _routeRecognizer,
  ) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.default = _exports.TransitionState = _exports.TransitionError = _exports.STATE_SYMBOL = _exports.QUERY_PARAMS_SYMBOL = _exports.PARAMS_SYMBOL = _exports.InternalTransition = _exports.InternalRouteInfo = void 0;
    _exports.logAbort = logAbort;

    function buildTransitionAborted() {
      var error = new Error('TransitionAborted');
      error.name = 'TransitionAborted';
      error.code = 'TRANSITION_ABORTED';
      return error;
    }

    function isTransitionAborted(maybeError) {
      return (
        typeof maybeError === 'object' &&
        maybeError !== null &&
        maybeError.code === 'TRANSITION_ABORTED'
      );
    }

    function isAbortable(maybeAbortable) {
      return (
        typeof maybeAbortable === 'object' &&
        maybeAbortable !== null &&
        typeof maybeAbortable.isAborted === 'boolean'
      );
    }

    function throwIfAborted(maybe) {
      if (isAbortable(maybe) && maybe.isAborted) {
        throw buildTransitionAborted();
      }
    }

    var slice = Array.prototype.slice;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /**
    Determines if an object is Promise by checking if it is "thenable".
  **/

    function isPromise(p) {
      return (
        p !== null && typeof p === 'object' && typeof p.then === 'function'
      );
    }

    function merge(hash, other) {
      for (var prop in other) {
        if (hasOwnProperty.call(other, prop)) {
          hash[prop] = other[prop];
        }
      }
    }
    /**
    @private
  
    Extracts query params from the end of an array
  **/

    function extractQueryParams(array) {
      var len = array && array.length,
        head,
        queryParams;

      if (len && len > 0) {
        var obj = array[len - 1];

        if (isQueryParamsContainer(obj)) {
          queryParams = obj.queryParams;
          head = slice.call(array, 0, len - 1);
          return [head, queryParams];
        }
      } // SAFETY: We confirmed that the last item isn't a QP container

      return [array, null];
    } // TODO: Actually check that Dict is QueryParams

    function isQueryParamsContainer(obj) {
      if (obj && typeof obj === 'object') {
        var cast = obj;
        return (
          'queryParams' in cast &&
          Object.keys(cast.queryParams).every((k) => typeof k === 'string')
        );
      }

      return false;
    }
    /**
    @private
  
    Coerces query param properties and array elements into strings.
  **/

    function coerceQueryParamsToString(queryParams) {
      for (var key in queryParams) {
        var val = queryParams[key];

        if (typeof val === 'number') {
          queryParams[key] = '' + val;
        } else if (Array.isArray(val)) {
          for (var i = 0, l = val.length; i < l; i++) {
            val[i] = '' + val[i];
          }
        }
      }
    }
    /**
    @private
   */

    function log(router) {
      if (!router.log) {
        return;
      }

      for (
        var _len = arguments.length,
          args = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        args[_key - 1] = arguments[_key];
      }

      if (args.length === 2) {
        var [sequence, msg] = args;
        router.log('Transition #' + sequence + ': ' + msg);
      } else {
        var [_msg] = args;
        router.log(_msg);
      }
    }

    function isParam(object) {
      return (
        typeof object === 'string' ||
        object instanceof String ||
        typeof object === 'number' ||
        object instanceof Number
      );
    }

    function forEach(array, callback) {
      for (
        var i = 0, l = array.length;
        i < l && callback(array[i]) !== false;
        i++
      ) {
        // empty intentionally
      }
    }

    function getChangelist(oldObject, newObject) {
      var key;
      var results = {
        all: {},
        changed: {},
        removed: {},
      };
      merge(results.all, newObject);
      var didChange = false;
      coerceQueryParamsToString(oldObject);
      coerceQueryParamsToString(newObject); // Calculate removals

      for (key in oldObject) {
        if (hasOwnProperty.call(oldObject, key)) {
          if (!hasOwnProperty.call(newObject, key)) {
            didChange = true;
            results.removed[key] = oldObject[key];
          }
        }
      } // Calculate changes

      for (key in newObject) {
        if (hasOwnProperty.call(newObject, key)) {
          var oldElement = oldObject[key];
          var newElement = newObject[key];

          if (isArray(oldElement) && isArray(newElement)) {
            if (oldElement.length !== newElement.length) {
              results.changed[key] = newObject[key];
              didChange = true;
            } else {
              for (var i = 0, l = oldElement.length; i < l; i++) {
                if (oldElement[i] !== newElement[i]) {
                  results.changed[key] = newObject[key];
                  didChange = true;
                }
              }
            }
          } else if (oldObject[key] !== newObject[key]) {
            results.changed[key] = newObject[key];
            didChange = true;
          }
        }
      }

      return didChange ? results : undefined;
    }

    function isArray(obj) {
      return Array.isArray(obj);
    }

    function promiseLabel(label) {
      return 'Router: ' + label;
    }

    var STATE_SYMBOL = `__STATE__-2619860001345920-3322w3`;
    _exports.STATE_SYMBOL = STATE_SYMBOL;
    var PARAMS_SYMBOL = `__PARAMS__-261986232992830203-23323`;
    _exports.PARAMS_SYMBOL = PARAMS_SYMBOL;
    var QUERY_PARAMS_SYMBOL = `__QPS__-2619863929824844-32323`;
    /**
    A Transition is a thenable (a promise-like object) that represents
    an attempt to transition to another route. It can be aborted, either
    explicitly via `abort` or by attempting another transition while a
    previous one is still underway. An aborted transition can also
    be `retry()`d later.
  
    @class Transition
    @constructor
    @param {Object} router
    @param {Object} intent
    @param {Object} state
    @param {Object} error
    @private
   */

    _exports.QUERY_PARAMS_SYMBOL = QUERY_PARAMS_SYMBOL;

    class Transition {
      constructor(router, intent, state, error, previousTransition) {
        if (error === void 0) {
          error = undefined;
        }

        if (previousTransition === void 0) {
          previousTransition = undefined;
        }

        this.from = null;
        this.to = undefined;
        this.isAborted = false;
        this.isActive = true;
        this.urlMethod = 'update';
        this.resolveIndex = 0;
        this.queryParamsOnly = false;
        this.isTransition = true;
        this.isCausedByAbortingTransition = false;
        this.isCausedByInitialTransition = false;
        this.isCausedByAbortingReplaceTransition = false;
        this._visibleQueryParams = {};
        this.isIntermediate = false;
        this[STATE_SYMBOL] = state || router.state;
        this.intent = intent;
        this.router = router;
        this.data = (intent && intent.data) || {};
        this.resolvedModels = {};
        this[QUERY_PARAMS_SYMBOL] = {};
        this.promise = undefined;
        this.error = undefined;
        this[PARAMS_SYMBOL] = {};
        this.routeInfos = [];
        this.targetName = undefined;
        this.pivotHandler = undefined;
        this.sequence = -1;

        if (
          true
          /* DEBUG */
        ) {
          var _error = new Error(`Transition creation stack`);

          this.debugCreationStack = () => _error.stack; // not aborted yet, will be replaced when `this.isAborted` is set

          this.debugAbortStack = () => undefined;

          this.debugPreviousTransition = previousTransition;
        }

        if (error) {
          this.promise = _rsvp.Promise.reject(error);
          this.error = error;
          return;
        } // if you're doing multiple redirects, need the new transition to know if it
        // is actually part of the first transition or not. Any further redirects
        // in the initial transition also need to know if they are part of the
        // initial transition

        this.isCausedByAbortingTransition = !!previousTransition;
        this.isCausedByInitialTransition =
          !!previousTransition &&
          (previousTransition.isCausedByInitialTransition ||
            previousTransition.sequence === 0); // Every transition in the chain is a replace

        this.isCausedByAbortingReplaceTransition =
          !!previousTransition &&
          previousTransition.urlMethod === 'replace' &&
          (!previousTransition.isCausedByAbortingTransition ||
            previousTransition.isCausedByAbortingReplaceTransition);

        if (state) {
          this[PARAMS_SYMBOL] = state.params;
          this[QUERY_PARAMS_SYMBOL] = state.queryParams;
          this.routeInfos = state.routeInfos;
          var len = state.routeInfos.length;

          if (len) {
            this.targetName = state.routeInfos[len - 1].name;
          }

          for (var i = 0; i < len; ++i) {
            var handlerInfo = state.routeInfos[i]; // TODO: this all seems hacky

            if (!handlerInfo.isResolved) {
              break;
            }

            this.pivotHandler = handlerInfo.route;
          }

          this.sequence = router.currentSequence++;
          this.promise = state.resolve(this).catch((result) => {
            var error = this.router.transitionDidError(result, this);
            throw error;
          }, promiseLabel('Handle Abort'));
        } else {
          this.promise = _rsvp.Promise.resolve(this[STATE_SYMBOL]);
          this[PARAMS_SYMBOL] = {};
        }
      }
      /**
      The Transition's internal promise. Calling `.then` on this property
      is that same as calling `.then` on the Transition object itself, but
      this property is exposed for when you want to pass around a
      Transition's promise, but not the Transition object itself, since
      Transition object can be externally `abort`ed, while the promise
      cannot.
         @property promise
      @type {Object}
      @public
     */

      /**
      Custom state can be stored on a Transition's `data` object.
      This can be useful for decorating a Transition within an earlier
      hook and shared with a later hook. Properties set on `data` will
      be copied to new transitions generated by calling `retry` on this
      transition.
         @property data
      @type {Object}
      @public
     */

      /**
      A standard promise hook that resolves if the transition
      succeeds and rejects if it fails/redirects/aborts.
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */

      then(onFulfilled, onRejected, label) {
        return this.promise.then(onFulfilled, onRejected, label);
      }
      /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thennable,
      but not the Transition itself.
         @method catch
      @param {Function} onRejection
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */

      catch(onRejection, label) {
        return this.promise.catch(onRejection, label);
      }
      /**
         Forwards to the internal `promise` property which you can
      use in situations where you want to pass around a thenable,
      but not the Transition itself.
         @method finally
      @param {Function} callback
      @param {String} label optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
      @public
     */

      finally(callback, label) {
        return this.promise.finally(callback, label);
      }
      /**
      Aborts the Transition. Note you can also implicitly abort a transition
      by initiating another transition while a previous one is underway.
         @method abort
      @return {Transition} this transition
      @public
     */

      abort() {
        this.rollback();
        var transition = new Transition(
          this.router,
          undefined,
          undefined,
          undefined,
        );
        transition.to = this.from;
        transition.from = this.from;
        transition.isAborted = true;
        this.router.routeWillChange(transition);
        this.router.routeDidChange(transition);
        return this;
      }

      rollback() {
        if (!this.isAborted) {
          log(
            this.router,
            this.sequence,
            this.targetName + ': transition was aborted',
          );

          if (
            true
            /* DEBUG */
          ) {
            var error = new Error(`Transition aborted stack`);

            this.debugAbortStack = () => error.stack;
          }

          if (this.intent !== undefined && this.intent !== null) {
            this.intent.preTransitionState = this.router.state;
          }

          this.isAborted = true;
          this.isActive = false;
          this.router.activeTransition = undefined;
        }
      }

      redirect(newTransition) {
        this.rollback();
        this.router.routeWillChange(newTransition);
      }
      /**
         Retries a previously-aborted transition (making sure to abort the
      transition if it's still active). Returns a new transition that
      represents the new attempt to transition.
         @method retry
      @return {Transition} new transition
      @public
     */

      retry() {
        // TODO: add tests for merged state retry()s
        this.abort();
        var newTransition = this.router.transitionByIntent(this.intent, false); // inheriting a `null` urlMethod is not valid
        // the urlMethod is only set to `null` when
        // the transition is initiated *after* the url
        // has been updated (i.e. `router.handleURL`)
        //
        // in that scenario, the url method cannot be
        // inherited for a new transition because then
        // the url would not update even though it should

        if (this.urlMethod !== null) {
          newTransition.method(this.urlMethod);
        }

        return newTransition;
      }
      /**
         Sets the URL-changing method to be employed at the end of a
      successful transition. By default, a new Transition will just
      use `updateURL`, but passing 'replace' to this method will
      cause the URL to update using 'replaceWith' instead. Omitting
      a parameter will disable the URL change, allowing for transitions
      that don't update the URL at completion (this is also used for
      handleURL, since the URL has already changed before the
      transition took place).
         @method method
      @param {String} method the type of URL-changing method to use
        at the end of a transition. Accepted values are 'replace',
        falsy values, or any other non-falsy value (which is
        interpreted as an updateURL transition).
         @return {Transition} this transition
      @public
     */

      method(method) {
        this.urlMethod = method;
        return this;
      } // Alias 'trigger' as 'send'

      send(ignoreFailure, _name, err, transition, handler) {
        if (ignoreFailure === void 0) {
          ignoreFailure = false;
        }

        this.trigger(ignoreFailure, _name, err, transition, handler);
      }
      /**
         Fires an event on the current list of resolved/resolving
      handlers within this transition. Useful for firing events
      on route hierarchies that haven't fully been entered yet.
         Note: This method is also aliased as `send`
         @method trigger
      @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
      @param {String} name the name of the event to fire
      @public
     */

      trigger(ignoreFailure, name) {
        if (ignoreFailure === void 0) {
          ignoreFailure = false;
        }

        // TODO: Deprecate the current signature
        if (typeof ignoreFailure === 'string') {
          name = ignoreFailure;
          ignoreFailure = false;
        }

        for (
          var _len2 = arguments.length,
            args = new Array(_len2 > 2 ? _len2 - 2 : 0),
            _key2 = 2;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2 - 2] = arguments[_key2];
        }

        this.router.triggerEvent(
          this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1),
          ignoreFailure,
          name,
          args,
        );
      }
      /**
      Transitions are aborted and their promises rejected
      when redirects occur; this method returns a promise
      that will follow any redirects that occur and fulfill
      with the value fulfilled by any redirecting transitions
      that occur.
         @method followRedirects
      @return {Promise} a promise that fulfills with the same
        value that the final redirecting transition fulfills with
      @public
     */

      followRedirects() {
        var router = this.router;
        return this.promise.catch(function (reason) {
          if (router.activeTransition) {
            return router.activeTransition.followRedirects();
          }

          return _rsvp.Promise.reject(reason);
        });
      }

      toString() {
        return 'Transition (sequence ' + this.sequence + ')';
      }
      /**
      @private
     */

      log(message) {
        log(this.router, this.sequence, message);
      }
    }
    /**
    @private
  
    Logs and returns an instance of TransitionAborted.
   */

    _exports.InternalTransition = Transition;

    function logAbort(transition) {
      log(transition.router, transition.sequence, 'detected abort.');
      return buildTransitionAborted();
    }

    function isTransition(obj) {
      return (
        typeof obj === 'object' && obj instanceof Transition && obj.isTransition
      );
    }

    function prepareResult(obj) {
      if (isTransition(obj)) {
        return null;
      }

      return obj;
    }

    var ROUTE_INFOS = new WeakMap();

    function toReadOnlyRouteInfo(routeInfos, queryParams, includeAttributes) {
      if (queryParams === void 0) {
        queryParams = {};
      }

      if (includeAttributes === void 0) {
        includeAttributes = false;
      }

      return routeInfos.map((info, i) => {
        var { name, params, paramNames, context, route } = info; // SAFETY: This should be safe since it is just for use as a key

        var key = info;

        if (ROUTE_INFOS.has(key) && includeAttributes) {
          var _routeInfo = ROUTE_INFOS.get(key);

          _routeInfo = attachMetadata(route, _routeInfo);
          var routeInfoWithAttribute = createRouteInfoWithAttributes(
            _routeInfo,
            context,
          );
          ROUTE_INFOS.set(key, routeInfoWithAttribute);
          return routeInfoWithAttribute;
        }

        var routeInfo = {
          find(predicate, thisArg) {
            var publicInfo;
            var arr = [];

            if (predicate.length === 3) {
              arr = routeInfos.map(
                // SAFETY: This should be safe since it is just for use as a key
                (info) => ROUTE_INFOS.get(info),
              );
            }

            for (var _i = 0; routeInfos.length > _i; _i++) {
              // SAFETY: This should be safe since it is just for use as a key
              publicInfo = ROUTE_INFOS.get(routeInfos[_i]);

              if (predicate.call(thisArg, publicInfo, _i, arr)) {
                return publicInfo;
              }
            }

            return undefined;
          },

          get name() {
            return name;
          },

          get paramNames() {
            return paramNames;
          },

          get metadata() {
            return buildRouteInfoMetadata(info.route);
          },

          get parent() {
            var parent = routeInfos[i - 1];

            if (parent === undefined) {
              return null;
            } // SAFETY: This should be safe since it is just for use as a key

            return ROUTE_INFOS.get(parent);
          },

          get child() {
            var child = routeInfos[i + 1];

            if (child === undefined) {
              return null;
            } // SAFETY: This should be safe since it is just for use as a key

            return ROUTE_INFOS.get(child);
          },

          get localName() {
            var parts = this.name.split('.');
            return parts[parts.length - 1];
          },

          get params() {
            return params;
          },

          get queryParams() {
            return queryParams;
          },
        };

        if (includeAttributes) {
          routeInfo = createRouteInfoWithAttributes(routeInfo, context);
        } // SAFETY: This should be safe since it is just for use as a key

        ROUTE_INFOS.set(info, routeInfo);
        return routeInfo;
      });
    }

    function createRouteInfoWithAttributes(routeInfo, context) {
      var attributes = {
        get attributes() {
          return context;
        },
      };

      if (
        !Object.isExtensible(routeInfo) ||
        routeInfo.hasOwnProperty('attributes')
      ) {
        return Object.freeze(Object.assign({}, routeInfo, attributes));
      }

      return Object.assign(routeInfo, attributes);
    }

    function buildRouteInfoMetadata(route) {
      if (
        route !== undefined &&
        route !== null &&
        route.buildRouteInfoMetadata !== undefined
      ) {
        return route.buildRouteInfoMetadata();
      }

      return null;
    }

    function attachMetadata(route, routeInfo) {
      var metadata = {
        get metadata() {
          return buildRouteInfoMetadata(route);
        },
      };

      if (
        !Object.isExtensible(routeInfo) ||
        routeInfo.hasOwnProperty('metadata')
      ) {
        return Object.freeze(Object.assign({}, routeInfo, metadata));
      }

      return Object.assign(routeInfo, metadata);
    }

    class InternalRouteInfo {
      constructor(router, name, paramNames, route) {
        this._routePromise = undefined;
        this._route = null;
        this.params = {};
        this.isResolved = false;
        this.name = name;
        this.paramNames = paramNames;
        this.router = router;

        if (route) {
          this._processRoute(route);
        }
      }

      getModel(_transition) {
        return _rsvp.Promise.resolve(this.context);
      }

      serialize(_context) {
        return this.params || {};
      }

      resolve(transition) {
        return _rsvp.Promise.resolve(this.routePromise)
          .then((route) => {
            throwIfAborted(transition);
            return route;
          })
          .then(() => this.runBeforeModelHook(transition))
          .then(() => throwIfAborted(transition))
          .then(() => this.getModel(transition))
          .then((resolvedModel) => {
            throwIfAborted(transition);
            return resolvedModel;
          })
          .then((resolvedModel) =>
            this.runAfterModelHook(transition, resolvedModel),
          )
          .then((resolvedModel) =>
            this.becomeResolved(transition, resolvedModel),
          );
      }

      becomeResolved(transition, resolvedContext) {
        var params = this.serialize(resolvedContext);

        if (transition) {
          this.stashResolvedModel(transition, resolvedContext);
          transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
          transition[PARAMS_SYMBOL][this.name] = params;
        }

        var context;
        var contextsMatch = resolvedContext === this.context;

        if ('context' in this || !contextsMatch) {
          context = resolvedContext;
        } // SAFETY: Since this is just for lookup, it should be safe

        var cached = ROUTE_INFOS.get(this);
        var resolved = new ResolvedRouteInfo(
          this.router,
          this.name,
          this.paramNames,
          params,
          this.route,
          context,
        );

        if (cached !== undefined) {
          // SAFETY: This is potentially a bit risker, but for what we're doing, it should be ok.
          ROUTE_INFOS.set(this, cached);
        }

        return resolved;
      }

      shouldSupersede(routeInfo) {
        // Prefer this newer routeInfo over `other` if:
        // 1) The other one doesn't exist
        // 2) The names don't match
        // 3) This route has a context that doesn't match
        //    the other one (or the other one doesn't have one).
        // 4) This route has parameters that don't match the other.
        if (!routeInfo) {
          return true;
        }

        var contextsMatch = routeInfo.context === this.context;
        return (
          routeInfo.name !== this.name ||
          ('context' in this && !contextsMatch) ||
          (this.hasOwnProperty('params') &&
            !paramsMatch(this.params, routeInfo.params))
        );
      }

      get route() {
        // _route could be set to either a route object or undefined, so we
        // compare against null to know when it's been set
        if (this._route !== null) {
          return this._route;
        }

        return this.fetchRoute();
      }

      set route(route) {
        this._route = route;
      }

      get routePromise() {
        if (this._routePromise) {
          return this._routePromise;
        }

        this.fetchRoute();
        return this._routePromise;
      }

      set routePromise(routePromise) {
        this._routePromise = routePromise;
      }

      log(transition, message) {
        if (transition.log) {
          transition.log(this.name + ': ' + message);
        }
      }

      updateRoute(route) {
        route._internalName = this.name;
        return (this.route = route);
      }

      runBeforeModelHook(transition) {
        if (transition.trigger) {
          transition.trigger(true, 'willResolveModel', transition, this.route);
        }

        var result;

        if (this.route) {
          if (this.route.beforeModel !== undefined) {
            result = this.route.beforeModel(transition);
          }
        }

        if (isTransition(result)) {
          result = null;
        }

        return _rsvp.Promise.resolve(result);
      }

      runAfterModelHook(transition, resolvedModel) {
        // Stash the resolved model on the payload.
        // This makes it possible for users to swap out
        // the resolved model in afterModel.
        var name = this.name;
        this.stashResolvedModel(transition, resolvedModel);
        var result;

        if (this.route !== undefined) {
          if (this.route.afterModel !== undefined) {
            result = this.route.afterModel(resolvedModel, transition);
          }
        }

        result = prepareResult(result);
        return _rsvp.Promise.resolve(result).then(() => {
          // Ignore the fulfilled value returned from afterModel.
          // Return the value stashed in resolvedModels, which
          // might have been swapped out in afterModel.
          // SAFTEY: We expect this to be of type T, though typing it as such is challenging.
          return transition.resolvedModels[name];
        });
      }

      stashResolvedModel(transition, resolvedModel) {
        transition.resolvedModels = transition.resolvedModels || {}; // SAFETY: It's unfortunate that we have to do this cast. It should be safe though.

        transition.resolvedModels[this.name] = resolvedModel;
      }

      fetchRoute() {
        var route = this.router.getRoute(this.name);
        return this._processRoute(route);
      }

      _processRoute(route) {
        // Setup a routePromise so that we can wait for asynchronously loaded routes
        this.routePromise = _rsvp.Promise.resolve(route); // Wait until the 'route' property has been updated when chaining to a route
        // that is a promise

        if (isPromise(route)) {
          this.routePromise = this.routePromise.then((r) => {
            return this.updateRoute(r);
          }); // set to undefined to avoid recursive loop in the route getter

          return (this.route = undefined);
        } else if (route) {
          return this.updateRoute(route);
        }

        return undefined;
      }
    }

    _exports.InternalRouteInfo = InternalRouteInfo;

    class ResolvedRouteInfo extends InternalRouteInfo {
      constructor(router, name, paramNames, params, route, context) {
        super(router, name, paramNames, route);
        this.params = params;
        this.isResolved = true;
        this.context = context;
      }

      resolve(transition) {
        // A ResolvedRouteInfo just resolved with itself.
        if (transition && transition.resolvedModels) {
          transition.resolvedModels[this.name] = this.context;
        }

        return _rsvp.Promise.resolve(this);
      }
    }

    class UnresolvedRouteInfoByParam extends InternalRouteInfo {
      constructor(router, name, paramNames, params, route) {
        super(router, name, paramNames, route);
        this.params = {};

        if (params) {
          this.params = params;
        }
      }

      getModel(transition) {
        var fullParams = this.params;

        if (transition && transition[QUERY_PARAMS_SYMBOL]) {
          fullParams = {};
          merge(fullParams, this.params);
          fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
        }

        var route = this.route;
        var result; // FIXME: Review these casts

        if (route.deserialize) {
          result = route.deserialize(fullParams, transition);
        } else if (route.model) {
          result = route.model(fullParams, transition);
        }

        if (result && isTransition(result)) {
          result = undefined;
        }

        return _rsvp.Promise.resolve(result);
      }
    }

    class UnresolvedRouteInfoByObject extends InternalRouteInfo {
      constructor(router, name, paramNames, context) {
        super(router, name, paramNames);
        this.context = context;
        this.serializer = this.router.getSerializer(name);
      }

      getModel(transition) {
        if (this.router.log !== undefined) {
          this.router.log(this.name + ': resolving provided model');
        }

        return super.getModel(transition);
      }
      /**
      @private
         Serializes a route using its custom `serialize` method or
      by a default that looks up the expected property name from
      the dynamic segment.
         @param {Object} model the model to be serialized for this route
    */

      serialize(model) {
        var { paramNames, context } = this;

        if (!model) {
          // SAFETY: By the time we serialize, we expect to be resolved.
          // This may not be an entirely safe assumption though no tests fail.
          model = context;
        }

        var object = {};

        if (isParam(model)) {
          object[paramNames[0]] = model;
          return object;
        } // Use custom serialize if it exists.

        if (this.serializer) {
          // invoke this.serializer unbound (getSerializer returns a stateless function)
          return this.serializer.call(null, model, paramNames);
        } else if (this.route !== undefined) {
          if (this.route.serialize) {
            return this.route.serialize(model, paramNames);
          }
        }

        if (paramNames.length !== 1) {
          return;
        }

        var name = paramNames[0];

        if (/_id$/.test(name)) {
          // SAFETY: Model is supposed to extend IModel already
          object[name] = model.id;
        } else {
          object[name] = model;
        }

        return object;
      }
    }

    function paramsMatch(a, b) {
      if (a === b) {
        // Both are identical, may both be undefined
        return true;
      }

      if (!a || !b) {
        // Only one is undefined, already checked they aren't identical
        return false;
      } // Note: this assumes that both params have the same
      // number of keys, but since we're comparing the
      // same routes, they should.

      for (var k in a) {
        if (a.hasOwnProperty(k) && a[k] !== b[k]) {
          return false;
        }
      }

      return true;
    }

    class TransitionIntent {
      constructor(router, data) {
        if (data === void 0) {
          data = {};
        }

        this.router = router;
        this.data = data;
      }
    }

    function handleError(currentState, transition, error) {
      // This is the only possible
      // reject value of TransitionState#resolve
      var routeInfos = currentState.routeInfos;
      var errorHandlerIndex =
        transition.resolveIndex >= routeInfos.length
          ? routeInfos.length - 1
          : transition.resolveIndex;
      var wasAborted = transition.isAborted;
      throw new TransitionError(
        error,
        currentState.routeInfos[errorHandlerIndex].route,
        wasAborted,
        currentState,
      );
    }

    function resolveOneRouteInfo(currentState, transition) {
      if (transition.resolveIndex === currentState.routeInfos.length) {
        // This is is the only possible
        // fulfill value of TransitionState#resolve
        return;
      }

      var routeInfo = currentState.routeInfos[transition.resolveIndex];
      var callback = proceed.bind(null, currentState, transition);
      return routeInfo
        .resolve(transition)
        .then(callback, null, currentState.promiseLabel('Proceed'));
    }

    function proceed(currentState, transition, resolvedRouteInfo) {
      var wasAlreadyResolved =
        currentState.routeInfos[transition.resolveIndex].isResolved; // Swap the previously unresolved routeInfo with
      // the resolved routeInfo

      currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;

      if (!wasAlreadyResolved) {
        // Call the redirect hook. The reason we call it here
        // vs. afterModel is so that redirects into child
        // routes don't re-run the model hooks for this
        // already-resolved route.
        var { route } = resolvedRouteInfo;

        if (route !== undefined) {
          if (route.redirect) {
            route.redirect(resolvedRouteInfo.context, transition);
          }
        }
      } // Proceed after ensuring that the redirect hook
      // didn't abort this transition by transitioning elsewhere.

      throwIfAborted(transition);
      return resolveOneRouteInfo(currentState, transition);
    }

    class TransitionState {
      constructor() {
        this.routeInfos = [];
        this.queryParams = {};
        this.params = {};
      }

      promiseLabel(label) {
        var targetName = '';
        forEach(this.routeInfos, function (routeInfo) {
          if (targetName !== '') {
            targetName += '.';
          }

          targetName += routeInfo.name;
          return true;
        });
        return promiseLabel("'" + targetName + "': " + label);
      }

      resolve(transition) {
        // First, calculate params for this state. This is useful
        // information to provide to the various route hooks.
        var params = this.params;
        forEach(this.routeInfos, (routeInfo) => {
          params[routeInfo.name] = routeInfo.params || {};
          return true;
        });
        transition.resolveIndex = 0;
        var callback = resolveOneRouteInfo.bind(null, this, transition);
        var errorHandler = handleError.bind(null, this, transition); // The prelude RSVP.resolve() async moves us into the promise land.

        return _rsvp.Promise.resolve(
          null,
          this.promiseLabel('Start transition'),
        )
          .then(callback, null, this.promiseLabel('Resolve route'))
          .catch(errorHandler, this.promiseLabel('Handle error'))
          .then(() => this);
      }
    }

    _exports.TransitionState = TransitionState;

    class TransitionError {
      constructor(error, route, wasAborted, state) {
        this.error = error;
        this.route = route;
        this.wasAborted = wasAborted;
        this.state = state;
      }
    }

    _exports.TransitionError = TransitionError;

    class NamedTransitionIntent extends TransitionIntent {
      constructor(router, name, pivotHandler, contexts, queryParams, data) {
        if (contexts === void 0) {
          contexts = [];
        }

        if (queryParams === void 0) {
          queryParams = {};
        }

        super(router, data);
        this.preTransitionState = undefined;
        this.name = name;
        this.pivotHandler = pivotHandler;
        this.contexts = contexts;
        this.queryParams = queryParams;
      }

      applyToState(oldState, isIntermediate) {
        var handlers = this.router.recognizer.handlersFor(this.name);
        var targetRouteName = handlers[handlers.length - 1].handler;
        return this.applyToHandlers(
          oldState,
          handlers,
          targetRouteName,
          isIntermediate,
          false,
        );
      }

      applyToHandlers(
        oldState,
        parsedHandlers,
        targetRouteName,
        isIntermediate,
        checkingIfActive,
      ) {
        var i, len;
        var newState = new TransitionState();
        var objects = this.contexts.slice(0);
        var invalidateIndex = parsedHandlers.length; // Pivot handlers are provided for refresh transitions

        if (this.pivotHandler) {
          for (i = 0, len = parsedHandlers.length; i < len; ++i) {
            if (parsedHandlers[i].handler === this.pivotHandler._internalName) {
              invalidateIndex = i;
              break;
            }
          }
        }

        for (i = parsedHandlers.length - 1; i >= 0; --i) {
          var result = parsedHandlers[i];
          var name = result.handler;
          var oldHandlerInfo = oldState.routeInfos[i];
          var newHandlerInfo = null;

          if (result.names.length > 0) {
            if (i >= invalidateIndex) {
              newHandlerInfo = this.createParamHandlerInfo(
                name,
                result.names,
                objects,
                oldHandlerInfo,
              );
            } else {
              newHandlerInfo = this.getHandlerInfoForDynamicSegment(
                name,
                result.names,
                objects,
                oldHandlerInfo,
                targetRouteName,
                i,
              );
            }
          } else {
            // This route has no dynamic segment.
            // Therefore treat as a param-based handlerInfo
            // with empty params. This will cause the `model`
            // hook to be called with empty params, which is desirable.
            newHandlerInfo = this.createParamHandlerInfo(
              name,
              result.names,
              objects,
              oldHandlerInfo,
            );
          }

          if (checkingIfActive) {
            // If we're performing an isActive check, we want to
            // serialize URL params with the provided context, but
            // ignore mismatches between old and new context.
            newHandlerInfo = newHandlerInfo.becomeResolved(
              null, // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
              newHandlerInfo.context,
            );
            var oldContext = oldHandlerInfo && oldHandlerInfo.context;

            if (
              result.names.length > 0 &&
              oldHandlerInfo.context !== undefined &&
              newHandlerInfo.context === oldContext
            ) {
              // If contexts match in isActive test, assume params also match.
              // This allows for flexibility in not requiring that every last
              // handler provide a `serialize` method
              newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
            }

            newHandlerInfo.context = oldContext;
          }

          var handlerToUse = oldHandlerInfo;

          if (
            i >= invalidateIndex ||
            newHandlerInfo.shouldSupersede(oldHandlerInfo)
          ) {
            invalidateIndex = Math.min(i, invalidateIndex);
            handlerToUse = newHandlerInfo;
          }

          if (isIntermediate && !checkingIfActive) {
            handlerToUse = handlerToUse.becomeResolved(
              null, // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
              handlerToUse.context,
            );
          }

          newState.routeInfos.unshift(handlerToUse);
        }

        if (objects.length > 0) {
          throw new Error(
            'More context objects were passed than there are dynamic segments for the route: ' +
              targetRouteName,
          );
        }

        if (!isIntermediate) {
          this.invalidateChildren(newState.routeInfos, invalidateIndex);
        }

        merge(newState.queryParams, this.queryParams || {});

        if (isIntermediate && oldState.queryParams) {
          merge(newState.queryParams, oldState.queryParams);
        }

        return newState;
      }

      invalidateChildren(handlerInfos, invalidateIndex) {
        for (var i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
          var handlerInfo = handlerInfos[i];

          if (handlerInfo.isResolved) {
            var { name, params, route, paramNames } = handlerInfos[i];
            handlerInfos[i] = new UnresolvedRouteInfoByParam(
              this.router,
              name,
              paramNames,
              params,
              route,
            );
          }
        }
      }

      getHandlerInfoForDynamicSegment(
        name,
        names,
        objects,
        oldHandlerInfo,
        _targetRouteName,
        i,
      ) {
        var objectToUse;

        if (objects.length > 0) {
          // Use the objects provided for this transition.
          objectToUse = objects[objects.length - 1];

          if (isParam(objectToUse)) {
            return this.createParamHandlerInfo(
              name,
              names,
              objects,
              oldHandlerInfo,
            );
          } else {
            objects.pop();
          }
        } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
          // Reuse the matching oldHandlerInfo
          return oldHandlerInfo;
        } else {
          if (this.preTransitionState) {
            var preTransitionHandlerInfo = this.preTransitionState.routeInfos[
              i
            ];
            objectToUse =
              preTransitionHandlerInfo === null ||
              preTransitionHandlerInfo === void 0
                ? void 0
                : preTransitionHandlerInfo.context;
          } else {
            // Ideally we should throw this error to provide maximal
            // information to the user that not enough context objects
            // were provided, but this proves too cumbersome in Ember
            // in cases where inner template helpers are evaluated
            // before parent helpers un-render, in which cases this
            // error somewhat prematurely fires.
            //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
            return oldHandlerInfo;
          }
        }

        return new UnresolvedRouteInfoByObject(
          this.router,
          name,
          names,
          objectToUse,
        );
      }

      createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
        var params = {}; // Soak up all the provided string/numbers

        var numNames = names.length;
        var missingParams = [];

        while (numNames--) {
          // Only use old params if the names match with the new handler
          var oldParams =
            (oldHandlerInfo &&
              name === oldHandlerInfo.name &&
              oldHandlerInfo.params) ||
            {};
          var peek = objects[objects.length - 1];
          var paramName = names[numNames];

          if (isParam(peek)) {
            params[paramName] = '' + objects.pop();
          } else {
            // If we're here, this means only some of the params
            // were string/number params, so try and use a param
            // value from a previous handler.
            if (oldParams.hasOwnProperty(paramName)) {
              params[paramName] = oldParams[paramName];
            } else {
              missingParams.push(paramName);
            }
          }
        }

        if (missingParams.length > 0) {
          throw new Error(
            `You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route ${name}.` +
              ` Missing params: ${missingParams}`,
          );
        }

        return new UnresolvedRouteInfoByParam(this.router, name, names, params);
      }
    }

    var UnrecognizedURLError = (function () {
      UnrecognizedURLError.prototype = Object.create(Error.prototype);
      UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;

      function UnrecognizedURLError(message) {
        var error = Error.call(this, message);
        this.name = 'UnrecognizedURLError';
        this.message = message || 'UnrecognizedURL';

        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, UnrecognizedURLError);
        } else {
          this.stack = error.stack;
        }
      }

      return UnrecognizedURLError;
    })();

    class URLTransitionIntent extends TransitionIntent {
      constructor(router, url, data) {
        super(router, data);
        this.url = url;
        this.preTransitionState = undefined;
      }

      applyToState(oldState) {
        var newState = new TransitionState();
        var results = this.router.recognizer.recognize(this.url),
          i,
          len;

        if (!results) {
          throw new UnrecognizedURLError(this.url);
        }

        var statesDiffer = false;
        var _url = this.url; // Checks if a handler is accessible by URL. If it is not, an error is thrown.
        // For the case where the handler is loaded asynchronously, the error will be
        // thrown once it is loaded.

        function checkHandlerAccessibility(handler) {
          if (handler && handler.inaccessibleByURL) {
            throw new UnrecognizedURLError(_url);
          }

          return handler;
        }

        for (i = 0, len = results.length; i < len; ++i) {
          var result = results[i];
          var name = result.handler;
          var paramNames = [];

          if (this.router.recognizer.hasRoute(name)) {
            paramNames = this.router.recognizer.handlersFor(name)[i].names;
          }

          var newRouteInfo = new UnresolvedRouteInfoByParam(
            this.router,
            name,
            paramNames,
            result.params,
          );
          var route = newRouteInfo.route;

          if (route) {
            checkHandlerAccessibility(route);
          } else {
            // If the handler is being loaded asynchronously, check if we can
            // access it after it has resolved
            newRouteInfo.routePromise = newRouteInfo.routePromise.then(
              checkHandlerAccessibility,
            );
          }

          var oldRouteInfo = oldState.routeInfos[i];

          if (statesDiffer || newRouteInfo.shouldSupersede(oldRouteInfo)) {
            statesDiffer = true;
            newState.routeInfos[i] = newRouteInfo;
          } else {
            newState.routeInfos[i] = oldRouteInfo;
          }
        }

        merge(newState.queryParams, results.queryParams);
        return newState;
      }
    }

    class Router {
      constructor(logger) {
        this._lastQueryParams = {};
        this.state = undefined;
        this.oldState = undefined;
        this.activeTransition = undefined;
        this.currentRouteInfos = undefined;
        this._changedQueryParams = undefined;
        this.currentSequence = 0;
        this.log = logger;
        this.recognizer = new _routeRecognizer.default();
        this.reset();
      }
      /**
      The main entry point into the router. The API is essentially
      the same as the `map` method in `route-recognizer`.
         This method extracts the String handler at the last `.to()`
      call and uses it as the name of the whole route.
         @param {Function} callback
    */

      map(callback) {
        this.recognizer.map(callback, function (recognizer, routes) {
          for (
            var i = routes.length - 1, _proceed = true;
            i >= 0 && _proceed;
            --i
          ) {
            var route = routes[i];
            var handler = route.handler;
            recognizer.add(routes, {
              as: handler,
            });
            _proceed =
              route.path === '/' ||
              route.path === '' ||
              handler.slice(-6) === '.index';
          }
        });
      }

      hasRoute(route) {
        return this.recognizer.hasRoute(route);
      }

      queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
        this.fireQueryParamDidChange(newState, changelist);

        if (!wasTransitioning && this.activeTransition) {
          // One of the routes in queryParamsDidChange
          // caused a transition. Just return that transition.
          return this.activeTransition;
        } else {
          // Running queryParamsDidChange didn't change anything.
          // Just update query params and be on our way.
          // We have to return a noop transition that will
          // perform a URL update at the end. This gives
          // the user the ability to set the url update
          // method (default is replaceState).
          var newTransition = new Transition(this, undefined, undefined);
          newTransition.queryParamsOnly = true;
          oldState.queryParams = this.finalizeQueryParamChange(
            newState.routeInfos,
            newState.queryParams,
            newTransition,
          );
          newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
          this.toReadOnlyInfos(newTransition, newState);
          this.routeWillChange(newTransition);
          newTransition.promise = newTransition.promise.then(
            (result) => {
              if (!newTransition.isAborted) {
                this._updateURL(newTransition, oldState);

                this.didTransition(this.currentRouteInfos);
                this.toInfos(newTransition, newState.routeInfos, true);
                this.routeDidChange(newTransition);
              }

              return result;
            },
            null,
            promiseLabel('Transition complete'),
          );
          return newTransition;
        }
      }

      transitionByIntent(intent, isIntermediate) {
        try {
          return this.getTransitionByIntent(intent, isIntermediate);
        } catch (e) {
          return new Transition(this, intent, undefined, e, undefined);
        }
      }

      recognize(url) {
        var intent = new URLTransitionIntent(this, url);
        var newState = this.generateNewState(intent);

        if (newState === null) {
          return newState;
        }

        var readonlyInfos = toReadOnlyRouteInfo(
          newState.routeInfos,
          newState.queryParams,
        );
        return readonlyInfos[readonlyInfos.length - 1];
      }

      recognizeAndLoad(url) {
        var intent = new URLTransitionIntent(this, url);
        var newState = this.generateNewState(intent);

        if (newState === null) {
          return _rsvp.Promise.reject(`URL ${url} was not recognized`);
        }

        var newTransition = new Transition(this, intent, newState, undefined);
        return newTransition.then(() => {
          var routeInfosWithAttributes = toReadOnlyRouteInfo(
            newState.routeInfos,
            newTransition[QUERY_PARAMS_SYMBOL],
            true,
          );
          return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
        });
      }

      generateNewState(intent) {
        try {
          return intent.applyToState(this.state, false);
        } catch (e) {
          return null;
        }
      }

      getTransitionByIntent(intent, isIntermediate) {
        var wasTransitioning = !!this.activeTransition;
        var oldState = wasTransitioning
          ? this.activeTransition[STATE_SYMBOL]
          : this.state;
        var newTransition;
        var newState = intent.applyToState(oldState, isIntermediate);
        var queryParamChangelist = getChangelist(
          oldState.queryParams,
          newState.queryParams,
        );

        if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
          // This is a no-op transition. See if query params changed.
          if (queryParamChangelist) {
            var _newTransition = this.queryParamsTransition(
              queryParamChangelist,
              wasTransitioning,
              oldState,
              newState,
            );

            _newTransition.queryParamsOnly = true; // SAFETY: The returned OpaqueTransition should actually be this.

            return _newTransition;
          } // No-op. No need to create a new transition.

          return (
            this.activeTransition || new Transition(this, undefined, undefined)
          );
        }

        if (isIntermediate) {
          var transition = new Transition(this, undefined, newState);
          transition.isIntermediate = true;
          this.toReadOnlyInfos(transition, newState);
          this.setupContexts(newState, transition);
          this.routeWillChange(transition);
          return this.activeTransition;
        } // Create a new transition to the destination route.

        newTransition = new Transition(
          this,
          intent,
          newState,
          undefined,
          this.activeTransition,
        ); // transition is to same route with same params, only query params differ.
        // not caught above probably because refresh() has been used

        if (
          routeInfosSameExceptQueryParams(
            newState.routeInfos,
            oldState.routeInfos,
          )
        ) {
          newTransition.queryParamsOnly = true;
        }

        this.toReadOnlyInfos(newTransition, newState); // Abort and usurp any previously active transition.

        if (this.activeTransition) {
          this.activeTransition.redirect(newTransition);
        }

        this.activeTransition = newTransition; // Transition promises by default resolve with resolved state.
        // For our purposes, swap out the promise to resolve
        // after the transition has been finalized.

        newTransition.promise = newTransition.promise.then(
          (result) => {
            return this.finalizeTransition(newTransition, result);
          },
          null,
          promiseLabel(
            'Settle transition promise when transition is finalized',
          ),
        );

        if (!wasTransitioning) {
          this.notifyExistingHandlers(newState, newTransition);
        }

        this.fireQueryParamDidChange(newState, queryParamChangelist);
        return newTransition;
      }
      /**
    @private
       Begins and returns a Transition based on the provided
    arguments. Accepts arguments in the form of both URL
    transitions and named transitions.
       @param {Router} router
    @param {Array[Object]} args arguments passed to transitionTo,
      replaceWith, or handleURL
    */

      doTransition(name, modelsArray, isIntermediate) {
        if (modelsArray === void 0) {
          modelsArray = [];
        }

        if (isIntermediate === void 0) {
          isIntermediate = false;
        }

        var lastArg = modelsArray[modelsArray.length - 1];
        var queryParams = {};

        if (
          lastArg &&
          Object.prototype.hasOwnProperty.call(lastArg, 'queryParams')
        ) {
          // We just checked this.
          // TODO: Use an assertion?
          queryParams = modelsArray.pop().queryParams;
        }

        var intent;

        if (name === undefined) {
          log(this, 'Updating query params'); // A query param update is really just a transition
          // into the route you're already on.

          var { routeInfos } = this.state;
          intent = new NamedTransitionIntent(
            this,
            routeInfos[routeInfos.length - 1].name,
            undefined,
            [],
            queryParams,
          );
        } else if (name.charAt(0) === '/') {
          log(this, 'Attempting URL transition to ' + name);
          intent = new URLTransitionIntent(this, name);
        } else {
          log(this, 'Attempting transition to ' + name);
          intent = new NamedTransitionIntent(
            this,
            name,
            undefined, // SAFETY: We know this to be the case since we removed the last item if it was QPs
            modelsArray,
            queryParams,
          );
        }

        return this.transitionByIntent(intent, isIntermediate);
      }
      /**
    @private
       Updates the URL (if necessary) and calls `setupContexts`
    to update the router's array of `currentRouteInfos`.
    */

      finalizeTransition(transition, newState) {
        try {
          log(
            transition.router,
            transition.sequence,
            'Resolved all models on destination route; finalizing transition.',
          );
          var routeInfos = newState.routeInfos; // Run all the necessary enter/setup/exit hooks

          this.setupContexts(newState, transition); // Check if a redirect occurred in enter/setup

          if (transition.isAborted) {
            // TODO: cleaner way? distinguish b/w targetRouteInfos?
            this.state.routeInfos = this.currentRouteInfos;
            return _rsvp.Promise.reject(logAbort(transition));
          }

          this._updateURL(transition, newState);

          transition.isActive = false;
          this.activeTransition = undefined;
          this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
          this.didTransition(this.currentRouteInfos);
          this.toInfos(transition, newState.routeInfos, true);
          this.routeDidChange(transition);
          log(this, transition.sequence, 'TRANSITION COMPLETE.'); // Resolve with the final route.

          return routeInfos[routeInfos.length - 1].route;
        } catch (e) {
          if (!isTransitionAborted(e)) {
            var infos = transition[STATE_SYMBOL].routeInfos;
            transition.trigger(
              true,
              'error',
              e,
              transition,
              infos[infos.length - 1].route,
            );
            transition.abort();
          }

          throw e;
        }
      }
      /**
    @private
       Takes an Array of `RouteInfo`s, figures out which ones are
    exiting, entering, or changing contexts, and calls the
    proper route hooks.
       For example, consider the following tree of routes. Each route is
    followed by the URL segment it handles.
       ```
    |~index ("/")
    | |~posts ("/posts")
    | | |-showPost ("/:id")
    | | |-newPost ("/new")
    | | |-editPost ("/edit")
    | |~about ("/about/:id")
    ```
       Consider the following transitions:
       1. A URL transition to `/posts/1`.
       1. Triggers the `*model` callbacks on the
          `index`, `posts`, and `showPost` routes
       2. Triggers the `enter` callback on the same
       3. Triggers the `setup` callback on the same
    2. A direct transition to `newPost`
       1. Triggers the `exit` callback on `showPost`
       2. Triggers the `enter` callback on `newPost`
       3. Triggers the `setup` callback on `newPost`
    3. A direct transition to `about` with a specified
       context object
       1. Triggers the `exit` callback on `newPost`
          and `posts`
       2. Triggers the `serialize` callback on `about`
       3. Triggers the `enter` callback on `about`
       4. Triggers the `setup` callback on `about`
       @param {Router} transition
    @param {TransitionState} newState
    */

      setupContexts(newState, transition) {
        var partition = this.partitionRoutes(this.state, newState);
        var i, l, route;

        for (i = 0, l = partition.exited.length; i < l; i++) {
          route = partition.exited[i].route;
          delete route.context;

          if (route !== undefined) {
            if (route._internalReset !== undefined) {
              route._internalReset(true, transition);
            }

            if (route.exit !== undefined) {
              route.exit(transition);
            }
          }
        }

        var oldState = (this.oldState = this.state);
        this.state = newState;
        var currentRouteInfos = (this.currentRouteInfos = partition.unchanged.slice());

        try {
          for (i = 0, l = partition.reset.length; i < l; i++) {
            route = partition.reset[i].route;

            if (route !== undefined) {
              if (route._internalReset !== undefined) {
                route._internalReset(false, transition);
              }
            }
          }

          for (i = 0, l = partition.updatedContext.length; i < l; i++) {
            this.routeEnteredOrUpdated(
              currentRouteInfos,
              partition.updatedContext[i],
              false,
              transition,
            );
          }

          for (i = 0, l = partition.entered.length; i < l; i++) {
            this.routeEnteredOrUpdated(
              currentRouteInfos,
              partition.entered[i],
              true,
              transition,
            );
          }
        } catch (e) {
          this.state = oldState;
          this.currentRouteInfos = oldState.routeInfos;
          throw e;
        }

        this.state.queryParams = this.finalizeQueryParamChange(
          currentRouteInfos,
          newState.queryParams,
          transition,
        );
      }
      /**
    @private
       Fires queryParamsDidChange event
    */

      fireQueryParamDidChange(newState, queryParamChangelist) {
        // If queryParams changed trigger event
        if (queryParamChangelist) {
          // This is a little hacky but we need some way of storing
          // changed query params given that no activeTransition
          // is guaranteed to have occurred.
          this._changedQueryParams = queryParamChangelist.all;
          this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [
            queryParamChangelist.changed,
            queryParamChangelist.all,
            queryParamChangelist.removed,
          ]);
          this._changedQueryParams = undefined;
        }
      }
      /**
    @private
       Helper method used by setupContexts. Handles errors or redirects
    that may happen in enter/setup.
    */

      routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
        var route = routeInfo.route,
          context = routeInfo.context;

        function _routeEnteredOrUpdated(route) {
          if (enter) {
            if (route.enter !== undefined) {
              route.enter(transition);
            }
          }

          throwIfAborted(transition);
          route.context = context;

          if (route.contextDidChange !== undefined) {
            route.contextDidChange();
          }

          if (route.setup !== undefined) {
            route.setup(context, transition);
          }

          throwIfAborted(transition);
          currentRouteInfos.push(routeInfo);
          return route;
        } // If the route doesn't exist, it means we haven't resolved the route promise yet

        if (route === undefined) {
          routeInfo.routePromise = routeInfo.routePromise.then(
            _routeEnteredOrUpdated,
          );
        } else {
          _routeEnteredOrUpdated(route);
        }

        return true;
      }
      /**
    @private
       This function is called when transitioning from one URL to
    another to determine which routes are no longer active,
    which routes are newly active, and which routes remain
    active but have their context changed.
       Take a list of old routes and new routes and partition
    them into four buckets:
       * unchanged: the route was active in both the old and
      new URL, and its context remains the same
    * updated context: the route was active in both the
      old and new URL, but its context changed. The route's
      `setup` method, if any, will be called with the new
      context.
    * exited: the route was active in the old URL, but is
      no longer active.
    * entered: the route was not active in the old URL, but
      is now active.
       The PartitionedRoutes structure has four fields:
       * `updatedContext`: a list of `RouteInfo` objects that
      represent routes that remain active but have a changed
      context
    * `entered`: a list of `RouteInfo` objects that represent
      routes that are newly active
    * `exited`: a list of `RouteInfo` objects that are no
      longer active.
    * `unchanged`: a list of `RouteInfo` objects that remain active.
       @param {Array[InternalRouteInfo]} oldRoutes a list of the route
      information for the previous URL (or `[]` if this is the
      first handled transition)
    @param {Array[InternalRouteInfo]} newRoutes a list of the route
      information for the new URL
       @return {Partition}
    */

      partitionRoutes(oldState, newState) {
        var oldRouteInfos = oldState.routeInfos;
        var newRouteInfos = newState.routeInfos;
        var routes = {
          updatedContext: [],
          exited: [],
          entered: [],
          unchanged: [],
          reset: [],
        };
        var routeChanged,
          contextChanged = false,
          i,
          l;

        for (i = 0, l = newRouteInfos.length; i < l; i++) {
          var oldRouteInfo = oldRouteInfos[i],
            newRouteInfo = newRouteInfos[i];

          if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
            routeChanged = true;
          }

          if (routeChanged) {
            routes.entered.push(newRouteInfo);

            if (oldRouteInfo) {
              routes.exited.unshift(oldRouteInfo);
            }
          } else if (
            contextChanged ||
            oldRouteInfo.context !== newRouteInfo.context
          ) {
            contextChanged = true;
            routes.updatedContext.push(newRouteInfo);
          } else {
            routes.unchanged.push(oldRouteInfo);
          }
        }

        for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
          routes.exited.unshift(oldRouteInfos[i]);
        }

        routes.reset = routes.updatedContext.slice();
        routes.reset.reverse();
        return routes;
      }

      _updateURL(transition, state) {
        var urlMethod = transition.urlMethod;

        if (!urlMethod) {
          return;
        }

        var { routeInfos } = state;
        var { name: routeName } = routeInfos[routeInfos.length - 1];
        var params = {};

        for (var i = routeInfos.length - 1; i >= 0; --i) {
          var routeInfo = routeInfos[i];
          merge(params, routeInfo.params);

          if (routeInfo.route.inaccessibleByURL) {
            urlMethod = null;
          }
        }

        if (urlMethod) {
          params.queryParams =
            transition._visibleQueryParams || state.queryParams;
          var url = this.recognizer.generate(routeName, params); // transitions during the initial transition must always use replaceURL.
          // When the app boots, you are at a url, e.g. /foo. If some route
          // redirects to bar as part of the initial transition, you don't want to
          // add a history entry for /foo. If you do, pressing back will immediately
          // hit the redirect again and take you back to /bar, thus killing the back
          // button

          var initial = transition.isCausedByInitialTransition; // say you are at / and you click a link to route /foo. In /foo's
          // route, the transition is aborted using replaceWith('/bar').
          // Because the current url is still /, the history entry for / is
          // removed from the history. Clicking back will take you to the page
          // you were on before /, which is often not even the app, thus killing
          // the back button. That's why updateURL is always correct for an
          // aborting transition that's not the initial transition

          var replaceAndNotAborting =
            urlMethod === 'replace' && !transition.isCausedByAbortingTransition; // because calling refresh causes an aborted transition, this needs to be
          // special cased - if the initial transition is a replace transition, the
          // urlMethod should be honored here.

          var isQueryParamsRefreshTransition =
            transition.queryParamsOnly && urlMethod === 'replace'; // say you are at / and you a `replaceWith(/foo)` is called. Then, that
          // transition is aborted with `replaceWith(/bar)`. At the end, we should
          // end up with /bar replacing /. We are replacing the replace. We only
          // will replace the initial route if all subsequent aborts are also
          // replaces. However, there is some ambiguity around the correct behavior
          // here.

          var replacingReplace =
            urlMethod === 'replace' &&
            transition.isCausedByAbortingReplaceTransition;

          if (
            initial ||
            replaceAndNotAborting ||
            isQueryParamsRefreshTransition ||
            replacingReplace
          ) {
            this.replaceURL(url);
          } else {
            this.updateURL(url);
          }
        }
      }

      finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
        // We fire a finalizeQueryParamChange event which
        // gives the new route hierarchy a chance to tell
        // us which query params it's consuming and what
        // their final values are. If a query param is
        // no longer consumed in the final route hierarchy,
        // its serialized segment will be removed
        // from the URL.
        for (var k in newQueryParams) {
          if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
            delete newQueryParams[k];
          }
        }

        var finalQueryParamsArray = [];
        this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [
          newQueryParams,
          finalQueryParamsArray,
          transition,
        ]);

        if (transition) {
          transition._visibleQueryParams = {};
        }

        var finalQueryParams = {};

        for (var i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
          var qp = finalQueryParamsArray[i];
          finalQueryParams[qp.key] = qp.value;

          if (transition && qp.visible !== false) {
            transition._visibleQueryParams[qp.key] = qp.value;
          }
        }

        return finalQueryParams;
      }

      toReadOnlyInfos(newTransition, newState) {
        var oldRouteInfos = this.state.routeInfos;
        this.fromInfos(newTransition, oldRouteInfos);
        this.toInfos(newTransition, newState.routeInfos);
        this._lastQueryParams = newState.queryParams;
      }

      fromInfos(newTransition, oldRouteInfos) {
        if (newTransition !== undefined && oldRouteInfos.length > 0) {
          var fromInfos = toReadOnlyRouteInfo(
            oldRouteInfos,
            Object.assign({}, this._lastQueryParams),
            true,
          );
          newTransition.from = fromInfos[fromInfos.length - 1] || null;
        }
      }

      toInfos(newTransition, newRouteInfos, includeAttributes) {
        if (includeAttributes === void 0) {
          includeAttributes = false;
        }

        if (newTransition !== undefined && newRouteInfos.length > 0) {
          var toInfos = toReadOnlyRouteInfo(
            newRouteInfos,
            Object.assign({}, newTransition[QUERY_PARAMS_SYMBOL]),
            includeAttributes,
          );
          newTransition.to = toInfos[toInfos.length - 1] || null;
        }
      }

      notifyExistingHandlers(newState, newTransition) {
        var oldRouteInfos = this.state.routeInfos,
          i,
          oldRouteInfoLen,
          oldHandler,
          newRouteInfo;
        oldRouteInfoLen = oldRouteInfos.length;

        for (i = 0; i < oldRouteInfoLen; i++) {
          oldHandler = oldRouteInfos[i];
          newRouteInfo = newState.routeInfos[i];

          if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
            break;
          }

          if (!newRouteInfo.isResolved) {
          }
        }

        this.triggerEvent(oldRouteInfos, true, 'willTransition', [
          newTransition,
        ]);
        this.routeWillChange(newTransition);
        this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
      }
      /**
      Clears the current and target route routes and triggers exit
      on each of them starting at the leaf and traversing up through
      its ancestors.
    */

      reset() {
        if (this.state) {
          forEach(
            this.state.routeInfos.slice().reverse(),
            function (routeInfo) {
              var route = routeInfo.route;

              if (route !== undefined) {
                if (route.exit !== undefined) {
                  route.exit();
                }
              }

              return true;
            },
          );
        }

        this.oldState = undefined;
        this.state = new TransitionState();
        this.currentRouteInfos = undefined;
      }
      /**
      let handler = routeInfo.handler;
      The entry point for handling a change to the URL (usually
      via the back and forward button).
         Returns an Array of handlers and the parameters associated
      with those parameters.
         @param {String} url a URL to process
         @return {Array} an Array of `[handler, parameter]` tuples
    */

      handleURL(url) {
        // Perform a URL-based transition, but don't change
        // the URL afterward, since it already happened.
        if (url.charAt(0) !== '/') {
          url = '/' + url;
        }

        return this.doTransition(url).method(null);
      }
      /**
      Transition into the specified named route.
         If necessary, trigger the exit callback on any routes
      that are no longer represented by the target route.
         @param {String} name the name of the route
    */

      transitionTo(name) {
        for (
          var _len3 = arguments.length,
            contexts = new Array(_len3 > 1 ? _len3 - 1 : 0),
            _key3 = 1;
          _key3 < _len3;
          _key3++
        ) {
          contexts[_key3 - 1] = arguments[_key3];
        }

        if (typeof name === 'object') {
          contexts.push(name);
          return this.doTransition(undefined, contexts, false);
        }

        return this.doTransition(name, contexts);
      }

      intermediateTransitionTo(name) {
        for (
          var _len4 = arguments.length,
            args = new Array(_len4 > 1 ? _len4 - 1 : 0),
            _key4 = 1;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4 - 1] = arguments[_key4];
        }

        return this.doTransition(name, args, true);
      }

      refresh(pivotRoute) {
        var previousTransition = this.activeTransition;
        var state = previousTransition
          ? previousTransition[STATE_SYMBOL]
          : this.state;
        var routeInfos = state.routeInfos;

        if (pivotRoute === undefined) {
          pivotRoute = routeInfos[0].route;
        }

        log(this, 'Starting a refresh transition');
        var name = routeInfos[routeInfos.length - 1].name;
        var intent = new NamedTransitionIntent(
          this,
          name,
          pivotRoute,
          [],
          this._changedQueryParams || state.queryParams,
        );
        var newTransition = this.transitionByIntent(intent, false); // if the previous transition is a replace transition, that needs to be preserved

        if (previousTransition && previousTransition.urlMethod === 'replace') {
          newTransition.method(previousTransition.urlMethod);
        }

        return newTransition;
      }
      /**
      Identical to `transitionTo` except that the current URL will be replaced
      if possible.
         This method is intended primarily for use with `replaceState`.
         @param {String} name the name of the route
    */

      replaceWith(name) {
        return this.doTransition(name).method('replace');
      }
      /**
      Take a named route and context objects and generate a
      URL.
         @param {String} name the name of the route to generate
        a URL for
      @param {...Object} objects a list of objects to serialize
         @return {String} a URL
    */

      generate(routeName) {
        for (
          var _len5 = arguments.length,
            args = new Array(_len5 > 1 ? _len5 - 1 : 0),
            _key5 = 1;
          _key5 < _len5;
          _key5++
        ) {
          args[_key5 - 1] = arguments[_key5];
        }

        var partitionedArgs = extractQueryParams(args),
          suppliedParams = partitionedArgs[0],
          queryParams = partitionedArgs[1]; // Construct a TransitionIntent with the provided params
        // and apply it to the present state of the router.

        var intent = new NamedTransitionIntent(
          this,
          routeName,
          undefined,
          suppliedParams,
        );
        var state = intent.applyToState(this.state, false);
        var params = {};

        for (var i = 0, len = state.routeInfos.length; i < len; ++i) {
          var routeInfo = state.routeInfos[i];
          var routeParams = routeInfo.serialize();
          merge(params, routeParams);
        }

        params.queryParams = queryParams;
        return this.recognizer.generate(routeName, params);
      }

      applyIntent(routeName, contexts) {
        var intent = new NamedTransitionIntent(
          this,
          routeName,
          undefined,
          contexts,
        );
        var state =
          (this.activeTransition && this.activeTransition[STATE_SYMBOL]) ||
          this.state;
        return intent.applyToState(state, false);
      }

      isActiveIntent(routeName, contexts, queryParams, _state) {
        var state = _state || this.state,
          targetRouteInfos = state.routeInfos,
          routeInfo,
          len;

        if (!targetRouteInfos.length) {
          return false;
        }

        var targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
        var recognizerHandlers = this.recognizer.handlersFor(targetHandler);
        var index = 0;

        for (len = recognizerHandlers.length; index < len; ++index) {
          routeInfo = targetRouteInfos[index];

          if (routeInfo.name === routeName) {
            break;
          }
        }

        if (index === recognizerHandlers.length) {
          // The provided route name isn't even in the route hierarchy.
          return false;
        }

        var testState = new TransitionState();
        testState.routeInfos = targetRouteInfos.slice(0, index + 1);
        recognizerHandlers = recognizerHandlers.slice(0, index + 1);
        var intent = new NamedTransitionIntent(
          this,
          targetHandler,
          undefined,
          contexts,
        );
        var newState = intent.applyToHandlers(
          testState,
          recognizerHandlers,
          targetHandler,
          true,
          true,
        );
        var routesEqual = routeInfosEqual(
          newState.routeInfos,
          testState.routeInfos,
        );

        if (!queryParams || !routesEqual) {
          return routesEqual;
        } // Get a hash of QPs that will still be active on new route

        var activeQPsOnNewHandler = {};
        merge(activeQPsOnNewHandler, queryParams);
        var activeQueryParams = state.queryParams;

        for (var key in activeQueryParams) {
          if (
            activeQueryParams.hasOwnProperty(key) &&
            activeQPsOnNewHandler.hasOwnProperty(key)
          ) {
            activeQPsOnNewHandler[key] = activeQueryParams[key];
          }
        }

        return (
          routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams)
        );
      }

      isActive(routeName) {
        for (
          var _len6 = arguments.length,
            args = new Array(_len6 > 1 ? _len6 - 1 : 0),
            _key6 = 1;
          _key6 < _len6;
          _key6++
        ) {
          args[_key6 - 1] = arguments[_key6];
        }

        var [contexts, queryParams] = extractQueryParams(args);
        return this.isActiveIntent(routeName, contexts, queryParams);
      }

      trigger(name) {
        for (
          var _len7 = arguments.length,
            args = new Array(_len7 > 1 ? _len7 - 1 : 0),
            _key7 = 1;
          _key7 < _len7;
          _key7++
        ) {
          args[_key7 - 1] = arguments[_key7];
        }

        this.triggerEvent(this.currentRouteInfos, false, name, args);
      }
    }

    function routeInfosEqual(routeInfos, otherRouteInfos) {
      if (routeInfos.length !== otherRouteInfos.length) {
        return false;
      }

      for (var i = 0, len = routeInfos.length; i < len; ++i) {
        // SAFETY: Just casting for comparison
        if (routeInfos[i] !== otherRouteInfos[i]) {
          return false;
        }
      }

      return true;
    }

    function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
      if (routeInfos.length !== otherRouteInfos.length) {
        return false;
      }

      for (var i = 0, len = routeInfos.length; i < len; ++i) {
        if (routeInfos[i].name !== otherRouteInfos[i].name) {
          return false;
        }

        if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
          return false;
        }
      }

      return true;
    }

    function paramsEqual(params, otherParams) {
      if (params === otherParams) {
        // Both identical or both undefined
        return true;
      }

      if (!params || !otherParams) {
        // One is falsy but other is not
        return false;
      }

      var keys = Object.keys(params);
      var otherKeys = Object.keys(otherParams);

      if (keys.length !== otherKeys.length) {
        return false;
      }

      for (var i = 0, len = keys.length; i < len; ++i) {
        var key = keys[i];

        if (params[key] !== otherParams[key]) {
          return false;
        }
      }

      return true;
    }

    var _default = Router;
    _exports.default = _default;
  });
  define('rsvp', ['exports'], function (_exports) {
    'use strict';

    Object.defineProperty(_exports, '__esModule', {
      value: true,
    });
    _exports.Promise = _exports.EventTarget = void 0;
    _exports.all = all$1;
    _exports.allSettled = allSettled;
    _exports.asap = asap;
    _exports.cast = _exports.async = void 0;
    _exports.configure = configure;
    _exports.default = void 0;
    _exports.defer = defer;
    _exports.denodeify = denodeify;
    _exports.filter = filter;
    _exports.hash = hash;
    _exports.hashSettled = hashSettled;
    _exports.map = map;
    _exports.off = off;
    _exports.on = on;
    _exports.race = race$1;
    _exports.reject = reject$2;
    _exports.resolve = resolve$2;
    _exports.rethrow = rethrow;

    function callbacksFor(object) {
      var callbacks = object._promiseCallbacks;

      if (!callbacks) {
        callbacks = object._promiseCallbacks = {};
      }

      return callbacks;
    }
    /**
    @class EventTarget
    @for rsvp
    @public
  */

    var EventTarget = {
      /**
      `EventTarget.mixin` extends an object with EventTarget methods. For
      Example:
       ```javascript
      import EventTarget from 'rsvp';
       let object = {};
       EventTarget.mixin(object);
       object.on('finished', function(event) {
        // handle event
      });
       object.trigger('finished', { detail: value });
      ```
       `EventTarget.mixin` also works with prototypes:
       ```javascript
      import EventTarget from 'rsvp';
       let Person = function() {};
      EventTarget.mixin(Person.prototype);
       let yehuda = new Person();
      let tom = new Person();
       yehuda.on('poke', function(event) {
        console.log('Yehuda says OW');
      });
       tom.on('poke', function(event) {
        console.log('Tom says OW');
      });
       yehuda.trigger('poke');
      tom.trigger('poke');
      ```
       @method mixin
      @for rsvp
      @private
      @param {Object} object object to extend with EventTarget methods
    */
      mixin(object) {
        object.on = this.on;
        object.off = this.off;
        object.trigger = this.trigger;
        object._promiseCallbacks = undefined;
        return object;
      },

      /**
      Registers a callback to be executed when `eventName` is triggered
       ```javascript
      object.on('event', function(eventInfo){
        // handle the event
      });
       object.trigger('event');
      ```
       @method on
      @for EventTarget
      @private
      @param {String} eventName name of the event to listen for
      @param {Function} callback function to be called when the event is triggered.
    */
      on(eventName, callback) {
        if (typeof callback !== 'function') {
          throw new TypeError('Callback must be a function');
        }

        var allCallbacks = callbacksFor(this);
        var callbacks = allCallbacks[eventName];

        if (!callbacks) {
          callbacks = allCallbacks[eventName] = [];
        }

        if (callbacks.indexOf(callback) === -1) {
          callbacks.push(callback);
        }
      },

      /**
      You can use `off` to stop firing a particular callback for an event:
       ```javascript
      function doStuff() { // do stuff! }
      object.on('stuff', doStuff);
       object.trigger('stuff'); // doStuff will be called
       // Unregister ONLY the doStuff callback
      object.off('stuff', doStuff);
      object.trigger('stuff'); // doStuff will NOT be called
      ```
       If you don't pass a `callback` argument to `off`, ALL callbacks for the
      event will not be executed when the event fires. For example:
       ```javascript
      let callback1 = function(){};
      let callback2 = function(){};
       object.on('stuff', callback1);
      object.on('stuff', callback2);
       object.trigger('stuff'); // callback1 and callback2 will be executed.
       object.off('stuff');
      object.trigger('stuff'); // callback1 and callback2 will not be executed!
      ```
       @method off
      @for rsvp
      @private
      @param {String} eventName event to stop listening to
      @param {Function} [callback] optional argument. If given, only the function
      given will be removed from the event's callback queue. If no `callback`
      argument is given, all callbacks will be removed from the event's callback
      queue.
    */
      off(eventName, callback) {
        var allCallbacks = callbacksFor(this);

        if (!callback) {
          allCallbacks[eventName] = [];
          return;
        }

        var callbacks = allCallbacks[eventName];
        var index = callbacks.indexOf(callback);

        if (index !== -1) {
          callbacks.splice(index, 1);
        }
      },

      /**
      Use `trigger` to fire custom events. For example:
       ```javascript
      object.on('foo', function(){
        console.log('foo event happened!');
      });
      object.trigger('foo');
      // 'foo event happened!' logged to the console
      ```
       You can also pass a value as a second argument to `trigger` that will be
      passed as an argument to all event listeners for the event:
       ```javascript
      object.on('foo', function(value){
        console.log(value.name);
      });
       object.trigger('foo', { name: 'bar' });
      // 'bar' logged to the console
      ```
       @method trigger
      @for rsvp
      @private
      @param {String} eventName name of the event to be triggered
      @param {*} [options] optional value to be passed to any event handlers for
      the given `eventName`
    */
      trigger(eventName, options, label) {
        var allCallbacks = callbacksFor(this);
        var callbacks = allCallbacks[eventName];

        if (callbacks) {
          // Don't cache the callbacks.length since it may grow
          var callback;

          for (var i = 0; i < callbacks.length; i++) {
            callback = callbacks[i];
            callback(options, label);
          }
        }
      },
    };
    _exports.EventTarget = EventTarget;
    var config = {
      instrument: false,
    };
    EventTarget['mixin'](config);

    function configure(name, value) {
      if (arguments.length === 2) {
        config[name] = value;
      } else {
        return config[name];
      }
    }

    var queue = [];

    function scheduleFlush() {
      setTimeout(() => {
        for (var i = 0; i < queue.length; i++) {
          var entry = queue[i];
          var payload = entry.payload;
          payload.guid = payload.key + payload.id;
          payload.childGuid = payload.key + payload.childId;

          if (payload.error) {
            payload.stack = payload.error.stack;
          }

          config['trigger'](entry.name, entry.payload);
        }

        queue.length = 0;
      }, 50);
    }

    function instrument(eventName, promise, child) {
      if (
        1 ===
        queue.push({
          name: eventName,
          payload: {
            key: promise._guidKey,
            id: promise._id,
            eventName: eventName,
            detail: promise._result,
            childId: child && child._id,
            label: promise._label,
            timeStamp: Date.now(),
            error: config['instrument-with-stack']
              ? new Error(promise._label)
              : null,
          },
        })
      ) {
        scheduleFlush();
      }
    }
    /**
    `Promise.resolve` returns a promise that will become resolved with the
    passed `value`. It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      resolve(1);
    });
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = RSVP.Promise.resolve(1);
  
    promise.then(function(value){
      // value === 1
    });
    ```
  
    @method resolve
    @for Promise
    @static
    @param {*} object value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */

    function resolve$$1(object, label) {
      /*jshint validthis:true */
      var Constructor = this;

      if (
        object &&
        typeof object === 'object' &&
        object.constructor === Constructor
      ) {
        return object;
      }

      var promise = new Constructor(noop, label);
      resolve$1(promise, object);
      return promise;
    }

    function withOwnPromise() {
      return new TypeError(
        'A promises callback cannot return that same promise.',
      );
    }

    function objectOrFunction(x) {
      var type = typeof x;
      return x !== null && (type === 'object' || type === 'function');
    }

    function noop() {}

    var PENDING = void 0;
    var FULFILLED = 1;
    var REJECTED = 2;

    function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
      try {
        then$$1.call(value, fulfillmentHandler, rejectionHandler);
      } catch (e) {
        return e;
      }
    }

    function handleForeignThenable(promise, thenable, then$$1) {
      config.async((promise) => {
        var sealed = false;
        var error = tryThen(
          then$$1,
          thenable,
          (value) => {
            if (sealed) {
              return;
            }

            sealed = true;

            if (thenable === value) {
              fulfill(promise, value);
            } else {
              resolve$1(promise, value);
            }
          },
          (reason) => {
            if (sealed) {
              return;
            }

            sealed = true;
            reject(promise, reason);
          },
          'Settle: ' + (promise._label || ' unknown promise'),
        );

        if (!sealed && error) {
          sealed = true;
          reject(promise, error);
        }
      }, promise);
    }

    function handleOwnThenable(promise, thenable) {
      if (thenable._state === FULFILLED) {
        fulfill(promise, thenable._result);
      } else if (thenable._state === REJECTED) {
        thenable._onError = null;
        reject(promise, thenable._result);
      } else {
        subscribe(
          thenable,
          undefined,
          (value) => {
            if (thenable === value) {
              fulfill(promise, value);
            } else {
              resolve$1(promise, value);
            }
          },
          (reason) => reject(promise, reason),
        );
      }
    }

    function handleMaybeThenable(promise, maybeThenable, then$$1) {
      var isOwnThenable =
        maybeThenable.constructor === promise.constructor &&
        then$$1 === then &&
        promise.constructor.resolve === resolve$$1;

      if (isOwnThenable) {
        handleOwnThenable(promise, maybeThenable);
      } else if (typeof then$$1 === 'function') {
        handleForeignThenable(promise, maybeThenable, then$$1);
      } else {
        fulfill(promise, maybeThenable);
      }
    }

    function resolve$1(promise, value) {
      if (promise === value) {
        fulfill(promise, value);
      } else if (objectOrFunction(value)) {
        var then$$1;

        try {
          then$$1 = value.then;
        } catch (error) {
          reject(promise, error);
          return;
        }

        handleMaybeThenable(promise, value, then$$1);
      } else {
        fulfill(promise, value);
      }
    }

    function publishRejection(promise) {
      if (promise._onError) {
        promise._onError(promise._result);
      }

      publish(promise);
    }

    function fulfill(promise, value) {
      if (promise._state !== PENDING) {
        return;
      }

      promise._result = value;
      promise._state = FULFILLED;

      if (promise._subscribers.length === 0) {
        if (config.instrument) {
          instrument('fulfilled', promise);
        }
      } else {
        config.async(publish, promise);
      }
    }

    function reject(promise, reason) {
      if (promise._state !== PENDING) {
        return;
      }

      promise._state = REJECTED;
      promise._result = reason;
      config.async(publishRejection, promise);
    }

    function subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;
      parent._onError = null;
      subscribers[length] = child;
      subscribers[length + FULFILLED] = onFulfillment;
      subscribers[length + REJECTED] = onRejection;

      if (length === 0 && parent._state) {
        config.async(publish, parent);
      }
    }

    function publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (config.instrument) {
        instrument(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
      }

      if (subscribers.length === 0) {
        return;
      }

      var child,
        callback,
        result = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          invokeCallback(settled, child, callback, result);
        } else {
          callback(result);
        }
      }

      promise._subscribers.length = 0;
    }

    function invokeCallback(state, promise, callback, result) {
      var hasCallback = typeof callback === 'function';
      var value,
        succeeded = true,
        error;

      if (hasCallback) {
        try {
          value = callback(result);
        } catch (e) {
          succeeded = false;
          error = e;
        }
      } else {
        value = result;
      }

      if (promise._state !== PENDING) {
        // noop
      } else if (value === promise) {
        reject(promise, withOwnPromise());
      } else if (succeeded === false) {
        reject(promise, error);
      } else if (hasCallback) {
        resolve$1(promise, value);
      } else if (state === FULFILLED) {
        fulfill(promise, value);
      } else if (state === REJECTED) {
        reject(promise, value);
      }
    }

    function initializePromise(promise, resolver) {
      var resolved = false;

      try {
        resolver(
          (value) => {
            if (resolved) {
              return;
            }

            resolved = true;
            resolve$1(promise, value);
          },
          (reason) => {
            if (resolved) {
              return;
            }

            resolved = true;
            reject(promise, reason);
          },
        );
      } catch (e) {
        reject(promise, e);
      }
    }

    function then(onFulfillment, onRejection, label) {
      var parent = this;
      var state = parent._state;

      if (
        (state === FULFILLED && !onFulfillment) ||
        (state === REJECTED && !onRejection)
      ) {
        config.instrument && instrument('chained', parent, parent);
        return parent;
      }

      parent._onError = null;
      var child = new parent.constructor(noop, label);
      var result = parent._result;
      config.instrument && instrument('chained', parent, child);

      if (state === PENDING) {
        subscribe(parent, child, onFulfillment, onRejection);
      } else {
        var callback = state === FULFILLED ? onFulfillment : onRejection;
        config.async(() => invokeCallback(state, child, callback, result));
      }

      return child;
    }

    class Enumerator {
      constructor(Constructor, input, abortOnReject, label) {
        this._instanceConstructor = Constructor;
        this.promise = new Constructor(noop, label);
        this._abortOnReject = abortOnReject;
        this._isUsingOwnPromise = Constructor === Promise;
        this._isUsingOwnResolve = Constructor.resolve === resolve$$1;

        this._init(...arguments);
      }

      _init(Constructor, input) {
        var len = input.length || 0;
        this.length = len;
        this._remaining = len;
        this._result = new Array(len);

        this._enumerate(input);
      }

      _enumerate(input) {
        var length = this.length;
        var promise = this.promise;

        for (var i = 0; promise._state === PENDING && i < length; i++) {
          this._eachEntry(input[i], i, true);
        }

        this._checkFullfillment();
      }

      _checkFullfillment() {
        if (this._remaining === 0) {
          var result = this._result;
          fulfill(this.promise, result);
          this._result = null;
        }
      }

      _settleMaybeThenable(entry, i, firstPass) {
        var c = this._instanceConstructor;

        if (this._isUsingOwnResolve) {
          var then$$1,
            error,
            succeeded = true;

          try {
            then$$1 = entry.then;
          } catch (e) {
            succeeded = false;
            error = e;
          }

          if (then$$1 === then && entry._state !== PENDING) {
            entry._onError = null;

            this._settledAt(entry._state, i, entry._result, firstPass);
          } else if (typeof then$$1 !== 'function') {
            this._settledAt(FULFILLED, i, entry, firstPass);
          } else if (this._isUsingOwnPromise) {
            var promise = new c(noop);

            if (succeeded === false) {
              reject(promise, error);
            } else {
              handleMaybeThenable(promise, entry, then$$1);

              this._willSettleAt(promise, i, firstPass);
            }
          } else {
            this._willSettleAt(
              new c((resolve) => resolve(entry)),
              i,
              firstPass,
            );
          }
        } else {
          this._willSettleAt(c.resolve(entry), i, firstPass);
        }
      }

      _eachEntry(entry, i, firstPass) {
        if (entry !== null && typeof entry === 'object') {
          this._settleMaybeThenable(entry, i, firstPass);
        } else {
          this._setResultAt(FULFILLED, i, entry, firstPass);
        }
      }

      _settledAt(state, i, value, firstPass) {
        var promise = this.promise;

        if (promise._state === PENDING) {
          if (this._abortOnReject && state === REJECTED) {
            reject(promise, value);
          } else {
            this._setResultAt(state, i, value, firstPass);

            this._checkFullfillment();
          }
        }
      }

      _setResultAt(state, i, value, firstPass) {
        this._remaining--;
        this._result[i] = value;
      }

      _willSettleAt(promise, i, firstPass) {
        subscribe(
          promise,
          undefined,
          (value) => this._settledAt(FULFILLED, i, value, firstPass),
          (reason) => this._settledAt(REJECTED, i, reason, firstPass),
        );
      }
    }

    function setSettledResult(state, i, value) {
      this._remaining--;

      if (state === FULFILLED) {
        this._result[i] = {
          state: 'fulfilled',
          value: value,
        };
      } else {
        this._result[i] = {
          state: 'rejected',
          reason: value,
        };
      }
    }
    /**
    `Promise.all` accepts an array of promises, and returns a new promise which
    is fulfilled with an array of fulfillment values for the passed promises, or
    rejected with the reason of the first passed promise to be rejected. It casts all
    elements of the passed iterable to promises as it runs this algorithm.
  
    Example:
  
    ```javascript
    import Promise, { resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // The array here would be [ 1, 2, 3 ];
    });
    ```
  
    If any of the `promises` given to `RSVP.all` are rejected, the first promise
    that is rejected will be given as an argument to the returned promises's
    rejection handler. For example:
  
    Example:
  
    ```javascript
    import Promise, { resolve, reject } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error("2"));
    let promise3 = reject(new Error("3"));
    let promises = [ promise1, promise2, promise3 ];
  
    Promise.all(promises).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(error) {
      // error.message === "2"
    });
    ```
  
    @method all
    @for Promise
    @param {Array} entries array of promises
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all `promises` have been
    fulfilled, or rejected if any of them become rejected.
    @static
  */

    function all(entries, label) {
      if (!Array.isArray(entries)) {
        return this.reject(
          new TypeError('Promise.all must be called with an array'),
          label,
        );
      }

      return new Enumerator(
        this,
        entries,
        true,
        /* abort on reject */
        label,
      ).promise;
    }
    /**
    `Promise.race` returns a new promise which is settled in the same way as the
    first passed promise to settle.
  
    Example:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 2');
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // result === 'promise 2' because it was resolved before promise1
      // was resolved.
    });
    ```
  
    `Promise.race` is deterministic in that only the state of the first
    settled promise matters. For example, even if other promises given to the
    `promises` array argument are resolved, but the first settled promise has
    become rejected before the other promises became fulfilled, the returned
    promise will become rejected:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise1 = new Promise(function(resolve, reject){
      setTimeout(function(){
        resolve('promise 1');
      }, 200);
    });
  
    let promise2 = new Promise(function(resolve, reject){
      setTimeout(function(){
        reject(new Error('promise 2'));
      }, 100);
    });
  
    Promise.race([promise1, promise2]).then(function(result){
      // Code here never runs
    }, function(reason){
      // reason.message === 'promise 2' because promise 2 became rejected before
      // promise 1 became fulfilled
    });
    ```
  
    An example real-world use case is implementing timeouts:
  
    ```javascript
    import Promise from 'rsvp';
  
    Promise.race([ajax('foo.json'), timeout(5000)])
    ```
  
    @method race
    @for Promise
    @static
    @param {Array} entries array of promises to observe
    @param {String} [label] optional string for describing the promise returned.
    Useful for tooling.
    @return {Promise} a promise which settles in the same way as the first passed
    promise to settle.
  */

    function race(entries, label) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(noop, label);

      if (!Array.isArray(entries)) {
        reject(
          promise,
          new TypeError('Promise.race must be called with an array'),
        );
        return promise;
      }

      for (var i = 0; promise._state === PENDING && i < entries.length; i++) {
        subscribe(
          Constructor.resolve(entries[i]),
          undefined,
          (value) => resolve$1(promise, value),
          (reason) => reject(promise, reason),
        );
      }

      return promise;
    }
    /**
    `Promise.reject` returns a promise rejected with the passed `reason`.
    It is shorthand for the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = new Promise(function(resolve, reject){
      reject(new Error('WHOOPS'));
    });
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    Instead of writing the above, your code now simply becomes the following:
  
    ```javascript
    import Promise from 'rsvp';
  
    let promise = Promise.reject(new Error('WHOOPS'));
  
    promise.then(function(value){
      // Code here doesn't run because the promise is rejected!
    }, function(reason){
      // reason.message === 'WHOOPS'
    });
    ```
  
    @method reject
    @for Promise
    @static
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */

    function reject$1(reason, label) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(noop, label);
      reject(promise, reason);
      return promise;
    }

    var guidKey = 'rsvp_' + Date.now() + '-';
    var counter = 0;

    function needsResolver() {
      throw new TypeError(
        'You must pass a resolver function as the first argument to the promise constructor',
      );
    }

    function needsNew() {
      throw new TypeError(
        "Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.",
      );
    }
    /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
  
    Terminology
    -----------
  
    - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
  
    A promise can be in one of three states: pending, fulfilled, or rejected.
  
    Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
  
    Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
  
  
    Basic Usage:
    ------------
  
    ```js
    let promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
  
      // on failure
      reject(reason);
    });
  
    promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Advanced Usage:
    ---------------
  
    Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
  
    ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        let xhr = new XMLHttpRequest();
  
        xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
  
        function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
  
    getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
  
    Unlike callbacks, promises are great composable primitives.
  
    ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
  
      return values;
    });
    ```
  
    @class Promise
    @public
    @param {function} resolver
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @constructor
  */

    class Promise {
      constructor(resolver, label) {
        this._id = counter++;
        this._label = label;
        this._state = undefined;
        this._result = undefined;
        this._subscribers = [];
        config.instrument && instrument('created', this);

        if (noop !== resolver) {
          typeof resolver !== 'function' && needsResolver();
          this instanceof Promise
            ? initializePromise(this, resolver)
            : needsNew();
        }
      }

      _onError(reason) {
        config.after(() => {
          if (this._onError) {
            config.trigger('error', reason, this._label);
          }
        });
      }
      /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
    
      ```js
      function findAuthor(){
        throw new Error('couldn\'t find that author');
      }
    
      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
    
      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
    
      @method catch
      @param {Function} onRejection
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */

      catch(onRejection, label) {
        return this.then(undefined, onRejection, label);
      }
      /**
      `finally` will be invoked regardless of the promise's fate just as native
      try/catch/finally behaves
    
      Synchronous example:
    
      ```js
      findAuthor() {
        if (Math.random() > 0.5) {
          throw new Error();
        }
        return new Author();
      }
    
      try {
        return findAuthor(); // succeed or fail
      } catch(error) {
        return findOtherAuthor();
      } finally {
        // always runs
        // doesn't affect the return value
      }
      ```
    
      Asynchronous example:
    
      ```js
      findAuthor().catch(function(reason){
        return findOtherAuthor();
      }).finally(function(){
        // author was either found, or not
      });
      ```
    
      @method finally
      @param {Function} callback
      @param {String} [label] optional string for labeling the promise.
      Useful for tooling.
      @return {Promise}
    */

      finally(callback, label) {
        var promise = this;
        var constructor = promise.constructor;

        if (typeof callback === 'function') {
          return promise.then(
            (value) => constructor.resolve(callback()).then(() => value),
            (reason) =>
              constructor.resolve(callback()).then(() => {
                throw reason;
              }),
          );
        }

        return promise.then(callback, callback);
      }
    }

    _exports.Promise = Promise;
    Promise.cast = resolve$$1; // deprecated

    Promise.all = all;
    Promise.race = race;
    Promise.resolve = resolve$$1;
    Promise.reject = reject$1;
    Promise.prototype._guidKey = guidKey;
    /**
    The primary way of interacting with a promise is through its `then` method,
    which registers callbacks to receive either a promise's eventual value or the
    reason why the promise cannot be fulfilled.
  
    ```js
    findUser().then(function(user){
      // user is available
    }, function(reason){
      // user is unavailable, and you are given the reason why
    });
    ```
  
    Chaining
    --------
  
    The return value of `then` is itself a promise.  This second, 'downstream'
    promise is resolved with the return value of the first promise's fulfillment
    or rejection handler, or rejected if the handler throws an exception.
  
    ```js
    findUser().then(function (user) {
      return user.name;
    }, function (reason) {
      return 'default name';
    }).then(function (userName) {
      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
      // will be `'default name'`
    });
  
    findUser().then(function (user) {
      throw new Error('Found user, but still unhappy');
    }, function (reason) {
      throw new Error('`findUser` rejected and we\'re unhappy');
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
      // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
    });
    ```
    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
  
    ```js
    findUser().then(function (user) {
      throw new PedagogicalException('Upstream error');
    }).then(function (value) {
      // never reached
    }).then(function (value) {
      // never reached
    }, function (reason) {
      // The `PedgagocialException` is propagated all the way down to here
    });
    ```
  
    Assimilation
    ------------
  
    Sometimes the value you want to propagate to a downstream promise can only be
    retrieved asynchronously. This can be achieved by returning a promise in the
    fulfillment or rejection handler. The downstream promise will then be pending
    until the returned promise is settled. This is called *assimilation*.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // The user's comments are now available
    });
    ```
  
    If the assimliated promise rejects, then the downstream promise will also reject.
  
    ```js
    findUser().then(function (user) {
      return findCommentsByAuthor(user);
    }).then(function (comments) {
      // If `findCommentsByAuthor` fulfills, we'll have the value here
    }, function (reason) {
      // If `findCommentsByAuthor` rejects, we'll have the reason here
    });
    ```
  
    Simple Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let result;
  
    try {
      result = findResult();
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
    findResult(function(result, err){
      if (err) {
        // failure
      } else {
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findResult().then(function(result){
      // success
    }, function(reason){
      // failure
    });
    ```
  
    Advanced Example
    --------------
  
    Synchronous Example
  
    ```javascript
    let author, books;
  
    try {
      author = findAuthor();
      books  = findBooksByAuthor(author);
      // success
    } catch(reason) {
      // failure
    }
    ```
  
    Errback Example
  
    ```js
  
    function foundBooks(books) {
  
    }
  
    function failure(reason) {
  
    }
  
    findAuthor(function(author, err){
      if (err) {
        failure(err);
        // failure
      } else {
        try {
          findBoooksByAuthor(author, function(books, err) {
            if (err) {
              failure(err);
            } else {
              try {
                foundBooks(books);
              } catch(reason) {
                failure(reason);
              }
            }
          });
        } catch(error) {
          failure(err);
        }
        // success
      }
    });
    ```
  
    Promise Example;
  
    ```javascript
    findAuthor().
      then(findBooksByAuthor).
      then(function(books){
        // found books
    }).catch(function(reason){
      // something went wrong
    });
    ```
  
    @method then
    @param {Function} onFulfillment
    @param {Function} onRejection
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */

    Promise.prototype.then = then;

    function makeObject(_, argumentNames) {
      var obj = {};
      var length = _.length;
      var args = new Array(length);

      for (var x = 0; x < length; x++) {
        args[x] = _[x];
      }

      for (var i = 0; i < argumentNames.length; i++) {
        var name = argumentNames[i];
        obj[name] = args[i + 1];
      }

      return obj;
    }

    function arrayResult(_) {
      var length = _.length;
      var args = new Array(length - 1);

      for (var i = 1; i < length; i++) {
        args[i - 1] = _[i];
      }

      return args;
    }

    function wrapThenable(then, promise) {
      return {
        then(onFulFillment, onRejection) {
          return then.call(promise, onFulFillment, onRejection);
        },
      };
    }
    /**
    `denodeify` takes a 'node-style' function and returns a function that
    will return an `Promise`. You can use `denodeify` in Node.js or the
    browser when you'd prefer to use promises over using callbacks. For example,
    `denodeify` transforms the following:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) return handleError(err);
      handleData(data);
    });
    ```
  
    into:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
  
    readFile('myfile.txt').then(handleData, handleError);
    ```
  
    If the node function has multiple success parameters, then `denodeify`
    just returns the first one:
  
    ```javascript
    let request = denodeify(require('request'));
  
    request('http://example.com').then(function(res) {
      // ...
    });
    ```
  
    However, if you need all success parameters, setting `denodeify`'s
    second parameter to `true` causes it to return all success parameters
    as an array:
  
    ```javascript
    let request = denodeify(require('request'), true);
  
    request('http://example.com').then(function(result) {
      // result[0] -> res
      // result[1] -> body
    });
    ```
  
    Or if you pass it an array with names it returns the parameters as a hash:
  
    ```javascript
    let request = denodeify(require('request'), ['res', 'body']);
  
    request('http://example.com').then(function(result) {
      // result.res
      // result.body
    });
    ```
  
    Sometimes you need to retain the `this`:
  
    ```javascript
    let app = require('express')();
    let render = denodeify(app.render.bind(app));
    ```
  
    The denodified function inherits from the original function. It works in all
    environments, except IE 10 and below. Consequently all properties of the original
    function are available to you. However, any properties you change on the
    denodeified function won't be changed on the original function. Example:
  
    ```javascript
    let request = denodeify(require('request')),
        cookieJar = request.jar(); // <- Inheritance is used here
  
    request('http://example.com', {jar: cookieJar}).then(function(res) {
      // cookieJar.cookies holds now the cookies returned by example.com
    });
    ```
  
    Using `denodeify` makes it easier to compose asynchronous operations instead
    of using callbacks. For example, instead of:
  
    ```javascript
    let fs = require('fs');
  
    fs.readFile('myfile.txt', function(err, data){
      if (err) { ... } // Handle error
      fs.writeFile('myfile2.txt', data, function(err){
        if (err) { ... } // Handle error
        console.log('done')
      });
    });
    ```
  
    you can chain the operations together using `then` from the returned promise:
  
    ```javascript
    let fs = require('fs');
    let readFile = denodeify(fs.readFile);
    let writeFile = denodeify(fs.writeFile);
  
    readFile('myfile.txt').then(function(data){
      return writeFile('myfile2.txt', data);
    }).then(function(){
      console.log('done')
    }).catch(function(error){
      // Handle error
    });
    ```
  
    @method denodeify
    @public
    @static
    @for rsvp
    @param {Function} nodeFunc a 'node-style' function that takes a callback as
    its last argument. The callback expects an error to be passed as its first
    argument (if an error occurred, otherwise null), and the value from the
    operation as its second argument ('function(err, value){ }').
    @param {Boolean|Array} [options] An optional paramter that if set
    to `true` causes the promise to fulfill with the callback's success arguments
    as an array. This is useful if the node function has multiple success
    paramters. If you set this paramter to an array with names, the promise will
    fulfill with a hash with these names as keys and the success parameters as
    values.
    @return {Function} a function that wraps `nodeFunc` to return a `Promise`
  */

    function denodeify(nodeFunc, options) {
      var fn = function () {
        var l = arguments.length;
        var args = new Array(l + 1);
        var promiseInput = false;

        for (var i = 0; i < l; ++i) {
          var arg = arguments[i]; // TODO: this code really needs to be cleaned up

          if (!promiseInput) {
            if (arg !== null && typeof arg === 'object') {
              if (arg.constructor === Promise) {
                promiseInput = true;
              } else {
                try {
                  promiseInput = arg.then;
                } catch (error) {
                  var p = new Promise(noop);
                  reject(p, error);
                  return p;
                }
              }
            } else {
              promiseInput = false;
            }

            if (promiseInput && promiseInput !== true) {
              arg = wrapThenable(promiseInput, arg);
            }
          }

          args[i] = arg;
        }

        var promise = new Promise(noop);

        args[l] = function (err, val) {
          if (err) {
            reject(promise, err);
          } else if (options === undefined) {
            resolve$1(promise, val);
          } else if (options === true) {
            resolve$1(promise, arrayResult(arguments));
          } else if (Array.isArray(options)) {
            resolve$1(promise, makeObject(arguments, options));
          } else {
            resolve$1(promise, val);
          }
        };

        if (promiseInput) {
          return handlePromiseInput(promise, args, nodeFunc, this);
        } else {
          return handleValueInput(promise, args, nodeFunc, this);
        }
      };

      fn.__proto__ = nodeFunc;
      return fn;
    }

    function handleValueInput(promise, args, nodeFunc, self) {
      try {
        nodeFunc.apply(self, args);
      } catch (error) {
        reject(promise, error);
      }

      return promise;
    }

    function handlePromiseInput(promise, args, nodeFunc, self) {
      return Promise.all(args).then((args) =>
        handleValueInput(promise, args, nodeFunc, self),
      );
    }
    /**
    This is a convenient alias for `Promise.all`.
  
    @method all
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
  */

    function all$1(array, label) {
      return Promise.all(array, label);
    }
    /**
  @module rsvp
  @public
  **/

    class AllSettled extends Enumerator {
      constructor(Constructor, entries, label) {
        super(
          Constructor,
          entries,
          false,
          /* don't abort on reject */
          label,
        );
      }
    }

    AllSettled.prototype._setResultAt = setSettledResult;
    /**
  `RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
  a fail-fast method, it waits until all the promises have returned and
  shows you all the results. This is useful if you want to handle multiple
  promises' failure states together as a set.
   Returns a promise that is fulfilled when all the given promises have been
  settled. The return promise is fulfilled with an array of the states of
  the promises passed into the `promises` array argument.
   Each state object will either indicate fulfillment or rejection, and
  provide the corresponding value or reason. The states will take one of
  the following formats:
   ```javascript
  { state: 'fulfilled', value: value }
    or
  { state: 'rejected', reason: reason }
  ```
   Example:
   ```javascript
  let promise1 = RSVP.Promise.resolve(1);
  let promise2 = RSVP.Promise.reject(new Error('2'));
  let promise3 = RSVP.Promise.reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];
   RSVP.allSettled(promises).then(function(array){
    // array == [
    //   { state: 'fulfilled', value: 1 },
    //   { state: 'rejected', reason: Error },
    //   { state: 'rejected', reason: Error }
    // ]
    // Note that for the second item, reason.message will be '2', and for the
    // third item, reason.message will be '3'.
  }, function(error) {
    // Not run. (This block would only be called if allSettled had failed,
    // for instance if passed an incorrect argument type.)
  });
  ```
   @method allSettled
  @public
  @static
  @for rsvp
  @param {Array} entries
  @param {String} [label] - optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with an array of the settled
  states of the constituent promises.
  */

    function allSettled(entries, label) {
      if (!Array.isArray(entries)) {
        return Promise.reject(
          new TypeError('Promise.allSettled must be called with an array'),
          label,
        );
      }

      return new AllSettled(Promise, entries, label).promise;
    }
    /**
    This is a convenient alias for `Promise.race`.
  
    @method race
    @public
    @static
    @for rsvp
    @param {Array} array Array of promises.
    @param {String} [label] An optional label. This is useful
    for tooling.
   */

    function race$1(array, label) {
      return Promise.race(array, label);
    }

    class PromiseHash extends Enumerator {
      constructor(Constructor, object, abortOnReject, label) {
        if (abortOnReject === void 0) {
          abortOnReject = true;
        }

        super(Constructor, object, abortOnReject, label);
      }

      _init(Constructor, object) {
        this._result = {};

        this._enumerate(object);
      }

      _enumerate(input) {
        var keys = Object.keys(input);
        var length = keys.length;
        var promise = this.promise;
        this._remaining = length;
        var key, val;

        for (var i = 0; promise._state === PENDING && i < length; i++) {
          key = keys[i];
          val = input[key];

          this._eachEntry(val, key, true);
        }

        this._checkFullfillment();
      }
    }
    /**
    `hash` is similar to `all`, but takes an object instead of an array
    for its `promises` argument.
  
    Returns a promise that is fulfilled when all the given promises have been
    fulfilled, or rejected if any of them become rejected. The returned promise
    is fulfilled with a hash that has the same key names as the `promises` object
    argument. If any of the values in the object are not promises, they will
    simply be copied over to the fulfilled object.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hash(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: 1,
      //   yourPromise: 2,
      //   theirPromise: 3,
      //   notAPromise: 4
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the first promise
    that is rejected will be given as the reason to the rejection handler.
  
    Example:
  
    ```javascript
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejectedPromise')),
      anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
    };
  
    hash(promises).then(function(hash){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === 'rejectedPromise'
    });
    ```
  
    An important note: `hash` is intended for plain JavaScript objects that
    are just a set of keys and values. `hash` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import { hash, resolve } from 'rsvp';
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hash(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: 'Example'
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hash
    @public
    @static
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when all properties of `promises`
    have been fulfilled, or rejected if any of them become rejected.
  */

    function hash(object, label) {
      return Promise.resolve(object, label).then(function (object) {
        if (object === null || typeof object !== 'object') {
          throw new TypeError('Promise.hash must be called with an object');
        }

        return new PromiseHash(Promise, object, label).promise;
      });
    }

    class HashSettled extends PromiseHash {
      constructor(Constructor, object, label) {
        super(Constructor, object, false, label);
      }
    }

    HashSettled.prototype._setResultAt = setSettledResult;
    /**
    `hashSettled` is similar to `allSettled`, but takes an object
    instead of an array for its `promises` argument.
  
    Unlike `all` or `hash`, which implement a fail-fast method,
    but like `allSettled`, `hashSettled` waits until all the
    constituent promises have returned and then shows you all the results
    with their states and values/reasons. This is useful if you want to
    handle multiple promises' failure states together as a set.
  
    Returns a promise that is fulfilled when all the given promises have been
    settled, or rejected if the passed parameters are invalid.
  
    The returned promise is fulfilled with a hash that has the same key names as
    the `promises` object argument. If any of the values in the object are not
    promises, they will be copied over to the fulfilled object and marked with state
    'fulfilled'.
  
    Example:
  
    ```javascript
    import { hashSettled, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      yourPromise: resolve(2),
      theirPromise: resolve(3),
      notAPromise: 4
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise: { state: 'fulfilled', value: 1 },
      //   yourPromise: { state: 'fulfilled', value: 2 },
      //   theirPromise: { state: 'fulfilled', value: 3 },
      //   notAPromise: { state: 'fulfilled', value: 4 }
      // }
    });
    ```
  
    If any of the `promises` given to `hash` are rejected, the state will
    be set to 'rejected' and the reason for rejection provided.
  
    Example:
  
    ```javascript
    import { hashSettled, reject, resolve } from 'rsvp';
  
    let promises = {
      myPromise: resolve(1),
      rejectedPromise: reject(new Error('rejection')),
      anotherRejectedPromise: reject(new Error('more rejection')),
    };
  
    hashSettled(promises).then(function(hash){
      // hash here is an object that looks like:
      // {
      //   myPromise:              { state: 'fulfilled', value: 1 },
      //   rejectedPromise:        { state: 'rejected', reason: Error },
      //   anotherRejectedPromise: { state: 'rejected', reason: Error },
      // }
      // Note that for rejectedPromise, reason.message == 'rejection',
      // and for anotherRejectedPromise, reason.message == 'more rejection'.
    });
    ```
  
    An important note: `hashSettled` is intended for plain JavaScript objects that
    are just a set of keys and values. `hashSettled` will NOT preserve prototype
    chains.
  
    Example:
  
    ```javascript
    import Promise, { hashSettled, resolve } from 'rsvp';
  
    function MyConstructor(){
      this.example = resolve('Example');
    }
  
    MyConstructor.prototype = {
      protoProperty: Promise.resolve('Proto Property')
    };
  
    let myObject = new MyConstructor();
  
    hashSettled(myObject).then(function(hash){
      // protoProperty will not be present, instead you will just have an
      // object that looks like:
      // {
      //   example: { state: 'fulfilled', value: 'Example' }
      // }
      //
      // hash.hasOwnProperty('protoProperty'); // false
      // 'undefined' === typeof hash.protoProperty
    });
    ```
  
    @method hashSettled
    @public
    @for rsvp
    @param {Object} object
    @param {String} [label] optional string that describes the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled when when all properties of `promises`
    have been settled.
    @static
  */

    function hashSettled(object, label) {
      return Promise.resolve(object, label).then(function (object) {
        if (object === null || typeof object !== 'object') {
          throw new TypeError('hashSettled must be called with an object');
        }

        return new HashSettled(Promise, object, false, label).promise;
      });
    }
    /**
    `rethrow` will rethrow an error on the next turn of the JavaScript event
    loop in order to aid debugging.
  
    Promises A+ specifies that any exceptions that occur with a promise must be
    caught by the promises implementation and bubbled to the last handler. For
    this reason, it is recommended that you always specify a second rejection
    handler function to `then`. However, `rethrow` will throw the exception
    outside of the promise, so it bubbles up to your console if in the browser,
    or domain/cause uncaught exception in Node. `rethrow` will also throw the
    error again so the error can be handled by the promise per the spec.
  
    ```javascript
    import { rethrow } from 'rsvp';
  
    function throws(){
      throw new Error('Whoops!');
    }
  
    let promise = new Promise(function(resolve, reject){
      throws();
    });
  
    promise.catch(rethrow).then(function(){
      // Code here doesn't run because the promise became rejected due to an
      // error!
    }, function (err){
      // handle the error here
    });
    ```
  
    The 'Whoops' error will be thrown on the next turn of the event loop
    and you can watch for it in your console. You can also handle it using a
    rejection handler given to `.then` or `.catch` on the returned promise.
  
    @method rethrow
    @public
    @static
    @for rsvp
    @param {Error} reason reason the promise became rejected.
    @throws Error
    @static
  */

    function rethrow(reason) {
      setTimeout(() => {
        throw reason;
      });
      throw reason;
    }
    /**
    `defer` returns an object similar to jQuery's `$.Deferred`.
    `defer` should be used when porting over code reliant on `$.Deferred`'s
    interface. New code should use the `Promise` constructor instead.
  
    The object returned from `defer` is a plain object with three properties:
  
    * promise - an `Promise`.
    * reject - a function that causes the `promise` property on this object to
      become rejected
    * resolve - a function that causes the `promise` property on this object to
      become fulfilled.
  
    Example:
  
     ```javascript
     let deferred = defer();
  
     deferred.resolve("Success!");
  
     deferred.promise.then(function(value){
       // value here is "Success!"
     });
     ```
  
    @method defer
    @public
    @static
    @for rsvp
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Object}
   */

    function defer(label) {
      var deferred = {
        resolve: undefined,
        reject: undefined,
      };
      deferred.promise = new Promise((resolve, reject) => {
        deferred.resolve = resolve;
        deferred.reject = reject;
      }, label);
      return deferred;
    }

    class MapEnumerator extends Enumerator {
      constructor(Constructor, entries, mapFn, label) {
        super(Constructor, entries, true, label, mapFn);
      }

      _init(Constructor, input, bool, label, mapFn) {
        var len = input.length || 0;
        this.length = len;
        this._remaining = len;
        this._result = new Array(len);
        this._mapFn = mapFn;

        this._enumerate(input);
      }

      _setResultAt(state, i, value, firstPass) {
        if (firstPass) {
          try {
            this._eachEntry(this._mapFn(value, i), i, false);
          } catch (error) {
            this._settledAt(REJECTED, i, error, false);
          }
        } else {
          this._remaining--;
          this._result[i] = value;
        }
      }
    }
    /**
   `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
    meaning that as soon as any promise resolves its value will be passed to `mapFn`.
    `map` returns a promise that will become fulfilled with the result of running
    `mapFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { map, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(result){
      // result is [ 2, 3, 4 ]
    });
    ```
  
    If any of the `promises` given to `map` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { map, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let mapFn = function(item){
      return item + 1;
    };
  
    map(promises, mapFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `map` will also wait if a promise is returned from `mapFn`. For example,
    say you want to get all comments from a set of blog posts, but you need
    the blog posts first because they contain a url to those comments.
  
    ```javscript
    import { map } from 'rsvp';
  
    let mapFn = function(blogPost){
      // getComments does some ajax and returns an Promise that is fulfilled
      // with some comments data
      return getComments(blogPost.comments_url);
    };
  
    // getBlogPosts does some ajax and returns an Promise that is fulfilled
    // with some blog post data
    map(getBlogPosts(), mapFn).then(function(comments){
      // comments is the result of asking the server for the comments
      // of all blog posts returned from getBlogPosts()
    });
    ```
  
    @method map
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} mapFn function to be called on each fulfilled promise.
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise} promise that is fulfilled with the result of calling
    `mapFn` on each fulfilled promise or value when they become fulfilled.
     The promise will be rejected if any of the given `promises` become rejected.
  */

    function map(promises, mapFn, label) {
      if (typeof mapFn !== 'function') {
        return Promise.reject(
          new TypeError('map expects a function as a second argument'),
          label,
        );
      }

      return Promise.resolve(promises, label).then(function (promises) {
        if (!Array.isArray(promises)) {
          throw new TypeError('map must be called with an array');
        }

        return new MapEnumerator(Promise, promises, mapFn, label).promise;
      });
    }
    /**
    This is a convenient alias for `Promise.resolve`.
  
    @method resolve
    @public
    @static
    @for rsvp
    @param {*} value value that the returned promise will be resolved with
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise that will become fulfilled with the given
    `value`
  */

    function resolve$2(value, label) {
      return Promise.resolve(value, label);
    }
    /**
    This is a convenient alias for `Promise.reject`.
  
    @method reject
    @public
    @static
    @for rsvp
    @param {*} reason value that the returned promise will be rejected with.
    @param {String} [label] optional string for identifying the returned promise.
    Useful for tooling.
    @return {Promise} a promise rejected with the given `reason`.
  */

    function reject$2(reason, label) {
      return Promise.reject(reason, label);
    }

    var EMPTY_OBJECT = {};

    class FilterEnumerator extends MapEnumerator {
      _checkFullfillment() {
        if (this._remaining === 0 && this._result !== null) {
          var result = this._result.filter((val) => val !== EMPTY_OBJECT);

          fulfill(this.promise, result);
          this._result = null;
        }
      }

      _setResultAt(state, i, value, firstPass) {
        if (firstPass) {
          this._result[i] = value;
          var val,
            succeeded = true;

          try {
            val = this._mapFn(value, i);
          } catch (error) {
            succeeded = false;

            this._settledAt(REJECTED, i, error, false);
          }

          if (succeeded) {
            this._eachEntry(val, i, false);
          }
        } else {
          this._remaining--;

          if (!value) {
            this._result[i] = EMPTY_OBJECT;
          }
        }
      }
    }
    /**
   `filter` is similar to JavaScript's native `filter` method.
   `filterFn` is eagerly called meaning that as soon as any promise
    resolves its value will be passed to `filterFn`. `filter` returns
    a promise that will become fulfilled with the result of running
    `filterFn` on the values the promises become fulfilled with.
  
    For example:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = resolve(2);
    let promise3 = resolve(3);
  
    let promises = [promise1, promise2, promise3];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(result){
      // result is [ 2, 3 ]
    });
    ```
  
    If any of the `promises` given to `filter` are rejected, the first promise
    that is rejected will be given as an argument to the returned promise's
    rejection handler. For example:
  
    ```javascript
    import { filter, reject, resolve } from 'rsvp';
  
    let promise1 = resolve(1);
    let promise2 = reject(new Error('2'));
    let promise3 = reject(new Error('3'));
    let promises = [ promise1, promise2, promise3 ];
  
    let filterFn = function(item){
      return item > 1;
    };
  
    filter(promises, filterFn).then(function(array){
      // Code here never runs because there are rejected promises!
    }, function(reason) {
      // reason.message === '2'
    });
    ```
  
    `filter` will also wait for any promises returned from `filterFn`.
    For instance, you may want to fetch a list of users then return a subset
    of those users based on some asynchronous operation:
  
    ```javascript
    import { filter, resolve } from 'rsvp';
  
    let alice = { name: 'alice' };
    let bob   = { name: 'bob' };
    let users = [ alice, bob ];
  
    let promises = users.map(function(user){
      return resolve(user);
    });
  
    let filterFn = function(user){
      // Here, Alice has permissions to create a blog post, but Bob does not.
      return getPrivilegesForUser(user).then(function(privs){
        return privs.can_create_blog_post === true;
      });
    };
    filter(promises, filterFn).then(function(users){
      // true, because the server told us only Alice can create a blog post.
      users.length === 1;
      // false, because Alice is the only user present in `users`
      users[0] === bob;
    });
    ```
  
    @method filter
    @public
    @static
    @for rsvp
    @param {Array} promises
    @param {Function} filterFn - function to be called on each resolved value to
    filter the final results.
    @param {String} [label] optional string describing the promise. Useful for
    tooling.
    @return {Promise}
  */

    function filter(promises, filterFn, label) {
      if (typeof filterFn !== 'function') {
        return Promise.reject(
          new TypeError('filter expects function as a second argument'),
          label,
        );
      }

      return Promise.resolve(promises, label).then(function (promises) {
        if (!Array.isArray(promises)) {
          throw new TypeError('filter must be called with an array');
        }

        return new FilterEnumerator(Promise, promises, filterFn, label).promise;
      });
    }

    var len = 0;
    var vertxNext;

    function asap(callback, arg) {
      queue$1[len] = callback;
      queue$1[len + 1] = arg;
      len += 2;

      if (len === 2) {
        // If len is 1, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        scheduleFlush$1();
      }
    }

    var browserWindow = typeof window !== 'undefined' ? window : undefined;
    var browserGlobal = browserWindow || {};
    var BrowserMutationObserver =
      browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
    var isNode =
      typeof self === 'undefined' &&
      typeof process !== 'undefined' &&
      {}.toString.call(process) === '[object process]'; // test for web worker but not in IE10

    var isWorker =
      typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined'; // node

    function useNextTick() {
      var nextTick = process.nextTick; // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // setImmediate should be used instead instead

      var version = process.versions.node.match(
        /^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/,
      );

      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
        nextTick = setImmediate;
      }

      return () => nextTick(flush);
    } // vertx

    function useVertxTimer() {
      if (typeof vertxNext !== 'undefined') {
        return function () {
          vertxNext(flush);
        };
      }

      return useSetTimeout();
    }

    function useMutationObserver() {
      var iterations = 0;
      var observer = new BrowserMutationObserver(flush);
      var node = document.createTextNode('');
      observer.observe(node, {
        characterData: true,
      });
      return () => (node.data = iterations = ++iterations % 2);
    } // web worker

    function useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = flush;
      return () => channel.port2.postMessage(0);
    }

    function useSetTimeout() {
      return () => setTimeout(flush, 1);
    }

    var queue$1 = new Array(1000);

    function flush() {
      for (var i = 0; i < len; i += 2) {
        var callback = queue$1[i];
        var arg = queue$1[i + 1];
        callback(arg);
        queue$1[i] = undefined;
        queue$1[i + 1] = undefined;
      }

      len = 0;
    }

    function attemptVertex() {
      try {
        var vertx = Function('return this')().require('vertx');

        vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return useVertxTimer();
      } catch (e) {
        return useSetTimeout();
      }
    }

    var scheduleFlush$1; // Decide what async method to use to triggering processing of queued callbacks:

    if (isNode) {
      scheduleFlush$1 = useNextTick();
    } else if (BrowserMutationObserver) {
      scheduleFlush$1 = useMutationObserver();
    } else if (isWorker) {
      scheduleFlush$1 = useMessageChannel();
    } else if (browserWindow === undefined && typeof require === 'function') {
      scheduleFlush$1 = attemptVertex();
    } else {
      scheduleFlush$1 = useSetTimeout();
    } // defaults

    config.async = asap;

    config.after = (cb) => setTimeout(cb, 0);

    var cast = resolve$2;
    _exports.cast = cast;

    var async = (callback, arg) => config.async(callback, arg);

    _exports.async = async;

    function on() {
      config.on(...arguments);
    }

    function off() {
      config.off(...arguments);
    } // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`

    if (
      typeof window !== 'undefined' &&
      typeof window['__PROMISE_INSTRUMENTATION__'] === 'object'
    ) {
      var callbacks = window['__PROMISE_INSTRUMENTATION__'];
      configure('instrument', true);

      for (var eventName in callbacks) {
        if (callbacks.hasOwnProperty(eventName)) {
          on(eventName, callbacks[eventName]);
        }
      }
    } // the default export here is for backwards compat:
    //   https://github.com/tildeio/rsvp.js/issues/434

    var rsvp = {
      asap,
      cast,
      Promise,
      EventTarget,
      all: all$1,
      allSettled,
      race: race$1,
      hash,
      hashSettled,
      rethrow,
      defer,
      denodeify,
      configure,
      on,
      off,
      resolve: resolve$2,
      reject: reject$2,
      map,
      async,
      filter,
    };
    var _default = rsvp;
    _exports.default = _default;
  });
  require('@ember/-internals/bootstrap');
})();
(function () {
  if (typeof FastBoot === 'undefined') {
    var current = document.getElementById('fastboot-body-start');
    var _Ember = require.has('ember') ? require('ember').default : Ember;

    if (
      current &&
      typeof _Ember.ViewUtils.isSerializationFirstNode === 'function' &&
      _Ember.ViewUtils.isSerializationFirstNode(current.nextSibling)
    ) {
      _Ember.ApplicationInstance.reopen({
        _bootSync: function (options) {
          if (options === undefined) {
            options = {
              _renderMode: 'rehydrate',
            };
          }

          return this._super(options);
        },
      });

      // Prevent clearRender  by removing `fastboot-body-start` which is already
      // guarded for
      current.parentNode.removeChild(current);
      var end = document.getElementById('fastboot-body-end');

      if (end) {
        end.parentNode.removeChild(end);
      }
    }
  }
})();
(function () {
  function vendorModule() {
    'use strict';

    return {
      default: self['jQuery'],
      __esModule: true,
    };
  }

  define('jquery', [], vendorModule);
})();
define('@fortawesome/fontawesome-svg-core', ['exports'], function (exports) {
  'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly &&
        (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })),
        keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2
        ? ownKeys(Object(source), !0).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(
            target,
            Object.getOwnPropertyDescriptors(source),
          )
        : ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(
              target,
              key,
              Object.getOwnPropertyDescriptor(source, key),
            );
          });
    }

    return target;
  }

  function _typeof(obj) {
    '@babel/helpers - typeof';

    return (
      (_typeof =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? function (obj) {
              return typeof obj;
            }
          : function (obj) {
              return obj &&
                'function' == typeof Symbol &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj;
            }),
      _typeof(obj)
    );
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, 'prototype', {
      writable: false,
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _slicedToArray(arr, i) {
    return (
      _arrayWithHoles(arr) ||
      _iterableToArrayLimit(arr, i) ||
      _unsupportedIterableToArray(arr, i) ||
      _nonIterableRest()
    );
  }

  function _toConsumableArray(arr) {
    return (
      _arrayWithoutHoles(arr) ||
      _iterableToArray(arr) ||
      _unsupportedIterableToArray(arr) ||
      _nonIterableSpread()
    );
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (
      (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
      iter['@@iterator'] != null
    )
      return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i =
      arr == null
        ? null
        : (typeof Symbol !== 'undefined' && arr[Symbol.iterator]) ||
          arr['@@iterator'];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i['return'] != null) _i['return']();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(o);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError(
      'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
    );
  }

  function _nonIterableRest() {
    throw new TypeError(
      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
    );
  }

  var noop = function noop() {};

  var _WINDOW = {};
  var _DOCUMENT = {};
  var _MUTATION_OBSERVER = null;
  var _PERFORMANCE = {
    mark: noop,
    measure: noop,
  };

  try {
    if (typeof window !== 'undefined') _WINDOW = window;
    if (typeof document !== 'undefined') _DOCUMENT = document;
    if (typeof MutationObserver !== 'undefined')
      _MUTATION_OBSERVER = MutationObserver;
    if (typeof performance !== 'undefined') _PERFORMANCE = performance;
  } catch (e) {}

  var _ref = _WINDOW.navigator || {},
    _ref$userAgent = _ref.userAgent,
    userAgent = _ref$userAgent === void 0 ? '' : _ref$userAgent;
  var WINDOW = _WINDOW;
  var DOCUMENT = _DOCUMENT;
  var MUTATION_OBSERVER = _MUTATION_OBSERVER;
  var PERFORMANCE = _PERFORMANCE;
  var IS_BROWSER = !!WINDOW.document;
  var IS_DOM =
    !!DOCUMENT.documentElement &&
    !!DOCUMENT.head &&
    typeof DOCUMENT.addEventListener === 'function' &&
    typeof DOCUMENT.createElement === 'function';
  var IS_IE = ~userAgent.indexOf('MSIE') || ~userAgent.indexOf('Trident/');

  var _familyProxy, _familyProxy2, _familyProxy3, _familyProxy4, _familyProxy5;

  var NAMESPACE_IDENTIFIER = '___FONT_AWESOME___';
  var UNITS_IN_GRID = 16;
  var DEFAULT_CSS_PREFIX = 'fa';
  var DEFAULT_REPLACEMENT_CLASS = 'svg-inline--fa';
  var DATA_FA_I2SVG = 'data-fa-i2svg';
  var DATA_FA_PSEUDO_ELEMENT = 'data-fa-pseudo-element';
  var DATA_FA_PSEUDO_ELEMENT_PENDING = 'data-fa-pseudo-element-pending';
  var DATA_PREFIX = 'data-prefix';
  var DATA_ICON = 'data-icon';
  var HTML_CLASS_I2SVG_BASE_CLASS = 'fontawesome-i2svg';
  var MUTATION_APPROACH_ASYNC = 'async';
  var TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS = ['HTML', 'HEAD', 'STYLE', 'SCRIPT'];
  var PRODUCTION = (function () {
    try {
      return process.env.NODE_ENV === 'production';
    } catch (e) {
      return false;
    }
  })();
  var FAMILY_CLASSIC = 'classic';
  var FAMILY_SHARP = 'sharp';
  var FAMILIES = [FAMILY_CLASSIC, FAMILY_SHARP];

  function familyProxy(obj) {
    // Defaults to the classic family if family is not available
    return new Proxy(obj, {
      get: function get(target, prop) {
        return prop in target ? target[prop] : target[FAMILY_CLASSIC];
      },
    });
  }
  var PREFIX_TO_STYLE = familyProxy(
    ((_familyProxy = {}),
    _defineProperty(_familyProxy, FAMILY_CLASSIC, {
      fa: 'solid',
      fas: 'solid',
      'fa-solid': 'solid',
      far: 'regular',
      'fa-regular': 'regular',
      fal: 'light',
      'fa-light': 'light',
      fat: 'thin',
      'fa-thin': 'thin',
      fad: 'duotone',
      'fa-duotone': 'duotone',
      fab: 'brands',
      'fa-brands': 'brands',
      fak: 'kit',
      'fa-kit': 'kit',
    }),
    _defineProperty(_familyProxy, FAMILY_SHARP, {
      fa: 'solid',
      fass: 'solid',
      'fa-solid': 'solid',
    }),
    _familyProxy),
  );
  var STYLE_TO_PREFIX = familyProxy(
    ((_familyProxy2 = {}),
    _defineProperty(_familyProxy2, FAMILY_CLASSIC, {
      solid: 'fas',
      regular: 'far',
      light: 'fal',
      thin: 'fat',
      duotone: 'fad',
      brands: 'fab',
      kit: 'fak',
    }),
    _defineProperty(_familyProxy2, FAMILY_SHARP, {
      solid: 'fass',
    }),
    _familyProxy2),
  );
  var PREFIX_TO_LONG_STYLE = familyProxy(
    ((_familyProxy3 = {}),
    _defineProperty(_familyProxy3, FAMILY_CLASSIC, {
      fab: 'fa-brands',
      fad: 'fa-duotone',
      fak: 'fa-kit',
      fal: 'fa-light',
      far: 'fa-regular',
      fas: 'fa-solid',
      fat: 'fa-thin',
    }),
    _defineProperty(_familyProxy3, FAMILY_SHARP, {
      fass: 'fa-solid',
    }),
    _familyProxy3),
  );
  var LONG_STYLE_TO_PREFIX = familyProxy(
    ((_familyProxy4 = {}),
    _defineProperty(_familyProxy4, FAMILY_CLASSIC, {
      'fa-brands': 'fab',
      'fa-duotone': 'fad',
      'fa-kit': 'fak',
      'fa-light': 'fal',
      'fa-regular': 'far',
      'fa-solid': 'fas',
      'fa-thin': 'fat',
    }),
    _defineProperty(_familyProxy4, FAMILY_SHARP, {
      'fa-solid': 'fass',
    }),
    _familyProxy4),
  );
  var ICON_SELECTION_SYNTAX_PATTERN = /fa(s|r|l|t|d|b|k|ss)?[\-\ ]/; // eslint-disable-line no-useless-escape

  var LAYERS_TEXT_CLASSNAME = 'fa-layers-text';
  var FONT_FAMILY_PATTERN = /Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Sharp|Kit)?.*/i; // TODO: this needs to support fass
  // TODO: do we need to handle font-weight for kit SVG pseudo-elements?

  var FONT_WEIGHT_TO_PREFIX = familyProxy(
    ((_familyProxy5 = {}),
    _defineProperty(_familyProxy5, FAMILY_CLASSIC, {
      900: 'fas',
      400: 'far',
      normal: 'far',
      300: 'fal',
      100: 'fat',
    }),
    _defineProperty(_familyProxy5, FAMILY_SHARP, {
      900: 'fass',
    }),
    _familyProxy5),
  );
  var oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var oneToTwenty = oneToTen.concat([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  var ATTRIBUTES_WATCHED_FOR_MUTATION = [
    'class',
    'data-prefix',
    'data-icon',
    'data-fa-transform',
    'data-fa-mask',
  ];
  var DUOTONE_CLASSES = {
    GROUP: 'duotone-group',
    SWAP_OPACITY: 'swap-opacity',
    PRIMARY: 'primary',
    SECONDARY: 'secondary',
  };
  var prefixes = new Set();
  Object.keys(STYLE_TO_PREFIX[FAMILY_CLASSIC]).map(prefixes.add.bind(prefixes));
  Object.keys(STYLE_TO_PREFIX[FAMILY_SHARP]).map(prefixes.add.bind(prefixes));
  var RESERVED_CLASSES = []
    .concat(FAMILIES, _toConsumableArray(prefixes), [
      '2xs',
      'xs',
      'sm',
      'lg',
      'xl',
      '2xl',
      'beat',
      'border',
      'fade',
      'beat-fade',
      'bounce',
      'flip-both',
      'flip-horizontal',
      'flip-vertical',
      'flip',
      'fw',
      'inverse',
      'layers-counter',
      'layers-text',
      'layers',
      'li',
      'pull-left',
      'pull-right',
      'pulse',
      'rotate-180',
      'rotate-270',
      'rotate-90',
      'rotate-by',
      'shake',
      'spin-pulse',
      'spin-reverse',
      'spin',
      'stack-1x',
      'stack-2x',
      'stack',
      'ul',
      DUOTONE_CLASSES.GROUP,
      DUOTONE_CLASSES.SWAP_OPACITY,
      DUOTONE_CLASSES.PRIMARY,
      DUOTONE_CLASSES.SECONDARY,
    ])
    .concat(
      oneToTen.map(function (n) {
        return ''.concat(n, 'x');
      }),
    )
    .concat(
      oneToTwenty.map(function (n) {
        return 'w-'.concat(n);
      }),
    );

  var initial = WINDOW.FontAwesomeConfig || {};

  function getAttrConfig(attr) {
    var element = DOCUMENT.querySelector('script[' + attr + ']');

    if (element) {
      return element.getAttribute(attr);
    }
  }

  function coerce(val) {
    // Getting an empty string will occur if the attribute is set on the HTML tag but without a value
    // We'll assume that this is an indication that it should be toggled to true
    if (val === '') return true;
    if (val === 'false') return false;
    if (val === 'true') return true;
    return val;
  }

  if (DOCUMENT && typeof DOCUMENT.querySelector === 'function') {
    var attrs = [
      ['data-family-prefix', 'familyPrefix'],
      ['data-css-prefix', 'cssPrefix'],
      ['data-family-default', 'familyDefault'],
      ['data-style-default', 'styleDefault'],
      ['data-replacement-class', 'replacementClass'],
      ['data-auto-replace-svg', 'autoReplaceSvg'],
      ['data-auto-add-css', 'autoAddCss'],
      ['data-auto-a11y', 'autoA11y'],
      ['data-search-pseudo-elements', 'searchPseudoElements'],
      ['data-observe-mutations', 'observeMutations'],
      ['data-mutate-approach', 'mutateApproach'],
      ['data-keep-original-source', 'keepOriginalSource'],
      ['data-measure-performance', 'measurePerformance'],
      ['data-show-missing-icons', 'showMissingIcons'],
    ];
    attrs.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        attr = _ref2[0],
        key = _ref2[1];

      var val = coerce(getAttrConfig(attr));

      if (val !== undefined && val !== null) {
        initial[key] = val;
      }
    });
  }

  var _default = {
    styleDefault: 'solid',
    familyDefault: 'classic',
    cssPrefix: DEFAULT_CSS_PREFIX,
    replacementClass: DEFAULT_REPLACEMENT_CLASS,
    autoReplaceSvg: true,
    autoAddCss: true,
    autoA11y: true,
    searchPseudoElements: false,
    observeMutations: true,
    mutateApproach: 'async',
    keepOriginalSource: true,
    measurePerformance: false,
    showMissingIcons: true,
  }; // familyPrefix is deprecated but we must still support it if present

  if (initial.familyPrefix) {
    initial.cssPrefix = initial.familyPrefix;
  }

  var _config = _objectSpread2(_objectSpread2({}, _default), initial);

  if (!_config.autoReplaceSvg) _config.observeMutations = false;
  var config = {};
  Object.keys(_default).forEach(function (key) {
    Object.defineProperty(config, key, {
      enumerable: true,
      set: function set(val) {
        _config[key] = val;

        _onChangeCb.forEach(function (cb) {
          return cb(config);
        });
      },
      get: function get() {
        return _config[key];
      },
    });
  }); // familyPrefix is deprecated as of 6.2.0 and should be removed in 7.0.0

  Object.defineProperty(config, 'familyPrefix', {
    enumerable: true,
    set: function set(val) {
      _config.cssPrefix = val;

      _onChangeCb.forEach(function (cb) {
        return cb(config);
      });
    },
    get: function get() {
      return _config.cssPrefix;
    },
  });
  WINDOW.FontAwesomeConfig = config;
  var _onChangeCb = [];
  function onChange(cb) {
    _onChangeCb.push(cb);

    return function () {
      _onChangeCb.splice(_onChangeCb.indexOf(cb), 1);
    };
  }

  var d = UNITS_IN_GRID;
  var meaninglessTransform = {
    size: 16,
    x: 0,
    y: 0,
    rotate: 0,
    flipX: false,
    flipY: false,
  };
  function insertCss(css) {
    if (!css || !IS_DOM) {
      return;
    }

    var style = DOCUMENT.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    var headChildren = DOCUMENT.head.childNodes;
    var beforeChild = null;

    for (var i = headChildren.length - 1; i > -1; i--) {
      var child = headChildren[i];
      var tagName = (child.tagName || '').toUpperCase();

      if (['STYLE', 'LINK'].indexOf(tagName) > -1) {
        beforeChild = child;
      }
    }

    DOCUMENT.head.insertBefore(style, beforeChild);
    return css;
  }
  var idPool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  function nextUniqueId() {
    var size = 12;
    var id = '';

    while (size-- > 0) {
      id += idPool[(Math.random() * 62) | 0];
    }

    return id;
  }
  function toArray(obj) {
    var array = [];

    for (var i = (obj || []).length >>> 0; i--; ) {
      array[i] = obj[i];
    }

    return array;
  }
  function classArray(node) {
    if (node.classList) {
      return toArray(node.classList);
    } else {
      return (node.getAttribute('class') || '').split(' ').filter(function (i) {
        return i;
      });
    }
  }
  function htmlEscape(str) {
    return ''
      .concat(str)
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
  }
  function joinAttributes(attributes) {
    return Object.keys(attributes || {})
      .reduce(function (acc, attributeName) {
        return (
          acc +
          ''
            .concat(attributeName, '="')
            .concat(htmlEscape(attributes[attributeName]), '" ')
        );
      }, '')
      .trim();
  }
  function joinStyles(styles) {
    return Object.keys(styles || {}).reduce(function (acc, styleName) {
      return (
        acc + ''.concat(styleName, ': ').concat(styles[styleName].trim(), ';')
      );
    }, '');
  }
  function transformIsMeaningful(transform) {
    return (
      transform.size !== meaninglessTransform.size ||
      transform.x !== meaninglessTransform.x ||
      transform.y !== meaninglessTransform.y ||
      transform.rotate !== meaninglessTransform.rotate ||
      transform.flipX ||
      transform.flipY
    );
  }
  function transformForSvg(_ref) {
    var transform = _ref.transform,
      containerWidth = _ref.containerWidth,
      iconWidth = _ref.iconWidth;
    var outer = {
      transform: 'translate('.concat(containerWidth / 2, ' 256)'),
    };
    var innerTranslate = 'translate('
      .concat(transform.x * 32, ', ')
      .concat(transform.y * 32, ') ');
    var innerScale = 'scale('
      .concat((transform.size / 16) * (transform.flipX ? -1 : 1), ', ')
      .concat((transform.size / 16) * (transform.flipY ? -1 : 1), ') ');
    var innerRotate = 'rotate('.concat(transform.rotate, ' 0 0)');
    var inner = {
      transform: ''
        .concat(innerTranslate, ' ')
        .concat(innerScale, ' ')
        .concat(innerRotate),
    };
    var path = {
      transform: 'translate('.concat((iconWidth / 2) * -1, ' -256)'),
    };
    return {
      outer: outer,
      inner: inner,
      path: path,
    };
  }
  function transformForCss(_ref2) {
    var transform = _ref2.transform,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? UNITS_IN_GRID : _ref2$width,
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? UNITS_IN_GRID : _ref2$height,
      _ref2$startCentered = _ref2.startCentered,
      startCentered =
        _ref2$startCentered === void 0 ? false : _ref2$startCentered;
    var val = '';

    if (startCentered && IS_IE) {
      val += 'translate('
        .concat(transform.x / d - width / 2, 'em, ')
        .concat(transform.y / d - height / 2, 'em) ');
    } else if (startCentered) {
      val += 'translate(calc(-50% + '
        .concat(transform.x / d, 'em), calc(-50% + ')
        .concat(transform.y / d, 'em)) ');
    } else {
      val += 'translate('
        .concat(transform.x / d, 'em, ')
        .concat(transform.y / d, 'em) ');
    }

    val += 'scale('
      .concat((transform.size / d) * (transform.flipX ? -1 : 1), ', ')
      .concat((transform.size / d) * (transform.flipY ? -1 : 1), ') ');
    val += 'rotate('.concat(transform.rotate, 'deg) ');
    return val;
  }

  var baseStyles =
    ':root, :host {\n  --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Solid";\n  --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Regular";\n  --fa-font-light: normal 300 1em/1 "Font Awesome 6 Light";\n  --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Thin";\n  --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";\n  --fa-font-sharp-solid: normal 900 1em/1 "Font Awesome 6 Sharp";\n  --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";\n}\n\nsvg:not(:root).svg-inline--fa, svg:not(:host).svg-inline--fa {\n  overflow: visible;\n  box-sizing: content-box;\n}\n\n.svg-inline--fa {\n  display: var(--fa-display, inline-block);\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-2xs {\n  vertical-align: 0.1em;\n}\n.svg-inline--fa.fa-xs {\n  vertical-align: 0em;\n}\n.svg-inline--fa.fa-sm {\n  vertical-align: -0.0714285705em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.2em;\n}\n.svg-inline--fa.fa-xl {\n  vertical-align: -0.25em;\n}\n.svg-inline--fa.fa-2xl {\n  vertical-align: -0.3125em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: var(--fa-pull-margin, 0.3em);\n  width: auto;\n}\n.svg-inline--fa.fa-li {\n  width: var(--fa-li-width, 2em);\n  top: 0.25em;\n}\n.svg-inline--fa.fa-fw {\n  width: var(--fa-fw-width, 1.25em);\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: var(--fa-counter-background-color, #ff253a);\n  border-radius: var(--fa-counter-border-radius, 1em);\n  box-sizing: border-box;\n  color: var(--fa-inverse, #fff);\n  line-height: var(--fa-counter-line-height, 1);\n  max-width: var(--fa-counter-max-width, 5em);\n  min-width: var(--fa-counter-min-width, 1.5em);\n  overflow: hidden;\n  padding: var(--fa-counter-padding, 0.25em 0.5em);\n  right: var(--fa-right, 0);\n  text-overflow: ellipsis;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-counter-scale, 0.25));\n          transform: scale(var(--fa-counter-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: var(--fa-bottom, 0);\n  right: var(--fa-right, 0);\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: var(--fa-bottom, 0);\n  left: var(--fa-left, 0);\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  top: var(--fa-top, 0);\n  right: var(--fa-right, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: var(--fa-left, 0);\n  right: auto;\n  top: var(--fa-top, 0);\n  -webkit-transform: scale(var(--fa-layers-scale, 0.25));\n          transform: scale(var(--fa-layers-scale, 0.25));\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-2xs {\n  font-size: 0.625em;\n  line-height: 0.1em;\n  vertical-align: 0.225em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n  line-height: 0.0833333337em;\n  vertical-align: 0.125em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n  line-height: 0.0714285718em;\n  vertical-align: 0.0535714295em;\n}\n\n.fa-lg {\n  font-size: 1.25em;\n  line-height: 0.05em;\n  vertical-align: -0.075em;\n}\n\n.fa-xl {\n  font-size: 1.5em;\n  line-height: 0.0416666682em;\n  vertical-align: -0.125em;\n}\n\n.fa-2xl {\n  font-size: 2em;\n  line-height: 0.03125em;\n  vertical-align: -0.1875em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: var(--fa-li-margin, 2.5em);\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: calc(var(--fa-li-width, 2em) * -1);\n  position: absolute;\n  text-align: center;\n  width: var(--fa-li-width, 2em);\n  line-height: inherit;\n}\n\n.fa-border {\n  border-color: var(--fa-border-color, #eee);\n  border-radius: var(--fa-border-radius, 0.1em);\n  border-style: var(--fa-border-style, solid);\n  border-width: var(--fa-border-width, 0.08em);\n  padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);\n}\n\n.fa-pull-left {\n  float: left;\n  margin-right: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-pull-right {\n  float: right;\n  margin-left: var(--fa-pull-margin, 0.3em);\n}\n\n.fa-beat {\n  -webkit-animation-name: fa-beat;\n          animation-name: fa-beat;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-bounce {\n  -webkit-animation-name: fa-bounce;\n          animation-name: fa-bounce;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));\n}\n\n.fa-fade {\n  -webkit-animation-name: fa-fade;\n          animation-name: fa-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-beat-fade {\n  -webkit-animation-name: fa-beat-fade;\n          animation-name: fa-beat-fade;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n          animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));\n}\n\n.fa-flip {\n  -webkit-animation-name: fa-flip;\n          animation-name: fa-flip;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, ease-in-out);\n          animation-timing-function: var(--fa-animation-timing, ease-in-out);\n}\n\n.fa-shake {\n  -webkit-animation-name: fa-shake;\n          animation-name: fa-shake;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-delay: var(--fa-animation-delay, 0s);\n          animation-delay: var(--fa-animation-delay, 0s);\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 2s);\n          animation-duration: var(--fa-animation-duration, 2s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, linear);\n          animation-timing-function: var(--fa-animation-timing, linear);\n}\n\n.fa-spin-reverse {\n  --fa-animation-direction: reverse;\n}\n\n.fa-pulse,\n.fa-spin-pulse {\n  -webkit-animation-name: fa-spin;\n          animation-name: fa-spin;\n  -webkit-animation-direction: var(--fa-animation-direction, normal);\n          animation-direction: var(--fa-animation-direction, normal);\n  -webkit-animation-duration: var(--fa-animation-duration, 1s);\n          animation-duration: var(--fa-animation-duration, 1s);\n  -webkit-animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n          animation-iteration-count: var(--fa-animation-iteration-count, infinite);\n  -webkit-animation-timing-function: var(--fa-animation-timing, steps(8));\n          animation-timing-function: var(--fa-animation-timing, steps(8));\n}\n\n@media (prefers-reduced-motion: reduce) {\n  .fa-beat,\n.fa-bounce,\n.fa-fade,\n.fa-beat-fade,\n.fa-flip,\n.fa-pulse,\n.fa-shake,\n.fa-spin,\n.fa-spin-pulse {\n    -webkit-animation-delay: -1ms;\n            animation-delay: -1ms;\n    -webkit-animation-duration: 1ms;\n            animation-duration: 1ms;\n    -webkit-animation-iteration-count: 1;\n            animation-iteration-count: 1;\n    transition-delay: 0s;\n    transition-duration: 0s;\n  }\n}\n@-webkit-keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@keyframes fa-beat {\n  0%, 90% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  45% {\n    -webkit-transform: scale(var(--fa-beat-scale, 1.25));\n            transform: scale(var(--fa-beat-scale, 1.25));\n  }\n}\n@-webkit-keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@keyframes fa-bounce {\n  0% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  10% {\n    -webkit-transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n            transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);\n  }\n  30% {\n    -webkit-transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n            transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));\n  }\n  50% {\n    -webkit-transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n            transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);\n  }\n  57% {\n    -webkit-transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n            transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));\n  }\n  64% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n  100% {\n    -webkit-transform: scale(1, 1) translateY(0);\n            transform: scale(1, 1) translateY(0);\n  }\n}\n@-webkit-keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@keyframes fa-fade {\n  50% {\n    opacity: var(--fa-fade-opacity, 0.4);\n  }\n}\n@-webkit-keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@keyframes fa-beat-fade {\n  0%, 100% {\n    opacity: var(--fa-beat-fade-opacity, 0.4);\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    -webkit-transform: scale(var(--fa-beat-fade-scale, 1.125));\n            transform: scale(var(--fa-beat-fade-scale, 1.125));\n  }\n}\n@-webkit-keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@keyframes fa-flip {\n  50% {\n    -webkit-transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n            transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));\n  }\n}\n@-webkit-keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@keyframes fa-shake {\n  0% {\n    -webkit-transform: rotate(-15deg);\n            transform: rotate(-15deg);\n  }\n  4% {\n    -webkit-transform: rotate(15deg);\n            transform: rotate(15deg);\n  }\n  8%, 24% {\n    -webkit-transform: rotate(-18deg);\n            transform: rotate(-18deg);\n  }\n  12%, 28% {\n    -webkit-transform: rotate(18deg);\n            transform: rotate(18deg);\n  }\n  16% {\n    -webkit-transform: rotate(-22deg);\n            transform: rotate(-22deg);\n  }\n  20% {\n    -webkit-transform: rotate(22deg);\n            transform: rotate(22deg);\n  }\n  32% {\n    -webkit-transform: rotate(-12deg);\n            transform: rotate(-12deg);\n  }\n  36% {\n    -webkit-transform: rotate(12deg);\n            transform: rotate(12deg);\n  }\n  40%, 100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both,\n.fa-flip-horizontal.fa-flip-vertical {\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n.fa-rotate-by {\n  -webkit-transform: rotate(var(--fa-rotate-angle, none));\n          transform: rotate(var(--fa-rotate-angle, none));\n}\n\n.fa-stack {\n  display: inline-block;\n  vertical-align: middle;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: var(--fa-stack-z-index, auto);\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}\n\n.sr-only,\n.fa-sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.sr-only-focusable:not(:focus),\n.fa-sr-only-focusable:not(:focus) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse,\n.fa-duotone.fa-inverse {\n  color: var(--fa-inverse, #fff);\n}';

  function css() {
    var dcp = DEFAULT_CSS_PREFIX;
    var drc = DEFAULT_REPLACEMENT_CLASS;
    var fp = config.cssPrefix;
    var rc = config.replacementClass;
    var s = baseStyles;

    if (fp !== dcp || rc !== drc) {
      var dPatt = new RegExp('\\.'.concat(dcp, '\\-'), 'g');
      var customPropPatt = new RegExp('\\--'.concat(dcp, '\\-'), 'g');
      var rPatt = new RegExp('\\.'.concat(drc), 'g');
      s = s
        .replace(dPatt, '.'.concat(fp, '-'))
        .replace(customPropPatt, '--'.concat(fp, '-'))
        .replace(rPatt, '.'.concat(rc));
    }

    return s;
  }

  var _cssInserted = false;

  function ensureCss() {
    if (config.autoAddCss && !_cssInserted) {
      insertCss(css());
      _cssInserted = true;
    }
  }

  var InjectCSS = {
    mixout: function mixout() {
      return {
        dom: {
          css: css,
          insertCss: ensureCss,
        },
      };
    },
    hooks: function hooks() {
      return {
        beforeDOMElementCreation: function beforeDOMElementCreation() {
          ensureCss();
        },
        beforeI2svg: function beforeI2svg() {
          ensureCss();
        },
      };
    },
  };

  var w = WINDOW || {};
  if (!w[NAMESPACE_IDENTIFIER]) w[NAMESPACE_IDENTIFIER] = {};
  if (!w[NAMESPACE_IDENTIFIER].styles) w[NAMESPACE_IDENTIFIER].styles = {};
  if (!w[NAMESPACE_IDENTIFIER].hooks) w[NAMESPACE_IDENTIFIER].hooks = {};
  if (!w[NAMESPACE_IDENTIFIER].shims) w[NAMESPACE_IDENTIFIER].shims = [];
  var namespace = w[NAMESPACE_IDENTIFIER];

  var functions = [];

  var listener = function listener() {
    DOCUMENT.removeEventListener('DOMContentLoaded', listener);
    loaded = 1;
    functions.map(function (fn) {
      return fn();
    });
  };

  var loaded = false;

  if (IS_DOM) {
    loaded = (DOCUMENT.documentElement.doScroll
      ? /^loaded|^c/
      : /^loaded|^i|^c/
    ).test(DOCUMENT.readyState);
    if (!loaded) DOCUMENT.addEventListener('DOMContentLoaded', listener);
  }

  function domready(fn) {
    if (!IS_DOM) return;
    loaded ? setTimeout(fn, 0) : functions.push(fn);
  }

  function toHtml(abstractNodes) {
    var tag = abstractNodes.tag,
      _abstractNodes$attrib = abstractNodes.attributes,
      attributes =
        _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib,
      _abstractNodes$childr = abstractNodes.children,
      children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;

    if (typeof abstractNodes === 'string') {
      return htmlEscape(abstractNodes);
    } else {
      return '<'
        .concat(tag, ' ')
        .concat(joinAttributes(attributes), '>')
        .concat(children.map(toHtml).join(''), '</')
        .concat(tag, '>');
    }
  }

  function iconFromMapping(mapping, prefix, iconName) {
    if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
      return {
        prefix: prefix,
        iconName: iconName,
        icon: mapping[prefix][iconName],
      };
    }
  }

  /**
   * Internal helper to bind a function known to have 4 arguments
   * to a given context.
   */

  var bindInternal4 = function bindInternal4(func, thisContext) {
    return function (a, b, c, d) {
      return func.call(thisContext, a, b, c, d);
    };
  };

  /**
   * # Reduce
   *
   * A fast object `.reduce()` implementation.
   *
   * @param  {Object}   subject      The object to reduce over.
   * @param  {Function} fn           The reducer function.
   * @param  {mixed}    initialValue The initial value for the reducer, defaults to subject[0].
   * @param  {Object}   thisContext  The context for the reducer.
   * @return {mixed}                 The final result.
   */

  var reduce = function fastReduceObject(
    subject,
    fn,
    initialValue,
    thisContext,
  ) {
    var keys = Object.keys(subject),
      length = keys.length,
      iterator =
        thisContext !== undefined ? bindInternal4(fn, thisContext) : fn,
      i,
      key,
      result;

    if (initialValue === undefined) {
      i = 1;
      result = subject[keys[0]];
    } else {
      i = 0;
      result = initialValue;
    }

    for (; i < length; i++) {
      key = keys[i];
      result = iterator(result, subject[key], key, subject);
    }

    return result;
  };

  /**
   * ucs2decode() and codePointAt() are both works of Mathias Bynens and licensed under MIT
   *
   * Copyright Mathias Bynens <https://mathiasbynens.be/>

   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:

   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.

   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   */
  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;

    while (counter < length) {
      var value = string.charCodeAt(counter++);

      if (value >= 0xd800 && value <= 0xdbff && counter < length) {
        var extra = string.charCodeAt(counter++);

        if ((extra & 0xfc00) == 0xdc00) {
          // eslint-disable-line eqeqeq
          output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);
        } else {
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }

  function toHex(unicode) {
    var decoded = ucs2decode(unicode);
    return decoded.length === 1 ? decoded[0].toString(16) : null;
  }
  function codePointAt(string, index) {
    var size = string.length;
    var first = string.charCodeAt(index);
    var second;

    if (first >= 0xd800 && first <= 0xdbff && size > index + 1) {
      second = string.charCodeAt(index + 1);

      if (second >= 0xdc00 && second <= 0xdfff) {
        return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
      }
    }

    return first;
  }

  function normalizeIcons(icons) {
    return Object.keys(icons).reduce(function (acc, iconName) {
      var icon = icons[iconName];
      var expanded = !!icon.icon;

      if (expanded) {
        acc[icon.iconName] = icon.icon;
      } else {
        acc[iconName] = icon;
      }

      return acc;
    }, {});
  }

  function defineIcons(prefix, icons) {
    var params =
      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _params$skipHooks = params.skipHooks,
      skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
    var normalized = normalizeIcons(icons);

    if (typeof namespace.hooks.addPack === 'function' && !skipHooks) {
      namespace.hooks.addPack(prefix, normalizeIcons(icons));
    } else {
      namespace.styles[prefix] = _objectSpread2(
        _objectSpread2({}, namespace.styles[prefix] || {}),
        normalized,
      );
    }
    /**
     * Font Awesome 4 used the prefix of `fa` for all icons. With the introduction
     * of new styles we needed to differentiate between them. Prefix `fa` is now an alias
     * for `fas` so we'll ease the upgrade process for our users by automatically defining
     * this as well.
     */

    if (prefix === 'fas') {
      defineIcons('fa', icons);
    }
  }

  var _LONG_STYLE, _PREFIXES, _PREFIXES_FOR_FAMILY;
  var styles = namespace.styles,
    shims = namespace.shims;
  var LONG_STYLE =
    ((_LONG_STYLE = {}),
    _defineProperty(
      _LONG_STYLE,
      FAMILY_CLASSIC,
      Object.values(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC]),
    ),
    _defineProperty(
      _LONG_STYLE,
      FAMILY_SHARP,
      Object.values(PREFIX_TO_LONG_STYLE[FAMILY_SHARP]),
    ),
    _LONG_STYLE);
  var _defaultUsablePrefix = null;
  var _byUnicode = {};
  var _byLigature = {};
  var _byOldName = {};
  var _byOldUnicode = {};
  var _byAlias = {};
  var PREFIXES =
    ((_PREFIXES = {}),
    _defineProperty(
      _PREFIXES,
      FAMILY_CLASSIC,
      Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]),
    ),
    _defineProperty(
      _PREFIXES,
      FAMILY_SHARP,
      Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP]),
    ),
    _PREFIXES);

  function isReserved(name) {
    return ~RESERVED_CLASSES.indexOf(name);
  }

  function getIconName(cssPrefix, cls) {
    var parts = cls.split('-');
    var prefix = parts[0];
    var iconName = parts.slice(1).join('-');

    if (prefix === cssPrefix && iconName !== '' && !isReserved(iconName)) {
      return iconName;
    } else {
      return null;
    }
  }
  var build = function build() {
    var lookup = function lookup(reducer) {
      return reduce(
        styles,
        function (o, style, prefix) {
          o[prefix] = reduce(style, reducer, {});
          return o;
        },
        {},
      );
    };

    _byUnicode = lookup(function (acc, icon, iconName) {
      if (icon[3]) {
        acc[icon[3]] = iconName;
      }

      if (icon[2]) {
        var aliases = icon[2].filter(function (a) {
          return typeof a === 'number';
        });
        aliases.forEach(function (alias) {
          acc[alias.toString(16)] = iconName;
        });
      }

      return acc;
    });
    _byLigature = lookup(function (acc, icon, iconName) {
      acc[iconName] = iconName;

      if (icon[2]) {
        var aliases = icon[2].filter(function (a) {
          return typeof a === 'string';
        });
        aliases.forEach(function (alias) {
          acc[alias] = iconName;
        });
      }

      return acc;
    });
    _byAlias = lookup(function (acc, icon, iconName) {
      var aliases = icon[2];
      acc[iconName] = iconName;
      aliases.forEach(function (alias) {
        acc[alias] = iconName;
      });
      return acc;
    }); // If we have a Kit, we can't determine if regular is available since we
    // could be auto-fetching it. We'll have to assume that it is available.

    var hasRegular = 'far' in styles || config.autoFetchSvg;
    var shimLookups = reduce(
      shims,
      function (acc, shim) {
        var maybeNameMaybeUnicode = shim[0];
        var prefix = shim[1];
        var iconName = shim[2];

        if (prefix === 'far' && !hasRegular) {
          prefix = 'fas';
        }

        if (typeof maybeNameMaybeUnicode === 'string') {
          acc.names[maybeNameMaybeUnicode] = {
            prefix: prefix,
            iconName: iconName,
          };
        }

        if (typeof maybeNameMaybeUnicode === 'number') {
          acc.unicodes[maybeNameMaybeUnicode.toString(16)] = {
            prefix: prefix,
            iconName: iconName,
          };
        }

        return acc;
      },
      {
        names: {},
        unicodes: {},
      },
    );
    _byOldName = shimLookups.names;
    _byOldUnicode = shimLookups.unicodes;
    _defaultUsablePrefix = getCanonicalPrefix(config.styleDefault, {
      family: config.familyDefault,
    });
  };
  onChange(function (c) {
    _defaultUsablePrefix = getCanonicalPrefix(c.styleDefault, {
      family: config.familyDefault,
    });
  });
  build();
  function byUnicode(prefix, unicode) {
    return (_byUnicode[prefix] || {})[unicode];
  }
  function byLigature(prefix, ligature) {
    return (_byLigature[prefix] || {})[ligature];
  }
  function byAlias(prefix, alias) {
    return (_byAlias[prefix] || {})[alias];
  }
  function byOldName(name) {
    return (
      _byOldName[name] || {
        prefix: null,
        iconName: null,
      }
    );
  }
  function byOldUnicode(unicode) {
    var oldUnicode = _byOldUnicode[unicode];
    var newUnicode = byUnicode('fas', unicode);
    return (
      oldUnicode ||
      (newUnicode
        ? {
            prefix: 'fas',
            iconName: newUnicode,
          }
        : null) || {
        prefix: null,
        iconName: null,
      }
    );
  }
  function getDefaultUsablePrefix() {
    return _defaultUsablePrefix;
  }
  var emptyCanonicalIcon = function emptyCanonicalIcon() {
    return {
      prefix: null,
      iconName: null,
      rest: [],
    };
  };
  function getCanonicalPrefix(styleOrPrefix) {
    var params =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$family = params.family,
      family = _params$family === void 0 ? FAMILY_CLASSIC : _params$family;
    var style = PREFIX_TO_STYLE[family][styleOrPrefix];
    var prefix =
      STYLE_TO_PREFIX[family][styleOrPrefix] || STYLE_TO_PREFIX[family][style];
    var defined = styleOrPrefix in namespace.styles ? styleOrPrefix : null;
    return prefix || defined || null;
  }
  var PREFIXES_FOR_FAMILY =
    ((_PREFIXES_FOR_FAMILY = {}),
    _defineProperty(
      _PREFIXES_FOR_FAMILY,
      FAMILY_CLASSIC,
      Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC]),
    ),
    _defineProperty(
      _PREFIXES_FOR_FAMILY,
      FAMILY_SHARP,
      Object.keys(PREFIX_TO_LONG_STYLE[FAMILY_SHARP]),
    ),
    _PREFIXES_FOR_FAMILY);
  function getCanonicalIcon(values) {
    var _famProps;

    var params =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$skipLookups = params.skipLookups,
      skipLookups =
        _params$skipLookups === void 0 ? false : _params$skipLookups;
    var famProps =
      ((_famProps = {}),
      _defineProperty(
        _famProps,
        FAMILY_CLASSIC,
        ''.concat(config.cssPrefix, '-').concat(FAMILY_CLASSIC),
      ),
      _defineProperty(
        _famProps,
        FAMILY_SHARP,
        ''.concat(config.cssPrefix, '-').concat(FAMILY_SHARP),
      ),
      _famProps);
    var givenPrefix = null;
    var family = FAMILY_CLASSIC;

    if (
      values.includes(famProps[FAMILY_CLASSIC]) ||
      values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_CLASSIC].includes(v);
      })
    ) {
      family = FAMILY_CLASSIC;
    }

    if (
      values.includes(famProps[FAMILY_SHARP]) ||
      values.some(function (v) {
        return PREFIXES_FOR_FAMILY[FAMILY_SHARP].includes(v);
      })
    ) {
      family = FAMILY_SHARP;
    }

    var canonical = values.reduce(function (acc, cls) {
      var iconName = getIconName(config.cssPrefix, cls);

      if (styles[cls]) {
        cls = LONG_STYLE[family].includes(cls)
          ? LONG_STYLE_TO_PREFIX[family][cls]
          : cls;
        givenPrefix = cls;
        acc.prefix = cls;
      } else if (PREFIXES[family].indexOf(cls) > -1) {
        givenPrefix = cls;
        acc.prefix = getCanonicalPrefix(cls, {
          family: family,
        });
      } else if (iconName) {
        acc.iconName = iconName;
      } else if (
        cls !== config.replacementClass &&
        cls !== famProps[FAMILY_CLASSIC] &&
        cls !== famProps[FAMILY_SHARP]
      ) {
        acc.rest.push(cls);
      }

      if (!skipLookups && acc.prefix && acc.iconName) {
        var shim = givenPrefix === 'fa' ? byOldName(acc.iconName) : {};
        var aliasIconName = byAlias(acc.prefix, acc.iconName);

        if (shim.prefix) {
          givenPrefix = null;
        }

        acc.iconName = shim.iconName || aliasIconName || acc.iconName;
        acc.prefix = shim.prefix || acc.prefix;

        if (
          acc.prefix === 'far' &&
          !styles['far'] &&
          styles['fas'] &&
          !config.autoFetchSvg
        ) {
          // Allow a fallback from the regular style to solid if regular is not available
          // but only if we aren't auto-fetching SVGs
          acc.prefix = 'fas';
        }
      }

      return acc;
    }, emptyCanonicalIcon());

    if (values.includes('fa-brands') || values.includes('fab')) {
      canonical.prefix = 'fab';
    }

    if (values.includes('fa-duotone') || values.includes('fad')) {
      canonical.prefix = 'fad';
    }

    if (
      !canonical.prefix &&
      family === FAMILY_SHARP &&
      (styles['fass'] || config.autoFetchSvg)
    ) {
      canonical.prefix = 'fass';
      canonical.iconName =
        byAlias(canonical.prefix, canonical.iconName) || canonical.iconName;
    }

    if (canonical.prefix === 'fa' || givenPrefix === 'fa') {
      // The fa prefix is not canonical. So if it has made it through until this point
      // we will shift it to the correct prefix.
      canonical.prefix = getDefaultUsablePrefix() || 'fas';
    }

    return canonical;
  }

  var Library = /*#__PURE__*/ (function () {
    function Library() {
      _classCallCheck(this, Library);

      this.definitions = {};
    }

    _createClass(Library, [
      {
        key: 'add',
        value: function add() {
          var _this = this;

          for (
            var _len = arguments.length,
              definitions = new Array(_len),
              _key = 0;
            _key < _len;
            _key++
          ) {
            definitions[_key] = arguments[_key];
          }

          var additions = definitions.reduce(this._pullDefinitions, {});
          Object.keys(additions).forEach(function (key) {
            _this.definitions[key] = _objectSpread2(
              _objectSpread2({}, _this.definitions[key] || {}),
              additions[key],
            );
            defineIcons(key, additions[key]); // TODO can we stop doing this? We can't get the icons by 'fa-solid' any longer so this probably needs to change

            var longPrefix = PREFIX_TO_LONG_STYLE[FAMILY_CLASSIC][key];
            if (longPrefix) defineIcons(longPrefix, additions[key]);
            build();
          });
        },
      },
      {
        key: 'reset',
        value: function reset() {
          this.definitions = {};
        },
      },
      {
        key: '_pullDefinitions',
        value: function _pullDefinitions(additions, definition) {
          var normalized =
            definition.prefix && definition.iconName && definition.icon
              ? {
                  0: definition,
                }
              : definition;
          Object.keys(normalized).map(function (key) {
            var _normalized$key = normalized[key],
              prefix = _normalized$key.prefix,
              iconName = _normalized$key.iconName,
              icon = _normalized$key.icon;
            var aliases = icon[2];
            if (!additions[prefix]) additions[prefix] = {};

            if (aliases.length > 0) {
              aliases.forEach(function (alias) {
                if (typeof alias === 'string') {
                  additions[prefix][alias] = icon;
                }
              });
            }

            additions[prefix][iconName] = icon;
          });
          return additions;
        },
      },
    ]);

    return Library;
  })();

  var _plugins = [];
  var _hooks = {};
  var providers = {};
  var defaultProviderKeys = Object.keys(providers);
  function registerPlugins(nextPlugins, _ref) {
    var obj = _ref.mixoutsTo;
    _plugins = nextPlugins;
    _hooks = {};
    Object.keys(providers).forEach(function (k) {
      if (defaultProviderKeys.indexOf(k) === -1) {
        delete providers[k];
      }
    });

    _plugins.forEach(function (plugin) {
      var mixout = plugin.mixout ? plugin.mixout() : {};
      Object.keys(mixout).forEach(function (tk) {
        if (typeof mixout[tk] === 'function') {
          obj[tk] = mixout[tk];
        }

        if (_typeof(mixout[tk]) === 'object') {
          Object.keys(mixout[tk]).forEach(function (sk) {
            if (!obj[tk]) {
              obj[tk] = {};
            }

            obj[tk][sk] = mixout[tk][sk];
          });
        }
      });

      if (plugin.hooks) {
        var hooks = plugin.hooks();
        Object.keys(hooks).forEach(function (hook) {
          if (!_hooks[hook]) {
            _hooks[hook] = [];
          }

          _hooks[hook].push(hooks[hook]);
        });
      }

      if (plugin.provides) {
        plugin.provides(providers);
      }
    });

    return obj;
  }
  function chainHooks(hook, accumulator) {
    for (
      var _len = arguments.length,
        args = new Array(_len > 2 ? _len - 2 : 0),
        _key = 2;
      _key < _len;
      _key++
    ) {
      args[_key - 2] = arguments[_key];
    }

    var hookFns = _hooks[hook] || [];
    hookFns.forEach(function (hookFn) {
      accumulator = hookFn.apply(null, [accumulator].concat(args)); // eslint-disable-line no-useless-call
    });
    return accumulator;
  }
  function callHooks(hook) {
    for (
      var _len2 = arguments.length,
        args = new Array(_len2 > 1 ? _len2 - 1 : 0),
        _key2 = 1;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2 - 1] = arguments[_key2];
    }

    var hookFns = _hooks[hook] || [];
    hookFns.forEach(function (hookFn) {
      hookFn.apply(null, args);
    });
    return undefined;
  }
  function callProvided() {
    var hook = arguments[0];
    var args = Array.prototype.slice.call(arguments, 1);
    return providers[hook] ? providers[hook].apply(null, args) : undefined;
  }

  function findIconDefinition(iconLookup) {
    if (iconLookup.prefix === 'fa') {
      iconLookup.prefix = 'fas';
    }

    var iconName = iconLookup.iconName;
    var prefix = iconLookup.prefix || getDefaultUsablePrefix();
    if (!iconName) return;
    iconName = byAlias(prefix, iconName) || iconName;
    return (
      iconFromMapping(library.definitions, prefix, iconName) ||
      iconFromMapping(namespace.styles, prefix, iconName)
    );
  }
  var library = new Library();
  var noAuto = function noAuto() {
    config.autoReplaceSvg = false;
    config.observeMutations = false;
    callHooks('noAuto');
  };
  var dom = {
    i2svg: function i2svg() {
      var params =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (IS_DOM) {
        callHooks('beforeI2svg', params);
        callProvided('pseudoElements2svg', params);
        return callProvided('i2svg', params);
      } else {
        return Promise.reject('Operation requires a DOM of some kind.');
      }
    },
    watch: function watch() {
      var params =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var autoReplaceSvgRoot = params.autoReplaceSvgRoot;

      if (config.autoReplaceSvg === false) {
        config.autoReplaceSvg = true;
      }

      config.observeMutations = true;
      domready(function () {
        autoReplace({
          autoReplaceSvgRoot: autoReplaceSvgRoot,
        });
        callHooks('watch', params);
      });
    },
  };
  var parse = {
    icon: function icon(_icon) {
      if (_icon === null) {
        return null;
      }

      if (_typeof(_icon) === 'object' && _icon.prefix && _icon.iconName) {
        return {
          prefix: _icon.prefix,
          iconName: byAlias(_icon.prefix, _icon.iconName) || _icon.iconName,
        };
      }

      if (Array.isArray(_icon) && _icon.length === 2) {
        var iconName =
          _icon[1].indexOf('fa-') === 0 ? _icon[1].slice(3) : _icon[1];
        var prefix = getCanonicalPrefix(_icon[0]);
        return {
          prefix: prefix,
          iconName: byAlias(prefix, iconName) || iconName,
        };
      }

      if (
        typeof _icon === 'string' &&
        (_icon.indexOf(''.concat(config.cssPrefix, '-')) > -1 ||
          _icon.match(ICON_SELECTION_SYNTAX_PATTERN))
      ) {
        var canonicalIcon = getCanonicalIcon(_icon.split(' '), {
          skipLookups: true,
        });
        return {
          prefix: canonicalIcon.prefix || getDefaultUsablePrefix(),
          iconName:
            byAlias(canonicalIcon.prefix, canonicalIcon.iconName) ||
            canonicalIcon.iconName,
        };
      }

      if (typeof _icon === 'string') {
        var _prefix = getDefaultUsablePrefix();

        return {
          prefix: _prefix,
          iconName: byAlias(_prefix, _icon) || _icon,
        };
      }
    },
  };
  var api = {
    noAuto: noAuto,
    config: config,
    dom: dom,
    parse: parse,
    library: library,
    findIconDefinition: findIconDefinition,
    toHtml: toHtml,
  };

  var autoReplace = function autoReplace() {
    var params =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _params$autoReplaceSv = params.autoReplaceSvgRoot,
      autoReplaceSvgRoot =
        _params$autoReplaceSv === void 0 ? DOCUMENT : _params$autoReplaceSv;
    if (
      (Object.keys(namespace.styles).length > 0 || config.autoFetchSvg) &&
      IS_DOM &&
      config.autoReplaceSvg
    )
      api.dom.i2svg({
        node: autoReplaceSvgRoot,
      });
  };

  function domVariants(val, abstractCreator) {
    Object.defineProperty(val, 'abstract', {
      get: abstractCreator,
    });
    Object.defineProperty(val, 'html', {
      get: function get() {
        return val.abstract.map(function (a) {
          return toHtml(a);
        });
      },
    });
    Object.defineProperty(val, 'node', {
      get: function get() {
        if (!IS_DOM) return;
        var container = DOCUMENT.createElement('div');
        container.innerHTML = val.html;
        return container.children;
      },
    });
    return val;
  }

  function asIcon(_ref) {
    var children = _ref.children,
      main = _ref.main,
      mask = _ref.mask,
      attributes = _ref.attributes,
      styles = _ref.styles,
      transform = _ref.transform;

    if (transformIsMeaningful(transform) && main.found && !mask.found) {
      var width = main.width,
        height = main.height;
      var offset = {
        x: width / height / 2,
        y: 0.5,
      };
      attributes['style'] = joinStyles(
        _objectSpread2(
          _objectSpread2({}, styles),
          {},
          {
            'transform-origin': ''
              .concat(offset.x + transform.x / 16, 'em ')
              .concat(offset.y + transform.y / 16, 'em'),
          },
        ),
      );
    }

    return [
      {
        tag: 'svg',
        attributes: attributes,
        children: children,
      },
    ];
  }

  function asSymbol(_ref) {
    var prefix = _ref.prefix,
      iconName = _ref.iconName,
      children = _ref.children,
      attributes = _ref.attributes,
      symbol = _ref.symbol;
    var id =
      symbol === true
        ? ''.concat(prefix, '-').concat(config.cssPrefix, '-').concat(iconName)
        : symbol;
    return [
      {
        tag: 'svg',
        attributes: {
          style: 'display: none;',
        },
        children: [
          {
            tag: 'symbol',
            attributes: _objectSpread2(
              _objectSpread2({}, attributes),
              {},
              {
                id: id,
              },
            ),
            children: children,
          },
        ],
      },
    ];
  }

  function makeInlineSvgAbstract(params) {
    var _params$icons = params.icons,
      main = _params$icons.main,
      mask = _params$icons.mask,
      prefix = params.prefix,
      iconName = params.iconName,
      transform = params.transform,
      symbol = params.symbol,
      title = params.title,
      maskId = params.maskId,
      titleId = params.titleId,
      extra = params.extra,
      _params$watchable = params.watchable,
      watchable = _params$watchable === void 0 ? false : _params$watchable;

    var _ref = mask.found ? mask : main,
      width = _ref.width,
      height = _ref.height;

    var isUploadedIcon = prefix === 'fak';
    var attrClass = [
      config.replacementClass,
      iconName ? ''.concat(config.cssPrefix, '-').concat(iconName) : '',
    ]
      .filter(function (c) {
        return extra.classes.indexOf(c) === -1;
      })
      .filter(function (c) {
        return c !== '' || !!c;
      })
      .concat(extra.classes)
      .join(' ');
    var content = {
      children: [],
      attributes: _objectSpread2(
        _objectSpread2({}, extra.attributes),
        {},
        {
          'data-prefix': prefix,
          'data-icon': iconName,
          class: attrClass,
          role: extra.attributes.role || 'img',
          xmlns: 'http://www.w3.org/2000/svg',
          viewBox: '0 0 '.concat(width, ' ').concat(height),
        },
      ),
    };
    var uploadedIconWidthStyle =
      isUploadedIcon && !~extra.classes.indexOf('fa-fw')
        ? {
            width: ''.concat((width / height) * 16 * 0.0625, 'em'),
          }
        : {};

    if (watchable) {
      content.attributes[DATA_FA_I2SVG] = '';
    }

    if (title) {
      content.children.push({
        tag: 'title',
        attributes: {
          id:
            content.attributes['aria-labelledby'] ||
            'title-'.concat(titleId || nextUniqueId()),
        },
        children: [title],
      });
      delete content.attributes.title;
    }

    var args = _objectSpread2(
      _objectSpread2({}, content),
      {},
      {
        prefix: prefix,
        iconName: iconName,
        main: main,
        mask: mask,
        maskId: maskId,
        transform: transform,
        symbol: symbol,
        styles: _objectSpread2(
          _objectSpread2({}, uploadedIconWidthStyle),
          extra.styles,
        ),
      },
    );

    var _ref2 =
        mask.found && main.found
          ? callProvided('generateAbstractMask', args) || {
              children: [],
              attributes: {},
            }
          : callProvided('generateAbstractIcon', args) || {
              children: [],
              attributes: {},
            },
      children = _ref2.children,
      attributes = _ref2.attributes;

    args.children = children;
    args.attributes = attributes;

    if (symbol) {
      return asSymbol(args);
    } else {
      return asIcon(args);
    }
  }
  function makeLayersTextAbstract(params) {
    var content = params.content,
      width = params.width,
      height = params.height,
      transform = params.transform,
      title = params.title,
      extra = params.extra,
      _params$watchable2 = params.watchable,
      watchable = _params$watchable2 === void 0 ? false : _params$watchable2;

    var attributes = _objectSpread2(
      _objectSpread2(
        _objectSpread2({}, extra.attributes),
        title
          ? {
              title: title,
            }
          : {},
      ),
      {},
      {
        class: extra.classes.join(' '),
      },
    );

    if (watchable) {
      attributes[DATA_FA_I2SVG] = '';
    }

    var styles = _objectSpread2({}, extra.styles);

    if (transformIsMeaningful(transform)) {
      styles['transform'] = transformForCss({
        transform: transform,
        startCentered: true,
        width: width,
        height: height,
      });
      styles['-webkit-transform'] = styles['transform'];
    }

    var styleString = joinStyles(styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content],
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only',
        },
        children: [title],
      });
    }

    return val;
  }
  function makeLayersCounterAbstract(params) {
    var content = params.content,
      title = params.title,
      extra = params.extra;

    var attributes = _objectSpread2(
      _objectSpread2(
        _objectSpread2({}, extra.attributes),
        title
          ? {
              title: title,
            }
          : {},
      ),
      {},
      {
        class: extra.classes.join(' '),
      },
    );

    var styleString = joinStyles(extra.styles);

    if (styleString.length > 0) {
      attributes['style'] = styleString;
    }

    var val = [];
    val.push({
      tag: 'span',
      attributes: attributes,
      children: [content],
    });

    if (title) {
      val.push({
        tag: 'span',
        attributes: {
          class: 'sr-only',
        },
        children: [title],
      });
    }

    return val;
  }

  var styles$1 = namespace.styles;
  function asFoundIcon(icon) {
    var width = icon[0];
    var height = icon[1];

    var _icon$slice = icon.slice(4),
      _icon$slice2 = _slicedToArray(_icon$slice, 1),
      vectorData = _icon$slice2[0];

    var element = null;

    if (Array.isArray(vectorData)) {
      element = {
        tag: 'g',
        attributes: {
          class: ''.concat(config.cssPrefix, '-').concat(DUOTONE_CLASSES.GROUP),
        },
        children: [
          {
            tag: 'path',
            attributes: {
              class: ''
                .concat(config.cssPrefix, '-')
                .concat(DUOTONE_CLASSES.SECONDARY),
              fill: 'currentColor',
              d: vectorData[0],
            },
          },
          {
            tag: 'path',
            attributes: {
              class: ''
                .concat(config.cssPrefix, '-')
                .concat(DUOTONE_CLASSES.PRIMARY),
              fill: 'currentColor',
              d: vectorData[1],
            },
          },
        ],
      };
    } else {
      element = {
        tag: 'path',
        attributes: {
          fill: 'currentColor',
          d: vectorData,
        },
      };
    }

    return {
      found: true,
      width: width,
      height: height,
      icon: element,
    };
  }
  var missingIconResolutionMixin = {
    found: false,
    width: 512,
    height: 512,
  };

  function maybeNotifyMissing(iconName, prefix) {
    if (!PRODUCTION && !config.showMissingIcons && iconName) {
      console.error(
        'Icon with name "'
          .concat(iconName, '" and prefix "')
          .concat(prefix, '" is missing.'),
      );
    }
  }

  function findIcon(iconName, prefix) {
    var givenPrefix = prefix;

    if (prefix === 'fa' && config.styleDefault !== null) {
      prefix = getDefaultUsablePrefix();
    }

    return new Promise(function (resolve, reject) {
      var val = {
        found: false,
        width: 512,
        height: 512,
        icon: callProvided('missingIconAbstract') || {},
      };

      if (givenPrefix === 'fa') {
        var shim = byOldName(iconName) || {};
        iconName = shim.iconName || iconName;
        prefix = shim.prefix || prefix;
      }

      if (
        iconName &&
        prefix &&
        styles$1[prefix] &&
        styles$1[prefix][iconName]
      ) {
        var icon = styles$1[prefix][iconName];
        return resolve(asFoundIcon(icon));
      }

      maybeNotifyMissing(iconName, prefix);
      resolve(
        _objectSpread2(
          _objectSpread2({}, missingIconResolutionMixin),
          {},
          {
            icon:
              config.showMissingIcons && iconName
                ? callProvided('missingIconAbstract') || {}
                : {},
          },
        ),
      );
    });
  }

  var noop$1 = function noop() {};

  var p =
    config.measurePerformance &&
    PERFORMANCE &&
    PERFORMANCE.mark &&
    PERFORMANCE.measure
      ? PERFORMANCE
      : {
          mark: noop$1,
          measure: noop$1,
        };
  var preamble = 'FA "6.2.0"';

  var begin = function begin(name) {
    p.mark(''.concat(preamble, ' ').concat(name, ' begins'));
    return function () {
      return end(name);
    };
  };

  var end = function end(name) {
    p.mark(''.concat(preamble, ' ').concat(name, ' ends'));
    p.measure(
      ''.concat(preamble, ' ').concat(name),
      ''.concat(preamble, ' ').concat(name, ' begins'),
      ''.concat(preamble, ' ').concat(name, ' ends'),
    );
  };

  var perf = {
    begin: begin,
    end: end,
  };

  var noop$2 = function noop() {};

  function isWatched(node) {
    var i2svg = node.getAttribute ? node.getAttribute(DATA_FA_I2SVG) : null;
    return typeof i2svg === 'string';
  }

  function hasPrefixAndIcon(node) {
    var prefix = node.getAttribute ? node.getAttribute(DATA_PREFIX) : null;
    var icon = node.getAttribute ? node.getAttribute(DATA_ICON) : null;
    return prefix && icon;
  }

  function hasBeenReplaced(node) {
    return (
      node &&
      node.classList &&
      node.classList.contains &&
      node.classList.contains(config.replacementClass)
    );
  }

  function getMutator() {
    if (config.autoReplaceSvg === true) {
      return mutators.replace;
    }

    var mutator = mutators[config.autoReplaceSvg];
    return mutator || mutators.replace;
  }

  function createElementNS(tag) {
    return DOCUMENT.createElementNS('http://www.w3.org/2000/svg', tag);
  }

  function createElement(tag) {
    return DOCUMENT.createElement(tag);
  }

  function convertSVG(abstractObj) {
    var params =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$ceFn = params.ceFn,
      ceFn =
        _params$ceFn === void 0
          ? abstractObj.tag === 'svg'
            ? createElementNS
            : createElement
          : _params$ceFn;

    if (typeof abstractObj === 'string') {
      return DOCUMENT.createTextNode(abstractObj);
    }

    var tag = ceFn(abstractObj.tag);
    Object.keys(abstractObj.attributes || []).forEach(function (key) {
      tag.setAttribute(key, abstractObj.attributes[key]);
    });
    var children = abstractObj.children || [];
    children.forEach(function (child) {
      tag.appendChild(
        convertSVG(child, {
          ceFn: ceFn,
        }),
      );
    });
    return tag;
  }

  function nodeAsComment(node) {
    var comment = ' '.concat(node.outerHTML, ' ');
    /* BEGIN.ATTRIBUTION */

    comment = ''.concat(comment, 'Font Awesome fontawesome.com ');
    /* END.ATTRIBUTION */

    return comment;
  }

  var mutators = {
    replace: function replace(mutation) {
      var node = mutation[0];

      if (node.parentNode) {
        mutation[1].forEach(function (abstract) {
          node.parentNode.insertBefore(convertSVG(abstract), node);
        });

        if (
          node.getAttribute(DATA_FA_I2SVG) === null &&
          config.keepOriginalSource
        ) {
          var comment = DOCUMENT.createComment(nodeAsComment(node));
          node.parentNode.replaceChild(comment, node);
        } else {
          node.remove();
        }
      }
    },
    nest: function nest(mutation) {
      var node = mutation[0];
      var abstract = mutation[1]; // If we already have a replaced node we do not want to continue nesting within it.
      // Short-circuit to the standard replacement

      if (~classArray(node).indexOf(config.replacementClass)) {
        return mutators.replace(mutation);
      }

      var forSvg = new RegExp(''.concat(config.cssPrefix, '-.*'));
      delete abstract[0].attributes.id;

      if (abstract[0].attributes.class) {
        var splitClasses = abstract[0].attributes.class.split(' ').reduce(
          function (acc, cls) {
            if (cls === config.replacementClass || cls.match(forSvg)) {
              acc.toSvg.push(cls);
            } else {
              acc.toNode.push(cls);
            }

            return acc;
          },
          {
            toNode: [],
            toSvg: [],
          },
        );
        abstract[0].attributes.class = splitClasses.toSvg.join(' ');

        if (splitClasses.toNode.length === 0) {
          node.removeAttribute('class');
        } else {
          node.setAttribute('class', splitClasses.toNode.join(' '));
        }
      }

      var newInnerHTML = abstract
        .map(function (a) {
          return toHtml(a);
        })
        .join('\n');
      node.setAttribute(DATA_FA_I2SVG, '');
      node.innerHTML = newInnerHTML;
    },
  };

  function performOperationSync(op) {
    op();
  }

  function perform(mutations, callback) {
    var callbackFunction = typeof callback === 'function' ? callback : noop$2;

    if (mutations.length === 0) {
      callbackFunction();
    } else {
      var frame = performOperationSync;

      if (config.mutateApproach === MUTATION_APPROACH_ASYNC) {
        frame = WINDOW.requestAnimationFrame || performOperationSync;
      }

      frame(function () {
        var mutator = getMutator();
        var mark = perf.begin('mutate');
        mutations.map(mutator);
        mark();
        callbackFunction();
      });
    }
  }
  var disabled = false;
  function disableObservation() {
    disabled = true;
  }
  function enableObservation() {
    disabled = false;
  }
  var mo = null;
  function observe(options) {
    if (!MUTATION_OBSERVER) {
      return;
    }

    if (!config.observeMutations) {
      return;
    }

    var _options$treeCallback = options.treeCallback,
      treeCallback =
        _options$treeCallback === void 0 ? noop$2 : _options$treeCallback,
      _options$nodeCallback = options.nodeCallback,
      nodeCallback =
        _options$nodeCallback === void 0 ? noop$2 : _options$nodeCallback,
      _options$pseudoElemen = options.pseudoElementsCallback,
      pseudoElementsCallback =
        _options$pseudoElemen === void 0 ? noop$2 : _options$pseudoElemen,
      _options$observeMutat = options.observeMutationsRoot,
      observeMutationsRoot =
        _options$observeMutat === void 0 ? DOCUMENT : _options$observeMutat;
    mo = new MUTATION_OBSERVER(function (objects) {
      if (disabled) return;
      var defaultPrefix = getDefaultUsablePrefix();
      toArray(objects).forEach(function (mutationRecord) {
        if (
          mutationRecord.type === 'childList' &&
          mutationRecord.addedNodes.length > 0 &&
          !isWatched(mutationRecord.addedNodes[0])
        ) {
          if (config.searchPseudoElements) {
            pseudoElementsCallback(mutationRecord.target);
          }

          treeCallback(mutationRecord.target);
        }

        if (
          mutationRecord.type === 'attributes' &&
          mutationRecord.target.parentNode &&
          config.searchPseudoElements
        ) {
          pseudoElementsCallback(mutationRecord.target.parentNode);
        }

        if (
          mutationRecord.type === 'attributes' &&
          isWatched(mutationRecord.target) &&
          ~ATTRIBUTES_WATCHED_FOR_MUTATION.indexOf(mutationRecord.attributeName)
        ) {
          if (
            mutationRecord.attributeName === 'class' &&
            hasPrefixAndIcon(mutationRecord.target)
          ) {
            var _getCanonicalIcon = getCanonicalIcon(
                classArray(mutationRecord.target),
              ),
              prefix = _getCanonicalIcon.prefix,
              iconName = _getCanonicalIcon.iconName;

            mutationRecord.target.setAttribute(
              DATA_PREFIX,
              prefix || defaultPrefix,
            );
            if (iconName)
              mutationRecord.target.setAttribute(DATA_ICON, iconName);
          } else if (hasBeenReplaced(mutationRecord.target)) {
            nodeCallback(mutationRecord.target);
          }
        }
      });
    });
    if (!IS_DOM) return;
    mo.observe(observeMutationsRoot, {
      childList: true,
      attributes: true,
      characterData: true,
      subtree: true,
    });
  }
  function disconnect() {
    if (!mo) return;
    mo.disconnect();
  }

  function styleParser(node) {
    var style = node.getAttribute('style');
    var val = [];

    if (style) {
      val = style.split(';').reduce(function (acc, style) {
        var styles = style.split(':');
        var prop = styles[0];
        var value = styles.slice(1);

        if (prop && value.length > 0) {
          acc[prop] = value.join(':').trim();
        }

        return acc;
      }, {});
    }

    return val;
  }

  function classParser(node) {
    var existingPrefix = node.getAttribute('data-prefix');
    var existingIconName = node.getAttribute('data-icon');
    var innerText = node.innerText !== undefined ? node.innerText.trim() : '';
    var val = getCanonicalIcon(classArray(node));

    if (!val.prefix) {
      val.prefix = getDefaultUsablePrefix();
    }

    if (existingPrefix && existingIconName) {
      val.prefix = existingPrefix;
      val.iconName = existingIconName;
    }

    if (val.iconName && val.prefix) {
      return val;
    }

    if (val.prefix && innerText.length > 0) {
      val.iconName =
        byLigature(val.prefix, node.innerText) ||
        byUnicode(val.prefix, toHex(node.innerText));
    }

    if (
      !val.iconName &&
      config.autoFetchSvg &&
      node.firstChild &&
      node.firstChild.nodeType === Node.TEXT_NODE
    ) {
      val.iconName = node.firstChild.data;
    }

    return val;
  }

  function attributesParser(node) {
    var extraAttributes = toArray(node.attributes).reduce(function (acc, attr) {
      if (acc.name !== 'class' && acc.name !== 'style') {
        acc[attr.name] = attr.value;
      }

      return acc;
    }, {});
    var title = node.getAttribute('title');
    var titleId = node.getAttribute('data-fa-title-id');

    if (config.autoA11y) {
      if (title) {
        extraAttributes['aria-labelledby'] = ''
          .concat(config.replacementClass, '-title-')
          .concat(titleId || nextUniqueId());
      } else {
        extraAttributes['aria-hidden'] = 'true';
        extraAttributes['focusable'] = 'false';
      }
    }

    return extraAttributes;
  }

  function blankMeta() {
    return {
      iconName: null,
      title: null,
      titleId: null,
      prefix: null,
      transform: meaninglessTransform,
      symbol: false,
      mask: {
        iconName: null,
        prefix: null,
        rest: [],
      },
      maskId: null,
      extra: {
        classes: [],
        styles: {},
        attributes: {},
      },
    };
  }
  function parseMeta(node) {
    var parser =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : {
            styleParser: true,
          };

    var _classParser = classParser(node),
      iconName = _classParser.iconName,
      prefix = _classParser.prefix,
      extraClasses = _classParser.rest;

    var extraAttributes = attributesParser(node);
    var pluginMeta = chainHooks('parseNodeAttributes', {}, node);
    var extraStyles = parser.styleParser ? styleParser(node) : [];
    return _objectSpread2(
      {
        iconName: iconName,
        title: node.getAttribute('title'),
        titleId: node.getAttribute('data-fa-title-id'),
        prefix: prefix,
        transform: meaninglessTransform,
        mask: {
          iconName: null,
          prefix: null,
          rest: [],
        },
        maskId: null,
        symbol: false,
        extra: {
          classes: extraClasses,
          styles: extraStyles,
          attributes: extraAttributes,
        },
      },
      pluginMeta,
    );
  }

  var styles$2 = namespace.styles;

  function generateMutation(node) {
    var nodeMeta =
      config.autoReplaceSvg === 'nest'
        ? parseMeta(node, {
            styleParser: false,
          })
        : parseMeta(node);

    if (~nodeMeta.extra.classes.indexOf(LAYERS_TEXT_CLASSNAME)) {
      return callProvided('generateLayersText', node, nodeMeta);
    } else {
      return callProvided('generateSvgReplacementMutation', node, nodeMeta);
    }
  }

  var knownPrefixes = new Set();
  FAMILIES.map(function (family) {
    knownPrefixes.add('fa-'.concat(family));
  });
  Object.keys(PREFIX_TO_STYLE[FAMILY_CLASSIC]).map(
    knownPrefixes.add.bind(knownPrefixes),
  );
  Object.keys(PREFIX_TO_STYLE[FAMILY_SHARP]).map(
    knownPrefixes.add.bind(knownPrefixes),
  );
  knownPrefixes = _toConsumableArray(knownPrefixes);

  function onTree(root) {
    var callback =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    if (!IS_DOM) return Promise.resolve();
    var htmlClassList = DOCUMENT.documentElement.classList;

    var hclAdd = function hclAdd(suffix) {
      return htmlClassList.add(
        ''.concat(HTML_CLASS_I2SVG_BASE_CLASS, '-').concat(suffix),
      );
    };

    var hclRemove = function hclRemove(suffix) {
      return htmlClassList.remove(
        ''.concat(HTML_CLASS_I2SVG_BASE_CLASS, '-').concat(suffix),
      );
    };

    var prefixes = config.autoFetchSvg
      ? knownPrefixes
      : FAMILIES.map(function (f) {
          return 'fa-'.concat(f);
        }).concat(Object.keys(styles$2));

    if (!prefixes.includes('fa')) {
      prefixes.push('fa');
    }

    var prefixesDomQuery = [
      '.'.concat(LAYERS_TEXT_CLASSNAME, ':not([').concat(DATA_FA_I2SVG, '])'),
    ]
      .concat(
        prefixes.map(function (p) {
          return '.'.concat(p, ':not([').concat(DATA_FA_I2SVG, '])');
        }),
      )
      .join(', ');

    if (prefixesDomQuery.length === 0) {
      return Promise.resolve();
    }

    var candidates = [];

    try {
      candidates = toArray(root.querySelectorAll(prefixesDomQuery));
    } catch (e) {
      // noop
    }

    if (candidates.length > 0) {
      hclAdd('pending');
      hclRemove('complete');
    } else {
      return Promise.resolve();
    }

    var mark = perf.begin('onTree');
    var mutations = candidates.reduce(function (acc, node) {
      try {
        var mutation = generateMutation(node);

        if (mutation) {
          acc.push(mutation);
        }
      } catch (e) {
        if (!PRODUCTION) {
          if (e.name === 'MissingIcon') {
            console.error(e);
          }
        }
      }

      return acc;
    }, []);
    return new Promise(function (resolve, reject) {
      Promise.all(mutations)
        .then(function (resolvedMutations) {
          perform(resolvedMutations, function () {
            hclAdd('active');
            hclAdd('complete');
            hclRemove('pending');
            if (typeof callback === 'function') callback();
            mark();
            resolve();
          });
        })
        .catch(function (e) {
          mark();
          reject(e);
        });
    });
  }

  function onNode(node) {
    var callback =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    generateMutation(node).then(function (mutation) {
      if (mutation) {
        perform([mutation], callback);
      }
    });
  }

  function resolveIcons(next) {
    return function (maybeIconDefinition) {
      var params =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var iconDefinition = (maybeIconDefinition || {}).icon
        ? maybeIconDefinition
        : findIconDefinition(maybeIconDefinition || {});
      var mask = params.mask;

      if (mask) {
        mask = (mask || {}).icon ? mask : findIconDefinition(mask || {});
      }

      return next(
        iconDefinition,
        _objectSpread2(
          _objectSpread2({}, params),
          {},
          {
            mask: mask,
          },
        ),
      );
    };
  }

  var render = function render(iconDefinition) {
    var params =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _params$transform = params.transform,
      transform =
        _params$transform === void 0 ? meaninglessTransform : _params$transform,
      _params$symbol = params.symbol,
      symbol = _params$symbol === void 0 ? false : _params$symbol,
      _params$mask = params.mask,
      mask = _params$mask === void 0 ? null : _params$mask,
      _params$maskId = params.maskId,
      maskId = _params$maskId === void 0 ? null : _params$maskId,
      _params$title = params.title,
      title = _params$title === void 0 ? null : _params$title,
      _params$titleId = params.titleId,
      titleId = _params$titleId === void 0 ? null : _params$titleId,
      _params$classes = params.classes,
      classes = _params$classes === void 0 ? [] : _params$classes,
      _params$attributes = params.attributes,
      attributes = _params$attributes === void 0 ? {} : _params$attributes,
      _params$styles = params.styles,
      styles = _params$styles === void 0 ? {} : _params$styles;
    if (!iconDefinition) return;
    var prefix = iconDefinition.prefix,
      iconName = iconDefinition.iconName,
      icon = iconDefinition.icon;
    return domVariants(
      _objectSpread2(
        {
          type: 'icon',
        },
        iconDefinition,
      ),
      function () {
        callHooks('beforeDOMElementCreation', {
          iconDefinition: iconDefinition,
          params: params,
        });

        if (config.autoA11y) {
          if (title) {
            attributes['aria-labelledby'] = ''
              .concat(config.replacementClass, '-title-')
              .concat(titleId || nextUniqueId());
          } else {
            attributes['aria-hidden'] = 'true';
            attributes['focusable'] = 'false';
          }
        }

        return makeInlineSvgAbstract({
          icons: {
            main: asFoundIcon(icon),
            mask: mask
              ? asFoundIcon(mask.icon)
              : {
                  found: false,
                  width: null,
                  height: null,
                  icon: {},
                },
          },
          prefix: prefix,
          iconName: iconName,
          transform: _objectSpread2(
            _objectSpread2({}, meaninglessTransform),
            transform,
          ),
          symbol: symbol,
          title: title,
          maskId: maskId,
          titleId: titleId,
          extra: {
            attributes: attributes,
            styles: styles,
            classes: classes,
          },
        });
      },
    );
  };
  var ReplaceElements = {
    mixout: function mixout() {
      return {
        icon: resolveIcons(render),
      };
    },
    hooks: function hooks() {
      return {
        mutationObserverCallbacks: function mutationObserverCallbacks(
          accumulator,
        ) {
          accumulator.treeCallback = onTree;
          accumulator.nodeCallback = onNode;
          return accumulator;
        },
      };
    },
    provides: function provides(providers$$1) {
      providers$$1.i2svg = function (params) {
        var _params$node = params.node,
          node = _params$node === void 0 ? DOCUMENT : _params$node,
          _params$callback = params.callback,
          callback =
            _params$callback === void 0 ? function () {} : _params$callback;
        return onTree(node, callback);
      };

      providers$$1.generateSvgReplacementMutation = function (node, nodeMeta) {
        var iconName = nodeMeta.iconName,
          title = nodeMeta.title,
          titleId = nodeMeta.titleId,
          prefix = nodeMeta.prefix,
          transform = nodeMeta.transform,
          symbol = nodeMeta.symbol,
          mask = nodeMeta.mask,
          maskId = nodeMeta.maskId,
          extra = nodeMeta.extra;
        return new Promise(function (resolve, reject) {
          Promise.all([
            findIcon(iconName, prefix),
            mask.iconName
              ? findIcon(mask.iconName, mask.prefix)
              : Promise.resolve({
                  found: false,
                  width: 512,
                  height: 512,
                  icon: {},
                }),
          ])
            .then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                main = _ref2[0],
                mask = _ref2[1];

              resolve([
                node,
                makeInlineSvgAbstract({
                  icons: {
                    main: main,
                    mask: mask,
                  },
                  prefix: prefix,
                  iconName: iconName,
                  transform: transform,
                  symbol: symbol,
                  maskId: maskId,
                  title: title,
                  titleId: titleId,
                  extra: extra,
                  watchable: true,
                }),
              ]);
            })
            .catch(reject);
        });
      };

      providers$$1.generateAbstractIcon = function (_ref3) {
        var children = _ref3.children,
          attributes = _ref3.attributes,
          main = _ref3.main,
          transform = _ref3.transform,
          styles = _ref3.styles;
        var styleString = joinStyles(styles);

        if (styleString.length > 0) {
          attributes['style'] = styleString;
        }

        var nextChild;

        if (transformIsMeaningful(transform)) {
          nextChild = callProvided('generateAbstractTransformGrouping', {
            main: main,
            transform: transform,
            containerWidth: main.width,
            iconWidth: main.width,
          });
        }

        children.push(nextChild || main.icon);
        return {
          children: children,
          attributes: attributes,
        };
      };
    },
  };

  var Layers = {
    mixout: function mixout() {
      return {
        layer: function layer(assembler) {
          var params =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          var _params$classes = params.classes,
            classes = _params$classes === void 0 ? [] : _params$classes;
          return domVariants(
            {
              type: 'layer',
            },
            function () {
              callHooks('beforeDOMElementCreation', {
                assembler: assembler,
                params: params,
              });
              var children = [];
              assembler(function (args) {
                Array.isArray(args)
                  ? args.map(function (a) {
                      children = children.concat(a.abstract);
                    })
                  : (children = children.concat(args.abstract));
              });
              return [
                {
                  tag: 'span',
                  attributes: {
                    class: [''.concat(config.cssPrefix, '-layers')]
                      .concat(_toConsumableArray(classes))
                      .join(' '),
                  },
                  children: children,
                },
              ];
            },
          );
        },
      };
    },
  };

  var LayersCounter = {
    mixout: function mixout() {
      return {
        counter: function counter(content) {
          var params =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          var _params$title = params.title,
            title = _params$title === void 0 ? null : _params$title,
            _params$classes = params.classes,
            classes = _params$classes === void 0 ? [] : _params$classes,
            _params$attributes = params.attributes,
            attributes =
              _params$attributes === void 0 ? {} : _params$attributes,
            _params$styles = params.styles,
            styles = _params$styles === void 0 ? {} : _params$styles;
          return domVariants(
            {
              type: 'counter',
              content: content,
            },
            function () {
              callHooks('beforeDOMElementCreation', {
                content: content,
                params: params,
              });
              return makeLayersCounterAbstract({
                content: content.toString(),
                title: title,
                extra: {
                  attributes: attributes,
                  styles: styles,
                  classes: [
                    ''.concat(config.cssPrefix, '-layers-counter'),
                  ].concat(_toConsumableArray(classes)),
                },
              });
            },
          );
        },
      };
    },
  };

  var LayersText = {
    mixout: function mixout() {
      return {
        text: function text(content) {
          var params =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          var _params$transform = params.transform,
            transform =
              _params$transform === void 0
                ? meaninglessTransform
                : _params$transform,
            _params$title = params.title,
            title = _params$title === void 0 ? null : _params$title,
            _params$classes = params.classes,
            classes = _params$classes === void 0 ? [] : _params$classes,
            _params$attributes = params.attributes,
            attributes =
              _params$attributes === void 0 ? {} : _params$attributes,
            _params$styles = params.styles,
            styles = _params$styles === void 0 ? {} : _params$styles;
          return domVariants(
            {
              type: 'text',
              content: content,
            },
            function () {
              callHooks('beforeDOMElementCreation', {
                content: content,
                params: params,
              });
              return makeLayersTextAbstract({
                content: content,
                transform: _objectSpread2(
                  _objectSpread2({}, meaninglessTransform),
                  transform,
                ),
                title: title,
                extra: {
                  attributes: attributes,
                  styles: styles,
                  classes: [''.concat(config.cssPrefix, '-layers-text')].concat(
                    _toConsumableArray(classes),
                  ),
                },
              });
            },
          );
        },
      };
    },
    provides: function provides(providers$$1) {
      providers$$1.generateLayersText = function (node, nodeMeta) {
        var title = nodeMeta.title,
          transform = nodeMeta.transform,
          extra = nodeMeta.extra;
        var width = null;
        var height = null;

        if (IS_IE) {
          var computedFontSize = parseInt(getComputedStyle(node).fontSize, 10);
          var boundingClientRect = node.getBoundingClientRect();
          width = boundingClientRect.width / computedFontSize;
          height = boundingClientRect.height / computedFontSize;
        }

        if (config.autoA11y && !title) {
          extra.attributes['aria-hidden'] = 'true';
        }

        return Promise.resolve([
          node,
          makeLayersTextAbstract({
            content: node.innerHTML,
            width: width,
            height: height,
            transform: transform,
            title: title,
            extra: extra,
            watchable: true,
          }),
        ]);
      };
    },
  };

  var CLEAN_CONTENT_PATTERN = new RegExp('"', 'ug');
  var SECONDARY_UNICODE_RANGE = [1105920, 1112319];
  function hexValueFromContent(content) {
    var cleaned = content.replace(CLEAN_CONTENT_PATTERN, '');
    var codePoint = codePointAt(cleaned, 0);
    var isPrependTen =
      codePoint >= SECONDARY_UNICODE_RANGE[0] &&
      codePoint <= SECONDARY_UNICODE_RANGE[1];
    var isDoubled = cleaned.length === 2 ? cleaned[0] === cleaned[1] : false;
    return {
      value: isDoubled ? toHex(cleaned[0]) : toHex(cleaned),
      isSecondary: isPrependTen || isDoubled,
    };
  }

  function replaceForPosition(node, position) {
    var pendingAttribute = ''
      .concat(DATA_FA_PSEUDO_ELEMENT_PENDING)
      .concat(position.replace(':', '-'));
    return new Promise(function (resolve, reject) {
      if (node.getAttribute(pendingAttribute) !== null) {
        // This node is already being processed
        return resolve();
      }

      var children = toArray(node.children);
      var alreadyProcessedPseudoElement = children.filter(function (c) {
        return c.getAttribute(DATA_FA_PSEUDO_ELEMENT) === position;
      })[0];
      var styles = WINDOW.getComputedStyle(node, position);
      var fontFamily = styles
        .getPropertyValue('font-family')
        .match(FONT_FAMILY_PATTERN);
      var fontWeight = styles.getPropertyValue('font-weight');
      var content = styles.getPropertyValue('content');

      if (alreadyProcessedPseudoElement && !fontFamily) {
        // If we've already processed it but the current computed style does not result in a font-family,
        // that probably means that a class name that was previously present to make the icon has been
        // removed. So we now should delete the icon.
        node.removeChild(alreadyProcessedPseudoElement);
        return resolve();
      } else if (fontFamily && content !== 'none' && content !== '') {
        var _content = styles.getPropertyValue('content');

        var family = ~['Sharp'].indexOf(fontFamily[2])
          ? FAMILY_SHARP
          : FAMILY_CLASSIC;
        var prefix = ~[
          'Solid',
          'Regular',
          'Light',
          'Thin',
          'Duotone',
          'Brands',
          'Kit',
        ].indexOf(fontFamily[2])
          ? STYLE_TO_PREFIX[family][fontFamily[2].toLowerCase()]
          : FONT_WEIGHT_TO_PREFIX[family][fontWeight];

        var _hexValueFromContent = hexValueFromContent(_content),
          hexValue = _hexValueFromContent.value,
          isSecondary = _hexValueFromContent.isSecondary;

        var isV4 = fontFamily[0].startsWith('FontAwesome');
        var iconName = byUnicode(prefix, hexValue);
        var iconIdentifier = iconName;

        if (isV4) {
          var iconName4 = byOldUnicode(hexValue);

          if (iconName4.iconName && iconName4.prefix) {
            iconName = iconName4.iconName;
            prefix = iconName4.prefix;
          }
        } // Only convert the pseudo element in this ::before/::after position into an icon if we haven't
        // already done so with the same prefix and iconName

        if (
          iconName &&
          !isSecondary &&
          (!alreadyProcessedPseudoElement ||
            alreadyProcessedPseudoElement.getAttribute(DATA_PREFIX) !==
              prefix ||
            alreadyProcessedPseudoElement.getAttribute(DATA_ICON) !==
              iconIdentifier)
        ) {
          node.setAttribute(pendingAttribute, iconIdentifier);

          if (alreadyProcessedPseudoElement) {
            // Delete the old one, since we're replacing it with a new one
            node.removeChild(alreadyProcessedPseudoElement);
          }

          var meta = blankMeta();
          var extra = meta.extra;
          extra.attributes[DATA_FA_PSEUDO_ELEMENT] = position;
          findIcon(iconName, prefix)
            .then(function (main) {
              var abstract = makeInlineSvgAbstract(
                _objectSpread2(
                  _objectSpread2({}, meta),
                  {},
                  {
                    icons: {
                      main: main,
                      mask: emptyCanonicalIcon(),
                    },
                    prefix: prefix,
                    iconName: iconIdentifier,
                    extra: extra,
                    watchable: true,
                  },
                ),
              );
              var element = DOCUMENT.createElement('svg');

              if (position === '::before') {
                node.insertBefore(element, node.firstChild);
              } else {
                node.appendChild(element);
              }

              element.outerHTML = abstract
                .map(function (a) {
                  return toHtml(a);
                })
                .join('\n');
              node.removeAttribute(pendingAttribute);
              resolve();
            })
            .catch(reject);
        } else {
          resolve();
        }
      } else {
        resolve();
      }
    });
  }

  function replace(node) {
    return Promise.all([
      replaceForPosition(node, '::before'),
      replaceForPosition(node, '::after'),
    ]);
  }

  function processable(node) {
    return (
      node.parentNode !== document.head &&
      !~TAGNAMES_TO_SKIP_FOR_PSEUDOELEMENTS.indexOf(
        node.tagName.toUpperCase(),
      ) &&
      !node.getAttribute(DATA_FA_PSEUDO_ELEMENT) &&
      (!node.parentNode || node.parentNode.tagName !== 'svg')
    );
  }

  function searchPseudoElements(root) {
    if (!IS_DOM) return;
    return new Promise(function (resolve, reject) {
      var operations = toArray(root.querySelectorAll('*'))
        .filter(processable)
        .map(replace);
      var end = perf.begin('searchPseudoElements');
      disableObservation();
      Promise.all(operations)
        .then(function () {
          end();
          enableObservation();
          resolve();
        })
        .catch(function () {
          end();
          enableObservation();
          reject();
        });
    });
  }

  var PseudoElements = {
    hooks: function hooks() {
      return {
        mutationObserverCallbacks: function mutationObserverCallbacks(
          accumulator,
        ) {
          accumulator.pseudoElementsCallback = searchPseudoElements;
          return accumulator;
        },
      };
    },
    provides: function provides(providers$$1) {
      providers$$1.pseudoElements2svg = function (params) {
        var _params$node = params.node,
          node = _params$node === void 0 ? DOCUMENT : _params$node;

        if (config.searchPseudoElements) {
          searchPseudoElements(node);
        }
      };
    },
  };

  var _unwatched = false;
  var MutationObserver$1 = {
    mixout: function mixout() {
      return {
        dom: {
          unwatch: function unwatch() {
            disableObservation();
            _unwatched = true;
          },
        },
      };
    },
    hooks: function hooks() {
      return {
        bootstrap: function bootstrap() {
          observe(chainHooks('mutationObserverCallbacks', {}));
        },
        noAuto: function noAuto() {
          disconnect();
        },
        watch: function watch(params) {
          var observeMutationsRoot = params.observeMutationsRoot;

          if (_unwatched) {
            enableObservation();
          } else {
            observe(
              chainHooks('mutationObserverCallbacks', {
                observeMutationsRoot: observeMutationsRoot,
              }),
            );
          }
        },
      };
    },
  };

  var parseTransformString = function parseTransformString(transformString) {
    var transform = {
      size: 16,
      x: 0,
      y: 0,
      flipX: false,
      flipY: false,
      rotate: 0,
    };
    return transformString
      .toLowerCase()
      .split(' ')
      .reduce(function (acc, n) {
        var parts = n.toLowerCase().split('-');
        var first = parts[0];
        var rest = parts.slice(1).join('-');

        if (first && rest === 'h') {
          acc.flipX = true;
          return acc;
        }

        if (first && rest === 'v') {
          acc.flipY = true;
          return acc;
        }

        rest = parseFloat(rest);

        if (isNaN(rest)) {
          return acc;
        }

        switch (first) {
          case 'grow':
            acc.size = acc.size + rest;
            break;

          case 'shrink':
            acc.size = acc.size - rest;
            break;

          case 'left':
            acc.x = acc.x - rest;
            break;

          case 'right':
            acc.x = acc.x + rest;
            break;

          case 'up':
            acc.y = acc.y - rest;
            break;

          case 'down':
            acc.y = acc.y + rest;
            break;

          case 'rotate':
            acc.rotate = acc.rotate + rest;
            break;
        }

        return acc;
      }, transform);
  };
  var PowerTransforms = {
    mixout: function mixout() {
      return {
        parse: {
          transform: function transform(transformString) {
            return parseTransformString(transformString);
          },
        },
      };
    },
    hooks: function hooks() {
      return {
        parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
          var transformString = node.getAttribute('data-fa-transform');

          if (transformString) {
            accumulator.transform = parseTransformString(transformString);
          }

          return accumulator;
        },
      };
    },
    provides: function provides(providers) {
      providers.generateAbstractTransformGrouping = function (_ref) {
        var main = _ref.main,
          transform = _ref.transform,
          containerWidth = _ref.containerWidth,
          iconWidth = _ref.iconWidth;
        var outer = {
          transform: 'translate('.concat(containerWidth / 2, ' 256)'),
        };
        var innerTranslate = 'translate('
          .concat(transform.x * 32, ', ')
          .concat(transform.y * 32, ') ');
        var innerScale = 'scale('
          .concat((transform.size / 16) * (transform.flipX ? -1 : 1), ', ')
          .concat((transform.size / 16) * (transform.flipY ? -1 : 1), ') ');
        var innerRotate = 'rotate('.concat(transform.rotate, ' 0 0)');
        var inner = {
          transform: ''
            .concat(innerTranslate, ' ')
            .concat(innerScale, ' ')
            .concat(innerRotate),
        };
        var path = {
          transform: 'translate('.concat((iconWidth / 2) * -1, ' -256)'),
        };
        var operations = {
          outer: outer,
          inner: inner,
          path: path,
        };
        return {
          tag: 'g',
          attributes: _objectSpread2({}, operations.outer),
          children: [
            {
              tag: 'g',
              attributes: _objectSpread2({}, operations.inner),
              children: [
                {
                  tag: main.icon.tag,
                  children: main.icon.children,
                  attributes: _objectSpread2(
                    _objectSpread2({}, main.icon.attributes),
                    operations.path,
                  ),
                },
              ],
            },
          ],
        };
      };
    },
  };

  var ALL_SPACE = {
    x: 0,
    y: 0,
    width: '100%',
    height: '100%',
  };

  function fillBlack(abstract) {
    var force =
      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    if (abstract.attributes && (abstract.attributes.fill || force)) {
      abstract.attributes.fill = 'black';
    }

    return abstract;
  }

  function deGroup(abstract) {
    if (abstract.tag === 'g') {
      return abstract.children;
    } else {
      return [abstract];
    }
  }

  var Masks = {
    hooks: function hooks() {
      return {
        parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
          var maskData = node.getAttribute('data-fa-mask');
          var mask = !maskData
            ? emptyCanonicalIcon()
            : getCanonicalIcon(
                maskData.split(' ').map(function (i) {
                  return i.trim();
                }),
              );

          if (!mask.prefix) {
            mask.prefix = getDefaultUsablePrefix();
          }

          accumulator.mask = mask;
          accumulator.maskId = node.getAttribute('data-fa-mask-id');
          return accumulator;
        },
      };
    },
    provides: function provides(providers) {
      providers.generateAbstractMask = function (_ref) {
        var children = _ref.children,
          attributes = _ref.attributes,
          main = _ref.main,
          mask = _ref.mask,
          explicitMaskId = _ref.maskId,
          transform = _ref.transform;
        var mainWidth = main.width,
          mainPath = main.icon;
        var maskWidth = mask.width,
          maskPath = mask.icon;
        var trans = transformForSvg({
          transform: transform,
          containerWidth: maskWidth,
          iconWidth: mainWidth,
        });
        var maskRect = {
          tag: 'rect',
          attributes: _objectSpread2(
            _objectSpread2({}, ALL_SPACE),
            {},
            {
              fill: 'white',
            },
          ),
        };
        var maskInnerGroupChildrenMixin = mainPath.children
          ? {
              children: mainPath.children.map(fillBlack),
            }
          : {};
        var maskInnerGroup = {
          tag: 'g',
          attributes: _objectSpread2({}, trans.inner),
          children: [
            fillBlack(
              _objectSpread2(
                {
                  tag: mainPath.tag,
                  attributes: _objectSpread2(
                    _objectSpread2({}, mainPath.attributes),
                    trans.path,
                  ),
                },
                maskInnerGroupChildrenMixin,
              ),
            ),
          ],
        };
        var maskOuterGroup = {
          tag: 'g',
          attributes: _objectSpread2({}, trans.outer),
          children: [maskInnerGroup],
        };
        var maskId = 'mask-'.concat(explicitMaskId || nextUniqueId());
        var clipId = 'clip-'.concat(explicitMaskId || nextUniqueId());
        var maskTag = {
          tag: 'mask',
          attributes: _objectSpread2(
            _objectSpread2({}, ALL_SPACE),
            {},
            {
              id: maskId,
              maskUnits: 'userSpaceOnUse',
              maskContentUnits: 'userSpaceOnUse',
            },
          ),
          children: [maskRect, maskOuterGroup],
        };
        var defs = {
          tag: 'defs',
          children: [
            {
              tag: 'clipPath',
              attributes: {
                id: clipId,
              },
              children: deGroup(maskPath),
            },
            maskTag,
          ],
        };
        children.push(defs, {
          tag: 'rect',
          attributes: _objectSpread2(
            {
              fill: 'currentColor',
              'clip-path': 'url(#'.concat(clipId, ')'),
              mask: 'url(#'.concat(maskId, ')'),
            },
            ALL_SPACE,
          ),
        });
        return {
          children: children,
          attributes: attributes,
        };
      };
    },
  };

  var MissingIconIndicator = {
    provides: function provides(providers) {
      var reduceMotion = false;

      if (WINDOW.matchMedia) {
        reduceMotion = WINDOW.matchMedia('(prefers-reduced-motion: reduce)')
          .matches;
      }

      providers.missingIconAbstract = function () {
        var gChildren = [];
        var FILL = {
          fill: 'currentColor',
        };
        var ANIMATION_BASE = {
          attributeType: 'XML',
          repeatCount: 'indefinite',
          dur: '2s',
        }; // Ring

        gChildren.push({
          tag: 'path',
          attributes: _objectSpread2(
            _objectSpread2({}, FILL),
            {},
            {
              d:
                'M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z',
            },
          ),
        });

        var OPACITY_ANIMATE = _objectSpread2(
          _objectSpread2({}, ANIMATION_BASE),
          {},
          {
            attributeName: 'opacity',
          },
        );

        var dot = {
          tag: 'circle',
          attributes: _objectSpread2(
            _objectSpread2({}, FILL),
            {},
            {
              cx: '256',
              cy: '364',
              r: '28',
            },
          ),
          children: [],
        };

        if (!reduceMotion) {
          dot.children.push(
            {
              tag: 'animate',
              attributes: _objectSpread2(
                _objectSpread2({}, ANIMATION_BASE),
                {},
                {
                  attributeName: 'r',
                  values: '28;14;28;28;14;28;',
                },
              ),
            },
            {
              tag: 'animate',
              attributes: _objectSpread2(
                _objectSpread2({}, OPACITY_ANIMATE),
                {},
                {
                  values: '1;0;1;1;0;1;',
                },
              ),
            },
          );
        }

        gChildren.push(dot);
        gChildren.push({
          tag: 'path',
          attributes: _objectSpread2(
            _objectSpread2({}, FILL),
            {},
            {
              opacity: '1',
              d:
                'M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z',
            },
          ),
          children: reduceMotion
            ? []
            : [
                {
                  tag: 'animate',
                  attributes: _objectSpread2(
                    _objectSpread2({}, OPACITY_ANIMATE),
                    {},
                    {
                      values: '1;0;0;0;0;1;',
                    },
                  ),
                },
              ],
        });

        if (!reduceMotion) {
          // Exclamation
          gChildren.push({
            tag: 'path',
            attributes: _objectSpread2(
              _objectSpread2({}, FILL),
              {},
              {
                opacity: '0',
                d:
                  'M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z',
              },
            ),
            children: [
              {
                tag: 'animate',
                attributes: _objectSpread2(
                  _objectSpread2({}, OPACITY_ANIMATE),
                  {},
                  {
                    values: '0;0;1;1;0;0;',
                  },
                ),
              },
            ],
          });
        }

        return {
          tag: 'g',
          attributes: {
            class: 'missing',
          },
          children: gChildren,
        };
      };
    },
  };

  var SvgSymbols = {
    hooks: function hooks() {
      return {
        parseNodeAttributes: function parseNodeAttributes(accumulator, node) {
          var symbolData = node.getAttribute('data-fa-symbol');
          var symbol =
            symbolData === null ? false : symbolData === '' ? true : symbolData;
          accumulator['symbol'] = symbol;
          return accumulator;
        },
      };
    },
  };

  var plugins = [
    InjectCSS,
    ReplaceElements,
    Layers,
    LayersCounter,
    LayersText,
    PseudoElements,
    MutationObserver$1,
    PowerTransforms,
    Masks,
    MissingIconIndicator,
    SvgSymbols,
  ];

  registerPlugins(plugins, {
    mixoutsTo: api,
  });
  var noAuto$1 = api.noAuto;
  var config$1 = api.config;
  var library$1 = api.library;
  var dom$1 = api.dom;
  var parse$1 = api.parse;
  var findIconDefinition$1 = api.findIconDefinition;
  var toHtml$1 = api.toHtml;
  var icon = api.icon;
  var layer = api.layer;
  var text = api.text;
  var counter = api.counter;

  exports.api = api;
  exports.config = config$1;
  exports.counter = counter;
  exports.dom = dom$1;
  exports.findIconDefinition = findIconDefinition$1;
  exports.icon = icon;
  exports.layer = layer;
  exports.library = library$1;
  exports.noAuto = noAuto$1;
  exports.parse = parse$1;
  exports.text = text;
  exports.toHtml = toHtml$1;

  Object.defineProperty(exports, '__esModule', { value: true });
});
define('@fortawesome/free-solid-svg-icons', ['exports'], function (exports) {
  'use strict';

  var fa0 = {
    prefix: 'fas',
    iconName: '0',
    icon: [
      320,
      512,
      [],
      '30',
      'M0 192C0 103.6 71.6 32 160 32s160 71.6 160 160V320c0 88.4-71.6 160-160 160S0 408.4 0 320V192zM160 96c-53 0-96 43-96 96V320c0 53 43 96 96 96s96-43 96-96V192c0-53-43-96-96-96z',
    ],
  };
  var fa1 = {
    prefix: 'fas',
    iconName: '1',
    icon: [
      256,
      512,
      [],
      '31',
      'M160 64c0-11.8-6.5-22.6-16.9-28.2s-23-5-32.9 1.6l-96 64C-.5 111.2-4.4 131 5.4 145.8s29.7 18.7 44.4 8.9L96 123.8V416H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96 96c17.7 0 32-14.3 32-32s-14.3-32-32-32H160V64z',
    ],
  };
  var fa2 = {
    prefix: 'fas',
    iconName: '2',
    icon: [
      320,
      512,
      [],
      '32',
      'M142.9 96c-21.5 0-42.2 8.5-57.4 23.8L54.6 150.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L40.2 74.5C67.5 47.3 104.4 32 142.9 32C223 32 288 97 288 177.1c0 38.5-15.3 75.4-42.5 102.6L109.3 416H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9L200.2 234.5c15.2-15.2 23.8-35.9 23.8-57.4c0-44.8-36.3-81.1-81.1-81.1z',
    ],
  };
  var fa3 = {
    prefix: 'fas',
    iconName: '3',
    icon: [
      448,
      512,
      [],
      '33',
      'M64 64c0-17.7 14.3-32 32-32H336c13.2 0 25 8.1 29.8 20.4s1.5 26.3-8.2 35.2L226.3 208H248c75.1 0 136 60.9 136 136s-60.9 136-136 136H169.4c-42.4 0-81.2-24-100.2-61.9l-1.9-3.8c-7.9-15.8-1.5-35 14.3-42.9s35-1.5 42.9 14.3l1.9 3.8c8.1 16.3 24.8 26.5 42.9 26.5H248c39.8 0 72-32.2 72-72s-32.2-72-72-72H144c-13.2 0-25-8.1-29.8-20.4s-1.5-26.3 8.2-35.2L253.7 96H96C78.3 96 64 81.7 64 64z',
    ],
  };
  var fa4 = {
    prefix: 'fas',
    iconName: '4',
    icon: [
      384,
      512,
      [],
      '34',
      'M189 77.6c7.5-16 .7-35.1-15.3-42.6s-35.1-.7-42.6 15.3L3 322.4c-4.7 9.9-3.9 21.5 1.9 30.8S21 368 32 368H256v80c0 17.7 14.3 32 32 32s32-14.3 32-32V368h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320V160c0-17.7-14.3-32-32-32s-32 14.3-32 32V304H82.4L189 77.6z',
    ],
  };
  var fa5 = {
    prefix: 'fas',
    iconName: '5',
    icon: [
      320,
      512,
      [],
      '35',
      'M32.5 58.3C35.3 43.1 48.5 32 64 32H256c17.7 0 32 14.3 32 32s-14.3 32-32 32H90.7L70.3 208H184c75.1 0 136 60.9 136 136s-60.9 136-136 136H100.5c-39.4 0-75.4-22.3-93-57.5l-4.1-8.2c-7.9-15.8-1.5-35 14.3-42.9s35-1.5 42.9 14.3l4.1 8.2c6.8 13.6 20.6 22.1 35.8 22.1H184c39.8 0 72-32.2 72-72s-32.2-72-72-72H32c-9.5 0-18.5-4.2-24.6-11.5s-8.6-16.9-6.9-26.2l32-176z',
    ],
  };
  var fa6 = {
    prefix: 'fas',
    iconName: '6',
    icon: [
      320,
      512,
      [],
      '36',
      'M232.4 84.7c11.4-13.5 9.7-33.7-3.8-45.1s-33.7-9.7-45.1 3.8L38.6 214.7C14.7 242.9 1.1 278.4 .1 315.2c0 1.4-.1 2.9-.1 4.3c0 .2 0 .3 0 .5c0 88.4 71.6 160 160 160s160-71.6 160-160c0-85.5-67.1-155.4-151.5-159.8l63.9-75.6zM64 320c0-53 43-96 96-96s96 43 96 96s-43 96-96 96s-96-43-96-96z',
    ],
  };
  var fa7 = {
    prefix: 'fas',
    iconName: '7',
    icon: [
      320,
      512,
      [],
      '37',
      'M0 64C0 46.3 14.3 32 32 32H288c11.5 0 22 6.1 27.7 16.1s5.7 22.2-.1 32.1l-224 384c-8.9 15.3-28.5 20.4-43.8 11.5s-20.4-28.5-11.5-43.8L232.3 96H32C14.3 96 0 81.7 0 64z',
    ],
  };
  var fa8 = {
    prefix: 'fas',
    iconName: '8',
    icon: [
      320,
      512,
      [],
      '38',
      'M304 160c0-70.7-57.3-128-128-128H144C73.3 32 16 89.3 16 160c0 34.6 13.7 66 36 89C20.5 272.3 0 309.8 0 352c0 70.7 57.3 128 128 128h64c70.7 0 128-57.3 128-128c0-42.2-20.5-79.7-52-103c22.3-23 36-54.4 36-89zM176.1 288H192c35.3 0 64 28.7 64 64s-28.7 64-64 64H128c-35.3 0-64-28.7-64-64s28.7-64 64-64h15.9c0 0 .1 0 .1 0h32c0 0 .1 0 .1 0zm0-64c0 0 0 0 0 0H144c0 0 0 0 0 0c-35.3 0-64-28.7-64-64c0-35.3 28.7-64 64-64h32c35.3 0 64 28.7 64 64c0 35.3-28.6 64-64 64z',
    ],
  };
  var fa9 = {
    prefix: 'fas',
    iconName: '9',
    icon: [
      320,
      512,
      [],
      '39',
      'M64 192c0 53 43 96 96 96s96-43 96-96s-43-96-96-96s-96 43-96 96zm87.5 159.8C67.1 347.4 0 277.5 0 192C0 103.6 71.6 32 160 32s160 71.6 160 160c0 2.6-.1 5.3-.2 7.9c-1.7 35.7-15.2 70-38.4 97.4l-145 171.4c-11.4 13.5-31.6 15.2-45.1 3.8s-15.2-31.6-3.8-45.1l63.9-75.6z',
    ],
  };
  var faFillDrip = {
    prefix: 'fas',
    iconName: 'fill-drip',
    icon: [
      576,
      512,
      [],
      'f576',
      'M41.4 9.4C53.9-3.1 74.1-3.1 86.6 9.4L168 90.7l53.1-53.1c28.1-28.1 73.7-28.1 101.8 0L474.3 189.1c28.1 28.1 28.1 73.7 0 101.8L283.9 481.4c-37.5 37.5-98.3 37.5-135.8 0L30.6 363.9c-37.5-37.5-37.5-98.3 0-135.8L122.7 136 41.4 54.6c-12.5-12.5-12.5-32.8 0-45.3zm176 221.3L168 181.3 75.9 273.4c-4.2 4.2-7 9.3-8.4 14.6H386.7l42.3-42.3c3.1-3.1 3.1-8.2 0-11.3L277.7 82.9c-3.1-3.1-8.2-3.1-11.3 0L213.3 136l49.4 49.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0zM512 512c-35.3 0-64-28.7-64-64c0-25.2 32.6-79.6 51.2-108.7c6-9.4 19.5-9.4 25.5 0C543.4 368.4 576 422.8 576 448c0 35.3-28.7 64-64 64z',
    ],
  };
  var faArrowsToCircle = {
    prefix: 'fas',
    iconName: 'arrows-to-circle',
    icon: [
      640,
      512,
      [],
      'e4bd',
      'M9.4 9.4C21.9-3.1 42.1-3.1 54.6 9.4L160 114.7V96c0-17.7 14.3-32 32-32s32 14.3 32 32v96c0 4.3-.9 8.5-2.4 12.2c-1.6 3.7-3.8 7.3-6.9 10.3l-.1 .1c-3.1 3-6.6 5.3-10.3 6.9c-3.8 1.6-7.9 2.4-12.2 2.4H96c-17.7 0-32-14.3-32-32s14.3-32 32-32h18.7L9.4 54.6C-3.1 42.1-3.1 21.9 9.4 9.4zM384 256c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM114.7 352H96c-17.7 0-32-14.3-32-32s14.3-32 32-32h96 0l.1 0c8.8 0 16.7 3.6 22.5 9.3l.1 .1c3 3.1 5.3 6.6 6.9 10.3c1.6 3.8 2.4 7.9 2.4 12.2v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V397.3L54.6 502.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L114.7 352zM416 96c0-17.7 14.3-32 32-32s32 14.3 32 32v18.7L585.4 9.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3L525.3 160H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H448c-8.8 0-16.8-3.6-22.6-9.3l-.1-.1c-3-3.1-5.3-6.6-6.9-10.3s-2.4-7.8-2.4-12.2l0-.1v0V96zM525.3 352L630.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L480 397.3V416c0 17.7-14.3 32-32 32s-32-14.3-32-32V320v0c0 0 0-.1 0-.1c0-4.3 .9-8.4 2.4-12.2c1.6-3.8 3.9-7.3 6.9-10.4c5.8-5.8 13.7-9.3 22.5-9.4c0 0 .1 0 .1 0h0 96c17.7 0 32 14.3 32 32s-14.3 32-32 32H525.3z',
    ],
  };
  var faCircleChevronRight = {
    prefix: 'fas',
    iconName: 'circle-chevron-right',
    icon: [
      512,
      512,
      ['chevron-circle-right'],
      'f138',
      'M0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0S0 114.6 0 256zM241 377c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l87-87-87-87c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L345 239c9.4 9.4 9.4 24.6 0 33.9L241 377z',
    ],
  };
  var faChevronCircleRight = faCircleChevronRight;
  var faAt = {
    prefix: 'fas',
    iconName: 'at',
    icon: [
      512,
      512,
      [61946],
      '40',
      'M256 64C150 64 64 150 64 256s86 192 192 192c17.7 0 32 14.3 32 32s-14.3 32-32 32C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256v32c0 53-43 96-96 96c-29.3 0-55.6-13.2-73.2-33.9C320 371.1 289.5 384 256 384c-70.7 0-128-57.3-128-128s57.3-128 128-128c27.9 0 53.7 8.9 74.7 24.1c5.7-5 13.1-8.1 21.3-8.1c17.7 0 32 14.3 32 32v80 32c0 17.7 14.3 32 32 32s32-14.3 32-32V256c0-106-86-192-192-192zm64 192c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faTrashCan = {
    prefix: 'fas',
    iconName: 'trash-can',
    icon: [
      448,
      512,
      [61460, 'trash-alt'],
      'f2ed',
      'M135.2 17.7C140.6 6.8 151.7 0 163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm96 64c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm96 0c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16z',
    ],
  };
  var faTrashAlt = faTrashCan;
  var faTextHeight = {
    prefix: 'fas',
    iconName: 'text-height',
    icon: [
      576,
      512,
      [],
      'f034',
      'M32 32C14.3 32 0 46.3 0 64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64l0 320H96c-17.7 0-32 14.3-32 32s14.3 32 32 32H224c17.7 0 32-14.3 32-32s-14.3-32-32-32H192l0-320h64v32c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H160 32zm470.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8h32V352H416c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l64 64c12.5 12.5 32.8 12.5 45.3 0l64-64c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H512V160h32c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-64-64z',
    ],
  };
  var faUserXmark = {
    prefix: 'fas',
    iconName: 'user-xmark',
    icon: [
      640,
      512,
      ['user-times'],
      'f235',
      'M352 128c0 70.7-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM471 143c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z',
    ],
  };
  var faUserTimes = faUserXmark;
  var faStethoscope = {
    prefix: 'fas',
    iconName: 'stethoscope',
    icon: [
      576,
      512,
      [129658],
      'f0f1',
      'M142.4 21.9c5.6 16.8-3.5 34.9-20.2 40.5L96 71.1V192c0 53 43 96 96 96s96-43 96-96V71.1l-26.1-8.7c-16.8-5.6-25.8-23.7-20.2-40.5s23.7-25.8 40.5-20.2l26.1 8.7C334.4 19.1 352 43.5 352 71.1V192c0 77.2-54.6 141.6-127.3 156.7C231 404.6 278.4 448 336 448c61.9 0 112-50.1 112-112V265.3c-28.3-12.3-48-40.5-48-73.3c0-44.2 35.8-80 80-80s80 35.8 80 80c0 32.8-19.7 61-48 73.3V336c0 97.2-78.8 176-176 176c-92.9 0-168.9-71.9-175.5-163.1C87.2 334.2 32 269.6 32 192V71.1c0-27.5 17.6-52 43.8-60.7l26.1-8.7c16.8-5.6 34.9 3.5 40.5 20.2zM480 224c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faMessage = {
    prefix: 'fas',
    iconName: 'message',
    icon: [
      512,
      512,
      ['comment-alt'],
      'f27a',
      'M64 0C28.7 0 0 28.7 0 64V352c0 35.3 28.7 64 64 64h96v80c0 6.1 3.4 11.6 8.8 14.3s11.9 2.1 16.8-1.5L309.3 416H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64z',
    ],
  };
  var faCommentAlt = faMessage;
  var faInfo = {
    prefix: 'fas',
    iconName: 'info',
    icon: [
      192,
      512,
      [],
      'f129',
      'M144 80c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM0 224c0-17.7 14.3-32 32-32H96c17.7 0 32 14.3 32 32V448h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H64V256H32c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faDownLeftAndUpRightToCenter = {
    prefix: 'fas',
    iconName: 'down-left-and-up-right-to-center',
    icon: [
      512,
      512,
      ['compress-alt'],
      'f422',
      'M473 7c-9.4-9.4-24.6-9.4-33.9 0l-87 87L313 55c-6.9-6.9-17.2-8.9-26.2-5.2S272 62.3 272 72V216c0 13.3 10.7 24 24 24H440c9.7 0 18.5-5.8 22.2-14.8s1.7-19.3-5.2-26.2l-39-39 87-87c9.4-9.4 9.4-24.6 0-33.9L473 7zM216 272H72c-9.7 0-18.5 5.8-22.2 14.8s-1.7 19.3 5.2 26.2l39 39L7 439c-9.4 9.4-9.4 24.6 0 33.9l32 32c9.4 9.4 24.6 9.4 33.9 0l87-87 39 39c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V296c0-13.3-10.7-24-24-24z',
    ],
  };
  var faCompressAlt = faDownLeftAndUpRightToCenter;
  var faExplosion = {
    prefix: 'fas',
    iconName: 'explosion',
    icon: [
      576,
      512,
      [],
      'e4e9',
      'M499.6 11.3c6.7-10.7 20.5-14.5 31.7-8.5s15.8 19.5 10.6 31L404.8 338.6c2.2 2.3 4.3 4.7 6.3 7.1l97.2-54.7c10.5-5.9 23.6-3.1 30.9 6.4s6.3 23-2.2 31.5l-87 87H378.5c-13.2-37.3-48.7-64-90.5-64s-77.4 26.7-90.5 64H117.8L42.3 363.7c-9.7-6.7-13.1-19.6-7.9-30.3s17.4-15.9 28.7-12.4l97.2 30.4c3-3.9 6.1-7.7 9.4-11.3L107.4 236.3c-6.1-10.1-3.9-23.1 5.1-30.7s22.2-7.5 31.1 .1L246 293.6c1.5-.4 3-.8 4.5-1.1l13.6-142.7c1.2-12.3 11.5-21.7 23.9-21.7s22.7 9.4 23.9 21.7l13.5 141.9L499.6 11.3zM64 448v0H512v0h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H64zM288 0c13.3 0 24 10.7 24 24V72c0 13.3-10.7 24-24 24s-24-10.7-24-24V24c0-13.3 10.7-24 24-24z',
    ],
  };
  var faFileLines = {
    prefix: 'fas',
    iconName: 'file-lines',
    icon: [
      384,
      512,
      [128441, 128462, 61686, 'file-alt', 'file-text'],
      'f15c',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM112 256H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faFileAlt = faFileLines;
  var faFileText = faFileLines;
  var faWaveSquare = {
    prefix: 'fas',
    iconName: 'wave-square',
    icon: [
      640,
      512,
      [],
      'f83e',
      'M128 64c0-17.7 14.3-32 32-32H320c17.7 0 32 14.3 32 32V416h96V256c0-17.7 14.3-32 32-32H608c17.7 0 32 14.3 32 32s-14.3 32-32 32H512V448c0 17.7-14.3 32-32 32H320c-17.7 0-32-14.3-32-32V96H192V256c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h96V64z',
    ],
  };
  var faRing = {
    prefix: 'fas',
    iconName: 'ring',
    icon: [
      512,
      512,
      [],
      'f70b',
      'M64 208c0 7.8 4.4 18.7 17.1 30.3C126.5 214.1 188.9 200 256 200s129.5 14.1 174.9 38.3C443.6 226.7 448 215.8 448 208c0-12.3-10.8-32-47.9-50.6C364.9 139.8 314 128 256 128s-108.9 11.8-144.1 29.4C74.8 176 64 195.7 64 208zm192 40c-47 0-89.3 7.6-122.9 19.7C166.3 280.2 208.8 288 256 288s89.7-7.8 122.9-20.3C345.3 255.6 303 248 256 248zM0 208c0-49.6 39.4-85.8 83.3-107.8C129.1 77.3 190.3 64 256 64s126.9 13.3 172.7 36.2c43.9 22 83.3 58.2 83.3 107.8v96c0 49.6-39.4 85.8-83.3 107.8C382.9 434.7 321.7 448 256 448s-126.9-13.3-172.7-36.2C39.4 389.8 0 353.6 0 304V208z',
    ],
  };
  var faBuildingUn = {
    prefix: 'fas',
    iconName: 'building-un',
    icon: [
      384,
      512,
      [],
      'e4d9',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM237.3 71.1l34.7 52V80c0-8.8 7.2-16 16-16s16 7.2 16 16v96c0 7.1-4.6 13.3-11.4 15.3s-14-.6-17.9-6.4l-34.7-52V176c0 8.8-7.2 16-16 16s-16-7.2-16-16V80c0-7.1 4.6-13.3 11.4-15.3s14 .6 17.9 6.4zM112 80v64c0 8.8 7.2 16 16 16s16-7.2 16-16V80c0-8.8 7.2-16 16-16s16 7.2 16 16v64c0 26.5-21.5 48-48 48s-48-21.5-48-48V80c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faDiceThree = {
    prefix: 'fas',
    iconName: 'dice-three',
    icon: [
      448,
      512,
      [9858],
      'f527',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm64 160c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm128 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm64 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faCalendarDays = {
    prefix: 'fas',
    iconName: 'calendar-days',
    icon: [
      448,
      512,
      ['calendar-alt'],
      'f073',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm64 80v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zm128 0v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H336zM64 400v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H208zm112 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V400c0-8.8-7.2-16-16-16H336c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faCalendarAlt = faCalendarDays;
  var faAnchorCircleCheck = {
    prefix: 'fas',
    iconName: 'anchor-circle-check',
    icon: [
      640,
      512,
      [],
      'e4aa',
      'M256 96c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm85.1 80C367 158.8 384 129.4 384 96c0-53-43-96-96-96s-96 43-96 96c0 33.4 17 62.8 42.9 80H224c-17.7 0-32 14.3-32 32s14.3 32 32 32h32V448H208c-53 0-96-43-96-96v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97 263c-9.4-9.4-24.6-9.4-33.9 0L7 319c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 88.4 71.6 160 160 160h80 80c8.2 0 16.3-.6 24.2-1.8c-22.2-16.2-40.4-37.5-53-62.2H320V368 240h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H341.1zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faBuildingCircleArrowRight = {
    prefix: 'fas',
    iconName: 'building-circle-arrow-right',
    icon: [
      640,
      512,
      [],
      'e4d1',
      'M0 48C0 21.5 21.5 0 48 0H336c26.5 0 48 21.5 48 48V232.2c-39.1 32.3-64 81.1-64 135.8c0 49.5 20.4 94.2 53.3 126.2C364.5 505.1 351.1 512 336 512H240V432c0-26.5-21.5-48-48-48s-48 21.5-48 48v80H48c-26.5 0-48-21.5-48-48V48zM80 224c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H80zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm112-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H272zM64 112v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zM176 96c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H176zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16zM640 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zM492.7 300.7c-6.2 6.2-6.2 16.4 0 22.6L521.4 352H432c-8.8 0-16 7.2-16 16s7.2 16 16 16h89.4l-28.7 28.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l56-56c6.2-6.2 6.2-16.4 0-22.6l-56-56c-6.2-6.2-16.4-6.2-22.6 0z',
    ],
  };
  var faVolleyball = {
    prefix: 'fas',
    iconName: 'volleyball',
    icon: [
      512,
      512,
      [127952, 'volleyball-ball'],
      'f45f',
      'M511.8 267.4c-26.1 8.7-53.4 13.8-81 15.1c9.2-105.3-31.5-204.2-103.2-272.4C434.1 41.1 512 139.5 512 256c0 3.8-.1 7.6-.2 11.4zm-3.9 34.7c-5.8 32-17.6 62-34.2 88.7c-97.5 48.5-217.7 42.6-311.9-24.5c23.7-36.2 55.4-67.7 94.5-91.8c79.9 43.2 170.1 50.8 251.6 27.6zm-236-55.5c-2.5-90.9-41.1-172.7-101.9-231.7C196.8 5.2 225.8 0 256 0c2.7 0 5.3 0 7.9 .1c90.8 60.2 145.7 167.2 134.7 282.3c-43.1-2.4-86.4-14.1-126.8-35.9zM138 28.8c20.6 18.3 38.7 39.4 53.7 62.6C95.9 136.1 30.6 220.8 7.3 316.9C2.5 297.4 0 277 0 256C0 157.2 56 71.5 138 28.8zm69.6 90.5c19.5 38.6 31 81.9 32.3 127.7C162.5 294.6 110.9 368.9 90.2 451C66 430.4 45.6 405.4 30.4 377.2c6.7-108.7 71.9-209.9 177.1-257.9zM256 512c-50.7 0-98-14.7-137.8-40.2c5.6-27 14.8-53.1 27.4-77.7C232.2 454.6 338.1 468.8 433 441c-46 44-108.3 71-177 71z',
    ],
  };
  var faVolleyballBall = faVolleyball;
  var faArrowsUpToLine = {
    prefix: 'fas',
    iconName: 'arrows-up-to-line',
    icon: [
      640,
      512,
      [],
      'e4c2',
      'M64 96l512 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L64 32C46.3 32 32 46.3 32 64s14.3 32 32 32zM41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L128 237.3 128 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 41.4 41.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-96-96c-12.5-12.5-32.8-12.5-45.3 0l-96 96zm320 45.3c12.5 12.5 32.8 12.5 45.3 0L448 237.3 448 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-210.7 41.4 41.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-96-96c-12.5-12.5-32.8-12.5-45.3 0l-96 96c-12.5 12.5-12.5 32.8 0 45.3z',
    ],
  };
  var faSortDown = {
    prefix: 'fas',
    iconName: 'sort-down',
    icon: [
      320,
      512,
      ['sort-desc'],
      'f0dd',
      'M182.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128z',
    ],
  };
  var faSortDesc = faSortDown;
  var faCircleMinus = {
    prefix: 'fas',
    iconName: 'circle-minus',
    icon: [
      512,
      512,
      ['minus-circle'],
      'f056',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM184 232H328c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faMinusCircle = faCircleMinus;
  var faDoorOpen = {
    prefix: 'fas',
    iconName: 'door-open',
    icon: [
      576,
      512,
      [],
      'f52b',
      'M320 32c0-9.9-4.5-19.2-12.3-25.2S289.8-1.4 280.2 1l-179.9 45C79 51.3 64 70.5 64 92.5V448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H96 288h32V480 32zM256 256c0 17.7-10.7 32-24 32s-24-14.3-24-32s10.7-32 24-32s24 14.3 24 32zm96-128h96V480v32h32 64c17.7 0 32-14.3 32-32s-14.3-32-32-32H512V128c0-35.3-28.7-64-64-64H352v64z',
    ],
  };
  var faRightFromBracket = {
    prefix: 'fas',
    iconName: 'right-from-bracket',
    icon: [
      512,
      512,
      ['sign-out-alt'],
      'f2f5',
      'M160 96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96C43 32 0 75 0 128V384c0 53 43 96 96 96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H96c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32h64zM504.5 273.4c4.8-4.5 7.5-10.8 7.5-17.4s-2.7-12.9-7.5-17.4l-144-136c-7-6.6-17.2-8.4-26-4.6s-14.5 12.5-14.5 22v72H192c-17.7 0-32 14.3-32 32l0 64c0 17.7 14.3 32 32 32H320v72c0 9.6 5.7 18.2 14.5 22s19 2 26-4.6l144-136z',
    ],
  };
  var faSignOutAlt = faRightFromBracket;
  var faAtom = {
    prefix: 'fas',
    iconName: 'atom',
    icon: [
      448,
      512,
      [9883],
      'f5d2',
      'M258.9 412.3c-16.7 33.8-31 35.7-34.9 35.7s-18.1-1.9-34.9-35.7c11.4-3.9 23.1-8.4 34.9-13.5c11.8 5.1 23.4 9.7 34.9 13.5zM252.8 312c-9.7 5.8-19.3 11.2-28.8 16c-9.4-4.8-19-10.2-28.8-16c-12.1-7.3-23.6-14.8-34.2-22.4c-.7-10.8-1-22-1-33.6s.4-22.7 1-33.6c10.6-7.6 22.1-15.1 34.2-22.4c9.7-5.8 19.3-11.2 28.8-16c9.4 4.8 19 10.2 28.8 16c12.1 7.3 23.6 14.8 34.2 22.4c.7 10.8 1 22 1 33.6s-.4 22.7-1 33.6c-10.6 7.6-22.1 15.1-34.2 22.4zm184.8 72c20.7-37.1 9.4-82.8-23.6-128c33-45.2 44.3-90.9 23.6-128c-20.2-36.3-62.5-49.3-115.2-43.2C300.4 32.7 266.8 0 224 0s-76.4 32.7-98.4 84.8c-52.7-6.1-95 6.8-115.2 43.2C-10.3 165.1 1 210.8 34 256C1 301.2-10.3 346.9 10.4 384c20.2 36.3 62.5 49.3 115.2 43.2c22 52.1 55.7 84.8 98.4 84.8s76.4-32.7 98.4-84.8c52.7 6.1 95-6.8 115.2-43.2zm-67.8-79.2c18.9 30.2 14.2 44 11.9 48.1c-1.6 2.9-8.4 13-40.2 11.7c2.8-13.1 5-26.9 6.7-41.2c7.6-6.1 14.8-12.3 21.6-18.6zm11.9-145.7c2.3 4.2 7 17.9-11.9 48.1c-6.8-6.3-14-12.5-21.6-18.6c-1.7-14.3-3.9-28-6.7-41.2c31.8-1.4 38.6 8.7 40.2 11.7zM224 64c3.9 0 18.1 1.9 34.9 35.7c-11.4 3.9-23.1 8.4-34.9 13.5c-11.8-5.1-23.4-9.7-34.9-13.5C205.9 65.9 220.1 64 224 64zM106.5 147.5c-2.8 13.1-5 26.9-6.7 41.2c-7.6 6.1-14.8 12.3-21.6 18.6C59.4 177 64 163.3 66.3 159.1c1.6-2.9 8.4-13 40.2-11.7zM66.3 352.9c-2.3-4.2-7-17.9 11.9-48.1c6.8 6.3 14 12.5 21.6 18.6c1.7 14.2 3.9 28 6.7 41.2c-31.8 1.4-38.6-8.7-40.2-11.7zM224 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faSoap = {
    prefix: 'fas',
    iconName: 'soap',
    icon: [
      512,
      512,
      [129532],
      'e06e',
      'M208 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM320 256c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zM416 32c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0 160c0 27.6-11.7 52.5-30.4 70.1C422.1 275.7 448 310.8 448 352c0 53-43 96-96 96H160c-53 0-96-43-96-96s43-96 96-96h88.4c-15.2-17-24.4-39.4-24.4-64H96c-53 0-96 43-96 96V416c0 53 43 96 96 96H416c53 0 96-43 96-96V288c0-53-43-96-96-96zM160 288c-35.3 0-64 28.7-64 64s28.7 64 64 64H352c35.3 0 64-28.7 64-64s-28.7-64-64-64H320 160z',
    ],
  };
  var faIcons = {
    prefix: 'fas',
    iconName: 'icons',
    icon: [
      576,
      512,
      ['heart-music-camera-bolt'],
      'f86d',
      'M532.3 7.3C539.7 13.3 544 22.4 544 32V176c0 26.5-28.7 48-64 48s-64-21.5-64-48s28.7-48 64-48V71L384 90.2V208c0 26.5-28.7 48-64 48s-64-21.5-64-48s28.7-48 64-48V64c0-15.3 10.8-28.4 25.7-31.4l160-32c9.4-1.9 19.1 .6 26.6 6.6zM106.7 304l11.8-17.8c5.9-8.9 15.9-14.2 26.6-14.2h61.7c10.7 0 20.7 5.3 26.6 14.2L245.3 304H272c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V352c0-26.5 21.5-48 48-48h26.7zM224 408c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM510.7 278.3L472.3 368H528c6.7 0 12.6 4.1 15 10.4s.6 13.3-4.4 17.7l-128 112c-5.6 4.9-13.9 5.3-19.9 .9s-8.2-12.4-5.3-19.2L423.7 400H368c-6.7 0-12.6-4.1-15-10.4s-.6-13.3 4.4-17.7l128-112c5.6-4.9 13.9-5.3 19.9-.9s8.2 12.4 5.3 19.2zm-339-59.2c-6.5 6.5-17 6.5-23 0L51.9 119.2c-28-29-26.5-76.9 5-103.9c27-23.5 68.4-19 93.4 6.5l10 10.5 9.5-10.5c25-25.5 65.9-30 93.9-6.5c31 27 32.5 74.9 4.5 103.9l-96.4 99.9z',
    ],
  };
  var faHeartMusicCameraBolt = faIcons;
  var faMicrophoneLinesSlash = {
    prefix: 'fas',
    iconName: 'microphone-lines-slash',
    icon: [
      640,
      512,
      ['microphone-alt-slash'],
      'f539',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L472.1 344.7c15.2-26 23.9-56.3 23.9-88.7V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v24 16c0 21.2-5.1 41.1-14.2 58.7L416 300.8V256H358.9l-34.5-27c2.9-3.1 7-5 11.6-5h80V192H336c-8.8 0-16-7.2-16-16s7.2-16 16-16h80V128H336c-8.8 0-16-7.2-16-16s7.2-16 16-16h80c0-53-43-96-96-96s-96 43-96 96v54.3L38.8 5.1zm362.5 407l-43.1-33.9C346.1 382 333.3 384 320 384c-70.7 0-128-57.3-128-128v-8.7L144.7 210c-.5 1.9-.7 3.9-.7 6v40c0 89.1 66.2 162.7 152 174.4V464H248c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H344V430.4c20.4-2.8 39.7-9.1 57.3-18.2z',
    ],
  };
  var faMicrophoneAltSlash = faMicrophoneLinesSlash;
  var faBridgeCircleCheck = {
    prefix: 'fas',
    iconName: 'bridge-circle-check',
    icon: [
      640,
      512,
      [],
      'e4c9',
      'M64 32C46.3 32 32 46.3 32 64s14.3 32 32 32h40v64H32V288c53 0 96 43 96 96v64c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V384c0-53 43-96 96-96c6.3 0 12.4 .6 18.3 1.7C367.1 231.8 426.9 192 496 192c42.5 0 81.6 15.1 112 40.2V160H536V96h40c17.7 0 32-14.3 32-32s-14.3-32-32-32H64zM488 96v64H408V96h80zM360 96v64H280V96h80zM232 96v64H152V96h80zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faPumpMedical = {
    prefix: 'fas',
    iconName: 'pump-medical',
    icon: [
      448,
      512,
      [],
      'e06a',
      'M128 32v96H256V96h60.1c4.2 0 8.3 1.7 11.3 4.7l33.9 33.9c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L372.7 55.4c-15-15-35.4-23.4-56.6-23.4H256c0-17.7-14.3-32-32-32H160c-17.7 0-32 14.3-32 32zM117.4 160c-33.3 0-61 25.5-63.8 58.7L35 442.7C31.9 480 61.3 512 98.8 512H285.2c37.4 0 66.9-32 63.8-69.3l-18.7-224c-2.8-33.2-30.5-58.7-63.8-58.7H117.4zM216 280v32h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V360H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V280c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faFingerprint = {
    prefix: 'fas',
    iconName: 'fingerprint',
    icon: [
      512,
      512,
      [],
      'f577',
      'M48 256C48 141.1 141.1 48 256 48c69.3 0 130.6 33.8 168.5 86c7.8 10.7 22.8 13.1 33.5 5.3s13.1-22.8 5.3-33.5C416.8 41.7 341.3 0 256 0C114.6 0 0 114.6 0 256v8c0 13.3 10.7 24 24 24s24-10.7 24-24v-8zm458.5-52.9c-2.7-13-15.5-21.3-28.4-18.5s-21.3 15.5-18.5 28.4c2.9 13.9 4.5 28.3 4.5 43.1v8c0 13.3 10.7 24 24 24s24-10.7 24-24v-8c0-18.1-1.9-35.8-5.5-52.9zM222.1 128.2c10.8-2.9 22.1-4.4 33.9-4.4c73 0 132.2 59.2 132.2 132.2c0 31.1-1.9 62.4-3.9 86c-1 11.8-2 21.6-2.7 28.4c-.4 3.4-.7 6.1-.9 7.9l-.2 2-.1 .5 0 .1 0 0 0 0c-1.6 13.2 7.7 25.1 20.8 26.8s25.1-7.7 26.8-20.8l-23.8-3c23.8 3 23.8 3 23.8 3l0 0 0 0 0 0 0-.2 .1-.6 .3-2.2c.2-1.9 .5-4.8 .9-8.3c.8-7.2 1.8-17.4 2.8-29.6c2-24.4 4.1-57.1 4.1-90c0-99.5-80.7-180.2-180.2-180.2c-15.9 0-31.4 2.1-46.2 6c-12.8 3.4-20.5 16.5-17.1 29.3s16.5 20.5 29.3 17.1zm-74.5 52.1c7.6-10.9 5-25.8-5.9-33.4s-25.8-5-33.4 5.9C87.9 182 75.8 217.6 75.8 256c0 30.1-3.8 58.6-7.6 79.7c-1.9 10.5-3.8 19.1-5.2 24.9c-.7 2.9-1.3 5.2-1.7 6.7c-.2 .7-.3 1.3-.4 1.6l-.1 .4 0 .1 0 0c-3.6 12.7 3.7 26 16.5 29.7s26-3.7 29.7-16.5L83.8 376c23.1 6.6 23.1 6.6 23.1 6.6l0 0 0 0 0-.1 0-.2 .2-.6c.1-.5 .3-1.2 .6-2.1c.5-1.8 1.2-4.4 1.9-7.7c1.6-6.6 3.7-16.1 5.8-27.6c4.2-22.9 8.4-54.4 8.4-88.3c0-28.2 8.8-54.3 23.8-75.7zM256 200c30.9 0 56 25.1 56 56c0 47.1-2.7 86.3-5.5 113.6c-1.4 13.7-2.7 24.3-3.7 31.6c-.5 3.6-.9 6.3-1.2 8.1c-.1 .9-.2 1.6-.3 2l-.1 .5 0 .1 0 0 0 0 0 0c-2.3 13.1 6.5 25.5 19.5 27.8s25.5-6.4 27.8-19.5L324.8 416c23.6 4.1 23.6 4.1 23.6 4.1l0 0 0 0 0-.1 0-.2 .1-.7c.1-.6 .2-1.4 .4-2.4c.3-2.1 .8-5.1 1.3-9c1.1-7.8 2.5-19.1 4-33.4c2.9-28.7 5.7-69.5 5.7-118.4c0-57.4-46.6-104-104-104s-104 46.6-104 104c0 46.7-3.9 83.4-7.7 108.4c-1.9 12.5-3.8 21.9-5.2 28.2c-.7 3.1-1.3 5.5-1.6 6.9c-.2 .7-.3 1.3-.4 1.6l-.1 .3c-3.6 12.7 3.7 26 16.5 29.7s26-3.7 29.7-16.5L160 408c23.1 6.6 23.1 6.6 23.1 6.6l0 0 0 0 0-.1 .1-.2 .2-.7c.1-.5 .3-1.3 .6-2.3c.5-2 1.2-4.8 2-8.4c1.6-7.2 3.7-17.8 5.8-31.3c3-19.2 5.9-44.6 7.3-75.3c.6-12.6 .9-26 .9-40.3c0-30.9 25.1-56 56-56zm24 56c0-13.3-10.7-24-24-24s-24 10.7-24 24c0 45.4-2.6 83.4-6.3 114.5L202 478.3l0 0c-5.3 12.1 .1 26.2 12.2 31.6c12.1 5.4 26.3-.1 31.7-12.2L224 488c21.9 9.7 21.9 9.7 21.9 9.7l0 0 0 0 0-.1 .1-.3 .4-.9c.3-.8 .7-1.8 1.2-3.1c1-2.7 2.4-6.5 4-11.5c3.3-10.1 7.5-24.9 11.7-44.7C271.8 397.3 280 337.6 280 256zM225.7 370.5s0 0 0 0L256 232 225.7 370.5zm0 0c-2.7 22.5-5.9 41.3-9.2 56.6c-3.8 18.2-7.6 31.3-10.3 39.8c-1.4 4.2-2.5 7.3-3.2 9.2c-.4 .9-.6 1.6-.8 2l-.1 .4 23.6-107.9z',
    ],
  };
  var faHandPointRight = {
    prefix: 'fas',
    iconName: 'hand-point-right',
    icon: [
      512,
      512,
      [],
      'f0a4',
      'M480 96c17.7 0 32 14.3 32 32s-14.3 32-32 32l-208 0 0-64 208 0zM320 288c17.7 0 32 14.3 32 32s-14.3 32-32 32H256c-17.7 0-32-14.3-32-32s14.3-32 32-32h64zm64-64c0 17.7-14.3 32-32 32H304c-17.7 0-32-14.3-32-32s14.3-32 32-32h48c17.7 0 32 14.3 32 32zM288 384c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32h64zm-88-96l.6 0c-5.4 9.4-8.6 20.3-8.6 32c0 13.2 4 25.4 10.8 35.6C177.9 364.3 160 388.1 160 416c0 11.7 3.1 22.6 8.6 32H160C71.6 448 0 376.4 0 288l0-61.7c0-42.4 16.9-83.1 46.9-113.1l11.6-11.6C82.5 77.5 115.1 64 149 64l27 0c35.3 0 64 28.7 64 64v88c0 22.1-17.9 40-40 40s-40-17.9-40-40V160c0-8.8-7.2-16-16-16s-16 7.2-16 16v56c0 39.8 32.2 72 72 72z',
    ],
  };
  var faMagnifyingGlassLocation = {
    prefix: 'fas',
    iconName: 'magnifying-glass-location',
    icon: [
      512,
      512,
      ['search-location'],
      'f689',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM288 176c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 48.8 46.5 111.6 68.6 138.6c6 7.3 16.8 7.3 22.7 0c22.1-27 68.6-89.8 68.6-138.6zm-48 0c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faSearchLocation = faMagnifyingGlassLocation;
  var faForwardStep = {
    prefix: 'fas',
    iconName: 'forward-step',
    icon: [
      320,
      512,
      ['step-forward'],
      'f051',
      'M52.5 440.6c-9.5 7.9-22.8 9.7-34.1 4.4S0 428.4 0 416V96C0 83.6 7.2 72.3 18.4 67s24.5-3.6 34.1 4.4l192 160L256 241V96c0-17.7 14.3-32 32-32s32 14.3 32 32V416c0 17.7-14.3 32-32 32s-32-14.3-32-32V271l-11.5 9.6-192 160z',
    ],
  };
  var faStepForward = faForwardStep;
  var faFaceSmileBeam = {
    prefix: 'fas',
    iconName: 'face-smile-beam',
    icon: [
      512,
      512,
      [128522, 'smile-beam'],
      'f5b8',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM164.1 325.5C182 346.2 212.6 368 256 368s74-21.8 91.9-42.5c5.8-6.7 15.9-7.4 22.6-1.6s7.4 15.9 1.6 22.6C349.8 372.1 311.1 400 256 400s-93.8-27.9-116.1-53.5c-5.8-6.7-5.1-16.8 1.6-22.6s16.8-5.1 22.6 1.6zm53.5-96.7l0 0 0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0zm160 0l0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0 0 0z',
    ],
  };
  var faSmileBeam = faFaceSmileBeam;
  var faFlagCheckered = {
    prefix: 'fas',
    iconName: 'flag-checkered',
    icon: [
      512,
      512,
      [127937],
      'f11e',
      'M32 0C46.3 0 58.4 9.4 62.5 22.3l.1 0-.1 .1 .1 .3 0-.4C89.8 11.5 128.1 0 168 0c38.8 0 74.6 9.1 105.7 17C306 25.2 332.9 32 360 32c26.8 0 52.9-6.8 73-14.1c9.9-3.6 17.9-7.2 23.4-9.8c2.7-1.3 4.8-2.4 6.2-3.1c.7-.4 1.1-.6 1.4-.8l.2-.1c9.9-5.6 22.1-5.6 31.9 .2S512 20.6 512 32V320c0 12.1-6.8 23.2-17.7 28.6L480 320c14.3 28.6 14.3 28.6 14.3 28.6l0 0 0 0-.1 0-.2 .1-.7 .4c-.6 .3-1.5 .7-2.5 1.2c-2.2 1-5.2 2.4-9 4c-7.7 3.3-18.5 7.6-31.5 11.9C424.5 374.9 388.8 384 352 384c-37 0-65.2-9.4-89-17.3l-1-.3c-24-8-43.7-14.4-70-14.4c-27.9 0-64.7 7.2-96.2 15c-12.1 3-23 6-31.8 8.6V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352 72 32C0 14.3 14.3 0 32 0zM64 158.4c17.5-4.9 40.4-10.7 64-15.2V68.8c-15 3.3-29.3 8.1-42 13c-8.5 3.4-16 6.7-22 9.6v67zm0 80v70.8c5.1-1.4 10.6-2.8 16.2-4.2c14.3-3.6 30.8-7.3 47.8-10.4V223.1c21.9-4.2 44.4-7.1 64-7.1c5.6 0 10.9 .2 16 .7v71.9c29.5 2.2 53 10 73.3 16.8l.9 .3c2 .7 3.9 1.3 5.8 1.9v-69-1.4c19 5.9 39.1 10.8 64 10.8c5.3 0 10.7-.2 16-.6v71.9c22-2 43.9-7.6 61.9-13.6c6.8-2.3 12.9-4.6 18.1-6.6V229.2c-20.9 7.5-49.9 15.8-80 18.1v-80c30.1-2.3 59.1-10.6 80-18.1V80.5c-21.6 7.3-49.5 14.3-80 15.4v71.5c-5.3 .4-10.7 .6-16 .6c-24.9 0-45-4.9-64-10.8V86.5c-9.3-2.1-18.3-4.4-27-6.7l-3.1-.8c-17.4-4.4-33.8-8.5-49.9-11.3v69c-5.1-.4-10.4-.7-16-.7c-19.6 0-42.1 3-64 7.1v80c-23.6 4.5-46.5 10.3-64 15.2zM208 136.7v80c24.4 2.1 44.3 8.7 64.2 15.3l0 0c5.2 1.7 10.5 3.5 15.8 5.2v-80c-5.3-1.7-10.6-3.4-15.8-5.2l0 0c-19.9-6.6-39.8-13.2-64.2-15.3z',
    ],
  };
  var faFootball = {
    prefix: 'fas',
    iconName: 'football',
    icon: [
      512,
      512,
      [127944, 'football-ball'],
      'f44e',
      'M247.5 25.4c-13.5 3.3-26.4 7.2-38.6 11.7C142.9 61.6 96.7 103.6 66 153.6c-18.3 29.8-30.9 62.3-39.2 95.4L264.5 486.6c13.5-3.3 26.4-7.2 38.6-11.7c66-24.5 112.2-66.5 142.9-116.5c18.3-29.8 30.9-62.3 39.1-95.3L247.5 25.4zM495.2 205.3c6.1-56.8 1.4-112.2-7.7-156.4c-2.7-12.9-13-22.9-26.1-25.1c-58.2-9.7-109.9-12-155.6-7.9L495.2 205.3zM206.1 496L16.8 306.7c-6.1 56.8-1.4 112.2 7.7 156.4c2.7 12.9 13 22.9 26.1 25.1c58.2 9.7 109.9 12 155.6 7.9zm54.6-331.3c6.2-6.2 16.4-6.2 22.6 0l64 64c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-64-64c-6.2-6.2-6.2-16.4 0-22.6zm-48 48c6.2-6.2 16.4-6.2 22.6 0l64 64c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-64-64c-6.2-6.2-6.2-16.4 0-22.6zm-48 48c6.2-6.2 16.4-6.2 22.6 0l64 64c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-64-64c-6.2-6.2-6.2-16.4 0-22.6z',
    ],
  };
  var faFootballBall = faFootball;
  var faSchoolCircleExclamation = {
    prefix: 'fas',
    iconName: 'school-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e56c',
      'M337.8 5.4C327-1.8 313-1.8 302.2 5.4l-139 92.7L37.6 126C15.6 130.9 0 150.3 0 172.8V464c0 26.5 21.5 48 48 48H320v0H256V416c0-35.3 28.7-64 64-64l.3 0h.5c3.4-37.7 18.7-72.1 42.2-99.1C350.2 260 335.6 264 320 264c-48.6 0-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88c0 18.3-5.6 35.3-15.1 49.4c29-21 64.6-33.4 103.1-33.4c59.5 0 112.1 29.6 144 74.8V172.8c0-22.5-15.6-42-37.6-46.9L476.8 98.1 337.8 5.4zM96 192h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V208c0-8.8 7.2-16 16-16zm0 128h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16zM320 128c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H336V144c0-8.8-7.2-16-16-16zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faCrop = {
    prefix: 'fas',
    iconName: 'crop',
    icon: [
      512,
      512,
      [],
      'f125',
      'M448 109.3l54.6-54.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L402.7 64 160 64v64l178.7 0L128 338.7V32c0-17.7-14.3-32-32-32S64 14.3 64 32V64H32C14.3 64 0 78.3 0 96s14.3 32 32 32H64V384c0 35.3 28.7 64 64 64H352V384H173.3L384 173.3 384 480c0 17.7 14.3 32 32 32s32-14.3 32-32V448h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H448l0-274.7z',
    ],
  };
  var faAnglesDown = {
    prefix: 'fas',
    iconName: 'angles-down',
    icon: [
      448,
      512,
      ['angle-double-down'],
      'f103',
      'M246.6 470.6c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 402.7 361.4 265.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-160 160zm160-352l-160 160c-12.5 12.5-32.8 12.5-45.3 0l-160-160c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L224 210.7 361.4 73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3z',
    ],
  };
  var faAngleDoubleDown = faAnglesDown;
  var faUsersRectangle = {
    prefix: 'fas',
    iconName: 'users-rectangle',
    icon: [
      640,
      512,
      [],
      'e594',
      'M96 0C43 0 0 43 0 96V416c0 53 43 96 96 96H544c53 0 96-43 96-96V96c0-53-43-96-96-96H96zM64 96c0-17.7 14.3-32 32-32H544c17.7 0 32 14.3 32 32V416c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V96zm159.8 80c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM96 309.3c0 14.7 11.9 26.7 26.7 26.7h56.1c8-34.1 32.8-61.7 65.2-73.6c-7.5-4.1-16.2-6.4-25.3-6.4H149.3C119.9 256 96 279.9 96 309.3zM461.2 336h56.1c14.7 0 26.7-11.9 26.7-26.7c0-29.5-23.9-53.3-53.3-53.3H421.3c-9.2 0-17.8 2.3-25.3 6.4c32.4 11.9 57.2 39.5 65.2 73.6zM372 289c-3.9-.7-7.9-1-12-1H280c-4.1 0-8.1 .3-12 1c-26 4.4-47.3 22.7-55.9 47c-2.7 7.5-4.1 15.6-4.1 24c0 13.3 10.7 24 24 24H408c13.3 0 24-10.7 24-24c0-8.4-1.4-16.5-4.1-24c-8.6-24.3-29.9-42.6-55.9-47zM512 176c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM320 256c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64z',
    ],
  };
  var faPeopleRoof = {
    prefix: 'fas',
    iconName: 'people-roof',
    icon: [
      640,
      512,
      [],
      'e537',
      'M335.5 4l288 160c15.4 8.6 21 28.1 12.4 43.5s-28.1 21-43.5 12.4L320 68.6 47.5 220c-15.4 8.6-34.9 3-43.5-12.4s-3-34.9 12.4-43.5L304.5 4c9.7-5.4 21.4-5.4 31.1 0zM320 240c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40zM144 336c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40zm392-40c0 22.1-17.9 40-40 40s-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40zM226.9 491.4L200 441.5V480c0 17.7-14.3 32-32 32H120c-17.7 0-32-14.3-32-32V441.5L61.1 491.4c-6.3 11.7-20.8 16-32.5 9.8s-16-20.8-9.8-32.5l37.9-70.3c15.3-28.5 45.1-46.3 77.5-46.3h19.5c16.3 0 31.9 4.5 45.4 12.6l33.6-62.3c15.3-28.5 45.1-46.3 77.5-46.3h19.5c32.4 0 62.1 17.8 77.5 46.3l33.6 62.3c13.5-8.1 29.1-12.6 45.4-12.6h19.5c32.4 0 62.1 17.8 77.5 46.3l37.9 70.3c6.3 11.7 1.9 26.2-9.8 32.5s-26.2 1.9-32.5-9.8L552 441.5V480c0 17.7-14.3 32-32 32H472c-17.7 0-32-14.3-32-32V441.5l-26.9 49.9c-6.3 11.7-20.8 16-32.5 9.8s-16-20.8-9.8-32.5l36.3-67.5c-1.7-1.7-3.2-3.6-4.3-5.8L376 345.5V400c0 17.7-14.3 32-32 32H296c-17.7 0-32-14.3-32-32V345.5l-26.9 49.9c-1.2 2.2-2.6 4.1-4.3 5.8l36.3 67.5c6.3 11.7 1.9 26.2-9.8 32.5s-26.2 1.9-32.5-9.8z',
    ],
  };
  var faPeopleLine = {
    prefix: 'fas',
    iconName: 'people-line',
    icon: [
      640,
      512,
      [],
      'e534',
      'M360 72c0-22.1-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40s40-17.9 40-40zM144 208c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM496 208c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM200 313.5l26.9 49.9c6.3 11.7 20.8 16 32.5 9.8s16-20.8 9.8-32.5l-36.3-67.5c1.7-1.7 3.2-3.6 4.3-5.8L264 217.5V272c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V217.5l26.9 49.9c1.2 2.2 2.6 4.1 4.3 5.8l-36.3 67.5c-6.3 11.7-1.9 26.2 9.8 32.5s26.2 1.9 32.5-9.8L440 313.5V352c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V313.5l26.9 49.9c6.3 11.7 20.8 16 32.5 9.8s16-20.8 9.8-32.5l-37.9-70.3c-15.3-28.5-45.1-46.3-77.5-46.3H486.2c-16.3 0-31.9 4.5-45.4 12.6l-33.6-62.3c-15.3-28.5-45.1-46.3-77.5-46.3H310.2c-32.4 0-62.1 17.8-77.5 46.3l-33.6 62.3c-13.5-8.1-29.1-12.6-45.4-12.6H134.2c-32.4 0-62.1 17.8-77.5 46.3L18.9 340.6c-6.3 11.7-1.9 26.2 9.8 32.5s26.2 1.9 32.5-9.8L88 313.5V352c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V313.5z',
    ],
  };
  var faBeerMugEmpty = {
    prefix: 'fas',
    iconName: 'beer-mug-empty',
    icon: [
      512,
      512,
      ['beer'],
      'f0fc',
      'M32 64c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32V96h51.2c42.4 0 76.8 34.4 76.8 76.8V274.9c0 30.4-17.9 57.9-45.6 70.2L384 381.7V416c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V64zM384 311.6l56.4-25.1c4.6-2.1 7.6-6.6 7.6-11.7V172.8c0-7.1-5.7-12.8-12.8-12.8H384V311.6zM160 144c0-8.8-7.2-16-16-16s-16 7.2-16 16V368c0 8.8 7.2 16 16 16s16-7.2 16-16V144zm64 0c0-8.8-7.2-16-16-16s-16 7.2-16 16V368c0 8.8 7.2 16 16 16s16-7.2 16-16V144zm64 0c0-8.8-7.2-16-16-16s-16 7.2-16 16V368c0 8.8 7.2 16 16 16s16-7.2 16-16V144z',
    ],
  };
  var faBeer = faBeerMugEmpty;
  var faDiagramPredecessor = {
    prefix: 'fas',
    iconName: 'diagram-predecessor',
    icon: [
      512,
      512,
      [],
      'e477',
      'M448 416l0-64L64 352l0 64 384 0zm0 64L64 480c-35.3 0-64-28.7-64-64l0-64c0-35.3 28.7-64 64-64l384 0c35.3 0 64 28.7 64 64l0 64c0 35.3-28.7 64-64 64zM288 160c0 35.3-28.7 64-64 64L64 224c-35.3 0-64-28.7-64-64L0 96C0 60.7 28.7 32 64 32l144 0 16 0 144 0c44.2 0 80 35.8 80 80l0 16 38.1 0c21.4 0 32.1 25.9 17 41L433 239c-9.4 9.4-24.6 9.4-33.9 0L329 169c-15.1-15.1-4.4-41 17-41l38.1 0 0-16c0-8.8-7.2-16-16-16l-80 0 0 64z',
    ],
  };
  var faArrowUpLong = {
    prefix: 'fas',
    iconName: 'arrow-up-long',
    icon: [
      384,
      512,
      ['long-arrow-up'],
      'f176',
      'M214.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 109.3V480c0 17.7 14.3 32 32 32s32-14.3 32-32V109.3l73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128z',
    ],
  };
  var faLongArrowUp = faArrowUpLong;
  var faFireFlameSimple = {
    prefix: 'fas',
    iconName: 'fire-flame-simple',
    icon: [
      384,
      512,
      ['burn'],
      'f46a',
      'M372.5 256.5l-.7-1.9C337.8 160.8 282 76.5 209.1 8.5l-3.3-3C202.1 2 197.1 0 192 0s-10.1 2-13.8 5.5l-3.3 3C102 76.5 46.2 160.8 12.2 254.6l-.7 1.9C3.9 277.3 0 299.4 0 321.6C0 426.7 86.8 512 192 512s192-85.3 192-190.4c0-22.2-3.9-44.2-11.5-65.1zm-90.8 49.5c4.1 9.3 6.2 19.4 6.2 29.5c0 53-43 96.5-96 96.5s-96-43.5-96-96.5c0-10.1 2.1-20.3 6.2-29.5l1.9-4.3c15.8-35.4 37.9-67.7 65.3-95.1l8.9-8.9c3.6-3.6 8.5-5.6 13.6-5.6s10 2 13.6 5.6l8.9 8.9c27.4 27.4 49.6 59.7 65.3 95.1l1.9 4.3z',
    ],
  };
  var faBurn = faFireFlameSimple;
  var faPerson = {
    prefix: 'fas',
    iconName: 'person',
    icon: [
      320,
      512,
      [129485, 'male'],
      'f183',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l58.3 97c9.1 15.1 4.2 34.8-10.9 43.9s-34.8 4.2-43.9-10.9L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152z',
    ],
  };
  var faMale = faPerson;
  var faLaptop = {
    prefix: 'fas',
    iconName: 'laptop',
    icon: [
      640,
      512,
      [128187],
      'f109',
      'M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z',
    ],
  };
  var faFileCsv = {
    prefix: 'fas',
    iconName: 'file-csv',
    icon: [
      384,
      512,
      [],
      'f6dd',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM80 224H96c22.1 0 40 17.9 40 40v8c0 8.8-7.2 16-16 16s-16-7.2-16-16v-8c0-4.4-3.6-8-8-8H80c-4.4 0-8 3.6-8 8v80c0 4.4 3.6 8 8 8H96c4.4 0 8-3.6 8-8v-8c0-8.8 7.2-16 16-16s16 7.2 16 16v8c0 22.1-17.9 40-40 40H80c-22.1 0-40-17.9-40-40V264c0-22.1 17.9-40 40-40zm72 46.4c0-25.6 20.8-46.4 46.4-46.4H216c8.8 0 16 7.2 16 16s-7.2 16-16 16H198.4c-7.9 0-14.4 6.4-14.4 14.4c0 5.2 2.8 9.9 7.2 12.5l25.4 14.5c14.4 8.3 23.4 23.6 23.4 40.3c0 25.6-20.8 46.4-46.4 46.4H168c-8.8 0-16-7.2-16-16s7.2-16 16-16h25.6c7.9 0 14.4-6.4 14.4-14.4c0-5.2-2.8-9.9-7.2-12.5l-25.4-14.5C160.9 302.4 152 287 152 270.4zM280 240v31.6c0 23 5.5 45.6 16 66c10.5-20.3 16-42.9 16-66V240c0-8.8 7.2-16 16-16s16 7.2 16 16v31.6c0 34.7-10.3 68.7-29.6 97.6l-5.1 7.7c-3 4.5-8 7.1-13.3 7.1s-10.3-2.7-13.3-7.1l-5.1-7.7c-19.3-28.9-29.6-62.9-29.6-97.6V240c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faMenorah = {
    prefix: 'fas',
    iconName: 'menorah',
    icon: [
      640,
      512,
      [],
      'f676',
      'M20.8 7.4C22.8 2.9 27.1 0 32 0s9.2 2.9 11.2 7.4L61.3 49.7c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32S0 81.7 0 64V62.8c0-4.5 .9-8.9 2.7-13.1L20.8 7.4zm96 0C118.8 2.9 123.1 0 128 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1L116.8 7.4zm77.8 42.4L212.8 7.4C214.8 2.9 219.1 0 224 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1zM308.8 7.4C310.8 2.9 315.1 0 320 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1L308.8 7.4zm77.8 42.4L404.8 7.4C406.8 2.9 411.1 0 416 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1zM500.8 7.4C502.8 2.9 507.1 0 512 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1L500.8 7.4zm77.8 42.4L596.8 7.4C598.8 2.9 603.1 0 608 0s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V64c0 17.7-14.3 32-32 32s-32-14.3-32-32V62.8c0-4.5 .9-8.9 2.7-13.1zM32 128c17.7 0 32 14.3 32 32V288c0 17.7 14.3 32 32 32H288V160c0-17.7 14.3-32 32-32s32 14.3 32 32V320H544c17.7 0 32-14.3 32-32V160c0-17.7 14.3-32 32-32s32 14.3 32 32V288c0 53-43 96-96 96H352v64H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 160c-17.7 0-32-14.3-32-32s14.3-32 32-32H288V384H96c-53 0-96-43-96-96V160c0-17.7 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32v96 32H96V256 160c0-17.7 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32v96 32H192V256 160c0-17.7 14.3-32 32-32zm192 0c17.7 0 32 14.3 32 32v96 32H384V256 160c0-17.7 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32v96 32H480V256 160c0-17.7 14.3-32 32-32z',
    ],
  };
  var faTruckPlane = {
    prefix: 'fas',
    iconName: 'truck-plane',
    icon: [
      640,
      512,
      [],
      'e58f',
      'M200 0c-30.6 0-56 54.7-56 86.1V192.5L7.8 274.3C2.9 277.2 0 282.4 0 288v64c0 5.1 2.4 9.8 6.4 12.8s9.3 3.9 14.1 2.5l123.4-37v81.2l-50 40c-3.8 3-6 7.6-6 12.5v32c0 5.1 2.5 10 6.6 13s9.5 3.8 14.4 2.2L200 480.9 290.4 511c-1.6-4.7-2.4-9.8-2.4-15V463.4c-18.2-10.5-30.7-29.7-31.9-51.8l-.1-.1V408 325.5 184l0-1.1 0 0V86.1C256 54.7 231.5 0 200 0zm88 176V400c0 20.9 13.4 38.7 32 45.3V488c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V448H544v40c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V445.3c18.6-6.6 32-24.4 32-45.3V176c0-26.5-21.5-48-48-48H336c-26.5 0-48 21.5-48 48zm79.8 78.7c3.3-8.7 11.2-14.7 20.5-14.7H539.7c9.2 0 17.2 6 20.5 14.7L576 304H352l15.8-49.3zM568 400c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zM384 376c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faRecordVinyl = {
    prefix: 'fas',
    iconName: 'record-vinyl',
    icon: [
      512,
      512,
      [],
      'f8d9',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 352c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96zm0 32c70.7 0 128-57.3 128-128s-57.3-128-128-128s-128 57.3-128 128s57.3 128 128 128zm0-96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faFaceGrinStars = {
    prefix: 'fas',
    iconName: 'face-grin-stars',
    icon: [
      512,
      512,
      [129321, 'grin-stars'],
      'f587',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM403 336.5c5.1-11.8-6.9-22.4-19.2-18.7C345.3 329.4 301.9 336 256 336s-89.3-6.6-127.8-18.2c-12.3-3.7-24.3 7-19.2 18.7c24.5 56.9 81.1 96.7 147 96.7s122.5-39.8 147-96.7zM160 120c-3.1 0-5.9 1.8-7.2 4.6l-16.6 34.7-38.1 5c-3.1 .4-5.6 2.5-6.6 5.5s-.1 6.2 2.1 8.3l27.9 26.5-7 37.8c-.6 3 .7 6.1 3.2 7.9s5.8 2 8.5 .6L160 232.5l33.8 18.3c2.7 1.5 6 1.3 8.5-.6s3.7-4.9 3.2-7.9l-7-37.8L226.4 178c2.2-2.1 3.1-5.3 2.1-8.3s-3.5-5.1-6.6-5.5l-38.1-5-16.6-34.7c-1.3-2.8-4.1-4.6-7.2-4.6zm192 0c-3.1 0-5.9 1.8-7.2 4.6l-16.6 34.7-38.1 5c-3.1 .4-5.6 2.5-6.6 5.5s-.1 6.2 2.1 8.3l27.9 26.5-7 37.8c-.6 3 .7 6.1 3.2 7.9s5.8 2 8.5 .6L352 232.5l33.8 18.3c2.7 1.5 6 1.3 8.5-.6s3.7-4.9 3.2-7.9l-7-37.8L418.4 178c2.2-2.1 3.1-5.3 2.1-8.3s-3.5-5.1-6.6-5.5l-38.1-5-16.6-34.7c-1.3-2.8-4.1-4.6-7.2-4.6z',
    ],
  };
  var faGrinStars = faFaceGrinStars;
  var faBong = {
    prefix: 'fas',
    iconName: 'bong',
    icon: [
      512,
      512,
      [],
      'f55c',
      'M192 208.5c0 29.1-15.6 53.9-37.2 67.8c-17.2 11.1-31.5 26.1-41.7 43.7H334.9c-10.2-17.6-24.5-32.6-41.7-43.7c-21.6-13.9-37.2-38.7-37.2-67.8V64H192V208.5zM320 64V208.5c0 5.7 3.1 10.9 7.9 14c11.2 7.2 21.5 15.5 30.9 24.8L398.1 208l-7-7c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l24 24 24 24c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-7-7-43.3 43.3C406 314.1 416 347.9 416 384c0 39.4-11.9 76.1-32.2 106.5c-9.6 14.4-26.5 21.5-43.8 21.5H108.1c-17.3 0-34.2-7.1-43.8-21.5C43.9 460.1 32 423.4 32 384c0-67.8 35.1-127.3 88.1-161.5c4.8-3.1 7.9-8.3 7.9-14V64c-17.7 0-32-14.3-32-32s14.3-32 32-32h16H304h16c17.7 0 32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faSpaghettiMonsterFlying = {
    prefix: 'fas',
    iconName: 'spaghetti-monster-flying',
    icon: [
      640,
      512,
      ['pastafarianism'],
      'f67b',
      'M208 64c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 16.2-6 31.1-16 42.3l15.6 31.2c18.7-6 39.9-9.5 64.4-9.5s45.8 3.5 64.4 9.5L400 106.3C390 95.1 384 80.2 384 64c0-35.3 28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64c-1.7 0-3.4-.1-5.1-.2L427.8 158c21.1 13.6 37.7 30.2 51.4 46.4c7.1 8.3 13.5 16.6 19.3 24l1.4 1.8c6.3 8.1 11.6 14.8 16.7 20.4C527.3 262.3 532.7 264 536 264c2.5 0 4.3-.6 7.1-3.3c3.7-3.5 7.1-8.8 12.5-17.4l.6-.9c4.6-7.4 11-17.6 19.4-25.7c9.7-9.3 22.9-16.7 40.4-16.7c13.3 0 24 10.7 24 24s-10.7 24-24 24c-2.5 0-4.3 .6-7.1 3.3c-3.7 3.5-7.1 8.8-12.5 17.4l-.6 .9c-4.6 7.4-11 17.6-19.4 25.7c-9.7 9.3-22.9 16.7-40.4 16.7c-18.5 0-32.9-8.5-44.3-18.6c-3.1 4-6.6 8.3-10.5 12.7c1.4 4.3 2.8 8.5 4 12.5c.9 3 1.8 5.8 2.6 8.6c3 9.8 5.5 18.2 8.6 25.9c3.9 9.8 7.4 15.4 10.8 18.5c2.6 2.4 5.9 4.3 12.8 4.3c8.7 0 16.9-4.2 33.7-13.2c15-8 35.7-18.8 62.3-18.8c13.3 0 24 10.7 24 24s-10.7 24-24 24c-13.4 0-24.7 5.2-39.7 13.2c-1 .6-2.1 1.1-3.2 1.7C559.9 414 541.4 424 520 424c-18.4 0-33.6-6.1-45.5-17.2c-11.1-10.3-17.9-23.7-22.7-36c-3.6-9-6.7-19.1-9.5-28.5c-16.4 12.3-36.1 23.6-58.9 31.3c3.6 10.8 8.4 23.5 14.4 36.2c7.5 15.9 16.2 30.4 25.8 40.5C433 460.5 441.2 464 448 464c13.3 0 24 10.7 24 24s-10.7 24-24 24c-25.2 0-45-13.5-59.5-28.8c-14.5-15.4-25.7-34.9-34.2-53c-8-17-14.1-33.8-18.3-46.9c-5.2 .4-10.6 .6-16 .6s-10.8-.2-16-.6c-4.2 13-10.3 29.9-18.3 46.9c-8.5 18.1-19.8 37.6-34.2 53C237 498.5 217.2 512 192 512c-13.3 0-24-10.7-24-24s10.7-24 24-24c6.8 0 15-3.5 24.5-13.7c9.5-10.1 18.3-24.6 25.8-40.5c5.9-12.6 10.7-25.4 14.4-36.2c-22.8-7.7-42.5-19-58.9-31.3c-2.9 9.4-6 19.5-9.5 28.5c-4.8 12.2-11.6 25.6-22.7 36C153.6 417.9 138.4 424 120 424c-21.4 0-39.9-10-53.1-17.1l0 0c-1.1-.6-2.2-1.2-3.2-1.7c-15-8-26.3-13.2-39.7-13.2c-13.3 0-24-10.7-24-24s10.7-24 24-24c26.6 0 47.3 10.8 62.3 18.8c16.8 9 25 13.2 33.7 13.2c6.8 0 10.2-1.9 12.8-4.3c3.4-3.2 7-8.8 10.8-18.5c3-7.7 5.6-16.1 8.6-25.9c.8-2.7 1.7-5.6 2.6-8.6c1.2-4 2.6-8.2 4-12.5c-3.9-4.5-7.4-8.8-10.5-12.7C136.9 303.5 122.5 312 104 312c-17.5 0-30.7-7.4-40.4-16.7c-8.4-8.1-14.8-18.3-19.4-25.7l-.6-.9c-5.4-8.6-8.8-13.9-12.5-17.4c-2.8-2.7-4.6-3.3-7.1-3.3c-13.3 0-24-10.7-24-24s10.7-24 24-24c17.5 0 30.7 7.4 40.4 16.7c8.4 8.1 14.8 18.3 19.4 25.7l.6 .9c5.4 8.6 8.8 13.9 12.5 17.4c2.8 2.7 4.6 3.3 7.1 3.3c3.3 0 8.7-1.7 19.4-13.4c5.1-5.6 10.4-12.3 16.7-20.4l1.4-1.8c5.8-7.4 12.2-15.7 19.3-24c13.8-16.2 30.3-32.8 51.4-46.4l-15.1-30.2c-1.7 .1-3.4 .2-5.1 .2c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm208 0c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faPastafarianism = faSpaghettiMonsterFlying;
  var faArrowDownUpAcrossLine = {
    prefix: 'fas',
    iconName: 'arrow-down-up-across-line',
    icon: [
      576,
      512,
      [],
      'e4af',
      'M137.4 502.6c12.5 12.5 32.8 12.5 45.3 0l96-96c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 402.7V288H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H448V109.3l41.4 41.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-96-96c-12.5-12.5-32.8-12.5-45.3 0l-96 96c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L384 109.3V224H192 128 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96V402.7L86.6 361.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96zM128 192h64V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V192zM448 320H384V448c0 17.7 14.3 32 32 32s32-14.3 32-32V320z',
    ],
  };
  var faSpoon = {
    prefix: 'fas',
    iconName: 'spoon',
    icon: [
      512,
      512,
      [129348, 61873, 'utensil-spoon'],
      'f2e5',
      'M245.8 220.9c-14.5-17.6-21.8-39.2-21.8-60.8C224 80 320 0 416 0c53 0 96 43 96 96c0 96-80 192-160.2 192c-21.6 0-43.2-7.3-60.8-21.8L54.6 502.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L245.8 220.9z',
    ],
  };
  var faUtensilSpoon = faSpoon;
  var faJarWheat = {
    prefix: 'fas',
    iconName: 'jar-wheat',
    icon: [
      320,
      512,
      [],
      'e517',
      'M32 32C32 14.3 46.3 0 64 0H256c17.7 0 32 14.3 32 32s-14.3 32-32 32H64C46.3 64 32 49.7 32 32zM0 160c0-35.3 28.7-64 64-64H256c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V160zm112 0H69.8c-3.2 0-5.8 2.6-5.8 5.8C64 198 90 224 122.2 224H144h32 21.8c32.1 0 58.2-26 58.2-58.2c0-3.2-2.6-5.8-5.8-5.8H208c-19.1 0-36.3 8.4-48 21.7c-11.7-13.3-28.9-21.7-48-21.7zm48 117.7c-11.7-13.3-28.9-21.7-48-21.7H69.8c-3.2 0-5.8 2.6-5.8 5.8C64 294 90 320 122.2 320H144h32 21.8c32.1 0 58.2-26 58.2-58.2c0-3.2-2.6-5.8-5.8-5.8H208c-19.1 0-36.3 8.4-48 21.7zM112 352H69.8c-3.2 0-5.8 2.6-5.8 5.8C64 390 90 416 122.2 416H144v32c0 8.8 7.2 16 16 16s16-7.2 16-16V416h21.8c32.1 0 58.2-26 58.2-58.2c0-3.2-2.6-5.8-5.8-5.8H208c-19.1 0-36.3 8.4-48 21.7c-11.7-13.3-28.9-21.7-48-21.7z',
    ],
  };
  var faEnvelopesBulk = {
    prefix: 'fas',
    iconName: 'envelopes-bulk',
    icon: [
      576,
      512,
      ['mail-bulk'],
      'f674',
      'M96 0C78.3 0 64 14.3 64 32V224h96V192c0-35.3 28.7-64 64-64H448V32c0-17.7-14.3-32-32-32H96zM224 160c-17.7 0-32 14.3-32 32v32h96c35.3 0 64 28.7 64 64V416H544c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32H224zm240 64h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H464c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zM32 256c-17.7 0-32 14.3-32 32v13L155.1 415.9c1.4 1 3.1 1.6 4.9 1.6s3.5-.6 4.9-1.6L320 301V288c0-17.7-14.3-32-32-32H32zm288 84.8L184 441.6c-6.9 5.1-15.3 7.9-24 7.9s-17-2.8-24-7.9L0 340.8V480c0 17.7 14.3 32 32 32H288c17.7 0 32-14.3 32-32V340.8z',
    ],
  };
  var faMailBulk = faEnvelopesBulk;
  var faFileCircleExclamation = {
    prefix: 'fas',
    iconName: 'file-circle-exclamation',
    icon: [
      576,
      512,
      [],
      'e4eb',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm48 384c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm0-192c-8.8 0-16 7.2-16 16v80c0 8.8 7.2 16 16 16s16-7.2 16-16V288c0-8.8-7.2-16-16-16z',
    ],
  };
  var faCircleH = {
    prefix: 'fas',
    iconName: 'circle-h',
    icon: [
      512,
      512,
      [9405, 'hospital-symbol'],
      'f47e',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM368 152V256 360c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H192l0 80c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-208c0-13.3 10.7-24 24-24s24 10.7 24 24v80H320V152c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faHospitalSymbol = faCircleH;
  var faPager = {
    prefix: 'fas',
    iconName: 'pager',
    icon: [
      512,
      512,
      [128223],
      'f815',
      'M0 128C0 92.7 28.7 64 64 64H448c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128zm64 32v64c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32zM80 320c-13.3 0-24 10.7-24 24s10.7 24 24 24h56c13.3 0 24-10.7 24-24s-10.7-24-24-24H80zm136 0c-13.3 0-24 10.7-24 24s10.7 24 24 24h48c13.3 0 24-10.7 24-24s-10.7-24-24-24H216z',
    ],
  };
  var faAddressBook = {
    prefix: 'fas',
    iconName: 'address-book',
    icon: [
      512,
      512,
      [62138, 'contact-book'],
      'f2b9',
      'M96 0C60.7 0 32 28.7 32 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H96zM208 288h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H144c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm96-96c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM512 80c0-8.8-7.2-16-16-16s-16 7.2-16 16v64c0 8.8 7.2 16 16 16s16-7.2 16-16V80zM496 192c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16s16-7.2 16-16V208c0-8.8-7.2-16-16-16zm16 144c0-8.8-7.2-16-16-16s-16 7.2-16 16v64c0 8.8 7.2 16 16 16s16-7.2 16-16V336z',
    ],
  };
  var faContactBook = faAddressBook;
  var faStrikethrough = {
    prefix: 'fas',
    iconName: 'strikethrough',
    icon: [
      512,
      512,
      [],
      'f0cc',
      'M161.3 144c3.2-17.2 14-30.1 33.7-38.6c21.1-9 51.8-12.3 88.6-6.5c11.9 1.9 48.8 9.1 60.1 12c17.1 4.5 34.6-5.6 39.2-22.7s-5.6-34.6-22.7-39.2c-14.3-3.8-53.6-11.4-66.6-13.4c-44.7-7-88.3-4.2-123.7 10.9c-36.5 15.6-64.4 44.8-71.8 87.3c-.1 .6-.2 1.1-.2 1.7c-2.8 23.9 .5 45.6 10.1 64.6c4.5 9 10.2 16.9 16.7 23.9H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H270.1c-.1 0-.3-.1-.4-.1l-1.1-.3c-36-10.8-65.2-19.6-85.2-33.1c-9.3-6.3-15-12.6-18.2-19.1c-3.1-6.1-5.2-14.6-3.8-27.4zM348.9 337.2c2.7 6.5 4.4 15.8 1.9 30.1c-3 17.6-13.8 30.8-33.9 39.4c-21.1 9-51.7 12.3-88.5 6.5c-18-2.9-49.1-13.5-74.4-22.1c-5.6-1.9-11-3.7-15.9-5.4c-16.8-5.6-34.9 3.5-40.5 20.3s3.5 34.9 20.3 40.5c3.6 1.2 7.9 2.7 12.7 4.3l0 0 0 0c24.9 8.5 63.6 21.7 87.6 25.6l0 0 .2 0c44.7 7 88.3 4.2 123.7-10.9c36.5-15.6 64.4-44.8 71.8-87.3c3.6-21 2.7-40.4-3.1-58.1H335.1c7 5.6 11.4 11.2 13.9 17.2z',
    ],
  };
  var faK = {
    prefix: 'fas',
    iconName: 'k',
    icon: [
      320,
      512,
      [107],
      '4b',
      'M311 86.3c12.3-12.7 12-32.9-.7-45.2s-32.9-12-45.2 .7l-155.2 160L64 249V64c0-17.7-14.3-32-32-32S0 46.3 0 64V328 448c0 17.7 14.3 32 32 32s32-14.3 32-32V341l64.7-66.7 133 192c10.1 14.5 30 18.1 44.5 8.1s18.1-30 8.1-44.5L174.1 227.4 311 86.3z',
    ],
  };
  var faLandmarkFlag = {
    prefix: 'fas',
    iconName: 'landmark-flag',
    icon: [
      512,
      512,
      [],
      'e51c',
      'M272 0h80c8.8 0 16 7.2 16 16V80c0 8.8-7.2 16-16 16H272v32H464c17.7 0 32 14.3 32 32s-14.3 32-32 32H48c-17.7 0-32-14.3-32-32s14.3-32 32-32H240V16c0-8.8 7.2-16 16-16h16zM64 224h64V416h40V224h64V416h48V224h64V416h40V224h64V420.3c.6 .3 1.2 .7 1.8 1.1l48 32c11.7 7.8 17 22.4 12.9 35.9S494.1 512 480 512H32c-14.1 0-26.5-9.2-30.6-22.7s1.1-28.1 12.9-35.9l48-32c.6-.4 1.2-.7 1.8-1.1V224z',
    ],
  };
  var faPencil = {
    prefix: 'fas',
    iconName: 'pencil',
    icon: [
      512,
      512,
      [9999, 61504, 'pencil-alt'],
      'f303',
      'M421.7 220.3l-11.3 11.3-22.6 22.6-205 205c-6.6 6.6-14.8 11.5-23.8 14.1L30.8 511c-8.4 2.5-17.5 .2-23.7-6.1S-1.5 489.7 1 481.2L38.7 353.1c2.6-9 7.5-17.2 14.1-23.8l205-205 22.6-22.6 11.3-11.3 33.9 33.9 62.1 62.1 33.9 33.9zM96 353.9l-9.3 9.3c-.9 .9-1.6 2.1-2 3.4l-25.3 86 86-25.3c1.3-.4 2.5-1.1 3.4-2l9.3-9.3H112c-8.8 0-16-7.2-16-16V353.9zM453.3 19.3l39.4 39.4c25 25 25 65.5 0 90.5l-14.5 14.5-22.6 22.6-11.3 11.3-33.9-33.9-62.1-62.1L314.3 67.7l11.3-11.3 22.6-22.6 14.5-14.5c25-25 65.5-25 90.5 0z',
    ],
  };
  var faPencilAlt = faPencil;
  var faBackward = {
    prefix: 'fas',
    iconName: 'backward',
    icon: [
      512,
      512,
      [9194],
      'f04a',
      'M459.5 440.6c9.5 7.9 22.8 9.7 34.1 4.4s18.4-16.6 18.4-29V96c0-12.4-7.2-23.7-18.4-29s-24.5-3.6-34.1 4.4L288 214.3V256v41.7L459.5 440.6zM256 352V256 128 96c0-12.4-7.2-23.7-18.4-29s-24.5-3.6-34.1 4.4l-192 160C4.2 237.5 0 246.5 0 256s4.2 18.5 11.5 24.6l192 160c9.5 7.9 22.8 9.7 34.1 4.4s18.4-16.6 18.4-29V352z',
    ],
  };
  var faCaretRight = {
    prefix: 'fas',
    iconName: 'caret-right',
    icon: [
      256,
      512,
      [],
      'f0da',
      'M246.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6l0 256c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l128-128z',
    ],
  };
  var faComments = {
    prefix: 'fas',
    iconName: 'comments',
    icon: [
      640,
      512,
      [128490, 61670],
      'f086',
      'M208 352c114.9 0 208-78.8 208-176S322.9 0 208 0S0 78.8 0 176c0 38.6 14.7 74.3 39.6 103.4c-3.5 9.4-8.7 17.7-14.2 24.7c-4.8 6.2-9.7 11-13.3 14.3c-1.8 1.6-3.3 2.9-4.3 3.7c-.5 .4-.9 .7-1.1 .8l-.2 .2 0 0 0 0C1 327.2-1.4 334.4 .8 340.9S9.1 352 16 352c21.8 0 43.8-5.6 62.1-12.5c9.2-3.5 17.8-7.4 25.3-11.4C134.1 343.3 169.8 352 208 352zM448 176c0 112.3-99.1 196.9-216.5 207C255.8 457.4 336.4 512 432 512c38.2 0 73.9-8.7 104.7-23.9c7.5 4 16 7.9 25.2 11.4c18.3 6.9 40.3 12.5 62.1 12.5c6.9 0 13.1-4.5 15.2-11.1c2.1-6.6-.2-13.8-5.8-17.9l0 0 0 0-.2-.2c-.2-.2-.6-.4-1.1-.8c-1-.8-2.5-2-4.3-3.7c-3.6-3.3-8.5-8.1-13.3-14.3c-5.5-7-10.7-15.4-14.2-24.7c24.9-29 39.6-64.7 39.6-103.4c0-92.8-84.9-168.9-192.6-175.5c.4 5.1 .6 10.3 .6 15.5z',
    ],
  };
  var faPaste = {
    prefix: 'fas',
    iconName: 'paste',
    icon: [
      512,
      512,
      ['file-clipboard'],
      'f0ea',
      'M160 0c-23.7 0-44.4 12.9-55.4 32H48C21.5 32 0 53.5 0 80V400c0 26.5 21.5 48 48 48H192V176c0-44.2 35.8-80 80-80h48V80c0-26.5-21.5-48-48-48H215.4C204.4 12.9 183.7 0 160 0zM272 128c-26.5 0-48 21.5-48 48V448v16c0 26.5 21.5 48 48 48H464c26.5 0 48-21.5 48-48V256H416c-17.7 0-32-14.3-32-32V128H320 272zM160 88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm256 40v96h96l-96-96z',
    ],
  };
  var faFileClipboard = faPaste;
  var faCodePullRequest = {
    prefix: 'fas',
    iconName: 'code-pull-request',
    icon: [
      512,
      512,
      [],
      'e13c',
      'M305.8 2.1C314.4 5.9 320 14.5 320 24V64h16c70.7 0 128 57.3 128 128V358.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V192c0-35.3-28.7-64-64-64H320v40c0 9.5-5.6 18.1-14.2 21.9s-18.8 2.3-25.8-4.1l-80-72c-5.1-4.6-7.9-11-7.9-17.8s2.9-13.3 7.9-17.8l80-72c7-6.3 17.2-7.9 25.8-4.1zM104 80c0-13.3-10.7-24-24-24S56 66.7 56 80s10.7 24 24 24s24-10.7 24-24zm8 73.3V358.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V153.3C19.7 141 0 112.8 0 80C0 35.8 35.8 0 80 0s80 35.8 80 80c0 32.8-19.7 61-48 73.3zM104 432c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm328 24c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faClipboardList = {
    prefix: 'fas',
    iconName: 'clipboard-list',
    icon: [
      384,
      512,
      [],
      'f46d',
      'M101.5 64C114.6 26.7 150.2 0 192 0s77.4 26.7 90.5 64H320c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128C0 92.7 28.7 64 64 64h37.5zM224 96c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM160 368c0 8.8 7.2 16 16 16H304c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zM96 392c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm64-120c0 8.8 7.2 16 16 16H304c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zM96 296c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faTruckRampBox = {
    prefix: 'fas',
    iconName: 'truck-ramp-box',
    icon: [
      640,
      512,
      ['truck-loading'],
      'f4de',
      'M640 0V400c0 61.9-50.1 112-112 112c-61 0-110.5-48.7-112-109.3L48.4 502.9c-17.1 4.6-34.6-5.4-39.3-22.5s5.4-34.6 22.5-39.3L352 353.8V64c0-35.3 28.7-64 64-64H640zM576 400c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM23.1 207.7c-4.6-17.1 5.6-34.6 22.6-39.2l46.4-12.4 20.7 77.3c2.3 8.5 11.1 13.6 19.6 11.3l30.9-8.3c8.5-2.3 13.6-11.1 11.3-19.6l-20.7-77.3 46.4-12.4c17.1-4.6 34.6 5.6 39.2 22.6l41.4 154.5c4.6 17.1-5.6 34.6-22.6 39.2L103.7 384.9c-17.1 4.6-34.6-5.6-39.2-22.6L23.1 207.7z',
    ],
  };
  var faTruckLoading = faTruckRampBox;
  var faUserCheck = {
    prefix: 'fas',
    iconName: 'user-check',
    icon: [
      640,
      512,
      [],
      'f4fc',
      'M352 128c0 70.7-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM625 177L497 305c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L591 143c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z',
    ],
  };
  var faVialVirus = {
    prefix: 'fas',
    iconName: 'vial-virus',
    icon: [
      512,
      512,
      [],
      'e597',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96V384c0 53 43 96 96 96c28.6 0 54.2-12.5 71.8-32.3c.1-14.2 5.6-28.3 16.4-39.1c.2-.2 .1-.6-.2-.6c-30.9 0-56-25.1-56-56s25.1-56 56-56c.3 0 .4-.4 .2-.6c-21.9-21.9-21.9-57.3 0-79.2c2.4-2.4 5-4.6 7.8-6.5V96c17.7 0 32-14.3 32-32s-14.3-32-32-32H160 96 32zM96 192V96h64v96H96zM216 376c28.8 0 43.2 34.8 22.9 55.2c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0c20.4-20.4 55.2-5.9 55.2 22.9c0 13.3 10.7 24 24 24s24-10.7 24-24c0-28.8 34.8-43.2 55.2-22.9c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9C444.8 410.8 459.2 376 488 376c13.3 0 24-10.7 24-24s-10.7-24-24-24c-28.8 0-43.2-34.8-22.9-55.2c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0C410.8 259.2 376 244.8 376 216c0-13.3-10.7-24-24-24s-24 10.7-24 24c0 28.8-34.8 43.2-55.2 22.9c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9c20.4 20.4 5.9 55.2-22.9 55.2c-13.3 0-24 10.7-24 24s10.7 24 24 24zm104-24c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm88 32c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faSheetPlastic = {
    prefix: 'fas',
    iconName: 'sheet-plastic',
    icon: [
      384,
      512,
      [],
      'e571',
      'M0 448c0 35.3 28.7 64 64 64H224V384c0-17.7 14.3-32 32-32H384V64c0-35.3-28.7-64-64-64H64C28.7 0 0 28.7 0 64V448zM171.3 75.3l-96 96c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l96-96c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6zm96 32l-160 160c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l160-160c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6zM384 384H256V512L384 384z',
    ],
  };
  var faBlog = {
    prefix: 'fas',
    iconName: 'blog',
    icon: [
      512,
      512,
      [],
      'f781',
      'M192 32c0 17.7 14.3 32 32 32c123.7 0 224 100.3 224 224c0 17.7 14.3 32 32 32s32-14.3 32-32C512 128.9 383.1 0 224 0c-17.7 0-32 14.3-32 32zm0 96c0 17.7 14.3 32 32 32c70.7 0 128 57.3 128 128c0 17.7 14.3 32 32 32s32-14.3 32-32c0-106-86-192-192-192c-17.7 0-32 14.3-32 32zM96 144c0-26.5-21.5-48-48-48S0 117.5 0 144V368c0 79.5 64.5 144 144 144s144-64.5 144-144s-64.5-144-144-144H128v96h16c26.5 0 48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48V144z',
    ],
  };
  var faUserNinja = {
    prefix: 'fas',
    iconName: 'user-ninja',
    icon: [
      448,
      512,
      [129399],
      'f504',
      'M224 256c-57.2 0-105.6-37.5-122-89.3c-1.1 1.3-2.2 2.6-3.5 3.8c-15.8 15.8-38.8 20.7-53.6 22.1c-8.1 .8-14.6-5.7-13.8-13.8c1.4-14.7 6.3-37.8 22.1-53.6c5.8-5.8 12.6-10.1 19.6-13.4c-7-3.2-13.8-7.6-19.6-13.4C37.4 82.7 32.6 59.7 31.1 44.9c-.8-8.1 5.7-14.6 13.8-13.8c14.7 1.4 37.8 6.3 53.6 22.1c4.8 4.8 8.7 10.4 11.7 16.1C131.4 28.2 174.4 0 224 0c70.7 0 128 57.3 128 128s-57.3 128-128 128zM0 482.3C0 396 61.3 324.1 142.7 307.6l68.5 91.4c6.4 8.5 19.2 8.5 25.6 0l68.5-91.4C386.7 324.1 448 396 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM160 96c-8.8 0-16 7.2-16 16s7.2 16 16 16H288c8.8 0 16-7.2 16-16s-7.2-16-16-16H160z',
    ],
  };
  var faPersonArrowUpFromLine = {
    prefix: 'fas',
    iconName: 'person-arrow-up-from-line',
    icon: [
      640,
      512,
      [],
      'e539',
      'M192 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-8 352V352h16v96H184zm-64 0H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H152h80H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H264V256.9l28.6 47.5c9.1 15.1 28.8 20 43.9 10.9s20-28.8 10.9-43.9l-58.3-97c-17.4-28.9-48.6-46.6-82.3-46.6H177.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9L120 256.9V448zM598.6 121.4l-80-80c-12.5-12.5-32.8-12.5-45.3 0l-80 80c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L464 141.3 464 384c0 17.7 14.3 32 32 32s32-14.3 32-32V141.3l25.4 25.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z',
    ],
  };
  var faScrollTorah = {
    prefix: 'fas',
    iconName: 'scroll-torah',
    icon: [
      640,
      512,
      ['torah'],
      'f6a0',
      'M96 480V32C96 14.3 74.5 0 48 0S0 14.3 0 32V480c0 17.7 21.5 32 48 32s48-14.3 48-32zM512 32H128V480H512V32zM592 0c-26.5 0-48 14.3-48 32V480c0 17.7 21.5 32 48 32s48-14.3 48-32V32c0-17.7-21.5-32-48-32zM196 313.7c0-3.2 .9-6.4 2.5-9.2L226.7 256l-28.3-48.5c-1.6-2.8-2.5-6-2.5-9.2c0-10.1 8.2-18.3 18.3-18.3H271l31.4-53.9c3.6-6.3 10.3-10.1 17.6-10.1s13.9 3.8 17.6 10.1L369 180h56.7c10.1 0 18.3 8.2 18.3 18.3c0 3.2-.9 6.4-2.5 9.2L413.3 256l28.3 48.5c1.6 2.8 2.5 6 2.5 9.2c0 10.1-8.2 18.3-18.3 18.3H369l-31.4 53.9c-3.6 6.3-10.3 10.1-17.6 10.1s-13.9-3.8-17.6-10.1L271 332H214.3c-10.1 0-18.3-8.2-18.3-18.3zm124 54.7L341.2 332H298.8L320 368.4zM254.5 256l30.3 52h70.4l30.3-52-30.3-52H284.8l-30.3 52zm144.9 23.8L383 308h32.8l-16.4-28.2zM415.8 204H383l16.4 28.2L415.8 204zM320 143.6L298.8 180h42.4L320 143.6zM224.2 204l16.4 28.2L257 204H224.2zM257 308l-16.4-28.2L224.2 308H257z',
    ],
  };
  var faTorah = faScrollTorah;
  var faBroomBall = {
    prefix: 'fas',
    iconName: 'broom-ball',
    icon: [
      640,
      512,
      ['quidditch', 'quidditch-broom-ball'],
      'f458',
      'M633.3 12.4c10.8 14 8.3 34.1-5.6 44.9l-144 112-72 56L403 232l28.3 36.3c3.7 4.8 4.4 11.2 1.8 16.7s-8.1 9-14.1 9.1l-48 .9L292.3 194.2l12.5-46.3c1.6-5.9 6.3-10.3 12.3-11.5s12 1.1 15.8 5.8l30.8 39.4 8.7-6.8 72-56 144-112c13.9-10.9 34.1-8.3 44.9 5.6zM269.1 476.3c-55.5 43.4-215 34.2-252.3 31.4c-5.1-.4-9.7-2.9-12.8-7s-4.5-9.1-3.6-14.1c.5-3.2 1.3-7.2 2.2-12.1c3-16.5 10.8-31.6 21.9-44.1l73.5-82.5c3.1-3.5 3.2-8.6 .4-12.3s-7.9-4.7-12-2.6L47.3 353.5c-6.3 3.3-13.4-2.7-11-9.4c14.3-39.9 32.7-76.9 55.5-94.7c57.7-45.1 175.3-35.5 175.3-35.5l78.8 100.9s-19.1 116.4-76.8 161.5zM496 512c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faQuidditch = faBroomBall;
  var faQuidditchBroomBall = faBroomBall;
  var faToggleOff = {
    prefix: 'fas',
    iconName: 'toggle-off',
    icon: [
      576,
      512,
      [],
      'f204',
      'M384 128c70.7 0 128 57.3 128 128s-57.3 128-128 128H192c-70.7 0-128-57.3-128-128s57.3-128 128-128H384zM576 256c0-106-86-192-192-192H192C86 64 0 150 0 256S86 448 192 448H384c106 0 192-86 192-192zM192 352c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96s43 96 96 96z',
    ],
  };
  var faBoxArchive = {
    prefix: 'fas',
    iconName: 'box-archive',
    icon: [
      512,
      512,
      ['archive'],
      'f187',
      'M32 32H480c17.7 0 32 14.3 32 32V96c0 17.7-14.3 32-32 32H32C14.3 128 0 113.7 0 96V64C0 46.3 14.3 32 32 32zm0 128H480V416c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V160zm128 80c0 8.8 7.2 16 16 16H336c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faArchive = faBoxArchive;
  var faPersonDrowning = {
    prefix: 'fas',
    iconName: 'person-drowning',
    icon: [
      576,
      512,
      [],
      'e545',
      'M192 64c0-17.7-14.3-32-32-32s-32 14.3-32 32V96.2c0 54.1 23.5 104 62.2 138.3l-21 146.7c7.8 2.1 15.5 3.3 22.8 3.3c21.1 0 42-8.5 59.2-20.3c22.1-15.5 51.6-15.5 73.7 0c12.4 8.5 26.1 14.8 39.7 18l17.7-97.6c10.7-1.2 21.3-3.1 31.9-5.5l105-23.9c17.2-3.9 28-21.1 24.1-38.3s-21.1-28-38.3-24.1L400 216.6c-41 9.3-83.7 7.5-123.7-5.2c-50.2-16-84.3-62.6-84.3-115.3V64zM320 192c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zM306.5 389.9c-11.1-7.9-25.9-7.9-37 0C247 405.4 219.5 416 192 416c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 469.7 159 480 192 480c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C439.4 405.2 410.9 416 384 416c-27.5 0-55-10.6-77.5-26.1z',
    ],
  };
  var faArrowDown91 = {
    prefix: 'fas',
    iconName: 'arrow-down-9-1',
    icon: [
      576,
      512,
      ['sort-numeric-desc', 'sort-numeric-down-alt'],
      'f886',
      'M160 480c9 0 17.5-3.8 23.6-10.4l88-96c11.9-13 11.1-33.3-2-45.2s-33.3-11.1-45.2 2L192 365.7V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V365.7L95.6 330.4c-11.9-13-32.2-13.9-45.2-2s-13.9 32.2-2 45.2l88 96C142.5 476.2 151 480 160 480zM352 320c0 17.7 14.3 32 32 32h16v64H384c-17.7 0-32 14.3-32 32s14.3 32 32 32h48 48c17.7 0 32-14.3 32-32s-14.3-32-32-32H464V320c0-17.7-14.3-32-32-32H384c-17.7 0-32 14.3-32 32zm93.7-171.1c-4.2 2-8.8 3.1-13.7 3.1c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32c0 12.8-7.5 23.8-18.3 28.9zm-40.7 54.9l-6.8 9.2c-10.5 14.2-7.5 34.2 6.7 44.8s34.2 7.5 44.8-6.7l48.8-65.8c14-18.9 21.5-41.7 21.5-65.2c0-48.6-39.4-88-88-88s-88 39.4-88 88c0 39.2 25.6 72.4 61.1 83.8z',
    ],
  };
  var faSortNumericDesc = faArrowDown91;
  var faSortNumericDownAlt = faArrowDown91;
  var faFaceGrinTongueSquint = {
    prefix: 'fas',
    iconName: 'face-grin-tongue-squint',
    icon: [
      512,
      512,
      [128541, 'grin-tongue-squint'],
      'f58a',
      'M0 256C0 368.9 73.1 464.7 174.5 498.8C165.3 484 160 466.6 160 448V400.7c-24-17.5-43.1-41.4-54.8-69.2c-5-11.8 7-22.5 19.3-18.7c39.7 12.2 84.5 19 131.8 19s92.1-6.8 131.8-19c12.3-3.8 24.3 6.9 19.3 18.7c-11.8 28-31.1 52-55.4 69.6V448c0 18.6-5.3 36-14.5 50.8C438.9 464.7 512 368.9 512 256C512 114.6 397.4 0 256 0S0 114.6 0 256zM116 141.1c0-9 9.6-14.7 17.5-10.5l89.9 47.9c10.7 5.7 10.7 21.1 0 26.8l-89.9 47.9c-7.9 4.2-17.5-1.5-17.5-10.5c0-2.8 1-5.5 2.8-7.6l36-43.2-36-43.2c-1.8-2.1-2.8-4.8-2.8-7.6zm262.5-10.5c7.9-4.2 17.5 1.5 17.5 10.5c0 2.8-1 5.5-2.8 7.6l-36 43.2 36 43.2c1.8 2.1 2.8 4.8 2.8 7.6c0 9-9.6 14.7-17.5 10.5l-89.9-47.9c-10.7-5.7-10.7-21.1 0-26.8l89.9-47.9zM320 448V402.6c0-14.7-11.9-26.6-26.6-26.6h-2c-11.3 0-21.1 7.9-23.6 18.9c-2.8 12.6-20.8 12.6-23.6 0c-2.5-11.1-12.3-18.9-23.6-18.9h-2c-14.7 0-26.6 11.9-26.6 26.6V448c0 35.3 28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faGrinTongueSquint = faFaceGrinTongueSquint;
  var faSprayCan = {
    prefix: 'fas',
    iconName: 'spray-can',
    icon: [
      512,
      512,
      [],
      'f5bd',
      'M128 0h64c17.7 0 32 14.3 32 32v96H96V32c0-17.7 14.3-32 32-32zM0 256c0-53 43-96 96-96H224c53 0 96 43 96 96V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V256zm240 80c0-44.2-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80s80-35.8 80-80zM320 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM512 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM480 192c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm32 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM384 192c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faTruckMonster = {
    prefix: 'fas',
    iconName: 'truck-monster',
    icon: [
      640,
      512,
      [],
      'f63b',
      'M288 64v64H416L368 64H288zM419.2 25.6L496 128h80c17.7 0 32 14.3 32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32c-29.2-38.9-75.7-64-128-64s-98.8 25.1-128 64H288c-29.2-38.9-75.7-64-128-64s-98.8 25.1-128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32V160c0-17.7 14.3-32 32-32H224V48c0-26.5 21.5-48 48-48h96c20.1 0 39.1 9.5 51.2 25.6zM152 256h16c12.1 0 22.1 8.9 23.8 20.6c7.6 2.2 14.9 5.3 21.7 9c9.4-7 22.8-6.3 31.3 2.3l11.3 11.3c8.6 8.6 9.3 21.9 2.3 31.3c3.7 6.8 6.8 14.1 9 21.7c11.6 1.7 20.6 11.7 20.6 23.8v16c0 12.1-8.9 22.1-20.6 23.8c-2.2 7.6-5.3 14.9-9 21.7c7 9.4 6.3 22.8-2.3 31.3l-11.3 11.3c-8.6 8.6-21.9 9.3-31.3 2.2c-6.8 3.7-14.1 6.8-21.7 9C190.1 503.1 180.1 512 168 512H152c-12.1 0-22.1-8.9-23.8-20.6c-7.6-2.2-14.9-5.3-21.7-9c-9.4 7.1-22.8 6.3-31.3-2.2L63.8 468.9c-8.6-8.6-9.3-21.9-2.3-31.3c-3.7-6.9-6.8-14.1-9-21.8C40.9 414.1 32 404.1 32 392V376c0-12.1 8.9-22.1 20.6-23.8c2.2-7.6 5.3-14.9 9-21.8c-7-9.4-6.3-22.8 2.3-31.3l11.3-11.3c8.6-8.6 21.9-9.3 31.3-2.3c6.8-3.7 14.1-6.8 21.7-9c1.7-11.6 11.7-20.6 23.8-20.6zm8 176c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM448.2 276.6c1.7-11.6 11.7-20.6 23.8-20.6h16c12.1 0 22.1 8.9 23.8 20.6c7.6 2.2 14.9 5.3 21.8 9c9.4-7 22.8-6.3 31.3 2.3l11.3 11.3c8.6 8.6 9.3 21.9 2.2 31.3c3.7 6.8 6.8 14.1 9 21.7c11.6 1.7 20.6 11.7 20.6 23.8v16c0 12.1-8.9 22.1-20.6 23.8c-2.2 7.6-5.3 14.9-9 21.7c7 9.4 6.3 22.8-2.2 31.3l-11.3 11.3c-8.6 8.6-21.9 9.3-31.3 2.2c-6.9 3.7-14.1 6.8-21.8 9C510.1 503.1 500.1 512 488 512H472c-12.1 0-22.1-8.9-23.8-20.6c-7.6-2.2-14.9-5.3-21.7-9c-9.4 7.1-22.8 6.3-31.3-2.2l-11.3-11.3c-8.6-8.6-9.3-21.9-2.2-31.3c-3.7-6.9-6.8-14.1-9-21.8C360.9 414.1 352 404.1 352 392V376c0-12.1 8.9-22.1 20.6-23.8c2.2-7.6 5.3-14.9 9-21.8c-7-9.4-6.3-22.8 2.2-31.3l11.3-11.3c8.6-8.6 21.9-9.3 31.3-2.3c6.8-3.7 14.1-6.8 21.7-9zM528 384c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faW = {
    prefix: 'fas',
    iconName: 'w',
    icon: [
      576,
      512,
      [119],
      '57',
      'M20.8 34c16.5-6.2 35 2.2 41.2 18.7l110.2 294L257.3 55c4-13.7 16.5-23 30.7-23s26.7 9.4 30.7 23l85.1 291.7L514 52.8c6.2-16.5 24.6-24.9 41.2-18.7s24.9 24.7 18.7 41.2l-144 384c-4.8 12.9-17.4 21.3-31.2 20.7s-25.7-9.8-29.5-23L288 178.3 206.7 457c-3.9 13.2-15.8 22.5-29.5 23s-26.3-7.8-31.2-20.7L2 75.2C-4.2 58.7 4.2 40.2 20.8 34z',
    ],
  };
  var faEarthAfrica = {
    prefix: 'fas',
    iconName: 'earth-africa',
    icon: [
      512,
      512,
      [127757, 'globe-africa'],
      'f57c',
      'M177.8 63.2l10 17.4c2.8 4.8 4.2 10.3 4.2 15.9v41.4c0 3.9 1.6 7.7 4.3 10.4c6.2 6.2 16.5 5.7 22-1.2l13.6-17c4.7-5.9 12.9-7.7 19.6-4.3l15.2 7.6c3.4 1.7 7.2 2.6 11 2.6c6.5 0 12.8-2.6 17.4-7.2l3.9-3.9c2.9-2.9 7.3-3.6 11-1.8l29.2 14.6c7.8 3.9 12.6 11.8 12.6 20.5c0 10.5-7.1 19.6-17.3 22.2l-35.4 8.8c-7.4 1.8-15.1 1.5-22.3-.9l-32-10.7c-3.3-1.1-6.7-1.7-10.2-1.7c-7 0-13.8 2.3-19.4 6.5L176 212c-10.1 7.6-16 19.4-16 32v28c0 26.5 21.5 48 48 48h32c8.8 0 16 7.2 16 16v48c0 17.7 14.3 32 32 32c10.1 0 19.6-4.7 25.6-12.8l25.6-34.1c8.3-11.1 12.8-24.6 12.8-38.4V318.6c0-3.9 2.6-7.3 6.4-8.2l5.3-1.3c11.9-3 20.3-13.7 20.3-26c0-7.1-2.8-13.9-7.8-18.9l-33.5-33.5c-3.7-3.7-3.7-9.7 0-13.4c5.7-5.7 14.1-7.7 21.8-5.1l14.1 4.7c12.3 4.1 25.7-1.5 31.5-13c3.5-7 11.2-10.8 18.9-9.2l27.4 5.5C432 112.4 351.5 48 256 48c-27.7 0-54 5.4-78.2 15.2zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256z',
    ],
  };
  var faGlobeAfrica = faEarthAfrica;
  var faRainbow = {
    prefix: 'fas',
    iconName: 'rainbow',
    icon: [
      640,
      512,
      [127752],
      'f75b',
      'M320 96C178.6 96 64 210.6 64 352v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352C0 175.3 143.3 32 320 32s320 143.3 320 320v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352C576 210.6 461.4 96 320 96zm0 192c-35.3 0-64 28.7-64 64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352c0-70.7 57.3-128 128-128s128 57.3 128 128v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352c0-35.3-28.7-64-64-64zM160 352v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352c0-123.7 100.3-224 224-224s224 100.3 224 224v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352c0-88.4-71.6-160-160-160s-160 71.6-160 160z',
    ],
  };
  var faCircleNotch = {
    prefix: 'fas',
    iconName: 'circle-notch',
    icon: [
      512,
      512,
      [],
      'f1ce',
      'M222.7 32.1c5 16.9-4.6 34.8-21.5 39.8C121.8 95.6 64 169.1 64 256c0 106 86 192 192 192s192-86 192-192c0-86.9-57.8-160.4-137.1-184.1c-16.9-5-26.6-22.9-21.5-39.8s22.9-26.6 39.8-21.5C434.9 42.1 512 140 512 256c0 141.4-114.6 256-256 256S0 397.4 0 256C0 140 77.1 42.1 182.9 10.6c16.9-5 34.8 4.6 39.8 21.5z',
    ],
  };
  var faTabletScreenButton = {
    prefix: 'fas',
    iconName: 'tablet-screen-button',
    icon: [
      448,
      512,
      ['tablet-alt'],
      'f3fa',
      'M0 64C0 28.7 28.7 0 64 0H384c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM256 448c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM384 64H64V384H384V64z',
    ],
  };
  var faTabletAlt = faTabletScreenButton;
  var faPaw = {
    prefix: 'fas',
    iconName: 'paw',
    icon: [
      512,
      512,
      [],
      'f1b0',
      'M226.5 92.9c14.3 42.9-.3 86.2-32.6 96.8s-70.1-15.6-84.4-58.5s.3-86.2 32.6-96.8s70.1 15.6 84.4 58.5zM100.4 198.6c18.9 32.4 14.3 70.1-10.2 84.1s-59.7-.9-78.5-33.3S-2.7 179.3 21.8 165.3s59.7 .9 78.5 33.3zM69.2 401.2C121.6 259.9 214.7 224 256 224s134.4 35.9 186.8 177.2c3.6 9.7 5.2 20.1 5.2 30.5v1.6c0 25.8-20.9 46.7-46.7 46.7c-11.5 0-22.9-1.4-34-4.2l-88-22c-15.3-3.8-31.3-3.8-46.6 0l-88 22c-11.1 2.8-22.5 4.2-34 4.2C84.9 480 64 459.1 64 433.3v-1.6c0-10.4 1.6-20.8 5.2-30.5zM421.8 282.7c-24.5-14-29.1-51.7-10.2-84.1s54-47.3 78.5-33.3s29.1 51.7 10.2 84.1s-54 47.3-78.5 33.3zM310.1 189.7c-32.3-10.6-46.9-53.9-32.6-96.8s52.1-69.1 84.4-58.5s46.9 53.9 32.6 96.8s-52.1 69.1-84.4 58.5z',
    ],
  };
  var faCloud = {
    prefix: 'fas',
    iconName: 'cloud',
    icon: [
      640,
      512,
      [9729],
      'f0c2',
      'M0 336c0 79.5 64.5 144 144 144H512c70.7 0 128-57.3 128-128c0-61.9-44-113.6-102.4-125.4c4.1-10.7 6.4-22.4 6.4-34.6c0-53-43-96-96-96c-19.7 0-38.1 6-53.3 16.2C367 64.2 315.3 32 256 32C167.6 32 96 103.6 96 192c0 2.7 .1 5.4 .2 8.1C40.2 219.8 0 273.2 0 336z',
    ],
  };
  var faTrowelBricks = {
    prefix: 'fas',
    iconName: 'trowel-bricks',
    icon: [
      512,
      512,
      [],
      'e58a',
      'M240.8 4.8C250.3 10.6 256 20.9 256 32v72h89c3.6-13.8 16.1-24 31-24h88c26.5 0 48 21.5 48 48s-21.5 48-48 48H376c-14.9 0-27.4-10.2-31-24H256v72c0 11.1-5.7 21.4-15.2 27.2s-21.2 6.4-31.1 1.4l-192-96C6.8 151.2 0 140.1 0 128s6.8-23.2 17.7-28.6l192-96c9.9-5 21.7-4.4 31.1 1.4zM288 256c0-17.7 14.3-32 32-32H480c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H320c-17.7 0-32-14.3-32-32V256zM32 384h96c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32zm192 0H480c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H224c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32z',
    ],
  };
  var faFaceFlushed = {
    prefix: 'fas',
    iconName: 'face-flushed',
    icon: [
      512,
      512,
      [128563, 'flushed'],
      'f579',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM176 384c0 8.8 7.2 16 16 16H320c8.8 0 16-7.2 16-16s-7.2-16-16-16H192c-8.8 0-16 7.2-16 16zm-16-88c39.8 0 72-32.2 72-72s-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72zm264-72c0-39.8-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72s72-32.2 72-72zm-240 0c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm192 0c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faFlushed = faFaceFlushed;
  var faHospitalUser = {
    prefix: 'fas',
    iconName: 'hospital-user',
    icon: [
      576,
      512,
      [],
      'f80d',
      'M48 0C21.5 0 0 21.5 0 48V256H144c8.8 0 16 7.2 16 16s-7.2 16-16 16H0v64H144c8.8 0 16 7.2 16 16s-7.2 16-16 16H0v80c0 26.5 21.5 48 48 48H265.9c-6.3-10.2-9.9-22.2-9.9-35.1c0-46.9 25.8-87.8 64-109.2V271.8 48c0-26.5-21.5-48-48-48H48zM152 64h16c8.8 0 16 7.2 16 16v24h24c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H184v24c0 8.8-7.2 16-16 16H152c-8.8 0-16-7.2-16-16V152H112c-8.8 0-16-7.2-16-16V120c0-8.8 7.2-16 16-16h24V80c0-8.8 7.2-16 16-16zM512 272c0-44.2-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80s80-35.8 80-80zM288 477.1c0 19.3 15.6 34.9 34.9 34.9H541.1c19.3 0 34.9-15.6 34.9-34.9c0-51.4-41.7-93.1-93.1-93.1H381.1c-51.4 0-93.1 41.7-93.1 93.1z',
    ],
  };
  var faTentArrowLeftRight = {
    prefix: 'fas',
    iconName: 'tent-arrow-left-right',
    icon: [
      640,
      512,
      [],
      'e57f',
      'M520.1 6.2c-9.9-8.9-25-8.1-33.9 1.8s-8.1 25 1.8 33.9L521.5 72 118.5 72l33.5-30.2c9.9-8.9 10.7-24 1.8-33.9s-24-10.7-33.9-1.8l-80 72C34.9 82.7 32 89.2 32 96s2.9 13.3 7.9 17.8l80 72c9.9 8.9 25 8.1 33.9-1.8s8.1-25-1.8-33.9L118.5 120l402.9 0-33.5 30.2c-9.9 8.9-10.7 24-1.8 33.9s24 10.7 33.9 1.8l80-72c5.1-4.6 7.9-11 7.9-17.8s-2.9-13.3-7.9-17.8l-80-72zM339.4 166.5c-11.5-8.7-27.3-8.7-38.8 0l-168 128c-6.6 5-11 12.5-12.3 20.7l-24 160c-1.4 9.2 1.3 18.6 7.4 25.6s14.9 11.1 24.2 11.1H320V352l96 160h96c9.3 0 18.2-4.1 24.2-11.1s8.8-16.4 7.4-25.6l-24-160c-1.2-8.2-5.6-15.7-12.3-20.7l-168-128z',
    ],
  };
  var faGavel = {
    prefix: 'fas',
    iconName: 'gavel',
    icon: [
      512,
      512,
      ['legal'],
      'f0e3',
      'M318.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-120 120c-12.5 12.5-12.5 32.8 0 45.3l16 16c12.5 12.5 32.8 12.5 45.3 0l4-4L325.4 293.4l-4 4c-12.5 12.5-12.5 32.8 0 45.3l16 16c12.5 12.5 32.8 12.5 45.3 0l120-120c12.5-12.5 12.5-32.8 0-45.3l-16-16c-12.5-12.5-32.8-12.5-45.3 0l-4 4L330.6 74.6l4-4c12.5-12.5 12.5-32.8 0-45.3l-16-16zm-152 288c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3l48 48c12.5 12.5 32.8 12.5 45.3 0l112-112c12.5-12.5 12.5-32.8 0-45.3l-1.4-1.4L272 285.3 226.7 240 168 298.7l-1.4-1.4z',
    ],
  };
  var faLegal = faGavel;
  var faBinoculars = {
    prefix: 'fas',
    iconName: 'binoculars',
    icon: [
      512,
      512,
      [],
      'f1e5',
      'M128 32h32c17.7 0 32 14.3 32 32V96H96V64c0-17.7 14.3-32 32-32zm64 96V448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V388.9c0-34.6 9.4-68.6 27.2-98.3C40.9 267.8 49.7 242.4 53 216L60.5 156c2-16 15.6-28 31.8-28H192zm227.8 0c16.1 0 29.8 12 31.8 28L459 216c3.3 26.4 12.1 51.8 25.8 74.6c17.8 29.7 27.2 63.7 27.2 98.3V448c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V128h99.8zM320 64c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V96H320V64zm-32 64V288H224V128h64z',
    ],
  };
  var faMicrophoneSlash = {
    prefix: 'fas',
    iconName: 'microphone-slash',
    icon: [
      640,
      512,
      [],
      'f131',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L472.1 344.7c15.2-26 23.9-56.3 23.9-88.7V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 21.2-5.1 41.1-14.2 58.7L416 300.8V96c0-53-43-96-96-96s-96 43-96 96v54.3L38.8 5.1zM344 430.4c20.4-2.8 39.7-9.1 57.3-18.2l-43.1-33.9C346.1 382 333.3 384 320 384c-70.7 0-128-57.3-128-128v-8.7L144.7 210c-.5 1.9-.7 3.9-.7 6v40c0 89.1 66.2 162.7 152 174.4V464H248c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H344V430.4z',
    ],
  };
  var faBoxTissue = {
    prefix: 'fas',
    iconName: 'box-tissue',
    icon: [
      512,
      512,
      [],
      'e05b',
      'M92.5 0H208c40 0 52 24 64 48s24 48 64 48h85.2C436 96 448 108 448 122.8c0 3.4-.7 6.8-1.9 10L409.6 224 384 288H128l-16-64L64.9 35.4c-.6-2.3-.9-4.6-.9-6.9C64 12.8 76.8 0 92.5 0zM79 224l16 64H80c-8.8 0-16 7.2-16 16s7.2 16 16 16h48H384h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H418.5l25.6-64H464c26.5 0 48 21.5 48 48V384H0V272c0-26.5 21.5-48 48-48H79zM0 416H512v48c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V416z',
    ],
  };
  var faMotorcycle = {
    prefix: 'fas',
    iconName: 'motorcycle',
    icon: [
      640,
      512,
      [127949],
      'f21c',
      'M280 32c-13.3 0-24 10.7-24 24s10.7 24 24 24h57.7l16.4 30.3L256 192l-45.3-45.3c-12-12-28.3-18.7-45.3-18.7H64c-17.7 0-32 14.3-32 32v32h96c88.4 0 160 71.6 160 160c0 11-1.1 21.7-3.2 32h70.4c-2.1-10.3-3.2-21-3.2-32c0-52.2 25-98.6 63.7-127.8l15.4 28.6C402.4 276.3 384 312 384 352c0 70.7 57.3 128 128 128s128-57.3 128-128s-57.3-128-128-128c-13.5 0-26.5 2.1-38.7 6L418.2 128H480c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H459.6c-7.5 0-14.7 2.6-20.5 7.4L391.7 78.9l-14-26c-7-12.9-20.5-21-35.2-21H280zM462.7 311.2l28.2 52.2c6.3 11.7 20.9 16 32.5 9.7s16-20.9 9.7-32.5l-28.2-52.2c2.3-.3 4.7-.4 7.1-.4c35.3 0 64 28.7 64 64s-28.7 64-64 64s-64-28.7-64-64c0-15.5 5.5-29.7 14.7-40.8zM187.3 376c-9.5 23.5-32.5 40-59.3 40c-35.3 0-64-28.7-64-64s28.7-64 64-64c26.9 0 49.9 16.5 59.3 40h66.4C242.5 268.8 190.5 224 128 224C57.3 224 0 281.3 0 352s57.3 128 128 128c62.5 0 114.5-44.8 125.8-104H187.3zM128 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faBellConcierge = {
    prefix: 'fas',
    iconName: 'bell-concierge',
    icon: [
      512,
      512,
      [128718, 'concierge-bell'],
      'f562',
      'M216 64c-13.3 0-24 10.7-24 24s10.7 24 24 24h16v33.3C119.6 157.2 32 252.4 32 368H480c0-115.6-87.6-210.8-200-222.7V112h16c13.3 0 24-10.7 24-24s-10.7-24-24-24H256 216zM24 400c-13.3 0-24 10.7-24 24s10.7 24 24 24H488c13.3 0 24-10.7 24-24s-10.7-24-24-24H24z',
    ],
  };
  var faConciergeBell = faBellConcierge;
  var faPenRuler = {
    prefix: 'fas',
    iconName: 'pen-ruler',
    icon: [
      512,
      512,
      ['pencil-ruler'],
      'f5ae',
      'M469.3 19.3l23.4 23.4c25 25 25 65.5 0 90.5l-56.4 56.4L322.3 75.7l56.4-56.4c25-25 65.5-25 90.5 0zM44.9 353.2L299.7 98.3 413.7 212.3 158.8 467.1c-6.7 6.7-15.1 11.6-24.2 14.2l-104 29.7c-8.4 2.4-17.4 .1-23.6-6.1s-8.5-15.2-6.1-23.6l29.7-104c2.6-9.2 7.5-17.5 14.2-24.2zM249.4 103.4L103.4 249.4 16 161.9c-18.7-18.7-18.7-49.1 0-67.9L94.1 16c18.7-18.7 49.1-18.7 67.9 0l19.8 19.8c-.3 .3-.7 .6-1 .9l-64 64c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l64-64c.3-.3 .6-.7 .9-1l45.1 45.1zM408.6 262.6l45.1 45.1c-.3 .3-.7 .6-1 .9l-64 64c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l64-64c.3-.3 .6-.7 .9-1L496 350.1c18.7 18.7 18.7 49.1 0 67.9L417.9 496c-18.7 18.7-49.1 18.7-67.9 0l-87.4-87.4L408.6 262.6z',
    ],
  };
  var faPencilRuler = faPenRuler;
  var faPeopleArrows = {
    prefix: 'fas',
    iconName: 'people-arrows',
    icon: [
      640,
      512,
      ['people-arrows-left-right'],
      'e068',
      'M192 64c0 35.3-28.7 64-64 64s-64-28.7-64-64S92.7 0 128 0s64 28.7 64 64zM25.9 233.4C29.3 191.9 64 160 105.6 160h44.8c27 0 51 13.4 65.5 34.1c-2.7 1.9-5.2 4-7.5 6.3l-64 64c-21.9 21.9-21.9 57.3 0 79.2L192 391.2V464c0 26.5-21.5 48-48 48H112c-26.5 0-48-21.5-48-48V348.3c-26.5-9.5-44.7-35.8-42.2-65.6l4.1-49.3zM576 64c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM431.6 200.4c-2.3-2.3-4.9-4.4-7.5-6.3c14.5-20.7 38.6-34.1 65.5-34.1h44.8c41.6 0 76.3 31.9 79.7 73.4l4.1 49.3c2.5 29.8-15.7 56.1-42.2 65.6V464c0 26.5-21.5 48-48 48H496c-26.5 0-48-21.5-48-48V391.2l47.6-47.6c21.9-21.9 21.9-57.3 0-79.2l-64-64zM272 240v32h96V240c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l64 64c9.4 9.4 9.4 24.6 0 33.9l-64 64c-6.9 6.9-17.2 8.9-26.2 5.2s-14.8-12.5-14.8-22.2V336H272v32c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-64-64c-9.4-9.4-9.4-24.6 0-33.9l64-64c6.9-6.9 17.2-8.9 26.2-5.2s14.8 12.5 14.8 22.2z',
    ],
  };
  var faPeopleArrowsLeftRight = faPeopleArrows;
  var faMarsAndVenusBurst = {
    prefix: 'fas',
    iconName: 'mars-and-venus-burst',
    icon: [
      640,
      512,
      [],
      'e523',
      'M504 0c-9.7 0-18.5 5.8-22.2 14.8s-1.7 19.3 5.2 26.2l39 39-22.2 22.2C475.9 78.4 439.6 64 400 64c-88.4 0-160 71.6-160 160c0 80.2 59.1 146.7 136.1 158.2c0 .6-.1 1.2-.1 1.8v.4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .3 .4 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3H352c-13.3 0-24 10.7-24 24s10.7 24 24 24h24v.2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0l24 0H376c0 13.3 10.7 24 24 24s24-10.7 24-24H400l24 0v0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V486 486v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V485 485v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V484v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V483v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V481v-.1-.1-.1-.1-.1-.1-.1-.1V480v-.1-.1-.1-.1-.1-.1-.1V479v-.1-.1-.1-.1-.1-.1-.1V478v-.1-.1-.1-.1-.1-.1V477v-.1-.1-.1-.1-.1-.1V476v-.1-.1-.1-.1-.1-.1V475v-.1-.2-.2-.2-.2-.2V474v-.2-.2-.2-.2-.2V473v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V470v-.2-.2-.2-.2-.2V469v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V467v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V463v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V459v-.2-.2-.2-.2-.2-.2-.2-.2V457v-.2-.2-.2-.2V456h24c13.3 0 24-10.7 24-24s-10.7-24-24-24H424v-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3V403v-.3-.3V402v-.3-.3V401v-.3-.3V400v-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.4-.3-.4-.4-.4-.4V393v-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4V388v-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4V384c0-.6 0-1.2-.1-1.8c77-11.6 136.1-78 136.1-158.2c0-31.4-9-60.7-24.7-85.4L560 113.9l39 39c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V24c0-13.3-10.7-24-24-24H504zM400 320c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96zM190.9 18.1C188.4 12 182.6 8 176 8s-12.4 4-14.9 10.1l-29.4 74L55.6 68.9c-6.3-1.9-13.1 .2-17.2 5.3s-4.6 12.2-1.4 17.9l39.5 69.1L10.9 206.4c-5.4 3.7-8 10.3-6.5 16.7s6.7 11.2 13.1 12.2l78.7 12.2L90.6 327c-.5 6.5 3.1 12.7 9 15.5s12.9 1.8 17.8-2.6L176 286.1l58.6 53.9c4.1 3.8 9.9 5.1 15.2 3.6C223.6 310.8 208 269.2 208 224c0-60.8 28.3-115 72.4-150.2L220.3 92.1l-29.4-74z',
    ],
  };
  var faSquareCaretRight = {
    prefix: 'fas',
    iconName: 'square-caret-right',
    icon: [
      448,
      512,
      ['caret-square-right'],
      'f152',
      'M448 96c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320zM320 256c0 6.7-2.8 13-7.7 17.6l-112 104c-7 6.5-17.2 8.2-25.9 4.4s-14.4-12.5-14.4-22l0-208c0-9.5 5.7-18.2 14.4-22s18.9-2.1 25.9 4.4l112 104c4.9 4.5 7.7 10.9 7.7 17.6z',
    ],
  };
  var faCaretSquareRight = faSquareCaretRight;
  var faScissors = {
    prefix: 'fas',
    iconName: 'scissors',
    icon: [
      512,
      512,
      [9984, 9986, 9988, 'cut'],
      'f0c4',
      'M256 192l-39.5-39.5c4.9-12.6 7.5-26.2 7.5-40.5C224 50.1 173.9 0 112 0S0 50.1 0 112s50.1 112 112 112c14.3 0 27.9-2.7 40.5-7.5L192 256l-39.5 39.5c-12.6-4.9-26.2-7.5-40.5-7.5C50.1 288 0 338.1 0 400s50.1 112 112 112s112-50.1 112-112c0-14.3-2.7-27.9-7.5-40.5L499.2 76.8c7.1-7.1 7.1-18.5 0-25.6c-28.3-28.3-74.1-28.3-102.4 0L256 192zm22.6 150.6L396.8 460.8c28.3 28.3 74.1 28.3 102.4 0c7.1-7.1 7.1-18.5 0-25.6L342.6 278.6l-64 64zM160 112c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM112 448c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faCut = faScissors;
  var faSunPlantWilt = {
    prefix: 'fas',
    iconName: 'sun-plant-wilt',
    icon: [
      640,
      512,
      [],
      'e57a',
      'M160 0c-6.3 0-12 3.7-14.6 9.5L120.6 64.9 63.9 43.2c-5.9-2.3-12.6-.8-17 3.6s-5.9 11.1-3.6 17l21.7 56.7L9.5 145.4C3.7 148 0 153.7 0 160s3.7 12 9.5 14.6l55.4 24.8L43.2 256.1c-2.3 5.9-.8 12.6 3.6 17s11.1 5.9 17 3.6l56.7-21.7 24.8 55.4c2.6 5.8 8.3 9.5 14.6 9.5s12-3.7 14.6-9.5l24.8-55.4 56.7 21.7c5.9 2.3 12.6 .8 17-3.6s5.9-11.1 3.6-17l-21.7-56.7 55.4-24.8c5.8-2.6 9.5-8.3 9.5-14.6s-3.7-12-9.5-14.6l-55.4-24.8 21.7-56.7c2.3-5.9 .8-12.6-3.6-17s-11.1-5.9-17-3.6L199.4 64.9 174.6 9.5C172 3.7 166.3 0 160 0zm0 224c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm32-64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm312 16c0-17.7 14.3-32 32-32s32 14.3 32 32v53.4c-14.8 7.7-24 23.1-24 44.6c0 16.8 16 44 37.4 67.2c5.8 6.2 15.5 6.2 21.2 0C624 318 640 290.7 640 274c0-21.5-9.2-37-24-44.6V176c0-44.2-35.8-80-80-80s-80 35.8-80 80v22.7c-9.8-4.3-20.6-6.7-32-6.7c-44.2 0-80 35.8-80 80v21.4c-14.8 7.7-24 23.1-24 44.6c0 16.8 16 44 37.4 67.2c5.8 6.2 15.5 6.2 21.2 0C400 382 416 354.7 416 338c0-21.5-9.2-37-24-44.6V272c0-17.7 14.3-32 32-32s32 14.3 32 32v8V448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H504V280v-8V176z',
    ],
  };
  var faToiletsPortable = {
    prefix: 'fas',
    iconName: 'toilets-portable',
    icon: [
      576,
      512,
      [],
      'e584',
      'M32 0H224c17.7 0 32 14.3 32 32V64H0V32C0 14.3 14.3 0 32 0zM0 96H24 232h24v24V488c0 13.3-10.7 24-24 24s-24-10.7-24-24v-8H48v8c0 13.3-10.7 24-24 24s-24-10.7-24-24V120 96zM192 224c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16s16-7.2 16-16V240c0-8.8-7.2-16-16-16zM352 0H544c17.7 0 32 14.3 32 32V64H320V32c0-17.7 14.3-32 32-32zM320 96h24H552h24v24V488c0 13.3-10.7 24-24 24s-24-10.7-24-24v-8H368v8c0 13.3-10.7 24-24 24s-24-10.7-24-24V120 96zM512 224c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16s16-7.2 16-16V240c0-8.8-7.2-16-16-16z',
    ],
  };
  var faHockeyPuck = {
    prefix: 'fas',
    iconName: 'hockey-puck',
    icon: [
      512,
      512,
      [],
      'f453',
      'M256 256C114.6 256 0 213 0 160s114.6-96 256-96s256 43 256 96s-114.6 96-256 96zm192.3 1.8c24.7-9.3 46.9-21 63.7-35.6V352c0 53-114.6 96-256 96S0 405 0 352V222.3c16.8 14.6 39 26.3 63.7 35.6C114.5 276.9 182.5 288 256 288s141.5-11.1 192.3-30.2z',
    ],
  };
  var faTable = {
    prefix: 'fas',
    iconName: 'table',
    icon: [
      512,
      512,
      [],
      'f0ce',
      'M64 256V160H224v96H64zm0 64H224v96H64V320zm224 96V320H448v96H288zM448 256H288V160H448v96zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z',
    ],
  };
  var faMagnifyingGlassArrowRight = {
    prefix: 'fas',
    iconName: 'magnifying-glass-arrow-right',
    icon: [
      512,
      512,
      [],
      'e521',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM241 119c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l31 31H120c-13.3 0-24 10.7-24 24s10.7 24 24 24H238.1l-31 31c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l72-72c9.4-9.4 9.4-24.6 0-33.9l-72-72z',
    ],
  };
  var faTachographDigital = {
    prefix: 'fas',
    iconName: 'tachograph-digital',
    icon: [
      640,
      512,
      ['digital-tachograph'],
      'f566',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm32 64H320c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32zM64 368c0-8.8 7.2-16 16-16H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16zm320 0c0-8.8 7.2-16 16-16H560c8.8 0 16 7.2 16 16s-7.2 16-16 16H400c-8.8 0-16-7.2-16-16zM80 320c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm80-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm48 16c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm80-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm48 16c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faDigitalTachograph = faTachographDigital;
  var faUsersSlash = {
    prefix: 'fas',
    iconName: 'users-slash',
    icon: [
      640,
      512,
      [],
      'e073',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L440.6 320H618.7c11.8 0 21.3-9.6 21.3-21.3C640 239.8 592.2 192 533.3 192H490.7c-15.9 0-31 3.5-44.6 9.7c1.3 7.2 1.9 14.7 1.9 22.3c0 30.2-10.5 58-28 79.9l-25.2-19.7C408.1 267.7 416 246.8 416 224c0-53-43-96-96-96c-31.1 0-58.7 14.8-76.3 37.7l-40.6-31.8c13-14.2 20.9-33.1 20.9-53.9c0-44.2-35.8-80-80-80C116.3 0 91.9 14.1 77.5 35.5L38.8 5.1zM106.7 192C47.8 192 0 239.8 0 298.7C0 310.4 9.6 320 21.3 320H234.7c.2 0 .4 0 .7 0c-20.6-18.2-35.2-42.8-40.8-70.8L121.8 192H106.7zM261.3 352C187.7 352 128 411.7 128 485.3c0 14.7 11.9 26.7 26.7 26.7H485.3c10.5 0 19.5-6 23.9-14.8L324.9 352H261.3zM512 160c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80z',
    ],
  };
  var faClover = {
    prefix: 'fas',
    iconName: 'clover',
    icon: [
      448,
      512,
      [],
      'e139',
      'M173.3 32C139.4 32 112 59.4 112 93.3v4.9c0 12 3.3 23.7 9.4 34l18.8 31.3c1.1 1.8 1.2 3.1 1 4.2c-.2 1.2-.8 2.5-2 3.6s-2.4 1.8-3.6 2c-1 .2-2.4 .1-4.2-1l-31.3-18.8c-10.3-6.2-22-9.4-34-9.4H61.3C27.4 144 0 171.4 0 205.3c0 16.2 6.5 31.8 17.9 43.3l1.2 1.2c3.4 3.4 3.4 9 0 12.4l-1.2 1.2C6.5 274.9 0 290.5 0 306.7C0 340.6 27.4 368 61.3 368h4.9c12 0 23.7-3.3 34-9.4l31.3-18.8c1.8-1.1 3.1-1.2 4.2-1c1.2 .2 2.5 .8 3.6 2s1.8 2.4 2 3.6c.2 1 .1 2.4-1 4.2l-18.8 31.3c-6.2 10.3-9.4 22-9.4 34v4.9c0 33.8 27.4 61.3 61.3 61.3c16.2 0 31.8-6.5 43.3-17.9l1.2-1.2c3.4-3.4 9-3.4 12.4 0l1.2 1.2c11.5 11.5 27.1 17.9 43.3 17.9c33.8 0 61.3-27.4 61.3-61.3v-4.9c0-12-3.3-23.7-9.4-34l-18.8-31.3c-1.1-1.8-1.2-3.1-1-4.2c.2-1.2 .8-2.5 2-3.6s2.4-1.8 3.6-2c1-.2 2.4-.1 4.2 1l31.3 18.8c10.3 6.2 22 9.4 34 9.4h4.9c33.8 0 61.3-27.4 61.3-61.3c0-16.2-6.5-31.8-17.9-43.3l-1.2-1.2c-3.4-3.4-3.4-9 0-12.4l1.2-1.2c11.5-11.5 17.9-27.1 17.9-43.3c0-33.8-27.4-61.3-61.3-61.3h-4.9c-12 0-23.7 3.3-34 9.4l-31.3 18.8c-1.8 1.1-3.1 1.2-4.2 1c-1.2-.2-2.5-.8-3.6-2s-1.8-2.4-2-3.6c-.2-1-.1-2.4 1-4.2l18.8-31.3c6.2-10.3 9.4-22 9.4-34V93.3C336 59.4 308.6 32 274.7 32c-16.2 0-31.8 6.5-43.3 17.9l-1.2 1.2c-3.4 3.4-9 3.4-12.4 0l-1.2-1.2C205.1 38.5 189.5 32 173.3 32z',
    ],
  };
  var faReply = {
    prefix: 'fas',
    iconName: 'reply',
    icon: [
      512,
      512,
      [61714, 'mail-reply'],
      'f3e5',
      'M205 34.8c11.5 5.1 19 16.6 19 29.2v64H336c97.2 0 176 78.8 176 176c0 113.3-81.5 163.9-100.2 174.1c-2.5 1.4-5.3 1.9-8.1 1.9c-10.9 0-19.7-8.9-19.7-19.7c0-7.5 4.3-14.4 9.8-19.5c9.4-8.8 22.2-26.4 22.2-56.7c0-53-43-96-96-96H224v64c0 12.6-7.4 24.1-19 29.2s-25 3-34.4-5.4l-160-144C3.9 225.7 0 217.1 0 208s3.9-17.7 10.6-23.8l160-144c9.4-8.5 22.9-10.6 34.4-5.4z',
    ],
  };
  var faMailReply = faReply;
  var faStarAndCrescent = {
    prefix: 'fas',
    iconName: 'star-and-crescent',
    icon: [
      576,
      512,
      [9770],
      'f699',
      'M32 256C32 114.6 146.6 0 288 0c33 0 64.6 6.3 93.6 17.7c7.4 2.9 11.5 10.7 9.8 18.4s-8.8 13-16.7 12.4c-4.8-.3-9.7-.5-14.6-.5c-114.9 0-208 93.1-208 208s93.1 208 208 208c4.9 0 9.8-.2 14.6-.5c7.9-.5 15 4.7 16.7 12.4s-2.4 15.5-9.8 18.4C352.6 505.7 321 512 288 512C146.6 512 32 397.4 32 256zM407.4 137.4c3.5-7.1 13.7-7.1 17.2 0l31.5 63.8c1.4 2.8 4.1 4.8 7.2 5.3l70.4 10.2c7.9 1.1 11 10.8 5.3 16.4l-50.9 49.6c-2.3 2.2-3.3 5.4-2.8 8.5l12 70.1c1.3 7.8-6.9 13.8-13.9 10.1l-63-33.1c-2.8-1.5-6.1-1.5-8.9 0l-63 33.1c-7 3.7-15.3-2.3-13.9-10.1l12-70.1c.5-3.1-.5-6.3-2.8-8.5L293 233.1c-5.7-5.6-2.6-15.2 5.3-16.4l70.4-10.2c3.1-.5 5.8-2.4 7.2-5.3l31.5-63.8z',
    ],
  };
  var faHouseFire = {
    prefix: 'fas',
    iconName: 'house-fire',
    icon: [
      640,
      512,
      [],
      'e50c',
      'M288 350.1l0 1.9H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L447.3 128.1c-12.3-1-25 3-34.8 11.7c-35.4 31.6-65.6 67.7-87.3 102.8C304.3 276.5 288 314.9 288 350.1zM453.5 163.8c19.7 17.8 38.2 37 55.5 57.7c7.9-9.9 16.8-20.7 26.5-29.5c5.6-5.1 14.4-5.1 20 0c24.7 22.7 45.6 52.7 60.4 81.1c14.5 28 24.2 56.7 24.2 76.9C640 437.9 568.7 512 480 512c-89.7 0-160-74.2-160-161.9c0-26.4 12.7-58.6 32.4-90.6c20-32.4 48.1-66.1 81.4-95.8c5.6-5 14.2-5 19.8 0zM530 433c30-21 38-63 20-96c-2-4-4-8-7-12l-36 42s-58-74-62-79c-30 37-45 58-45 82c0 49 36 78 81 78c18 0 34-5 49-15z',
    ],
  };
  var faSquareMinus = {
    prefix: 'fas',
    iconName: 'square-minus',
    icon: [
      448,
      512,
      [61767, 'minus-square'],
      'f146',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm88 200H296c13.3 0 24 10.7 24 24s-10.7 24-24 24H152c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faMinusSquare = faSquareMinus;
  var faHelicopter = {
    prefix: 'fas',
    iconName: 'helicopter',
    icon: [
      640,
      512,
      [128641],
      'f533',
      'M128 32c0-17.7 14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H384v64h32c88.4 0 160 71.6 160 160v64c0 17.7-14.3 32-32 32H384 304c-10.1 0-19.6-4.7-25.6-12.8L192 256 47.2 198.1c-9.5-3.8-16.7-12-19.2-22L5 83.9C2.4 73.8 10.1 64 20.5 64H48c10.1 0 19.6 4.7 25.6 12.8L112 128H320V64H160c-17.7 0-32-14.3-32-32zM384 320H512V288c0-53-43-96-96-96H384V320zM630.6 425.4c12.5 12.5 12.5 32.8 0 45.3l-3.9 3.9c-24 24-56.6 37.5-90.5 37.5H256c-17.7 0-32-14.3-32-32s14.3-32 32-32H536.2c17 0 33.3-6.7 45.3-18.7l3.9-3.9c12.5-12.5 32.8-12.5 45.3 0z',
    ],
  };
  var faCompass = {
    prefix: 'fas',
    iconName: 'compass',
    icon: [
      512,
      512,
      [129517],
      'f14e',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm50.7-186.9L162.4 380.6c-19.4 7.5-38.5-11.6-31-31l55.5-144.3c3.3-8.5 9.9-15.1 18.4-18.4l144.3-55.5c19.4-7.5 38.5 11.6 31 31L325.1 306.7c-3.2 8.5-9.9 15.1-18.4 18.4zM288 256c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faSquareCaretDown = {
    prefix: 'fas',
    iconName: 'square-caret-down',
    icon: [
      448,
      512,
      ['caret-square-down'],
      'f150',
      'M384 480c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0zM224 352c-6.7 0-13-2.8-17.6-7.7l-104-112c-6.5-7-8.2-17.2-4.4-25.9s12.5-14.4 22-14.4l208 0c9.5 0 18.2 5.7 22 14.4s2.1 18.9-4.4 25.9l-104 112c-4.5 4.9-10.9 7.7-17.6 7.7z',
    ],
  };
  var faCaretSquareDown = faSquareCaretDown;
  var faFileCircleQuestion = {
    prefix: 'fas',
    iconName: 'file-circle-question',
    icon: [
      576,
      512,
      [],
      'e4ef',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm48 384c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zM368 321.6V328c0 8.8 7.2 16 16 16s16-7.2 16-16v-6.4c0-5.3 4.3-9.6 9.6-9.6h40.5c7.7 0 13.9 6.2 13.9 13.9c0 5.2-2.9 9.9-7.4 12.3l-32 16.8c-5.3 2.8-8.6 8.2-8.6 14.2V384c0 8.8 7.2 16 16 16s16-7.2 16-16v-5.1l23.5-12.3c15.1-7.9 24.5-23.6 24.5-40.6c0-25.4-20.6-45.9-45.9-45.9H409.6c-23 0-41.6 18.6-41.6 41.6z',
    ],
  };
  var faLaptopCode = {
    prefix: 'fas',
    iconName: 'laptop-code',
    icon: [
      640,
      512,
      [],
      'f5fc',
      'M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z',
    ],
  };
  var faSwatchbook = {
    prefix: 'fas',
    iconName: 'swatchbook',
    icon: [
      512,
      512,
      [],
      'f5c3',
      'M0 32C0 14.3 14.3 0 32 0H160c17.7 0 32 14.3 32 32V416c0 53-43 96-96 96s-96-43-96-96V32zM223.6 425.9c.3-3.3 .4-6.6 .4-9.9V154l75.4-75.4c12.5-12.5 32.8-12.5 45.3 0l90.5 90.5c12.5 12.5 12.5 32.8 0 45.3L223.6 425.9zM182.8 512l192-192H480c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H182.8zM128 64H64v64h64V64zM64 192v64h64V192H64zM96 440c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faPrescriptionBottle = {
    prefix: 'fas',
    iconName: 'prescription-bottle',
    icon: [
      384,
      512,
      [],
      'f485',
      'M0 32C0 14.3 14.3 0 32 0H352c17.7 0 32 14.3 32 32V64c0 17.7-14.3 32-32 32H32C14.3 96 0 81.7 0 64V32zm32 96H352V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V416H144c8.8 0 16-7.2 16-16s-7.2-16-16-16H32V320H144c8.8 0 16-7.2 16-16s-7.2-16-16-16H32V224H144c8.8 0 16-7.2 16-16s-7.2-16-16-16H32V128z',
    ],
  };
  var faBars = {
    prefix: 'fas',
    iconName: 'bars',
    icon: [
      448,
      512,
      ['navicon'],
      'f0c9',
      'M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z',
    ],
  };
  var faNavicon = faBars;
  var faPeopleGroup = {
    prefix: 'fas',
    iconName: 'people-group',
    icon: [
      640,
      512,
      [],
      'e533',
      'M184 88c0 30.9-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3V245.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5V416c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V389.2C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112h32c24 0 46.2 7.5 64.4 20.3zM448 416V394.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176h32c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2V416c0 17.7-14.3 32-32 32H480c-17.7 0-32-14.3-32-32zM568 88c0 30.9-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56zm8 157.7v84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 160c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM240 304c0 16.2 6 31 16 42.3V261.7c-10 11.3-16 26.1-16 42.3zm144-42.3v84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2V448c0 17.7-14.3 32-32 32H288c-17.7 0-32-14.3-32-32V405.2c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112h32c61.9 0 112 50.1 112 112z',
    ],
  };
  var faHourglassEnd = {
    prefix: 'fas',
    iconName: 'hourglass-end',
    icon: [
      384,
      512,
      [8987, 'hourglass-3'],
      'f253',
      'M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM96 75V64H288V75c0 25.5-10.1 49.9-28.1 67.9L192 210.7l-67.9-67.9C106.1 124.9 96 100.4 96 75z',
    ],
  };
  var faHourglass3 = faHourglassEnd;
  var faHeartCrack = {
    prefix: 'fas',
    iconName: 'heart-crack',
    icon: [
      512,
      512,
      [128148, 'heart-broken'],
      'f7a9',
      'M119.4 44.1c23.3-3.9 46.8-1.9 68.6 5.3l49.8 77.5-75.4 75.4c-1.5 1.5-2.4 3.6-2.3 5.8s1 4.2 2.6 5.7l112 104c2.9 2.7 7.4 2.9 10.5 .3s3.8-7 1.7-10.4l-60.4-98.1 90.7-75.6c2.6-2.1 3.5-5.7 2.4-8.8L296.8 61.8c28.5-16.7 62.4-23.2 95.7-17.6C461.5 55.6 512 115.2 512 185.1v5.8c0 41.5-17.2 81.2-47.6 109.5L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9L47.6 300.4C17.2 272.1 0 232.4 0 190.9v-5.8c0-69.9 50.5-129.5 119.4-141z',
    ],
  };
  var faHeartBroken = faHeartCrack;
  var faSquareUpRight = {
    prefix: 'fas',
    iconName: 'square-up-right',
    icon: [
      448,
      512,
      [8599, 'external-link-square-alt'],
      'f360',
      'M384 32c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H384zM160 160c-6.5 0-12.3 3.9-14.8 9.9s-1.1 12.9 3.5 17.4l40 40-71 71C114 302 112 306.9 112 312s2 10 5.7 13.7l36.7 36.7c3.6 3.6 8.5 5.7 13.7 5.7s10-2 13.7-5.7l71-71 40 40c4.6 4.6 11.5 5.9 17.4 3.5s9.9-8.3 9.9-14.8V176c0-8.8-7.2-16-16-16H160z',
    ],
  };
  var faExternalLinkSquareAlt = faSquareUpRight;
  var faFaceKissBeam = {
    prefix: 'fas',
    iconName: 'face-kiss-beam',
    icon: [
      512,
      512,
      [128537, 'kiss-beam'],
      'f597',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm48.7-198.3c4.3 5.1 7.3 11.4 7.3 18.3s-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4c-2.7 1.5-5.7 3-8.7 4.3c3.1 1.3 6 2.7 8.7 4.3c6.6 3.7 12.5 8.2 16.7 13.4c4.3 5.1 7.3 11.4 7.3 18.3s-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4C274.7 443.1 257.4 448 240 448c-3.6 0-6.8-2.5-7.7-6s.6-7.2 3.8-9l0 0 0 0 0 0 0 0 .2-.1c.2-.1 .5-.3 .9-.5c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1c-.4-.2-.7-.4-.9-.5l-.2-.1 0 0 0 0 0 0c-2.5-1.4-4.1-4.1-4.1-7s1.6-5.6 4.1-7l0 0 0 0 0 0 0 0 0 0 .2-.1 .3-.2 .6-.4c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1l-.4-.3-.5-.3-.2-.1 0 0 0 0 0 0c-3.2-1.8-4.7-5.5-3.8-9s4.1-6 7.7-6c17.4 0 34.7 4.9 47.9 12.3c6.6 3.7 12.5 8.2 16.7 13.4zm-87.1-84.9l0 0 0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0zm160 0l0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0 0 0z',
    ],
  };
  var faKissBeam = faFaceKissBeam;
  var faFilm = {
    prefix: 'fas',
    iconName: 'film',
    icon: [
      512,
      512,
      [127902],
      'f008',
      'M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM48 368v32c0 8.8 7.2 16 16 16H96c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H64c-8.8 0-16 7.2-16 16zm368-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H416zM48 240v32c0 8.8 7.2 16 16 16H96c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H64c-8.8 0-16 7.2-16 16zm368-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H416zM48 112v32c0 8.8 7.2 16 16 16H96c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H64c-8.8 0-16 7.2-16 16zM416 96c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H416zM160 128v64c0 17.7 14.3 32 32 32H320c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H192c-17.7 0-32 14.3-32 32zm32 160c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H320c17.7 0 32-14.3 32-32V320c0-17.7-14.3-32-32-32H192z',
    ],
  };
  var faRulerHorizontal = {
    prefix: 'fas',
    iconName: 'ruler-horizontal',
    icon: [
      640,
      512,
      [],
      'f547',
      'M0 336c0 26.5 21.5 48 48 48l544 0c26.5 0 48-21.5 48-48l0-160c0-26.5-21.5-48-48-48l-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0c-26.5 0-48 21.5-48 48L0 336z',
    ],
  };
  var faPeopleRobbery = {
    prefix: 'fas',
    iconName: 'people-robbery',
    icon: [
      576,
      512,
      [],
      'e536',
      'M488.2 59.1C478.1 99.6 441.7 128 400 128s-78.1-28.4-88.2-68.9L303 24.2C298.8 7.1 281.4-3.3 264.2 1S236.7 22.6 241 39.8l8.7 34.9c11 44 40.2 79.6 78.3 99.6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V174.3c38.1-20 67.3-55.6 78.3-99.6L559 39.8c4.3-17.1-6.1-34.5-23.3-38.8S501.2 7.1 497 24.2l-8.7 34.9zM400 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM80 96c26.5 0 48-21.5 48-48s-21.5-48-48-48S32 21.5 32 48s21.5 48 48 48zm-8 32c-35.3 0-64 28.7-64 64v96l0 .6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V352H88V480c0 17.7 14.3 32 32 32s32-14.3 32-32V252.7l13 20.5c5.9 9.2 16.1 14.9 27 14.9h48c17.7 0 32-14.3 32-32s-14.3-32-32-32H209.6l-37.4-58.9C157.6 142 132.1 128 104.7 128H72z',
    ],
  };
  var faLightbulb = {
    prefix: 'fas',
    iconName: 'lightbulb',
    icon: [
      384,
      512,
      [128161],
      'f0eb',
      'M272 384c9.6-31.9 29.5-59.1 49.2-86.2l0 0c5.2-7.1 10.4-14.2 15.4-21.4c19.8-28.5 31.4-63 31.4-100.3C368 78.8 289.2 0 192 0S16 78.8 16 176c0 37.3 11.6 71.9 31.4 100.3c5 7.2 10.2 14.3 15.4 21.4l0 0c19.8 27.1 39.7 54.4 49.2 86.2H272zM192 512c44.2 0 80-35.8 80-80V416H112v16c0 44.2 35.8 80 80 80zM112 176c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-61.9 50.1-112 112-112c8.8 0 16 7.2 16 16s-7.2 16-16 16c-44.2 0-80 35.8-80 80z',
    ],
  };
  var faCaretLeft = {
    prefix: 'fas',
    iconName: 'caret-left',
    icon: [
      256,
      512,
      [],
      'f0d9',
      'M9.4 278.6c-12.5-12.5-12.5-32.8 0-45.3l128-128c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6l0 256c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-128-128z',
    ],
  };
  var faCircleExclamation = {
    prefix: 'fas',
    iconName: 'circle-exclamation',
    icon: [
      512,
      512,
      ['exclamation-circle'],
      'f06a',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm0-384c13.3 0 24 10.7 24 24V264c0 13.3-10.7 24-24 24s-24-10.7-24-24V152c0-13.3 10.7-24 24-24zm32 224c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faExclamationCircle = faCircleExclamation;
  var faSchoolCircleXmark = {
    prefix: 'fas',
    iconName: 'school-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e56d',
      'M337.8 5.4C327-1.8 313-1.8 302.2 5.4l-139 92.7L37.6 126C15.6 130.9 0 150.3 0 172.8V464c0 26.5 21.5 48 48 48H320v0H256V416c0-35.3 28.7-64 64-64l.3 0h.5c3.4-37.7 18.7-72.1 42.2-99.1C350.2 260 335.6 264 320 264c-48.6 0-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88c0 18.3-5.6 35.3-15.1 49.4c29-21 64.6-33.4 103.1-33.4c59.5 0 112.1 29.6 144 74.8V172.8c0-22.5-15.6-42-37.6-46.9L476.8 98.1 337.8 5.4zM96 192h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V208c0-8.8 7.2-16 16-16zm0 128h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16zM320 128c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H336V144c0-8.8-7.2-16-16-16zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm22.6-144l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L518.6 368z',
    ],
  };
  var faArrowRightFromBracket = {
    prefix: 'fas',
    iconName: 'arrow-right-from-bracket',
    icon: [
      576,
      512,
      ['sign-out'],
      'f08b',
      'M534.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L434.7 224 224 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l210.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128zM192 96c17.7 0 32-14.3 32-32s-14.3-32-32-32l-64 0c-53 0-96 43-96 96l0 256c0 53 43 96 96 96l64 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-64 0c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l64 0z',
    ],
  };
  var faSignOut = faArrowRightFromBracket;
  var faCircleChevronDown = {
    prefix: 'fas',
    iconName: 'circle-chevron-down',
    icon: [
      512,
      512,
      ['chevron-circle-down'],
      'f13a',
      'M256 0C114.6 0 0 114.6 0 256S114.6 512 256 512s256-114.6 256-256S397.4 0 256 0zM135 241c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l87 87 87-87c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L273 345c-9.4 9.4-24.6 9.4-33.9 0L135 241z',
    ],
  };
  var faChevronCircleDown = faCircleChevronDown;
  var faUnlockKeyhole = {
    prefix: 'fas',
    iconName: 'unlock-keyhole',
    icon: [
      448,
      512,
      ['unlock-alt'],
      'f13e',
      'M224 64c-44.2 0-80 35.8-80 80v48H384c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80V144C80 64.5 144.5 0 224 0c57.5 0 107 33.7 130.1 82.3c7.6 16 .8 35.1-15.2 42.6s-35.1 .8-42.6-15.2C283.4 82.6 255.9 64 224 64zm32 320c17.7 0 32-14.3 32-32s-14.3-32-32-32H192c-17.7 0-32 14.3-32 32s14.3 32 32 32h64z',
    ],
  };
  var faUnlockAlt = faUnlockKeyhole;
  var faCloudShowersHeavy = {
    prefix: 'fas',
    iconName: 'cloud-showers-heavy',
    icon: [
      576,
      512,
      [],
      'f740',
      'M128 320c-53 0-96-43-96-96c0-42.5 27.6-78.6 65.9-91.2C96.7 126.1 96 119.1 96 112C96 50.1 146.1 0 208 0c43.1 0 80.5 24.3 99.2 60c14.7-17.1 36.5-28 60.8-28c44.2 0 80 35.8 80 80c0 5.5-.6 10.8-1.6 16c.5 0 1.1 0 1.6 0c53 0 96 43 96 96s-43 96-96 96H128zm-14.5 33.9c12.2 5.2 17.8 19.3 12.6 31.5l-48 112c-5.2 12.2-19.3 17.8-31.5 12.6s-17.8-19.3-12.6-31.5l48-112c5.2-12.2 19.3-17.8 31.5-12.6zm120 0c12.2 5.2 17.8 19.3 12.6 31.5l-48 112c-5.2 12.2-19.3 17.8-31.5 12.6s-17.8-19.3-12.6-31.5l48-112c5.2-12.2 19.3-17.8 31.5-12.6zm244.6 31.5l-48 112c-5.2 12.2-19.3 17.8-31.5 12.6s-17.8-19.3-12.6-31.5l48-112c5.2-12.2 19.3-17.8 31.5-12.6s17.8 19.3 12.6 31.5zM345.5 353.9c12.2 5.2 17.8 19.3 12.6 31.5l-48 112c-5.2 12.2-19.3 17.8-31.5 12.6s-17.8-19.3-12.6-31.5l48-112c5.2-12.2 19.3-17.8 31.5-12.6z',
    ],
  };
  var faHeadphonesSimple = {
    prefix: 'fas',
    iconName: 'headphones-simple',
    icon: [
      512,
      512,
      ['headphones-alt'],
      'f58f',
      'M256 80C141.1 80 48 173.1 48 288V392c0 13.3-10.7 24-24 24s-24-10.7-24-24V288C0 146.6 114.6 32 256 32s256 114.6 256 256V392c0 13.3-10.7 24-24 24s-24-10.7-24-24V288c0-114.9-93.1-208-208-208zM80 352c0-35.3 28.7-64 64-64h16c17.7 0 32 14.3 32 32V448c0 17.7-14.3 32-32 32H144c-35.3 0-64-28.7-64-64V352zm288-64c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64H352c-17.7 0-32-14.3-32-32V320c0-17.7 14.3-32 32-32h16z',
    ],
  };
  var faHeadphonesAlt = faHeadphonesSimple;
  var faSitemap = {
    prefix: 'fas',
    iconName: 'sitemap',
    icon: [
      576,
      512,
      [],
      'f0e8',
      'M208 80c0-26.5 21.5-48 48-48h64c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48h-8v40H464c30.9 0 56 25.1 56 56v32h8c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48H464c-26.5 0-48-21.5-48-48V368c0-26.5 21.5-48 48-48h8V288c0-4.4-3.6-8-8-8H312v40h8c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48H256c-26.5 0-48-21.5-48-48V368c0-26.5 21.5-48 48-48h8V280H112c-4.4 0-8 3.6-8 8v32h8c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V368c0-26.5 21.5-48 48-48h8V288c0-30.9 25.1-56 56-56H264V192h-8c-26.5 0-48-21.5-48-48V80z',
    ],
  };
  var faCircleDollarToSlot = {
    prefix: 'fas',
    iconName: 'circle-dollar-to-slot',
    icon: [
      512,
      512,
      ['donate'],
      'f4b9',
      'M326.7 403.7c-22.1 8-45.9 12.3-70.7 12.3s-48.7-4.4-70.7-12.3c-.3-.1-.5-.2-.8-.3c-30-11-56.8-28.7-78.6-51.4C70 314.6 48 263.9 48 208C48 93.1 141.1 0 256 0S464 93.1 464 208c0 55.9-22 106.6-57.9 144c-1 1-2 2.1-3 3.1c-21.4 21.4-47.4 38.1-76.3 48.6zM256 91.9c-11.1 0-20.1 9-20.1 20.1v6c-5.6 1.2-10.9 2.9-15.9 5.1c-15 6.8-27.9 19.4-31.1 37.7c-1.8 10.2-.8 20 3.4 29c4.2 8.8 10.7 15 17.3 19.5c11.6 7.9 26.9 12.5 38.6 16l2.2 .7c13.9 4.2 23.4 7.4 29.3 11.7c2.5 1.8 3.4 3.2 3.8 4c.3 .8 .9 2.6 .2 6.7c-.6 3.5-2.5 6.4-8 8.8c-6.1 2.6-16 3.9-28.8 1.9c-6-1-16.7-4.6-26.2-7.9l0 0 0 0 0 0c-2.2-.7-4.3-1.5-6.4-2.1c-10.5-3.5-21.8 2.2-25.3 12.7s2.2 21.8 12.7 25.3c1.2 .4 2.7 .9 4.4 1.5c7.9 2.7 20.3 6.9 29.8 9.1V304c0 11.1 9 20.1 20.1 20.1s20.1-9 20.1-20.1v-5.5c5.4-1 10.5-2.5 15.4-4.6c15.7-6.7 28.4-19.7 31.6-38.7c1.8-10.4 1-20.3-3-29.4c-3.9-9-10.2-15.6-16.9-20.5c-12.2-8.8-28.3-13.7-40.4-17.4l-.8-.2c-14.2-4.3-23.8-7.3-29.9-11.4c-2.6-1.8-3.4-3-3.6-3.5c-.2-.3-.7-1.6-.1-5c.3-1.9 1.9-5.2 8.2-8.1c6.4-2.9 16.4-4.5 28.6-2.6c4.3 .7 17.9 3.3 21.7 4.3c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-4.4-1.2-14.4-3.2-21-4.4V112c0-11.1-9-20.1-20.1-20.1zM48 352H64c19.5 25.9 44 47.7 72.2 64H64v32H256 448V416H375.8c28.2-16.3 52.8-38.1 72.2-64h16c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V400c0-26.5 21.5-48 48-48z',
    ],
  };
  var faDonate = faCircleDollarToSlot;
  var faMemory = {
    prefix: 'fas',
    iconName: 'memory',
    icon: [
      576,
      512,
      [],
      'f538',
      'M64 64C28.7 64 0 92.7 0 128v7.4c0 6.8 4.4 12.6 10.1 16.3C23.3 160.3 32 175.1 32 192s-8.7 31.7-21.9 40.3C4.4 236 0 241.8 0 248.6V320H576V248.6c0-6.8-4.4-12.6-10.1-16.3C552.7 223.7 544 208.9 544 192s8.7-31.7 21.9-40.3c5.7-3.7 10.1-9.5 10.1-16.3V128c0-35.3-28.7-64-64-64H64zM576 352H0v64c0 17.7 14.3 32 32 32H80V416c0-8.8 7.2-16 16-16s16 7.2 16 16v32h96V416c0-8.8 7.2-16 16-16s16 7.2 16 16v32h96V416c0-8.8 7.2-16 16-16s16 7.2 16 16v32h96V416c0-8.8 7.2-16 16-16s16 7.2 16 16v32h48c17.7 0 32-14.3 32-32V352zM192 160v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V160c0-17.7 14.3-32 32-32s32 14.3 32 32zm128 0v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V160c0-17.7 14.3-32 32-32s32 14.3 32 32zm128 0v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V160c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faRoadSpikes = {
    prefix: 'fas',
    iconName: 'road-spikes',
    icon: [
      640,
      512,
      [],
      'e568',
      'M64 116.8c0-15.8 20.5-22 29.3-8.9L192 256V116.8c0-15.8 20.5-22 29.3-8.9L320 256V116.8c0-15.8 20.5-22 29.3-8.9L448 256V116.8c0-15.8 20.5-22 29.3-8.9L606.8 302.2c14.2 21.3-1.1 49.7-26.6 49.7H512 448 384 320 256 192 64V116.8zM32 384H608c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faFireBurner = {
    prefix: 'fas',
    iconName: 'fire-burner',
    icon: [
      640,
      512,
      [],
      'e4f1',
      'M293.5 3.8c19.7 17.8 38.2 37 55.5 57.7c7.9-9.9 16.8-20.7 26.5-29.5c5.6-5.1 14.4-5.1 20 0c24.7 22.7 45.6 52.7 60.4 81.1c14.5 28 24.2 58.8 24.2 79C480 280 408.7 352 320 352c-89.7 0-160-72.1-160-159.8c0-26.4 12.7-60.7 32.4-92.6c20-32.4 48.1-66.1 81.4-95.8c2.8-2.5 6.4-3.8 10-3.7c3.5 0 7 1.3 9.8 3.8zM370 273c30-21 38-63 20-96c-2-4-4-8-7-12l-36 42s-58-74-62-79c-30 37-45 58-45 82c0 49 36 78 81 78c18 0 34-5 49-15zM32 288c0-17.7 14.3-32 32-32H96c17.7 0 32 14.3 32 32s-14.3 32-32 32v64H544V320c-17.7 0-32-14.3-32-32s14.3-32 32-32h32c17.7 0 32 14.3 32 32v96c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32V288zM320 480c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm160-32c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM192 480c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faFlag = {
    prefix: 'fas',
    iconName: 'flag',
    icon: [
      512,
      512,
      [127988, 61725],
      'f024',
      'M64 32V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V32C0 14.3 14.3 0 32 0S64 14.3 64 32zm40.8 302.8c-3 .9-6 1.7-8.8 2.6V13.5C121.5 6.4 153 0 184 0c36.5 0 68.3 9.1 95.6 16.9l1.3 .4C309.4 25.4 333.3 32 360 32c26.8 0 52.9-6.8 73-14.1c9.9-3.6 17.9-7.2 23.4-9.8c2.7-1.3 4.8-2.4 6.2-3.1c.7-.4 1.1-.6 1.4-.8l.2-.1c9.9-5.6 22.1-5.6 31.9 .2S512 20.6 512 32V288c0 12.1-6.8 23.2-17.7 28.6L480 288c14.3 28.6 14.3 28.6 14.3 28.6l0 0 0 0-.1 0-.2 .1-.7 .4c-.6 .3-1.5 .7-2.5 1.2c-2.2 1-5.2 2.4-9 4c-7.7 3.3-18.5 7.6-31.5 11.9C424.5 342.9 388.8 352 352 352c-37 0-65.2-9.4-89-17.3l-1-.3c-24-8-43.7-14.4-70-14.4c-27.5 0-60.1 7-87.2 14.8z',
    ],
  };
  var faHanukiah = {
    prefix: 'fas',
    iconName: 'hanukiah',
    icon: [
      640,
      512,
      [128334],
      'f6e6',
      'M314.2 3.3C309.1 12.1 296 36.6 296 56c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7C324.6 1.2 322.4 0 320 0s-4.6 1.2-5.8 3.3zm-288 48C21.1 60.1 8 84.6 8 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7C36.6 49.2 34.4 48 32 48s-4.6 1.2-5.8 3.3zM88 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3C101.1 60.1 88 84.6 88 104zm82.2-52.7C165.1 60.1 152 84.6 152 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3zM216 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3C229.1 60.1 216 84.6 216 104zM394.2 51.3C389.1 60.1 376 84.6 376 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3zM440 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3C453.1 60.1 440 84.6 440 104zm82.2-52.7C517.1 60.1 504 84.6 504 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3zM584 104c0 13.3 10.7 24 24 24s24-10.7 24-24c0-19.4-13.1-43.9-18.2-52.7c-1.2-2.1-3.4-3.3-5.8-3.3s-4.6 1.2-5.8 3.3C597.1 60.1 584 84.6 584 104zM112 160c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zm160 0c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v96 16h32V272 176c0-8.8-7.2-16-16-16zM352 144c0-17.7-14.3-32-32-32s-32 14.3-32 32V320H96c-17.7 0-32-14.3-32-32V192c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 53 43 96 96 96H288v64H160c-17.7 0-32 14.3-32 32s14.3 32 32 32H320 480c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V384H544c53 0 96-43 96-96V192c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H352V144z',
    ],
  };
  var faFeather = {
    prefix: 'fas',
    iconName: 'feather',
    icon: [
      512,
      512,
      [129718],
      'f52d',
      'M278.5 215.6L23 471c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l57-57h68c49.7 0 97.9-14.4 139-41c11.1-7.2 5.5-23-7.8-23c-5.1 0-9.2-4.1-9.2-9.2c0-4.1 2.7-7.6 6.5-8.8l81-24.3c2.5-.8 4.8-2.1 6.7-4l22.4-22.4c10.1-10.1 2.9-27.3-11.3-27.3l-32.2 0c-5.1 0-9.2-4.1-9.2-9.2c0-4.1 2.7-7.6 6.5-8.8l112-33.6c4-1.2 7.4-3.9 9.3-7.7C506.4 207.6 512 184.1 512 160c0-41-16.3-80.3-45.3-109.3l-5.5-5.5C432.3 16.3 393 0 352 0s-80.3 16.3-109.3 45.3L139 149C91 197 64 262.1 64 330v55.3L253.6 195.8c6.2-6.2 16.4-6.2 22.6 0c5.4 5.4 6.1 13.6 2.2 19.8z',
    ],
  };
  var faVolumeLow = {
    prefix: 'fas',
    iconName: 'volume-low',
    icon: [
      448,
      512,
      [128264, 'volume-down'],
      'f027',
      'M301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3zM412.6 181.5C434.1 199.1 448 225.9 448 256s-13.9 56.9-35.4 74.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C393.1 284.4 400 271 400 256s-6.9-28.4-17.7-37.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5z',
    ],
  };
  var faVolumeDown = faVolumeLow;
  var faCommentSlash = {
    prefix: 'fas',
    iconName: 'comment-slash',
    icon: [
      640,
      512,
      [],
      'f4b3',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L512.9 376.7C552.2 340.2 576 292.3 576 240C576 125.1 461.4 32 320 32c-67.7 0-129.3 21.4-175.1 56.3L38.8 5.1zM64 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3 0 0 0 0 0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9c37 0 72.3-6.4 104-17.9L82.9 161.3C70.7 185.6 64 212.2 64 240z',
    ],
  };
  var faCloudSunRain = {
    prefix: 'fas',
    iconName: 'cloud-sun-rain',
    icon: [
      640,
      512,
      [127782],
      'f743',
      'M137.9 3c-4.5-3.2-10.3-3.9-15.4-1.8s-8.8 6.7-9.7 12.2L98.7 98.7 13.4 112.8c-5.5 .9-10.1 4.6-12.2 9.7S-.2 133.4 3 137.9l50.3 70.3L3 278.5c-3.2 4.5-3.9 10.3-1.8 15.4s6.7 8.8 12.2 9.7l85.3 14.1L112.8 403c.9 5.5 4.6 10.1 9.7 12.2s10.9 1.4 15.4-1.8l55.2-39.5c-19.9-21.9-32.3-50.8-33.1-82.6c-17.6-10.2-32.2-26.1-40.6-46.3c-20.3-49 3-105.1 52-125.4c29.4-12.2 61.4-8.7 86.7 6.7c13.1-21.8 32.5-39.4 55.8-50.3L303.6 13.4c-.9-5.5-4.6-10.1-9.7-12.2S282.9-.2 278.5 3L208.2 53.3 137.9 3zM291.4 415.9c-2.5 .6-5.1 .6-7.6-.1c1.4 0 2.8 .1 4.2 .1h3.5zm-46.3-260c-17.3-12.2-40.4-15.6-61.5-6.9c-32.7 13.5-48.2 51-34.6 83.6c3.6 8.7 8.9 16.1 15.3 22.2c10.6-39.7 39.9-71.8 77.8-86.4c.8-4.3 1.8-8.4 3-12.5zM277.4 420c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm74.5-116.1c0-39.3-28.4-72.1-65.8-78.7c1.2-5.6 1.9-11.3 1.9-17.2c0-44.2-35.8-80-80-80c-17 0-32.8 5.3-45.8 14.4C433.3 114.6 402.8 96 368 96c-53 0-96 43-96 96l0 1.3c-45.4 7.6-80 47.1-80 94.6c0 53 43 96 96 96H559.9c44.2 0 80-35.8 80-80z',
    ],
  };
  var faCompress = {
    prefix: 'fas',
    iconName: 'compress',
    icon: [
      448,
      512,
      [],
      'f066',
      'M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V64zM32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zM352 64c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V64zM320 320c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z',
    ],
  };
  var faWheatAwn = {
    prefix: 'fas',
    iconName: 'wheat-awn',
    icon: [
      512,
      512,
      ['wheat-alt'],
      'e2cd',
      'M505 41c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L383 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l88-88zM305.5 27.3c-6.2-6.2-16.4-6.2-22.6 0L271.5 38.6c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4-30.5 30.5c-3.4-27.3-15.5-53.8-36.5-74.8l-11.3-11.3c-6.2-6.2-16.4-6.2-22.6 0l-11.3 11.3c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4-30.5 30.5c-3.4-27.3-15.5-53.8-36.5-74.8L101.8 231c-6.2-6.2-16.4-6.2-22.6 0L67.9 242.3c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4L9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l68.9-68.9 12.2 12.2c37.5 37.5 98.3 37.5 135.8 0l11.3-11.3c6.2-6.2 6.2-16.4 0-22.6l-11.3-11.3c-21.8-21.8-49.6-34.1-78.1-36.9l31.9-31.9 12.2 12.2c37.5 37.5 98.3 37.5 135.8 0l11.3-11.3c6.2-6.2 6.2-16.4 0-22.6l-11.3-11.3c-21.8-21.8-49.6-34.1-78.1-36.9l31.9-31.9 12.2 12.2c37.5 37.5 98.3 37.5 135.8 0L486.5 231c6.2-6.2 6.2-16.4 0-22.6L475.2 197c-5.2-5.2-10.6-9.8-16.4-13.9L505 137c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-59.4 59.4c-20.6-4.4-42-3.7-62.3 2.1c6.1-21.3 6.6-43.8 1.4-65.3L409 41c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L329.1 52.9c-3.7-5-7.8-9.8-12.4-14.3L305.5 27.3z',
    ],
  };
  var faWheatAlt = faWheatAwn;
  var faAnkh = {
    prefix: 'fas',
    iconName: 'ankh',
    icon: [
      320,
      512,
      [9765],
      'f644',
      'M96 128c0-35.3 28.7-64 64-64s64 28.7 64 64c0 41.6-20.7 76.6-46.6 104.1c-5.9 6.2-11.8 11.8-17.4 16.7c-5.6-4.9-11.5-10.5-17.4-16.7C116.7 204.6 96 169.6 96 128zM160 0C89.3 0 32 57.3 32 128c0 52.4 21.5 95.5 46.8 128H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96V480c0 17.7 14.3 32 32 32s32-14.3 32-32V320h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H241.2c25.4-32.5 46.8-75.6 46.8-128C288 57.3 230.7 0 160 0z',
    ],
  };
  var faHandsHoldingChild = {
    prefix: 'fas',
    iconName: 'hands-holding-child',
    icon: [
      640,
      512,
      [],
      'e4fa',
      'M320 80c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40zm44.7 84.3L375.8 253c1.6 13.2-7.7 25.1-20.8 26.8s-25.1-7.7-26.8-20.8l-4.4-35h-7.6l-4.4 35c-1.6 13.2-13.6 22.5-26.8 20.8s-22.5-13.6-20.8-26.8l11.1-88.8L255.5 181c-10.1 8.6-25.3 7.3-33.8-2.8s-7.3-25.3 2.8-33.8l27.9-23.6C271.3 104.8 295.3 96 320 96s48.7 8.8 67.6 24.7l27.9 23.6c10.1 8.6 11.4 23.7 2.8 33.8s-23.7 11.4-33.8 2.8l-19.8-16.7zM40 64c22.1 0 40 17.9 40 40v40 80 40.2c0 17 6.7 33.3 18.7 45.3l51.1 51.1c8.3 8.3 21.3 9.6 31 3.1c12.9-8.6 14.7-26.9 3.7-37.8l-15.2-15.2-32-32c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l32 32 15.2 15.2 0 0 25.3 25.3c21 21 32.8 49.5 32.8 79.2V464c0 26.5-21.5 48-48 48H173.3c-17 0-33.3-6.7-45.3-18.7L28.1 393.4C10.1 375.4 0 351 0 325.5V224 160 104C0 81.9 17.9 64 40 64zm560 0c22.1 0 40 17.9 40 40v56 64V325.5c0 25.5-10.1 49.9-28.1 67.9L512 493.3c-12 12-28.3 18.7-45.3 18.7H400c-26.5 0-48-21.5-48-48V385.1c0-29.7 11.8-58.2 32.8-79.2l25.3-25.3 0 0 15.2-15.2 32-32c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-32 32-15.2 15.2c-11 11-9.2 29.2 3.7 37.8c9.7 6.5 22.7 5.2 31-3.1l51.1-51.1c12-12 18.7-28.3 18.7-45.3V224 144 104c0-22.1 17.9-40 40-40z',
    ],
  };
  var faAsterisk = {
    prefix: 'fas',
    iconName: 'asterisk',
    icon: [
      384,
      512,
      [10033, 61545],
      '2a',
      'M192 32c17.7 0 32 14.3 32 32V199.5l111.5-66.9c15.2-9.1 34.8-4.2 43.9 11s4.2 34.8-11 43.9L254.2 256l114.3 68.6c15.2 9.1 20.1 28.7 11 43.9s-28.7 20.1-43.9 11L224 312.5V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V312.5L48.5 379.4c-15.2 9.1-34.8 4.2-43.9-11s-4.2-34.8 11-43.9L129.8 256 15.5 187.4c-15.2-9.1-20.1-28.7-11-43.9s28.7-20.1 43.9-11L160 199.5V64c0-17.7 14.3-32 32-32z',
    ],
  };
  var faSquareCheck = {
    prefix: 'fas',
    iconName: 'square-check',
    icon: [
      448,
      512,
      [9745, 9989, 61510, 'check-square'],
      'f14a',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM337 209L209 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L303 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z',
    ],
  };
  var faCheckSquare = faSquareCheck;
  var faPesetaSign = {
    prefix: 'fas',
    iconName: 'peseta-sign',
    icon: [
      384,
      512,
      [],
      'e221',
      'M64 32C46.3 32 32 46.3 32 64v96c-17.7 0-32 14.3-32 32s14.3 32 32 32l0 96V448c0 17.7 14.3 32 32 32s32-14.3 32-32V352h96c77.4 0 142-55 156.8-128H352c17.7 0 32-14.3 32-32s-14.3-32-32-32h-3.2C334 87 269.4 32 192 32H64zM282.5 160H96V96h96c41.8 0 77.4 26.7 90.5 64zM96 224H282.5c-13.2 37.3-48.7 64-90.5 64H96V224z',
    ],
  };
  var faHeading = {
    prefix: 'fas',
    iconName: 'heading',
    icon: [
      448,
      512,
      ['header'],
      'f1dc',
      'M0 64C0 46.3 14.3 32 32 32H80h48c17.7 0 32 14.3 32 32s-14.3 32-32 32H112V208H336V96H320c-17.7 0-32-14.3-32-32s14.3-32 32-32h48 48c17.7 0 32 14.3 32 32s-14.3 32-32 32H400V240 416h16c17.7 0 32 14.3 32 32s-14.3 32-32 32H368 320c-17.7 0-32-14.3-32-32s14.3-32 32-32h16V272H112V416h16c17.7 0 32 14.3 32 32s-14.3 32-32 32H80 32c-17.7 0-32-14.3-32-32s14.3-32 32-32H48V240 96H32C14.3 96 0 81.7 0 64z',
    ],
  };
  var faHeader = faHeading;
  var faGhost = {
    prefix: 'fas',
    iconName: 'ghost',
    icon: [
      384,
      512,
      [128123],
      'f6e2',
      'M50.8 452.1L19.2 477.4c-2.1 1.7-4.7 2.6-7.4 2.6C5.3 480 0 474.7 0 468.2V192C0 86 86 0 192 0S384 86 384 192V468.2c0 6.5-5.3 11.8-11.8 11.8c-2.7 0-5.3-.9-7.4-2.6l-31.6-25.3c-3.3-2.7-7.5-4.1-11.8-4.1c-5.9 0-11.5 2.8-15 7.5l-37.6 50.1c-3 4-7.8 6.4-12.8 6.4s-9.8-2.4-12.8-6.4l-38.4-51.2c-3-4-7.8-6.4-12.8-6.4s-9.8 2.4-12.8 6.4l-38.4 51.2c-3 4-7.8 6.4-12.8 6.4s-9.8-2.4-12.8-6.4L77.6 455.5c-3.6-4.7-9.1-7.5-15-7.5c-4.3 0-8.4 1.5-11.7 4.1zM160 192c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm96 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faList = {
    prefix: 'fas',
    iconName: 'list',
    icon: [
      512,
      512,
      ['list-squares'],
      'f03a',
      'M40 48C26.7 48 16 58.7 16 72v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V72c0-13.3-10.7-24-24-24H40zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM16 232v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V232c0-13.3-10.7-24-24-24H40c-13.3 0-24 10.7-24 24zM40 368c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24H88c13.3 0 24-10.7 24-24V392c0-13.3-10.7-24-24-24H40z',
    ],
  };
  var faListSquares = faList;
  var faSquarePhoneFlip = {
    prefix: 'fas',
    iconName: 'square-phone-flip',
    icon: [
      448,
      512,
      ['phone-square-alt'],
      'f87b',
      'M384 32c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H384zm-90.7 96.7c-9.7-2.6-19.9 2.3-23.7 11.6l-20 48c-3.4 8.2-1 17.6 5.8 23.2L280 231.7c-16.6 35.2-45.1 63.7-80.3 80.3l-20.2-24.7c-5.6-6.8-15-9.2-23.2-5.8l-48 20c-9.3 3.9-14.2 14-11.6 23.7l12 44C111.1 378 119 384 128 384c123.7 0 224-100.3 224-224c0-9-6-16.9-14.7-19.3l-44-12z',
    ],
  };
  var faPhoneSquareAlt = faSquarePhoneFlip;
  var faCartPlus = {
    prefix: 'fas',
    iconName: 'cart-plus',
    icon: [
      576,
      512,
      [],
      'f217',
      'M24 0C10.7 0 0 10.7 0 24S10.7 48 24 48H76.1l60.3 316.5c2.2 11.3 12.1 19.5 23.6 19.5H488c13.3 0 24-10.7 24-24s-10.7-24-24-24H179.9l-9.1-48h317c14.3 0 26.9-9.5 30.8-23.3l54-192C578.3 52.3 563 32 541.8 32H122l-2.4-12.5C117.4 8.2 107.5 0 96 0H24zM176 512c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm336-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM252 160c0-11 9-20 20-20h44V96c0-11 9-20 20-20s20 9 20 20v44h44c11 0 20 9 20 20s-9 20-20 20H356v44c0 11-9 20-20 20s-20-9-20-20V180H272c-11 0-20-9-20-20z',
    ],
  };
  var faGamepad = {
    prefix: 'fas',
    iconName: 'gamepad',
    icon: [
      640,
      512,
      [],
      'f11b',
      'M192 64C86 64 0 150 0 256S86 448 192 448H448c106 0 192-86 192-192s-86-192-192-192H192zM496 248c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40zm-24 56c0 22.1-17.9 40-40 40s-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40zM168 200c0-13.3 10.7-24 24-24s24 10.7 24 24v32h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V200z',
    ],
  };
  var faCircleDot = {
    prefix: 'fas',
    iconName: 'circle-dot',
    icon: [
      512,
      512,
      [128280, 'dot-circle'],
      'f192',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm0-160c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z',
    ],
  };
  var faDotCircle = faCircleDot;
  var faFaceDizzy = {
    prefix: 'fas',
    iconName: 'face-dizzy',
    icon: [
      512,
      512,
      ['dizzy'],
      'f567',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm0-96c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM100.7 132.7c6.2-6.2 16.4-6.2 22.6 0L160 169.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L182.6 192l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L160 214.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L137.4 192l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6zm192 0c6.2-6.2 16.4-6.2 22.6 0L352 169.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L374.6 192l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L352 214.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L329.4 192l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6z',
    ],
  };
  var faDizzy = faFaceDizzy;
  var faEgg = {
    prefix: 'fas',
    iconName: 'egg',
    icon: [
      384,
      512,
      [129370],
      'f7fb',
      'M192 496C86 496 0 410 0 304C0 192 96 16 192 16s192 176 192 288c0 106-86 192-192 192zM156.5 138l0 0 0 0 0 0c5.5-6.9 4.4-17-2.5-22.5s-17-4.4-22.5 2.5L144 128c-12.5-10-12.5-10-12.5-10l0 0 0 0-.1 .1-.2 .2-.6 .8c-.5 .7-1.3 1.7-2.2 3c-1.9 2.6-4.5 6.3-7.7 11c-6.3 9.4-14.6 23-23 39.7C81.1 206.1 64 252.6 64 304c0 8.8 7.2 16 16 16s16-7.2 16-16c0-44.6 14.9-86.1 30.3-116.8c7.6-15.3 15.3-27.7 21-36.3c2.8-4.3 5.2-7.6 6.8-9.8c.8-1.1 1.4-1.9 1.8-2.4l.4-.6 .1-.1 0 0z',
    ],
  };
  var faHouseMedicalCircleXmark = {
    prefix: 'fas',
    iconName: 'house-medical-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e513',
      'M320 368c0 59.5 29.5 112.1 74.8 144H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L522.1 193.9c-8.5-1.3-17.3-1.9-26.1-1.9c-54.7 0-103.5 24.9-135.8 64H320V208c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16v48H208c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zM496 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm22.6-144l36.7-36.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L496 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L473.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L496 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L518.6 368z',
    ],
  };
  var faCampground = {
    prefix: 'fas',
    iconName: 'campground',
    icon: [
      576,
      512,
      [9978],
      'f6bb',
      'M377 52c11-13.8 8.8-33.9-5-45s-33.9-8.8-45 5L288 60.8 249 12c-11-13.8-31.2-16-45-5s-16 31.2-5 45l48 60L12.3 405.4C4.3 415.4 0 427.7 0 440.4V464c0 26.5 21.5 48 48 48H288 528c26.5 0 48-21.5 48-48V440.4c0-12.7-4.3-25.1-12.3-35L329 112l48-60zM288 448H168.5L288 291.7 407.5 448H288z',
    ],
  };
  var faFolderPlus = {
    prefix: 'fas',
    iconName: 'folder-plus',
    icon: [
      512,
      512,
      [],
      'f65e',
      'M512 416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H181.5c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7H448c35.3 0 64 28.7 64 64V416zM232 376c0 13.3 10.7 24 24 24s24-10.7 24-24V312h64c13.3 0 24-10.7 24-24s-10.7-24-24-24H280V200c0-13.3-10.7-24-24-24s-24 10.7-24 24v64H168c-13.3 0-24 10.7-24 24s10.7 24 24 24h64v64z',
    ],
  };
  var faFutbol = {
    prefix: 'fas',
    iconName: 'futbol',
    icon: [
      512,
      512,
      [9917, 'futbol-ball', 'soccer-ball'],
      'f1e3',
      'M417.3 360.1l-71.6-4.8c-5.2-.3-10.3 1.1-14.5 4.2s-7.2 7.4-8.4 12.5l-17.6 69.6C289.5 445.8 273 448 256 448s-33.5-2.2-49.2-6.4L189.2 372c-1.3-5-4.3-9.4-8.4-12.5s-9.3-4.5-14.5-4.2l-71.6 4.8c-17.6-27.2-28.5-59.2-30.4-93.6L125 228.3c4.4-2.8 7.6-7 9.2-11.9s1.4-10.2-.5-15l-26.7-66.6C128 109.2 155.3 89 186.7 76.9l55.2 46c4 3.3 9 5.1 14.1 5.1s10.2-1.8 14.1-5.1l55.2-46c31.3 12.1 58.7 32.3 79.6 57.9l-26.7 66.6c-1.9 4.8-2.1 10.1-.5 15s4.9 9.1 9.2 11.9l60.7 38.2c-1.9 34.4-12.8 66.4-30.4 93.6zM256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm14.1-325.7c-8.4-6.1-19.8-6.1-28.2 0L194 221c-8.4 6.1-11.9 16.9-8.7 26.8l18.3 56.3c3.2 9.9 12.4 16.6 22.8 16.6h59.2c10.4 0 19.6-6.7 22.8-16.6l18.3-56.3c3.2-9.9-.3-20.7-8.7-26.8l-47.9-34.8z',
    ],
  };
  var faFutbolBall = faFutbol;
  var faSoccerBall = faFutbol;
  var faPaintbrush = {
    prefix: 'fas',
    iconName: 'paintbrush',
    icon: [
      576,
      512,
      [128396, 'paint-brush'],
      'f1fc',
      'M371.3 367.1c27.3-3.9 51.9-19.4 67.2-42.9L600.2 74.1c12.6-19.5 9.4-45.3-7.6-61.2S549.7-4.4 531.1 9.6L294.4 187.2c-24 18-38.2 46.1-38.4 76.1L371.3 367.1zm-19.6 25.4l-116-104.4C175.9 290.3 128 339.6 128 400c0 3.9 .2 7.8 .6 11.6c1.8 17.5-10.2 36.4-27.8 36.4H96c-17.7 0-32 14.3-32 32s14.3 32 32 32H240c61.9 0 112-50.1 112-112c0-2.5-.1-5-.2-7.5z',
    ],
  };
  var faPaintBrush = faPaintbrush;
  var faLock = {
    prefix: 'fas',
    iconName: 'lock',
    icon: [
      448,
      512,
      [128274],
      'f023',
      'M144 144v48H304V144c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192V144C80 64.5 144.5 0 224 0s144 64.5 144 144v48h16c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256c0-35.3 28.7-64 64-64H80z',
    ],
  };
  var faGasPump = {
    prefix: 'fas',
    iconName: 'gas-pump',
    icon: [
      512,
      512,
      [9981],
      'f52f',
      'M32 64C32 28.7 60.7 0 96 0H256c35.3 0 64 28.7 64 64V256h8c48.6 0 88 39.4 88 88v32c0 13.3 10.7 24 24 24s24-10.7 24-24V222c-27.6-7.1-48-32.2-48-62V96L384 64c-8.8-8.8-8.8-23.2 0-32s23.2-8.8 32 0l77.3 77.3c12 12 18.7 28.3 18.7 45.3V168v24 32V376c0 39.8-32.2 72-72 72s-72-32.2-72-72V344c0-22.1-17.9-40-40-40h-8V448c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32V64zM96 80v96c0 8.8 7.2 16 16 16H240c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16H112c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faHotTubPerson = {
    prefix: 'fas',
    iconName: 'hot-tub-person',
    icon: [
      512,
      512,
      ['hot-tub'],
      'f593',
      'M272 24c0-13.3-10.7-24-24-24s-24 10.7-24 24v5.2c0 34 14.4 66.4 39.7 89.2l16.4 14.8c15.2 13.7 23.8 33.1 23.8 53.5V200c0 13.3 10.7 24 24 24s24-10.7 24-24V186.8c0-34-14.4-66.4-39.7-89.2L295.8 82.8C280.7 69.1 272 49.7 272 29.2V24zM0 320v16V448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V320c0-35.3-28.7-64-64-64H277.3c-13.8 0-27.3-4.5-38.4-12.8l-85.3-64C137 166.7 116.8 160 96 160c-53 0-96 43-96 96v64zm128 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V336c0-8.8 7.2-16 16-16s16 7.2 16 16zm80-16c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V336c0-8.8 7.2-16 16-16zm112 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V336c0-8.8 7.2-16 16-16s16 7.2 16 16zm80-16c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V336c0-8.8 7.2-16 16-16zM360 0c-13.3 0-24 10.7-24 24v5.2c0 34 14.4 66.4 39.7 89.2l16.4 14.8c15.2 13.7 23.8 33.1 23.8 53.5V200c0 13.3 10.7 24 24 24s24-10.7 24-24V186.8c0-34-14.4-66.4-39.7-89.2L407.8 82.8C392.7 69.1 384 49.7 384 29.2V24c0-13.3-10.7-24-24-24zM64 128c35.3 0 64-28.7 64-64S99.3 0 64 0S0 28.7 0 64s28.7 64 64 64z',
    ],
  };
  var faHotTub = faHotTubPerson;
  var faMapLocation = {
    prefix: 'fas',
    iconName: 'map-location',
    icon: [
      576,
      512,
      ['map-marked'],
      'f59f',
      'M302.8 312C334.9 271.9 408 174.6 408 120C408 53.7 354.3 0 288 0S168 53.7 168 120c0 54.6 73.1 151.9 105.2 192c7.7 9.6 22 9.6 29.6 0zM416 503l144.9-58c9.1-3.6 15.1-12.5 15.1-22.3V152c0-17-17.1-28.6-32.9-22.3l-116 46.4c-.5 1.2-1 2.5-1.5 3.7c-2.9 6.8-6.1 13.7-9.6 20.6V503zM15.1 187.3C6 191 0 199.8 0 209.6V480.4c0 17 17.1 28.6 32.9 22.3L160 451.8V200.4c-3.5-6.9-6.7-13.8-9.6-20.6c-5.6-13.2-10.4-27.4-12.8-41.5l-122.6 49zM384 255c-20.5 31.3-42.3 59.6-56.2 77c-20.5 25.6-59.1 25.6-79.6 0c-13.9-17.4-35.7-45.7-56.2-77V449.4l192 54.9V255z',
    ],
  };
  var faMapMarked = faMapLocation;
  var faHouseFloodWater = {
    prefix: 'fas',
    iconName: 'house-flood-water',
    icon: [
      576,
      512,
      [],
      'e50e',
      'M306.8 6.1C295.6-2 280.4-2 269.2 6.1l-176 128c-11.2 8.2-15.9 22.6-11.6 35.8S98.1 192 112 192h16v73c1.7 1 3.3 2 4.9 3.1c18 12.4 40.1 20.3 59.2 20.3c21.1 0 42-8.5 59.2-20.3c22.1-15.5 51.6-15.5 73.7 0c18.4 12.7 39.6 20.3 59.2 20.3c19 0 41.2-7.9 59.2-20.3c1.5-1 3-2 4.5-2.9l-.3-73.2H464c13.9 0 26.1-8.9 30.4-22.1s-.4-27.6-11.6-35.8l-176-128zM269.5 309.9C247 325.4 219.5 336 192 336c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 389.7 159 400 192 400c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.5-27.3-10.1-39.2-1.7l0 0C439.4 325.2 410.9 336 384 336c-27.5 0-55-10.6-77.5-26.1c-11.1-7.9-25.9-7.9-37 0zM384 448c-27.5 0-55-10.6-77.5-26.1c-11.1-7.9-25.9-7.9-37 0C247 437.4 219.5 448 192 448c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 501.7 159 512 192 512c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C439.4 437.2 410.9 448 384 448z',
    ],
  };
  var faTree = {
    prefix: 'fas',
    iconName: 'tree',
    icon: [
      448,
      512,
      [127794],
      'f1bb',
      'M210.6 5.9L62 169.4c-3.9 4.2-6 9.8-6 15.5C56 197.7 66.3 208 79.1 208H104L30.6 281.4c-4.2 4.2-6.6 10-6.6 16C24 309.9 34.1 320 46.6 320H80L5.4 409.5C1.9 413.7 0 419 0 424.5c0 13 10.5 23.5 23.5 23.5H192v32c0 17.7 14.3 32 32 32s32-14.3 32-32V448H424.5c13 0 23.5-10.5 23.5-23.5c0-5.5-1.9-10.8-5.4-15L368 320h33.4c12.5 0 22.6-10.1 22.6-22.6c0-6-2.4-11.8-6.6-16L344 208h24.9c12.7 0 23.1-10.3 23.1-23.1c0-5.7-2.1-11.3-6-15.5L237.4 5.9C234 2.1 229.1 0 224 0s-10 2.1-13.4 5.9z',
    ],
  };
  var faBridgeLock = {
    prefix: 'fas',
    iconName: 'bridge-lock',
    icon: [
      640,
      512,
      [],
      'e4cc',
      'M32 64c0-17.7 14.3-32 32-32H576c17.7 0 32 14.3 32 32s-14.3 32-32 32H536v64h-8c-61.9 0-112 50.1-112 112v24.6c-9.9 5.8-18.2 14.1-23.8 24.1c-17.6-20-43.4-32.7-72.2-32.7c-53 0-96 43-96 96v64c0 17.7-14.3 32-32 32H160c-17.7 0-32-14.3-32-32V384c0-53-43-96-96-96V160h72V96H64C46.3 96 32 81.7 32 64zM408 96v64h80V96H408zm-48 64V96H280v64h80zM152 96v64h80V96H152zM528 240c-17.7 0-32 14.3-32 32v48h64V272c0-17.7-14.3-32-32-32zm-80 32c0-44.2 35.8-80 80-80s80 35.8 80 80v48c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H448c-17.7 0-32-14.3-32-32V352c0-17.7 14.3-32 32-32V272z',
    ],
  };
  var faSackDollar = {
    prefix: 'fas',
    iconName: 'sack-dollar',
    icon: [
      512,
      512,
      [128176],
      'f81d',
      'M320 96H192L144.6 24.9C137.5 14.2 145.1 0 157.9 0H354.1c12.8 0 20.4 14.2 13.3 24.9L320 96zM192 128H320c3.8 2.5 8.1 5.3 13 8.4C389.7 172.7 512 250.9 512 416c0 53-43 96-96 96H96c-53 0-96-43-96-96C0 250.9 122.3 172.7 179 136.4l0 0 0 0c4.8-3.1 9.2-5.9 13-8.4zm84.1 96c0-11.1-9-20.1-20.1-20.1s-20.1 9-20.1 20.1v6c-5.6 1.2-10.9 2.9-15.9 5.1c-15 6.8-27.9 19.4-31.1 37.7c-1.8 10.2-.8 20 3.4 29c4.2 8.8 10.7 15 17.3 19.5c11.6 7.9 26.9 12.5 38.6 16l2.2 .7c13.9 4.2 23.4 7.4 29.3 11.7c2.5 1.8 3.4 3.2 3.8 4.1c.3 .8 .9 2.6 .2 6.7c-.6 3.5-2.5 6.4-8 8.8c-6.1 2.6-16 3.9-28.8 1.9c-6-1-16.7-4.6-26.2-7.9l0 0 0 0 0 0 0 0c-2.2-.8-4.3-1.5-6.3-2.1c-10.5-3.5-21.8 2.2-25.3 12.7s2.2 21.8 12.7 25.3c1.2 .4 2.7 .9 4.4 1.5c7.9 2.7 20.3 6.9 29.8 9.1V416c0 11.1 9 20.1 20.1 20.1s20.1-9 20.1-20.1v-5.5c5.4-1 10.5-2.5 15.4-4.6c15.7-6.7 28.4-19.7 31.6-38.7c1.8-10.4 1-20.3-3-29.4c-3.9-9-10.2-15.6-16.9-20.5c-12.2-8.8-28.3-13.7-40.4-17.4l-.8-.2c-14.2-4.3-23.8-7.3-29.9-11.4c-2.6-1.8-3.4-3-3.6-3.5c-.2-.3-.7-1.6-.1-5c.3-1.9 1.9-5.2 8.2-8.1c6.4-2.9 16.4-4.5 28.6-2.6c4.3 .7 17.9 3.3 21.7 4.3c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-4.4-1.2-14.4-3.2-21-4.4V224z',
    ],
  };
  var faPenToSquare = {
    prefix: 'fas',
    iconName: 'pen-to-square',
    icon: [
      512,
      512,
      ['edit'],
      'f044',
      'M471.6 21.7c-21.9-21.9-57.3-21.9-79.2 0L362.3 51.7l97.9 97.9 30.1-30.1c21.9-21.9 21.9-57.3 0-79.2L471.6 21.7zm-299.2 220c-6.1 6.1-10.8 13.6-13.5 21.9l-29.6 88.8c-2.9 8.6-.6 18.1 5.8 24.6s15.9 8.7 24.6 5.8l88.8-29.6c8.2-2.8 15.7-7.4 21.9-13.5L437.7 172.3 339.7 74.3 172.4 241.7zM96 64C43 64 0 107 0 160V416c0 53 43 96 96 96H352c53 0 96-43 96-96V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H96z',
    ],
  };
  var faEdit = faPenToSquare;
  var faCarSide = {
    prefix: 'fas',
    iconName: 'car-side',
    icon: [
      640,
      512,
      [128663],
      'f5e4',
      'M171.3 96H224v96H111.3l30.4-75.9C146.5 104 158.2 96 171.3 96zM272 192V96h81.2c9.7 0 18.9 4.4 25 12l67.2 84H272zm256.2 1L428.2 68c-18.2-22.8-45.8-36-75-36H171.3c-39.3 0-74.6 23.9-89.1 60.3L40.6 196.4C16.8 205.8 0 228.9 0 256V368c0 17.7 14.3 32 32 32H65.3c7.6 45.4 47.1 80 94.7 80s87.1-34.6 94.7-80H385.3c7.6 45.4 47.1 80 94.7 80s87.1-34.6 94.7-80H608c17.7 0 32-14.3 32-32V320c0-65.2-48.8-119-111.8-127zm-2.9 207c-6.6 18.6-24.4 32-45.3 32s-38.7-13.4-45.3-32c-1.8-5-2.7-10.4-2.7-16c0-26.5 21.5-48 48-48s48 21.5 48 48c0 5.6-1 11-2.7 16zM160 432c-20.9 0-38.7-13.4-45.3-32c-1.8-5-2.7-10.4-2.7-16c0-26.5 21.5-48 48-48s48 21.5 48 48c0 5.6-1 11-2.7 16c-6.6 18.6-24.4 32-45.3 32z',
    ],
  };
  var faShareNodes = {
    prefix: 'fas',
    iconName: 'share-nodes',
    icon: [
      448,
      512,
      ['share-alt'],
      'f1e0',
      'M352 224c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96c0 4 .2 8 .7 11.9l-94.1 47C145.4 170.2 121.9 160 96 160c-53 0-96 43-96 96s43 96 96 96c25.9 0 49.4-10.2 66.6-26.9l94.1 47c-.5 3.9-.7 7.8-.7 11.9c0 53 43 96 96 96s96-43 96-96s-43-96-96-96c-25.9 0-49.4 10.2-66.6 26.9l-94.1-47c.5-3.9 .7-7.8 .7-11.9s-.2-8-.7-11.9l94.1-47C302.6 213.8 326.1 224 352 224z',
    ],
  };
  var faShareAlt = faShareNodes;
  var faHeartCircleMinus = {
    prefix: 'fas',
    iconName: 'heart-circle-minus',
    icon: [
      576,
      512,
      [],
      'e4ff',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM576 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-64 0c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16s7.2-16 16-16H496c8.8 0 16 7.2 16 16z',
    ],
  };
  var faHourglassHalf = {
    prefix: 'fas',
    iconName: 'hourglass-half',
    icon: [
      384,
      512,
      ['hourglass-2'],
      'f252',
      'M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM96 75V64H288V75c0 19-5.6 37.4-16 53H112c-10.3-15.6-16-34-16-53zm16 309c3.5-5.3 7.6-10.3 12.1-14.9L192 301.3l67.9 67.9c4.6 4.6 8.6 9.6 12.2 14.9H112z',
    ],
  };
  var faHourglass2 = faHourglassHalf;
  var faMicroscope = {
    prefix: 'fas',
    iconName: 'microscope',
    icon: [
      512,
      512,
      [128300],
      'f610',
      'M168 32c0-17.7 14.3-32 32-32h16c17.7 0 32 14.3 32 32h8c17.7 0 32 14.3 32 32V288c0 17.7-14.3 32-32 32h-8c0 17.7-14.3 32-32 32H200c-17.7 0-32-14.3-32-32h-8c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32l8 0zM32 448H320c70.7 0 128-57.3 128-128s-57.3-128-128-128V128c106 0 192 86 192 192c0 49.2-18.5 94-48.9 128H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm80-64H304c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faSink = {
    prefix: 'fas',
    iconName: 'sink',
    icon: [
      512,
      512,
      [],
      'e06d',
      'M288 96c0-17.7 14.3-32 32-32s32 14.3 32 32s14.3 32 32 32s32-14.3 32-32c0-53-43-96-96-96s-96 43-96 96V288H160V264c0-30.9-25.1-56-56-56H56c-13.3 0-24 10.7-24 24s10.7 24 24 24h48c4.4 0 8 3.6 8 8v24H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H256 480c17.7 0 32-14.3 32-32s-14.3-32-32-32H400V264c0-4.4 3.6-8 8-8h56c13.3 0 24-10.7 24-24s-10.7-24-24-24H408c-30.9 0-56 25.1-56 56v24H288V96zM480 416V384H32v32c0 53 43 96 96 96H384c53 0 96-43 96-96z',
    ],
  };
  var faBagShopping = {
    prefix: 'fas',
    iconName: 'bag-shopping',
    icon: [
      448,
      512,
      ['shopping-bag'],
      'f290',
      'M160 112c0-35.3 28.7-64 64-64s64 28.7 64 64v48H160V112zm-48 48H48c-26.5 0-48 21.5-48 48V416c0 53 43 96 96 96H352c53 0 96-43 96-96V208c0-26.5-21.5-48-48-48H336V112C336 50.1 285.9 0 224 0S112 50.1 112 112v48zm24 96c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm200-24c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faShoppingBag = faBagShopping;
  var faArrowDownZA = {
    prefix: 'fas',
    iconName: 'arrow-down-z-a',
    icon: [
      576,
      512,
      ['sort-alpha-desc', 'sort-alpha-down-alt'],
      'f881',
      'M183.6 469.6C177.5 476.2 169 480 160 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L128 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 64c0-17.7 14.3-32 32-32H480c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9L429.3 160H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H352c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9L402.7 96H352c-17.7 0-32-14.3-32-32zm96 192c12.1 0 23.2 6.8 28.6 17.7l64 128 16 32c7.9 15.8 1.5 35-14.3 42.9s-35 1.5-42.9-14.3L460.2 448H371.8l-7.2 14.3c-7.9 15.8-27.1 22.2-42.9 14.3s-22.2-27.1-14.3-42.9l16-32 64-128c5.4-10.8 16.5-17.7 28.6-17.7zM395.8 400h40.4L416 359.6 395.8 400z',
    ],
  };
  var faSortAlphaDesc = faArrowDownZA;
  var faSortAlphaDownAlt = faArrowDownZA;
  var faMitten = {
    prefix: 'fas',
    iconName: 'mitten',
    icon: [
      448,
      512,
      [],
      'f7b5',
      'M352 384H64L5.4 178.9C1.8 166.4 0 153.4 0 140.3C0 62.8 62.8 0 140.3 0h3.4c66 0 123.5 44.9 139.5 108.9l31.4 125.8 17.6-20.1C344.8 200.2 362.9 192 382 192h2.8c34.9 0 63.3 28.3 63.3 63.3c0 15.9-6 31.2-16.8 42.9L352 384zM32 448c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V448z',
    ],
  };
  var faPersonRays = {
    prefix: 'fas',
    iconName: 'person-rays',
    icon: [
      512,
      512,
      [],
      'e54d',
      'M304 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM248 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9l-28.6 47.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l58.3 97c9.1 15.1 4.2 34.8-10.9 43.9s-34.8 4.2-43.9-10.9L328 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H248zM7 7C16.4-2.3 31.6-2.3 41 7l80 80c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L7 41C-2.3 31.6-2.3 16.4 7 7zM471 7c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-80 80c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L471 7zM7 505c-9.4-9.4-9.4-24.6 0-33.9l80-80c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L41 505c-9.4 9.4-24.6 9.4-33.9 0zm464 0l-80-80c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l80 80c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0z',
    ],
  };
  var faUsers = {
    prefix: 'fas',
    iconName: 'users',
    icon: [
      640,
      512,
      [],
      'f0c0',
      'M144 160c-44.2 0-80-35.8-80-80S99.8 0 144 0s80 35.8 80 80s-35.8 80-80 80zm368 0c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80zM0 298.7C0 239.8 47.8 192 106.7 192h42.7c15.9 0 31 3.5 44.6 9.7c-1.3 7.2-1.9 14.7-1.9 22.3c0 38.2 16.8 72.5 43.3 96c-.2 0-.4 0-.7 0H21.3C9.6 320 0 310.4 0 298.7zM405.3 320c-.2 0-.4 0-.7 0c26.6-23.5 43.3-57.8 43.3-96c0-7.6-.7-15-1.9-22.3c13.6-6.3 28.7-9.7 44.6-9.7h42.7C592.2 192 640 239.8 640 298.7c0 11.8-9.6 21.3-21.3 21.3H405.3zM416 224c0 53-43 96-96 96s-96-43-96-96s43-96 96-96s96 43 96 96zM128 485.3C128 411.7 187.7 352 261.3 352H378.7C452.3 352 512 411.7 512 485.3c0 14.7-11.9 26.7-26.7 26.7H154.7c-14.7 0-26.7-11.9-26.7-26.7z',
    ],
  };
  var faEyeSlash = {
    prefix: 'fas',
    iconName: 'eye-slash',
    icon: [
      640,
      512,
      [],
      'f070',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c5.2-11.8 8-24.8 8-38.5c0-53-43-96-96-96c-2.8 0-5.6 .1-8.4 .4c5.3 9.3 8.4 20.1 8.4 31.6c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zm223.1 298L373 389.9c-16.4 6.5-34.3 10.1-53 10.1c-79.5 0-144-64.5-144-144c0-6.9 .5-13.6 1.4-20.2L83.1 161.5C60.3 191.2 44 220.8 34.5 243.7c-3.3 7.9-3.3 16.7 0 24.6c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c47.8 0 89.9-12.9 126.2-32.5z',
    ],
  };
  var faFlaskVial = {
    prefix: 'fas',
    iconName: 'flask-vial',
    icon: [
      640,
      512,
      [],
      'e4f3',
      'M175 389.4c-9.8 16-15 34.3-15 53.1c-10 3.5-20.8 5.5-32 5.5c-53 0-96-43-96-96V64C14.3 64 0 49.7 0 32S14.3 0 32 0H96h64 64c17.7 0 32 14.3 32 32s-14.3 32-32 32V309.9l-49 79.6zM96 64v96h64V64H96zM352 0H480h32c17.7 0 32 14.3 32 32s-14.3 32-32 32V214.9L629.7 406.2c6.7 10.9 10.3 23.5 10.3 36.4c0 38.3-31.1 69.4-69.4 69.4H261.4c-38.3 0-69.4-31.1-69.4-69.4c0-12.8 3.6-25.4 10.3-36.4L320 214.9V64c-17.7 0-32-14.3-32-32s14.3-32 32-32h32zm32 64V224c0 5.9-1.6 11.7-4.7 16.8L330.5 320h171l-48.8-79.2c-3.1-5-4.7-10.8-4.7-16.8V64H384z',
    ],
  };
  var faHand = {
    prefix: 'fas',
    iconName: 'hand',
    icon: [
      512,
      512,
      [129306, 9995, 'hand-paper'],
      'f256',
      'M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V336c0 1.5 0 3.1 .1 4.6L67.6 283c-16-15.2-41.3-14.6-56.6 1.4s-14.6 41.3 1.4 56.6L124.8 448c43.1 41.1 100.4 64 160 64H304c97.2 0 176-78.8 176-176V128c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V32z',
    ],
  };
  var faHandPaper = faHand;
  var faOm = {
    prefix: 'fas',
    iconName: 'om',
    icon: [
      512,
      512,
      [128329],
      'f679',
      'M379.3 4.7c-6.2-6.2-16.4-6.2-22.6 0l-16 16c-6.2 6.2-6.2 16.4 0 22.6l16 16c6.2 6.2 16.4 6.2 22.6 0l16-16c6.2-6.2 6.2-16.4 0-22.6l-16-16zM115.2 169.6c8-6 17.9-9.6 28.8-9.6c26.5 0 48 21.5 48 48s-21.5 48-48 48H109.8c-7.6 0-13.8 6.2-13.8 13.8c0 1.5 .2 2.9 .7 4.4l8 24c4.4 13.1 16.6 21.9 30.4 21.9H144h16c35.3 0 64 28.7 64 64s-28.7 64-64 64c-50.8 0-82.7-21.5-102.2-42.8c-9.9-10.8-16.6-21.6-20.9-29.7c-2.1-4-3.6-7.3-4.5-9.6c-.5-1.1-.8-2-1-2.5l-.2-.5 0-.1c-2.6-7.8-10.7-12.3-18.7-10.5C4.4 354.2-.9 361.8 .1 370L16 368C.1 370 .1 370 .1 370l0 0 0 0 0 .1 .1 .4c0 .3 .1 .8 .2 1.3c.2 1.1 .4 2.7 .8 4.6c.8 3.9 2 9.4 3.9 15.9c3.8 13 10.3 30.4 21.3 48C48.7 476.2 89.4 512 160 512c70.7 0 128-57.3 128-128c0-23.3-6.2-45.2-17.1-64h22.6c25.5 0 49.9-10.1 67.9-28.1l26.5-26.5c6-6 14.1-9.4 22.6-9.4H416c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32c-25.7 0-41.4-12.5-51.2-25.6c-5-6.7-8.4-13.4-10.5-18.6c-1.1-2.5-1.8-4.6-2.2-6c-.2-.7-.4-1.2-.5-1.5l-.1-.3 0 0c0 0 0 0 0 0c-1.9-7.3-8.6-12.4-16.2-12.1c-7.6 .3-13.9 5.9-15.1 13.4L336 368c-15.8-2.6-15.8-2.6-15.8-2.6l0 0 0 0 0 .1-.1 .3c0 .3-.1 .6-.2 1.1c-.1 .9-.3 2.1-.4 3.6c-.3 3-.6 7.3-.6 12.4c0 10.1 1.1 23.9 5.8 38.1c4.8 14.3 13.4 29.3 28.6 40.7C368.7 473.3 389.3 480 416 480c53 0 96-43 96-96V288c0-53-43-96-96-96h-5.5c-25.5 0-49.9 10.1-67.9 28.1l-26.5 26.5c-6 6-14.1 9.4-22.6 9.4H245.2c6.9-14.5 10.8-30.8 10.8-48c0-61.9-50.1-112-112-112c-25.2 0-48.5 8.3-67.2 22.4c-14.1 10.6-17 30.7-6.4 44.8s30.7 17 44.8 6.4zM280.9 66.7c-6-4-14-3.5-19.5 1.3s-7 12.7-3.7 19.2L272 80c-14.3 7.2-14.3 7.2-14.3 7.2l0 0 0 0 0 .1 .1 .2 .4 .7c.3 .6 .8 1.4 1.4 2.4c1.2 2 2.9 4.8 5.1 8.2c4.4 6.7 11.1 15.5 20 24.4C302.4 141.1 330.3 160 368 160c31.2 0 56.6-10.4 73.9-20.2c8.7-5 15.6-9.9 20.4-13.8c2.4-1.9 4.3-3.6 5.7-4.9c.7-.6 1.3-1.2 1.7-1.6l.6-.5 .2-.2 .1-.1 0 0 0 0c0 0 0 0-22.6-22.6l22.6 22.6c12.5-12.5 12.5-32.8 0-45.3c-12.4-12.4-32.6-12.5-45.1-.2c-.1 .1-.2 .2-.5 .4c-.5 .5-1.5 1.3-2.8 2.4c-2.7 2.2-6.8 5.2-12.1 8.2C399.4 90.4 384.8 96 368 96c-20.8 0-42.4-7-59.5-14.6c-8.4-3.7-15.4-7.5-20.3-10.3c-2.4-1.4-4.3-2.5-5.6-3.3c-.6-.4-1.1-.7-1.4-.9l-.3-.2 0 0 0 0 0 0z',
    ],
  };
  var faWorm = {
    prefix: 'fas',
    iconName: 'worm',
    icon: [
      448,
      512,
      [],
      'e599',
      'M224 96c0-53 43-96 96-96h38.4C407.9 0 448 40.1 448 89.6V176v16V376c0 75.1-60.9 136-136 136s-136-60.9-136-136V296c0-22.1-17.9-40-40-40s-40 17.9-40 40V464c0 26.5-21.5 48-48 48s-48-21.5-48-48V296c0-75.1 60.9-136 136-136s136 60.9 136 136v80c0 22.1 17.9 40 40 40s40-17.9 40-40V192H320c-53 0-96-43-96-96zm144-8c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faHouseCircleXmark = {
    prefix: 'fas',
    iconName: 'house-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e50b',
      'M320.7 351.7C329 262.1 404.3 192 496 192c8.9 0 17.6 .7 26.1 1.9L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V480c0 17.7 14.3 32 32 32H192c17.7 0 32-14.3 32-32V383.7c0-17.7 14.3-32 32-32h64l.7 0zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L518.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faPlug = {
    prefix: 'fas',
    iconName: 'plug',
    icon: [
      384,
      512,
      [128268],
      'f1e6',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8C297 398 352 333.4 352 256V224c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faChevronUp = {
    prefix: 'fas',
    iconName: 'chevron-up',
    icon: [
      512,
      512,
      [],
      'f077',
      'M233.4 105.4c12.5-12.5 32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L256 173.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l192-192z',
    ],
  };
  var faHandSpock = {
    prefix: 'fas',
    iconName: 'hand-spock',
    icon: [
      576,
      512,
      [128406],
      'f259',
      'M246.9 23.7C242.3 6.6 224.8-3.5 207.7 1.1s-27.2 22.1-22.6 39.2L238 237.8c2.5 9.2-4.5 18.2-14 18.2c-6.4 0-12-4.2-13.9-10.3L166.6 102.7c-5.1-16.9-23-26.4-39.9-21.3s-26.4 23-21.3 39.9l62.8 206.4c2.4 7.9-7.2 13.8-13.2 8.1L99.6 283c-16-15.2-41.3-14.6-56.6 1.4s-14.6 41.3 1.4 56.6L156.8 448c43.1 41.1 100.4 64 160 64h10.9 8.2c.1 0 .1-.1 .1-.1s.1-.1 .1-.1c58.3-3.5 108.6-43.2 125.3-99.7l81.2-275c5-16.9-4.7-34.7-21.6-39.8s-34.7 4.7-39.8 21.6L443.5 247.1c-1.6 5.3-6.4 8.9-12 8.9c-7.9 0-13.8-7.3-12.2-15.1l36-170.3c3.7-17.3-7.4-34.3-24.7-37.9s-34.3 7.4-37.9 24.7L355.1 235.1c-2.6 12.2-13.3 20.9-25.8 20.9c-11.9 0-22.4-8-25.4-19.5l-57-212.8z',
    ],
  };
  var faStopwatch = {
    prefix: 'fas',
    iconName: 'stopwatch',
    icon: [
      448,
      512,
      [9201],
      'f2f2',
      'M176 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h16V98.4C92.3 113.8 16 200 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-41.8-12.3-80.7-33.5-113.2l24.1-24.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L355.7 143c-28.1-23-62.2-38.8-99.7-44.6V64h16c17.7 0 32-14.3 32-32s-14.3-32-32-32H224 176zm72 192V320c0 13.3-10.7 24-24 24s-24-10.7-24-24V192c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faFaceKiss = {
    prefix: 'fas',
    iconName: 'face-kiss',
    icon: [
      512,
      512,
      [128535, 'kiss'],
      'f596',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm48.7-198.3c4.3 5.1 7.3 11.4 7.3 18.3s-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4c-2.7 1.5-5.7 3-8.7 4.3c3.1 1.3 6 2.7 8.7 4.3c6.6 3.7 12.5 8.2 16.7 13.4c4.3 5.1 7.3 11.4 7.3 18.3s-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4C274.7 443.1 257.4 448 240 448c-3.6 0-6.8-2.5-7.7-6s.6-7.2 3.8-9l0 0 0 0 0 0 0 0 .2-.1c.2-.1 .5-.3 .9-.5c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1c-.4-.2-.7-.4-.9-.5l-.2-.1 0 0 0 0 0 0c-2.5-1.4-4.1-4.1-4.1-7s1.6-5.6 4.1-7l0 0 0 0 0 0 0 0 0 0 .2-.1 .3-.2 .6-.4c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1l-.4-.3-.5-.3-.2-.1 0 0 0 0 0 0c-3.2-1.8-4.7-5.5-3.8-9s4.1-6 7.7-6c17.4 0 34.7 4.9 47.9 12.3c6.6 3.7 12.5 8.2 16.7 13.4zM208.4 208c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faKiss = faFaceKiss;
  var faBridgeCircleXmark = {
    prefix: 'fas',
    iconName: 'bridge-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e4cb',
      'M64 32C46.3 32 32 46.3 32 64s14.3 32 32 32h40v64H32V288c53 0 96 43 96 96v64c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V384c0-53 43-96 96-96c6.3 0 12.4 .6 18.3 1.7C367.1 231.8 426.9 192 496 192c42.5 0 81.6 15.1 112 40.2V160H536V96h40c17.7 0 32-14.3 32-32s-14.3-32-32-32H64zM488 96v64H408V96h80zM360 96v64H280V96h80zM232 96v64H152V96h80zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L518.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faFaceGrinTongue = {
    prefix: 'fas',
    iconName: 'face-grin-tongue',
    icon: [
      512,
      512,
      [128539, 'grin-tongue'],
      'f589',
      'M0 256C0 368.9 73.1 464.7 174.5 498.8C165.3 484 160 466.6 160 448V400.7c-24-17.5-43.1-41.4-54.8-69.2c-5-11.8 7-22.5 19.3-18.7c39.7 12.2 84.5 19 131.8 19s92.1-6.8 131.8-19c12.3-3.8 24.3 6.9 19.3 18.7c-11.8 28-31.1 52-55.4 69.6V448c0 18.6-5.3 36-14.5 50.8C438.9 464.7 512 368.9 512 256C512 114.6 397.4 0 256 0S0 114.6 0 256zm176.4-16c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm192-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM320 448V402.6c0-14.7-11.9-26.6-26.6-26.6h-2c-11.3 0-21.1 7.9-23.6 18.9c-2.8 12.6-20.8 12.6-23.6 0c-2.5-11.1-12.3-18.9-23.6-18.9h-2c-14.7 0-26.6 11.9-26.6 26.6V448c0 35.3 28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faGrinTongue = faFaceGrinTongue;
  var faChessBishop = {
    prefix: 'fas',
    iconName: 'chess-bishop',
    icon: [
      320,
      512,
      [9821],
      'f43a',
      'M128 0C110.3 0 96 14.3 96 32c0 16.1 11.9 29.4 27.4 31.7C78.4 106.8 8 190 8 288c0 47.4 30.8 72.3 56 84.7V416H256V372.7c25.2-12.5 56-37.4 56-84.7c0-37.3-10.2-72.4-25.3-104.1l-99.4 99.4c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L270.8 154.6c-23.2-38.1-51.8-69.5-74.2-90.9C212.1 61.4 224 48.1 224 32c0-17.7-14.3-32-32-32H128zM32 448c-17.7 0-32 14.3-32 32s14.3 32 32 32H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faFaceGrinWink = {
    prefix: 'fas',
    iconName: 'face-grin-wink',
    icon: [
      512,
      512,
      ['grin-wink'],
      'f58c',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM388.1 312.8c12.3-3.8 24.3 6.9 19.3 18.7C382.4 390.6 324.2 432 256.3 432s-126.2-41.4-151.1-100.5c-5-11.8 7-22.5 19.3-18.7c39.7 12.2 84.5 19 131.8 19s92.1-6.8 131.8-19zm-16.9-79.2c-17.6-23.5-52.8-23.5-70.4 0c-5.3 7.1-15.3 8.5-22.4 3.2s-8.5-15.3-3.2-22.4c30.4-40.5 91.2-40.5 121.6 0c5.3 7.1 3.9 17.1-3.2 22.4s-17.1 3.9-22.4-3.2zM176.4 240c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faGrinWink = faFaceGrinWink;
  var faEarDeaf = {
    prefix: 'fas',
    iconName: 'ear-deaf',
    icon: [
      512,
      512,
      ['deaf', 'deafness', 'hard-of-hearing'],
      'f2a4',
      'M502.6 54.6l-40 40c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l40-40c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3zm-320 320l-128 128c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l128-128c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3zM240 128c-57.6 0-105.1 43.6-111.3 99.5c-1.9 17.6-17.8 30.2-35.3 28.3s-30.2-17.8-28.3-35.3C74.8 132.5 149.4 64 240 64c97.2 0 176 78.8 176 176c0 46-17.7 87.9-46.6 119.3c-12 13-17.4 24.8-17.4 34.7V400c0 61.9-50.1 112-112 112c-17.7 0-32-14.3-32-32s14.3-32 32-32c26.5 0 48-21.5 48-48v-6.1c0-32.9 17.4-59.6 34.4-78c18.4-20 29.6-46.6 29.6-75.9c0-61.9-50.1-112-112-112zm0 80c-17.7 0-32 14.3-32 32c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-44.2 35.8-80 80-80s80 35.8 80 80c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-17.7-14.3-32-32-32z',
    ],
  };
  var faDeaf = faEarDeaf;
  var faDeafness = faEarDeaf;
  var faHardOfHearing = faEarDeaf;
  var faRoadCircleCheck = {
    prefix: 'fas',
    iconName: 'road-circle-check',
    icon: [
      640,
      512,
      [],
      'e564',
      'M213.2 32H288V96c0 17.7 14.3 32 32 32s32-14.3 32-32V32h74.8c27.1 0 51.3 17.1 60.3 42.6l42.7 120.6c-10.9-2.1-22.2-3.2-33.8-3.2c-59.5 0-112.1 29.6-144 74.8V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 17.7 14.3 32 32 32c2.3 0 4.6-.3 6.8-.7c-4.5 15.5-6.8 31.8-6.8 48.7c0 5.4 .2 10.7 .7 16l-.7 0c-17.7 0-32 14.3-32 32v64H86.6C56.5 480 32 455.5 32 425.4c0-6.2 1.1-12.4 3.1-18.2L152.9 74.6C162 49.1 186.1 32 213.2 32zM640 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-76.7-43.3c-6.2-6.2-16.4-6.2-22.6 0L480 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faDiceFive = {
    prefix: 'fas',
    iconName: 'dice-five',
    icon: [
      448,
      512,
      [9860],
      'f523',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm64 160c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm32 160c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm64-64c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM352 160c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM320 384c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faSquareRss = {
    prefix: 'fas',
    iconName: 'square-rss',
    icon: [
      448,
      512,
      ['rss-square'],
      'f143',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM96 136c0-13.3 10.7-24 24-24c137 0 248 111 248 248c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-110.5-89.5-200-200-200c-13.3 0-24-10.7-24-24zm0 96c0-13.3 10.7-24 24-24c83.9 0 152 68.1 152 152c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-57.4-46.6-104-104-104c-13.3 0-24-10.7-24-24zm64 120c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faRssSquare = faSquareRss;
  var faLandMineOn = {
    prefix: 'fas',
    iconName: 'land-mine-on',
    icon: [
      640,
      512,
      [],
      'e51b',
      'M344 24V168c0 13.3-10.7 24-24 24s-24-10.7-24-24V24c0-13.3 10.7-24 24-24s24 10.7 24 24zM192 320c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32v32H192V320zm-77.3 90.5c8.1-16.3 24.8-26.5 42.9-26.5H482.3c18.2 0 34.8 10.3 42.9 26.5l27.6 55.2C563.5 487 548 512 524.2 512H115.8c-23.8 0-39.3-25-28.6-46.3l27.6-55.2zM36.3 138.3c7.5-10.9 22.5-13.6 33.4-6.1l104 72c10.9 7.5 13.6 22.5 6.1 33.4s-22.5 13.6-33.4 6.1l-104-72c-10.9-7.5-13.6-22.5-6.1-33.4zm534.1-6.1c10.9-7.5 25.8-4.8 33.4 6.1s4.8 25.8-6.1 33.4l-104 72c-10.9 7.5-25.8 4.8-33.4-6.1s-4.8-25.8 6.1-33.4l104-72z',
    ],
  };
  var faICursor = {
    prefix: 'fas',
    iconName: 'i-cursor',
    icon: [
      256,
      512,
      [],
      'f246',
      'M.1 29.3C-1.4 47 11.7 62.4 29.3 63.9l8 .7C70.5 67.3 96 95 96 128.3V224H64c-17.7 0-32 14.3-32 32s14.3 32 32 32H96v95.7c0 33.3-25.5 61-58.7 63.8l-8 .7C11.7 449.6-1.4 465 .1 482.7s16.9 30.7 34.5 29.2l8-.7c34.1-2.8 64.2-18.9 85.4-42.9c21.2 24 51.2 40.1 85.4 42.9l8 .7c17.6 1.5 33.1-11.6 34.5-29.2s-11.6-33.1-29.2-34.5l-8-.7C185.5 444.7 160 417 160 383.7V288h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H160V128.3c0-33.3 25.5-61 58.7-63.8l8-.7c17.6-1.5 30.7-16.9 29.2-34.5S239-1.4 221.3 .1l-8 .7C179.2 3.6 149.2 19.7 128 43.7c-21.2-24-51.2-40-85.4-42.9l-8-.7C17-1.4 1.6 11.7 .1 29.3z',
    ],
  };
  var faStamp = {
    prefix: 'fas',
    iconName: 'stamp',
    icon: [
      512,
      512,
      [],
      'f5bf',
      'M312 201.8c0-17.4 9.2-33.2 19.9-47C344.5 138.5 352 118.1 352 96c0-53-43-96-96-96s-96 43-96 96c0 22.1 7.5 42.5 20.1 58.8c10.7 13.8 19.9 29.6 19.9 47c0 29.9-24.3 54.2-54.2 54.2H112C50.1 256 0 306.1 0 368c0 20.9 13.4 38.7 32 45.3V464c0 26.5 21.5 48 48 48H432c26.5 0 48-21.5 48-48V413.3c18.6-6.6 32-24.4 32-45.3c0-61.9-50.1-112-112-112H366.2c-29.9 0-54.2-24.3-54.2-54.2zM416 416v32H96V416H416z',
    ],
  };
  var faStairs = {
    prefix: 'fas',
    iconName: 'stairs',
    icon: [
      576,
      512,
      [],
      'e289',
      'M384 64c0-17.7 14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H448v96c0 17.7-14.3 32-32 32H320v96c0 17.7-14.3 32-32 32H192v96c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h96V320c0-17.7 14.3-32 32-32h96V192c0-17.7 14.3-32 32-32h96V64z',
    ],
  };
  var faI = {
    prefix: 'fas',
    iconName: 'i',
    icon: [
      320,
      512,
      [105],
      '49',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96h96V416H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H192V96h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H160 32z',
    ],
  };
  var faHryvniaSign = {
    prefix: 'fas',
    iconName: 'hryvnia-sign',
    icon: [
      384,
      512,
      [8372, 'hryvnia'],
      'f6f2',
      'M121.9 116.2C138.3 103.1 158.7 96 179.6 96H223c27.1 0 49 21.9 49 49c0 11.5-4 22.4-11.1 31H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H155.5l-50.6 28.9c-1.7 1-3.4 2-5.1 3.1H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H52.3c-2.8 9.9-4.3 20.4-4.3 31c0 62.4 50.6 113 113 113h43.4c35.5 0 70-12.1 97.7-34.3L308 441c13.8-11 16-31.2 5-45s-31.2-16-45-5l-5.9 4.7c-16.4 13.1-36.7 20.2-57.7 20.2H161c-27.1 0-49-21.9-49-49c0-11.5 4-22.4 11.1-31H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H228.5l50.6-28.9c1.7-1 3.4-2 5.1-3.1H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H331.7c2.8-10 4.3-20.4 4.3-31c0-62.4-50.6-113-113-113H179.6c-35.5 0-70 12.1-97.7 34.3L76 71c-13.8 11-16 31.2-5 45s31.2 16 45 5l5.9-4.7z',
    ],
  };
  var faHryvnia = faHryvniaSign;
  var faPills = {
    prefix: 'fas',
    iconName: 'pills',
    icon: [
      576,
      512,
      [],
      'f484',
      'M112 96c-26.5 0-48 21.5-48 48V256h96V144c0-26.5-21.5-48-48-48zM0 144C0 82.1 50.1 32 112 32s112 50.1 112 112V368c0 61.9-50.1 112-112 112S0 429.9 0 368V144zM554.9 399.4c-7.1 12.3-23.7 13.1-33.8 3.1L333.5 214.9c-10-10-9.3-26.7 3.1-33.8C360 167.7 387.1 160 416 160c88.4 0 160 71.6 160 160c0 28.9-7.7 56-21.1 79.4zm-59.5 59.5C472 472.3 444.9 480 416 480c-88.4 0-160-71.6-160-160c0-28.9 7.7-56 21.1-79.4c7.1-12.3 23.7-13.1 33.8-3.1L498.5 425.1c10 10 9.3 26.7-3.1 33.8z',
    ],
  };
  var faFaceGrinWide = {
    prefix: 'fas',
    iconName: 'face-grin-wide',
    icon: [
      512,
      512,
      [128515, 'grin-alt'],
      'f581',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM383.8 317.8c12.3-3.7 24.3 7 19.2 18.7c-24.5 56.9-81.1 96.7-147 96.7s-122.5-39.8-147-96.7c-5.1-11.8 6.9-22.4 19.2-18.7C166.7 329.4 210.1 336 256 336s89.3-6.6 127.8-18.2zM208 192c0 35.3-14.3 64-32 64s-32-28.7-32-64s14.3-64 32-64s32 28.7 32 64zm128 64c-17.7 0-32-28.7-32-64s14.3-64 32-64s32 28.7 32 64s-14.3 64-32 64z',
    ],
  };
  var faGrinAlt = faFaceGrinWide;
  var faTooth = {
    prefix: 'fas',
    iconName: 'tooth',
    icon: [
      384,
      512,
      [129463],
      'f5c9',
      'M154.1 52.1C137.3 39.1 116.7 32 95.5 32C42.7 32 0 74.7 0 127.5v6.2c0 15.8 3.7 31.3 10.7 45.5l23.5 47.1c4.5 8.9 7.6 18.4 9.4 28.2L80.4 460.2c2 11.2 11.6 19.4 22.9 19.8s21.4-7.4 24-18.4l28.9-121.3C160.2 323.7 175 312 192 312s31.8 11.7 35.8 28.3l28.9 121.3c2.6 11.1 12.7 18.8 24 18.4s20.9-8.6 22.9-19.8l36.7-205.8c1.8-9.8 4.9-19.3 9.4-28.2l23.5-47.1c7.1-14.1 10.7-29.7 10.7-45.5v-2.1c0-55-44.6-99.6-99.6-99.6c-24.1 0-47.4 8.8-65.6 24.6l-3.2 2.8 19.5 15.2c7 5.4 8.2 15.5 2.8 22.5s-15.5 8.2-22.5 2.8l-24.4-19-37-28.8z',
    ],
  };
  var faV = {
    prefix: 'fas',
    iconName: 'v',
    icon: [
      448,
      512,
      [118],
      '56',
      'M51.7 34.5c16.3-6.8 35 .9 41.8 17.2L224 364.8 354.5 51.7c6.8-16.3 25.5-24 41.8-17.2s24 25.5 17.2 41.8l-160 384c-5 11.9-16.6 19.7-29.5 19.7s-24.6-7.8-29.5-19.7l-160-384c-6.8-16.3 .9-35 17.2-41.8z',
    ],
  };
  var faBicycle = {
    prefix: 'fas',
    iconName: 'bicycle',
    icon: [
      640,
      512,
      [128690],
      'f206',
      'M312 32c-13.3 0-24 10.7-24 24s10.7 24 24 24h25.7l34.6 64H222.9l-27.4-38C191 99.7 183.7 96 176 96H120c-13.3 0-24 10.7-24 24s10.7 24 24 24h43.7l22.1 30.7-26.6 53.1c-10-2.5-20.5-3.8-31.2-3.8C57.3 224 0 281.3 0 352s57.3 128 128 128c65.3 0 119.1-48.9 127-112h49c8.5 0 16.3-4.5 20.7-11.8l84.8-143.5 21.7 40.1C402.4 276.3 384 312 384 352c0 70.7 57.3 128 128 128s128-57.3 128-128s-57.3-128-128-128c-13.5 0-26.5 2.1-38.7 6L375.4 48.8C369.8 38.4 359 32 347.2 32H312zM458.6 303.7l32.3 59.7c6.3 11.7 20.9 16 32.5 9.7s16-20.9 9.7-32.5l-32.3-59.7c3.6-.6 7.4-.9 11.2-.9c39.8 0 72 32.2 72 72s-32.2 72-72 72s-72-32.2-72-72c0-18.6 7-35.5 18.6-48.3zM133.2 368h65c-7.3 32.1-36 56-70.2 56c-39.8 0-72-32.2-72-72s32.2-72 72-72c1.7 0 3.4 .1 5.1 .2l-24.2 48.5c-9 18.1 4.1 39.4 24.3 39.4zm33.7-48l50.7-101.3 72.9 101.2-.1 .1H166.8zm90.6-128H365.9L317 274.8 257.4 192z',
    ],
  };
  var faStaffSnake = {
    prefix: 'fas',
    iconName: 'staff-snake',
    icon: [
      384,
      512,
      ['rod-asclepius', 'rod-snake', 'staff-aesculapius'],
      'e579',
      'M222.6 43.2l-.2 4.8H288c53 0 96 43 96 96s-43 96-96 96H248V160h40c8.8 0 16-7.2 16-16s-7.2-16-16-16H248 220l-4.5 144H256c53 0 96 43 96 96s-43 96-96 96H240V384h16c8.8 0 16-7.2 16-16s-7.2-16-16-16H213l-3.1 99.5L208.5 495l0 1c-.3 8.9-7.6 16-16.5 16s-16.2-7.1-16.5-16l0-1-1-31H136c-22.1 0-40-17.9-40-40s17.9-40 40-40h36l-1-32H152c-53 0-96-43-96-96c0-47.6 34.6-87.1 80-94.7V256c0 8.8 7.2 16 16 16h16.5L164 128H136 122.6c-9 18.9-28.3 32-50.6 32H56c-30.9 0-56-25.1-56-56S25.1 48 56 48h8 8 89.5l-.1-4.8L161 32c0-.7 0-1.3 0-1.9c.5-16.6 14.1-30 31-30s30.5 13.4 31 30c0 .6 0 1.3 0 1.9l-.4 11.2zM64 112c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faRodAsclepius = faStaffSnake;
  var faRodSnake = faStaffSnake;
  var faStaffAesculapius = faStaffSnake;
  var faHeadSideCoughSlash = {
    prefix: 'fas',
    iconName: 'head-side-cough-slash',
    icon: [
      640,
      512,
      [],
      'e062',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L440.3 319.8c22.3-2.1 39.7-20.8 39.7-43.7c0-10-3.4-19.6-9.6-27.4l-42-52.6c-8.3-10.3-12.8-23-15-36.1C398.2 69.3 319.2 0 224 0H201.7C157 0 115.7 14.5 82.2 39.2L38.8 5.1zM0 201.7c0 44.8 18.3 91.5 46.5 127.7C56.9 342.8 64 358.8 64 375.8V480c0 17.7 14.3 32 32 32H256c17.7 0 32-14.3 32-32h64c32.8 0 59.9-24.7 63.6-56.6l-9.4-7.4H352c-17.7 0-32-14.3-32-32c0-10.5 5.1-19.9 12.9-25.7L20.8 112.4C7.5 139.3 0 169.6 0 201.7zM632 288c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm-88 72c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm64 48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faTruckMedical = {
    prefix: 'fas',
    iconName: 'truck-medical',
    icon: [
      640,
      512,
      [128657, 'ambulance'],
      'f0f9',
      'M48 0C21.5 0 0 21.5 0 48V368c0 26.5 21.5 48 48 48H64c0 53 43 96 96 96s96-43 96-96H384c0 53 43 96 96 96s96-43 96-96h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V288 256 237.3c0-17-6.7-33.3-18.7-45.3L512 114.7c-12-12-28.3-18.7-45.3-18.7H416V48c0-26.5-21.5-48-48-48H48zM416 160h50.7L544 237.3V256H416V160zM208 416c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm272 48c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM112 144c0-8.8 7.2-16 16-16h48V80c0-8.8 7.2-16 16-16l32 0c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H240v48c0 8.8-7.2 16-16 16H192c-8.8 0-16-7.2-16-16V192H128c-8.8 0-16-7.2-16-16V144z',
    ],
  };
  var faAmbulance = faTruckMedical;
  var faWheatAwnCircleExclamation = {
    prefix: 'fas',
    iconName: 'wheat-awn-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e598',
      'M505 41c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L383 95c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l88-88zM305.5 27.3c-6.2-6.2-16.4-6.2-22.6 0L271.5 38.6c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4-30.5 30.5c-3.4-27.3-15.5-53.8-36.5-74.8l-11.3-11.3c-6.2-6.2-16.4-6.2-22.6 0l-11.3 11.3c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4-30.5 30.5c-3.4-27.3-15.5-53.8-36.5-74.8L101.8 231c-6.2-6.2-16.4-6.2-22.6 0L67.9 242.3c-37.5 37.5-37.5 98.3 0 135.8l10.4 10.4L9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l68.9-68.9 12.2 12.2c37.5 37.5 98.3 37.5 135.8 0l11.3-11.3c6.2-6.2 6.2-16.4 0-22.6l-11.3-11.3c-21.8-21.8-49.6-34.1-78.1-36.9l31.9-31.9 12.2 12.2c22.5 22.5 53.3 31.5 82.4 27c0-1 0-2.1 0-3.1c0-33.1 9.1-64.1 25-90.6c-15.5-8.7-32.5-13.8-49.8-15.5l31.9-31.9 12.2 12.2c6 6 12.6 11.1 19.7 15.2c27.5-34 67.3-57.5 112.6-63.8c-4.1-3.8-8.4-7.3-12.9-10.5L505 137c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-59.4 59.4c-20.6-4.4-42-3.7-62.3 2.1c6.1-21.3 6.6-43.8 1.4-65.3L409 41c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L329.1 52.9c-3.7-5-7.8-9.8-12.4-14.3L305.5 27.3zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faSnowman = {
    prefix: 'fas',
    iconName: 'snowman',
    icon: [
      576,
      512,
      [9731, 9924],
      'f7d0',
      'M373.1 140.6c-2 3.9-1.6 8.6 1.2 12c7 8.5 12.9 18.1 17.2 28.4L440 160.2V120c0-13.3 10.7-24 24-24s24 10.7 24 24v19.6l22.5-9.7c12.2-5.2 26.3 .4 31.5 12.6s-.4 26.3-12.6 31.5l-56 24-73.6 31.5c-.5 9.5-2.1 18.6-4.8 27.3c-1.2 3.8-.1 8 2.8 10.8C428.7 296.9 448 338.2 448 384c0 44.7-18.3 85-47.8 114.1c-9.9 9.7-23.7 13.9-37.5 13.9H213.3c-13.9 0-27.7-4.2-37.5-13.9C146.3 469 128 428.7 128 384c0-45.8 19.3-87.1 50.1-116.3c2.9-2.8 4-6.9 2.8-10.8c-2.7-8.7-4.3-17.9-4.8-27.3l-73.6-31.5-56-24c-12.2-5.2-17.8-19.3-12.6-31.5s19.3-17.8 31.5-12.6L88 139.6V120c0-13.3 10.7-24 24-24s24 10.7 24 24v40.2L184.6 181c4.3-10.3 10.1-19.9 17.2-28.4c2.8-3.4 3.3-8.1 1.2-12C196 127.2 192 112.1 192 96c0-53 43-96 96-96s96 43 96 96c0 16.1-4 31.2-10.9 44.6zM256 96c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm48 128c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm-16 80c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm16 48c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zM320 96c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm-48 24v3.2c0 3.2 .8 6.3 2.3 9l9 16.9c.9 1.7 2.7 2.8 4.7 2.8s3.8-1.1 4.7-2.8l9-16.9c1.5-2.8 2.3-5.9 2.3-9V120c0-8.8-7.2-16-16-16s-16 7.2-16 16z',
    ],
  };
  var faMortarPestle = {
    prefix: 'fas',
    iconName: 'mortar-pestle',
    icon: [
      512,
      512,
      [],
      'f5a7',
      'M504.3 11.1C493.3-1.6 474.5-3.7 461 6.2L252.3 160H397.3L502.6 54.6c11.8-11.8 12.6-30.8 1.6-43.5zM32 192c-17.7 0-32 14.3-32 32s14.3 32 32 32c0 82.5 43.4 147.7 123.9 176.2c-11.1 13.9-19.4 30.3-23.9 48.1C127.6 497.4 142.3 512 160 512H352c17.7 0 32.4-14.6 28.1-31.7c-4.5-17.8-12.8-34.1-23.9-48.1C436.6 403.7 480 338.5 480 256c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faRoadBarrier = {
    prefix: 'fas',
    iconName: 'road-barrier',
    icon: [
      640,
      512,
      [],
      'e562',
      'M32 32C14.3 32 0 46.3 0 64V448c0 17.7 14.3 32 32 32s32-14.3 32-32V266.3L149.2 96H64V64c0-17.7-14.3-32-32-32zM405.2 96H330.8l-5.4 10.7L234.8 288h74.3l5.4-10.7L405.2 96zM362.8 288h74.3l5.4-10.7L533.2 96H458.8l-5.4 10.7L362.8 288zM202.8 96l-5.4 10.7L106.8 288h74.3l5.4-10.7L277.2 96H202.8zm288 192H576V448c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32s-32 14.3-32 32v53.7L490.8 288z',
    ],
  };
  var faSchool = {
    prefix: 'fas',
    iconName: 'school',
    icon: [
      640,
      512,
      [127979],
      'f549',
      'M337.8 5.4C327-1.8 313-1.8 302.2 5.4l-139 92.7L37.6 126C15.6 130.9 0 150.3 0 172.8V464c0 26.5 21.5 48 48 48H592c26.5 0 48-21.5 48-48V172.8c0-22.5-15.6-42-37.6-46.9L476.8 98.1 337.8 5.4zM256 416c0-35.3 28.7-64 64-64s64 28.7 64 64v96H256V416zM96 192h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V208c0-8.8 7.2-16 16-16zm400 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H512c-8.8 0-16-7.2-16-16V208zM96 320h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16zm400 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H512c-8.8 0-16-7.2-16-16V336zM408 176c0 48.6-39.4 88-88 88s-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88zm-88-48c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H336V144c0-8.8-7.2-16-16-16z',
    ],
  };
  var faIgloo = {
    prefix: 'fas',
    iconName: 'igloo',
    icon: [
      576,
      512,
      [],
      'f7ae',
      'M320 33.8V160H48.5C100.2 82.8 188.1 32 288 32c10.8 0 21.5 .6 32 1.8zM352 160V39.1C424.9 55.7 487.2 99.8 527.5 160H352zM29.9 192H96V320H0c0-46 10.8-89.4 29.9-128zM192 320H128V192H448V320H384v32H576v80c0 26.5-21.5 48-48 48H352V352c0-35.3-28.7-64-64-64s-64 28.7-64 64V480H48c-26.5 0-48-21.5-48-48V352H192V320zm288 0V192h66.1c19.2 38.6 29.9 82 29.9 128H480z',
    ],
  };
  var faJoint = {
    prefix: 'fas',
    iconName: 'joint',
    icon: [
      640,
      512,
      [],
      'f595',
      'M448 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V43c0 55.2 21.9 108.1 60.9 147.1l21 21c9 9 14.1 21.2 14.1 33.9v11c0 17.7 14.3 32 32 32s32-14.3 32-32V245c0-29.7-11.8-58.2-32.8-79.2l-21-21C463.2 117.8 448 81.2 448 43V32zM576 256c0 17.7 14.3 32 32 32s32-14.3 32-32V245c0-55.2-21.9-108.1-60.9-147.1l-21-21c-9-9-14.1-21.2-14.1-33.9V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V43c0 29.7 11.8 58.2 32.8 79.2l21 21c27 27 42.2 63.6 42.2 101.8v11zM229.8 360c-4.7-2.3-10-2.7-15.2-2c-37.8 5.6-75.2 14.3-106.9 22.8C81.3 388 58.3 395.1 42 400.4c-8.2 2.7-14.7 4.9-19.2 6.5c-2.3 .8-4 1.4-5.2 1.8l-1.3 .5C6.8 412.5 0 421.4 0 432s6.8 19.5 16.3 22.7l1.3 .5c1.2 .4 3 1.1 5.2 1.8c4.5 1.6 11 3.8 19.2 6.5c16.3 5.4 39.2 12.5 65.7 19.6C160.3 497.3 228.8 512 288 512h67.3c4.1 0 6.3-5.1 3.6-8.3L256.5 380.8c-7.4-8.9-16.5-15.9-26.7-20.8zM445 512h19 51.3c4.1 0 6.3-5.1 3.6-8.3L416.5 380.8C401.3 362.5 378.8 352 355 352H336 288c-1.1 0-2.3 0-3.4 0c-4.1 0-6.2 5.1-3.5 8.3L383.5 483.2C398.7 501.5 421.2 512 445 512zm-3.9-151.7L543.5 483.2c14.6 17.5 35.9 27.9 58.6 28.7c21.1-1.1 37.9-18.6 37.9-39.9V392c0-22.1-17.9-40-40-40H444.7c-4.1 0-6.3 5.1-3.6 8.3z',
    ],
  };
  var faAngleRight = {
    prefix: 'fas',
    iconName: 'angle-right',
    icon: [
      320,
      512,
      [8250],
      'f105',
      'M278.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-160 160c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 73.4 118.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l160 160z',
    ],
  };
  var faHorse = {
    prefix: 'fas',
    iconName: 'horse',
    icon: [
      576,
      512,
      [128014],
      'f6f0',
      'M448 238.1V160h16l9.8 19.6c12.5 25.1 42.2 36.4 68.3 26c20.5-8.2 33.9-28 33.9-50.1V80c0-19.1-8.4-36.3-21.7-48H560c8.8 0 16-7.2 16-16s-7.2-16-16-16H480 448C377.3 0 320 57.3 320 128H224 203.2 148.8c-30.7 0-57.6 16.3-72.5 40.8C33.2 174.5 0 211.4 0 256v56c0 13.3 10.7 24 24 24s24-10.7 24-24V256c0-13.4 6.6-25.2 16.7-32.5c1.6 13 6.3 25.4 13.6 36.4l28.2 42.4c8.3 12.4 6.4 28.7-1.2 41.6c-16.5 28-20.6 62.2-10 93.9l17.5 52.4c4.4 13.1 16.6 21.9 30.4 21.9h33.7c21.8 0 37.3-21.4 30.4-42.1l-20.8-62.5c-2.1-6.4-.5-13.4 4.3-18.2l12.7-12.7c13.2-13.2 20.6-31.1 20.6-49.7c0-2.3-.1-4.6-.3-6.9l84 24c4.1 1.2 8.2 2.1 12.3 2.8V480c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V315.7c19.2-19.2 31.5-45.7 32-75.7h0v-1.9zM496 96c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faQ = {
    prefix: 'fas',
    iconName: 'q',
    icon: [
      512,
      512,
      [113],
      '51',
      'M96 256c0 88.4 71.6 160 160 160c28.9 0 56-7.7 79.4-21.1l-72-86.4c-11.3-13.6-9.5-33.8 4.1-45.1s33.8-9.5 45.1 4.1l70.9 85.1C403.9 325.8 416 292.3 416 256c0-88.4-71.6-160-160-160S96 167.6 96 256zM376.9 444.6C342 467 300.5 480 256 480C132.3 480 32 379.7 32 256S132.3 32 256 32s224 100.3 224 224c0 56.1-20.6 107.4-54.7 146.7l47.3 56.8c11.3 13.6 9.5 33.8-4.1 45.1s-33.8 9.5-45.1-4.1l-46.6-55.9z',
    ],
  };
  var faG = {
    prefix: 'fas',
    iconName: 'g',
    icon: [
      448,
      512,
      [103],
      '47',
      'M224 96C135.6 96 64 167.6 64 256s71.6 160 160 160c77.4 0 142-55 156.8-128H256c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32c0 123.7-100.3 224-224 224S0 379.7 0 256S100.3 32 224 32c57.4 0 109.7 21.6 149.3 57c13.2 11.8 14.3 32 2.5 45.2s-32 14.3-45.2 2.5C302.3 111.4 265 96 224 96z',
    ],
  };
  var faNotesMedical = {
    prefix: 'fas',
    iconName: 'notes-medical',
    icon: [
      512,
      512,
      [],
      'f481',
      'M96 352V96c0-35.3 28.7-64 64-64H416c35.3 0 64 28.7 64 64V293.5c0 17-6.7 33.3-18.7 45.3l-58.5 58.5c-12 12-28.3 18.7-45.3 18.7H160c-35.3 0-64-28.7-64-64zM272 128c-8.8 0-16 7.2-16 16v48H208c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V256h48c8.8 0 16-7.2 16-16V208c0-8.8-7.2-16-16-16H320V144c0-8.8-7.2-16-16-16H272zm24 336c13.3 0 24 10.7 24 24s-10.7 24-24 24H136C60.9 512 0 451.1 0 376V152c0-13.3 10.7-24 24-24s24 10.7 24 24l0 224c0 48.6 39.4 88 88 88H296z',
    ],
  };
  var faTemperatureHalf = {
    prefix: 'fas',
    iconName: 'temperature-half',
    icon: [
      320,
      512,
      [127777, 'temperature-2', 'thermometer-2', 'thermometer-half'],
      'f2c9',
      'M160 64c-26.5 0-48 21.5-48 48V276.5c0 17.3-7.1 31.9-15.3 42.5C86.2 332.6 80 349.5 80 368c0 44.2 35.8 80 80 80s80-35.8 80-80c0-18.5-6.2-35.4-16.7-48.9c-8.2-10.6-15.3-25.2-15.3-42.5V112c0-26.5-21.5-48-48-48zM48 112C48 50.2 98.1 0 160 0s112 50.1 112 112V276.5c0 .1 .1 .3 .2 .6c.2 .6 .8 1.6 1.7 2.8c18.9 24.4 30.1 55 30.1 88.1c0 79.5-64.5 144-144 144S16 447.5 16 368c0-33.2 11.2-63.8 30.1-88.1c.9-1.2 1.5-2.2 1.7-2.8c.1-.3 .2-.5 .2-.6V112zM208 368c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-20.9 13.4-38.7 32-45.3V200c0-8.8 7.2-16 16-16s16 7.2 16 16V322.7c18.6 6.6 32 24.4 32 45.3z',
    ],
  };
  var faTemperature2 = faTemperatureHalf;
  var faThermometer2 = faTemperatureHalf;
  var faThermometerHalf = faTemperatureHalf;
  var faDongSign = {
    prefix: 'fas',
    iconName: 'dong-sign',
    icon: [
      384,
      512,
      [],
      'e169',
      'M288 32c-17.7 0-32 14.3-32 32l-32 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h32v49.1c-18.8-10.9-40.7-17.1-64-17.1c-70.7 0-128 57.3-128 128s57.3 128 128 128c24.5 0 47.4-6.9 66.8-18.8c5 11.1 16.2 18.8 29.2 18.8c17.7 0 32-14.3 32-32V288 128c17.7 0 32-14.3 32-32s-14.3-32-32-32c0-17.7-14.3-32-32-32zM256 288c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM32 448c-17.7 0-32 14.3-32 32s14.3 32 32 32H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faCapsules = {
    prefix: 'fas',
    iconName: 'capsules',
    icon: [
      576,
      512,
      [],
      'f46b',
      'M64 144c0-26.5 21.5-48 48-48s48 21.5 48 48V256H64V144zM0 144V368c0 61.9 50.1 112 112 112s112-50.1 112-112V189.6c1.8 19.1 8.2 38 19.8 54.8L372.3 431.7c35.5 51.7 105.3 64.3 156 28.1s63-107.5 27.5-159.2L427.3 113.3C391.8 61.5 321.9 49 271.3 85.2c-28 20-44.3 50.8-47.3 83V144c0-61.9-50.1-112-112-112S0 82.1 0 144zm296.6 64.2c-16-23.3-10-55.3 11.9-71c21.2-15.1 50.5-10.3 66 12.2l67 97.6L361.6 303l-65-94.8zM491 407.7c-.8 .6-1.6 1.1-2.4 1.6l4-2.8c-.5 .4-1 .8-1.6 1.2z',
    ],
  };
  var faPooStorm = {
    prefix: 'fas',
    iconName: 'poo-storm',
    icon: [
      448,
      512,
      ['poo-bolt'],
      'f75a',
      'M236.9 .2c-5.5-.7-11 1.4-14.5 5.7s-4.6 10.1-2.8 15.3c2.8 8.2 4.3 16.9 4.3 26.1c0 44.3-35.8 80.1-80 80.1c-1.4 0-2.8 .2-4 .5H128c-35.3 0-64 28.7-64 64c0 12.4 3.5 24 9.7 33.8C31.6 234.3 0 271.5 0 316c0 49.1 38.5 89.2 86.9 91.9c-1.8-2.9-3.4-6.1-4.5-9.4c-6-17.5-.5-36.9 13.6-48.5L238.2 233.6c15.6-12.8 37.9-12.7 53.5 .1s20.3 35.1 11.3 53.4l-26 53.2h16.3c18.1 0 34.3 11.7 40.3 29.2c4.5 13.1 2.6 27.3-4.6 38.4h27c50.8 0 92-41.2 92-92c0-44.5-31.6-81.7-73.7-90.2c6.1-9.8 9.7-21.4 9.7-33.8c0-35.3-28.7-64-64-64h-5.7c3.7-10.2 5.7-21.1 5.7-32.6c0-48.7-36.1-88.9-83.1-95.2zm34.2 259.2c-6-4.6-14.3-4.4-20.1 .4l-133.4 112c-5.2 4.3-7 11.4-4.7 17.7s8.3 10.5 15 10.5h54.7l-42.5 89.1c-3.2 6.8-1.3 14.9 4.7 19.5s14.3 4.4 20.1-.4l133.4-112c5.1-4.3 7-11.4 4.7-17.7s-8.3-10.5-15-10.5H233.3l42.5-89.1c3.2-6.8 1.3-14.9-4.7-19.5z',
    ],
  };
  var faPooBolt = faPooStorm;
  var faFaceFrownOpen = {
    prefix: 'fas',
    iconName: 'face-frown-open',
    icon: [
      512,
      512,
      [128550, 'frown-open'],
      'f57a',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM176.4 240c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm192-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm-186 174.5c-12.4 5.2-26.5-4.1-21.1-16.4c16-36.6 52.4-62.1 94.8-62.1s78.8 25.6 94.8 62.1c5.4 12.3-8.7 21.6-21.1 16.4c-22.4-9.5-47.4-14.8-73.7-14.8s-51.3 5.3-73.7 14.8z',
    ],
  };
  var faFrownOpen = faFaceFrownOpen;
  var faHandPointUp = {
    prefix: 'fas',
    iconName: 'hand-point-up',
    icon: [
      384,
      512,
      [9757],
      'f0a6',
      'M32 32C32 14.3 46.3 0 64 0S96 14.3 96 32V240H32V32zM224 192c0-17.7 14.3-32 32-32s32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V192zm-64-64c17.7 0 32 14.3 32 32v48c0 17.7-14.3 32-32 32s-32-14.3-32-32V160c0-17.7 14.3-32 32-32zm160 96c0-17.7 14.3-32 32-32s32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V224zm-96 88l0-.6c9.4 5.4 20.3 8.6 32 8.6c13.2 0 25.4-4 35.6-10.8c8.7 24.9 32.5 42.8 60.4 42.8c11.7 0 22.6-3.1 32-8.6V352c0 88.4-71.6 160-160 160H162.3c-42.4 0-83.1-16.9-113.1-46.9L37.5 453.5C13.5 429.5 0 396.9 0 363V336c0-35.3 28.7-64 64-64h88c22.1 0 40 17.9 40 40s-17.9 40-40 40H96c-8.8 0-16 7.2-16 16s7.2 16 16 16h56c39.8 0 72-32.2 72-72z',
    ],
  };
  var faMoneyBill = {
    prefix: 'fas',
    iconName: 'money-bill',
    icon: [
      576,
      512,
      [],
      'f0d6',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm64 320H64V320c35.3 0 64 28.7 64 64zM64 192V128h64c0 35.3-28.7 64-64 64zM448 384c0-35.3 28.7-64 64-64v64H448zm64-192c-35.3 0-64-28.7-64-64h64v64zM288 352c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z',
    ],
  };
  var faBookmark = {
    prefix: 'fas',
    iconName: 'bookmark',
    icon: [
      384,
      512,
      [128278, 61591],
      'f02e',
      'M0 48V487.7C0 501.1 10.9 512 24.3 512c5 0 9.9-1.5 14-4.4L192 400 345.7 507.6c4.1 2.9 9 4.4 14 4.4c13.4 0 24.3-10.9 24.3-24.3V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48z',
    ],
  };
  var faAlignJustify = {
    prefix: 'fas',
    iconName: 'align-justify',
    icon: [
      448,
      512,
      [],
      'f039',
      'M448 64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32zm0 256c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32zM0 192c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32zM448 448c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32z',
    ],
  };
  var faUmbrellaBeach = {
    prefix: 'fas',
    iconName: 'umbrella-beach',
    icon: [
      576,
      512,
      [127958],
      'f5ca',
      'M346.3 271.8l-60.1-21.9L214 448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H282.1l64.1-176.2zm121.1-.2l-3.3 9.1 67.7 24.6c18.1 6.6 38-4.2 39.6-23.4c6.5-78.5-23.9-155.5-80.8-208.5c2 8 3.2 16.3 3.4 24.8l.2 6c1.8 57-7.3 113.8-26.8 167.4zM462 99.1c-1.1-34.4-22.5-64.8-54.4-77.4c-.9-.4-1.9-.7-2.8-1.1c-33-11.7-69.8-2.4-93.1 23.8l-4 4.5C272.4 88.3 245 134.2 226.8 184l-3.3 9.1L434 269.7l3.3-9.1c18.1-49.8 26.6-102.5 24.9-155.5l-.2-6zM107.2 112.9c-11.1 15.7-2.8 36.8 15.3 43.4l71 25.8 3.3-9.1c19.5-53.6 49.1-103 87.1-145.5l4-4.5c6.2-6.9 13.1-13 20.5-18.2c-79.6 2.5-154.7 42.2-201.2 108z',
    ],
  };
  var faHelmetUn = {
    prefix: 'fas',
    iconName: 'helmet-un',
    icon: [
      512,
      512,
      [],
      'e503',
      'M479.5 224C471.2 98.9 367.2 0 240 0C107.5 0 0 107.5 0 240v56.3C0 344.8 39.2 384 87.7 384H200h14.9L343.5 505.4c4.5 4.2 10.4 6.6 16.5 6.6h96c13.3 0 24-10.7 24-24s-10.7-24-24-24H369.5l-1.5-1.5V288h80 32c17.7 0 32-14.3 32-32s-14.3-32-32-32h-.5zM320 417.2l-78-73.7L274.4 288H320V417.2zM285.3 103.1l34.7 52V112c0-8.8 7.2-16 16-16s16 7.2 16 16v96c0 7.1-4.6 13.3-11.4 15.3s-14-.6-17.9-6.4l-34.7-52V208c0 8.8-7.2 16-16 16s-16-7.2-16-16V112c0-7.1 4.6-13.3 11.4-15.3s14 .6 17.9 6.4zM160 112v64c0 8.8 7.2 16 16 16s16-7.2 16-16V112c0-8.8 7.2-16 16-16s16 7.2 16 16v64c0 26.5-21.5 48-48 48s-48-21.5-48-48V112c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faBullseye = {
    prefix: 'fas',
    iconName: 'bullseye',
    icon: [
      512,
      512,
      [],
      'f140',
      'M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192s192-86 192-192zm64 0c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 336c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zm0 64c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm32-144c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faBacon = {
    prefix: 'fas',
    iconName: 'bacon',
    icon: [
      576,
      512,
      [129363],
      'f7e5',
      'M439.2 1.2c11.2-3.2 23.2-.1 31.4 8.1L518 56.7l-26.5 7.9c-58 16.6-98.1 39.6-129.6 67.4c-31.2 27.5-53.2 59.1-75.1 90.9l-2.3 3.3C241.6 288.7 195 356.6 72.8 417.7L37.9 435.2 9.4 406.6c-7.3-7.3-10.6-17.6-9-27.8s8.1-18.9 17.3-23.5C136.1 296.2 180.9 231 223.3 169.3l2.3-3.4c21.8-31.8 44.9-64.9 77.7-93.9c33.4-29.5 75.8-53.6 135.9-70.8zM61.8 459l25.4-12.7c129.5-64.7 179.9-138.1 223.8-202l2.2-3.3c22.1-32.1 42.1-60.5 69.9-85.1c27.5-24.3 63.4-45.2 117.3-60.6l0 0 .2-.1 43.1-12.9 23 23c8 8 11.2 19.7 8.3 30.7s-11.3 19.6-22.2 22.7c-51.9 14.8-85.6 34.7-111.1 57.2c-26.1 23-45.1 49.9-67.3 82.1l-2.2 3.2C327.8 365.9 275.5 442 142.3 508.6c-12.3 6.2-27.2 3.7-36.9-6L61.8 459z',
    ],
  };
  var faHandPointDown = {
    prefix: 'fas',
    iconName: 'hand-point-down',
    icon: [
      384,
      512,
      [],
      'f0a7',
      'M32 480c0 17.7 14.3 32 32 32s32-14.3 32-32V272H32V480zM224 320c0 17.7 14.3 32 32 32s32-14.3 32-32V256c0-17.7-14.3-32-32-32s-32 14.3-32 32v64zm-64 64c17.7 0 32-14.3 32-32V304c0-17.7-14.3-32-32-32s-32 14.3-32 32v48c0 17.7 14.3 32 32 32zm160-96c0 17.7 14.3 32 32 32s32-14.3 32-32V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v64zm-96-88l0 .6c9.4-5.4 20.3-8.6 32-8.6c13.2 0 25.4 4 35.6 10.8c8.7-24.9 32.5-42.8 60.4-42.8c11.7 0 22.6 3.1 32 8.6V160C384 71.6 312.4 0 224 0H162.3C119.8 0 79.1 16.9 49.1 46.9L37.5 58.5C13.5 82.5 0 115.1 0 149v27c0 35.3 28.7 64 64 64h88c22.1 0 40-17.9 40-40s-17.9-40-40-40H96c-8.8 0-16-7.2-16-16s7.2-16 16-16h56c39.8 0 72 32.2 72 72z',
    ],
  };
  var faArrowUpFromBracket = {
    prefix: 'fas',
    iconName: 'arrow-up-from-bracket',
    icon: [
      448,
      512,
      [],
      'e09a',
      'M246.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 109.3V320c0 17.7 14.3 32 32 32s32-14.3 32-32V109.3l73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 53 43 96 96 96H352c53 0 96-43 96-96V352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V352z',
    ],
  };
  var faFolder = {
    prefix: 'fas',
    iconName: 'folder',
    icon: [
      512,
      512,
      [128193, 128447, 61716, 'folder-blank'],
      'f07b',
      'M64 480H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H298.5c-17 0-33.3-6.7-45.3-18.7L226.7 50.7c-12-12-28.3-18.7-45.3-18.7H64C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64z',
    ],
  };
  var faFolderBlank = faFolder;
  var faFileWaveform = {
    prefix: 'fas',
    iconName: 'file-waveform',
    icon: [
      384,
      512,
      ['file-medical-alt'],
      'f478',
      'M64 0C28.7 0 0 28.7 0 64V288H112c6.1 0 11.6 3.4 14.3 8.8L144 332.2l49.7-99.4c2.7-5.4 8.2-8.8 14.3-8.8s11.6 3.4 14.3 8.8L249.9 288H320c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-6.1 0-11.6-3.4-14.3-8.8L208 275.8l-49.7 99.4c-2.7 5.4-8.3 8.8-14.3 8.8s-11.6-3.4-14.3-8.8L102.1 320H0V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0z',
    ],
  };
  var faFileMedicalAlt = faFileWaveform;
  var faRadiation = {
    prefix: 'fas',
    iconName: 'radiation',
    icon: [
      512,
      512,
      [],
      'f7b9',
      'M216 186.7c-23.9 13.8-40 39.7-40 69.3L32 256C14.3 256-.2 241.6 2 224.1C10.7 154 47.8 92.7 101.3 52c14.1-10.7 33.8-5.3 42.7 10l72 124.7zM256 336c14.6 0 28.2-3.9 40-10.7l72 124.8c8.8 15.3 3.7 35.1-12.6 41.9c-30.6 12.9-64.2 20-99.4 20s-68.9-7.1-99.4-20c-16.3-6.9-21.4-26.6-12.6-41.9l72-124.8c11.8 6.8 25.4 10.7 40 10.7zm224-80l-144 0c0-29.6-16.1-55.5-40-69.3L368 62c8.8-15.3 28.6-20.7 42.7-10c53.6 40.7 90.6 102 99.4 172.1c2.2 17.5-12.4 31.9-30 31.9zM256 304c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faChartSimple = {
    prefix: 'fas',
    iconName: 'chart-simple',
    icon: [
      448,
      512,
      [],
      'e473',
      'M160 80c0-26.5 21.5-48 48-48h32c26.5 0 48 21.5 48 48V432c0 26.5-21.5 48-48 48H208c-26.5 0-48-21.5-48-48V80zM0 272c0-26.5 21.5-48 48-48H80c26.5 0 48 21.5 48 48V432c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V272zM368 96h32c26.5 0 48 21.5 48 48V432c0 26.5-21.5 48-48 48H368c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48z',
    ],
  };
  var faMarsStroke = {
    prefix: 'fas',
    iconName: 'mars-stroke',
    icon: [
      512,
      512,
      [9894],
      'f229',
      'M376 0c-9.7 0-18.5 5.8-22.2 14.8s-1.7 19.3 5.2 26.2l33.4 33.4L370.3 96.4 345 71c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l25.4 25.4L307.8 159c-28.4-19.5-62.7-31-99.8-31c-97.2 0-176 78.8-176 176s78.8 176 176 176s176-78.8 176-176c0-37-11.4-71.4-31-99.8l28.6-28.6L407 201c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-25.4-25.4 22.1-22.1L471 153c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V24c0-13.3-10.7-24-24-24H376zm88 48h0v0l0 0zM320 304c0 61.9-50.1 112-112 112s-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112z',
    ],
  };
  var faVial = {
    prefix: 'fas',
    iconName: 'vial',
    icon: [
      512,
      512,
      [129514],
      'f492',
      'M342.6 9.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l9.4 9.4L28.1 342.6C10.1 360.6 0 385 0 410.5V416c0 53 43 96 96 96h5.5c25.5 0 49.9-10.1 67.9-28.1L448 205.3l9.4 9.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-32-32-96-96-32-32zM205.3 256L352 109.3 402.7 160l-96 96H205.3z',
    ],
  };
  var faGauge = {
    prefix: 'fas',
    iconName: 'gauge',
    icon: [
      512,
      512,
      ['dashboard', 'gauge-med', 'tachometer-alt-average'],
      'f624',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM320 352c0-26.9-16.5-49.9-40-59.3V88c0-13.3-10.7-24-24-24s-24 10.7-24 24V292.7c-23.5 9.5-40 32.5-40 59.3c0 35.3 28.7 64 64 64s64-28.7 64-64zM144 176c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm-16 80c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm288 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM400 144c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faDashboard = faGauge;
  var faGaugeMed = faGauge;
  var faTachometerAltAverage = faGauge;
  var faWandMagicSparkles = {
    prefix: 'fas',
    iconName: 'wand-magic-sparkles',
    icon: [
      576,
      512,
      ['magic-wand-sparkles'],
      'e2ca',
      'M234.7 42.7L197 56.8c-3 1.1-5 4-5 7.2s2 6.1 5 7.2l37.7 14.1L248.8 123c1.1 3 4 5 7.2 5s6.1-2 7.2-5l14.1-37.7L315 71.2c3-1.1 5-4 5-7.2s-2-6.1-5-7.2L277.3 42.7 263.2 5c-1.1-3-4-5-7.2-5s-6.1 2-7.2 5L234.7 42.7zM46.1 395.4c-18.7 18.7-18.7 49.1 0 67.9l34.6 34.6c18.7 18.7 49.1 18.7 67.9 0L529.9 116.5c18.7-18.7 18.7-49.1 0-67.9L495.3 14.1c-18.7-18.7-49.1-18.7-67.9 0L46.1 395.4zM484.6 82.6l-105 105-23.3-23.3 105-105 23.3 23.3zM7.5 117.2C3 118.9 0 123.2 0 128s3 9.1 7.5 10.8L64 160l21.2 56.5c1.7 4.5 6 7.5 10.8 7.5s9.1-3 10.8-7.5L128 160l56.5-21.2c4.5-1.7 7.5-6 7.5-10.8s-3-9.1-7.5-10.8L128 96 106.8 39.5C105.1 35 100.8 32 96 32s-9.1 3-10.8 7.5L64 96 7.5 117.2zm352 256c-4.5 1.7-7.5 6-7.5 10.8s3 9.1 7.5 10.8L416 416l21.2 56.5c1.7 4.5 6 7.5 10.8 7.5s9.1-3 10.8-7.5L480 416l56.5-21.2c4.5-1.7 7.5-6 7.5-10.8s-3-9.1-7.5-10.8L480 352l-21.2-56.5c-1.7-4.5-6-7.5-10.8-7.5s-9.1 3-10.8 7.5L416 352l-56.5 21.2z',
    ],
  };
  var faMagicWandSparkles = faWandMagicSparkles;
  var faE = {
    prefix: 'fas',
    iconName: 'e',
    icon: [
      320,
      512,
      [101],
      '45',
      'M32 32C14.3 32 0 46.3 0 64V256 448c0 17.7 14.3 32 32 32H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V288H224c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V96H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faPenClip = {
    prefix: 'fas',
    iconName: 'pen-clip',
    icon: [
      512,
      512,
      ['pen-alt'],
      'f305',
      'M453.3 19.3l39.4 39.4c25 25 25 65.5 0 90.5l-52.1 52.1 0 0-1-1 0 0-16-16-96-96-17-17 52.1-52.1c25-25 65.5-25 90.5 0zM241 114.9c-9.4-9.4-24.6-9.4-33.9 0L105 217c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L173.1 81c28.1-28.1 73.7-28.1 101.8 0L288 94.1l17 17 96 96 16 16 1 1-17 17L229.5 412.5c-48 48-109.2 80.8-175.8 94.1l-25 5c-7.9 1.6-16-.9-21.7-6.6s-8.1-13.8-6.6-21.7l5-25c13.3-66.6 46.1-127.8 94.1-175.8L254.1 128 241 114.9z',
    ],
  };
  var faPenAlt = faPenClip;
  var faBridgeCircleExclamation = {
    prefix: 'fas',
    iconName: 'bridge-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e4ca',
      'M64 32C46.3 32 32 46.3 32 64s14.3 32 32 32h40v64H32V288c53 0 96 43 96 96v64c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V384c0-53 43-96 96-96c6.3 0 12.4 .6 18.3 1.7C367.1 231.8 426.9 192 496 192c42.5 0 81.6 15.1 112 40.2V160H536V96h40c17.7 0 32-14.3 32-32s-14.3-32-32-32H64zM488 96v64H408V96h80zM360 96v64H280V96h80zM232 96v64H152V96h80zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faUser = {
    prefix: 'fas',
    iconName: 'user',
    icon: [
      448,
      512,
      [128100, 62144],
      'f007',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z',
    ],
  };
  var faSchoolCircleCheck = {
    prefix: 'fas',
    iconName: 'school-circle-check',
    icon: [
      640,
      512,
      [],
      'e56b',
      'M337.8 5.4C327-1.8 313-1.8 302.2 5.4l-139 92.7L37.6 126C15.6 130.9 0 150.3 0 172.8V464c0 26.5 21.5 48 48 48H320v0H256V416c0-35.3 28.7-64 64-64l.3 0h.5c3.4-37.7 18.7-72.1 42.2-99.1C350.2 260 335.6 264 320 264c-48.6 0-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88c0 18.3-5.6 35.3-15.1 49.4c29-21 64.6-33.4 103.1-33.4c59.5 0 112.1 29.6 144 74.8V172.8c0-22.5-15.6-42-37.6-46.9L476.8 98.1 337.8 5.4zM96 192h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V208c0-8.8 7.2-16 16-16zm0 128h32c8.8 0 16 7.2 16 16v64c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16zM320 128c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H336V144c0-8.8-7.2-16-16-16zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-99.3-43.3c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7z',
    ],
  };
  var faDumpster = {
    prefix: 'fas',
    iconName: 'dumpster',
    icon: [
      576,
      512,
      [],
      'f793',
      'M49.7 32c-10.5 0-19.8 6.9-22.9 16.9L.9 133c-.6 2-.9 4.1-.9 6.1C0 150.7 9.3 160 20.9 160h94L140.5 32H49.7zM272 160V32H173.1L147.5 160H272zm32 0H428.5L402.9 32H304V160zm157.1 0h94c11.5 0 20.9-9.3 20.9-20.9c0-2.1-.3-4.1-.9-6.1L549.2 48.9C546.1 38.9 536.8 32 526.3 32H435.5l25.6 128zM32 192l4 32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H44L64 448c0 17.7 14.3 32 32 32s32-14.3 32-32H448c0 17.7 14.3 32 32 32s32-14.3 32-32l20-160h12c17.7 0 32-14.3 32-32s-14.3-32-32-32h-4l4-32H32z',
    ],
  };
  var faVanShuttle = {
    prefix: 'fas',
    iconName: 'van-shuttle',
    icon: [
      640,
      512,
      [128656, 'shuttle-van'],
      'f5b6',
      'M64 104v88h96V96H72c-4.4 0-8 3.6-8 8zm482 88L465.1 96H384v96H546zm-226 0V96H224v96h96zM592 384H576c0 53-43 96-96 96s-96-43-96-96H256c0 53-43 96-96 96s-96-43-96-96H48c-26.5 0-48-21.5-48-48V104C0 64.2 32.2 32 72 32H192 352 465.1c18.9 0 36.8 8.3 49 22.8L625 186.5c9.7 11.5 15 26.1 15 41.2V336c0 26.5-21.5 48-48 48zm-64 0c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM160 432c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faShuttleVan = faVanShuttle;
  var faBuildingUser = {
    prefix: 'fas',
    iconName: 'building-user',
    icon: [
      640,
      512,
      [],
      'e4da',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h89.9c-6.3-10.2-9.9-22.2-9.9-35.1c0-46.9 25.8-87.8 64-109.2V271.8 48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM576 272c0-44.2-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80s80-35.8 80-80zM352 477.1c0 19.3 15.6 34.9 34.9 34.9H605.1c19.3 0 34.9-15.6 34.9-34.9c0-51.4-41.7-93.1-93.1-93.1H445.1c-51.4 0-93.1 41.7-93.1 93.1z',
    ],
  };
  var faSquareCaretLeft = {
    prefix: 'fas',
    iconName: 'square-caret-left',
    icon: [
      448,
      512,
      ['caret-square-left'],
      'f191',
      'M0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416zM128 256c0-6.7 2.8-13 7.7-17.6l112-104c7-6.5 17.2-8.2 25.9-4.4s14.4 12.5 14.4 22l0 208c0 9.5-5.7 18.2-14.4 22s-18.9 2.1-25.9-4.4l-112-104c-4.9-4.5-7.7-10.9-7.7-17.6z',
    ],
  };
  var faCaretSquareLeft = faSquareCaretLeft;
  var faHighlighter = {
    prefix: 'fas',
    iconName: 'highlighter',
    icon: [
      576,
      512,
      [],
      'f591',
      'M331 315l158.4-215L460.1 70.6 245 229 331 315zm-187 5l0 0V248.3c0-15.3 7.2-29.6 19.5-38.6L436.6 8.4C444 2.9 453 0 462.2 0c11.4 0 22.4 4.5 30.5 12.6l54.8 54.8c8.1 8.1 12.6 19 12.6 30.5c0 9.2-2.9 18.2-8.4 25.6L350.4 396.5c-9 12.3-23.4 19.5-38.6 19.5H240l-25.4 25.4c-12.5 12.5-32.8 12.5-45.3 0l-50.7-50.7c-12.5-12.5-12.5-32.8 0-45.3L144 320zM23 466.3l63-63 70.6 70.6-31 31c-4.5 4.5-10.6 7-17 7H40c-13.3 0-24-10.7-24-24v-4.7c0-6.4 2.5-12.5 7-17z',
    ],
  };
  var faKey = {
    prefix: 'fas',
    iconName: 'key',
    icon: [
      512,
      512,
      [128273],
      'f084',
      'M336 352c97.2 0 176-78.8 176-176S433.2 0 336 0S160 78.8 160 176c0 18.7 2.9 36.8 8.3 53.7L7 391c-4.5 4.5-7 10.6-7 17v80c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V448h40c13.3 0 24-10.7 24-24V384h40c6.4 0 12.5-2.5 17-7l33.3-33.3c16.9 5.4 35 8.3 53.7 8.3zm40-176c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40z',
    ],
  };
  var faBullhorn = {
    prefix: 'fas',
    iconName: 'bullhorn',
    icon: [
      512,
      512,
      [128226, 128363],
      'f0a1',
      'M480 32c0-12.9-7.8-24.6-19.8-29.6s-25.7-2.2-34.9 6.9L381.7 53c-48 48-113.1 75-181 75H192 160 64c-35.3 0-64 28.7-64 64v96c0 35.3 28.7 64 64 64l0 128c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V352l8.7 0c67.9 0 133 27 181 75l43.6 43.6c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V300.4c18.6-8.8 32-32.5 32-60.4s-13.4-51.6-32-60.4V32zm-64 76.7V240 371.3C357.2 317.8 280.5 288 200.7 288H192V192h8.7c79.8 0 156.5-29.8 215.3-83.3z',
    ],
  };
  var faGlobe = {
    prefix: 'fas',
    iconName: 'globe',
    icon: [
      512,
      512,
      [127760],
      'f0ac',
      'M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 21 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192H131.2c-2.1 20.6-3.2 42-3.2 64s1.1 43.4 3.2 64H8.1C2.8 299.5 0 278.1 0 256s2.8-43.5 8.1-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z',
    ],
  };
  var faSynagogue = {
    prefix: 'fas',
    iconName: 'synagogue',
    icon: [
      640,
      512,
      [128333],
      'f69b',
      'M309.8 3.7c5.9-4.9 14.6-4.9 20.5 0l121 100.8C469.5 119.7 480 142.2 480 166V280.1 512H464 352V416c0-17.7-14.3-32-32-32s-32 14.3-32 32v96H176 160V280.1 166c0-23.7 10.5-46.3 28.8-61.5L309.8 3.7zM512 512V244.5l28.1-31.2c3-3.4 7.4-5.3 11.9-5.3s8.9 1.9 11.9 5.3l63.8 70.9c7.9 8.8 12.3 20.3 12.3 32.1V448c0 35.3-28.7 64-64 64H512zM128 244.5V512H64c-35.3 0-64-28.7-64-64V316.3c0-11.9 4.4-23.3 12.3-32.1l63.8-70.9c3-3.4 7.4-5.3 11.9-5.3s8.9 1.9 11.9 5.3L128 244.5zM327 124.3c-3.1-5.4-10.9-5.4-13.9 0l-15.9 28.1-32.3-.3c-6.2-.1-10.1 6.7-7 12.1L274.3 192l-16.4 27.8c-3.2 5.4 .7 12.1 7 12.1l32.3-.3L313 259.7c3.1 5.4 10.9 5.4 13.9 0l15.9-28.1 32.3 .3c6.2 .1 10.1-6.7 7-12.1L365.7 192l16.4-27.8c3.2-5.4-.7-12.1-7-12.1l-32.3 .3L327 124.3z',
    ],
  };
  var faPersonHalfDress = {
    prefix: 'fas',
    iconName: 'person-half-dress',
    icon: [
      320,
      512,
      [],
      'e548',
      'M160 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm8 256V128h6.9c33.7 0 64.9 17.7 82.3 46.6l58.3 97c9.1 15.1 4.2 34.8-10.9 43.9s-34.8 4.2-43.9-10.9L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352h0zM58.2 182.3c19.9-33.1 55.3-53.5 93.8-54.3V384h0v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384H70.2c-10.9 0-18.6-10.7-15.2-21.1L93.3 248.1 59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l53.6-89.2z',
    ],
  };
  var faRoadBridge = {
    prefix: 'fas',
    iconName: 'road-bridge',
    icon: [
      640,
      512,
      [],
      'e563',
      'M352 0H608c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V32c0-17.7 14.3-32 32-32zM480 200c-13.3 0-24 10.7-24 24v64c0 13.3 10.7 24 24 24s24-10.7 24-24V224c0-13.3-10.7-24-24-24zm24 184c0-13.3-10.7-24-24-24s-24 10.7-24 24v64c0 13.3 10.7 24 24 24s24-10.7 24-24V384zM480 40c-13.3 0-24 10.7-24 24v64c0 13.3 10.7 24 24 24s24-10.7 24-24V64c0-13.3-10.7-24-24-24zM32 96H288v64H248v64h40v96c-53 0-96 43-96 96v64c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32V416c0-53-43-96-96-96V224H72V160H32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm168 64H120v64h80V160z',
    ],
  };
  var faLocationArrow = {
    prefix: 'fas',
    iconName: 'location-arrow',
    icon: [
      448,
      512,
      [],
      'f124',
      'M429.6 92.1c4.9-11.9 2.1-25.6-7-34.7s-22.8-11.9-34.7-7l-352 144c-14.2 5.8-22.2 20.8-19.3 35.8s16.1 25.8 31.4 25.8H224V432c0 15.3 10.8 28.4 25.8 31.4s30-5.1 35.8-19.3l144-352z',
    ],
  };
  var faC = {
    prefix: 'fas',
    iconName: 'c',
    icon: [
      384,
      512,
      [99],
      '43',
      'M329.1 142.9c-62.5-62.5-155.8-62.5-218.3 0s-62.5 163.8 0 226.3s155.8 62.5 218.3 0c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3c-87.5 87.5-221.3 87.5-308.8 0s-87.5-229.3 0-316.8s221.3-87.5 308.8 0c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0z',
    ],
  };
  var faTabletButton = {
    prefix: 'fas',
    iconName: 'tablet-button',
    icon: [
      448,
      512,
      [],
      'f10a',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM224 464c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faBuildingLock = {
    prefix: 'fas',
    iconName: 'building-lock',
    icon: [
      576,
      512,
      [],
      'e4d6',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h88.6c-5.4-9.4-8.6-20.3-8.6-32V352c0-23.7 12.9-44.4 32-55.4V272c0-30.5 12.2-58.2 32-78.4V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM464 240c17.7 0 32 14.3 32 32v48H432V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H544c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faPizzaSlice = {
    prefix: 'fas',
    iconName: 'pizza-slice',
    icon: [
      512,
      512,
      [],
      'f818',
      'M169.7 .9c-22.8-1.6-41.9 14-47.5 34.7L110.4 80c.5 0 1.1 0 1.6 0c176.7 0 320 143.3 320 320c0 .5 0 1.1 0 1.6l44.4-11.8c20.8-5.5 36.3-24.7 34.7-47.5C498.5 159.5 352.5 13.5 169.7 .9zM399.8 410.2c.1-3.4 .2-6.8 .2-10.2c0-159.1-128.9-288-288-288c-3.4 0-6.8 .1-10.2 .2L.5 491.9c-1.5 5.5 .1 11.4 4.1 15.4s9.9 5.6 15.4 4.1L399.8 410.2zM176 272c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm128 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM160 384c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faMoneyBillWave = {
    prefix: 'fas',
    iconName: 'money-bill-wave',
    icon: [
      576,
      512,
      [],
      'f53a',
      'M0 112.5V422.3c0 18 10.1 35 27 41.3c87 32.5 174 10.3 261-11.9c79.8-20.3 159.6-40.7 239.3-18.9c23 6.3 48.7-9.5 48.7-33.4V89.7c0-18-10.1-35-27-41.3C462 15.9 375 38.1 288 60.3C208.2 80.6 128.4 100.9 48.7 79.1C25.6 72.8 0 88.6 0 112.5zM288 352c-44.2 0-80-43-80-96s35.8-96 80-96s80 43 80 96s-35.8 96-80 96zM64 352c35.3 0 64 28.7 64 64H64V352zm64-208c0 35.3-28.7 64-64 64V144h64zM512 304v64H448c0-35.3 28.7-64 64-64zM448 96h64v64c-35.3 0-64-28.7-64-64z',
    ],
  };
  var faChartArea = {
    prefix: 'fas',
    iconName: 'chart-area',
    icon: [
      512,
      512,
      ['area-chart'],
      'f1fe',
      'M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V400c0 44.2 35.8 80 80 80H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H80c-8.8 0-16-7.2-16-16V64zm96 288H448c17.7 0 32-14.3 32-32V251.8c0-7.6-2.7-15-7.7-20.8l-65.8-76.8c-12.1-14.2-33.7-15-46.9-1.8l-21 21c-10 10-26.4 9.2-35.4-1.6l-39.2-47c-12.6-15.1-35.7-15.4-48.7-.6L135.9 215c-5.1 5.8-7.9 13.3-7.9 21.1v84c0 17.7 14.3 32 32 32z',
    ],
  };
  var faAreaChart = faChartArea;
  var faHouseFlag = {
    prefix: 'fas',
    iconName: 'house-flag',
    icon: [
      640,
      512,
      [],
      'e50d',
      'M480 0c-17.7 0-32 14.3-32 32V192 512h64V192H624c8.8 0 16-7.2 16-16V48c0-8.8-7.2-16-16-16H512c0-17.7-14.3-32-32-32zM416 159L276.8 39.7c-12-10.3-29.7-10.3-41.7 0l-224 192C1 240.4-2.7 254.5 2 267.1S18.6 288 32 288H64V480c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V384c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32v96c0 17.7 14.3 32 32 32h64.7l.2 0h-1V159z',
    ],
  };
  var faPersonCircleMinus = {
    prefix: 'fas',
    iconName: 'person-circle-minus',
    icon: [
      576,
      512,
      [],
      'e540',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zm424 16c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-64 0c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16s7.2 16 16 16H496c8.8 0 16-7.2 16-16z',
    ],
  };
  var faBan = {
    prefix: 'fas',
    iconName: 'ban',
    icon: [
      512,
      512,
      [128683, 'cancel'],
      'f05e',
      'M367.2 412.5L99.5 144.8C77.1 176.1 64 214.5 64 256c0 106 86 192 192 192c41.5 0 79.9-13.1 111.2-35.5zm45.3-45.3C434.9 335.9 448 297.5 448 256c0-106-86-192-192-192c-41.5 0-79.9 13.1-111.2 35.5L412.5 367.2zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256z',
    ],
  };
  var faCancel = faBan;
  var faCameraRotate = {
    prefix: 'fas',
    iconName: 'camera-rotate',
    icon: [
      512,
      512,
      [],
      'e0d8',
      'M149.1 64.8L138.7 96H64C28.7 96 0 124.7 0 160V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H373.3L362.9 64.8C356.4 45.2 338.1 32 317.4 32H194.6c-20.7 0-39 13.2-45.5 32.8zM384 256c0 8.8-7.2 16-16 16H291.3c-6.2 0-11.3-5.1-11.3-11.3c0-3 1.2-5.9 3.3-8L307 229c-13.6-13.4-31.9-21-51-21c-19.2 0-37.7 7.6-51.3 21.3L185 249c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l19.7-19.7C193.4 172.7 224 160 256 160c31.8 0 62.4 12.6 85 35l23.7-23.7c2.1-2.1 5-3.3 8-3.3c6.2 0 11.3 5.1 11.3 11.3V256zM128 320c0-8.8 7.2-16 16-16h76.7c6.2 0 11.3 5.1 11.3 11.3c0 3-1.2 5.9-3.3 8L205 347c13.6 13.4 31.9 21 51 21c19.2 0 37.7-7.6 51.3-21.3L327 327c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-19.7 19.7C318.6 403.3 288 416 256 416c-31.8 0-62.4-12.6-85-35l-23.7 23.7c-2.1 2.1-5 3.3-8 3.3c-6.2 0-11.3-5.1-11.3-11.3V320z',
    ],
  };
  var faSprayCanSparkles = {
    prefix: 'fas',
    iconName: 'spray-can-sparkles',
    icon: [
      512,
      512,
      ['air-freshener'],
      'f5d0',
      'M96 32v96H224V32c0-17.7-14.3-32-32-32H128C110.3 0 96 14.3 96 32zm0 128c-53 0-96 43-96 96V464c0 26.5 21.5 48 48 48H272c26.5 0 48-21.5 48-48V256c0-53-43-96-96-96H96zm64 256c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80zM384 48c0-1.4-1-3-2.2-3.6L352 32 339.6 2.2C339 1 337.4 0 336 0s-3 1-3.6 2.2L320 32 290.2 44.4C289 45 288 46.6 288 48c0 1.4 1 3 2.2 3.6L320 64l12.4 29.8C333 95 334.6 96 336 96s3-1 3.6-2.2L352 64l29.8-12.4C383 51 384 49.4 384 48zm76.4 45.8C461 95 462.6 96 464 96s3-1 3.6-2.2L480 64l29.8-12.4C511 51 512 49.4 512 48c0-1.4-1-3-2.2-3.6L480 32 467.6 2.2C467 1 465.4 0 464 0s-3 1-3.6 2.2L448 32 418.2 44.4C417 45 416 46.6 416 48c0 1.4 1 3 2.2 3.6L448 64l12.4 29.8zm7.2 100.4c-.6-1.2-2.2-2.2-3.6-2.2s-3 1-3.6 2.2L448 224l-29.8 12.4c-1.2 .6-2.2 2.2-2.2 3.6c0 1.4 1 3 2.2 3.6L448 256l12.4 29.8c.6 1.2 2.2 2.2 3.6 2.2s3-1 3.6-2.2L480 256l29.8-12.4c1.2-.6 2.2-2.2 2.2-3.6c0-1.4-1-3-2.2-3.6L480 224l-12.4-29.8zM448 144c0-1.4-1-3-2.2-3.6L416 128 403.6 98.2C403 97 401.4 96 400 96s-3 1-3.6 2.2L384 128l-29.8 12.4c-1.2 .6-2.2 2.2-2.2 3.6c0 1.4 1 3 2.2 3.6L384 160l12.4 29.8c.6 1.2 2.2 2.2 3.6 2.2s3-1 3.6-2.2L416 160l29.8-12.4c1.2-.6 2.2-2.2 2.2-3.6z',
    ],
  };
  var faAirFreshener = faSprayCanSparkles;
  var faStar = {
    prefix: 'fas',
    iconName: 'star',
    icon: [
      576,
      512,
      [11088, 61446],
      'f005',
      'M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z',
    ],
  };
  var faRepeat = {
    prefix: 'fas',
    iconName: 'repeat',
    icon: [
      512,
      512,
      [128257],
      'f363',
      'M0 224c0 17.7 14.3 32 32 32s32-14.3 32-32c0-53 43-96 96-96H320v32c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l64-64c12.5-12.5 12.5-32.8 0-45.3l-64-64c-9.2-9.2-22.9-11.9-34.9-6.9S320 19.1 320 32V64H160C71.6 64 0 135.6 0 224zm512 64c0-17.7-14.3-32-32-32s-32 14.3-32 32c0 53-43 96-96 96H192V352c0-12.9-7.8-24.6-19.8-29.6s-25.7-2.2-34.9 6.9l-64 64c-12.5 12.5-12.5 32.8 0 45.3l64 64c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V448H352c88.4 0 160-71.6 160-160z',
    ],
  };
  var faCross = {
    prefix: 'fas',
    iconName: 'cross',
    icon: [
      384,
      512,
      [128327, 10013],
      'f654',
      'M176 0c-26.5 0-48 21.5-48 48v80H48c-26.5 0-48 21.5-48 48v32c0 26.5 21.5 48 48 48h80V464c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V256h80c26.5 0 48-21.5 48-48V176c0-26.5-21.5-48-48-48H256V48c0-26.5-21.5-48-48-48H176z',
    ],
  };
  var faBox = {
    prefix: 'fas',
    iconName: 'box',
    icon: [
      448,
      512,
      [128230],
      'f466',
      'M50.7 58.5L0 160H208V32H93.7C75.5 32 58.9 42.3 50.7 58.5zM240 160H448L397.3 58.5C389.1 42.3 372.5 32 354.3 32H240V160zm208 32H0V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V192z',
    ],
  };
  var faVenusMars = {
    prefix: 'fas',
    iconName: 'venus-mars',
    icon: [
      640,
      512,
      [9892],
      'f228',
      'M176 288c61.9 0 112-50.1 112-112s-50.1-112-112-112S64 114.1 64 176s50.1 112 112 112zM352 176c0 86.3-62.1 158.1-144 173.1V384h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H208v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H112c-17.7 0-32-14.3-32-32s14.3-32 32-32h32V349.1C62.1 334.1 0 262.3 0 176C0 78.8 78.8 0 176 0s176 78.8 176 176zM271.9 360.6c19.3-10.1 36.9-23.1 52.1-38.4c20 18.5 46.7 29.8 76.1 29.8c61.9 0 112-50.1 112-112s-50.1-112-112-112c-7.2 0-14.3 .7-21.1 2c-4.9-21.5-13-41.7-24-60.2C369.3 66 384.4 64 400 64c37 0 71.4 11.4 99.8 31l20.6-20.6L487 41c-6.9-6.9-8.9-17.2-5.2-26.2S494.3 0 504 0H616c13.3 0 24 10.7 24 24V136c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-33.4-33.4L545 140.2c19.5 28.4 31 62.7 31 99.8c0 97.2-78.8 176-176 176c-50.5 0-96-21.3-128.1-55.4z',
    ],
  };
  var faArrowPointer = {
    prefix: 'fas',
    iconName: 'arrow-pointer',
    icon: [
      320,
      512,
      ['mouse-pointer'],
      'f245',
      'M0 55.2V426c0 12.2 9.9 22 22 22c6.3 0 12.4-2.7 16.6-7.5L121.2 346l58.1 116.3c7.9 15.8 27.1 22.2 42.9 14.3s22.2-27.1 14.3-42.9L179.8 320H297.9c12.2 0 22.1-9.9 22.1-22.1c0-6.3-2.7-12.3-7.4-16.5L38.6 37.9C34.3 34.1 28.9 32 23.2 32C10.4 32 0 42.4 0 55.2z',
    ],
  };
  var faMousePointer = faArrowPointer;
  var faMaximize = {
    prefix: 'fas',
    iconName: 'maximize',
    icon: [
      448,
      512,
      ['expand-arrows-alt'],
      'f31e',
      'M168 32H24C10.7 32 0 42.7 0 56V200c0 9.7 5.8 18.5 14.8 22.2s19.3 1.7 26.2-5.2l40-40 79 79L81 335 41 295c-6.9-6.9-17.2-8.9-26.2-5.2S0 302.3 0 312V456c0 13.3 10.7 24 24 24H168c9.7 0 18.5-5.8 22.2-14.8s1.7-19.3-5.2-26.2l-40-40 79-79 79 79-40 40c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H424c13.3 0 24-10.7 24-24V312c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2l-40 40-79-79 79-79 40 40c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V56c0-13.3-10.7-24-24-24H280c-9.7 0-18.5 5.8-22.2 14.8s-1.7 19.3 5.2 26.2l40 40-79 79-79-79 40-40c6.9-6.9 8.9-17.2 5.2-26.2S177.7 32 168 32z',
    ],
  };
  var faExpandArrowsAlt = faMaximize;
  var faChargingStation = {
    prefix: 'fas',
    iconName: 'charging-station',
    icon: [
      576,
      512,
      [],
      'f5e7',
      'M96 0C60.7 0 32 28.7 32 64V448c-17.7 0-32 14.3-32 32s14.3 32 32 32H320c17.7 0 32-14.3 32-32s-14.3-32-32-32V304h16c22.1 0 40 17.9 40 40v32c0 39.8 32.2 72 72 72s72-32.2 72-72V252.3c32.5-10.2 56-40.5 56-76.3V144c0-8.8-7.2-16-16-16H544V80c0-8.8-7.2-16-16-16s-16 7.2-16 16v48H480V80c0-8.8-7.2-16-16-16s-16 7.2-16 16v48H432c-8.8 0-16 7.2-16 16v32c0 35.8 23.5 66.1 56 76.3V376c0 13.3-10.7 24-24 24s-24-10.7-24-24V344c0-48.6-39.4-88-88-88H320V64c0-35.3-28.7-64-64-64H96zM216.9 82.7c6 4 8.5 11.5 6.3 18.3l-25 74.9H256c6.7 0 12.7 4.2 15 10.4s.5 13.3-4.6 17.7l-112 96c-5.5 4.7-13.4 5.1-19.3 1.1s-8.5-11.5-6.3-18.3l25-74.9H96c-6.7 0-12.7-4.2-15-10.4s-.5-13.3 4.6-17.7l112-96c5.5-4.7 13.4-5.1 19.3-1.1z',
    ],
  };
  var faShapes = {
    prefix: 'fas',
    iconName: 'shapes',
    icon: [
      512,
      512,
      ['triangle-circle-square'],
      'f61f',
      'M315.4 15.5C309.7 5.9 299.2 0 288 0s-21.7 5.9-27.4 15.5l-96 160c-5.9 9.9-6.1 22.2-.4 32.2s16.3 16.2 27.8 16.2H384c11.5 0 22.2-6.2 27.8-16.2s5.5-22.3-.4-32.2l-96-160zM288 312V456c0 22.1 17.9 40 40 40H472c22.1 0 40-17.9 40-40V312c0-22.1-17.9-40-40-40H328c-22.1 0-40 17.9-40 40zM128 512c70.7 0 128-57.3 128-128s-57.3-128-128-128S0 313.3 0 384s57.3 128 128 128z',
    ],
  };
  var faTriangleCircleSquare = faShapes;
  var faShuffle = {
    prefix: 'fas',
    iconName: 'shuffle',
    icon: [
      512,
      512,
      [128256, 'random'],
      'f074',
      'M403.8 34.4c12-5 25.7-2.2 34.9 6.9l64 64c6 6 9.4 14.1 9.4 22.6s-3.4 16.6-9.4 22.6l-64 64c-9.2 9.2-22.9 11.9-34.9 6.9s-19.8-16.6-19.8-29.6V160H352c-10.1 0-19.6 4.7-25.6 12.8L284 229.3 244 176l31.2-41.6C293.3 110.2 321.8 96 352 96h32V64c0-12.9 7.8-24.6 19.8-29.6zM164 282.7L204 336l-31.2 41.6C154.7 401.8 126.2 416 96 416H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H96c10.1 0 19.6-4.7 25.6-12.8L164 282.7zm274.6 188c-9.2 9.2-22.9 11.9-34.9 6.9s-19.8-16.6-19.8-29.6V416H352c-30.2 0-58.7-14.2-76.8-38.4L121.6 172.8c-6-8.1-15.5-12.8-25.6-12.8H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H96c30.2 0 58.7 14.2 76.8 38.4L326.4 339.2c6 8.1 15.5 12.8 25.6 12.8h32V320c0-12.9 7.8-24.6 19.8-29.6s25.7-2.2 34.9 6.9l64 64c6 6 9.4 14.1 9.4 22.6s-3.4 16.6-9.4 22.6l-64 64z',
    ],
  };
  var faRandom = faShuffle;
  var faPersonRunning = {
    prefix: 'fas',
    iconName: 'person-running',
    icon: [
      448,
      512,
      [127939, 'running'],
      'f70c',
      'M336 48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM141.7 175.5c9.9-9.9 23.4-15.5 37.5-15.5c1.9 0 3.8 .1 5.6 .3L153.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9-25.4 88.8c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l28.7-100.4c5.9-20.6-2.6-42.6-20.7-53.9L254 299l30.9-82.4 5.1 12.3C305 264.7 339.9 288 378.7 288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H378.7c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3L73.4 153.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l23.1-23.1zM107.2 352H48c-17.7 0-32 14.3-32 32s14.3 32 32 32h69.6c19 0 36.2-11.2 43.9-28.5L173 361.6l-9.5-6c-17.5-10.9-30.5-26.8-37.9-44.9L107.2 352z',
    ],
  };
  var faRunning = faPersonRunning;
  var faMobileRetro = {
    prefix: 'fas',
    iconName: 'mobile-retro',
    icon: [
      320,
      512,
      [],
      'e527',
      'M0 64C0 28.7 28.7 0 64 0H256c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zm64 96v64c0 17.7 14.3 32 32 32H224c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32zM80 352c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm24 56c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm56-56c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm24 56c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm56-56c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm24 56c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zM128 48c-8.8 0-16 7.2-16 16s7.2 16 16 16h64c8.8 0 16-7.2 16-16s-7.2-16-16-16H128z',
    ],
  };
  var faGripLinesVertical = {
    prefix: 'fas',
    iconName: 'grip-lines-vertical',
    icon: [
      192,
      512,
      [],
      'f7a5',
      'M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V448c0 17.7 14.3 32 32 32s32-14.3 32-32V64zm128 0c0-17.7-14.3-32-32-32s-32 14.3-32 32V448c0 17.7 14.3 32 32 32s32-14.3 32-32V64z',
    ],
  };
  var faSpider = {
    prefix: 'fas',
    iconName: 'spider',
    icon: [
      576,
      512,
      [128375],
      'f717',
      'M190.4 32.6c4.8-12.4-1.4-26.3-13.8-31s-26.3 1.4-31 13.8L113.1 100c-7.9 20.7-3 44.1 12.7 59.7l57.4 57.4-80.4-26.8c-2.4-.8-4.3-2.7-5.1-5.1L78.8 128.4C74.6 115.8 61 109 48.4 113.2S29 131 33.2 143.6l18.9 56.8c5.6 16.7 18.7 29.8 35.4 35.4L148.1 256 87.6 276.2c-16.7 5.6-29.8 18.7-35.4 35.4L33.2 368.4C29 381 35.8 394.6 48.4 398.8s26.2-2.6 30.4-15.2l18.9-56.8c.8-2.4 2.7-4.3 5.1-5.1l80.4-26.8-57.4 57.4c-15.6 15.6-20.6 39-12.7 59.7l32.5 84.6c4.8 12.4 18.6 18.5 31 13.8s18.5-18.6 13.8-31l-32.5-84.6c-1.1-3-.4-6.3 1.8-8.5L192 353.9c1 52.1 43.6 94.1 96 94.1s95-41.9 96-94.1l32.3 32.3c2.2 2.2 2.9 5.6 1.8 8.5l-32.5 84.6c-4.8 12.4 1.4 26.3 13.8 31s26.3-1.4 31-13.8L462.9 412c7.9-20.7 3-44.1-12.7-59.7l-57.4-57.4 80.4 26.8c2.4 .8 4.3 2.7 5.1 5.1l18.9 56.8c4.2 12.6 17.8 19.4 30.4 15.2s19.4-17.8 15.2-30.4l-18.9-56.8c-5.6-16.7-18.7-29.8-35.4-35.4L427.9 256l60.5-20.2c16.7-5.6 29.8-18.7 35.4-35.4l18.9-56.8c4.2-12.6-2.6-26.2-15.2-30.4s-26.2 2.6-30.4 15.2l-18.9 56.8c-.8 2.4-2.7 4.3-5.1 5.1l-80.4 26.8 57.4-57.4c15.6-15.6 20.6-39 12.7-59.7L430.4 15.4C425.6 3 411.8-3.2 399.4 1.6s-18.5 18.6-13.8 31l32.5 84.6c1.1 3 .4 6.3-1.8 8.5L368 174.1V160c0-31.8-18.6-59.3-45.5-72.2c-9.1-4.4-18.5 3.3-18.5 13.4V112c0 8.8-7.2 16-16 16s-16-7.2-16-16V101.2c0-10.1-9.4-17.7-18.5-13.4C226.6 100.7 208 128.2 208 160v14.1l-48.3-48.3c-2.2-2.2-2.9-5.6-1.8-8.5l32.5-84.6z',
    ],
  };
  var faHandsBound = {
    prefix: 'fas',
    iconName: 'hands-bound',
    icon: [
      576,
      512,
      [],
      'e4f9',
      'M64 32C64 14.3 49.7 0 32 0S0 14.3 0 32V96v59.1 .7V192v21.9c0 14.2 5.1 27.9 14.3 38.7L99.6 352H96c-13.3 0-24 10.7-24 24s10.7 24 24 24h32H256h64H448h32c13.3 0 24-10.7 24-24s-10.7-24-24-24h-3.6l85.3-99.5c9.2-10.8 14.3-24.5 14.3-38.7V192 155.8v-.7V96 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V96v48.8l-69.3 92.4c-5.7 7.6-16.1 9.6-24.2 4.8c-9.7-5.7-12.1-18.7-5.1-27.5L441 180c10.8-13.5 8.9-33.3-4.4-44.5s-33-9.8-44.5 3.2l-46.7 52.5C329 209.7 320 233.4 320 258.1V320v32H256V320 258.1c0-24.6-9-48.4-25.4-66.8l-46.7-52.5c-11.5-13-31.3-14.4-44.5-3.2s-15.2 30.9-4.4 44.5l27.6 34.5c7 8.8 4.7 21.8-5.1 27.5c-8.1 4.8-18.6 2.7-24.2-4.8L64 144.8V96 32zm64 448v32H256V480h64v32H448V480h32c13.3 0 24-10.7 24-24s-10.7-24-24-24H448 320 256 128 96c-13.3 0-24 10.7-24 24s10.7 24 24 24h32z',
    ],
  };
  var faFileInvoiceDollar = {
    prefix: 'fas',
    iconName: 'file-invoice-dollar',
    icon: [
      384,
      512,
      [],
      'f571',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM64 80c0-8.8 7.2-16 16-16h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16zm128 72c8.8 0 16 7.2 16 16v17.3c8.5 1.2 16.7 3.1 24.1 5.1c8.5 2.3 13.6 11 11.3 19.6s-11 13.6-19.6 11.3c-11.1-3-22-5.2-32.1-5.3c-8.4-.1-17.4 1.8-23.6 5.5c-5.7 3.4-8.1 7.3-8.1 12.8c0 3.7 1.3 6.5 7.3 10.1c6.9 4.1 16.6 7.1 29.2 10.9l.5 .1 0 0 0 0c11.3 3.4 25.3 7.6 36.3 14.6c12.1 7.6 22.4 19.7 22.7 38.2c.3 19.3-9.6 33.3-22.9 41.6c-7.7 4.8-16.4 7.6-25.1 9.1V440c0 8.8-7.2 16-16 16s-16-7.2-16-16V422.2c-11.2-2.1-21.7-5.7-30.9-8.9l0 0c-2.1-.7-4.2-1.4-6.2-2.1c-8.4-2.8-12.9-11.9-10.1-20.2s11.9-12.9 20.2-10.1c2.5 .8 4.8 1.6 7.1 2.4l0 0 0 0 0 0c13.6 4.6 24.6 8.4 36.3 8.7c9.1 .3 17.9-1.7 23.7-5.3c5.1-3.2 7.9-7.3 7.8-14c-.1-4.6-1.8-7.8-7.7-11.6c-6.8-4.3-16.5-7.4-29-11.2l-1.6-.5 0 0c-11-3.3-24.3-7.3-34.8-13.7c-12-7.2-22.6-18.9-22.7-37.3c-.1-19.4 10.8-32.8 23.8-40.5c7.5-4.4 15.8-7.2 24.1-8.7V232c0-8.8 7.2-16 16-16z',
    ],
  };
  var faPlaneCircleExclamation = {
    prefix: 'fas',
    iconName: 'plane-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e556',
      'M256 0c-35 0-64 59.5-64 93.7v84.6L8.1 283.4c-5 2.8-8.1 8.2-8.1 13.9v65.5c0 10.6 10.2 18.3 20.4 15.4l171.6-49 0 70.9-57.6 43.2c-4 3-6.4 7.8-6.4 12.8v42c0 7.8 6.3 14 14 14c1.3 0 2.6-.2 3.9-.5L256 480l110.1 31.5c1.3 .4 2.6 .5 3.9 .5c6 0 11.1-3.7 13.1-9C344.5 470.7 320 422.2 320 368c0-60.6 30.6-114 77.1-145.6L320 178.3V93.7C320 59.5 292 0 256 0zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faXRay = {
    prefix: 'fas',
    iconName: 'x-ray',
    icon: [
      512,
      512,
      [],
      'f497',
      'M0 64C0 46.3 14.3 32 32 32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32V416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32V96C14.3 96 0 81.7 0 64zM256 96c-8.8 0-16 7.2-16 16v16H144c-8.8 0-16 7.2-16 16s7.2 16 16 16h96v32H112c-8.8 0-16 7.2-16 16s7.2 16 16 16H240v32H144c-8.8 0-16 7.2-16 16s7.2 16 16 16h96v32H152c-8.9 0-17 4.9-21.2 12.7s-3.7 17.3 1.2 24.6l32 48C168.5 412 176 416 184 416H328c8 0 15.5-4 20-10.7l32-48c4.9-7.4 5.4-16.8 1.2-24.6S368.9 320 360 320H272V288h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H272V224H400c8.8 0 16-7.2 16-16s-7.2-16-16-16H272V160h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H272V112c0-8.8-7.2-16-16-16zM208 384c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm112-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faSpellCheck = {
    prefix: 'fas',
    iconName: 'spell-check',
    icon: [
      640,
      512,
      [],
      'f891',
      'M144 0c-12.9 0-24.6 7.8-29.5 19.7l-66.7 160-13.3 32c-6.8 16.3 .9 35 17.2 41.8s35-.9 41.8-17.2L98.7 224h90.7l5.1 12.3c6.8 16.3 25.5 24 41.8 17.2s24-25.5 17.2-41.8l-13.3-32-66.7-160C168.6 7.8 156.9 0 144 0zm18.7 160H125.3L144 115.2 162.7 160zM288 32v96 96c0 17.7 14.3 32 32 32h80c44.2 0 80-35.8 80-80c0-23.1-9.8-43.8-25.4-58.4c6-11.2 9.4-24 9.4-37.6c0-44.2-35.8-80-80-80H320c-17.7 0-32 14.3-32 32zm96 64H352V64h32c8.8 0 16 7.2 16 16s-7.2 16-16 16zm-32 64h32 16c8.8 0 16 7.2 16 16s-7.2 16-16 16H352V160zM598.6 310.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L384 434.7l-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0l192-192z',
    ],
  };
  var faSlash = {
    prefix: 'fas',
    iconName: 'slash',
    icon: [
      640,
      512,
      [],
      'f715',
      'M5.1 9.2C13.3-1.2 28.4-3.1 38.8 5.1l592 464c10.4 8.2 12.3 23.3 4.1 33.7s-23.3 12.3-33.7 4.1L9.2 42.9C-1.2 34.7-3.1 19.6 5.1 9.2z',
    ],
  };
  var faComputerMouse = {
    prefix: 'fas',
    iconName: 'computer-mouse',
    icon: [
      384,
      512,
      [128433, 'mouse'],
      'f8cc',
      'M0 192H176V0H160C71.6 0 0 71.6 0 160v32zm0 32V352c0 88.4 71.6 160 160 160h64c88.4 0 160-71.6 160-160V224H192 0zm384-32V160C384 71.6 312.4 0 224 0H208V192H384z',
    ],
  };
  var faMouse = faComputerMouse;
  var faArrowRightToBracket = {
    prefix: 'fas',
    iconName: 'arrow-right-to-bracket',
    icon: [
      512,
      512,
      ['sign-in'],
      'f090',
      'M352 96l64 0c17.7 0 32 14.3 32 32l0 256c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32 14.3-32 32s14.3 32 32 32l64 0c53 0 96-43 96-96l0-256c0-53-43-96-96-96l-64 0c-17.7 0-32 14.3-32 32s14.3 32 32 32zm-9.4 182.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L242.7 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l210.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128z',
    ],
  };
  var faSignIn = faArrowRightToBracket;
  var faShopSlash = {
    prefix: 'fas',
    iconName: 'shop-slash',
    icon: [
      640,
      512,
      ['store-alt-slash'],
      'e070',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-54.8-43V224H512V376L384 275.7V224H320v1.5L277.2 192H603.2c20.3 0 36.8-16.5 36.8-36.8c0-7.3-2.2-14.4-6.2-20.4L558.2 21.4C549.3 8 534.4 0 518.3 0H121.7c-16 0-31 8-39.9 21.4L74.1 32.8 38.8 5.1zM36.8 192h85L21 112.5 6.2 134.7c-4 6.1-6.2 13.2-6.2 20.4C0 175.5 16.5 192 36.8 192zM320 384H128V224H64V384v80c0 26.5 21.5 48 48 48H336c26.5 0 48-21.5 48-48V398.5l-64-50.4V384z',
    ],
  };
  var faStoreAltSlash = faShopSlash;
  var faServer = {
    prefix: 'fas',
    iconName: 'server',
    icon: [
      512,
      512,
      [],
      'f233',
      'M64 32C28.7 32 0 60.7 0 96v64c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM344 152c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm96-24c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM64 288c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V352c0-35.3-28.7-64-64-64H64zM344 408c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm104-24c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faVirusCovidSlash = {
    prefix: 'fas',
    iconName: 'virus-covid-slash',
    icon: [
      640,
      512,
      [],
      'e4a9',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L472.1 344.7c11.4-19.5 19.1-41.4 22.3-64.7H528v16c0 13.3 10.7 24 24 24s24-10.7 24-24V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v16H494.4c-4.2-30.7-16.3-58.8-34.1-82.3L484 125.9l11.3 11.3c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L472.7 46.7c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9L450.1 92l-23.8 23.8C402.8 97.9 374.7 85.8 344 81.6V48h16c13.3 0 24-10.7 24-24s-10.7-24-24-24H280c-13.3 0-24 10.7-24 24s10.7 24 24 24h16V81.6c-30.7 4.2-58.8 16.3-82.3 34.1L189.9 92l11.3-11.3c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L134.1 79.8 38.8 5.1zM149.2 213.5c-1.5 6-2.7 12.2-3.5 18.5H112V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v80c0 13.3 10.7 24 24 24s24-10.7 24-24V280h33.6c4.2 30.7 16.3 58.8 34.1 82.3L156 386.1l-11.3-11.3c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l56.6 56.6c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L189.9 420l23.8-23.8c23.5 17.9 51.7 29.9 82.3 34.1V464H280c-13.3 0-24 10.7-24 24s10.7 24 24 24h80c13.3 0 24-10.7 24-24s-10.7-24-24-24H344V430.4c20.4-2.8 39.7-9.1 57.3-18.2L149.2 213.5z',
    ],
  };
  var faShopLock = {
    prefix: 'fas',
    iconName: 'shop-lock',
    icon: [
      640,
      512,
      [],
      'e4a5',
      'M36.8 192H449.6c20.2-19.8 47.9-32 78.4-32c30.5 0 58.1 12.2 78.3 31.9c18.9-1.6 33.7-17.4 33.7-36.7c0-7.3-2.2-14.4-6.2-20.4L558.2 21.4C549.3 8 534.4 0 518.3 0H121.7c-16 0-31 8-39.9 21.4L6.2 134.7c-4 6.1-6.2 13.2-6.2 20.4C0 175.5 16.5 192 36.8 192zM384 224H320V384H128V224H64V384v80c0 26.5 21.5 48 48 48H336c26.5 0 48-21.5 48-48V384 352 224zm144 16c17.7 0 32 14.3 32 32v48H496V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faHourglassStart = {
    prefix: 'fas',
    iconName: 'hourglass-start',
    icon: [
      384,
      512,
      ['hourglass-1'],
      'f251',
      'M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V75c0 42.4 16.9 83.1 46.9 113.1L146.7 256 78.9 323.9C48.9 353.9 32 394.6 32 437v11c-17.7 0-32 14.3-32 32s14.3 32 32 32H64 320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V437c0-42.4-16.9-83.1-46.9-113.1L237.3 256l67.9-67.9c30-30 46.9-70.7 46.9-113.1V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H320 64 32zM288 437v11H96V437c0-25.5 10.1-49.9 28.1-67.9L192 301.3l67.9 67.9c18 18 28.1 42.4 28.1 67.9z',
    ],
  };
  var faHourglass1 = faHourglassStart;
  var faBlenderPhone = {
    prefix: 'fas',
    iconName: 'blender-phone',
    icon: [
      576,
      512,
      [],
      'f6b6',
      'M192 352V48c0-26.5 21.5-48 48-48H534.1c21.1 0 36.4 20.1 30.9 40.4L558.5 64H400c-8.8 0-16 7.2-16 16s7.2 16 16 16H549.8l-17.5 64H400c-8.8 0-16 7.2-16 16s7.2 16 16 16H523.6l-17.5 64H400c-8.8 0-16 7.2-16 16s7.2 16 16 16h97.5L480 352H192zm16 32H496c26.5 0 48 21.5 48 48v32c0 26.5-21.5 48-48 48H208c-26.5 0-48-21.5-48-48V432c0-26.5 21.5-48 48-48zm144 96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM147.5 30.7c10.8 6.7 15.3 21 10.6 33.4l-22 57.8c-4.2 10.9-14.5 17.6-25.3 16.4l-33.3-3.6c-13.6 42.2-13.6 88.4 0 130.7l33.3-3.6c10.9-1.2 21.2 5.5 25.3 16.4l22 57.8c4.7 12.4 .2 26.7-10.6 33.4l-44 27.2c-9.7 6-21.9 4.2-29.8-4.3C-24.6 286-24.6 114 73.7 7.8C81.6-.7 93.8-2.5 103.5 3.5l44 27.2z',
    ],
  };
  var faBuildingWheat = {
    prefix: 'fas',
    iconName: 'building-wheat',
    icon: [
      640,
      512,
      [],
      'e4db',
      'M0 48C0 21.5 21.5 0 48 0H336c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H240V432c0-26.5-21.5-48-48-48s-48 21.5-48 48v80H48c-26.5 0-48-21.5-48-48V48zM80 224c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H80zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm112-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H272zM64 112v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zM176 96c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H176zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16zm384 80v16c0 44.2-35.8 80-80 80H544V272c0-44.2 35.8-80 80-80h16zm0 128c0 44.2-35.8 80-80 80H544V384c0-44.2 35.8-80 80-80h16v16zm0 112c0 44.2-35.8 80-80 80H544V496c0-44.2 35.8-80 80-80h16v16zM512 496v16H496c-44.2 0-80-35.8-80-80V416h16c44.2 0 80 35.8 80 80zm0-96H496c-44.2 0-80-35.8-80-80V304h16c44.2 0 80 35.8 80 80v16zm0-128v16H496c-44.2 0-80-35.8-80-80V192h16c44.2 0 80 35.8 80 80zM528 32c13.3 0 24 10.7 24 24V160c0 13.3-10.7 24-24 24s-24-10.7-24-24V56c0-13.3 10.7-24 24-24zm96 64v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V96c0-13.3 10.7-24 24-24s24 10.7 24 24zM456 72c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V96c0-13.3 10.7-24 24-24z',
    ],
  };
  var faPersonBreastfeeding = {
    prefix: 'fas',
    iconName: 'person-breastfeeding',
    icon: [
      512,
      512,
      [],
      'e53a',
      'M256 160c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80zM468.8 382.8L405.5 462c-16.6 20.7-46.8 24.1-67.5 7.5c-17.6-14.1-22.7-38.1-13.5-57.7l-.7-.1c-38.9-5.6-74.3-25.1-99.7-54.8V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v48c0 .8 0 1.6 .1 2.4l101.4 50.7c23.7 11.9 33.3 40.7 21.5 64.4s-40.7 33.3-64.4 21.5L59.2 427.3c-1.1-.5-2.2-1.1-3.3-1.7c-4.9-2.8-9.2-6.4-12.6-10.6c-4.6-5.4-7.8-11.7-9.6-18.4c-3.3-12-1.9-25.2 4.8-36.6c.6-1.1 1.3-2.2 2-3.2l67.1-100.6c26.7-40.1 71.7-64.1 119.8-64.1h75.2c46.5 0 90.1 22.5 117.2 60.3l50.7 70.9c2.2 3 4 6.1 5.5 9.4c2.9 6.7 4.3 13.8 4 20.8c-.3 10.6-4.2 21-11.2 29.4zM352 332c0-24.3-19.7-44-44-44s-44 19.7-44 44s19.7 44 44 44s44-19.7 44-44z',
    ],
  };
  var faRightToBracket = {
    prefix: 'fas',
    iconName: 'right-to-bracket',
    icon: [
      512,
      512,
      ['sign-in-alt'],
      'f2f6',
      'M352 96h64c17.7 0 32 14.3 32 32V384c0 17.7-14.3 32-32 32H352c-17.7 0-32 14.3-32 32s14.3 32 32 32h64c53 0 96-43 96-96V128c0-53-43-96-96-96H352c-17.7 0-32 14.3-32 32s14.3 32 32 32zm-7.5 177.4c4.8-4.5 7.5-10.8 7.5-17.4s-2.7-12.9-7.5-17.4l-144-136c-7-6.6-17.2-8.4-26-4.6s-14.5 12.5-14.5 22v72H32c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H160v72c0 9.6 5.7 18.2 14.5 22s19 2 26-4.6l144-136z',
    ],
  };
  var faSignInAlt = faRightToBracket;
  var faVenus = {
    prefix: 'fas',
    iconName: 'venus',
    icon: [
      384,
      512,
      [9792],
      'f221',
      'M304 176c0 61.9-50.1 112-112 112s-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112zM224 349.1c81.9-15 144-86.8 144-173.1C368 78.8 289.2 0 192 0S16 78.8 16 176c0 86.3 62.1 158.1 144 173.1V384H128c-17.7 0-32 14.3-32 32s14.3 32 32 32h32v32c0 17.7 14.3 32 32 32s32-14.3 32-32V448h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H224V349.1z',
    ],
  };
  var faPassport = {
    prefix: 'fas',
    iconName: 'passport',
    icon: [
      448,
      512,
      [],
      'f5ab',
      'M0 64C0 28.7 28.7 0 64 0H384c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM183 278.8c-27.9-13.2-48.4-39.4-53.7-70.8h39.1c1.6 30.4 7.7 53.8 14.6 70.8zm41.3 9.2l-.3 0-.3 0c-2.4-3.5-5.7-8.9-9.1-16.5c-6-13.6-12.4-34.3-14.2-63.5h47.1c-1.8 29.2-8.1 49.9-14.2 63.5c-3.4 7.6-6.7 13-9.1 16.5zm40.7-9.2c6.8-17.1 12.9-40.4 14.6-70.8h39.1c-5.3 31.4-25.8 57.6-53.7 70.8zM279.6 176c-1.6-30.4-7.7-53.8-14.6-70.8c27.9 13.2 48.4 39.4 53.7 70.8H279.6zM223.7 96l.3 0 .3 0c2.4 3.5 5.7 8.9 9.1 16.5c6 13.6 12.4 34.3 14.2 63.5H200.5c1.8-29.2 8.1-49.9 14.2-63.5c3.4-7.6 6.7-13 9.1-16.5zM183 105.2c-6.8 17.1-12.9 40.4-14.6 70.8H129.3c5.3-31.4 25.8-57.6 53.7-70.8zM352 192c0-70.7-57.3-128-128-128S96 121.3 96 192s57.3 128 128 128s128-57.3 128-128zM112 384c-8.8 0-16 7.2-16 16s7.2 16 16 16H336c8.8 0 16-7.2 16-16s-7.2-16-16-16H112z',
    ],
  };
  var faHeartPulse = {
    prefix: 'fas',
    iconName: 'heart-pulse',
    icon: [
      512,
      512,
      ['heartbeat'],
      'f21e',
      'M228.3 469.1L47.6 300.4c-4.2-3.9-8.2-8.1-11.9-12.4h87c22.6 0 43-13.6 51.7-34.5l10.5-25.2 49.3 109.5c3.8 8.5 12.1 14 21.4 14.1s17.8-5 22-13.3L320 253.7l1.7 3.4c9.5 19 28.9 31 50.1 31H476.3c-3.7 4.3-7.7 8.5-11.9 12.4L283.7 469.1c-7.5 7-17.4 10.9-27.7 10.9s-20.2-3.9-27.7-10.9zM503.7 240h-132c-3 0-5.8-1.7-7.2-4.4l-23.2-46.3c-4.1-8.1-12.4-13.3-21.5-13.3s-17.4 5.1-21.5 13.3l-41.4 82.8L205.9 158.2c-3.9-8.7-12.7-14.3-22.2-14.1s-18.1 5.9-21.8 14.8l-31.8 76.3c-1.2 3-4.2 4.9-7.4 4.9H16c-2.6 0-5 .4-7.3 1.1C3 225.2 0 208.2 0 190.9v-5.8c0-69.9 50.5-129.5 119.4-141C165 36.5 211.4 51.4 244 84l12 12 12-12c32.6-32.6 79-47.5 124.6-39.9C461.5 55.6 512 115.2 512 185.1v5.8c0 16.9-2.8 33.5-8.3 49.1z',
    ],
  };
  var faHeartbeat = faHeartPulse;
  var faPeopleCarryBox = {
    prefix: 'fas',
    iconName: 'people-carry-box',
    icon: [
      640,
      512,
      ['people-carry'],
      'f4ce',
      'M176 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM144 241.7v65.1l51 51c7.1 7.1 11.8 16.2 13.4 26.1l15.2 90.9c2.9 17.4-8.9 33.9-26.3 36.8s-33.9-8.9-36.8-26.3l-14.3-85.9L66.8 320C54.8 308 48 291.7 48 274.7V186.6c0-32.4 26.2-58.6 58.6-58.6c24.1 0 46.5 12 59.9 32l47.4 71.1 10.1 5V160c0-17.7 14.3-32 32-32H384c17.7 0 32 14.3 32 32v76.2l10.1-5L473.5 160c13.3-20 35.8-32 59.9-32c32.4 0 58.6 26.2 58.6 58.6v88.1c0 17-6.7 33.3-18.7 45.3l-79.4 79.4-14.3 85.9c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8l15.2-90.9c1.6-9.9 6.3-19 13.4-26.1l51-51V241.7l-19 28.5c-4.6 7-11 12.6-18.5 16.3l-59.6 29.8c-2.4 1.3-4.9 2.2-7.6 2.8c-2.6 .6-5.3 .9-7.9 .8H256.7c-2.5 .1-5-.2-7.5-.7c-2.9-.6-5.6-1.6-8.1-3l-59.5-29.8c-7.5-3.7-13.8-9.4-18.5-16.3l-19-28.5zM2.3 468.1L50.1 348.6l49.2 49.2-37.6 94c-6.6 16.4-25.2 24.4-41.6 17.8S-4.3 484.5 2.3 468.1zM512 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm77.9 252.6l47.8 119.5c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8l-37.6-94 49.2-49.2z',
    ],
  };
  var faPeopleCarry = faPeopleCarryBox;
  var faTemperatureHigh = {
    prefix: 'fas',
    iconName: 'temperature-high',
    icon: [
      512,
      512,
      [],
      'f769',
      'M416 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm0 64c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96s43 96 96 96zM96 112c0-26.5 21.5-48 48-48s48 21.5 48 48V276.5c0 17.3 7.1 31.9 15.3 42.5C217.8 332.6 224 349.5 224 368c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-18.5 6.2-35.4 16.7-48.9C88.9 308.4 96 293.8 96 276.5V112zM144 0C82.1 0 32 50.2 32 112V276.5c0 .1-.1 .3-.2 .6c-.2 .6-.8 1.6-1.7 2.8C11.2 304.2 0 334.8 0 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-33.2-11.3-63.8-30.1-88.1c-.9-1.2-1.5-2.2-1.7-2.8c-.1-.3-.2-.5-.2-.6V112C256 50.2 205.9 0 144 0zm0 416c26.5 0 48-21.5 48-48c0-20.9-13.4-38.7-32-45.3V112c0-8.8-7.2-16-16-16s-16 7.2-16 16V322.7c-18.6 6.6-32 24.4-32 45.3c0 26.5 21.5 48 48 48z',
    ],
  };
  var faMicrochip = {
    prefix: 'fas',
    iconName: 'microchip',
    icon: [
      512,
      512,
      [],
      'f2db',
      'M176 24c0-13.3-10.7-24-24-24s-24 10.7-24 24V64c-35.3 0-64 28.7-64 64H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H64v56H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H64v56H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H64c0 35.3 28.7 64 64 64v40c0 13.3 10.7 24 24 24s24-10.7 24-24V448h56v40c0 13.3 10.7 24 24 24s24-10.7 24-24V448h56v40c0 13.3 10.7 24 24 24s24-10.7 24-24V448c35.3 0 64-28.7 64-64h40c13.3 0 24-10.7 24-24s-10.7-24-24-24H448V280h40c13.3 0 24-10.7 24-24s-10.7-24-24-24H448V176h40c13.3 0 24-10.7 24-24s-10.7-24-24-24H448c0-35.3-28.7-64-64-64V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V64H280V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V64H176V24zM160 128H352c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H160c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32zm192 32H160V352H352V160z',
    ],
  };
  var faCrown = {
    prefix: 'fas',
    iconName: 'crown',
    icon: [
      576,
      512,
      [128081],
      'f521',
      'M309 106c11.4-7 19-19.7 19-34c0-22.1-17.9-40-40-40s-40 17.9-40 40c0 14.4 7.6 27 19 34L209.7 220.6c-9.1 18.2-32.7 23.4-48.6 10.7L72 160c5-6.7 8-15 8-24c0-22.1-17.9-40-40-40S0 113.9 0 136s17.9 40 40 40c.2 0 .5 0 .7 0L86.4 427.4c5.5 30.4 32 52.6 63 52.6H426.6c30.9 0 57.4-22.1 63-52.6L535.3 176c.2 0 .5 0 .7 0c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40c0 9 3 17.3 8 24l-89.1 71.3c-15.9 12.7-39.5 7.5-48.6-10.7L309 106z',
    ],
  };
  var faWeightHanging = {
    prefix: 'fas',
    iconName: 'weight-hanging',
    icon: [
      512,
      512,
      [],
      'f5cd',
      'M288 96c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm58.5 32c3.5-10 5.5-20.8 5.5-32c0-53-43-96-96-96s-96 43-96 96c0 11.2 1.9 22 5.5 32H120c-22 0-41.2 15-46.6 36.4l-72 288c-3.6 14.3-.4 29.5 8.7 41.2S33.2 512 48 512H464c14.8 0 28.7-6.8 37.8-18.5s12.3-26.8 8.7-41.2l-72-288C433.2 143 414 128 392 128H346.5z',
    ],
  };
  var faXmarksLines = {
    prefix: 'fas',
    iconName: 'xmarks-lines',
    icon: [
      640,
      512,
      [],
      'e59a',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zm0 384c-17.7 0-32 14.3-32 32s14.3 32 32 32H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM7 167c-9.4 9.4-9.4 24.6 0 33.9l55 55L7 311c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l55-55 55 55c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-55-55 55-55c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-55 55L41 167c-9.4-9.4-24.6-9.4-33.9 0zM265 167c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l55 55-55 55c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l55-55 55 55c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-55-55 55-55c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-55 55-55-55zM455 167c-9.4 9.4-9.4 24.6 0 33.9l55 55-55 55c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l55-55 55 55c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-55-55 55-55c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-55 55-55-55c-9.4-9.4-24.6-9.4-33.9 0z',
    ],
  };
  var faFilePrescription = {
    prefix: 'fas',
    iconName: 'file-prescription',
    icon: [
      384,
      512,
      [],
      'f572',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM104 196h72c33.1 0 60 26.9 60 60c0 25.5-15.9 47.2-38.3 55.9l43 40.3 33.8-31c8.1-7.5 20.8-6.9 28.3 1.2s6.9 20.8-1.2 28.3L270 379.7l31.7 29.7c8.1 7.6 8.5 20.2 .9 28.3s-20.2 8.5-28.3 .9l-33.9-31.8-34.9 32c-8.1 7.5-20.8 6.9-28.3-1.2s-6.9-20.8 1.2-28.3l32.6-29.9-64.8-60.8c-.9-.8-1.6-1.7-2.3-2.6H124v44c0 11-9 20-20 20s-20-9-20-20V296 216c0-11 9-20 20-20zm72 80c11 0 20-9 20-20s-9-20-20-20H124v40h52z',
    ],
  };
  var faWeightScale = {
    prefix: 'fas',
    iconName: 'weight-scale',
    icon: [
      512,
      512,
      ['weight'],
      'f496',
      'M384 176c0 70.7-57.3 128-128 128s-128-57.3-128-128s57.3-128 128-128s128 57.3 128 128zm7.8-112C359.5 24.9 310.7 0 256 0S152.5 24.9 120.2 64H64C28.7 64 0 92.7 0 128V448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H391.8zM296 224c0-10.6-4.1-20.2-10.9-27.4l33.6-78.3c3.5-8.1-.3-17.5-8.4-21s-17.5 .3-21 8.4L255.7 184c-22 .1-39.7 18-39.7 40c0 22.1 17.9 40 40 40s40-17.9 40-40z',
    ],
  };
  var faWeight = faWeightScale;
  var faUserGroup = {
    prefix: 'fas',
    iconName: 'user-group',
    icon: [
      640,
      512,
      [128101, 'user-friends'],
      'f500',
      'M352 128c0 70.7-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM609.3 512H471.4c5.4-9.4 8.6-20.3 8.6-32v-8c0-60.7-27.1-115.2-69.8-151.8c2.4-.1 4.7-.2 7.1-.2h61.4C567.8 320 640 392.2 640 481.3c0 17-13.8 30.7-30.7 30.7zM432 256c-31 0-59-12.6-79.3-32.9C372.4 196.5 384 163.6 384 128c0-26.8-6.6-52.1-18.3-74.3C384.3 40.1 407.2 32 432 32c61.9 0 112 50.1 112 112s-50.1 112-112 112z',
    ],
  };
  var faUserFriends = faUserGroup;
  var faArrowUpAZ = {
    prefix: 'fas',
    iconName: 'arrow-up-a-z',
    icon: [
      576,
      512,
      ['sort-alpha-up'],
      'f15e',
      'M183.6 42.4C177.5 35.8 169 32 160 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L128 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 320c0 17.7 14.3 32 32 32h50.7l-73.4 73.4c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H429.3l73.4-73.4c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H352c-17.7 0-32 14.3-32 32zM416 32c-12.1 0-23.2 6.8-28.6 17.7l-64 128-16 32c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3l7.2-14.3h88.4l7.2 14.3c7.9 15.8 27.1 22.2 42.9 14.3s22.2-27.1 14.3-42.9l-16-32-64-128C439.2 38.8 428.1 32 416 32zM395.8 176L416 135.6 436.2 176H395.8z',
    ],
  };
  var faSortAlphaUp = faArrowUpAZ;
  var faChessKnight = {
    prefix: 'fas',
    iconName: 'chess-knight',
    icon: [
      384,
      512,
      [9822],
      'f441',
      'M32 391.6V416H352V224c0-106-86-192-192-192H12.9C5.8 32 0 37.8 0 44.9c0 2 .5 4 1.4 5.8L16 80 9.4 86.6c-6 6-9.4 14.1-9.4 22.6V242.3c0 13.1 8 24.9 20.1 29.7l46.5 18.6c8.5 3.4 18 3 26.2-1.1l6.6-3.3c8-4 14-11.2 16.5-19.8l8.3-28.9c2.5-8.6 8.4-15.8 16.5-19.8L160 208v40.4c0 24.2-13.7 46.4-35.4 57.2L67.4 334.3C45.7 345.2 32 367.3 32 391.6zM72 148c0 11-9 20-20 20s-20-9-20-20s9-20 20-20s20 9 20 20zM352 448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H352c17.7 0 32-14.3 32-32s-14.3-32-32-32z',
    ],
  };
  var faFaceLaughSquint = {
    prefix: 'fas',
    iconName: 'face-laugh-squint',
    icon: [
      512,
      512,
      ['laugh-squint'],
      'f59b',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM96.8 314.1c-3.8-13.7 7.4-26.1 21.6-26.1H393.6c14.2 0 25.5 12.4 21.6 26.1C396.2 382 332.1 432 256 432s-140.2-50-159.2-117.9zm36.7-199.4l89.9 47.9c10.7 5.7 10.7 21.1 0 26.8l-89.9 47.9c-7.9 4.2-17.5-1.5-17.5-10.5c0-2.8 1-5.5 2.8-7.6l36-43.2-36-43.2c-1.8-2.1-2.8-4.8-2.8-7.6c0-9 9.6-14.7 17.5-10.5zM396 125.1c0 2.8-1 5.5-2.8 7.6l-36 43.2 36 43.2c1.8 2.1 2.8 4.8 2.8 7.6c0 9-9.6 14.7-17.5 10.5l-89.9-47.9c-10.7-5.7-10.7-21.1 0-26.8l89.9-47.9c7.9-4.2 17.5 1.5 17.5 10.5z',
    ],
  };
  var faLaughSquint = faFaceLaughSquint;
  var faWheelchair = {
    prefix: 'fas',
    iconName: 'wheelchair',
    icon: [
      576,
      512,
      [],
      'f193',
      'M224 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM152.5 247.2c12.4-4.7 18.7-18.5 14-30.9s-18.5-18.7-30.9-14C75.1 225.1 32 283.5 32 352c0 88.4 71.6 160 160 160c61.2 0 114.3-34.3 141.2-84.7c6.2-11.7 1.8-26.2-9.9-32.5s-26.2-1.8-32.5 9.9C272 440 234.8 464 192 464c-61.9 0-112-50.1-112-112c0-47.9 30.1-88.8 72.5-104.8zM291.8 176l-1.9-9.7c-4.5-22.3-24-38.3-46.8-38.3c-30.1 0-52.7 27.5-46.8 57l23.1 115.5c6 29.9 32.2 51.4 62.8 51.4h5.1c.4 0 .8 0 1.3 0h94.1c6.7 0 12.6 4.1 15 10.4L434 459.2c6 16.1 23.8 24.6 40.1 19.1l48-16c16.8-5.6 25.8-23.7 20.2-40.5s-23.7-25.8-40.5-20.2l-18.7 6.2-25.5-68c-11.7-31.2-41.6-51.9-74.9-51.9H314.2l-9.6-48H368c17.7 0 32-14.3 32-32s-14.3-32-32-32H291.8z',
    ],
  };
  var faCircleArrowUp = {
    prefix: 'fas',
    iconName: 'circle-arrow-up',
    icon: [
      512,
      512,
      ['arrow-circle-up'],
      'f0aa',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM385 215c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-71-71V392c0 13.3-10.7 24-24 24s-24-10.7-24-24V177.9l-71 71c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L239 103c9.4-9.4 24.6-9.4 33.9 0L385 215z',
    ],
  };
  var faArrowCircleUp = faCircleArrowUp;
  var faToggleOn = {
    prefix: 'fas',
    iconName: 'toggle-on',
    icon: [
      576,
      512,
      [],
      'f205',
      'M192 64C86 64 0 150 0 256S86 448 192 448H384c106 0 192-86 192-192s-86-192-192-192H192zM384 352c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z',
    ],
  };
  var faPersonWalking = {
    prefix: 'fas',
    iconName: 'person-walking',
    icon: [
      320,
      512,
      [128694, 'walking'],
      'f554',
      'M256 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM126.5 199.3c-1 .4-1.9 .8-2.9 1.2l-8 3.5c-16.4 7.3-29 21.2-34.7 38.2l-2.6 7.8c-5.6 16.8-23.7 25.8-40.5 20.2s-25.8-23.7-20.2-40.5l2.6-7.8c11.4-34.1 36.6-61.9 69.4-76.5l8-3.5c20.8-9.2 43.3-14 66.1-14c44.6 0 84.8 26.8 101.9 67.9L281 232.7l21.4 10.7c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3L247 287.3c-10.3-5.2-18.4-13.8-22.8-24.5l-9.6-23-19.3 65.5 49.5 54c5.4 5.9 9.2 13 11.2 20.8l23 92.1c4.3 17.1-6.1 34.5-23.3 38.8s-34.5-6.1-38.8-23.3l-22-88.1-70.7-77.1c-14.8-16.1-20.3-38.6-14.7-59.7l16.9-63.5zM68.7 398l25-62.4c2.1 3 4.5 5.8 7 8.6l40.7 44.4-14.5 36.2c-2.4 6-6 11.5-10.6 16.1L54.6 502.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L68.7 398z',
    ],
  };
  var faWalking = faPersonWalking;
  var faL = {
    prefix: 'fas',
    iconName: 'l',
    icon: [
      320,
      512,
      [108],
      '4c',
      'M64 32c17.7 0 32 14.3 32 32V416H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32z',
    ],
  };
  var faFire = {
    prefix: 'fas',
    iconName: 'fire',
    icon: [
      448,
      512,
      [128293],
      'f06d',
      'M159.3 5.4c7.8-7.3 19.9-7.2 27.7 .1c27.6 25.9 53.5 53.8 77.7 84c11-14.4 23.5-30.1 37-42.9c7.9-7.4 20.1-7.4 28 .1c34.6 33 63.9 76.6 84.5 118c20.3 40.8 33.8 82.5 33.8 111.9C448 404.2 348.2 512 224 512C98.4 512 0 404.1 0 276.5c0-38.4 17.8-85.3 45.4-131.7C73.3 97.7 112.7 48.6 159.3 5.4zM225.7 416c25.3 0 47.7-7 68.8-21c42.1-29.4 53.4-88.2 28.1-134.4c-2.8-5.6-5.6-11.2-9.8-16.8l-50.6 58.8s-81.4-103.6-87.1-110.6C133.1 243.8 112 273.2 112 306.8C112 375.4 162.6 416 225.7 416z',
    ],
  };
  var faBedPulse = {
    prefix: 'fas',
    iconName: 'bed-pulse',
    icon: [
      640,
      512,
      ['procedures'],
      'f487',
      'M483.2 9.6L524 64h92c13.3 0 24 10.7 24 24s-10.7 24-24 24H512c-7.6 0-14.7-3.6-19.2-9.6L468.7 70.3l-47 99.9c-3.7 7.8-11.3 13.1-19.9 13.7s-16.9-3.4-21.7-10.6L339.2 112H216c-13.3 0-24-10.7-24-24s10.7-24 24-24H352c8 0 15.5 4 20 10.7l24.4 36.6 45.9-97.5C445.9 6.2 453.2 1 461.6 .1s16.6 2.7 21.6 9.5zM320 160h12.7l20.7 31.1c11.2 16.8 30.6 26.3 50.7 24.8s37.9-13.7 46.5-32L461.9 160H544c53 0 96 43 96 96V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H352 320 64v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V96C0 78.3 14.3 64 32 64s32 14.3 32 32V352H288V192c0-17.7 14.3-32 32-32zM176 320c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faProcedures = faBedPulse;
  var faShuttleSpace = {
    prefix: 'fas',
    iconName: 'shuttle-space',
    icon: [
      640,
      512,
      ['space-shuttle'],
      'f197',
      'M130 480c40.6 0 80.4-11 115.2-31.9L352 384l-224 0 0 96h2zM352 128L245.2 63.9C210.4 43 170.6 32 130 32h-2v96l224 0zM96 128l0-96H80C53.5 32 32 53.5 32 80v48h8c-22.1 0-40 17.9-40 40v16V328v16c0 22.1 17.9 40 40 40H32v48c0 26.5 21.5 48 48 48H96l0-96h8c26.2 0 49.4-12.6 64-32H456c69.3 0 135-22.7 179.2-81.6c6.4-8.5 6.4-20.3 0-28.8C591 182.7 525.3 160 456 160H168c-14.6-19.4-37.8-32-64-32l-8 0zM512 243.6v24.9c0 19.6-15.9 35.6-35.6 35.6c-2.5 0-4.4-2-4.4-4.4V212.4c0-2.5 2-4.4 4.4-4.4c19.6 0 35.6 15.9 35.6 35.6z',
    ],
  };
  var faSpaceShuttle = faShuttleSpace;
  var faFaceLaugh = {
    prefix: 'fas',
    iconName: 'face-laugh',
    icon: [
      512,
      512,
      ['laugh'],
      'f599',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM96.8 314.1c-3.8-13.7 7.4-26.1 21.6-26.1H393.6c14.2 0 25.5 12.4 21.6 26.1C396.2 382 332.1 432 256 432s-140.2-50-159.2-117.9zM208.4 192c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faLaugh = faFaceLaugh;
  var faFolderOpen = {
    prefix: 'fas',
    iconName: 'folder-open',
    icon: [
      576,
      512,
      [128194, 128449, 61717],
      'f07c',
      'M88.7 223.8L0 375.8V96C0 60.7 28.7 32 64 32H181.5c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7H416c35.3 0 64 28.7 64 64v32H144c-22.8 0-43.8 12.1-55.3 31.8zm27.6 16.1C122.1 230 132.6 224 144 224H544c11.5 0 22 6.1 27.7 16.1s5.7 22.2-.1 32.1l-112 192C453.9 474 443.4 480 432 480H32c-11.5 0-22-6.1-27.7-16.1s-5.7-22.2 .1-32.1l112-192z',
    ],
  };
  var faHeartCirclePlus = {
    prefix: 'fas',
    iconName: 'heart-circle-plus',
    icon: [
      576,
      512,
      [],
      'e500',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm16-208v48h48c8.8 0 16 7.2 16 16s-7.2 16-16 16H448v48c0 8.8-7.2 16-16 16s-16-7.2-16-16V384H368c-8.8 0-16-7.2-16-16s7.2-16 16-16h48V304c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faCodeFork = {
    prefix: 'fas',
    iconName: 'code-fork',
    icon: [
      448,
      512,
      [],
      'e13b',
      'M80 104c13.3 0 24-10.7 24-24s-10.7-24-24-24S56 66.7 56 80s10.7 24 24 24zm80-24c0 32.8-19.7 61-48 73.3V192c0 17.7 14.3 32 32 32H304c17.7 0 32-14.3 32-32V153.3C307.7 141 288 112.8 288 80c0-44.2 35.8-80 80-80s80 35.8 80 80c0 32.8-19.7 61-48 73.3V192c0 53-43 96-96 96H256v70.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V288H144c-53 0-96-43-96-96V153.3C19.7 141 0 112.8 0 80C0 35.8 35.8 0 80 0s80 35.8 80 80zm208 24c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zM248 432c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faCity = {
    prefix: 'fas',
    iconName: 'city',
    icon: [
      640,
      512,
      [127961],
      'f64f',
      'M480 48c0-26.5-21.5-48-48-48H336c-26.5 0-48 21.5-48 48V96H224V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V96H112V24c0-13.3-10.7-24-24-24S64 10.7 64 24V96H48C21.5 96 0 117.5 0 144v96V464c0 26.5 21.5 48 48 48H304h32 96H592c26.5 0 48-21.5 48-48V240c0-26.5-21.5-48-48-48H480V48zm96 320v32c0 8.8-7.2 16-16 16H528c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16zM240 416H208c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16zM128 400c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32zM560 256c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H528c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h32zM256 176v32c0 8.8-7.2 16-16 16H208c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16zM112 160c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h32zM256 304c0 8.8-7.2 16-16 16H208c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32zM112 320H80c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16zm304-48v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16zM400 64c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V80c0-8.8 7.2-16 16-16h32zm16 112v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16z',
    ],
  };
  var faMicrophoneLines = {
    prefix: 'fas',
    iconName: 'microphone-lines',
    icon: [
      384,
      512,
      [127897, 'microphone-alt'],
      'f3c9',
      'M96 96V256c0 53 43 96 96 96s96-43 96-96H208c-8.8 0-16-7.2-16-16s7.2-16 16-16h80V192H208c-8.8 0-16-7.2-16-16s7.2-16 16-16h80V128H208c-8.8 0-16-7.2-16-16s7.2-16 16-16h80c0-53-43-96-96-96S96 43 96 96zM320 240v16c0 70.7-57.3 128-128 128s-128-57.3-128-128V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 89.1 66.2 162.7 152 174.4V464H120c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H216V430.4c85.8-11.7 152-85.3 152-174.4V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v24z',
    ],
  };
  var faMicrophoneAlt = faMicrophoneLines;
  var faPepperHot = {
    prefix: 'fas',
    iconName: 'pepper-hot',
    icon: [
      512,
      512,
      [127798],
      'f816',
      'M428.3 3c11.6-6.4 26.2-2.3 32.6 9.3l4.8 8.7c19.3 34.7 19.8 75.7 3.4 110C495.8 159.6 512 197.9 512 240c0 18.5-3.1 36.3-8.9 52.8c-6.1 17.3-28.5 16.3-36.8-.1l-11.7-23.4c-4.1-8.1-12.4-13.3-21.5-13.3H360c-13.3 0-24-10.7-24-24V152c0-13.3-10.7-24-24-24l-17.1 0c-21.3 0-30-23.9-10.8-32.9C304.7 85.4 327.7 80 352 80c28.3 0 54.8 7.3 77.8 20.2c5.5-18.2 3.7-38.4-6-55.8L419 35.7c-6.4-11.6-2.3-26.2 9.3-32.6zM171.2 345.5L264 160l40 0v80c0 26.5 21.5 48 48 48h76.2l23.9 47.8C372.3 443.9 244.3 512 103.2 512H44.4C19.9 512 0 492.1 0 467.6c0-20.8 14.5-38.8 34.8-43.3l49.8-11.1c37.6-8.4 69.5-33.2 86.7-67.7z',
    ],
  };
  var faUnlock = {
    prefix: 'fas',
    iconName: 'unlock',
    icon: [
      448,
      512,
      [128275],
      'f09c',
      'M144 144c0-44.2 35.8-80 80-80c31.9 0 59.4 18.6 72.3 45.7c7.6 16 26.7 22.8 42.6 15.2s22.8-26.7 15.2-42.6C331 33.7 281.5 0 224 0C144.5 0 80 64.5 80 144v48H64c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V256c0-35.3-28.7-64-64-64H144V144z',
    ],
  };
  var faColonSign = {
    prefix: 'fas',
    iconName: 'colon-sign',
    icon: [
      384,
      512,
      [],
      'e140',
      'M255 39.8c4.3-17.1-6.1-34.5-23.3-38.8S197.2 7.1 193 24.2L181.9 68.6C96.1 87.8 32 164.4 32 256c0 58.1 25.8 110.2 66.7 145.4L81 472.2c-4.3 17.1 6.1 34.5 23.3 38.8s34.5-6.1 38.8-23.3l13-52.1c9 3.4 18.4 6.2 28 8.2L177 472.2c-4.3 17.1 6.1 34.5 23.3 38.8s34.5-6.1 38.8-23.3l10.4-41.4c33.4-4.4 64.1-17.4 89.8-36.7c14.1-10.6 17-30.7 6.4-44.8s-30.7-17-44.8-6.4c-10.2 7.7-21.7 13.9-34 18.3L321 160c9.4-.3 18.5-4.7 24.6-12.8c10.6-14.1 7.8-34.2-6.4-44.8c-1.1-.8-2.2-1.6-3.3-2.4L351 39.8c4.3-17.1-6.1-34.5-23.3-38.8S293.2 7.1 289 24.2L277.1 71.5c-9.3-2.7-18.8-4.6-28.6-5.9L255 39.8zM163.2 143.3L117.3 326.8C103.9 306.5 96 282.2 96 256c0-48.7 27.2-91 67.2-112.7zm8.6 229.5l61.1-244.6c9.9 .7 19.5 2.5 28.7 5.3l-62 248.1c-9.7-1.9-19-4.8-27.8-8.8z',
    ],
  };
  var faHeadset = {
    prefix: 'fas',
    iconName: 'headset',
    icon: [
      512,
      512,
      [],
      'f590',
      'M256 48C141.1 48 48 141.1 48 256v40c0 13.3-10.7 24-24 24s-24-10.7-24-24V256C0 114.6 114.6 0 256 0S512 114.6 512 256V400.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24H240c-26.5 0-48-21.5-48-48s21.5-48 48-48h32c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40V256c0-114.9-93.1-208-208-208zM144 208h16c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H144c-35.3 0-64-28.7-64-64V272c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64v48c0 35.3-28.7 64-64 64H352c-17.7 0-32-14.3-32-32V240c0-17.7 14.3-32 32-32h16z',
    ],
  };
  var faStoreSlash = {
    prefix: 'fas',
    iconName: 'store-slash',
    icon: [
      640,
      512,
      [],
      'e071',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-86.8-68V384 252.6c-4 1-8 1.8-12.3 2.3l-.1 0c-5.3 .7-10.7 1.1-16.2 1.1c-12.4 0-24.3-1.9-35.4-5.3V350.9L301.2 210.7c7-4.4 13.3-9.7 18.8-15.7c15.9 17.6 39.1 29 65.2 29c26.2 0 49.3-11.4 65.2-29c16 17.6 39.1 29 65.2 29c4.1 0 8.1-.3 12.1-.8c55.5-7.4 81.8-72.5 52.1-119.4L522.3 13.1C517.2 5 508.1 0 498.4 0H141.6c-9.7 0-18.8 5-23.9 13.1l-22.7 36L38.8 5.1zm73.4 218.1c4 .5 8.1 .8 12.1 .8c11 0 21.4-2 31-5.6L48.9 134.5c-6.1 40.6 19.5 82.8 63.3 88.7zM160 384V250.6c-11.2 3.5-23.2 5.4-35.6 5.4c-5.5 0-11-.4-16.3-1.1l-.1 0c-4.1-.6-8.1-1.3-12-2.3V384v64c0 35.3 28.7 64 64 64H480c12.9 0 24.8-3.8 34.9-10.3L365.5 384H160z',
    ],
  };
  var faRoadCircleXmark = {
    prefix: 'fas',
    iconName: 'road-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e566',
      'M213.2 32H288V96c0 17.7 14.3 32 32 32s32-14.3 32-32V32h74.8c27.1 0 51.3 17.1 60.3 42.6l42.7 120.6c-10.9-2.1-22.2-3.2-33.8-3.2c-59.5 0-112.1 29.6-144 74.8V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 17.7 14.3 32 32 32c2.3 0 4.6-.3 6.8-.7c-4.5 15.5-6.8 31.8-6.8 48.7c0 5.4 .2 10.7 .7 16l-.7 0c-17.7 0-32 14.3-32 32v64H86.6C56.5 480 32 455.5 32 425.4c0-6.2 1.1-12.4 3.1-18.2L152.9 74.6C162 49.1 186.1 32 213.2 32zM496 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm22.6-144l36.7-36.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L496 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L473.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L496 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L518.6 368z',
    ],
  };
  var faUserMinus = {
    prefix: 'fas',
    iconName: 'user-minus',
    icon: [
      640,
      512,
      [],
      'f503',
      'M352 128c0 70.7-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM472 200H616c13.3 0 24 10.7 24 24s-10.7 24-24 24H472c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faMarsStrokeUp = {
    prefix: 'fas',
    iconName: 'mars-stroke-up',
    icon: [
      320,
      512,
      [9896, 'mars-stroke-v'],
      'f22a',
      'M148.7 4.7c6.2-6.2 16.4-6.2 22.6 0l64 64c4.6 4.6 5.9 11.5 3.5 17.4s-8.3 9.9-14.8 9.9H184v24h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H184v24c0 .6 0 1.2-.1 1.8c77 11.6 136.1 78 136.1 158.2c0 88.4-71.6 160-160 160S0 440.4 0 352c0-80.2 59.1-146.7 136.1-158.2c0-.6-.1-1.2-.1-1.8V168H104c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V96H96c-6.5 0-12.3-3.9-14.8-9.9s-1.1-12.9 3.5-17.4l64-64zM256 352c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96z',
    ],
  };
  var faMarsStrokeV = faMarsStrokeUp;
  var faChampagneGlasses = {
    prefix: 'fas',
    iconName: 'champagne-glasses',
    icon: [
      640,
      512,
      [129346, 'glass-cheers'],
      'f79f',
      'M320 128V49.1L186.6 .3c-11.4-4.2-24 .9-29.5 11.7L71.8 181.1c-30.8 61-8 133.8 48.1 167.4l-28 77.4L32.1 403.9C19.7 399.4 6 405.8 1.4 418.3s1.9 26.3 14.3 30.8l164.6 60.3c12.4 4.5 26.1-1.9 30.6-14.4s-1.9-26.3-14.3-30.8l-59.9-21.9 28-77.3c68.1 11.6 135.7-32.8 150.1-103.6l5.1-24.8 5.1 24.8c14.5 70.8 82 115.2 150.1 103.6l28 77.3-59.9 21.9c-12.4 4.5-18.8 18.3-14.3 30.8s18.2 18.9 30.6 14.4l164.6-60.3c12.4-4.5 18.8-18.3 14.3-30.8s-18.2-18.9-30.6-14.4l-59.9 21.9-28-77.4c56.1-33.6 78.8-106.4 48.1-167.4L482.9 12C477.4 1.1 464.7-3.9 453.4 .3L320 49.1V128h0zm-35.7 44.4L153.9 124.6l36.3-71.9L300.6 93.1l-16.2 79.3zm71.3 0L339.4 93.1 449.8 52.7l36.3 71.9L355.7 172.4z',
    ],
  };
  var faGlassCheers = faChampagneGlasses;
  var faClipboard = {
    prefix: 'fas',
    iconName: 'clipboard',
    icon: [
      384,
      512,
      [128203],
      'f328',
      'M192 0c-41.8 0-77.4 26.7-90.5 64H48C21.5 64 0 85.5 0 112V464c0 26.5 21.5 48 48 48H336c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H282.5C269.4 26.7 233.8 0 192 0zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm-80 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faHouseCircleExclamation = {
    prefix: 'fas',
    iconName: 'house-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e50a',
      'M320.7 351.7C329 262.1 404.3 192 496 192c8.9 0 17.6 .7 26.1 1.9L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V480c0 17.7 14.3 32 32 32H192c17.7 0 32-14.3 32-32V383.7c0-17.7 14.3-32 32-32h64l.7 0zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faFileArrowUp = {
    prefix: 'fas',
    iconName: 'file-arrow-up',
    icon: [
      384,
      512,
      ['file-upload'],
      'f574',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM216 408c0 13.3-10.7 24-24 24s-24-10.7-24-24V305.9l-31 31c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l72-72c9.4-9.4 24.6-9.4 33.9 0l72 72c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-31-31V408z',
    ],
  };
  var faFileUpload = faFileArrowUp;
  var faWifi = {
    prefix: 'fas',
    iconName: 'wifi',
    icon: [
      640,
      512,
      ['wifi-3', 'wifi-strong'],
      'f1eb',
      'M54.2 202.9C123.2 136.7 216.8 96 320 96s196.8 40.7 265.8 106.9c12.8 12.2 33 11.8 45.2-.9s11.8-33-.9-45.2C549.7 79.5 440.4 32 320 32S90.3 79.5 9.8 156.7C-2.9 169-3.3 189.2 8.9 202s32.5 13.2 45.2 .9zM320 256c56.8 0 108.6 21.1 148.2 56c13.3 11.7 33.5 10.4 45.2-2.8s10.4-33.5-2.8-45.2C459.8 219.2 393 192 320 192s-139.8 27.2-190.5 72c-13.3 11.7-14.5 31.9-2.8 45.2s31.9 14.5 45.2 2.8c39.5-34.9 91.3-56 148.2-56zm64 160c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faWifi3 = faWifi;
  var faWifiStrong = faWifi;
  var faBath = {
    prefix: 'fas',
    iconName: 'bath',
    icon: [
      512,
      512,
      [128705, 'bathtub'],
      'f2cd',
      'M96 77.3c0-7.3 5.9-13.3 13.3-13.3c3.5 0 6.9 1.4 9.4 3.9l14.9 14.9C130 91.8 128 101.7 128 112c0 19.9 7.2 38 19.2 52c-5.3 9.2-4 21.1 3.8 29c9.4 9.4 24.6 9.4 33.9 0L289 89c9.4-9.4 9.4-24.6 0-33.9c-7.9-7.9-19.8-9.1-29-3.8C246 39.2 227.9 32 208 32c-10.3 0-20.2 2-29.2 5.5L163.9 22.6C149.4 8.1 129.7 0 109.3 0C66.6 0 32 34.6 32 77.3V256c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H96V77.3zM32 352v16c0 28.4 12.4 54 32 71.6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V464H384v16c0 17.7 14.3 32 32 32s32-14.3 32-32V439.6c19.6-17.6 32-43.1 32-71.6V352H32z',
    ],
  };
  var faBathtub = faBath;
  var faUnderline = {
    prefix: 'fas',
    iconName: 'underline',
    icon: [
      448,
      512,
      [],
      'f0cd',
      'M16 64c0-17.7 14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H128V224c0 53 43 96 96 96s96-43 96-96V96H304c-17.7 0-32-14.3-32-32s14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H384V224c0 88.4-71.6 160-160 160s-160-71.6-160-160V96H48C30.3 96 16 81.7 16 64zM0 448c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faUserPen = {
    prefix: 'fas',
    iconName: 'user-pen',
    icon: [
      640,
      512,
      ['user-edit'],
      'f4ff',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H322.8c-3.1-8.8-3.7-18.4-1.4-27.8l15-60.1c2.8-11.3 8.6-21.5 16.8-29.7l40.3-40.3c-32.1-31-75.7-50.1-123.9-50.1H178.3zm435.5-68.3c-15.6-15.6-40.9-15.6-56.6 0l-29.4 29.4 71 71 29.4-29.4c15.6-15.6 15.6-40.9 0-56.6l-14.4-14.4zM375.9 417c-4.1 4.1-7 9.2-8.4 14.9l-15 60.1c-1.4 5.5 .2 11.2 4.2 15.2s9.7 5.6 15.2 4.2l60.1-15c5.6-1.4 10.8-4.3 14.9-8.4L576.1 358.7l-71-71L375.9 417z',
    ],
  };
  var faUserEdit = faUserPen;
  var faSignature = {
    prefix: 'fas',
    iconName: 'signature',
    icon: [
      640,
      512,
      [],
      'f5b7',
      'M192 128c0-17.7 14.3-32 32-32s32 14.3 32 32v7.8c0 27.7-2.4 55.3-7.1 82.5l-84.4 25.3c-40.6 12.2-68.4 49.6-68.4 92v71.9c0 40 32.5 72.5 72.5 72.5c26 0 50-13.9 62.9-36.5l13.9-24.3c26.8-47 46.5-97.7 58.4-150.5l94.4-28.3-12.5 37.5c-3.3 9.8-1.6 20.5 4.4 28.8s15.7 13.3 26 13.3H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H460.4l18-53.9c3.8-11.3 .9-23.8-7.4-32.4s-20.7-11.8-32.2-8.4L316.4 198.1c2.4-20.7 3.6-41.4 3.6-62.3V128c0-53-43-96-96-96s-96 43-96 96v32c0 17.7 14.3 32 32 32s32-14.3 32-32V128zm-9.2 177l49-14.7c-10.4 33.8-24.5 66.4-42.1 97.2l-13.9 24.3c-1.5 2.6-4.3 4.3-7.4 4.3c-4.7 0-8.5-3.8-8.5-8.5V335.6c0-14.1 9.3-26.6 22.8-30.7zM24 368c-13.3 0-24 10.7-24 24s10.7 24 24 24H64.3c-.2-2.8-.3-5.6-.3-8.5V368H24zm592 48c13.3 0 24-10.7 24-24s-10.7-24-24-24H305.9c-6.7 16.3-14.2 32.3-22.3 48H616z',
    ],
  };
  var faStroopwafel = {
    prefix: 'fas',
    iconName: 'stroopwafel',
    icon: [
      512,
      512,
      [],
      'f551',
      'M256 496c132.5 0 240-107.5 240-240S388.5 16 256 16S16 123.5 16 256s107.5 240 240 240zM235.3 76.7L256 97.4l20.7-20.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L278.6 120 324 165.4 357.4 132l-16.7-16.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L380 109.4l8.7-8.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6l-8.7 8.7 16.7 16.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L380 154.6 346.6 188 392 233.4l20.7-20.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L414.6 256l20.7 20.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L392 278.6 346.6 324 380 357.4l16.7-16.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L402.6 380l8.7 8.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-8.7-8.7-16.7 16.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L357.4 380 324 346.6 278.6 392l20.7 20.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L256 414.6l-20.7 20.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L233.4 392 188 346.6 154.6 380l16.7 16.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L132 402.6l-8.7 8.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l8.7-8.7L92.7 363.3c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L132 357.4 165.4 324 120 278.6 99.3 299.3c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L97.4 256 76.7 235.3c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L120 233.4 165.4 188 132 154.6l-16.7 16.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L109.4 132l-8.7-8.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0l8.7 8.7 16.7-16.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6L154.6 132 188 165.4 233.4 120 212.7 99.3c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0zM210.6 188L256 233.4 301.4 188 256 142.6 210.6 188zm68 68L324 301.4 369.4 256 324 210.6 278.6 256zM256 278.6L210.6 324 256 369.4 301.4 324 256 278.6zM233.4 256L188 210.6 142.6 256 188 301.4 233.4 256z',
    ],
  };
  var faBold = {
    prefix: 'fas',
    iconName: 'bold',
    icon: [
      384,
      512,
      [],
      'f032',
      'M0 64C0 46.3 14.3 32 32 32H80 96 224c70.7 0 128 57.3 128 128c0 31.3-11.3 60.1-30 82.3c37.1 22.4 62 63.1 62 109.7c0 70.7-57.3 128-128 128H96 80 32c-17.7 0-32-14.3-32-32s14.3-32 32-32H48V256 96H32C14.3 96 0 81.7 0 64zM224 224c35.3 0 64-28.7 64-64s-28.7-64-64-64H112V224H224zM112 288V416H256c35.3 0 64-28.7 64-64s-28.7-64-64-64H224 112z',
    ],
  };
  var faAnchorLock = {
    prefix: 'fas',
    iconName: 'anchor-lock',
    icon: [
      640,
      512,
      [],
      'e4ad',
      'M256 96c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm85.1 80C367 158.8 384 129.4 384 96c0-53-43-96-96-96s-96 43-96 96c0 33.4 17 62.8 42.9 80H224c-17.7 0-32 14.3-32 32s14.3 32 32 32h32V448H208c-53 0-96-43-96-96v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97 263c-9.4-9.4-24.6-9.4-33.9 0L7 319c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 88.4 71.6 160 160 160h80 80c8 0 15.9-.6 23.6-1.7c-4.8-9-7.6-19.3-7.6-30.3V446.7c-5.2 .9-10.5 1.3-16 1.3H320V240h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H341.1zM528 240c17.7 0 32 14.3 32 32v48H496V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faBuildingNgo = {
    prefix: 'fas',
    iconName: 'building-ngo',
    icon: [
      384,
      512,
      [],
      'e4d7',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM168 64h48c8.8 0 16 7.2 16 16s-7.2 16-16 16H184v64h16V144c0-8.8 7.2-16 16-16s16 7.2 16 16v24c0 13.3-10.7 24-24 24H176c-13.3 0-24-10.7-24-24V80c0-8.8 7.2-16 16-16zM304 96c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16s16-7.2 16-16V112c0-8.8-7.2-16-16-16zm-48 16c0-26.5 21.5-48 48-48s48 21.5 48 48v32c0 26.5-21.5 48-48 48s-48-21.5-48-48V112zM61.3 71.1l34.7 52V80c0-8.8 7.2-16 16-16s16 7.2 16 16v96c0 7.1-4.6 13.3-11.4 15.3s-14-.6-17.9-6.4L64 132.8V176c0 8.8-7.2 16-16 16s-16-7.2-16-16V80c0-7.1 4.6-13.3 11.4-15.3s14 .6 17.9 6.4z',
    ],
  };
  var faManatSign = {
    prefix: 'fas',
    iconName: 'manat-sign',
    icon: [
      384,
      512,
      [],
      'e1d5',
      'M192 32c-17.7 0-32 14.3-32 32V98.7C69.2 113.9 0 192.9 0 288V448c0 17.7 14.3 32 32 32s32-14.3 32-32V288c0-59.6 40.8-109.8 96-124V448c0 17.7 14.3 32 32 32s32-14.3 32-32V164c55.2 14.2 96 64.3 96 124V448c0 17.7 14.3 32 32 32s32-14.3 32-32V288c0-95.1-69.2-174.1-160-189.3V64c0-17.7-14.3-32-32-32z',
    ],
  };
  var faNotEqual = {
    prefix: 'fas',
    iconName: 'not-equal',
    icon: [
      448,
      512,
      [],
      'f53e',
      'M369.8 37.4c14.7 9.8 18.7 29.7 8.9 44.4L337.1 144H400c17.7 0 32 14.3 32 32s-14.3 32-32 32H294.5l-64 96H400c17.7 0 32 14.3 32 32s-14.3 32-32 32H187.8l-65.2 97.7c-9.8 14.7-29.7 18.7-44.4 8.9s-18.7-29.7-8.9-44.4L110.9 368H48c-17.7 0-32-14.3-32-32s14.3-32 32-32H153.5l64-96H48c-17.7 0-32-14.3-32-32s14.3-32 32-32H260.2l65.2-97.7c9.8-14.7 29.7-18.7 44.4-8.9z',
    ],
  };
  var faBorderTopLeft = {
    prefix: 'fas',
    iconName: 'border-top-left',
    icon: [
      448,
      512,
      ['border-style'],
      'f853',
      'M0 448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-336c0-8.8 7.2-16 16-16l336 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L80 32C35.8 32 0 67.8 0 112L0 448zm160 0c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm192 0c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm-96 0c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm192 0c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0 32c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zm0-128c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faBorderStyle = faBorderTopLeft;
  var faMapLocationDot = {
    prefix: 'fas',
    iconName: 'map-location-dot',
    icon: [
      576,
      512,
      ['map-marked-alt'],
      'f5a0',
      'M408 120c0 54.6-73.1 151.9-105.2 192c-7.7 9.6-22 9.6-29.6 0C241.1 271.9 168 174.6 168 120C168 53.7 221.7 0 288 0s120 53.7 120 120zm8 80.4c3.5-6.9 6.7-13.8 9.6-20.6c.5-1.2 1-2.5 1.5-3.7l116-46.4C558.9 123.4 576 135 576 152V422.8c0 9.8-6 18.6-15.1 22.3L416 503V200.4zM137.6 138.3c2.4 14.1 7.2 28.3 12.8 41.5c2.9 6.8 6.1 13.7 9.6 20.6V451.8L32.9 502.7C17.1 509 0 497.4 0 480.4V209.6c0-9.8 6-18.6 15.1-22.3l122.6-49zM327.8 332c13.9-17.4 35.7-45.7 56.2-77V504.3L192 449.4V255c20.5 31.3 42.3 59.6 56.2 77c20.5 25.6 59.1 25.6 79.6 0zM288 152c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40z',
    ],
  };
  var faMapMarkedAlt = faMapLocationDot;
  var faJedi = {
    prefix: 'fas',
    iconName: 'jedi',
    icon: [
      576,
      512,
      [],
      'f669',
      'M246 315.7l-21.2-31.9c-2.1-3.2-1.7-7.4 1-10.1s6.9-3.1 10.1-1l29.5 19.7c2.1 1.4 4.9 0 5-2.6L279.7 8c.1-4.5 3.8-8 8.3-8s8.1 3.5 8.3 8l9.4 281.9c.1 2.5 2.9 3.9 5 2.6l29.5-19.7c3.2-2.1 7.4-1.7 10.1 1s3.1 6.9 1 10.1L330 315.7c-1.3 1.9-.2 4.5 2 4.9l37.6 7.5c3.7 .7 6.4 4 6.4 7.8s-2.7 7.1-6.4 7.8L332 351.4c-2.2 .4-3.3 3-2 4.9l21.2 31.9c2.1 3.2 1.7 7.4-1 10.1s-6.9 3.1-10.1 1l-26.3-17.6c-2.2-1.4-5.1 .2-5 2.8l2.1 61.5C370.6 435.2 416 382.9 416 320c0-37-15.7-70.4-40.8-93.7c-7-6.5-6.5-18.6 1-24.4C410.1 175.5 432 134.3 432 88c0-16.8-2.9-33-8.2-48c-4.6-13 10.2-30 21.4-22c53.5 38 92.7 94.8 107.8 160.7c.5 2.1-.2 4.3-1.7 5.9l-28.4 28.4c-4 4-1.2 10.9 4.5 10.9h26c3.4 0 6.2 2.6 6.3 6c.1 3.3 .2 6.6 .2 10c0 17.5-1.7 34.7-4.8 51.3c-.2 1.2-.9 2.4-1.7 3.3l-46.5 46.5c-4 4-1.2 10.9 4.5 10.9H526c4.6 0 7.7 4.8 5.7 9C487.2 450.5 394.8 512 288 512S88.8 450.5 44.3 361c-2.1-4.2 1-9 5.7-9H64.5c5.7 0 8.6-6.9 4.5-10.9L22.6 294.6c-.9-.9-1.5-2-1.7-3.3C17.7 274.7 16 257.5 16 240c0-3.3 .1-6.7 .2-10c.1-3.4 2.9-6 6.3-6h26c5.7 0 8.6-6.9 4.5-10.9L24.6 184.6c-1.5-1.5-2.2-3.8-1.7-5.9C38.1 112.8 77.3 56 130.8 18c11.3-8 26 8.9 21.4 22c-5.3 15-8.2 31.2-8.2 48c0 46.3 21.9 87.5 55.8 113.9c7.5 5.8 8 17.9 1 24.4C175.7 249.6 160 283 160 320c0 62.9 45.4 115.2 105.1 126l2.1-61.5c.1-2.6-2.8-4.2-5-2.8l-26.3 17.6c-3.2 2.1-7.4 1.7-10.1-1s-3.1-6.9-1-10.1L246 356.3c1.3-1.9 .2-4.5-2-4.9l-37.6-7.5c-3.7-.7-6.4-4-6.4-7.8s2.7-7.1 6.4-7.8l37.6-7.5c2.2-.4 3.3-3 2-4.9z',
    ],
  };
  var faSquarePollVertical = {
    prefix: 'fas',
    iconName: 'square-poll-vertical',
    icon: [
      448,
      512,
      ['poll'],
      'f681',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm64 192c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V256c0-17.7 14.3-32 32-32zm64-64c0-17.7 14.3-32 32-32s32 14.3 32 32V352c0 17.7-14.3 32-32 32s-32-14.3-32-32V160zM320 288c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V320c0-17.7 14.3-32 32-32z',
    ],
  };
  var faPoll = faSquarePollVertical;
  var faMugHot = {
    prefix: 'fas',
    iconName: 'mug-hot',
    icon: [
      512,
      512,
      [9749],
      'f7b6',
      'M88 0C74.7 0 64 10.7 64 24c0 38.9 23.4 59.4 39.1 73.1l1.1 1C120.5 112.3 128 119.9 128 136c0 13.3 10.7 24 24 24s24-10.7 24-24c0-38.9-23.4-59.4-39.1-73.1l-1.1-1C119.5 47.7 112 40.1 112 24c0-13.3-10.7-24-24-24zM32 192c-17.7 0-32 14.3-32 32V416c0 53 43 96 96 96H288c53 0 96-43 96-96h16c61.9 0 112-50.1 112-112s-50.1-112-112-112H352 32zm352 64h16c26.5 0 48 21.5 48 48s-21.5 48-48 48H384V256zM224 24c0-13.3-10.7-24-24-24s-24 10.7-24 24c0 38.9 23.4 59.4 39.1 73.1l1.1 1C232.5 112.3 240 119.9 240 136c0 13.3 10.7 24 24 24s24-10.7 24-24c0-38.9-23.4-59.4-39.1-73.1l-1.1-1C231.5 47.7 224 40.1 224 24z',
    ],
  };
  var faCarBattery = {
    prefix: 'fas',
    iconName: 'car-battery',
    icon: [
      512,
      512,
      ['battery-car'],
      'f5df',
      'M80 96c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32l96 0c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32h16c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64l16 0zm304 96c0-8.8-7.2-16-16-16s-16 7.2-16 16v32H320c-8.8 0-16 7.2-16 16s7.2 16 16 16h32v32c0 8.8 7.2 16 16 16s16-7.2 16-16V256h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H384V192zM80 240c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H96c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faBatteryCar = faCarBattery;
  var faGift = {
    prefix: 'fas',
    iconName: 'gift',
    icon: [
      512,
      512,
      [127873],
      'f06b',
      'M190.5 68.8L225.3 128H224 152c-22.1 0-40-17.9-40-40s17.9-40 40-40h2.2c14.9 0 28.8 7.9 36.3 20.8zM64 88c0 14.4 3.5 28 9.6 40H32c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H480c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H438.4c6.1-12 9.6-25.6 9.6-40c0-48.6-39.4-88-88-88h-2.2c-31.9 0-61.5 16.9-77.7 44.4L256 85.5l-24.1-41C215.7 16.9 186.1 0 154.2 0H152C103.4 0 64 39.4 64 88zm336 0c0 22.1-17.9 40-40 40H288h-1.3l34.8-59.2C329.1 55.9 342.9 48 357.8 48H360c22.1 0 40 17.9 40 40zM32 288V464c0 26.5 21.5 48 48 48H224V288H32zM288 512H432c26.5 0 48-21.5 48-48V288H288V512z',
    ],
  };
  var faDiceTwo = {
    prefix: 'fas',
    iconName: 'dice-two',
    icon: [
      448,
      512,
      [9857],
      'f528',
      'M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM352 352c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM128 192c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faChessQueen = {
    prefix: 'fas',
    iconName: 'chess-queen',
    icon: [
      512,
      512,
      [9819],
      'f445',
      'M312 56c0-30.9-25.1-56-56-56s-56 25.1-56 56s25.1 56 56 56s56-25.1 56-56zM64 480c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H96c-17.7 0-32 14.3-32 32zM34 169.4L9.2 185.8C3.5 189.7 0 196.2 0 203.1c0 3.2 .7 6.4 2.2 9.3L104 416H408L509.8 212.4c1.4-2.9 2.2-6.1 2.2-9.3c0-6.9-3.5-13.4-9.2-17.3L478 169.4c-8.2-5.4-19-4.4-26 2.6c-12.9 12.9-30.9 21.9-48 15.5c-17.9-6.7-28.1-20.1-32.8-35.8C367.5 139 357.3 128 344 128H328c-13.3 0-23.9 11.2-29.6 23.2C292.6 163.4 280.6 176 256 176s-36.6-12.6-42.4-24.8c-5.7-12-16.3-23.2-29.6-23.2H168c-13.3 0-23.5 11-27.3 23.7c-4.7 15.6-14.9 29.1-32.8 35.8c-17 6.4-35.1-2.7-48-15.5c-6.9-6.9-17.8-8-25.9-2.6z',
    ],
  };
  var faGlasses = {
    prefix: 'fas',
    iconName: 'glasses',
    icon: [
      576,
      512,
      [],
      'f530',
      'M118.6 80c-11.5 0-21.4 7.9-24 19.1L57 260.3c20.5-6.2 48.3-12.3 78.7-12.3c32.3 0 61.8 6.9 82.8 13.5c10.6 3.3 19.3 6.7 25.4 9.2c3.1 1.3 5.5 2.4 7.3 3.2c.9 .4 1.6 .7 2.1 1l.6 .3 .2 .1 .1 0 0 0 0 0s0 0-6.3 12.7h0l6.3-12.7c5.8 2.9 10.4 7.3 13.5 12.7h40.6c3.1-5.3 7.7-9.8 13.5-12.7l6.3 12.7h0c-6.3-12.7-6.3-12.7-6.3-12.7l0 0 0 0 .1 0 .2-.1 .6-.3c.5-.2 1.2-.6 2.1-1c1.8-.8 4.2-1.9 7.3-3.2c6.1-2.6 14.8-5.9 25.4-9.2c21-6.6 50.4-13.5 82.8-13.5c30.4 0 58.2 6.1 78.7 12.3L481.4 99.1c-2.6-11.2-12.6-19.1-24-19.1c-3.1 0-6.2 .6-9.2 1.8L416.9 94.3c-12.3 4.9-26.3-1.1-31.2-13.4s1.1-26.3 13.4-31.2l31.3-12.5c8.6-3.4 17.7-5.2 27-5.2c33.8 0 63.1 23.3 70.8 56.2l43.9 188c1.7 7.3 2.9 14.7 3.5 22.1c.3 1.9 .5 3.8 .5 5.7v6.7V352v16c0 61.9-50.1 112-112 112H419.7c-59.4 0-108.5-46.4-111.8-105.8L306.6 352H269.4l-1.2 22.2C264.9 433.6 215.8 480 156.3 480H112C50.1 480 0 429.9 0 368V352 310.7 304c0-1.9 .2-3.8 .5-5.7c.6-7.4 1.8-14.8 3.5-22.1l43.9-188C55.5 55.3 84.8 32 118.6 32c9.2 0 18.4 1.8 27 5.2l31.3 12.5c12.3 4.9 18.3 18.9 13.4 31.2s-18.9 18.3-31.2 13.4L127.8 81.8c-2.9-1.2-6-1.8-9.2-1.8zM64 325.4V368c0 26.5 21.5 48 48 48h44.3c25.5 0 46.5-19.9 47.9-45.3l2.5-45.6c-2.3-.8-4.9-1.7-7.5-2.5c-17.2-5.4-39.9-10.5-63.6-10.5c-23.7 0-46.2 5.1-63.2 10.5c-3.1 1-5.9 1.9-8.5 2.9zM512 368V325.4c-2.6-.9-5.5-1.9-8.5-2.9c-17-5.4-39.5-10.5-63.2-10.5c-23.7 0-46.4 5.1-63.6 10.5c-2.7 .8-5.2 1.7-7.5 2.5l2.5 45.6c1.4 25.4 22.5 45.3 47.9 45.3H464c26.5 0 48-21.5 48-48z',
    ],
  };
  var faChessBoard = {
    prefix: 'fas',
    iconName: 'chess-board',
    icon: [
      448,
      512,
      [],
      'f43c',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm64 64v64h64V96h64v64h64V96h64v64H320v64h64v64H320v64h64v64H320V352H256v64H192V352H128v64H64V352h64V288H64V224h64V160H64V96h64zm64 128h64V160H192v64zm0 64V224H128v64h64zm64 0H192v64h64V288zm0 0h64V224H256v64z',
    ],
  };
  var faBuildingCircleCheck = {
    prefix: 'fas',
    iconName: 'building-circle-check',
    icon: [
      640,
      512,
      [],
      'e4d2',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c15.1 0 28.5-6.9 37.3-17.8C340.4 462.2 320 417.5 320 368c0-54.7 24.9-103.5 64-135.8V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faPersonChalkboard = {
    prefix: 'fas',
    iconName: 'person-chalkboard',
    icon: [
      640,
      512,
      [],
      'e53d',
      'M192 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-8 384V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V192h56 64 16c17.7 0 32-14.3 32-32s-14.3-32-32-32H384V64H576V256H384V224H320v48c0 26.5 21.5 48 48 48H592c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H368c-26.5 0-48 21.5-48 48v80H243.1 177.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9L120 256.9V480c0 17.7 14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faMarsStrokeRight = {
    prefix: 'fas',
    iconName: 'mars-stroke-right',
    icon: [
      640,
      512,
      [9897, 'mars-stroke-h'],
      'f22b',
      'M208 368c61.9 0 112-50.1 112-112s-50.1-112-112-112s-112 50.1-112 112s50.1 112 112 112zm174.4-88C370.7 365.8 297.1 432 208 432c-97.2 0-176-78.8-176-176s78.8-176 176-176c89.1 0 162.7 66.2 174.4 152H416V176c0-13.3 10.7-24 24-24s24 10.7 24 24v56h32V176c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l80 80c9.4 9.4 9.4 24.6 0 33.9l-80 80c-6.9 6.9-17.2 8.9-26.2 5.2s-14.8-12.5-14.8-22.2V280H464v56c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H382.4z',
    ],
  };
  var faMarsStrokeH = faMarsStrokeRight;
  var faHandBackFist = {
    prefix: 'fas',
    iconName: 'hand-back-fist',
    icon: [
      448,
      512,
      ['hand-rock'],
      'f255',
      'M144 0C117.5 0 96 21.5 96 48V96v28.5V176c0 8.8-7.2 16-16 16s-16-7.2-16-16V149.3l-9 7.5C40.4 169 32 187 32 206V244c0 38 16.9 74 46.1 98.3L128 384v96c0 17.7 14.3 32 32 32H320c17.7 0 32-14.3 32-32V374.7c46.9-19 80-65 80-118.7V176 160 144c0-26.5-21.5-48-48-48c-12.4 0-23.6 4.7-32.1 12.3C350 83.5 329.3 64 304 64c-12.4 0-23.6 4.7-32.1 12.3C270 51.5 249.3 32 224 32c-12.4 0-23.6 4.7-32.1 12.3C190 19.5 169.3 0 144 0z',
    ],
  };
  var faHandRock = faHandBackFist;
  var faSquareCaretUp = {
    prefix: 'fas',
    iconName: 'square-caret-up',
    icon: [
      448,
      512,
      ['caret-square-up'],
      'f151',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM224 160c6.7 0 13 2.8 17.6 7.7l104 112c6.5 7 8.2 17.2 4.4 25.9s-12.5 14.4-22 14.4H120c-9.5 0-18.2-5.7-22-14.4s-2.1-18.9 4.4-25.9l104-112c4.5-4.9 10.9-7.7 17.6-7.7z',
    ],
  };
  var faCaretSquareUp = faSquareCaretUp;
  var faCloudShowersWater = {
    prefix: 'fas',
    iconName: 'cloud-showers-water',
    icon: [
      576,
      512,
      [],
      'e4e4',
      'M224 0c38.6 0 71.9 22.8 87.2 55.7C325.7 41.1 345.8 32 368 32c38.7 0 71 27.5 78.4 64H448c35.3 0 64 28.7 64 64s-28.7 64-64 64H128c-35.3 0-64-28.7-64-64s28.7-64 64-64c0-53 43-96 96-96zM140.6 292.3l-48 80c-6.8 11.4-21.6 15-32.9 8.2s-15.1-21.6-8.2-32.9l48-80c6.8-11.4 21.6-15.1 32.9-8.2s15.1 21.6 8.2 32.9zm327.8-32.9c11.4 6.8 15 21.6 8.2 32.9l-48 80c-6.8 11.4-21.6 15-32.9 8.2s-15-21.6-8.2-32.9l48-80c6.8-11.4 21.6-15.1 32.9-8.2zM252.6 292.3l-48 80c-6.8 11.4-21.6 15-32.9 8.2s-15.1-21.6-8.2-32.9l48-80c6.8-11.4 21.6-15.1 32.9-8.2s15.1 21.6 8.2 32.9zm103.8-32.9c11.4 6.8 15 21.6 8.2 32.9l-48 80c-6.8 11.4-21.6 15-32.9 8.2s-15.1-21.6-8.2-32.9l48-80c6.8-11.4 21.6-15.1 32.9-8.2zM306.5 421.9C329 437.4 356.5 448 384 448c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 501.7 417 512 384 512c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 437.2 165.1 448 192 448c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faChartBar = {
    prefix: 'fas',
    iconName: 'chart-bar',
    icon: [
      512,
      512,
      ['bar-chart'],
      'f080',
      'M32 32c17.7 0 32 14.3 32 32V400c0 8.8 7.2 16 16 16H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H80c-44.2 0-80-35.8-80-80V64C0 46.3 14.3 32 32 32zm96 96c0-17.7 14.3-32 32-32l192 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-192 0c-17.7 0-32-14.3-32-32zm32 64H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H160c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 96H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H160c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faBarChart = faChartBar;
  var faHandsBubbles = {
    prefix: 'fas',
    iconName: 'hands-bubbles',
    icon: [
      512,
      512,
      ['hands-wash'],
      'e05e',
      'M384 64c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm80 160c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM128 464c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM357.1 157.5c-.3 .7-.7 1.5-1.1 2.2l-17.8 30.9c-11-12.6-27.4-19.8-44.4-19.1l20.7-35.8c6.6-11.5 21.3-15.4 32.8-8.8c10.8 6.2 14.9 19.5 9.9 30.6zm-173.6 47C112.3 227.2 64 293.3 64 368c0 1.5 0 3 .1 4.5C24.3 346.9 0 302.8 0 255.1V131.5c0-13.3 10.7-24 24-24s24 10.7 24 24l0 81.7L164.2 12c6.6-11.5 21.3-15.4 32.8-8.8s15.4 21.3 8.8 32.8l-64 110.9c-2.2 3.8-.9 8.7 2.9 10.9s8.7 .9 10.9-2.9l80-138.6c6.6-11.5 21.3-15.4 32.8-8.8s15.4 21.3 8.8 32.8l-80 138.6c-2.2 3.8-.9 8.7 2.9 10.9s8.7 .9 10.9-2.9L275 76c6.6-11.5 21.3-15.4 32.8-8.8s15.4 21.3 8.8 32.8l-44 76.2-89.1 28.3zM448 483.5c0 12.4-9.4 22.6-21.5 23.9c-.8 .1-1.6 .1-2.5 .1H223.3 216c-22.1 0-42.9-6-60.7-16.5c3-8.5 4.7-17.6 4.7-27c0-38.7-27.5-71-64-78.4c0-.6 0-1.1 0-1.7c0-1.2-.1-2.5-.1-3.7c0-68 44-128.3 108.9-148.9l83.9-26.7c12.6-4 26.1 3 30.1 15.6s-3 26.1-15.6 30.1l-53.8 17.1H456c13.3 0 24 10.7 24 24s-10.7 24-24 24H328c-4.4 0-8 3.6-8 8s3.6 8 8 8H488c13.3 0 24 10.7 24 24s-10.7 24-24 24H328c-4.4 0-8 3.6-8 8s3.6 8 8 8H456c13.3 0 24 10.7 24 24s-10.7 24-24 24H328c-4.4 0-8 3.6-8 8s3.6 8 8 8h96c13.3 0 24 10.7 24 24z',
    ],
  };
  var faHandsWash = faHandsBubbles;
  var faLessThanEqual = {
    prefix: 'fas',
    iconName: 'less-than-equal',
    icon: [
      448,
      512,
      [],
      'f537',
      'M395.9 93.7c16.4-6.6 24.4-25.2 17.8-41.6s-25.2-24.4-41.6-17.8l-320 128C40 167.1 32 178.9 32 192s8 24.9 20.1 29.7l320 128c16.4 6.6 35-1.4 41.6-17.8s-1.4-35-17.8-41.6L150.2 192 395.9 93.7zM32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faTrain = {
    prefix: 'fas',
    iconName: 'train',
    icon: [
      448,
      512,
      [128646],
      'f238',
      'M96 0C43 0 0 43 0 96V352c0 48 35.2 87.7 81.1 94.9l-46 46C28.1 499.9 33.1 512 43 512H82.7c8.5 0 16.6-3.4 22.6-9.4L160 448H288l54.6 54.6c6 6 14.1 9.4 22.6 9.4H405c10 0 15-12.1 7.9-19.1l-46-46c46-7.1 81.1-46.9 81.1-94.9V96c0-53-43-96-96-96H96zM64 96c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V96zM224 384c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faEyeLowVision = {
    prefix: 'fas',
    iconName: 'eye-low-vision',
    icon: [
      640,
      512,
      ['low-vision'],
      'f2a8',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L525.6 386.7c39.6-40.6 66.4-86.1 79.9-118.4c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C465.5 68.8 400.8 32 320 32c-68.2 0-125 26.3-169.3 60.8L38.8 5.1zM223.1 149.5C248.6 126.2 282.7 112 320 112c79.5 0 144 64.5 144 144c0 24.9-6.3 48.3-17.4 68.7L408 294.5c5.2-11.8 8-24.8 8-38.5c0-53-43-96-96-96c-2.8 0-5.6 .1-8.4 .4c5.3 9.3 8.4 20.1 8.4 31.6c0 10.2-2.4 19.8-6.6 28.3l-90.3-70.8zm223.1 298L83.1 161.5c-11 14.4-20.5 28.7-28.4 42.2l339 265.7c18.7-5.5 36.2-13 52.6-21.8zM34.5 268.3c14.9 35.7 46.2 87.7 93 131.1C174.5 443.2 239.2 480 320 480c3.1 0 6.1-.1 9.2-.2L33.1 247.8c-1.8 6.8-1.3 14 1.4 20.5z',
    ],
  };
  var faLowVision = faEyeLowVision;
  var faCrow = {
    prefix: 'fas',
    iconName: 'crow',
    icon: [
      640,
      512,
      [],
      'f520',
      'M456 0c-48.6 0-88 39.4-88 88v29.2L12.5 390.6c-14 10.8-16.6 30.9-5.9 44.9s30.9 16.6 44.9 5.9L126.1 384H259.2l46.6 113.1c5 12.3 19.1 18.1 31.3 13.1s18.1-19.1 13.1-31.3L311.1 384H352c1.1 0 2.1 0 3.2 0l46.6 113.2c5 12.3 19.1 18.1 31.3 13.1s18.1-19.1 13.1-31.3l-42-102C484.9 354.1 544 280 544 192V128v-8l80.5-20.1c8.6-2.1 13.8-10.8 11.6-19.4C629 52 603.4 32 574 32H523.9C507.7 12.5 483.3 0 456 0zm0 112c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faSailboat = {
    prefix: 'fas',
    iconName: 'sailboat',
    icon: [
      576,
      512,
      [],
      'e445',
      'M256 16c0-7 4.5-13.2 11.2-15.3s13.9 .4 17.9 6.1l224 320c3.4 4.9 3.8 11.3 1.1 16.6s-8.2 8.6-14.2 8.6H272c-8.8 0-16-7.2-16-16V16zM212.1 96.5c7 1.9 11.9 8.2 11.9 15.5V336c0 8.8-7.2 16-16 16H80c-5.7 0-11-3-13.8-8s-2.9-11-.1-16l128-224c3.6-6.3 11-9.4 18-7.5zM5.7 404.3C2.8 394.1 10.5 384 21.1 384H554.9c10.6 0 18.3 10.1 15.4 20.3l-4 14.3C550.7 473.9 500.4 512 443 512H133C75.6 512 25.3 473.9 9.7 418.7l-4-14.3z',
    ],
  };
  var faWindowRestore = {
    prefix: 'fas',
    iconName: 'window-restore',
    icon: [
      512,
      512,
      [],
      'f2d2',
      'M432 64H208c-8.8 0-16 7.2-16 16V96H128V80c0-44.2 35.8-80 80-80H432c44.2 0 80 35.8 80 80V304c0 44.2-35.8 80-80 80H416V320h16c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16zM0 192c0-35.3 28.7-64 64-64H320c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V192zm64 32c0 17.7 14.3 32 32 32H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H96c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faSquarePlus = {
    prefix: 'fas',
    iconName: 'square-plus',
    icon: [
      448,
      512,
      [61846, 'plus-square'],
      'f0fe',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM200 344V280H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H248v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z',
    ],
  };
  var faPlusSquare = faSquarePlus;
  var faToriiGate = {
    prefix: 'fas',
    iconName: 'torii-gate',
    icon: [
      512,
      512,
      [9961],
      'f6a1',
      'M0 80c0 26.5 21.5 48 48 48H64v64h64V128h96v64h64V128h96v64h64V128h16c26.5 0 48-21.5 48-48V0L440.6 23.8C424.3 29.2 407.2 32 390 32H122c-17.2 0-34.3-2.8-50.6-8.2L0 0V80zM64 288V480c0 17.7 14.3 32 32 32s32-14.3 32-32V288H384V480c0 17.7 14.3 32 32 32s32-14.3 32-32V288h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64z',
    ],
  };
  var faFrog = {
    prefix: 'fas',
    iconName: 'frog',
    icon: [
      576,
      512,
      [],
      'f52e',
      'M368 32c41.7 0 75.9 31.8 79.7 72.5l85.6 26.3c25.4 7.8 42.8 31.3 42.8 57.9c0 21.8-11.7 41.9-30.7 52.7L400.8 323.5 493.3 416H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H480c-8.5 0-16.6-3.4-22.6-9.4L346.9 360.2c11.7-36 3.2-77.1-25.4-105.7c-40.6-40.6-106.3-40.6-146.9-.1L101 324.4c-6.4 6.1-6.7 16.2-.6 22.6s16.2 6.6 22.6 .6l73.8-70.2 .1-.1 .1-.1c3.5-3.5 7.3-6.6 11.3-9.2c27.9-18.5 65.9-15.4 90.5 9.2c24.7 24.7 27.7 62.9 9 90.9c-2.6 3.8-5.6 7.5-9 10.9L261.8 416H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H64c-35.3 0-64-28.7-64-64C0 249.6 127 112.9 289.3 97.5C296.2 60.2 328.8 32 368 32zm0 104c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faBucket = {
    prefix: 'fas',
    iconName: 'bucket',
    icon: [
      448,
      512,
      [],
      'e4cf',
      'M96 152v8H48v-8C48 68.1 116.1 0 200 0h48c83.9 0 152 68.1 152 152v8H352v-8c0-57.4-46.6-104-104-104H200C142.6 48 96 94.6 96 152zM0 224c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32h-5.1L388.5 469c-2.6 24.4-23.2 43-47.7 43H107.2c-24.6 0-45.2-18.5-47.7-43L37.1 256H32c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faImage = {
    prefix: 'fas',
    iconName: 'image',
    icon: [
      512,
      512,
      [],
      'f03e',
      'M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM323.8 202.5c-4.5-6.6-11.9-10.5-19.8-10.5s-15.4 3.9-19.8 10.5l-87 127.6L170.7 297c-4.6-5.7-11.5-9-18.7-9s-14.2 3.3-18.7 9l-64 80c-5.8 7.2-6.9 17.1-2.9 25.4s12.4 13.6 21.6 13.6h96 32H424c8.9 0 17.1-4.9 21.2-12.8s3.6-17.4-1.4-24.7l-120-176zM112 192c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faMicrophone = {
    prefix: 'fas',
    iconName: 'microphone',
    icon: [
      384,
      512,
      [],
      'f130',
      'M192 0C139 0 96 43 96 96V256c0 53 43 96 96 96s96-43 96-96V96c0-53-43-96-96-96zM64 216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 89.1 66.2 162.7 152 174.4V464H120c-13.3 0-24 10.7-24 24s10.7 24 24 24h72 72c13.3 0 24-10.7 24-24s-10.7-24-24-24H216V430.4c85.8-11.7 152-85.3 152-174.4V216c0-13.3-10.7-24-24-24s-24 10.7-24 24v40c0 70.7-57.3 128-128 128s-128-57.3-128-128V216z',
    ],
  };
  var faCow = {
    prefix: 'fas',
    iconName: 'cow',
    icon: [
      640,
      512,
      [128004],
      'f6c8',
      'M96 224v32V416c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V327.8c9.9 6.6 20.6 12 32 16.1V368c0 8.8 7.2 16 16 16s16-7.2 16-16V351.1c5.3 .6 10.6 .9 16 .9s10.7-.3 16-.9V368c0 8.8 7.2 16 16 16s16-7.2 16-16V343.8c11.4-4 22.1-9.4 32-16.1V416c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V256l32 32v49.5c0 9.5 2.8 18.7 8.1 26.6L530 427c8.8 13.1 23.5 21 39.3 21c22.5 0 41.9-15.9 46.3-38l20.3-101.6c2.6-13-.3-26.5-8-37.3l-3.9-5.5V184c0-13.3-10.7-24-24-24s-24 10.7-24 24v14.4l-52.9-74.1C496 86.5 452.4 64 405.9 64H272 256 192 144C77.7 64 24 117.7 24 184v54C9.4 249.8 0 267.8 0 288v17.6c0 8 6.4 14.4 14.4 14.4C46.2 320 72 294.2 72 262.4V256 224 184c0-24.3 12.1-45.8 30.5-58.9C98.3 135.9 96 147.7 96 160v64zM592 336c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zM166.6 166.6c-4.2-4.2-6.6-10-6.6-16c0-12.5 10.1-22.6 22.6-22.6H361.4c12.5 0 22.6 10.1 22.6 22.6c0 6-2.4 11.8-6.6 16l-23.4 23.4C332.2 211.8 302.7 224 272 224s-60.2-12.2-81.9-33.9l-23.4-23.4z',
    ],
  };
  var faCaretUp = {
    prefix: 'fas',
    iconName: 'caret-up',
    icon: [
      320,
      512,
      [],
      'f0d8',
      'M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H288c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z',
    ],
  };
  var faScrewdriver = {
    prefix: 'fas',
    iconName: 'screwdriver',
    icon: [
      512,
      512,
      [129691],
      'f54a',
      'M465 7c-8.5-8.5-22-9.4-31.6-2.1l-104 80c-5.9 4.5-9.4 11.6-9.4 19v54.1l-85.6 85.6c6.7 4.2 13 9.3 18.8 15.1s10.9 12.2 15.1 18.8L353.9 192H408c7.5 0 14.5-3.5 19-9.4l80-104c7.4-9.6 6.5-23.1-2.1-31.6L465 7zM121.4 281.4l-112 112c-12.5 12.5-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0l112-112c30.2-30.2 30.2-79.1 0-109.3s-79.1-30.2-109.3 0z',
    ],
  };
  var faFolderClosed = {
    prefix: 'fas',
    iconName: 'folder-closed',
    icon: [
      512,
      512,
      [],
      'e185',
      'M448 480H64c-35.3 0-64-28.7-64-64V192H512V416c0 35.3-28.7 64-64 64zm64-320H0V96C0 60.7 28.7 32 64 32H181.5c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7H448c35.3 0 64 28.7 64 64z',
    ],
  };
  var faHouseTsunami = {
    prefix: 'fas',
    iconName: 'house-tsunami',
    icon: [
      576,
      512,
      [],
      'e515',
      'M80.8 136.5C104.9 93.8 152.6 64 209 64c16.9 0 33.1 2.7 48.2 7.7c16.8 5.5 34.9-3.6 40.4-20.4s-3.6-34.9-20.4-40.4C255.8 3.8 232.8 0 209 0C95.2 0 0 88 0 200c0 91.6 53.5 172.1 142.2 194.1c13.4 3.8 27.5 5.9 42.2 5.9c.7 0 1.4 0 2.1-.1c1.8 0 3.7 .1 5.5 .1l0 0c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.5-27.3-10.1-39.2-1.7l0 0C439.4 325.2 410.9 336 384 336c-27.5 0-55-10.6-77.5-26.1c-11.1-7.9-25.9-7.9-37 0c-22.4 15.5-49.9 26.1-77.4 26.1c0 0-.1 0-.1 0c-12.4 0-24-1.5-34.9-4.3C121.6 320.2 96 287 96 248c0-48.5 39.5-88 88.4-88c13.5 0 26.1 3 37.5 8.3c16 7.5 35.1 .6 42.5-15.5s.6-35.1-15.5-42.5C229.3 101.1 207.4 96 184.4 96c-40 0-76.4 15.4-103.6 40.5zm252-18.1c-8.1 6-12.8 15.5-12.8 25.6V265c1.6 1 3.3 2 4.8 3.1c18.4 12.7 39.6 20.3 59.2 20.3c19 0 41.2-7.9 59.2-20.3c23.8-16.7 55.8-15.3 78.1 3.4c10.6 8.8 24.2 15.6 37.3 18.6c5.8 1.4 11.2 3.4 16.2 6.2c.7-2.7 1.1-5.5 1.1-8.4l-.4-144c0-10-4.7-19.4-12.7-25.5l-95.5-72c-11.4-8.6-27.1-8.6-38.5 0l-96 72zM384 448c-27.5 0-55-10.6-77.5-26.1c-11.1-7.9-25.9-7.9-37 0C247 437.4 219.5 448 192 448c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 501.7 159 512 192 512c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C439.4 437.2 410.9 448 384 448z',
    ],
  };
  var faSquareNfi = {
    prefix: 'fas',
    iconName: 'square-nfi',
    icon: [
      448,
      512,
      [],
      'e576',
      'M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zm75.7 64.6C68.8 162.5 64 168.8 64 176V336c0 8.8 7.2 16 16 16s16-7.2 16-16V233.8l66.3 110.5c3.7 6.2 11.1 9.1 18 7.2s11.7-8.2 11.7-15.4V176c0-8.8-7.2-16-16-16s-16 7.2-16 16V278.2L93.7 167.8c-3.7-6.2-11.1-9.1-18-7.2zM224 176v64 96c0 8.8 7.2 16 16 16s16-7.2 16-16V256h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H256V192h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H240c-8.8 0-16 7.2-16 16zm160 0c0-8.8-7.2-16-16-16s-16 7.2-16 16V336c0 8.8 7.2 16 16 16s16-7.2 16-16V176z',
    ],
  };
  var faArrowUpFromGroundWater = {
    prefix: 'fas',
    iconName: 'arrow-up-from-ground-water',
    icon: [
      576,
      512,
      [],
      'e4b5',
      'M288 352c17.7 0 32-14.3 32-32V109.3l25.4 25.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-80-80c-12.5-12.5-32.8-12.5-45.3 0l-80 80c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L256 109.3V320c0 17.7 14.3 32 32 32zm-18.5 69.9C247 437.4 219.5 448 192 448c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 501.7 159 512 192 512c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C439.4 437.2 410.9 448 384 448c-27.5 0-55-10.6-77.5-26.1c-11.1-7.9-25.9-7.9-37 0zM192 192H48c-26.5 0-48 21.5-48 48V425c5.3-3.1 11.2-5.4 17.5-6.9c13.1-3.1 26.7-9.8 37.3-18.6c22.2-18.7 54.3-20.1 78.1-3.4c18 12.4 40.1 20.3 59.1 20.3V192zm384 48c0-26.5-21.5-48-48-48H384V416.5h0c19 0 41.2-7.9 59.2-20.3c23.8-16.7 55.8-15.3 78.1 3.4c10.6 8.8 24.2 15.6 37.3 18.6c6.3 1.5 12.1 3.8 17.5 6.9V240z',
    ],
  };
  var faMartiniGlass = {
    prefix: 'fas',
    iconName: 'martini-glass',
    icon: [
      512,
      512,
      [127864, 'glass-martini-alt'],
      'f57b',
      'M32 0C19.1 0 7.4 7.8 2.4 19.8s-2.2 25.7 6.9 34.9L224 269.3V448H160c-17.7 0-32 14.3-32 32s14.3 32 32 32h96 96c17.7 0 32-14.3 32-32s-14.3-32-32-32H288V269.3L502.6 54.6c9.2-9.2 11.9-22.9 6.9-34.9S492.9 0 480 0H32zM173.3 128l-64-64H402.7l-64 64H173.3z',
    ],
  };
  var faGlassMartiniAlt = faMartiniGlass;
  var faRotateLeft = {
    prefix: 'fas',
    iconName: 'rotate-left',
    icon: [
      512,
      512,
      ['rotate-back', 'rotate-backward', 'undo-alt'],
      'f2ea',
      'M48.5 224H40c-13.3 0-24-10.7-24-24V72c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2L98.6 96.6c87.6-86.5 228.7-86.2 315.8 1c87.5 87.5 87.5 229.3 0 316.8s-229.3 87.5-316.8 0c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0c62.5 62.5 163.8 62.5 226.3 0s62.5-163.8 0-226.3c-62.2-62.2-162.7-62.5-225.3-1L185 183c6.9 6.9 8.9 17.2 5.2 26.2s-12.5 14.8-22.2 14.8H48.5z',
    ],
  };
  var faRotateBack = faRotateLeft;
  var faRotateBackward = faRotateLeft;
  var faUndoAlt = faRotateLeft;
  var faTableColumns = {
    prefix: 'fas',
    iconName: 'table-columns',
    icon: [
      512,
      512,
      ['columns'],
      'f0db',
      'M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zm64 64V416H224V160H64zm384 0H288V416H448V160z',
    ],
  };
  var faColumns = faTableColumns;
  var faLemon = {
    prefix: 'fas',
    iconName: 'lemon',
    icon: [
      448,
      512,
      [127819],
      'f094',
      'M448 96c0-35.3-28.7-64-64-64c-6.6 0-13 1-19 2.9c-22.5 7-48.1 14.9-71 9c-75.2-19.1-156.4 11-213.7 68.3S-7.2 250.8 11.9 326c5.8 22.9-2 48.4-9 71C1 403 0 409.4 0 416c0 35.3 28.7 64 64 64c6.6 0 13-1 19.1-2.9c22.5-7 48.1-14.9 71-9c75.2 19.1 156.4-11 213.7-68.3s87.5-138.5 68.3-213.7c-5.8-22.9 2-48.4 9-71c1.9-6 2.9-12.4 2.9-19.1zM212.5 127.4c-54.6 16-101.1 62.5-117.1 117.1C92.9 253 84 257.8 75.5 255.4S62.2 244 64.6 235.5c19.1-65.1 73.7-119.8 138.9-138.9c8.5-2.5 17.4 2.4 19.9 10.9s-2.4 17.4-10.9 19.9z',
    ],
  };
  var faHeadSideMask = {
    prefix: 'fas',
    iconName: 'head-side-mask',
    icon: [
      512,
      512,
      [],
      'e063',
      'M0 224.2c0-22.2 3.2-43.6 9.2-63.9l227 165.1C228.5 337.8 224 352.4 224 368V512H96c-17.7 0-32-14.3-32-32V407.3c0-16.7-6.9-32.5-17.1-45.8C16.6 322.4 0 274.1 0 224.2zm258.6 77.9L21 129.3C56.7 53 134.2 0 224 0h32c95.2 0 174.2 69.3 189.4 160.1c2.2 13 6.7 25.7 15 36.1l42 52.6c6.2 7.8 9.6 17.4 9.6 27.4c0 4.1-.6 8.1-1.6 11.9H304c-16.9 0-32.5 5.2-45.4 14.1zM352 224c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM256 512V368c0-26.5 21.5-48 48-48H512l-16 48H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H485.3l-10.7 32H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H464l-1.4 4.2c-8.7 26.1-33.2 43.8-60.7 43.8H256z',
    ],
  };
  var faHandshake = {
    prefix: 'fas',
    iconName: 'handshake',
    icon: [
      640,
      512,
      [],
      'f2b5',
      'M323.4 85.2l-96.8 78.4c-16.1 13-19.2 36.4-7 53.1c12.9 17.8 38 21.3 55.3 7.8l99.3-77.2c7-5.4 17-4.2 22.5 2.8s4.2 17-2.8 22.5l-20.9 16.2L512 316.8V128h-.7l-3.9-2.5L434.8 79c-15.3-9.8-33.2-15-51.4-15c-21.8 0-43 7.5-60 21.2zm22.8 124.4l-51.7 40.2C263 274.4 217.3 268 193.7 235.6c-22.2-30.5-16.6-73.1 12.7-96.8l83.2-67.3c-11.6-4.9-24.1-7.4-36.8-7.4C234 64 215.7 69.6 200 80l-72 48V352h28.2l91.4 83.4c19.6 17.9 49.9 16.5 67.8-3.1c5.5-6.1 9.2-13.2 11.1-20.6l17 15.6c19.5 17.9 49.9 16.6 67.8-2.9c4.5-4.9 7.8-10.6 9.9-16.5c19.4 13 45.8 10.3 62.1-7.5c17.9-19.5 16.6-49.9-2.9-67.8l-134.2-123zM96 128H0V352c0 17.7 14.3 32 32 32H64c17.7 0 32-14.3 32-32V128zM48 352c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zM544 128V352c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V128H544zm64 208c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faGem = {
    prefix: 'fas',
    iconName: 'gem',
    icon: [
      512,
      512,
      [128142],
      'f3a5',
      'M116.7 33.8c4.5-6.1 11.7-9.8 19.3-9.8H376c7.6 0 14.8 3.6 19.3 9.8l112 152c6.8 9.2 6.1 21.9-1.5 30.4l-232 256c-4.6 5-11 7.9-17.8 7.9s-13.2-2.9-17.8-7.9l-232-256c-7.7-8.5-8.3-21.2-1.5-30.4l112-152zm38.5 39.8c-3.3 2.5-4.2 7-2.1 10.5l57.4 95.6L63.3 192c-4.1 .3-7.3 3.8-7.3 8s3.2 7.6 7.3 8l192 16c.4 0 .9 0 1.3 0l192-16c4.1-.3 7.3-3.8 7.3-8s-3.2-7.6-7.3-8L301.5 179.8l57.4-95.6c2.1-3.5 1.2-8.1-2.1-10.5s-7.9-2-10.7 1L256 172.2 165.9 74.6c-2.8-3-7.4-3.4-10.7-1z',
    ],
  };
  var faDolly = {
    prefix: 'fas',
    iconName: 'dolly',
    icon: [
      640,
      512,
      ['dolly-box'],
      'f472',
      'M32 32C32 14.3 46.3 0 64 0h72.9c27.5 0 52 17.6 60.7 43.8L289.7 320c30.1 .5 56.8 14.9 74 37l202.1-67.4c16.8-5.6 34.9 3.5 40.5 20.2s-3.5 34.9-20.2 40.5L384 417.7c-.9 52.2-43.5 94.3-96 94.3c-53 0-96-43-96-96c0-30.8 14.5-58.2 37-75.8L136.9 64H64C46.3 64 32 49.7 32 32zM276.8 134.5c-5.5-16.8 3.7-34.9 20.5-40.3L343 79.4l19.8 60.9 60.9-19.8L403.8 59.6l45.7-14.8c16.8-5.5 34.9 3.7 40.3 20.5l49.4 152.2c5.5 16.8-3.7 34.9-20.5 40.3L366.5 307.2c-16.8 5.5-34.9-3.7-40.3-20.5L276.8 134.5z',
    ],
  };
  var faDollyBox = faDolly;
  var faSmoking = {
    prefix: 'fas',
    iconName: 'smoking',
    icon: [
      640,
      512,
      [128684],
      'f48d',
      'M448 32V43c0 38.2 15.2 74.8 42.2 101.8l21 21c21 21 32.8 49.5 32.8 79.2v11c0 17.7-14.3 32-32 32s-32-14.3-32-32V245c0-12.7-5.1-24.9-14.1-33.9l-21-21C405.9 151.1 384 98.1 384 43V32c0-17.7 14.3-32 32-32s32 14.3 32 32zM576 256V245c0-38.2-15.2-74.8-42.2-101.8l-21-21c-21-21-32.8-49.5-32.8-79.2V32c0-17.7 14.3-32 32-32s32 14.3 32 32V43c0 12.7 5.1 24.9 14.1 33.9l21 21c39 39 60.9 91.9 60.9 147.1v11c0 17.7-14.3 32-32 32s-32-14.3-32-32zM0 416c0-35.3 28.7-64 64-64H416c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H64c-35.3 0-64-28.7-64-64V416zm224 0v32H384V416H224zm288-64c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384c0-17.7 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384c0-17.7 14.3-32 32-32z',
    ],
  };
  var faMinimize = {
    prefix: 'fas',
    iconName: 'minimize',
    icon: [
      512,
      512,
      ['compress-arrows-alt'],
      'f78c',
      'M456 224H312c-13.3 0-24-10.7-24-24V56c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l40 40L442.3 5.7C446 2 450.9 0 456 0s10 2 13.7 5.7l36.7 36.7C510 46 512 50.9 512 56s-2 10-5.7 13.7L433 143l40 40c6.9 6.9 8.9 17.2 5.2 26.2s-12.5 14.8-22.2 14.8zm0 64c9.7 0 18.5 5.8 22.2 14.8s1.7 19.3-5.2 26.2l-40 40 73.4 73.4c3.6 3.6 5.7 8.5 5.7 13.7s-2 10-5.7 13.7l-36.7 36.7C466 510 461.1 512 456 512s-10-2-13.7-5.7L369 433l-40 40c-6.9 6.9-17.2 8.9-26.2 5.2s-14.8-12.5-14.8-22.2V312c0-13.3 10.7-24 24-24H456zm-256 0c13.3 0 24 10.7 24 24V456c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-40-40L69.7 506.3C66 510 61.1 512 56 512s-10-2-13.7-5.7L5.7 469.7C2 466 0 461.1 0 456s2-10 5.7-13.7L79 369 39 329c-6.9-6.9-8.9-17.2-5.2-26.2s12.5-14.8 22.2-14.8H200zM56 224c-9.7 0-18.5-5.8-22.2-14.8s-1.7-19.3 5.2-26.2l40-40L5.7 69.7C2 66 0 61.1 0 56s2-10 5.7-13.7L42.3 5.7C46 2 50.9 0 56 0s10 2 13.7 5.7L143 79l40-40c6.9-6.9 17.2-8.9 26.2-5.2s14.8 12.5 14.8 22.2V200c0 13.3-10.7 24-24 24H56z',
    ],
  };
  var faCompressArrowsAlt = faMinimize;
  var faMonument = {
    prefix: 'fas',
    iconName: 'monument',
    icon: [
      384,
      512,
      [],
      'f5a6',
      'M180.7 4.7c6.2-6.2 16.4-6.2 22.6 0l80 80c2.5 2.5 4.1 5.8 4.6 9.3l40.2 322H55.9L96.1 94c.4-3.5 2-6.8 4.6-9.3l80-80zM152 272c-13.3 0-24 10.7-24 24s10.7 24 24 24h80c13.3 0 24-10.7 24-24s-10.7-24-24-24H152zM32 448H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faSnowplow = {
    prefix: 'fas',
    iconName: 'snowplow',
    icon: [
      640,
      512,
      [],
      'f7d2',
      'M298.9 64l68.6 160H256l-64-64V64H298.9zM445.1 242.7l-87.4-204C347.6 15.3 324.5 0 298.9 0H176c-26.5 0-48 21.5-48 48V160H96c-17.7 0-32 14.3-32 32V298.8C26.2 316.8 0 355.3 0 400c0 61.9 50.1 112 112 112H368c61.9 0 112-50.1 112-112c0-17.2-3.9-33.5-10.8-48H512v50.7c0 17 6.7 33.3 18.7 45.3l54.6 54.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L576 402.7V320 235.2L633 164c11-13.8 8.8-33.9-5-45s-33.9-8.8-45 5l-57 71.2c-9.1 11.3-14 25.4-14 40V288H448V256.7c.1-2.4-.2-4.8-.6-7.1s-1.2-4.7-2.2-6.8zM368 352c26.5 0 48 21.5 48 48s-21.5 48-48 48H112c-26.5 0-48-21.5-48-48s21.5-48 48-48H368zM144 400c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm216 24c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm-56-24c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zM200 424c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faAnglesRight = {
    prefix: 'fas',
    iconName: 'angles-right',
    icon: [
      512,
      512,
      [187, 'angle-double-right'],
      'f101',
      'M470.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 256 265.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160zm-352 160l160-160c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L210.7 256 73.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z',
    ],
  };
  var faAngleDoubleRight = faAnglesRight;
  var faCannabis = {
    prefix: 'fas',
    iconName: 'cannabis',
    icon: [
      512,
      512,
      [],
      'f55f',
      'M256 0c5.3 0 10.3 2.7 13.3 7.1c15.8 23.5 36.7 63.7 49.2 109c7.2 26.4 11.8 55.2 10.4 84c11.5-8.8 23.7-16.7 35.8-23.6c41-23.3 84.4-36.9 112.2-42.5c5.2-1 10.7 .6 14.4 4.4s5.4 9.2 4.4 14.5c-5.6 27.7-19.3 70.9-42.7 111.7c-9.1 15.9-19.9 31.7-32.4 46.3c27.8 6.6 52.4 17.3 67.2 25.5c5.1 2.8 8.2 8.2 8.2 14s-3.2 11.2-8.2 14c-15.2 8.4-40.9 19.5-69.8 26.1c-20.2 4.6-42.9 7.2-65.2 4.6l8.3 33.1c1.5 6.1-.6 12.4-5.5 16.4s-11.6 4.6-17.2 1.9L280 417.2V488c0 13.3-10.7 24-24 24s-24-10.7-24-24V417.2l-58.5 29.1c-5.6 2.8-12.3 2.1-17.2-1.9s-7-10.3-5.5-16.4l8.3-33.1c-22.2 2.6-45 0-65.2-4.6c-28.9-6.6-54.6-17.6-69.8-26.1c-5.1-2.8-8.2-8.2-8.2-14s3.2-11.2 8.2-14c14.8-8.2 39.4-18.8 67.2-25.5C78.9 296.3 68.1 280.5 59 264.6c-23.4-40.8-37.1-84-42.7-111.7c-1.1-5.2 .6-10.7 4.4-14.5s9.2-5.4 14.4-4.4c27.9 5.5 71.2 19.2 112.2 42.5c12.1 6.9 24.3 14.7 35.8 23.6c-1.4-28.7 3.1-57.6 10.4-84c12.5-45.3 33.4-85.5 49.2-109c3-4.4 8-7.1 13.3-7.1z',
    ],
  };
  var faCirclePlay = {
    prefix: 'fas',
    iconName: 'circle-play',
    icon: [
      512,
      512,
      [61469, 'play-circle'],
      'f144',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM188.3 147.1c-7.6 4.2-12.3 12.3-12.3 20.9V344c0 8.7 4.7 16.7 12.3 20.9s16.8 4.1 24.3-.5l144-88c7.1-4.4 11.5-12.1 11.5-20.5s-4.4-16.1-11.5-20.5l-144-88c-7.4-4.5-16.7-4.7-24.3-.5z',
    ],
  };
  var faPlayCircle = faCirclePlay;
  var faTablets = {
    prefix: 'fas',
    iconName: 'tablets',
    icon: [
      640,
      512,
      [],
      'f490',
      'M614.3 247c16.3-25 25.7-54.9 25.7-87C640 71.6 568.4 0 480 0c-32.1 0-61.9 9.4-87 25.7c-7.9 5.2-8.5 16.2-1.8 22.9L591.4 248.8c6.7 6.7 17.8 6.2 22.9-1.8zM567 294.3c7.9-5.2 8.5-16.2 1.8-22.9L368.6 71.2c-6.7-6.7-17.8-6.2-22.9 1.8c-16.3 25-25.7 54.9-25.7 87c0 88.4 71.6 160 160 160c32.1 0 61.9-9.4 87-25.7zM301.5 368H18.5c-9.5 0-16.9 8.2-15 17.5C18.9 457.8 83.1 512 160 512s141.1-54.2 156.5-126.5c2-9.3-5.5-17.5-15-17.5zm0-32c9.5 0 16.9-8.2 15-17.5C301.1 246.2 236.9 192 160 192S18.9 246.2 3.5 318.5c-2 9.3 5.5 17.5 15 17.5H301.5z',
    ],
  };
  var faEthernet = {
    prefix: 'fas',
    iconName: 'ethernet',
    icon: [
      512,
      512,
      [],
      'f796',
      'M0 224V416c0 17.7 14.3 32 32 32H96V336c0-8.8 7.2-16 16-16s16 7.2 16 16V448h64V336c0-8.8 7.2-16 16-16s16 7.2 16 16V448h64V336c0-8.8 7.2-16 16-16s16 7.2 16 16V448h64V336c0-8.8 7.2-16 16-16s16 7.2 16 16V448h64c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H448V160c0-17.7-14.3-32-32-32H384V96c0-17.7-14.3-32-32-32H160c-17.7 0-32 14.3-32 32v32H96c-17.7 0-32 14.3-32 32v32H32c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faEuroSign = {
    prefix: 'fas',
    iconName: 'euro-sign',
    icon: [
      320,
      512,
      [8364, 'eur', 'euro'],
      'f153',
      'M48.1 240c-.1 2.7-.1 5.3-.1 8v16c0 2.7 0 5.3 .1 8H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H60.3C89.9 419.9 170 480 264 480h24c17.7 0 32-14.3 32-32s-14.3-32-32-32H264c-57.9 0-108.2-32.4-133.9-80H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H112.2c-.1-2.6-.2-5.3-.2-8V248c0-2.7 .1-5.4 .2-8H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H130.1c25.7-47.6 76-80 133.9-80h24c17.7 0 32-14.3 32-32s-14.3-32-32-32H264C170 32 89.9 92.1 60.3 176H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H48.1z',
    ],
  };
  var faEur = faEuroSign;
  var faEuro = faEuroSign;
  var faChair = {
    prefix: 'fas',
    iconName: 'chair',
    icon: [
      448,
      512,
      [129681],
      'f6c0',
      'M248 48V256h48V58.7c23.9 13.8 40 39.7 40 69.3V256h48V128C384 57.3 326.7 0 256 0H192C121.3 0 64 57.3 64 128V256h48V128c0-29.6 16.1-55.5 40-69.3V256h48V48h48zM48 288c-12.1 0-23.2 6.8-28.6 17.7l-16 32c-5 9.9-4.4 21.7 1.4 31.1S20.9 384 32 384l0 96c0 17.7 14.3 32 32 32s32-14.3 32-32V384H352v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384c11.1 0 21.4-5.7 27.2-15.2s6.4-21.2 1.4-31.1l-16-32C423.2 294.8 412.1 288 400 288H48z',
    ],
  };
  var faCircleCheck = {
    prefix: 'fas',
    iconName: 'circle-check',
    icon: [
      512,
      512,
      [61533, 'check-circle'],
      'f058',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z',
    ],
  };
  var faCheckCircle = faCircleCheck;
  var faCircleStop = {
    prefix: 'fas',
    iconName: 'circle-stop',
    icon: [
      512,
      512,
      [62094, 'stop-circle'],
      'f28d',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM192 160H320c17.7 0 32 14.3 32 32V320c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V192c0-17.7 14.3-32 32-32z',
    ],
  };
  var faStopCircle = faCircleStop;
  var faCompassDrafting = {
    prefix: 'fas',
    iconName: 'compass-drafting',
    icon: [
      512,
      512,
      ['drafting-compass'],
      'f568',
      'M352 96c0 14.3-3.1 27.9-8.8 40.2L396 227.4c-23.7 25.3-54.2 44.1-88.5 53.6L256 192h0 0l-68 117.5c21.5 6.8 44.3 10.5 68.1 10.5c70.7 0 133.8-32.7 174.9-84c11.1-13.8 31.2-16 45-5s16 31.2 5 45C428.1 341.8 347 384 256 384c-35.4 0-69.4-6.4-100.7-18.1L98.7 463.7C94 471.8 87 478.4 78.6 482.6L23.2 510.3c-5 2.5-10.9 2.2-15.6-.7S0 501.5 0 496V440.6c0-8.4 2.2-16.7 6.5-24.1l60-103.7C53.7 301.6 41.8 289.3 31.2 276c-11.1-13.8-8.8-33.9 5-45s33.9-8.8 45 5c5.7 7.1 11.8 13.8 18.2 20.1l69.4-119.9c-5.6-12.2-8.8-25.8-8.8-40.2c0-53 43-96 96-96s96 43 96 96zm21 297.9c32.6-12.8 62.5-30.8 88.9-52.9l43.7 75.5c4.2 7.3 6.5 15.6 6.5 24.1V496c0 5.5-2.9 10.7-7.6 13.6s-10.6 3.2-15.6 .7l-55.4-27.7c-8.4-4.2-15.4-10.8-20.1-18.9L373 393.9zM256 128c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faDraftingCompass = faCompassDrafting;
  var faPlateWheat = {
    prefix: 'fas',
    iconName: 'plate-wheat',
    icon: [
      512,
      512,
      [],
      'e55a',
      'M176 32c44.2 0 80 35.8 80 80v16c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80V48c0-8.8 7.2-16 16-16zM56 64h48c13.3 0 24 10.7 24 24s-10.7 24-24 24H56c-13.3 0-24-10.7-24-24s10.7-24 24-24zM24 136H136c13.3 0 24 10.7 24 24s-10.7 24-24 24H24c-13.3 0-24-10.7-24-24s10.7-24 24-24zm8 96c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24s-10.7 24-24 24H56c-13.3 0-24-10.7-24-24zM272 48c0-8.8 7.2-16 16-16c44.2 0 80 35.8 80 80v16c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80V48zM400 32c44.2 0 80 35.8 80 80v16c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80V48c0-8.8 7.2-16 16-16zm80 160v16c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16V256c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16zM352 176c8.8 0 16 7.2 16 16v16c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16V256c0-44.2 35.8-80 80-80zm-96 16v16c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16V256c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16zM3.5 347.6C1.6 332.9 13 320 27.8 320H484.2c14.8 0 26.2 12.9 24.4 27.6C502.3 397.8 464.2 437 416 446v2c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32v-2c-48.2-9-86.3-48.2-92.5-98.4z',
    ],
  };
  var faIcicles = {
    prefix: 'fas',
    iconName: 'icicles',
    icon: [
      512,
      512,
      [],
      'f7ad',
      'M75.8 304.8L1 35.7c-.7-2.5-1-5-1-7.5C0 12.6 12.6 0 28.2 0H482.4C498.8 0 512 13.2 512 29.6c0 1.6-.1 3.3-.4 4.9L434.6 496.1c-1.5 9.2-9.5 15.9-18.8 15.9c-9.2 0-17.1-6.6-18.7-15.6L336 160 307.2 303.9c-1.9 9.3-10.1 16.1-19.6 16.1c-9.2 0-17.2-6.2-19.4-15.1L240 192 210.6 368.2c-1.5 9.1-9.4 15.8-18.6 15.8s-17.1-6.7-18.6-15.8L144 192 115.9 304.3c-2.3 9.2-10.6 15.7-20.1 15.7c-9.3 0-17.5-6.2-20-15.2z',
    ],
  };
  var faPersonShelter = {
    prefix: 'fas',
    iconName: 'person-shelter',
    icon: [
      512,
      512,
      [],
      'e54f',
      'M271.9 4.2c-9.8-5.6-21.9-5.6-31.8 0l-224 128C6.2 137.9 0 148.5 0 160V480c0 17.7 14.3 32 32 32s32-14.3 32-32V178.6L256 68.9 448 178.6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V160c0-11.5-6.2-22.1-16.1-27.8l-224-128zM256 208c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zm-8 280V400h16v88c0 13.3 10.7 24 24 24s24-10.7 24-24V313.5l26.9 49.9c6.3 11.7 20.8 16 32.5 9.8s16-20.8 9.8-32.5l-37.9-70.3c-15.3-28.5-45.1-46.3-77.5-46.3H246.2c-32.4 0-62.1 17.8-77.5 46.3l-37.9 70.3c-6.3 11.7-1.9 26.2 9.8 32.5s26.2 1.9 32.5-9.8L200 313.5V488c0 13.3 10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faNeuter = {
    prefix: 'fas',
    iconName: 'neuter',
    icon: [
      384,
      512,
      [9906],
      'f22c',
      'M304 176c0 61.9-50.1 112-112 112s-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112zM224 349.1c81.9-15 144-86.8 144-173.1C368 78.8 289.2 0 192 0S16 78.8 16 176c0 86.3 62.1 158.1 144 173.1V480c0 17.7 14.3 32 32 32s32-14.3 32-32V349.1z',
    ],
  };
  var faIdBadge = {
    prefix: 'fas',
    iconName: 'id-badge',
    icon: [
      384,
      512,
      [],
      'f2c1',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zm96 320h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm96-96c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM144 64h96c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faMarker = {
    prefix: 'fas',
    iconName: 'marker',
    icon: [
      512,
      512,
      [],
      'f5a1',
      'M481 31C445.1-4.8 386.9-4.8 351 31l-15 15L322.9 33C294.8 4.9 249.2 4.9 221.1 33L135 119c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L255 66.9c9.4-9.4 24.6-9.4 33.9 0L302.1 80 186.3 195.7 316.3 325.7 481 161c35.9-35.9 35.9-94.1 0-129.9zM293.7 348.3L163.7 218.3 99.5 282.5c-48 48-80.8 109.2-94.1 175.8l-5 25c-1.6 7.9 .9 16 6.6 21.7s13.8 8.1 21.7 6.6l25-5c66.6-13.3 127.8-46.1 175.8-94.1l64.2-64.2z',
    ],
  };
  var faFaceLaughBeam = {
    prefix: 'fas',
    iconName: 'face-laugh-beam',
    icon: [
      512,
      512,
      [128513, 'laugh-beam'],
      'f59a',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM101.6 314c-3.7-13.7 7.5-26 21.7-26H388.7c14.2 0 25.4 12.3 21.7 26C392 382 329.8 432 256 432s-136-50-154.4-118zm116-101.2l0 0 0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0zm160 0l0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0 0 0z',
    ],
  };
  var faLaughBeam = faFaceLaughBeam;
  var faHelicopterSymbol = {
    prefix: 'fas',
    iconName: 'helicopter-symbol',
    icon: [
      512,
      512,
      [],
      'e502',
      'M445.3 224H510C495.6 108.2 403.8 16.4 288 2V66.7C368.4 80.1 431.9 143.6 445.3 224zM510 288H445.3C431.9 368.4 368.4 431.9 288 445.4V510c115.8-14.4 207.6-106.2 222-222zM2 288C16.4 403.8 108.2 495.6 224 510V445.4C143.6 431.9 80.1 368.4 66.7 288H2zm0-64H66.7C80.1 143.6 143.6 80.1 224 66.7V2C108.2 16.4 16.4 108.2 2 224zm206-64c0-17.7-14.3-32-32-32s-32 14.3-32 32V352c0 17.7 14.3 32 32 32s32-14.3 32-32V288h96v64c0 17.7 14.3 32 32 32s32-14.3 32-32V160c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H208V160z',
    ],
  };
  var faUniversalAccess = {
    prefix: 'fas',
    iconName: 'universal-access',
    icon: [
      512,
      512,
      [],
      'f29a',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM161.5 169.9c-12.2-5.2-26.3 .4-31.5 12.6s.4 26.3 12.6 31.5l11.9 5.1c17.3 7.4 35.2 12.9 53.6 16.3v50.1c0 4.3-.7 8.6-2.1 12.6l-28.7 86.1c-4.2 12.6 2.6 26.2 15.2 30.4s26.2-2.6 30.4-15.2l24.4-73.2c1.3-3.8 4.8-6.4 8.8-6.4s7.6 2.6 8.8 6.4l24.4 73.2c4.2 12.6 17.8 19.4 30.4 15.2s19.4-17.8 15.2-30.4l-28.7-86.1c-1.4-4.1-2.1-8.3-2.1-12.6V235.5c18.4-3.5 36.3-8.9 53.6-16.3l11.9-5.1c12.2-5.2 17.8-19.3 12.6-31.5s-19.3-17.8-31.5-12.6L338.7 175c-26.1 11.2-54.2 17-82.7 17s-56.5-5.8-82.7-17l-11.9-5.1zM256 160c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40z',
    ],
  };
  var faCircleChevronUp = {
    prefix: 'fas',
    iconName: 'circle-chevron-up',
    icon: [
      512,
      512,
      ['chevron-circle-up'],
      'f139',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM377 271c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-87-87-87 87c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L239 167c9.4-9.4 24.6-9.4 33.9 0L377 271z',
    ],
  };
  var faChevronCircleUp = faCircleChevronUp;
  var faLariSign = {
    prefix: 'fas',
    iconName: 'lari-sign',
    icon: [
      384,
      512,
      [],
      'e1c8',
      'M144 32c17.7 0 32 14.3 32 32V96.7c5.3-.4 10.6-.7 16-.7s10.7 .2 16 .7V64c0-17.7 14.3-32 32-32s32 14.3 32 32v49.4c54.9 25.2 95.8 75.5 108.2 136.2c3.5 17.3-7.7 34.2-25 37.7s-34.2-7.7-37.7-25c-6.1-29.9-22.5-55.9-45.4-74.3V256c0 17.7-14.3 32-32 32s-32-14.3-32-32V161c-5.2-.7-10.6-1-16-1s-10.8 .3-16 1v95c0 17.7-14.3 32-32 32s-32-14.3-32-32V188.1C82.7 211.5 64 247.6 64 288c0 70.7 57.3 128 128 128H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H192 32c-17.7 0-32-14.3-32-32s14.3-32 32-32H48.9C18.5 382 0 337.2 0 288c0-77.5 45.9-144.3 112-174.6V64c0-17.7 14.3-32 32-32z',
    ],
  };
  var faVolcano = {
    prefix: 'fas',
    iconName: 'volcano',
    icon: [
      512,
      512,
      [127755],
      'f770',
      'M160 144c-35.3 0-64-28.7-64-64s28.7-64 64-64c15.7 0 30 5.6 41.2 15C212.4 12.4 232.7 0 256 0s43.6 12.4 54.8 31C322 21.6 336.3 16 352 16c35.3 0 64 28.7 64 64s-28.7 64-64 64c-14.7 0-28.3-5-39.1-13.3l-32 48C275.3 187 266 192 256 192s-19.3-5-24.9-13.3l-32-48C188.3 139 174.7 144 160 144zM144 352l48.4-24.2c10.2-5.1 21.6-7.8 33-7.8c19.6 0 38.4 7.8 52.2 21.6l32.5 32.5c6.3 6.3 14.9 9.9 23.8 9.9c11.3 0 21.8-5.6 28-15l9.7-14.6-59-66.3c-9.1-10.2-22.2-16.1-35.9-16.1H235.1c-13.7 0-26.8 5.9-35.9 16.1l-59.9 67.4L144 352zm19.4-95.8c18.2-20.5 44.3-32.2 71.8-32.2h41.8c27.4 0 53.5 11.7 71.8 32.2l150.2 169c8.5 9.5 13.2 21.9 13.2 34.7c0 28.8-23.4 52.2-52.2 52.2H52.2C23.4 512 0 488.6 0 459.8c0-12.8 4.7-25.1 13.2-34.7l150.2-169z',
    ],
  };
  var faPersonWalkingDashedLineArrowRight = {
    prefix: 'fas',
    iconName: 'person-walking-dashed-line-arrow-right',
    icon: [
      640,
      512,
      [],
      'e553',
      'M208 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM123.7 200.5c1-.4 1.9-.8 2.9-1.2l-16.9 63.5c-5.6 21.1-.1 43.6 14.7 59.7l70.7 77.1 22 88.1c4.3 17.1 21.7 27.6 38.8 23.3s27.6-21.7 23.3-38.8l-23-92.1c-1.9-7.8-5.8-14.9-11.2-20.8l-49.5-54 19.3-65.5 9.6 23c4.4 10.6 12.5 19.3 22.8 24.5l26.7 13.3c15.8 7.9 35 1.5 42.9-14.3s1.5-35-14.3-42.9L281 232.7l-15.3-36.8C248.5 154.8 208.3 128 163.7 128c-22.8 0-45.3 4.8-66.1 14l-8 3.5c-32.9 14.6-58.1 42.4-69.4 76.5l-2.6 7.8c-5.6 16.8 3.5 34.9 20.2 40.5s34.9-3.5 40.5-20.2l2.6-7.8c5.7-17.1 18.3-30.9 34.7-38.2l8-3.5zm-30 135.1L68.7 398 9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L116.3 441c4.6-4.6 8.2-10.1 10.6-16.1l14.5-36.2-40.7-44.4c-2.5-2.7-4.8-5.6-7-8.6zM550.6 153.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L530.7 224H384c-17.7 0-32 14.3-32 32s14.3 32 32 32H530.7l-25.4 25.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l80-80c12.5-12.5 12.5-32.8 0-45.3l-80-80zM392 0c-13.3 0-24 10.7-24 24V72c0 13.3 10.7 24 24 24s24-10.7 24-24V24c0-13.3-10.7-24-24-24zm24 152c0-13.3-10.7-24-24-24s-24 10.7-24 24v16c0 13.3 10.7 24 24 24s24-10.7 24-24V152zM392 320c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24s24-10.7 24-24V344c0-13.3-10.7-24-24-24zm24 120c0-13.3-10.7-24-24-24s-24 10.7-24 24v48c0 13.3 10.7 24 24 24s24-10.7 24-24V440z',
    ],
  };
  var faSterlingSign = {
    prefix: 'fas',
    iconName: 'sterling-sign',
    icon: [
      384,
      512,
      [163, 'gbp', 'pound-sign'],
      'f154',
      'M144 160.4c0-35.5 28.8-64.4 64.4-64.4c6.9 0 13.8 1.1 20.4 3.3l81.2 27.1c16.8 5.6 34.9-3.5 40.5-20.2s-3.5-34.9-20.2-40.5L249 38.6c-13.1-4.4-26.8-6.6-40.6-6.6C137.5 32 80 89.5 80 160.4V224H64c-17.7 0-32 14.3-32 32s14.3 32 32 32H80v44.5c0 17.4-4.7 34.5-13.7 49.4L36.6 431.5c-5.9 9.9-6.1 22.2-.4 32.2S52.5 480 64 480H320c17.7 0 32-14.3 32-32s-14.3-32-32-32H120.5l.7-1.1C136.1 390 144 361.5 144 332.5V288H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H144V160.4z',
    ],
  };
  var faGbp = faSterlingSign;
  var faPoundSign = faSterlingSign;
  var faViruses = {
    prefix: 'fas',
    iconName: 'viruses',
    icon: [
      640,
      512,
      [],
      'e076',
      'M192 0c13.3 0 24 10.7 24 24V37.5c0 35.6 43.1 53.5 68.3 28.3l9.5-9.5c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-9.5 9.5C293 124.9 310.9 168 346.5 168H360c13.3 0 24 10.7 24 24s-10.7 24-24 24H346.5c-35.6 0-53.5 43.1-28.3 68.3l9.5 9.5c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-9.5-9.5C259.1 293 216 310.9 216 346.5V360c0 13.3-10.7 24-24 24s-24-10.7-24-24V346.5c0-35.6-43.1-53.5-68.3-28.3l-9.5 9.5c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l9.5-9.5C91 259.1 73.1 216 37.5 216H24c-13.3 0-24-10.7-24-24s10.7-24 24-24H37.5c35.6 0 53.5-43.1 28.3-68.3l-9.5-9.5c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l9.5 9.5C124.9 91 168 73.1 168 37.5V24c0-13.3 10.7-24 24-24zm48 224c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm-48-64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm320 80c0 33 39.9 49.5 63.2 26.2c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6C574.5 312.1 591 352 624 352c8.8 0 16 7.2 16 16s-7.2 16-16 16c-33 0-49.5 39.9-26.2 63.2c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0C551.9 446.5 512 463 512 496c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-33-39.9-49.5-63.2-26.2c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6C417.5 423.9 401 384 368 384c-8.8 0-16-7.2-16-16s7.2-16 16-16c33 0 49.5-39.9 26.2-63.2c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0C440.1 289.5 480 273 480 240c0-8.8 7.2-16 16-16s16 7.2 16 16zm0 112c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faSquarePersonConfined = {
    prefix: 'fas',
    iconName: 'square-person-confined',
    icon: [
      448,
      512,
      [],
      'e577',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM256 144c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM240 248c0-30.9 25.1-56 56-56s56 25.1 56 56V350.1c0 36.4-29.5 65.9-65.9 65.9c-17.5 0-34.3-6.9-46.6-19.3L184.8 342l-28.1 56.3c-7.9 15.8-27.1 22.2-42.9 14.3s-22.2-27.1-14.3-42.9l48-96c4.6-9.2 13.3-15.6 23.5-17.3s20.5 1.7 27.8 9L240 306.7V248z',
    ],
  };
  var faUserTie = {
    prefix: 'fas',
    iconName: 'user-tie',
    icon: [
      448,
      512,
      [],
      'f508',
      'M224 0c70.7 0 128 57.3 128 128s-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 39.5-161.2c77.2 12 136.3 78.8 136.3 159.4c0 17-13.8 30.7-30.7 30.7H265.1 182.9 30.7C13.8 512 0 498.2 0 481.3c0-80.6 59.1-147.4 136.3-159.4l39.5 161.2 33.4-123.9z',
    ],
  };
  var faArrowDownLong = {
    prefix: 'fas',
    iconName: 'arrow-down-long',
    icon: [
      384,
      512,
      ['long-arrow-down'],
      'f175',
      'M224 402.7V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V402.7L86.6 329.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 402.7z',
    ],
  };
  var faLongArrowDown = faArrowDownLong;
  var faTentArrowDownToLine = {
    prefix: 'fas',
    iconName: 'tent-arrow-down-to-line',
    icon: [
      640,
      512,
      [],
      'e57e',
      'M241.8 111.9c8.9 9.9 8.1 25-1.8 33.9l-80 72c-9.1 8.2-23 8.2-32.1 0l-80-72c-9.9-8.9-10.7-24-1.8-33.9s24-10.7 33.9-1.8l39.9 36L120 24c0-13.3 10.7-24 24-24s24 10.7 24 24l0 122.1 39.9-36c9.9-8.9 25-8.1 33.9 1.8zm122.8 22.6c11.5-8.7 27.3-8.7 38.8 0l168 128c6.6 5 11 12.5 12.3 20.7l24 160 .7 4.7c17.5 .2 31.6 14.4 31.6 32c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H159.6l.7-4.7 24-160c1.2-8.2 5.6-15.7 12.3-20.7l168-128zM384 448h76.8L384 320V448z',
    ],
  };
  var faCertificate = {
    prefix: 'fas',
    iconName: 'certificate',
    icon: [
      512,
      512,
      [],
      'f0a3',
      'M211 7.3C205 1 196-1.4 187.6 .8s-14.9 8.9-17.1 17.3L154.7 80.6l-62-17.5c-8.4-2.4-17.4 0-23.5 6.1s-8.5 15.1-6.1 23.5l17.5 62L18.1 170.6c-8.4 2.1-15 8.7-17.3 17.1S1 205 7.3 211l46.2 45L7.3 301C1 307-1.4 316 .8 324.4s8.9 14.9 17.3 17.1l62.5 15.8-17.5 62c-2.4 8.4 0 17.4 6.1 23.5s15.1 8.5 23.5 6.1l62-17.5 15.8 62.5c2.1 8.4 8.7 15 17.1 17.3s17.3-.2 23.4-6.4l45-46.2 45 46.2c6.1 6.2 15 8.7 23.4 6.4s14.9-8.9 17.1-17.3l15.8-62.5 62 17.5c8.4 2.4 17.4 0 23.5-6.1s8.5-15.1 6.1-23.5l-17.5-62 62.5-15.8c8.4-2.1 15-8.7 17.3-17.1s-.2-17.3-6.4-23.4l-46.2-45 46.2-45c6.2-6.1 8.7-15 6.4-23.4s-8.9-14.9-17.3-17.1l-62.5-15.8 17.5-62c2.4-8.4 0-17.4-6.1-23.5s-15.1-8.5-23.5-6.1l-62 17.5L341.4 18.1c-2.1-8.4-8.7-15-17.1-17.3S307 1 301 7.3L256 53.5 211 7.3z',
    ],
  };
  var faReplyAll = {
    prefix: 'fas',
    iconName: 'reply-all',
    icon: [
      576,
      512,
      ['mail-reply-all'],
      'f122',
      'M117.2 160.4L224 64.3V64c0-12.6-7.4-24.1-19-29.2s-25-3-34.4 5.4l-160 144C3.9 190.3 0 198.9 0 208s3.9 17.7 10.6 23.8l160 144c9.4 8.5 22.9 10.6 34.4 5.4s19-16.6 19-29.2v-.3L117.2 255.6C103.7 243.4 96 226.1 96 208s7.7-35.4 21.2-47.6zM352 64c0-12.6-7.4-24.1-19-29.2s-25-3-34.4 5.4l-160 144c-6.7 6.1-10.6 14.7-10.6 23.8s3.9 17.7 10.6 23.8l160 144c9.4 8.5 22.9 10.6 34.4 5.4s19-16.6 19-29.2V288h32c53 0 96 43 96 96c0 30.4-12.8 47.9-22.2 56.7c-5.5 5.1-9.8 12-9.8 19.5c0 10.9 8.8 19.7 19.7 19.7c2.8 0 5.6-.6 8.1-1.9C494.5 467.9 576 417.3 576 304c0-97.2-78.8-176-176-176H352V64z',
    ],
  };
  var faMailReplyAll = faReplyAll;
  var faSuitcase = {
    prefix: 'fas',
    iconName: 'suitcase',
    icon: [
      512,
      512,
      [129523],
      'f0f2',
      'M176 56V96H336V56c0-4.4-3.6-8-8-8H184c-4.4 0-8 3.6-8 8zM128 96V56c0-30.9 25.1-56 56-56H328c30.9 0 56 25.1 56 56V96v32V480H128V128 96zM64 96H96V480H64c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64zM448 480H416V96h32c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64z',
    ],
  };
  var faPersonSkating = {
    prefix: 'fas',
    iconName: 'person-skating',
    icon: [
      448,
      512,
      ['skating'],
      'f7c5',
      'M448 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM128 128c0-17.7 14.3-32 32-32H319.4c43.6 0 64.6 53.4 32.8 83.1l-74.4 69.4 60.2 60.2c9 9 14.1 21.2 14.1 33.9V416c0 17.7-14.3 32-32 32s-32-14.3-32-32V349.3l-77.9-77.8c-26.6-26.6-24.6-70.3 4.3-94.4l20.4-17H160c-17.7 0-32-14.3-32-32zM81.4 353.4l86.9-86.9c4.6 10 11 19.3 19.3 27.5l21.8 21.8-82.7 82.7c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3zm322.5 95.1c8.6 2.1 13.8 10.8 11.6 19.4l-.4 1.7c-6.2 24.9-28.6 42.4-54.3 42.4H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h88.8c11 0 20.6-7.5 23.3-18.2l.4-1.7c2.1-8.6 10.8-13.8 19.4-11.6zM135.2 478.3l-6.2 3.1c-21.6 10.8-47.6 6.6-64.6-10.5L4.7 411.3c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0l59.6 59.6c7.3 7.3 18.5 9.1 27.7 4.5l6.2-3.1c7.9-4 17.5-.7 21.5 7.2s.7 17.5-7.2 21.5z',
    ],
  };
  var faSkating = faPersonSkating;
  var faFilterCircleDollar = {
    prefix: 'fas',
    iconName: 'filter-circle-dollar',
    icon: [
      576,
      512,
      ['funnel-dollar'],
      'f662',
      'M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM576 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zM408.8 335.4c.6-.9 1.8-2.1 4.2-3.4c5.1-2.7 12.5-4.1 18.7-4c8.2 .1 17.1 1.8 26.4 4.1c8.6 2.1 17.3-3.1 19.4-11.7s-3.1-17.3-11.7-19.4c-5.6-1.4-11.6-2.7-17.9-3.7V288c0-8.8-7.2-16-16-16s-16 7.2-16 16v9.5c-6.1 1.2-12.3 3.2-18 6.3c-11.8 6.3-23 18.4-21.8 37.2c1 16 11.7 25.3 21.6 30.7c8.8 4.7 19.7 7.8 28.6 10.3l1.8 .5c10.3 2.9 17.9 5.2 23.2 8.3c4.5 2.7 4.7 4.2 4.7 5.6c.1 2.4-.5 3.7-1 4.5c-.6 1-1.8 2.2-4 3.3c-4.7 2.5-11.8 3.8-18.5 3.6c-9.5-.3-18.5-3.1-29.9-6.8c-1.9-.6-3.8-1.2-5.8-1.8c-8.4-2.6-17.4 2.1-20 10.5s2.1 17.4 10.5 20c1.6 .5 3.3 1 5 1.6l0 0 0 0c7 2.3 15.1 4.8 23.7 6.6v11.4c0 8.8 7.2 16 16 16s16-7.2 16-16V438.7c6.2-1.1 12.5-3.1 18.3-6.2c12.1-6.5 22.3-18.7 21.7-36.9c-.5-16.2-10.3-26.3-20.5-32.3c-9.4-5.6-21.2-8.9-30.5-11.5l-.2 0c-10.4-2.9-18.3-5.2-23.9-8.2c-4.8-2.6-4.8-4-4.8-4.5l0-.1c-.1-1.9 .3-2.9 .8-3.6z',
    ],
  };
  var faFunnelDollar = faFilterCircleDollar;
  var faCameraRetro = {
    prefix: 'fas',
    iconName: 'camera-retro',
    icon: [
      512,
      512,
      [128247],
      'f083',
      'M220.6 121.2L271.1 96 448 96v96H333.2c-21.9-15.1-48.5-24-77.2-24s-55.2 8.9-77.2 24H64V128H192c9.9 0 19.7-2.3 28.6-6.8zM0 128V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H271.1c-9.9 0-19.7 2.3-28.6 6.8L192 64H160V48c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16l0 16C28.7 64 0 92.7 0 128zM344 304c0 48.6-39.4 88-88 88s-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88z',
    ],
  };
  var faCircleArrowDown = {
    prefix: 'fas',
    iconName: 'circle-arrow-down',
    icon: [
      512,
      512,
      ['arrow-circle-down'],
      'f0ab',
      'M256 0C114.6 0 0 114.6 0 256S114.6 512 256 512s256-114.6 256-256S397.4 0 256 0zM127 297c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l71 71L232 120c0-13.3 10.7-24 24-24s24 10.7 24 24l0 214.1 71-71c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L273 409c-9.4 9.4-24.6 9.4-33.9 0L127 297z',
    ],
  };
  var faArrowCircleDown = faCircleArrowDown;
  var faFileImport = {
    prefix: 'fas',
    iconName: 'file-import',
    icon: [
      512,
      512,
      ['arrow-right-to-file'],
      'f56f',
      'M128 64c0-35.3 28.7-64 64-64H352V128c0 17.7 14.3 32 32 32H512V448c0 35.3-28.7 64-64 64H192c-35.3 0-64-28.7-64-64V336H302.1l-39 39c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l80-80c9.4-9.4 9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l39 39H128V64zm0 224v48H24c-13.3 0-24-10.7-24-24s10.7-24 24-24H128zM512 128H384V0L512 128z',
    ],
  };
  var faArrowRightToFile = faFileImport;
  var faSquareArrowUpRight = {
    prefix: 'fas',
    iconName: 'square-arrow-up-right',
    icon: [
      448,
      512,
      ['external-link-square'],
      'f14c',
      'M384 32c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H384zM160 144c-13.3 0-24 10.7-24 24s10.7 24 24 24h94.1L119 327c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l135-135V328c0 13.3 10.7 24 24 24s24-10.7 24-24V168c0-13.3-10.7-24-24-24H160z',
    ],
  };
  var faExternalLinkSquare = faSquareArrowUpRight;
  var faBoxOpen = {
    prefix: 'fas',
    iconName: 'box-open',
    icon: [
      640,
      512,
      [],
      'f49e',
      'M58.9 42.1c3-6.1 9.6-9.6 16.3-8.7L320 64 564.8 33.4c6.7-.8 13.3 2.7 16.3 8.7l41.7 83.4c9 17.9-.6 39.6-19.8 45.1L439.6 217.3c-13.9 4-28.8-1.9-36.2-14.3L320 64 236.6 203c-7.4 12.4-22.3 18.3-36.2 14.3L37.1 170.6c-19.3-5.5-28.8-27.2-19.8-45.1L58.9 42.1zM321.1 128l54.9 91.4c14.9 24.8 44.6 36.6 72.5 28.6L576 211.6v167c0 22-15 41.2-36.4 46.6l-204.1 51c-10.2 2.6-20.9 2.6-31 0l-204.1-51C79 419.7 64 400.5 64 378.5v-167L191.6 248c27.8 8 57.6-3.8 72.5-28.6L318.9 128h2.2z',
    ],
  };
  var faScroll = {
    prefix: 'fas',
    iconName: 'scroll',
    icon: [
      576,
      512,
      [128220],
      'f70e',
      'M0 80v48c0 17.7 14.3 32 32 32H48 96V80c0-26.5-21.5-48-48-48S0 53.5 0 80zM112 32c10 13.4 16 30 16 48V384c0 35.3 28.7 64 64 64s64-28.7 64-64v-5.3c0-32.4 26.3-58.7 58.7-58.7H480V128c0-53-43-96-96-96H112zM464 480c61.9 0 112-50.1 112-112c0-8.8-7.2-16-16-16H314.7c-14.7 0-26.7 11.9-26.7 26.7V384c0 53-43 96-96 96H368h96z',
    ],
  };
  var faSpa = {
    prefix: 'fas',
    iconName: 'spa',
    icon: [
      576,
      512,
      [],
      'f5bb',
      'M183.1 235.3c33.7 20.7 62.9 48.1 85.8 80.5c7 9.9 13.4 20.3 19.1 31c5.7-10.8 12.1-21.1 19.1-31c22.9-32.4 52.1-59.8 85.8-80.5C437.6 207.8 490.1 192 546 192h9.9c11.1 0 20.1 9 20.1 20.1C576 360.1 456.1 480 308.1 480H288 267.9C119.9 480 0 360.1 0 212.1C0 201 9 192 20.1 192H30c55.9 0 108.4 15.8 153.1 43.3zM301.5 37.6c15.7 16.9 61.1 71.8 84.4 164.6c-38 21.6-71.4 50.8-97.9 85.6c-26.5-34.8-59.9-63.9-97.9-85.6c23.2-92.8 68.6-147.7 84.4-164.6C278 33.9 282.9 32 288 32s10 1.9 13.5 5.6z',
    ],
  };
  var faLocationPinLock = {
    prefix: 'fas',
    iconName: 'location-pin-lock',
    icon: [
      512,
      512,
      [],
      'e51f',
      'M215.7 499.2c11-13.8 25.1-31.7 40.3-52.3V352c0-23.7 12.9-44.4 32-55.4V272c0-55.6 40.5-101.7 93.6-110.5C367 70 287.7 0 192 0C86 0 0 86 0 192c0 87.4 117 243 168.3 307.2c12.3 15.3 35.1 15.3 47.4 0zM192 256c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm208-16c17.7 0 32 14.3 32 32v48H368V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H480c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faPause = {
    prefix: 'fas',
    iconName: 'pause',
    icon: [
      320,
      512,
      [9208],
      'f04c',
      'M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z',
    ],
  };
  var faHillAvalanche = {
    prefix: 'fas',
    iconName: 'hill-avalanche',
    icon: [
      640,
      512,
      [],
      'e507',
      'M471.7 401.9c34.2 23.1 81.1 19.5 111.4-10.8c34.4-34.4 34.4-90.1 0-124.4c-27.8-27.8-69.5-33.1-102.6-16c-11.8 6.1-16.4 20.6-10.3 32.3s20.6 16.4 32.3 10.3c15.1-7.8 34-5.3 46.6 7.3c15.6 15.6 15.6 40.9 0 56.6s-40.9 15.6-56.6 0l-81.7-81.7C433.2 261.3 448 236.4 448 208c0-33.9-21.1-62.9-50.9-74.5c1.9-6.8 2.9-14 2.9-21.5c0-44.2-35.8-80-80-80c-27.3 0-51.5 13.7-65.9 34.6C248.3 46.6 229.9 32 208 32c-26.5 0-48 21.5-48 48c0 4 .5 7.9 1.4 11.6L471.7 401.9zM512 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0 128c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM100.3 87C75.1 61.8 32 79.7 32 115.3V432c0 44.2 35.8 80 80 80H428.7c35.6 0 53.5-43.1 28.3-68.3L100.3 87z',
    ],
  };
  var faTemperatureEmpty = {
    prefix: 'fas',
    iconName: 'temperature-empty',
    icon: [
      320,
      512,
      ['temperature-0', 'thermometer-0', 'thermometer-empty'],
      'f2cb',
      'M112 112c0-26.5 21.5-48 48-48s48 21.5 48 48V276.5c0 17.3 7.1 31.9 15.3 42.5C233.8 332.6 240 349.5 240 368c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-18.5 6.2-35.4 16.7-48.9c8.2-10.6 15.3-25.2 15.3-42.5V112zM160 0C98.1 0 48 50.2 48 112V276.5c0 .1-.1 .3-.2 .6c-.2 .6-.8 1.6-1.7 2.8C27.2 304.2 16 334.8 16 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-33.2-11.3-63.8-30.1-88.1c-.9-1.2-1.5-2.2-1.7-2.8c-.1-.3-.2-.5-.2-.6V112C272 50.2 221.9 0 160 0zm0 416c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faTemperature0 = faTemperatureEmpty;
  var faThermometer0 = faTemperatureEmpty;
  var faThermometerEmpty = faTemperatureEmpty;
  var faBomb = {
    prefix: 'fas',
    iconName: 'bomb',
    icon: [
      512,
      512,
      [128163],
      'f1e2',
      'M459.1 52.4L442.6 6.5C440.7 2.6 436.5 0 432.1 0s-8.5 2.6-10.4 6.5L405.2 52.4l-46 16.8c-4.3 1.6-7.3 5.9-7.2 10.4c0 4.5 3 8.7 7.2 10.2l45.7 16.8 16.8 45.8c1.5 4.4 5.8 7.5 10.4 7.5s8.9-3.1 10.4-7.5l16.5-45.8 45.7-16.8c4.2-1.5 7.2-5.7 7.2-10.2c0-4.6-3-8.9-7.2-10.4L459.1 52.4zm-132.4 53c-12.5-12.5-32.8-12.5-45.3 0l-2.9 2.9C256.5 100.3 232.7 96 208 96C93.1 96 0 189.1 0 304S93.1 512 208 512s208-93.1 208-208c0-24.7-4.3-48.5-12.2-70.5l2.9-2.9c12.5-12.5 12.5-32.8 0-45.3l-80-80zM200 192c-57.4 0-104 46.6-104 104v8c0 8.8-7.2 16-16 16s-16-7.2-16-16v-8c0-75.1 60.9-136 136-136h8c8.8 0 16 7.2 16 16s-7.2 16-16 16h-8z',
    ],
  };
  var faRegistered = {
    prefix: 'fas',
    iconName: 'registered',
    icon: [
      512,
      512,
      [174],
      'f25d',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM160 152c0-13.3 10.7-24 24-24h88c44.2 0 80 35.8 80 80c0 28-14.4 52.7-36.3 67l34.1 75.1c5.5 12.1 .1 26.3-11.9 31.8s-26.3 .1-31.8-11.9L268.9 288H208v72c0 13.3-10.7 24-24 24s-24-10.7-24-24V264 152zm48 88h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H208v64z',
    ],
  };
  var faAddressCard = {
    prefix: 'fas',
    iconName: 'address-card',
    icon: [
      576,
      512,
      [62140, 'contact-card', 'vcard'],
      'f2bb',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm80 256h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm96-96c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm128-32H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faContactCard = faAddressCard;
  var faVcard = faAddressCard;
  var faScaleUnbalancedFlip = {
    prefix: 'fas',
    iconName: 'scale-unbalanced-flip',
    icon: [
      640,
      512,
      ['balance-scale-right'],
      'f516',
      'M117.9 62.4c-16.8-5.6-25.8-23.7-20.2-40.5s23.7-25.8 40.5-20.2l113 37.7C265 15.8 290.7 0 320 0c44.2 0 80 35.8 80 80c0 3-.2 5.9-.5 8.8l122.6 40.9c16.8 5.6 25.8 23.7 20.2 40.5s-23.7 25.8-40.5 20.2L366.4 145.2c-4.5 3.2-9.3 5.9-14.4 8.2V480c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32s14.3-32 32-32H288V153.3c-21-9.2-37.2-27-44.2-49l-125.9-42zm396.3 211c-.4-.8-1.3-1.3-2.2-1.3s-1.7 .5-2.2 1.3L435.1 416H588.9L514.2 273.3zM512 224c18.8 0 36 10.4 44.7 27l77.8 148.5c3.1 5.8 6.1 14 5.5 23.8c-.7 12.1-4.8 35.2-24.8 55.1C594.9 498.6 562.2 512 512 512s-82.9-13.4-103.2-33.5c-20-20-24.2-43-24.8-55.1c-.6-9.8 2.5-18 5.5-23.8L467.3 251c8.7-16.6 25.9-27 44.7-27zM128 144c-.9 0-1.7 .5-2.2 1.3L51.1 288H204.9L130.2 145.3c-.4-.8-1.3-1.3-2.2-1.3zm44.7-21l77.8 148.5c3.1 5.8 6.1 14 5.5 23.8c-.7 12.1-4.8 35.2-24.8 55.1C210.9 370.6 178.2 384 128 384s-82.9-13.4-103.2-33.5c-20-20-24.2-43-24.8-55.1c-.6-9.8 2.5-18 5.5-23.8L83.3 123C92 106.4 109.2 96 128 96s36 10.4 44.7 27z',
    ],
  };
  var faBalanceScaleRight = faScaleUnbalancedFlip;
  var faSubscript = {
    prefix: 'fas',
    iconName: 'subscript',
    icon: [
      512,
      512,
      [],
      'f12c',
      'M32 64C14.3 64 0 78.3 0 96s14.3 32 32 32H47.3l89.6 128L47.3 384H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64c10.4 0 20.2-5.1 26.2-13.6L176 311.8l85.8 122.6c6 8.6 15.8 13.6 26.2 13.6h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H304.7L215.1 256l89.6-128H320c17.7 0 32-14.3 32-32s-14.3-32-32-32H288c-10.4 0-20.2 5.1-26.2 13.6L176 200.2 90.2 77.6C84.2 69.1 74.4 64 64 64H32zM480 320c0-11.1-5.7-21.4-15.2-27.2s-21.2-6.4-31.1-1.4l-32 16c-15.8 7.9-22.2 27.1-14.3 42.9C393 361.5 404.3 368 416 368v80c-17.7 0-32 14.3-32 32s14.3 32 32 32h32 32c17.7 0 32-14.3 32-32s-14.3-32-32-32V320z',
    ],
  };
  var faDiamondTurnRight = {
    prefix: 'fas',
    iconName: 'diamond-turn-right',
    icon: [
      512,
      512,
      ['directions'],
      'f5eb',
      'M227.7 11.7c15.6-15.6 40.9-15.6 56.6 0l216 216c15.6 15.6 15.6 40.9 0 56.6l-216 216c-15.6 15.6-40.9 15.6-56.6 0l-216-216c-15.6-15.6-15.6-40.9 0-56.6l216-216zm87.6 137c-4.6-4.6-11.5-5.9-17.4-3.5s-9.9 8.3-9.9 14.8v56H224c-35.3 0-64 28.7-64 64v48c0 13.3 10.7 24 24 24s24-10.7 24-24V280c0-8.8 7.2-16 16-16h64v56c0 6.5 3.9 12.3 9.9 14.8s12.9 1.1 17.4-3.5l80-80c6.2-6.2 6.2-16.4 0-22.6l-80-80z',
    ],
  };
  var faDirections = faDiamondTurnRight;
  var faBurst = {
    prefix: 'fas',
    iconName: 'burst',
    icon: [
      512,
      512,
      [],
      'e4dc',
      'M37.6 4.2C28-2.3 15.2-1.1 7 7s-9.4 21-2.8 30.5l112 163.3L16.6 233.2C6.7 236.4 0 245.6 0 256s6.7 19.6 16.6 22.8l103.1 33.4L66.8 412.8c-4.9 9.3-3.2 20.7 4.3 28.1s18.8 9.2 28.1 4.3l100.6-52.9 33.4 103.1c3.2 9.9 12.4 16.6 22.8 16.6s19.6-6.7 22.8-16.6l33.4-103.1 100.6 52.9c9.3 4.9 20.7 3.2 28.1-4.3s9.2-18.8 4.3-28.1L392.3 312.2l103.1-33.4c9.9-3.2 16.6-12.4 16.6-22.8s-6.7-19.6-16.6-22.8L388.9 198.7l25.7-70.4c3.2-8.8 1-18.6-5.6-25.2s-16.4-8.8-25.2-5.6l-70.4 25.7L278.8 16.6C275.6 6.7 266.4 0 256 0s-19.6 6.7-22.8 16.6l-32.3 99.6L37.6 4.2z',
    ],
  };
  var faHouseLaptop = {
    prefix: 'fas',
    iconName: 'house-laptop',
    icon: [
      640,
      512,
      ['laptop-house'],
      'e066',
      'M218.3 8.5c12.3-11.3 31.2-11.3 43.4 0l208 192c6.7 6.2 10.3 14.8 10.3 23.5H336c-19.1 0-36.3 8.4-48 21.7V208c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h64V416H112c-26.5 0-48-21.5-48-48V256H32c-13.2 0-25-8.1-29.8-20.3s-1.6-26.2 8.1-35.2l208-192zM352 304V448H544V304H352zm-48-16c0-17.7 14.3-32 32-32H560c17.7 0 32 14.3 32 32V448h32c8.8 0 16 7.2 16 16c0 26.5-21.5 48-48 48H544 352 304c-26.5 0-48-21.5-48-48c0-8.8 7.2-16 16-16h32V288z',
    ],
  };
  var faLaptopHouse = faHouseLaptop;
  var faFaceTired = {
    prefix: 'fas',
    iconName: 'face-tired',
    icon: [
      512,
      512,
      [128555, 'tired'],
      'f5c8',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM164.7 328.7c22-22 53.9-40.7 91.3-40.7s69.3 18.7 91.3 40.7c11.1 11.1 20.1 23.4 26.4 35.4c6.2 11.7 10.3 24.4 10.3 35.9c0 5.2-2.6 10.2-6.9 13.2s-9.8 3.7-14.7 1.8l-20.5-7.7c-26.9-10.1-55.5-15.3-84.3-15.3h-3.2c-28.8 0-57.3 5.2-84.3 15.3L149.6 415c-4.9 1.8-10.4 1.2-14.7-1.8s-6.9-7.9-6.9-13.2c0-11.6 4.2-24.2 10.3-35.9c6.3-12 15.3-24.3 26.4-35.4zm-31.2-182l89.9 47.9c10.7 5.7 10.7 21.1 0 26.8l-89.9 47.9c-7.9 4.2-17.5-1.5-17.5-10.5c0-2.8 1-5.5 2.8-7.6l36-43.2-36-43.2c-1.8-2.1-2.8-4.8-2.8-7.6c0-9 9.6-14.7 17.5-10.5zM396 157.1c0 2.8-1 5.5-2.8 7.6l-36 43.2 36 43.2c1.8 2.1 2.8 4.8 2.8 7.6c0 9-9.6 14.7-17.5 10.5l-89.9-47.9c-10.7-5.7-10.7-21.1 0-26.8l89.9-47.9c7.9-4.2 17.5 1.5 17.5 10.5z',
    ],
  };
  var faTired = faFaceTired;
  var faMoneyBills = {
    prefix: 'fas',
    iconName: 'money-bills',
    icon: [
      640,
      512,
      [],
      'e1f3',
      'M96 96V320c0 35.3 28.7 64 64 64H576c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H160c-35.3 0-64 28.7-64 64zm64 160c35.3 0 64 28.7 64 64H160V256zM224 96c0 35.3-28.7 64-64 64V96h64zM576 256v64H512c0-35.3 28.7-64 64-64zM512 96h64v64c-35.3 0-64-28.7-64-64zM448 208c0 44.2-35.8 80-80 80s-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80zM48 120c0-13.3-10.7-24-24-24S0 106.7 0 120V360c0 66.3 53.7 120 120 120H520c13.3 0 24-10.7 24-24s-10.7-24-24-24H120c-39.8 0-72-32.2-72-72V120z',
    ],
  };
  var faSmog = {
    prefix: 'fas',
    iconName: 'smog',
    icon: [
      640,
      512,
      [],
      'f75f',
      'M32 144c0 79.5 64.5 144 144 144H299.3c22.6 19.9 52.2 32 84.7 32s62.1-12.1 84.7-32H496c61.9 0 112-50.1 112-112s-50.1-112-112-112c-10.7 0-21 1.5-30.8 4.3C443.8 27.7 401.1 0 352 0c-32.6 0-62.4 12.2-85.1 32.3C242.1 12.1 210.5 0 176 0C96.5 0 32 64.5 32 144zM616 368H280c-13.3 0-24 10.7-24 24s10.7 24 24 24H616c13.3 0 24-10.7 24-24s-10.7-24-24-24zm-64 96H440c-13.3 0-24 10.7-24 24s10.7 24 24 24H552c13.3 0 24-10.7 24-24s-10.7-24-24-24zm-192 0H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H360c13.3 0 24-10.7 24-24s-10.7-24-24-24zM224 392c0-13.3-10.7-24-24-24H96c-13.3 0-24 10.7-24 24s10.7 24 24 24H200c13.3 0 24-10.7 24-24z',
    ],
  };
  var faCrutch = {
    prefix: 'fas',
    iconName: 'crutch',
    icon: [
      512,
      512,
      [],
      'f7f7',
      'M297.4 9.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0zm-96 144l-34.8 34.8c-12.9 12.9-21.9 29.2-25.8 47.1L116.8 342.9c-1.3 5.9-4.3 11.4-8.6 15.7L9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l98.8-98.8c4.3-4.3 9.7-7.3 15.7-8.6l107.6-23.9c17.8-4 34.1-12.9 47.1-25.8l34.7-34.7c0 0 .1-.1 .1-.1s.1-.1 .1-.1l74.6-74.6-45.3-45.3L336 242.7 269.3 176l52.1-52.1L276.1 78.6l-74.7 74.7zM224 221.3L290.7 288l-12.2 12.2c-4.3 4.3-9.7 7.3-15.7 8.6l-76.7 17 17-76.7c1.3-5.9 4.3-11.4 8.6-15.7L224 221.3z',
    ],
  };
  var faFontAwesome = {
    prefix: 'fas',
    iconName: 'font-awesome',
    icon: [
      448,
      512,
      [62501, 62694, 'font-awesome-flag', 'font-awesome-logo-full'],
      'f2b4',
      'M448 48V384c-63.1 22.5-82.3 32-119.5 32c-62.8 0-86.6-32-149.3-32c-20.6 0-36.6 3.6-51.2 8.2v-64c14.6-4.6 30.6-8.2 51.2-8.2c62.7 0 86.5 32 149.3 32c20.4 0 35.6-3 55.5-9.3v-208c-19.9 6.3-35.1 9.3-55.5 9.3c-62.8 0-86.6-32-149.3-32c-50.8 0-74.9 20.6-115.2 28.7V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V64C0 46.3 14.3 32 32 32s32 14.3 32 32V76.7c40.3-8 64.4-28.7 115.2-28.7c62.7 0 86.5 32 149.3 32c37.1 0 56.4-9.5 119.5-32z',
    ],
  };
  var faFontAwesomeFlag = faFontAwesome;
  var faFontAwesomeLogoFull = faFontAwesome;
  var faCloudArrowUp = {
    prefix: 'fas',
    iconName: 'cloud-arrow-up',
    icon: [
      640,
      512,
      [62338, 'cloud-upload', 'cloud-upload-alt'],
      'f0ee',
      'M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128H144zm79-217c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39V392c0 13.3 10.7 24 24 24s24-10.7 24-24V257.9l39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-9.4-9.4-24.6-9.4-33.9 0l-80 80z',
    ],
  };
  var faCloudUpload = faCloudArrowUp;
  var faCloudUploadAlt = faCloudArrowUp;
  var faPalette = {
    prefix: 'fas',
    iconName: 'palette',
    icon: [
      512,
      512,
      [127912],
      'f53f',
      'M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3H344c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0-96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM288 96c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm96 96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faArrowsTurnRight = {
    prefix: 'fas',
    iconName: 'arrows-turn-right',
    icon: [
      512,
      512,
      [],
      'e4c0',
      'M329.4 9.4c12.5-12.5 32.8-12.5 45.3 0l96 96c12.5 12.5 12.5 32.8 0 45.3l-96 96c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L370.7 160H160c-35.3 0-64 28.7-64 64v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V224C32 153.3 89.3 96 160 96H370.7L329.4 54.6c-12.5-12.5-12.5-32.8 0-45.3zm-96 256c12.5-12.5 32.8-12.5 45.3 0l96 96c12.5 12.5 12.5 32.8 0 45.3l-96 96c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L274.7 416H128c-17.7 0-32 14.3-32 32v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448c0-53 43-96 96-96H274.7l-41.4-41.4c-12.5-12.5-12.5-32.8 0-45.3z',
    ],
  };
  var faVest = {
    prefix: 'fas',
    iconName: 'vest',
    icon: [
      448,
      512,
      [],
      'e085',
      'M207.1 237.4L151.2 69.7C168.6 79.7 192.6 88 224 88s55.4-8.3 72.8-18.3L226.5 280.6c-1.6 4.9-2.5 10-2.5 15.2V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V270.5c0-9.5-2.8-18.7-8.1-26.6l-47.9-71.8c-5.3-7.9-8.1-17.1-8.1-26.6V128 54.3 48c0-26.5-21.5-48-48-48h-4.5c-.2 0-.4 0-.6 0c-.4 0-.8 0-1.2 0C311 0 295.7 9.7 285.7 18.8C276.4 27.2 257.2 40 224 40s-52.4-12.8-61.7-21.2C152.3 9.7 137 0 118.3 0c-.4 0-.8 0-1.2 0c-.2 0-.4 0-.6 0H112C85.5 0 64 21.5 64 48v6.3V128v17.5c0 9.5-2.8 18.7-8.1 26.6L8.1 243.9C2.8 251.8 0 261.1 0 270.5V464c0 26.5 21.5 48 48 48H176c9.9 0 19-3 26.7-8.1C195.9 492.2 192 478.5 192 464V295.8c0-8.6 1.4-17.1 4.1-25.3l11-33.1zM347.3 356.7l48 48c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-48-48c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0zm-294.6 48l48-48c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6l-48 48c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6z',
    ],
  };
  var faFerry = {
    prefix: 'fas',
    iconName: 'ferry',
    icon: [
      576,
      512,
      [],
      'e4ea',
      'M224 0H352c17.7 0 32 14.3 32 32h75.1c20.6 0 31.6 24.3 18.1 39.8L456 96H120L98.8 71.8C85.3 56.3 96.3 32 116.9 32H192c0-17.7 14.3-32 32-32zM96 128H480c17.7 0 32 14.3 32 32V283.5c0 13.3-4.2 26.3-11.9 37.2l-51.4 71.9c-1.9 1.1-3.7 2.2-5.5 3.5c-15.5 10.7-34 18-51 19.9H375.6c-17.1-1.8-35-9-50.8-19.9c-22.1-15.5-51.6-15.5-73.7 0c-14.8 10.2-32.5 18-50.6 19.9H183.9c-17-1.8-35.6-9.2-51-19.9c-1.8-1.3-3.7-2.4-5.6-3.5L75.9 320.7C68.2 309.8 64 296.8 64 283.5V160c0-17.7 14.3-32 32-32zm32 64v96H448V192H128zM306.5 421.9C329 437.4 356.5 448 384 448c26.9 0 55.3-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 501.7 417 512 384 512c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 437.2 165.1 448 192 448c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faArrowsDownToPeople = {
    prefix: 'fas',
    iconName: 'arrows-down-to-people',
    icon: [
      640,
      512,
      [],
      'e4b9',
      'M144 0c-13.3 0-24 10.7-24 24V142.1L97 119c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0l64-64c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-23 23V24c0-13.3-10.7-24-24-24zM360 200c0-22.1-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40s40-17.9 40-40zM184 296c0-22.1-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40s40-17.9 40-40zm312 40c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM200 441.5l26.9 49.9c6.3 11.7 20.8 16 32.5 9.8s16-20.8 9.8-32.5l-36.3-67.5c1.7-1.7 3.2-3.6 4.3-5.8L264 345.5V400c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V345.5l26.9 49.9c1.2 2.2 2.6 4.1 4.3 5.8l-36.3 67.5c-6.3 11.7-1.9 26.2 9.8 32.5s26.2 1.9 32.5-9.8L440 441.5V480c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V441.5l26.9 49.9c6.3 11.7 20.8 16 32.5 9.8s16-20.8 9.8-32.5l-37.9-70.3c-15.3-28.5-45.1-46.3-77.5-46.3H486.2c-16.3 0-31.9 4.5-45.4 12.6l-33.6-62.3c-15.3-28.5-45.1-46.3-77.5-46.3H310.2c-32.4 0-62.1 17.8-77.5 46.3l-33.6 62.3c-13.5-8.1-29.1-12.6-45.4-12.6H134.2c-32.4 0-62.1 17.8-77.5 46.3L18.9 468.6c-6.3 11.7-1.9 26.2 9.8 32.5s26.2 1.9 32.5-9.8L88 441.5V480c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32V441.5zM415 153l64 64c9.4 9.4 24.6 9.4 33.9 0l64-64c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-23 23V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V142.1l-23-23c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9z',
    ],
  };
  var faSeedling = {
    prefix: 'fas',
    iconName: 'seedling',
    icon: [
      512,
      512,
      [127793, 'sprout'],
      'f4d8',
      'M512 64c0 113.6-84.6 207.5-194.2 222c-7.1-53.4-30.6-101.6-65.3-139.3C290.8 78.3 364 32 448 32h32c17.7 0 32 14.3 32 32zM0 128c0-17.7 14.3-32 32-32H64c123.7 0 224 100.3 224 224v32 96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352C100.3 352 0 251.7 0 128z',
    ],
  };
  var faSprout = faSeedling;
  var faLeftRight = {
    prefix: 'fas',
    iconName: 'left-right',
    icon: [
      512,
      512,
      [8596, 'arrows-alt-h'],
      'f337',
      'M504.3 273.6c4.9-4.5 7.7-10.9 7.7-17.6s-2.8-13-7.7-17.6l-112-104c-7-6.5-17.2-8.2-25.9-4.4s-14.4 12.5-14.4 22l0 56-192 0 0-56c0-9.5-5.7-18.2-14.4-22s-18.9-2.1-25.9 4.4l-112 104C2.8 243 0 249.3 0 256s2.8 13 7.7 17.6l112 104c7 6.5 17.2 8.2 25.9 4.4s14.4-12.5 14.4-22l0-56 192 0 0 56c0 9.5 5.7 18.2 14.4 22s18.9 2.1 25.9-4.4l112-104z',
    ],
  };
  var faArrowsAltH = faLeftRight;
  var faBoxesPacking = {
    prefix: 'fas',
    iconName: 'boxes-packing',
    icon: [
      640,
      512,
      [],
      'e4c7',
      'M256 48c0-26.5 21.5-48 48-48H592c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H381.3c1.8-5 2.7-10.4 2.7-16V253.3c18.6-6.6 32-24.4 32-45.3V176c0-26.5-21.5-48-48-48H256V48zM571.3 347.3c6.2-6.2 6.2-16.4 0-22.6l-64-64c-6.2-6.2-16.4-6.2-22.6 0l-64 64c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L480 310.6V432c0 8.8 7.2 16 16 16s16-7.2 16-16V310.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0zM0 176c0-8.8 7.2-16 16-16H368c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H16c-8.8 0-16-7.2-16-16V176zm352 80V480c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V256H352zM144 320c-8.8 0-16 7.2-16 16s7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H144z',
    ],
  };
  var faCircleArrowLeft = {
    prefix: 'fas',
    iconName: 'circle-arrow-left',
    icon: [
      512,
      512,
      ['arrow-circle-left'],
      'f0a8',
      'M512 256C512 114.6 397.4 0 256 0S0 114.6 0 256S114.6 512 256 512s256-114.6 256-256zM215 127c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-71 71L392 232c13.3 0 24 10.7 24 24s-10.7 24-24 24l-214.1 0 71 71c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L103 273c-9.4-9.4-9.4-24.6 0-33.9L215 127z',
    ],
  };
  var faArrowCircleLeft = faCircleArrowLeft;
  var faGroupArrowsRotate = {
    prefix: 'fas',
    iconName: 'group-arrows-rotate',
    icon: [
      512,
      512,
      [],
      'e4f6',
      'M201.1 71.9c16.9-5 26.6-22.9 21.5-39.8s-22.9-26.6-39.8-21.5c-21.5 6.4-41.8 15.5-60.6 27C114.3 34 105.4 32 96 32C60.7 32 32 60.7 32 96c0 9.4 2 18.3 5.6 26.3c-11.5 18.7-20.6 39-27 60.6c-5 16.9 4.6 34.8 21.5 39.8s34.8-4.6 39.8-21.5c4.3-14.6 10.4-28.5 17.9-41.4c2 .2 4.1 .3 6.1 .3c35.3 0 64-28.7 64-64c0-2.1-.1-4.1-.3-6.1c12.9-7.5 26.8-13.6 41.4-17.9zm128-61.3c-16.9-5-34.8 4.6-39.8 21.5s4.6 34.8 21.5 39.8c14.6 4.3 28.5 10.4 41.4 17.9c-.2 2-.3 4.1-.3 6.1c0 35.3 28.7 64 64 64c2.1 0 4.1-.1 6.2-.3c7.5 12.9 13.6 26.8 17.9 41.4c5 16.9 22.9 26.6 39.8 21.5s26.6-22.9 21.5-39.8c-6.4-21.5-15.5-41.8-27-60.6c3.6-8 5.6-16.9 5.6-26.3c0-35.3-28.7-64-64-64c-9.4 0-18.3 2-26.3 5.6c-18.7-11.5-39-20.6-60.6-27zM71.9 310.9c-5-16.9-22.9-26.6-39.8-21.5s-26.6 22.9-21.5 39.8c6.4 21.5 15.5 41.8 27 60.6C34 397.7 32 406.6 32 416c0 35.3 28.7 64 64 64c9.4 0 18.3-2 26.3-5.6c18.7 11.5 39 20.6 60.6 27c16.9 5 34.8-4.6 39.8-21.5s-4.6-34.8-21.5-39.8c-14.6-4.3-28.5-10.4-41.4-17.9c.2-2 .3-4.1 .3-6.2c0-35.3-28.7-64-64-64c-2.1 0-4.1 .1-6.2 .3c-7.5-12.9-13.6-26.8-17.9-41.4zm429.4 18.3c5-16.9-4.6-34.8-21.5-39.8s-34.8 4.6-39.8 21.5c-4.3 14.6-10.4 28.5-17.9 41.4c-2-.2-4.1-.3-6.2-.3c-35.3 0-64 28.7-64 64c0 2.1 .1 4.1 .3 6.2c-12.9 7.5-26.8 13.6-41.4 17.9c-16.9 5-26.6 22.9-21.5 39.8s22.9 26.6 39.8 21.5c21.5-6.4 41.8-15.5 60.6-27c8 3.6 16.9 5.6 26.3 5.6c35.3 0 64-28.7 64-64c0-9.4-2-18.3-5.6-26.3c11.5-18.7 20.6-39 27-60.6zM192.8 256.8c0-15.6 5.6-29.9 14.9-41.1L223 231c6.6 6.6 17.8 1.9 17.8-7.4V163.2c0-5.7-4.7-10.4-10.4-10.4H169.9c-9.3 0-13.9 11.2-7.4 17.8l11.2 11.2c-17.9 19.8-28.9 46.2-28.9 75.1c0 43.6 24.9 81.3 61.1 99.8c11.8 6 26.3 1.4 32.3-10.4s1.4-26.3-10.4-32.3c-20.8-10.6-34.9-32.2-34.9-57zm93.1-58.6c20.8 10.6 34.9 32.2 34.9 57c0 15.6-5.6 29.9-14.9 41.1L290.6 281c-6.6-6.6-17.8-1.9-17.8 7.4v60.5c0 5.7 4.7 10.4 10.4 10.4h60.5c9.3 0 13.9-11.2 7.4-17.8l-11.2-11.2c17.9-19.8 28.9-46.2 28.9-75.1c0-43.6-24.9-81.3-61.1-99.8c-11.8-6-26.3-1.4-32.3 10.4s-1.4 26.3 10.4 32.3z',
    ],
  };
  var faBowlFood = {
    prefix: 'fas',
    iconName: 'bowl-food',
    icon: [
      512,
      512,
      [],
      'e4c6',
      'M0 192c0-35.3 28.7-64 64-64c.5 0 1.1 0 1.6 0C73 91.5 105.3 64 144 64c15 0 29 4.1 40.9 11.2C198.2 49.6 225.1 32 256 32s57.8 17.6 71.1 43.2C339 68.1 353 64 368 64c38.7 0 71 27.5 78.4 64c.5 0 1.1 0 1.6 0c35.3 0 64 28.7 64 64c0 11.7-3.1 22.6-8.6 32H8.6C3.1 214.6 0 203.7 0 192zm0 91.4C0 268.3 12.3 256 27.4 256H484.6c15.1 0 27.4 12.3 27.4 27.4c0 70.5-44.4 130.7-106.7 154.1L403.5 452c-2 16-15.6 28-31.8 28H140.2c-16.1 0-29.8-12-31.8-28l-1.8-14.4C44.4 414.1 0 353.9 0 283.4z',
    ],
  };
  var faCandyCane = {
    prefix: 'fas',
    iconName: 'candy-cane',
    icon: [
      512,
      512,
      [],
      'f786',
      'M348.8 131.5c3.7-2.3 7.9-3.5 12.2-3.5c12.7 0 23 10.3 23 23v5.6c0 9.9-5.1 19.1-13.5 24.3L30.1 393.7C.1 412.5-9 451.9 9.7 481.9s58.2 39.1 88.2 20.4L438.4 289.5c45.8-28.6 73.6-78.8 73.6-132.8V151C512 67.6 444.4 0 361 0c-28.3 0-56 8-80.1 23L254.1 39.7c-30 18.7-39.1 58.2-20.4 88.2s58.2 39.1 88.2 20.4l26.8-16.8zM298.4 49.8c9.2-5.7 19.1-10.1 29.4-13.1L348 97.5c-5.7 1.4-11.2 3.7-16.3 6.8l-12.6 7.9L298.4 49.8zm88.5 52.7l46.2-46.2c8.5 6.5 16.1 14.1 22.6 22.6l-46.2 46.2c-5.1-9.6-13-17.5-22.6-22.6zm28.9 59.3l61.6 20.5c-2.2 10.5-5.8 20.7-10.5 30.2l-62-20.7c6.2-8.8 10.1-19.1 11-30.1zm-86.1 82.5l60.4 37.7-30.2 18.9-60.4-37.7 30.2-18.9zm-107.2 67l60.4 37.7-30.2 18.9-60.4-37.7 30.2-18.9zM119.3 375.7l60.4 37.7-30.2 18.9L89.1 394.6l30.2-18.9z',
    ],
  };
  var faArrowDownWideShort = {
    prefix: 'fas',
    iconName: 'arrow-down-wide-short',
    icon: [
      576,
      512,
      ['sort-amount-asc', 'sort-amount-down'],
      'f160',
      'M151.6 469.6C145.5 476.2 137 480 128 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L96 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 480c-17.7 0-32-14.3-32-32s14.3-32 32-32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H320z',
    ],
  };
  var faSortAmountAsc = faArrowDownWideShort;
  var faSortAmountDown = faArrowDownWideShort;
  var faCloudBolt = {
    prefix: 'fas',
    iconName: 'cloud-bolt',
    icon: [
      512,
      512,
      [127785, 'thunderstorm'],
      'f76c',
      'M0 224c0 53 43 96 96 96h47.2L290 202.5c17.6-14.1 42.6-14 60.2 .2s22.8 38.6 12.8 58.8L333.7 320H352h64c53 0 96-43 96-96s-43-96-96-96c-.5 0-1.1 0-1.6 0c1.1-5.2 1.6-10.5 1.6-16c0-44.2-35.8-80-80-80c-24.3 0-46.1 10.9-60.8 28C256.5 24.3 219.1 0 176 0C114.1 0 64 50.1 64 112c0 7.1 .7 14.1 1.9 20.8C27.6 145.4 0 181.5 0 224zm330.1 3.6c-5.8-4.7-14.2-4.7-20.1-.1l-160 128c-5.3 4.2-7.4 11.4-5.1 17.8s8.3 10.7 15.1 10.7h70.1L177.7 488.8c-3.4 6.7-1.6 14.9 4.3 19.6s14.2 4.7 20.1 .1l160-128c5.3-4.2 7.4-11.4 5.1-17.8s-8.3-10.7-15.1-10.7H281.9l52.4-104.8c3.4-6.7 1.6-14.9-4.2-19.6z',
    ],
  };
  var faThunderstorm = faCloudBolt;
  var faTextSlash = {
    prefix: 'fas',
    iconName: 'text-slash',
    icon: [
      640,
      512,
      ['remove-format'],
      'f87d',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L355.7 253.5 400.2 96H503L497 120.2c-4.3 17.1 6.1 34.5 23.3 38.8s34.5-6.1 38.8-23.3l16-64c2.4-9.6 .2-19.7-5.8-27.5S553.9 32 544 32H376.1h-.3H192c-14.7 0-27.5 10-31 24.2l-9.3 37.3L38.8 5.1zm168 131.7c.1-.3 .2-.7 .3-1L217 96H333.7L301.3 210.8l-94.5-74.1zM243.3 416H192c-17.7 0-32 14.3-32 32s14.3 32 32 32H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H309.8l17.6-62.1L272.9 311 243.3 416z',
    ],
  };
  var faRemoveFormat = faTextSlash;
  var faFaceSmileWink = {
    prefix: 'fas',
    iconName: 'face-smile-wink',
    icon: [
      512,
      512,
      [128521, 'smile-wink'],
      'f4da',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM164.1 325.5C182 346.2 212.6 368 256 368s74-21.8 91.9-42.5c5.8-6.7 15.9-7.4 22.6-1.6s7.4 15.9 1.6 22.6C349.8 372.1 311.1 400 256 400s-93.8-27.9-116.1-53.5c-5.8-6.7-5.1-16.8 1.6-22.6s16.8-5.1 22.6 1.6zM208.4 208c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm92.4 25.6c-5.3 7.1-15.3 8.5-22.4 3.2s-8.5-15.3-3.2-22.4c30.4-40.5 91.2-40.5 121.6 0c5.3 7.1 3.9 17.1-3.2 22.4s-17.1 3.9-22.4-3.2c-17.6-23.5-52.8-23.5-70.4 0z',
    ],
  };
  var faSmileWink = faFaceSmileWink;
  var faFileWord = {
    prefix: 'fas',
    iconName: 'file-word',
    icon: [
      384,
      512,
      [],
      'f1c2',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM111 257.1l26.8 89.2 31.6-90.3c3.4-9.6 12.5-16.1 22.7-16.1s19.3 6.4 22.7 16.1l31.6 90.3L273 257.1c3.8-12.7 17.2-19.9 29.9-16.1s19.9 17.2 16.1 29.9l-48 160c-3 10-12.1 16.9-22.4 17.1s-19.8-6.2-23.2-16.1L192 336.6l-33.3 95.3c-3.4 9.8-12.8 16.3-23.2 16.1s-19.5-7.1-22.4-17.1l-48-160c-3.8-12.7 3.4-26.1 16.1-29.9s26.1 3.4 29.9 16.1z',
    ],
  };
  var faFilePowerpoint = {
    prefix: 'fas',
    iconName: 'file-powerpoint',
    icon: [
      384,
      512,
      [],
      'f1c4',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM136 240h68c42 0 76 34 76 76s-34 76-76 76H160v32c0 13.3-10.7 24-24 24s-24-10.7-24-24V368 264c0-13.3 10.7-24 24-24zm68 104c15.5 0 28-12.5 28-28s-12.5-28-28-28H160v56h44z',
    ],
  };
  var faArrowsLeftRight = {
    prefix: 'fas',
    iconName: 'arrows-left-right',
    icon: [
      512,
      512,
      ['arrows-h'],
      'f07e',
      'M406.6 374.6l96-96c12.5-12.5 12.5-32.8 0-45.3l-96-96c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224l-293.5 0 41.4-41.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-96 96c-12.5 12.5-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 288l293.5 0-41.4 41.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0z',
    ],
  };
  var faArrowsH = faArrowsLeftRight;
  var faHouseLock = {
    prefix: 'fas',
    iconName: 'house-lock',
    icon: [
      640,
      512,
      [],
      'e510',
      'M384 480c0 11.7 3.1 22.6 8.6 32H384c-17.7 0-32-14.3-32-32V383.7c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32V480c0 17.7-14.3 32-32 32H96.1c-17.7 0-32-14.3-32-32V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L490.7 166.3C447.2 181.7 416 223.2 416 272v24.6c-19.1 11.1-32 31.7-32 55.4V480zM528 240c-17.7 0-32 14.3-32 32v48h64V272c0-17.7-14.3-32-32-32zm-80 32c0-44.2 35.8-80 80-80s80 35.8 80 80v48c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H448c-17.7 0-32-14.3-32-32V352c0-17.7 14.3-32 32-32V272z',
    ],
  };
  var faCloudArrowDown = {
    prefix: 'fas',
    iconName: 'cloud-arrow-down',
    icon: [
      640,
      512,
      [62337, 'cloud-download', 'cloud-download-alt'],
      'f0ed',
      'M144 480C64.5 480 0 415.5 0 336c0-62.8 40.2-116.2 96.2-135.9c-.1-2.7-.2-5.4-.2-8.1c0-88.4 71.6-160 160-160c59.3 0 111 32.2 138.7 80.2C409.9 102 428.3 96 448 96c53 0 96 43 96 96c0 12.2-2.3 23.8-6.4 34.6C596 238.4 640 290.1 640 352c0 70.7-57.3 128-128 128H144zm79-167l80 80c9.4 9.4 24.6 9.4 33.9 0l80-80c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-39 39V184c0-13.3-10.7-24-24-24s-24 10.7-24 24V318.1l-39-39c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9z',
    ],
  };
  var faCloudDownload = faCloudArrowDown;
  var faCloudDownloadAlt = faCloudArrowDown;
  var faChildren = {
    prefix: 'fas',
    iconName: 'children',
    icon: [
      640,
      512,
      [],
      'e4e1',
      'M160 128c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM88 480V400H70.2c-10.9 0-18.6-10.7-15.2-21.1l31.1-93.4L57.5 323.3c-10.7 14.1-30.8 16.8-44.8 6.2s-16.8-30.7-6.2-44.8L65.4 207c22.4-29.6 57.5-47 94.6-47s72.2 17.4 94.6 47l58.9 77.7c10.7 14.1 7.9 34.2-6.2 44.8s-34.2 7.9-44.8-6.2l-28.6-37.8L265 378.9c3.5 10.4-4.3 21.1-15.2 21.1H232v80c0 17.7-14.3 32-32 32s-32-14.3-32-32V400H152v80c0 17.7-14.3 32-32 32s-32-14.3-32-32zM480 128c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm-8 256v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V300.5L395.1 321c-9.4 15-29.2 19.4-44.1 10s-19.4-29.2-10-44.1l51.7-82.1c17.6-27.9 48.3-44.9 81.2-44.9h12.3c33 0 63.7 16.9 81.2 44.9L619.1 287c9.4 15 4.9 34.7-10 44.1s-34.7 4.9-44.1-10L552 300.5V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V384H472z',
    ],
  };
  var faChalkboard = {
    prefix: 'fas',
    iconName: 'chalkboard',
    icon: [
      576,
      512,
      ['blackboard'],
      'f51b',
      'M96 32C60.7 32 32 60.7 32 96V384H96V96l384 0V384h64V96c0-35.3-28.7-64-64-64H96zM224 384v32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H416V384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faBlackboard = faChalkboard;
  var faUserLargeSlash = {
    prefix: 'fas',
    iconName: 'user-large-slash',
    icon: [
      640,
      512,
      ['user-alt-slash'],
      'f4fa',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L381.9 274c48.5-23.2 82.1-72.7 82.1-130C464 64.5 399.5 0 320 0C250.4 0 192.4 49.3 178.9 114.9L38.8 5.1zM284.3 320h-59C136.2 320 64 392.2 64 481.3c0 17 13.8 30.7 30.7 30.7H528L284.3 320z',
    ],
  };
  var faUserAltSlash = faUserLargeSlash;
  var faEnvelopeOpen = {
    prefix: 'fas',
    iconName: 'envelope-open',
    icon: [
      512,
      512,
      [62135],
      'f2b6',
      'M64 208.1L256 65.9 448 208.1v47.4L289.5 373c-9.7 7.2-21.4 11-33.5 11s-23.8-3.9-33.5-11L64 255.5V208.1zM256 0c-12.1 0-23.8 3.9-33.5 11L25.9 156.7C9.6 168.8 0 187.8 0 208.1V448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V208.1c0-20.3-9.6-39.4-25.9-51.4L289.5 11C279.8 3.9 268.1 0 256 0z',
    ],
  };
  var faHandshakeSimpleSlash = {
    prefix: 'fas',
    iconName: 'handshake-simple-slash',
    icon: [
      640,
      512,
      ['handshake-alt-slash'],
      'e05f',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-135-105.8c-1.1-11.4-6.3-22.3-15.3-30.7l-134.2-123-23.4 18.2-26-20.3 77.2-60.1c7-5.4 17-4.2 22.5 2.8s4.2 17-2.8 22.5l-20.9 16.2L550.2 352H592c26.5 0 48-21.5 48-48V176c0-26.5-21.5-48-48-48H516h-4-.7l-3.9-2.5L434.8 79c-15.3-9.8-33.2-15-51.4-15c-21.8 0-43 7.5-60 21.2l-89.7 72.6-25.8-20.3 81.8-66.2c-11.6-4.9-24.1-7.4-36.8-7.4C234 64 215.7 69.6 200 80l-35.5 23.7L38.8 5.1zM0 176V304c0 26.5 21.5 48 48 48H156.2l91.4 83.4c19.6 17.9 49.9 16.5 67.8-3.1c5.5-6.1 9.2-13.2 11.1-20.6l17 15.6c19.5 17.9 49.9 16.6 67.8-2.9c.8-.8 1.5-1.7 2.2-2.6L41.2 128.5C17.9 131.8 0 151.8 0 176z',
    ],
  };
  var faHandshakeAltSlash = faHandshakeSimpleSlash;
  var faMattressPillow = {
    prefix: 'fas',
    iconName: 'mattress-pillow',
    icon: [
      640,
      512,
      [],
      'e525',
      'M256 64H64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H256V64zm32 384H576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H288V448zM64 160c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V160z',
    ],
  };
  var faGuaraniSign = {
    prefix: 'fas',
    iconName: 'guarani-sign',
    icon: [
      384,
      512,
      [],
      'e19a',
      'M192 0c-17.7 0-32 14.3-32 32V66.7C69.2 81.9 0 160.9 0 256s69.2 174.1 160 189.3V480c0 17.7 14.3 32 32 32s32-14.3 32-32V445.3c90.8-15.2 160-94.2 160-189.3c0-17.7-14.3-32-32-32H224V132c22.1 5.7 41.8 17.1 57.6 32.6c12.6 12.4 32.9 12.2 45.3-.4s12.2-32.9-.5-45.3C299 92 263.5 73.3 224 66.7V32c0-17.7-14.3-32-32-32zM160 132V380c-55.2-14.2-96-64.3-96-124s40.8-109.8 96-124zM224 380V288h92c-11.6 45-47 80.4-92 92z',
    ],
  };
  var faArrowsRotate = {
    prefix: 'fas',
    iconName: 'arrows-rotate',
    icon: [
      512,
      512,
      [128472, 'refresh', 'sync'],
      'f021',
      'M105.1 202.6c7.7-21.8 20.2-42.3 37.8-59.8c62.5-62.5 163.8-62.5 226.3 0L386.3 160H336c-17.7 0-32 14.3-32 32s14.3 32 32 32H463.5c0 0 0 0 0 0h.4c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32s-32 14.3-32 32v51.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0C73.2 122 55.6 150.7 44.8 181.4c-5.9 16.7 2.9 34.9 19.5 40.8s34.9-2.9 40.8-19.5zM39 289.3c-5 1.5-9.8 4.2-13.7 8.2c-4 4-6.7 8.8-8.1 14c-.3 1.2-.6 2.5-.8 3.8c-.3 1.7-.4 3.4-.4 5.1V448c0 17.7 14.3 32 32 32s32-14.3 32-32V396.9l17.6 17.5 0 0c87.5 87.4 229.3 87.4 316.7 0c24.4-24.4 42.1-53.1 52.9-83.7c5.9-16.7-2.9-34.9-19.5-40.8s-34.9 2.9-40.8 19.5c-7.7 21.8-20.2 42.3-37.8 59.8c-62.5 62.5-163.8 62.5-226.3 0l-.1-.1L125.6 352H176c17.7 0 32-14.3 32-32s-14.3-32-32-32H48.4c-1.6 0-3.2 .1-4.8 .3s-3.1 .5-4.6 1z',
    ],
  };
  var faRefresh = faArrowsRotate;
  var faSync = faArrowsRotate;
  var faFireExtinguisher = {
    prefix: 'fas',
    iconName: 'fire-extinguisher',
    icon: [
      512,
      512,
      [129519],
      'f134',
      'M500.3 7.3C507.7 13.3 512 22.4 512 32v96c0 9.6-4.3 18.7-11.7 24.7s-17.2 8.5-26.6 6.6l-160-32C301.5 124.9 292 115.7 289 104H224v34.8c37.8 18 64 56.5 64 101.2V384H64V240c0-44.7 26.2-83.2 64-101.2V110c-36.2 11.1-66 36.9-82.3 70.5c-5.8 11.9-20.2 16.9-32.1 11.1S-3.3 171.4 2.5 159.5C26.7 109.8 72.7 72.6 128 60.4V32c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V56h65c3-11.7 12.5-20.9 24.7-23.4l160-32c9.4-1.9 19.1 .6 26.6 6.6zM288 416v32c0 35.3-28.7 64-64 64H128c-35.3 0-64-28.7-64-64V416H288zM176 96c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faCruzeiroSign = {
    prefix: 'fas',
    iconName: 'cruzeiro-sign',
    icon: [
      448,
      512,
      [],
      'e152',
      'M96 256c0-88.4 71.6-160 160-160c41 0 78.3 15.4 106.7 40.7c13.2 11.8 33.4 10.7 45.2-2.5s10.7-33.4-2.5-45.2c-39.6-35.5-92-57-149.3-57C132.3 32 32 132.3 32 256s100.3 224 224 224c57.4 0 109.7-21.6 149.3-57c13.2-11.8 14.3-32 2.5-45.2s-32-14.3-45.2-2.5C334.3 400.6 297 416 256 416V320v-8.7c0-12.8 10.4-23.3 23.3-23.3c4.6 0 9.1 1.4 12.9 3.9l10.1 6.7c14.7 9.8 34.6 5.8 44.4-8.9s5.8-34.6-8.9-44.4l-10.1-6.7c-14.3-9.6-31.2-14.7-48.4-14.7c-12.4 0-24.2 2.6-34.9 7.3c-5.5-4.5-12.6-7.3-20.3-7.3c-17.7 0-32 14.3-32 32v55.3V320v82.7C135.5 378 96 321.6 96 256z',
    ],
  };
  var faGreaterThanEqual = {
    prefix: 'fas',
    iconName: 'greater-than-equal',
    icon: [
      448,
      512,
      [],
      'f532',
      'M52.1 93.7C35.7 87.1 27.7 68.5 34.3 52.1s25.2-24.4 41.6-17.8l320 128C408 167.1 416 178.9 416 192s-8 24.9-20.1 29.7l-320 128c-16.4 6.6-35-1.4-41.6-17.8s1.4-35 17.8-41.6L297.8 192 52.1 93.7zM416 416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416z',
    ],
  };
  var faShieldHalved = {
    prefix: 'fas',
    iconName: 'shield-halved',
    icon: [
      512,
      512,
      ['shield-alt'],
      'f3ed',
      'M256 0c4.6 0 9.2 1 13.4 2.9L457.7 82.8c22 9.3 38.4 31 38.3 57.2c-.5 99.2-41.3 280.7-213.7 363.2c-16.7 8-36.1 8-52.8 0C57.3 420.7 16.5 239.2 16 140c-.1-26.2 16.3-47.9 38.3-57.2L242.7 2.9C246.8 1 251.4 0 256 0zm0 66.8V444.8C394 378 431.1 230.1 432 141.4L256 66.8l0 0z',
    ],
  };
  var faShieldAlt = faShieldHalved;
  var faBookAtlas = {
    prefix: 'fas',
    iconName: 'book-atlas',
    icon: [
      448,
      512,
      ['atlas'],
      'f558',
      'M0 96C0 43 43 0 96 0H384h32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32zM247.4 283.8c-3.7 3.7-6.2 4.2-7.4 4.2s-3.7-.5-7.4-4.2c-3.8-3.7-8-10-11.8-18.9c-6.2-14.5-10.8-34.3-12.2-56.9h63c-1.5 22.6-6 42.4-12.2 56.9c-3.8 8.9-8 15.2-11.8 18.9zm42.7-9.9c7.3-18.3 12-41.1 13.4-65.9h31.1c-4.7 27.9-21.4 51.7-44.5 65.9zm0-163.8c23.2 14.2 39.9 38 44.5 65.9H303.5c-1.4-24.7-6.1-47.5-13.4-65.9zM368 192c0-70.7-57.3-128-128-128s-128 57.3-128 128s57.3 128 128 128s128-57.3 128-128zM145.3 208h31.1c1.4 24.7 6.1 47.5 13.4 65.9c-23.2-14.2-39.9-38-44.5-65.9zm31.1-32H145.3c4.7-27.9 21.4-51.7 44.5-65.9c-7.3 18.3-12 41.1-13.4 65.9zm56.1-75.8c3.7-3.7 6.2-4.2 7.4-4.2s3.7 .5 7.4 4.2c3.8 3.7 8 10 11.8 18.9c6.2 14.5 10.8 34.3 12.2 56.9h-63c1.5-22.6 6-42.4 12.2-56.9c3.8-8.9 8-15.2 11.8-18.9z',
    ],
  };
  var faAtlas = faBookAtlas;
  var faVirus = {
    prefix: 'fas',
    iconName: 'virus',
    icon: [
      512,
      512,
      [],
      'e074',
      'M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V43.5c0 49.9-60.3 74.9-95.6 39.6L120.2 75C107.7 62.5 87.5 62.5 75 75s-12.5 32.8 0 45.3l8.2 8.2C118.4 163.7 93.4 224 43.5 224H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H43.5c49.9 0 74.9 60.3 39.6 95.6L75 391.8c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l8.2-8.2c35.3-35.3 95.6-10.3 95.6 39.6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V468.5c0-49.9 60.3-74.9 95.6-39.6l8.2 8.2c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-8.2-8.2c-35.3-35.3-10.3-95.6 39.6-95.6H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H468.5c-49.9 0-74.9-60.3-39.6-95.6l8.2-8.2c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-8.2 8.2C348.3 118.4 288 93.4 288 43.5V32zM272 224c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm32 104c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faEnvelopeCircleCheck = {
    prefix: 'fas',
    iconName: 'envelope-circle-check',
    icon: [
      640,
      512,
      [],
      'e4e8',
      'M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0l57.4-43c23.9-59.8 79.7-103.3 146.3-109.8l13.9-10.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48H48zM294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176V384c0 35.3 28.7 64 64 64H360.2C335.1 417.6 320 378.5 320 336c0-5.6 .3-11.1 .8-16.6l-26.4 19.8zM640 336c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 353.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faLayerGroup = {
    prefix: 'fas',
    iconName: 'layer-group',
    icon: [
      576,
      512,
      [],
      'f5fd',
      'M264.5 5.2c14.9-6.9 32.1-6.9 47 0l218.6 101c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 149.8C37.4 145.8 32 137.3 32 128s5.4-17.9 13.9-21.8L264.5 5.2zM476.9 209.6l53.2 24.6c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 277.8C37.4 273.8 32 265.3 32 256s5.4-17.9 13.9-21.8l53.2-24.6 152 70.2c23.4 10.8 50.4 10.8 73.8 0l152-70.2zm-152 198.2l152-70.2 53.2 24.6c8.5 3.9 13.9 12.4 13.9 21.8s-5.4 17.9-13.9 21.8l-218.6 101c-14.9 6.9-32.1 6.9-47 0L45.9 405.8C37.4 401.8 32 393.3 32 384s5.4-17.9 13.9-21.8l53.2-24.6 152 70.2c23.4 10.8 50.4 10.8 73.8 0z',
    ],
  };
  var faArrowsToDot = {
    prefix: 'fas',
    iconName: 'arrows-to-dot',
    icon: [
      512,
      512,
      [],
      'e4be',
      'M256 0c17.7 0 32 14.3 32 32V64h32c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-64 64c-12.5 12.5-32.8 12.5-45.3 0l-64-64c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8h32V32c0-17.7 14.3-32 32-32zM169.4 393.4l64-64c12.5-12.5 32.8-12.5 45.3 0l64 64c9.2 9.2 11.9 22.9 6.9 34.9s-16.6 19.8-29.6 19.8H288v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H192c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9zM32 224H64V192c0-12.9 7.8-24.6 19.8-29.6s25.7-2.2 34.9 6.9l64 64c12.5 12.5 12.5 32.8 0 45.3l-64 64c-9.2 9.2-22.9 11.9-34.9 6.9s-19.8-16.6-19.8-29.6V288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm297.4 54.6c-12.5-12.5-12.5-32.8 0-45.3l64-64c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6v32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H448v32c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-64-64zM256 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faArchway = {
    prefix: 'fas',
    iconName: 'archway',
    icon: [
      512,
      512,
      [],
      'f557',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zm0 384c-17.7 0-32 14.3-32 32s14.3 32 32 32H96h64V352c0-53 43-96 96-96s96 43 96 96V480h64 64c17.7 0 32-14.3 32-32s-14.3-32-32-32V128H32V416z',
    ],
  };
  var faHeartCircleCheck = {
    prefix: 'fas',
    iconName: 'heart-circle-check',
    icon: [
      576,
      512,
      [],
      'e4fd',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM576 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L416 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faHouseChimneyCrack = {
    prefix: 'fas',
    iconName: 'house-chimney-crack',
    icon: [
      576,
      512,
      ['house-damage'],
      'f6f1',
      'M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c.2 35.5-28.5 64.3-64 64.3H326.4L288 448l80.8-67.3c7.8-6.5 7.6-18.6-.4-24.9L250.6 263.2c-14.6-11.5-33.8 7-22.8 22L288 368l-85.5 71.2c-6.1 5-7.5 13.8-3.5 20.5L230.4 512H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L416 100.7V64c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V185l52.8 46.4c8 7 12 15 11 24z',
    ],
  };
  var faHouseDamage = faHouseChimneyCrack;
  var faFileZipper = {
    prefix: 'fas',
    iconName: 'file-zipper',
    icon: [
      384,
      512,
      ['file-archive'],
      'f1c6',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM96 48c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm-6.3 71.8c3.7-14 16.4-23.8 30.9-23.8h14.8c14.5 0 27.2 9.7 30.9 23.8l23.5 88.2c1.4 5.4 2.1 10.9 2.1 16.4c0 35.2-28.8 63.7-64 63.7s-64-28.5-64-63.7c0-5.5 .7-11.1 2.1-16.4l23.5-88.2zM112 336c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H112z',
    ],
  };
  var faFileArchive = faFileZipper;
  var faSquare = {
    prefix: 'fas',
    iconName: 'square',
    icon: [
      448,
      512,
      [9632, 9723, 9724, 61590],
      'f0c8',
      'M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96z',
    ],
  };
  var faMartiniGlassEmpty = {
    prefix: 'fas',
    iconName: 'martini-glass-empty',
    icon: [
      512,
      512,
      ['glass-martini'],
      'f000',
      'M32 0C19.1 0 7.4 7.8 2.4 19.8s-2.2 25.7 6.9 34.9L224 269.3V448H160c-17.7 0-32 14.3-32 32s14.3 32 32 32h96 96c17.7 0 32-14.3 32-32s-14.3-32-32-32H288V269.3L502.6 54.6c9.2-9.2 11.9-22.9 6.9-34.9S492.9 0 480 0H32zM256 210.7L109.3 64H402.7L256 210.7z',
    ],
  };
  var faGlassMartini = faMartiniGlassEmpty;
  var faCouch = {
    prefix: 'fas',
    iconName: 'couch',
    icon: [
      640,
      512,
      [],
      'f4b8',
      'M64 160C64 89.3 121.3 32 192 32H448c70.7 0 128 57.3 128 128v33.6c-36.5 7.4-64 39.7-64 78.4v48H128V272c0-38.7-27.5-71-64-78.4V160zM544 272c0-20.9 13.4-38.7 32-45.3c5-1.8 10.4-2.7 16-2.7c26.5 0 48 21.5 48 48V448c0 17.7-14.3 32-32 32H576c-17.7 0-32-14.3-32-32H96c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V272c0-26.5 21.5-48 48-48c5.6 0 11 1 16 2.7c18.6 6.6 32 24.4 32 45.3v48 32h32H512h32V320 272z',
    ],
  };
  var faCediSign = {
    prefix: 'fas',
    iconName: 'cedi-sign',
    icon: [
      384,
      512,
      [],
      'e0df',
      'M256 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V66.7C101.2 81.9 32 160.9 32 256s69.2 174.1 160 189.3V480c0 17.7 14.3 32 32 32s32-14.3 32-32V445.3c30.9-5.2 59.2-17.7 83.2-35.8c14.1-10.6 17-30.7 6.4-44.8s-30.7-17-44.8-6.4c-13.2 9.9-28.3 17.3-44.8 21.6V132c16.4 4.2 31.6 11.6 44.8 21.6c14.1 10.6 34.2 7.8 44.8-6.4s7.8-34.2-6.4-44.8c-24-18-52.4-30.6-83.2-35.8V32zM192 132V380c-55.2-14.2-96-64.3-96-124s40.8-109.8 96-124z',
    ],
  };
  var faItalic = {
    prefix: 'fas',
    iconName: 'italic',
    icon: [
      384,
      512,
      [],
      'f033',
      'M128 64c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H293.3L160 416h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H90.7L224 96H160c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faChurch = {
    prefix: 'fas',
    iconName: 'church',
    icon: [
      640,
      512,
      [9962],
      'f51d',
      'M344 24c0-13.3-10.7-24-24-24s-24 10.7-24 24V48H264c-13.3 0-24 10.7-24 24s10.7 24 24 24h32v46.4L183.3 210c-14.5 8.7-23.3 24.3-23.3 41.2V512h96V416c0-35.3 28.7-64 64-64s64 28.7 64 64v96h96V251.2c0-16.9-8.8-32.5-23.3-41.2L344 142.4V96h32c13.3 0 24-10.7 24-24s-10.7-24-24-24H344V24zM24.9 330.3C9.5 338.8 0 354.9 0 372.4V464c0 26.5 21.5 48 48 48h80V273.6L24.9 330.3zM592 512c26.5 0 48-21.5 48-48V372.4c0-17.5-9.5-33.6-24.9-42.1L512 273.6V512h80z',
    ],
  };
  var faCommentsDollar = {
    prefix: 'fas',
    iconName: 'comments-dollar',
    icon: [
      640,
      512,
      [],
      'f653',
      'M416 176c0 97.2-93.1 176-208 176c-38.2 0-73.9-8.7-104.7-23.9c-7.5 4-16 7.9-25.2 11.4C59.8 346.4 37.8 352 16 352c-6.9 0-13.1-4.5-15.2-11.1s.2-13.8 5.8-17.9l0 0 0 0 .2-.2c.2-.2 .6-.4 1.1-.8c1-.8 2.5-2 4.3-3.7c3.6-3.3 8.5-8.1 13.3-14.3c5.5-7 10.7-15.4 14.2-24.7C14.7 250.3 0 214.6 0 176C0 78.8 93.1 0 208 0S416 78.8 416 176zM231.5 383C348.9 372.9 448 288.3 448 176c0-5.2-.2-10.4-.6-15.5C555.1 167.1 640 243.2 640 336c0 38.6-14.7 74.3-39.6 103.4c3.5 9.4 8.7 17.7 14.2 24.7c4.8 6.2 9.7 11 13.3 14.3c1.8 1.6 3.3 2.9 4.3 3.7c.5 .4 .9 .7 1.1 .8l.2 .2 0 0 0 0c5.6 4.1 7.9 11.3 5.8 17.9c-2.1 6.6-8.3 11.1-15.2 11.1c-21.8 0-43.8-5.6-62.1-12.5c-9.2-3.5-17.8-7.4-25.2-11.4C505.9 503.3 470.2 512 432 512c-95.6 0-176.2-54.6-200.5-129zM228 72c0-11-9-20-20-20s-20 9-20 20V86c-7.6 1.7-15.2 4.4-22.2 8.5c-13.9 8.3-25.9 22.8-25.8 43.9c.1 20.3 12 33.1 24.7 40.7c11 6.6 24.7 10.8 35.6 14l1.7 .5c12.6 3.8 21.8 6.8 28 10.7c5.1 3.2 5.8 5.4 5.9 8.2c.1 5-1.8 8-5.9 10.5c-5 3.1-12.9 5-21.4 4.7c-11.1-.4-21.5-3.9-35.1-8.5c-2.3-.8-4.7-1.6-7.2-2.4c-10.5-3.5-21.8 2.2-25.3 12.6s2.2 21.8 12.6 25.3c1.9 .6 4 1.3 6.1 2.1l0 0 0 0c8.3 2.9 17.9 6.2 28.2 8.4V280c0 11 9 20 20 20s20-9 20-20V266.2c8-1.7 16-4.5 23.2-9c14.3-8.9 25.1-24.1 24.8-45c-.3-20.3-11.7-33.4-24.6-41.6c-11.5-7.2-25.9-11.6-37.1-15l-.7-.2c-12.8-3.9-21.9-6.7-28.3-10.5c-5.2-3.1-5.3-4.9-5.3-6.7c0-3.7 1.4-6.5 6.2-9.3c5.4-3.2 13.6-5.1 21.5-5c9.6 .1 20.2 2.2 31.2 5.2c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-6.5-1.7-13.7-3.4-21.1-4.7V72z',
    ],
  };
  var faDemocrat = {
    prefix: 'fas',
    iconName: 'democrat',
    icon: [
      640,
      512,
      [],
      'f747',
      'M64 32c0-8.9 3.8-20.9 6.2-27.3C71.2 1.8 74 0 77 0c1.9 0 3.8 .7 5.2 2.1L128 45.7 173.8 2.1C175.2 .7 177.1 0 179 0c3 0 5.8 1.8 6.8 4.7c2.4 6.5 6.2 18.4 6.2 27.3c0 26.5-21.9 42-29.5 46.6l76.2 72.6c6 5.7 13.9 8.8 22.1 8.8H480c61.4 0 101.6 24 126.2 50c12 12.6 19.9 25.2 24.9 34.9c2.5 4.8 4.3 9 5.5 12.1c.6 1.5 1.1 2.8 1.4 3.8c.2 .5 .3 .9 .4 1.3l.1 .5 .1 .2 0 .1 0 0c0 0 0 0-30.2 9.1l30.2-9.1c5.1 16.9-4.5 34.8-21.5 39.8c-16.8 5-34.5-4.4-39.7-21.1l0 0c-.1-.2-.2-.6-.5-1.2c-.5-1.3-1.4-3.4-2.8-6.1c-2.8-5.4-7.4-12.8-14.4-20.1c-4.2-4.4-9.4-9-15.8-13.2V320H192l-40.4-94.3c-3.9-9.2-15.3-12.6-23.6-7l-42.1 28c-9.1 6.1-19.7 9.3-30.7 9.3h-2C23.9 256 0 232.1 0 202.7c0-12.1 4.1-23.8 11.7-33.3L87.6 74.6C78.1 67.4 64 53.2 64 32zM448 352h96v64 64c0 17.7-14.3 32-32 32H480c-17.7 0-32-14.3-32-32V416H288v64c0 17.7-14.3 32-32 32H224c-17.7 0-32-14.3-32-32V416 352h96H448zm129.4-70.8c0 0 0 0 30.6-9.2l-30.6 9.2 0 0zM260.9 210.9c-.9-1.8-2.8-2.9-4.8-2.9s-3.9 1.1-4.8 2.9l-10.5 20.5-23.5 3.3c-2 .3-3.7 1.6-4.3 3.5s-.1 3.9 1.3 5.3l17 16-4 22.6c-.3 1.9 .5 3.9 2.1 5s3.8 1.3 5.6 .4l21-10.7 21 10.7c1.8 .9 4 .8 5.6-.4s2.5-3.1 2.1-5l-4-22.6 17-16c1.5-1.4 2-3.4 1.3-5.3s-2.3-3.2-4.3-3.5l-23.5-3.3-10.5-20.5zM368.1 208c-2 0-3.9 1.1-4.8 2.9l-10.5 20.5-23.5 3.3c-2 .3-3.7 1.6-4.3 3.5s-.1 3.9 1.3 5.3l17 16-4 22.6c-.3 1.9 .5 3.9 2.1 5s3.8 1.3 5.6 .4l21-10.7 21 10.7c1.8 .9 4 .8 5.6-.4s2.5-3.1 2.1-5l-4-22.6 17-16c1.5-1.4 2-3.4 1.4-5.3s-2.3-3.2-4.3-3.5l-23.5-3.3-10.5-20.5c-.9-1.8-2.8-2.9-4.8-2.9zm116.8 2.9c-.9-1.8-2.8-2.9-4.8-2.9s-3.9 1.1-4.8 2.9l-10.5 20.5-23.5 3.3c-2 .3-3.7 1.6-4.3 3.5s-.1 3.9 1.3 5.3l17 16-4 22.6c-.3 1.9 .5 3.9 2.1 5s3.8 1.3 5.6 .4l21-10.7 21 10.7c1.8 .9 4 .8 5.6-.4s2.5-3.1 2.1-5l-4-22.6 17-16c1.5-1.4 2-3.4 1.4-5.3s-2.3-3.2-4.3-3.5l-23.5-3.3-10.5-20.5z',
    ],
  };
  var faZ = {
    prefix: 'fas',
    iconName: 'z',
    icon: [
      384,
      512,
      [122],
      '5a',
      'M0 64C0 46.3 14.3 32 32 32H352c12.4 0 23.7 7.2 29 18.4s3.6 24.5-4.4 34.1L100.3 416H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-12.4 0-23.7-7.2-29-18.4s-3.6-24.5 4.4-34.1L283.7 96H32C14.3 96 0 81.7 0 64z',
    ],
  };
  var faPersonSkiing = {
    prefix: 'fas',
    iconName: 'person-skiing',
    icon: [
      576,
      512,
      [9975, 'skiing'],
      'f7c9',
      'M508.7 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM34.7 268.9c6.1-11.8 20.6-16.3 32.4-10.2L264.7 361.3l46.2-69.2-75.1-75.1c-14.6-14.6-20.4-33.9-18.4-52.1l108.8 52 39.3 39.3c16.2 16.2 18.7 41.5 6 60.6L321.8 391l128.7 66.8c13.6 7.1 29.8 7.2 43.6 .3l15.2-7.6c11.9-5.9 26.3-1.1 32.2 10.7s1.1 26.3-10.7 32.2l-15.2 7.6c-27.5 13.7-59.9 13.5-87.2-.7L44.9 301.3c-11.8-6.1-16.3-20.6-10.2-32.4zM150.9 65.6L169 74.2l8.7-17.4c4-7.9 13.6-11.1 21.5-7.2s11.1 13.6 7.2 21.5l-8.5 16.9 54.7 26.2c1.5-.7 3.1-1.4 4.7-2.1l83.4-33.4c34.2-13.7 72.8 4.2 84.5 39.2l17.1 51.2 52.1 26.1c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3l-58.1-29c-11.4-5.7-20-15.7-24.1-27.8l-5.8-17.3-27.3 12.1-6.8 3-6.7-3.2L183.5 116.7l-9.2 18.4c-4 7.9-13.6 11.1-21.5 7.2s-11.1-13.6-7.2-21.5l9-18-17.6-8.4c-8-3.8-11.3-13.4-7.5-21.3s13.4-11.3 21.3-7.5z',
    ],
  };
  var faSkiing = faPersonSkiing;
  var faRoadLock = {
    prefix: 'fas',
    iconName: 'road-lock',
    icon: [
      640,
      512,
      [],
      'e567',
      'M288 32H213.2c-27.1 0-51.3 17.1-60.3 42.6L35.1 407.2c-2.1 5.9-3.1 12-3.1 18.2C32 455.5 56.5 480 86.6 480H288V416c0-17.7 14.3-32 32-32s32 14.3 32 32v64h32V352c0-23.7 12.9-44.4 32-55.4V272c0-58.3 44.6-106.2 101.5-111.5L487.1 74.6C478 49.1 453.9 32 426.8 32H352V96c0 17.7-14.3 32-32 32s-32-14.3-32-32V32zm64 192v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V224c0-17.7 14.3-32 32-32s32 14.3 32 32zm176 16c17.7 0 32 14.3 32 32v48H496V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faA = {
    prefix: 'fas',
    iconName: 'a',
    icon: [
      448,
      512,
      [97],
      '41',
      'M253.5 51.7C248.6 39.8 236.9 32 224 32s-24.6 7.8-29.5 19.7l-120 288-40 96c-6.8 16.3 .9 35 17.2 41.8s35-.9 41.8-17.2L125.3 384H322.7l31.8 76.3c6.8 16.3 25.5 24 41.8 17.2s24-25.5 17.2-41.8l-40-96-120-288zM296 320H152l72-172.8L296 320z',
    ],
  };
  var faTemperatureArrowDown = {
    prefix: 'fas',
    iconName: 'temperature-arrow-down',
    icon: [
      512,
      512,
      ['temperature-down'],
      'e03f',
      'M96 112c0-26.5 21.5-48 48-48s48 21.5 48 48V276.5c0 17.3 7.1 31.9 15.3 42.5C217.8 332.6 224 349.5 224 368c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-18.5 6.2-35.4 16.7-48.9C88.9 308.4 96 293.8 96 276.5V112zM144 0C82.1 0 32 50.1 32 112V276.4c0 .1-.1 .3-.2 .6c-.2 .6-.8 1.6-1.7 2.8C11.2 304.2 0 334.8 0 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-33.2-11.3-63.8-30.1-88.1c-.9-1.2-1.5-2.2-1.7-2.8c-.1-.3-.2-.5-.2-.6V112C256 50.1 205.9 0 144 0zm0 416c26.5 0 48-21.5 48-48c0-20.9-13.4-38.7-32-45.3V272c0-8.8-7.2-16-16-16s-16 7.2-16 16v50.7c-18.6 6.6-32 24.4-32 45.3c0 26.5 21.5 48 48 48zm336-64H448V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V352H352c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l64 64c6 6 14.1 9.4 22.6 9.4s16.6-3.4 22.6-9.4l64-64c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8z',
    ],
  };
  var faTemperatureDown = faTemperatureArrowDown;
  var faFeatherPointed = {
    prefix: 'fas',
    iconName: 'feather-pointed',
    icon: [
      512,
      512,
      ['feather-alt'],
      'f56b',
      'M278.5 215.6L23 471c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l74.8-74.8c7.4 4.6 15.3 8.2 23.8 10.5C200.3 452.8 270 454.5 338 409.4c12.2-8.1 5.8-25.4-8.8-25.4l-16.1 0c-5.1 0-9.2-4.1-9.2-9.2c0-4.1 2.7-7.6 6.5-8.8l97.7-29.3c3.4-1 6.4-3.1 8.4-6.1c4.4-6.4 8.6-12.9 12.6-19.6c6.2-10.3-1.5-23-13.5-23l-38.6 0c-5.1 0-9.2-4.1-9.2-9.2c0-4.1 2.7-7.6 6.5-8.8l80.9-24.3c4.6-1.4 8.4-4.8 10.2-9.3C494.5 163 507.8 86.1 511.9 36.8c.8-9.9-3-19.6-10-26.6s-16.7-10.8-26.6-10C391.5 7 228.5 40.5 137.4 131.6C57.3 211.7 56.7 302.3 71.3 356.4c2.1 7.9 12 9.6 17.8 3.8L253.6 195.8c6.2-6.2 16.4-6.2 22.6 0c5.4 5.4 6.1 13.6 2.2 19.8z',
    ],
  };
  var faFeatherAlt = faFeatherPointed;
  var faP = {
    prefix: 'fas',
    iconName: 'p',
    icon: [
      320,
      512,
      [112],
      '50',
      'M32 32H64h96c88.4 0 160 71.6 160 160s-71.6 160-160 160H64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352 320 288 64C0 46.3 14.3 32 32 32zM64 288h96c53 0 96-43 96-96s-43-96-96-96H64V288z',
    ],
  };
  var faSnowflake = {
    prefix: 'fas',
    iconName: 'snowflake',
    icon: [
      448,
      512,
      [10052, 10054],
      'f2dc',
      'M224 0c17.7 0 32 14.3 32 32V62.1l15-15c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-49 49v70.3l61.4-35.8 17.7-66.1c3.4-12.8 16.6-20.4 29.4-17s20.4 16.6 17 29.4l-5.2 19.3 23.6-13.8c15.3-8.9 34.9-3.7 43.8 11.5s3.7 34.9-11.5 43.8l-25.3 14.8 21.7 5.8c12.8 3.4 20.4 16.6 17 29.4s-16.6 20.4-29.4 17l-67.7-18.1L287.5 256l60.9 35.5 67.7-18.1c12.8-3.4 26 4.2 29.4 17s-4.2 26-17 29.4l-21.7 5.8 25.3 14.8c15.3 8.9 20.4 28.5 11.5 43.8s-28.5 20.4-43.8 11.5l-23.6-13.8 5.2 19.3c3.4 12.8-4.2 26-17 29.4s-26-4.2-29.4-17l-17.7-66.1L256 311.7v70.3l49 49c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-15-15V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V449.9l-15 15c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l49-49V311.7l-61.4 35.8-17.7 66.1c-3.4 12.8-16.6 20.4-29.4 17s-20.4-16.6-17-29.4l5.2-19.3L48.1 395.6c-15.3 8.9-34.9 3.7-43.8-11.5s-3.7-34.9 11.5-43.8l25.3-14.8-21.7-5.8c-12.8-3.4-20.4-16.6-17-29.4s16.6-20.4 29.4-17l67.7 18.1L160.5 256 99.6 220.5 31.9 238.6c-12.8 3.4-26-4.2-29.4-17s4.2-26 17-29.4l21.7-5.8L15.9 171.6C.6 162.7-4.5 143.1 4.4 127.9s28.5-20.4 43.8-11.5l23.6 13.8-5.2-19.3c-3.4-12.8 4.2-26 17-29.4s26 4.2 29.4 17l17.7 66.1L192 200.3V129.9L143 81c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l15 15V32c0-17.7 14.3-32 32-32z',
    ],
  };
  var faNewspaper = {
    prefix: 'fas',
    iconName: 'newspaper',
    icon: [
      512,
      512,
      [128240],
      'f1ea',
      'M96 96c0-35.3 28.7-64 64-64H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H80c-44.2 0-80-35.8-80-80V128c0-17.7 14.3-32 32-32s32 14.3 32 32V400c0 8.8 7.2 16 16 16s16-7.2 16-16V96zm64 24v80c0 13.3 10.7 24 24 24H424c13.3 0 24-10.7 24-24V120c0-13.3-10.7-24-24-24H184c-13.3 0-24 10.7-24 24zm0 184c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm160 0c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H336c-8.8 0-16 7.2-16 16zM160 400c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zm160 0c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H336c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faRectangleAd = {
    prefix: 'fas',
    iconName: 'rectangle-ad',
    icon: [
      576,
      512,
      ['ad'],
      'f641',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM229.5 173.3l72 144c5.9 11.9 1.1 26.3-10.7 32.2s-26.3 1.1-32.2-10.7L253.2 328H162.8l-5.4 10.7c-5.9 11.9-20.3 16.7-32.2 10.7s-16.7-20.3-10.7-32.2l72-144c4.1-8.1 12.4-13.3 21.5-13.3s17.4 5.1 21.5 13.3zM208 237.7L186.8 280h42.3L208 237.7zM392 256c-13.3 0-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24s-10.7-24-24-24zm24-43.9V184c0-13.3 10.7-24 24-24s24 10.7 24 24v96 48c0 13.3-10.7 24-24 24c-6.6 0-12.6-2.7-17-7c-9.4 4.5-19.9 7-31 7c-39.8 0-72-32.2-72-72s32.2-72 72-72c8.4 0 16.5 1.4 24 4.1z',
    ],
  };
  var faAd = faRectangleAd;
  var faCircleArrowRight = {
    prefix: 'fas',
    iconName: 'circle-arrow-right',
    icon: [
      512,
      512,
      ['arrow-circle-right'],
      'f0a9',
      'M0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0S0 114.6 0 256zM297 385c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l71-71L120 280c-13.3 0-24-10.7-24-24s10.7-24 24-24l214.1 0-71-71c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L409 239c9.4 9.4 9.4 24.6 0 33.9L297 385z',
    ],
  };
  var faArrowCircleRight = faCircleArrowRight;
  var faFilterCircleXmark = {
    prefix: 'fas',
    iconName: 'filter-circle-xmark',
    icon: [
      576,
      512,
      [],
      'e17b',
      'M3.9 22.9C10.5 8.9 24.5 0 40 0H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L396.4 195.6C316.2 212.1 256 283 256 368c0 27.4 6.3 53.4 17.5 76.5c-1.6-.8-3.2-1.8-4.7-2.9l-64-48c-8.1-6-12.8-15.5-12.8-25.6V288.9L9 65.3C-.7 53.4-2.8 36.8 3.9 22.9zM432 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm59.3-180.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z',
    ],
  };
  var faLocust = {
    prefix: 'fas',
    iconName: 'locust',
    icon: [
      640,
      512,
      [],
      'e520',
      'M344 32c-13.3 0-24 10.7-24 24s10.7 24 24 24h16c98.7 0 180.6 71.4 197 165.4c-9-3.5-18.8-5.4-29-5.4H463.8l-41.8-97.5c-3.4-7.9-10.8-13.4-19.3-14.4s-17 2.7-22.1 9.6l-40.9 55.5-21.7-50.7c-3.3-7.8-10.5-13.2-18.9-14.3s-16.7 2.3-22 8.9l-240 304c-8.2 10.4-6.4 25.5 4 33.7s25.5 6.4 33.7-4l79.4-100.5 43 16.4-40.5 55c-7.9 10.7-5.6 25.7 5.1 33.6s25.7 5.6 33.6-5.1L247.1 400h74.5l-29.3 42.3c-7.5 10.9-4.8 25.8 6.1 33.4s25.8 4.8 33.4-6.1L380 400h80.4l38.8 67.9c6.6 11.5 21.2 15.5 32.7 8.9s15.5-21.2 8.9-32.7L515.6 400H528c44.1 0 79.8-35.7 80-79.7c0-.1 0-.2 0-.3V280C608 143 497 32 360 32H344zm50.5 168l17.1 40H365l29.5-40zm-87.7 38.1l-1.4 1.9H257.1l32.7-41.5 16.9 39.5zM120.8 240C89.4 240 64 265.4 64 296.8c0 15.5 6.3 30 16.9 40.4L158.7 240H120.8zM528 320c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faSort = {
    prefix: 'fas',
    iconName: 'sort',
    icon: [
      320,
      512,
      ['unsorted'],
      'f0dc',
      'M137.4 41.4c12.5-12.5 32.8-12.5 45.3 0l128 128c9.2 9.2 11.9 22.9 6.9 34.9s-16.6 19.8-29.6 19.8H32c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9l128-128zm0 429.3l-128-128c-9.2-9.2-11.9-22.9-6.9-34.9s16.6-19.8 29.6-19.8H288c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9l-128 128c-12.5 12.5-32.8 12.5-45.3 0z',
    ],
  };
  var faUnsorted = faSort;
  var faListOl = {
    prefix: 'fas',
    iconName: 'list-ol',
    icon: [
      512,
      512,
      ['list-1-2', 'list-numeric'],
      'f0cb',
      'M24 56c0-13.3 10.7-24 24-24H80c13.3 0 24 10.7 24 24V176h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H40c-13.3 0-24-10.7-24-24s10.7-24 24-24H56V80H48C34.7 80 24 69.3 24 56zM86.7 341.2c-6.5-7.4-18.3-6.9-24 1.2L51.5 357.9c-7.7 10.8-22.7 13.3-33.5 5.6s-13.3-22.7-5.6-33.5l11.1-15.6c23.7-33.2 72.3-35.6 99.2-4.9c21.3 24.4 20.8 60.9-1.1 84.7L86.8 432H120c13.3 0 24 10.7 24 24s-10.7 24-24 24H32c-9.5 0-18.2-5.6-22-14.4s-2.1-18.9 4.3-25.9l72-78c5.3-5.8 5.4-14.6 .3-20.5zM224 64H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 160H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 160H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faList12 = faListOl;
  var faListNumeric = faListOl;
  var faPersonDressBurst = {
    prefix: 'fas',
    iconName: 'person-dress-burst',
    icon: [
      640,
      512,
      [],
      'e544',
      'M528 48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM390.2 384H408v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h16v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h17.8c10.9 0 18.6-10.7 15.2-21.1L546.7 248.1l33.9 56.3c9.1 15.1 28.8 20 43.9 10.9s20-28.8 10.9-43.9l-53.6-89.2c-20.2-33.7-56.7-54.3-96-54.3H474.2c-39.3 0-75.7 20.6-96 54.3l-53.6 89.2c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9l33.9-56.3L375 362.9c-3.5 10.4 4.3 21.1 15.2 21.1zM190.9 18.1C188.4 12 182.6 8 176 8s-12.4 4-14.9 10.1l-29.4 74L55.6 68.9c-6.3-1.9-13.1 .2-17.2 5.3s-4.6 12.2-1.4 17.9l39.5 69.1L10.9 206.4c-5.4 3.7-8 10.3-6.5 16.7s6.7 11.2 13.1 12.2l78.7 12.2L90.6 327c-.5 6.5 3.1 12.7 9 15.5s12.9 1.8 17.8-2.6L176 286.1l58.6 53.9c4.8 4.4 11.9 5.5 17.8 2.6s9.5-9 9-15.5l-5.6-79.4 50.5-7.8 24.4-40.5-55.2-38L315 92.2c3.3-5.7 2.7-12.8-1.4-17.9s-10.9-7.2-17.2-5.3L220.3 92.1l-29.4-74z',
    ],
  };
  var faMoneyCheckDollar = {
    prefix: 'fas',
    iconName: 'money-check-dollar',
    icon: [
      576,
      512,
      ['money-check-alt'],
      'f53d',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zM272 192H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H272c-8.8 0-16-7.2-16-16s7.2-16 16-16zM256 304c0-8.8 7.2-16 16-16H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H272c-8.8 0-16-7.2-16-16zM164.1 160v6.3c6.6 1.2 16.6 3.2 21 4.4c10.7 2.8 17 13.8 14.2 24.5s-13.8 17-24.5 14.2c-3.8-1-17.4-3.7-21.7-4.3c-12.2-1.9-22.2-.3-28.6 2.6c-6.3 2.9-7.9 6.2-8.2 8.1c-.6 3.4 0 4.7 .1 5c.3 .5 1 1.8 3.6 3.5c6.1 4.2 15.7 7.2 29.9 11.4l.8 .2c12.1 3.7 28.3 8.5 40.4 17.4c6.7 4.9 13 11.4 16.9 20.5c4 9.1 4.8 19.1 3 29.4c-3.3 19-15.9 32-31.6 38.7c-4.9 2.1-10 3.6-15.4 4.6V352c0 11.1-9 20.1-20.1 20.1s-20.1-9-20.1-20.1v-6.4c-9.5-2.2-21.9-6.4-29.8-9.1c-1.7-.6-3.2-1.1-4.4-1.5c-10.5-3.5-16.1-14.8-12.7-25.3s14.8-16.1 25.3-12.7c2 .7 4.1 1.4 6.4 2.1l0 0 0 0c9.5 3.2 20.2 6.9 26.2 7.9c12.8 2 22.7 .7 28.8-1.9c5.5-2.3 7.4-5.3 8-8.8c.7-4 .1-5.9-.2-6.7c-.4-.9-1.3-2.2-3.7-4c-5.9-4.3-15.3-7.5-29.3-11.7l-2.2-.7c-11.7-3.5-27-8.1-38.6-16c-6.6-4.5-13.2-10.7-17.3-19.5c-4.2-9-5.2-18.8-3.4-29c3.2-18.3 16.2-30.9 31.1-37.7c5-2.3 10.3-4 15.9-5.1v-6c0-11.1 9-20.1 20.1-20.1s20.1 9 20.1 20.1z',
    ],
  };
  var faMoneyCheckAlt = faMoneyCheckDollar;
  var faVectorSquare = {
    prefix: 'fas',
    iconName: 'vector-square',
    icon: [
      448,
      512,
      [],
      'f5cb',
      'M368 80h32v32H368V80zM352 32c-17.7 0-32 14.3-32 32H128c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64v64c0 17.7 14.3 32 32 32V352c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32H320c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V384c0-17.7-14.3-32-32-32V160c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H352zM96 160c17.7 0 32-14.3 32-32H320c0 17.7 14.3 32 32 32V352c-17.7 0-32 14.3-32 32H128c0-17.7-14.3-32-32-32V160zM48 400H80v32H48V400zm320 32V400h32v32H368zM48 112V80H80v32H48z',
    ],
  };
  var faBreadSlice = {
    prefix: 'fas',
    iconName: 'bread-slice',
    icon: [
      512,
      512,
      [],
      'f7ec',
      'M256 32C192 32 0 64 0 192c0 35.3 28.7 64 64 64V432c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V256c35.3 0 64-28.7 64-64C512 64 320 32 256 32z',
    ],
  };
  var faLanguage = {
    prefix: 'fas',
    iconName: 'language',
    icon: [
      640,
      512,
      [],
      'f1ab',
      'M0 128C0 92.7 28.7 64 64 64H256h48 16H576c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H320 304 256 64c-35.3 0-64-28.7-64-64V128zm320 0V384H576V128H320zM178.3 175.9c-3.2-7.2-10.4-11.9-18.3-11.9s-15.1 4.7-18.3 11.9l-64 144c-4.5 10.1 .1 21.9 10.2 26.4s21.9-.1 26.4-10.2l8.9-20.1h73.6l8.9 20.1c4.5 10.1 16.3 14.6 26.4 10.2s14.6-16.3 10.2-26.4l-64-144zM160 233.2L179 276H141l19-42.8zM448 164c11 0 20 9 20 20v4h44 16c11 0 20 9 20 20s-9 20-20 20h-2l-1.6 4.5c-8.9 24.4-22.4 46.6-39.6 65.4c.9 .6 1.8 1.1 2.7 1.6l18.9 11.3c9.5 5.7 12.5 18 6.9 27.4s-18 12.5-27.4 6.9l-18.9-11.3c-4.5-2.7-8.8-5.5-13.1-8.5c-10.6 7.5-21.9 14-34 19.4l-3.6 1.6c-10.1 4.5-21.9-.1-26.4-10.2s.1-21.9 10.2-26.4l3.6-1.6c6.4-2.9 12.6-6.1 18.5-9.8l-12.2-12.2c-7.8-7.8-7.8-20.5 0-28.3s20.5-7.8 28.3 0l14.6 14.6 .5 .5c12.4-13.1 22.5-28.3 29.8-45H448 376c-11 0-20-9-20-20s9-20 20-20h52v-4c0-11 9-20 20-20z',
    ],
  };
  var faFaceKissWinkHeart = {
    prefix: 'fas',
    iconName: 'face-kiss-wink-heart',
    icon: [
      512,
      512,
      [128536, 'kiss-wink-heart'],
      'f598',
      'M498 339.7c9.1-26.2 14-54.4 14-83.7C512 114.6 397.4 0 256 0S0 114.6 0 256S114.6 512 256 512c35.4 0 69.1-7.2 99.7-20.2c-4.8-5.5-8.5-12.2-10.4-19.7l-22.9-89.3c-10-39 11.8-80.9 51.8-92.1c37.2-10.4 73.8 10.1 87.5 44c12.7-1.6 25.1 .4 36.2 5zM296 332c0 6.9-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4c-2.7 1.5-5.7 3-8.7 4.3c3.1 1.3 6 2.7 8.7 4.3c6.6 3.7 12.5 8.2 16.7 13.4c4.3 5.1 7.3 11.4 7.3 18.3s-3.1 13.2-7.3 18.3c-4.3 5.2-10.1 9.7-16.7 13.4C258.7 443.1 241.4 448 224 448c-3.6 0-6.8-2.5-7.7-6s.6-7.2 3.8-9l0 0 0 0 0 0 0 0 .2-.1c.2-.1 .5-.3 .9-.5c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1l-.6-.4-.3-.2-.2-.1 0 0 0 0 0 0c-2.5-1.4-4.1-4.1-4.1-7s1.6-5.6 4.1-7l0 0 0 0 0 0 0 0 0 0 .2-.1c.2-.1 .5-.3 .9-.5c.8-.5 2-1.2 3.4-2.1c2.8-1.9 6.5-4.5 10.2-7.6c3.7-3.1 7.2-6.6 9.6-10.1c2.5-3.5 3.5-6.4 3.5-8.6s-1-5-3.5-8.6c-2.5-3.5-5.9-6.9-9.6-10.1c-3.7-3.1-7.4-5.7-10.2-7.6c-1.4-.9-2.6-1.6-3.4-2.1c-.4-.2-.7-.4-.9-.5l-.2-.1 0 0 0 0 0 0c-3.2-1.8-4.7-5.5-3.8-9s4.1-6 7.7-6c17.4 0 34.7 4.9 47.9 12.3c6.6 3.7 12.5 8.2 16.7 13.4c4.3 5.1 7.3 11.4 7.3 18.3zM176.4 240c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm194.8-6.4c-17.6-23.5-52.8-23.5-70.4 0c-5.3 7.1-15.3 8.5-22.4 3.2s-8.5-15.3-3.2-22.4c30.4-40.5 91.2-40.5 121.6 0c5.3 7.1 3.9 17.1-3.2 22.4s-17.1 3.9-22.4-3.2zM434 352.3c-6-23.2-28.8-37-51.1-30.8s-35.4 30.1-29.5 53.4l22.9 89.3c2.2 8.7 11.2 13.9 19.8 11.4l84.9-23.8c22.2-6.2 35.4-30.1 29.5-53.4s-28.8-37-51.1-30.8l-20.2 5.6-5.4-21z',
    ],
  };
  var faKissWinkHeart = faFaceKissWinkHeart;
  var faFilter = {
    prefix: 'fas',
    iconName: 'filter',
    icon: [
      512,
      512,
      [],
      'f0b0',
      'M3.9 54.9C10.5 40.9 24.5 32 40 32H472c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9V448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6V320.9L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z',
    ],
  };
  var faQuestion = {
    prefix: 'fas',
    iconName: 'question',
    icon: [
      320,
      512,
      [10067, 10068, 61736],
      '3f',
      'M96 96c-17.7 0-32 14.3-32 32s-14.3 32-32 32s-32-14.3-32-32C0 75 43 32 96 32h97c70.1 0 127 56.9 127 127c0 52.4-32.2 99.4-81 118.4l-63 24.5 0 18.1c0 17.7-14.3 32-32 32s-32-14.3-32-32V301.9c0-26.4 16.2-50.1 40.8-59.6l63-24.5C240 208.3 256 185 256 159c0-34.8-28.2-63-63-63H96zm48 384c-22.1 0-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40s-17.9 40-40 40z',
    ],
  };
  var faFileSignature = {
    prefix: 'fas',
    iconName: 'file-signature',
    icon: [
      576,
      512,
      [],
      'f573',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V428.7c-2.7 1.1-5.4 2-8.2 2.7l-60.1 15c-3 .7-6 1.2-9 1.4c-.9 .1-1.8 .2-2.7 .2H240c-6.1 0-11.6-3.4-14.3-8.8l-8.8-17.7c-1.7-3.4-5.1-5.5-8.8-5.5s-7.2 2.1-8.8 5.5l-8.8 17.7c-2.9 5.9-9.2 9.4-15.7 8.8s-12.1-5.1-13.9-11.3L144 381l-9.8 32.8c-6.1 20.3-24.8 34.2-46 34.2H80c-8.8 0-16-7.2-16-16s7.2-16 16-16h8.2c7.1 0 13.3-4.6 15.3-11.4l14.9-49.5c3.4-11.3 13.8-19.1 25.6-19.1s22.2 7.8 25.6 19.1l11.6 38.6c7.4-6.2 16.8-9.7 26.8-9.7c15.9 0 30.4 9 37.5 23.2l4.4 8.8h8.9c-3.1-8.8-3.7-18.4-1.4-27.8l15-60.1c2.8-11.3 8.6-21.5 16.8-29.7L384 203.6V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM549.8 139.7c-15.6-15.6-40.9-15.6-56.6 0l-29.4 29.4 71 71 29.4-29.4c15.6-15.6 15.6-40.9 0-56.6l-14.4-14.4zM311.9 321c-4.1 4.1-7 9.2-8.4 14.9l-15 60.1c-1.4 5.5 .2 11.2 4.2 15.2s9.7 5.6 15.2 4.2l60.1-15c5.6-1.4 10.8-4.3 14.9-8.4L512.1 262.7l-71-71L311.9 321z',
    ],
  };
  var faUpDownLeftRight = {
    prefix: 'fas',
    iconName: 'up-down-left-right',
    icon: [
      512,
      512,
      ['arrows-alt'],
      'f0b2',
      'M278.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8h32v96H128V192c0-12.9-7.8-24.6-19.8-29.6s-25.7-2.2-34.9 6.9l-64 64c-12.5 12.5-12.5 32.8 0 45.3l64 64c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V288h96v96H192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l64 64c12.5 12.5 32.8 12.5 45.3 0l64-64c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H288V288h96v32c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l64-64c12.5-12.5 12.5-32.8 0-45.3l-64-64c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6v32H288V128h32c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-64-64z',
    ],
  };
  var faArrowsAlt = faUpDownLeftRight;
  var faHouseChimneyUser = {
    prefix: 'fas',
    iconName: 'house-chimney-user',
    icon: [
      576,
      512,
      [],
      'e065',
      'M543.8 287.6c17 0 32-14 32-32.1c1-9-3-17-11-24L512 185V64c0-17.7-14.3-32-32-32H448c-17.7 0-32 14.3-32 32v36.7L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V448c0 35.3 28.7 64 64 64H448.5c35.5 0 64.2-28.8 64-64.3l-.7-160.2h32zM288 288c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM176 400c0-44.2 35.8-80 80-80h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H192c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faHandHoldingHeart = {
    prefix: 'fas',
    iconName: 'hand-holding-heart',
    icon: [
      576,
      512,
      [],
      'f4be',
      'M148 76.6C148 34.3 182.3 0 224.6 0c20.3 0 39.8 8.1 54.1 22.4l9.3 9.3 9.3-9.3C311.6 8.1 331.1 0 351.4 0C393.7 0 428 34.3 428 76.6c0 20.3-8.1 39.8-22.4 54.1L302.1 234.1c-7.8 7.8-20.5 7.8-28.3 0L170.4 130.7C156.1 116.4 148 96.9 148 76.6zM568.2 336.3c13.1 17.8 9.3 42.8-8.5 55.9L433.1 485.5c-23.4 17.2-51.6 26.5-80.7 26.5H192 32c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32H68.8l44.9-36c22.7-18.2 50.9-28 80-28H272h16 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H288 272c-8.8 0-16 7.2-16 16s7.2 16 16 16H392.6l119.7-88.2c17.8-13.1 42.8-9.3 55.9 8.5zM193.6 384l0 0-.9 0c.3 0 .6 0 .9 0z',
    ],
  };
  var faPuzzlePiece = {
    prefix: 'fas',
    iconName: 'puzzle-piece',
    icon: [
      512,
      512,
      [129513],
      'f12e',
      'M192 104.8c0-9.2-5.8-17.3-13.2-22.8C167.2 73.3 160 61.3 160 48c0-26.5 28.7-48 64-48s64 21.5 64 48c0 13.3-7.2 25.3-18.8 34c-7.4 5.5-13.2 13.6-13.2 22.8c0 12.8 10.4 23.2 23.2 23.2H336c26.5 0 48 21.5 48 48v56.8c0 12.8 10.4 23.2 23.2 23.2c9.2 0 17.3-5.8 22.8-13.2c8.7-11.6 20.7-18.8 34-18.8c26.5 0 48 28.7 48 64s-21.5 64-48 64c-13.3 0-25.3-7.2-34-18.8c-5.5-7.4-13.6-13.2-22.8-13.2c-12.8 0-23.2 10.4-23.2 23.2V464c0 26.5-21.5 48-48 48H279.2c-12.8 0-23.2-10.4-23.2-23.2c0-9.2 5.8-17.3 13.2-22.8c11.6-8.7 18.8-20.7 18.8-34c0-26.5-28.7-48-64-48s-64 21.5-64 48c0 13.3 7.2 25.3 18.8 34c7.4 5.5 13.2 13.6 13.2 22.8c0 12.8-10.4 23.2-23.2 23.2H48c-26.5 0-48-21.5-48-48V343.2C0 330.4 10.4 320 23.2 320c9.2 0 17.3 5.8 22.8 13.2C54.7 344.8 66.7 352 80 352c26.5 0 48-28.7 48-64s-21.5-64-48-64c-13.3 0-25.3 7.2-34 18.8C40.5 250.2 32.4 256 23.2 256C10.4 256 0 245.6 0 232.8V176c0-26.5 21.5-48 48-48H168.8c12.8 0 23.2-10.4 23.2-23.2z',
    ],
  };
  var faMoneyCheck = {
    prefix: 'fas',
    iconName: 'money-check',
    icon: [
      576,
      512,
      [],
      'f53c',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm48 160H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zM96 336c0-8.8 7.2-16 16-16H464c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zM376 160h80c13.3 0 24 10.7 24 24v48c0 13.3-10.7 24-24 24H376c-13.3 0-24-10.7-24-24V184c0-13.3 10.7-24 24-24z',
    ],
  };
  var faStarHalfStroke = {
    prefix: 'fas',
    iconName: 'star-half-stroke',
    icon: [
      576,
      512,
      ['star-half-alt'],
      'f5c0',
      'M288 376.4l.1-.1 26.4 14.1 85.2 45.5-16.5-97.6-4.8-28.7 20.7-20.5 70.1-69.3-96.1-14.2-29.3-4.3-12.9-26.6L288.1 86.9l-.1 .3V376.4zm175.1 98.3c2 12-3 24.2-12.9 31.3s-23 8-33.8 2.3L288.1 439.8 159.8 508.3C149 514 135.9 513.1 126 506s-14.9-19.3-12.9-31.3L137.8 329 33.6 225.9c-8.6-8.5-11.7-21.2-7.9-32.7s13.7-19.9 25.7-21.7L195 150.3 259.4 18c5.4-11 16.5-18 28.8-18s23.4 7 28.8 18l64.3 132.3 143.6 21.2c12 1.8 22 10.2 25.7 21.7s.7 24.2-7.9 32.7L438.5 329l24.6 145.7z',
    ],
  };
  var faStarHalfAlt = faStarHalfStroke;
  var faCode = {
    prefix: 'fas',
    iconName: 'code',
    icon: [
      640,
      512,
      [],
      'f121',
      'M392.8 1.2c-17-4.9-34.7 5-39.6 22l-128 448c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l128-448c4.9-17-5-34.7-22-39.6zm80.6 120.1c-12.5 12.5-12.5 32.8 0 45.3L562.7 256l-89.4 89.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l112-112c12.5-12.5 12.5-32.8 0-45.3l-112-112c-12.5-12.5-32.8-12.5-45.3 0zm-306.7 0c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3l112 112c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256l89.4-89.4c12.5-12.5 12.5-32.8 0-45.3z',
    ],
  };
  var faWhiskeyGlass = {
    prefix: 'fas',
    iconName: 'whiskey-glass',
    icon: [
      512,
      512,
      [129347, 'glass-whiskey'],
      'f7a0',
      'M32 32c-9.3 0-18.1 4-24.2 11.1S-1 59.4 .3 68.6l50 342.9c5.7 39.3 39.4 68.5 79.2 68.5h253c39.7 0 73.4-29.1 79.2-68.5l50-342.9c1.3-9.2-1.4-18.5-7.5-25.5S489.3 32 480 32H32zM87.7 224L69 96H443L424.3 224H87.7z',
    ],
  };
  var faGlassWhiskey = faWhiskeyGlass;
  var faBuildingCircleExclamation = {
    prefix: 'fas',
    iconName: 'building-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e4d3',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c15.1 0 28.5-6.9 37.3-17.8C340.4 462.2 320 417.5 320 368c0-54.7 24.9-103.5 64-135.8V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faMagnifyingGlassChart = {
    prefix: 'fas',
    iconName: 'magnifying-glass-chart',
    icon: [
      512,
      512,
      [],
      'e522',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zm-312 8v64c0 13.3 10.7 24 24 24s24-10.7 24-24l0-64c0-13.3-10.7-24-24-24s-24 10.7-24 24zm80-96V280c0 13.3 10.7 24 24 24s24-10.7 24-24V120c0-13.3-10.7-24-24-24s-24 10.7-24 24zm80 64v96c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24s-24 10.7-24 24z',
    ],
  };
  var faArrowUpRightFromSquare = {
    prefix: 'fas',
    iconName: 'arrow-up-right-from-square',
    icon: [
      448,
      512,
      ['external-link'],
      'f08e',
      'M288 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h50.7L169.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L384 141.3V192c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H288zM80 64C35.8 64 0 99.8 0 144V400c0 44.2 35.8 80 80 80H336c44.2 0 80-35.8 80-80V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v80c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16h80c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z',
    ],
  };
  var faExternalLink = faArrowUpRightFromSquare;
  var faCubesStacked = {
    prefix: 'fas',
    iconName: 'cubes-stacked',
    icon: [
      448,
      512,
      [],
      'e4e6',
      'M192 64v64c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H224c-17.7 0-32 14.3-32 32zM82.7 207c-15.3 8.8-20.5 28.4-11.7 43.7l32 55.4c8.8 15.3 28.4 20.5 43.7 11.7l55.4-32c15.3-8.8 20.5-28.4 11.7-43.7l-32-55.4c-8.8-15.3-28.4-20.5-43.7-11.7L82.7 207zM288 192c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32H288zm64 160c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V384c0-17.7-14.3-32-32-32H352zM160 384v64c0 17.7 14.3 32 32 32h64c17.7 0 32-14.3 32-32V384c0-17.7-14.3-32-32-32H192c-17.7 0-32 14.3-32 32zM32 352c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V384c0-17.7-14.3-32-32-32H32z',
    ],
  };
  var faWonSign = {
    prefix: 'fas',
    iconName: 'won-sign',
    icon: [
      512,
      512,
      [8361, 'krw', 'won'],
      'f159',
      'M62.4 53.9C56.8 37.1 38.6 28.1 21.9 33.6S-3.9 57.4 1.6 74.1L51.6 224H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H72.9l56.7 170.1c4.5 13.5 17.4 22.4 31.6 21.9s26.4-10.4 29.8-24.2L233 288h46L321 455.8c3.4 13.8 15.6 23.7 29.8 24.2s27.1-8.4 31.6-21.9L439.1 288H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H460.4l50-149.9c5.6-16.8-3.5-34.9-20.2-40.5s-34.9 3.5-40.5 20.2L392.9 224H329L287 56.2C283.5 42 270.7 32 256 32s-27.5 10-31 24.2L183 224h-64L62.4 53.9zm78 234.1H167l-11.4 45.6L140.4 288zM249 224l7-28.1 7 28.1H249zm96 64h26.6l-15.2 45.6L345 288z',
    ],
  };
  var faKrw = faWonSign;
  var faWon = faWonSign;
  var faVirusCovid = {
    prefix: 'fas',
    iconName: 'virus-covid',
    icon: [
      512,
      512,
      [],
      'e4a8',
      'M192 24c0-13.3 10.7-24 24-24h80c13.3 0 24 10.7 24 24s-10.7 24-24 24H280V81.6c30.7 4.2 58.8 16.3 82.3 34.1L386.1 92 374.8 80.6c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l56.6 56.6c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L420 125.9l-23.8 23.8c17.9 23.5 29.9 51.7 34.1 82.3H464V216c0-13.3 10.7-24 24-24s24 10.7 24 24v80c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H430.4c-4.2 30.7-16.3 58.8-34.1 82.3L420 386.1l11.3-11.3c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-56.6 56.6c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9L386.1 420l-23.8-23.8c-23.5 17.9-51.7 29.9-82.3 34.1V464h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h16V430.4c-30.7-4.2-58.8-16.3-82.3-34.1L125.9 420l11.3 11.3c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L46.7 408.7c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L92 386.1l23.8-23.8C97.9 338.8 85.8 310.7 81.6 280H48v16c0 13.3-10.7 24-24 24s-24-10.7-24-24V216c0-13.3 10.7-24 24-24s24 10.7 24 24v16H81.6c4.2-30.7 16.3-58.8 34.1-82.3L92 125.9 80.6 137.2c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l56.6-56.6c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L125.9 92l23.8 23.8c23.5-17.9 51.7-29.9 82.3-34.1V48H216c-13.3 0-24-10.7-24-24zm48 200c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm64 104c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faAustralSign = {
    prefix: 'fas',
    iconName: 'austral-sign',
    icon: [
      448,
      512,
      [],
      'e0a9',
      'M253.5 51.7C248.6 39.8 236.9 32 224 32s-24.6 7.8-29.5 19.7L122.7 224H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H96L82.7 320H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H56L34.5 435.7c-6.8 16.3 .9 35 17.2 41.8s35-.9 41.8-17.2L125.3 384H322.7l31.8 76.3c6.8 16.3 25.5 24 41.8 17.2s24-25.5 17.2-41.8L392 384h24c17.7 0 32-14.3 32-32s-14.3-32-32-32H365.3L352 288h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H325.3L253.5 51.7zM256 224H192l32-76.8L256 224zm-90.7 64H282.7L296 320H152l13.3-32z',
    ],
  };
  var faF = {
    prefix: 'fas',
    iconName: 'f',
    icon: [
      320,
      512,
      [102],
      '46',
      'M32 32C14.3 32 0 46.3 0 64V256 448c0 17.7 14.3 32 32 32s32-14.3 32-32V288H224c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V96H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faLeaf = {
    prefix: 'fas',
    iconName: 'leaf',
    icon: [
      512,
      512,
      [],
      'f06c',
      'M272 96c-78.6 0-145.1 51.5-167.7 122.5c33.6-17 71.5-26.5 111.7-26.5h88c8.8 0 16 7.2 16 16s-7.2 16-16 16H288 216s0 0 0 0c-16.6 0-32.7 1.9-48.3 5.4c-25.9 5.9-49.9 16.4-71.4 30.7c0 0 0 0 0 0C38.3 298.8 0 364.9 0 440v16c0 13.3 10.7 24 24 24s24-10.7 24-24V440c0-48.7 20.7-92.5 53.8-123.2C121.6 392.3 190.3 448 272 448l1 0c132.1-.7 239-130.9 239-291.4c0-42.6-7.5-83.1-21.1-119.6c-2.6-6.9-12.7-6.6-16.2-.1C455.9 72.1 418.7 96 376 96L272 96z',
    ],
  };
  var faRoad = {
    prefix: 'fas',
    iconName: 'road',
    icon: [
      576,
      512,
      [128739],
      'f018',
      'M256 32H181.2c-27.1 0-51.3 17.1-60.3 42.6L3.1 407.2C1.1 413 0 419.2 0 425.4C0 455.5 24.5 480 54.6 480H256V416c0-17.7 14.3-32 32-32s32 14.3 32 32v64H521.4c30.2 0 54.6-24.5 54.6-54.6c0-6.2-1.1-12.4-3.1-18.2L455.1 74.6C446 49.1 421.9 32 394.8 32H320V96c0 17.7-14.3 32-32 32s-32-14.3-32-32V32zm64 192v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V224c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faTaxi = {
    prefix: 'fas',
    iconName: 'taxi',
    icon: [
      512,
      512,
      [128662, 'cab'],
      'f1ba',
      'M192 0c-17.7 0-32 14.3-32 32V64c0 .1 0 .1 0 .2c-38.6 2.2-72.3 27.3-85.2 64.1L39.6 228.8C16.4 238.4 0 261.3 0 288V432v48c0 17.7 14.3 32 32 32H64c17.7 0 32-14.3 32-32V432H416v48c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V432 288c0-26.7-16.4-49.6-39.6-59.2L437.2 128.3c-12.9-36.8-46.6-62-85.2-64.1c0-.1 0-.1 0-.2V32c0-17.7-14.3-32-32-32H192zM165.4 128H346.6c13.6 0 25.7 8.6 30.2 21.4L402.9 224H109.1l26.1-74.6c4.5-12.8 16.6-21.4 30.2-21.4zM96 352c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm352-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faCab = faTaxi;
  var faPersonCirclePlus = {
    prefix: 'fas',
    iconName: 'person-circle-plus',
    icon: [
      576,
      512,
      [],
      'e541',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zM432 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm16-208c0-8.8-7.2-16-16-16s-16 7.2-16 16v48H368c-8.8 0-16 7.2-16 16s7.2 16 16 16h48v48c0 8.8 7.2 16 16 16s16-7.2 16-16V384h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H448V304z',
    ],
  };
  var faChartPie = {
    prefix: 'fas',
    iconName: 'chart-pie',
    icon: [
      576,
      512,
      ['pie-chart'],
      'f200',
      'M304 240V16.6c0-9 7-16.6 16-16.6C443.7 0 544 100.3 544 224c0 9-7.6 16-16.6 16H304zM32 272C32 150.7 122.1 50.3 239 34.3c9.2-1.3 17 6.1 17 15.4V288L412.5 444.5c6.7 6.7 6.2 17.7-1.5 23.1C371.8 495.6 323.8 512 272 512C139.5 512 32 404.6 32 272zm526.4 16c9.3 0 16.6 7.8 15.4 17c-7.7 55.9-34.6 105.6-73.9 142.3c-6 5.6-15.4 5.2-21.2-.7L320 288H558.4z',
    ],
  };
  var faPieChart = faChartPie;
  var faBoltLightning = {
    prefix: 'fas',
    iconName: 'bolt-lightning',
    icon: [
      384,
      512,
      [],
      'e0b7',
      'M0 256L28.5 28c2-16 15.6-28 31.8-28H228.9c15 0 27.1 12.1 27.1 27.1c0 3.2-.6 6.5-1.7 9.5L208 160H347.3c20.2 0 36.7 16.4 36.7 36.7c0 7.4-2.2 14.6-6.4 20.7l-192.2 281c-5.9 8.6-15.6 13.7-25.9 13.7h-2.9c-15.7 0-28.5-12.8-28.5-28.5c0-2.3 .3-4.6 .9-6.9L176 288H32c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faSackXmark = {
    prefix: 'fas',
    iconName: 'sack-xmark',
    icon: [
      512,
      512,
      [],
      'e56a',
      'M192 96H320l47.4-71.1C374.5 14.2 366.9 0 354.1 0H157.9c-12.8 0-20.4 14.2-13.3 24.9L192 96zm128 32H192c-3.8 2.5-8.1 5.3-13 8.4l0 0 0 0C122.3 172.7 0 250.9 0 416c0 53 43 96 96 96H416c53 0 96-43 96-96c0-165.1-122.3-243.3-179-279.6c-4.8-3.1-9.2-5.9-13-8.4zM289.9 336l47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47z',
    ],
  };
  var faFileExcel = {
    prefix: 'fas',
    iconName: 'file-excel',
    icon: [
      384,
      512,
      [],
      'f1c3',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM155.7 250.2L192 302.1l36.3-51.9c7.6-10.9 22.6-13.5 33.4-5.9s13.5 22.6 5.9 33.4L221.3 344l46.4 66.2c7.6 10.9 5 25.8-5.9 33.4s-25.8 5-33.4-5.9L192 385.8l-36.3 51.9c-7.6 10.9-22.6 13.5-33.4 5.9s-13.5-22.6-5.9-33.4L162.7 344l-46.4-66.2c-7.6-10.9-5-25.8 5.9-33.4s25.8-5 33.4 5.9z',
    ],
  };
  var faFileContract = {
    prefix: 'fas',
    iconName: 'file-contract',
    icon: [
      384,
      512,
      [],
      'f56c',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM80 64h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16s7.2-16 16-16zm54.2 253.8c-6.1 20.3-24.8 34.2-46 34.2H80c-8.8 0-16-7.2-16-16s7.2-16 16-16h8.2c7.1 0 13.3-4.6 15.3-11.4l14.9-49.5c3.4-11.3 13.8-19.1 25.6-19.1s22.2 7.7 25.6 19.1l11.6 38.6c7.4-6.2 16.8-9.7 26.8-9.7c15.9 0 30.4 9 37.5 23.2l4.4 8.8H304c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-6.1 0-11.6-3.4-14.3-8.8l-8.8-17.7c-1.7-3.4-5.1-5.5-8.8-5.5s-7.2 2.1-8.8 5.5l-8.8 17.7c-2.9 5.9-9.2 9.4-15.7 8.8s-12.1-5.1-13.9-11.3L144 349l-9.8 32.8z',
    ],
  };
  var faFishFins = {
    prefix: 'fas',
    iconName: 'fish-fins',
    icon: [
      576,
      512,
      [],
      'e4f2',
      'M275.2 38.4c-10.6-8-25-8.5-36.3-1.5S222 57.3 224.6 70.3l9.7 48.6c-19.4 9-36.9 19.9-52.4 31.5c-15.3 11.5-29 23.9-40.7 36.3L48.1 132.4c-12.5-7.3-28.4-5.3-38.7 4.9S-3 163.3 4.2 175.9L50 256 4.2 336.1c-7.2 12.6-5 28.4 5.3 38.6s26.1 12.2 38.7 4.9l93.1-54.3c11.8 12.3 25.4 24.8 40.7 36.3c15.5 11.6 33 22.5 52.4 31.5l-9.7 48.6c-2.6 13 3.1 26.3 14.3 33.3s25.6 6.5 36.3-1.5l77.6-58.2c54.9-4 101.5-27 137.2-53.8c39.2-29.4 67.2-64.7 81.6-89.5c5.8-9.9 5.8-22.2 0-32.1c-14.4-24.8-42.5-60.1-81.6-89.5c-35.8-26.8-82.3-49.8-137.2-53.8L275.2 38.4zM448 256c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faBuildingFlag = {
    prefix: 'fas',
    iconName: 'building-flag',
    icon: [
      640,
      512,
      [],
      'e4d5',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM448 0c-17.7 0-32 14.3-32 32V512h64V192H624c8.8 0 16-7.2 16-16V48c0-8.8-7.2-16-16-16H480c0-17.7-14.3-32-32-32z',
    ],
  };
  var faFaceGrinBeam = {
    prefix: 'fas',
    iconName: 'face-grin-beam',
    icon: [
      512,
      512,
      [128516, 'grin-beam'],
      'f582',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM383.8 317.8c12.3-3.7 24.3 7 19.2 18.7c-24.5 56.9-81.1 96.7-147 96.7s-122.5-39.8-147-96.7c-5.1-11.8 6.9-22.4 19.2-18.7C166.7 329.4 210.1 336 256 336s89.3-6.6 127.8-18.2zm-166.2-89l0 0 0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0zm160 0l0 0-.2-.2c-.2-.2-.4-.5-.7-.9c-.6-.8-1.6-2-2.8-3.4c-2.5-2.8-6-6.6-10.2-10.3c-8.8-7.8-18.8-14-27.7-14s-18.9 6.2-27.7 14c-4.2 3.7-7.7 7.5-10.2 10.3c-1.2 1.4-2.2 2.6-2.8 3.4c-.3 .4-.6 .7-.7 .9l-.2 .2 0 0 0 0 0 0c-2.1 2.8-5.7 3.9-8.9 2.8s-5.5-4.1-5.5-7.6c0-17.9 6.7-35.6 16.6-48.8c9.8-13 23.9-23.2 39.4-23.2s29.6 10.2 39.4 23.2c9.9 13.2 16.6 30.9 16.6 48.8c0 3.4-2.2 6.5-5.5 7.6s-6.9 0-8.9-2.8l0 0 0 0 0 0z',
    ],
  };
  var faGrinBeam = faFaceGrinBeam;
  var faObjectUngroup = {
    prefix: 'fas',
    iconName: 'object-ungroup',
    icon: [
      640,
      512,
      [],
      'f248',
      'M32 119.4C12.9 108.4 0 87.7 0 64C0 28.7 28.7 0 64 0c23.7 0 44.4 12.9 55.4 32H328.6C339.6 12.9 360.3 0 384 0c35.3 0 64 28.7 64 64c0 23.7-12.9 44.4-32 55.4V232.6c19.1 11.1 32 31.7 32 55.4c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H119.4c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V119.4zM119.4 96c-5.6 9.7-13.7 17.8-23.4 23.4V232.6c9.7 5.6 17.8 13.7 23.4 23.4H328.6c5.6-9.7 13.7-17.8 23.4-23.4V119.4c-9.7-5.6-17.8-13.7-23.4-23.4H119.4zm192 384c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V352h64v40.6c9.7 5.6 17.8 13.7 23.4 23.4H520.6c5.6-9.7 13.7-17.8 23.4-23.4V279.4c-9.7-5.6-17.8-13.7-23.4-23.4h-46c-5.4-15.4-14.6-28.9-26.5-39.6V192h72.6c11.1-19.1 31.7-32 55.4-32c35.3 0 64 28.7 64 64c0 23.7-12.9 44.4-32 55.4V392.6c19.1 11.1 32 31.7 32 55.4c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H311.4z',
    ],
  };
  var faPoop = {
    prefix: 'fas',
    iconName: 'poop',
    icon: [
      512,
      512,
      [],
      'f619',
      'M254.4 6.6c3.5-4.3 9-6.5 14.5-5.7C315.8 7.2 352 47.4 352 96c0 11.2-1.9 22-5.5 32H352c35.3 0 64 28.7 64 64c0 19.1-8.4 36.3-21.7 48H408c39.8 0 72 32.2 72 72c0 23.2-11 43.8-28 57c34.1 5.7 60 35.3 60 71c0 39.8-32.2 72-72 72H72c-39.8 0-72-32.2-72-72c0-35.7 25.9-65.3 60-71c-17-13.2-28-33.8-28-57c0-39.8 32.2-72 72-72h13.7C104.4 228.3 96 211.1 96 192c0-35.3 28.7-64 64-64h16.2c44.1-.1 79.8-35.9 79.8-80c0-9.2-1.5-17.9-4.3-26.1c-1.8-5.2-.8-11.1 2.8-15.4z',
    ],
  };
  var faLocationPin = {
    prefix: 'fas',
    iconName: 'location-pin',
    icon: [
      384,
      512,
      ['map-marker'],
      'f041',
      'M384 192c0 87.4-117 243-168.3 307.2c-12.3 15.3-35.1 15.3-47.4 0C117 435 0 279.4 0 192C0 86 86 0 192 0S384 86 384 192z',
    ],
  };
  var faMapMarker = faLocationPin;
  var faKaaba = {
    prefix: 'fas',
    iconName: 'kaaba',
    icon: [
      576,
      512,
      [128331],
      'f66b',
      'M60 120l228 71.2L516 120 288 48.8 60 120zM278.5 1.5c6.2-1.9 12.9-1.9 19.1 0l256 80C566.9 85.6 576 98 576 112v16 0 21.2L292.8 237.7c-3.1 1-6.4 1-9.5 0L0 149.2V128 112C0 98 9.1 85.6 22.5 81.5l256-80zm23.9 266.8L576 182.8v46.5l-52.8 16.5c-8.4 2.6-13.1 11.6-10.5 20s11.6 13.1 20 10.5L576 262.8V400c0 14-9.1 26.4-22.5 30.5l-256 80c-6.2 1.9-12.9 1.9-19.1 0l-256-80C9.1 426.4 0 414 0 400V262.8l43.2 13.5c8.4 2.6 17.4-2.1 20-10.5s-2.1-17.4-10.5-20L0 229.2V182.8l273.7 85.5c9.3 2.9 19.3 2.9 28.6 0zm-185.5-2.6c-8.4-2.6-17.4 2.1-20 10.5s2.1 17.4 10.5 20l64 20c8.4 2.6 17.4-2.1 20-10.5s-2.1-17.4-10.5-20l-64-20zm352 30.5c8.4-2.6 13.1-11.6 10.5-20s-11.6-13.1-20-10.5l-64 20c-8.4 2.6-13.1 11.6-10.5 20s11.6 13.1 20 10.5l64-20zm-224 9.5c-8.4-2.6-17.4 2.1-20 10.5s2.1 17.4 10.5 20l38.5 12c9.3 2.9 19.3 2.9 28.6 0l38.5-12c8.4-2.6 13.1-11.6 10.5-20s-11.6-13.1-20-10.5l-38.5 12c-3.1 1-6.4 1-9.5 0l-38.5-12z',
    ],
  };
  var faToiletPaper = {
    prefix: 'fas',
    iconName: 'toilet-paper',
    icon: [
      640,
      512,
      [129531],
      'f71e',
      'M444.2 0C397.2 49.6 384 126.5 384 192c0 158.8-27.3 247-42.7 283.9c-10 24-33.2 36.1-55.4 36.1H48c-11.5 0-22.2-6.2-27.8-16.2s-5.6-22.3 .4-32.2c9.8-17.7 15.4-38.2 20.5-57.7C52.3 362.8 64 293.5 64 192C64 86 107 0 160 0H444.2zM512 384c-53 0-96-86-96-192S459 0 512 0s96 86 96 192s-43 192-96 192zm0-128c17.7 0 32-28.7 32-64s-14.3-64-32-64s-32 28.7-32 64s14.3 64 32 64zM144 208c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm64 0c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 16c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm80-16c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faHelmetSafety = {
    prefix: 'fas',
    iconName: 'helmet-safety',
    icon: [
      576,
      512,
      ['hard-hat', 'hat-hard'],
      'f807',
      'M256 32c-17.7 0-32 14.3-32 32v2.3 99.6c0 5.6-4.5 10.1-10.1 10.1c-3.6 0-7-1.9-8.8-5.1L157.1 87C83 123.5 32 199.8 32 288v64H544l0-66.4c-.9-87.2-51.7-162.4-125.1-198.6l-48 83.9c-1.8 3.2-5.2 5.1-8.8 5.1c-5.6 0-10.1-4.5-10.1-10.1V66.3 64c0-17.7-14.3-32-32-32H256zM16.6 384C7.4 384 0 391.4 0 400.6c0 4.7 2 9.2 5.8 11.9C27.5 428.4 111.8 480 288 480s260.5-51.6 282.2-67.5c3.8-2.8 5.8-7.2 5.8-11.9c0-9.2-7.4-16.6-16.6-16.6H16.6z',
    ],
  };
  var faHardHat = faHelmetSafety;
  var faHatHard = faHelmetSafety;
  var faEject = {
    prefix: 'fas',
    iconName: 'eject',
    icon: [
      448,
      512,
      [9167],
      'f052',
      'M224 32c13.5 0 26.3 5.6 35.4 15.6l176 192c12.9 14 16.2 34.3 8.6 51.8S419 320 400 320H48c-19 0-36.3-11.2-43.9-28.7s-4.3-37.7 8.6-51.8l176-192C197.7 37.6 210.5 32 224 32zM0 432c0-26.5 21.5-48 48-48H400c26.5 0 48 21.5 48 48s-21.5 48-48 48H48c-26.5 0-48-21.5-48-48z',
    ],
  };
  var faCircleRight = {
    prefix: 'fas',
    iconName: 'circle-right',
    icon: [
      512,
      512,
      [61838, 'arrow-alt-circle-right'],
      'f35a',
      'M0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0S0 114.6 0 256zm395.3 11.3l-112 112c-4.6 4.6-11.5 5.9-17.4 3.5s-9.9-8.3-9.9-14.8l0-64-96 0c-17.7 0-32-14.3-32-32l0-32c0-17.7 14.3-32 32-32l96 0 0-64c0-6.5 3.9-12.3 9.9-14.8s12.9-1.1 17.4 3.5l112 112c6.2 6.2 6.2 16.4 0 22.6z',
    ],
  };
  var faArrowAltCircleRight = faCircleRight;
  var faPlaneCircleCheck = {
    prefix: 'fas',
    iconName: 'plane-circle-check',
    icon: [
      640,
      512,
      [],
      'e555',
      'M256 0c-35 0-64 59.5-64 93.7v84.6L8.1 283.4c-5 2.8-8.1 8.2-8.1 13.9v65.5c0 10.6 10.2 18.3 20.4 15.4l171.6-49 0 70.9-57.6 43.2c-4 3-6.4 7.8-6.4 12.8v42c0 7.8 6.3 14 14 14c1.3 0 2.6-.2 3.9-.5L256 480l110.1 31.5c1.3 .4 2.6 .5 3.9 .5c6 0 11.1-3.7 13.1-9C344.5 470.7 320 422.2 320 368c0-60.6 30.6-114 77.1-145.6L320 178.3V93.7C320 59.5 292 0 256 0zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faFaceRollingEyes = {
    prefix: 'fas',
    iconName: 'face-rolling-eyes',
    icon: [
      512,
      512,
      [128580, 'meh-rolling-eyes'],
      'f5a5',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM192 368H320c8.8 0 16 7.2 16 16s-7.2 16-16 16H192c-8.8 0-16-7.2-16-16s7.2-16 16-16zm32-144c0 35.3-28.7 64-64 64s-64-28.7-64-64c0-26 15.5-48.4 37.8-58.4c-3.7 5.2-5.8 11.6-5.8 18.4c0 17.7 14.3 32 32 32s32-14.3 32-32c0-6.9-2.2-13.2-5.8-18.4C208.5 175.6 224 198 224 224zm128 64c-35.3 0-64-28.7-64-64c0-26 15.5-48.4 37.8-58.4c-3.7 5.2-5.8 11.6-5.8 18.4c0 17.7 14.3 32 32 32s32-14.3 32-32c0-6.9-2.2-13.2-5.8-18.4C400.5 175.6 416 198 416 224c0 35.3-28.7 64-64 64z',
    ],
  };
  var faMehRollingEyes = faFaceRollingEyes;
  var faObjectGroup = {
    prefix: 'fas',
    iconName: 'object-group',
    icon: [
      576,
      512,
      [],
      'f247',
      'M32 119.4C12.9 108.4 0 87.7 0 64C0 28.7 28.7 0 64 0c23.7 0 44.4 12.9 55.4 32H456.6C467.6 12.9 488.3 0 512 0c35.3 0 64 28.7 64 64c0 23.7-12.9 44.4-32 55.4V392.6c19.1 11.1 32 31.7 32 55.4c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H119.4c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V119.4zM456.6 96H119.4c-5.6 9.7-13.7 17.8-23.4 23.4V392.6c9.7 5.6 17.8 13.7 23.4 23.4H456.6c5.6-9.7 13.7-17.8 23.4-23.4V119.4c-9.7-5.6-17.8-13.7-23.4-23.4zM128 160c0-17.7 14.3-32 32-32H288c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H160c-17.7 0-32-14.3-32-32V160zM256 320h32c35.3 0 64-28.7 64-64V224h64c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H288c-17.7 0-32-14.3-32-32V320z',
    ],
  };
  var faChartLine = {
    prefix: 'fas',
    iconName: 'chart-line',
    icon: [
      512,
      512,
      ['line-chart'],
      'f201',
      'M64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V400c0 44.2 35.8 80 80 80H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H80c-8.8 0-16-7.2-16-16V64zm406.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L320 210.7l-57.4-57.4c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L240 221.3l57.4 57.4c12.5 12.5 32.8 12.5 45.3 0l128-128z',
    ],
  };
  var faLineChart = faChartLine;
  var faMaskVentilator = {
    prefix: 'fas',
    iconName: 'mask-ventilator',
    icon: [
      640,
      512,
      [],
      'e524',
      'M159.1 176C139.4 219.2 128 264.7 128 300.8c0 15.9 2.2 31.4 6.3 46l-31.8-7.9C70.5 330.9 48 302.1 48 269V184c0-4.4 3.6-8 8-8H159.1zm26-48H56c-30.9 0-56 25.1-56 56v85c0 55.1 37.5 103.1 90.9 116.4l71.3 17.8c22.7 30.5 55.4 54.1 93.8 66.6V393.3c-19.7-16.4-32-40.3-32-66.9c0-49.5 43-134.4 96-134.4c52.5 0 96 84.9 96 134.4c0 26.7-12.4 50.4-32 66.8v76.6c38-12.6 70.6-36 93.5-66.4l71.6-17.9C602.5 372.1 640 324.1 640 269V184c0-30.9-25.1-56-56-56H454.5C419.7 73.8 372.1 32 320 32c-52.6 0-100.2 41.8-134.9 96zm295.6 48H584c4.4 0 8 3.6 8 8v85c0 33-22.5 61.8-54.5 69.9l-31.8 8c4.2-14.7 6.4-30.1 6.4-46.1c0-36.1-11.6-81.6-31.3-124.8zM288 320V512h64V320c0-17.7-14.3-32-32-32s-32 14.3-32 32z',
    ],
  };
  var faArrowRight = {
    prefix: 'fas',
    iconName: 'arrow-right',
    icon: [
      448,
      512,
      [8594],
      'f061',
      'M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z',
    ],
  };
  var faSignsPost = {
    prefix: 'fas',
    iconName: 'signs-post',
    icon: [
      512,
      512,
      ['map-signs'],
      'f277',
      'M224 32H64C46.3 32 32 46.3 32 64v64c0 17.7 14.3 32 32 32H441.4c4.2 0 8.3-1.7 11.3-4.7l48-48c6.2-6.2 6.2-16.4 0-22.6l-48-48c-3-3-7.1-4.7-11.3-4.7H288c0-17.7-14.3-32-32-32s-32 14.3-32 32zM480 256c0-17.7-14.3-32-32-32H288V192H224v32H70.6c-4.2 0-8.3 1.7-11.3 4.7l-48 48c-6.2 6.2-6.2 16.4 0 22.6l48 48c3 3 7.1 4.7 11.3 4.7H448c17.7 0 32-14.3 32-32V256zM288 480V384H224v96c0 17.7 14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faMapSigns = faSignsPost;
  var faCashRegister = {
    prefix: 'fas',
    iconName: 'cash-register',
    icon: [
      512,
      512,
      [],
      'f788',
      'M64 0C46.3 0 32 14.3 32 32V96c0 17.7 14.3 32 32 32h80v32H87c-31.6 0-58.5 23.1-63.3 54.4L1.1 364.1C.4 368.8 0 373.6 0 378.4V448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V378.4c0-4.8-.4-9.6-1.1-14.4L488.2 214.4C483.5 183.1 456.6 160 425 160H208V128h80c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H64zM96 48H256c8.8 0 16 7.2 16 16s-7.2 16-16 16H96c-8.8 0-16-7.2-16-16s7.2-16 16-16zM64 432c0-8.8 7.2-16 16-16H432c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16zm48-216c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm72 24c0-13.3 10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24zm-24 56c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm120-56c0-13.3 10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24zm-24 56c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm120-56c0-13.3 10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24zm-24 56c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faPersonCircleQuestion = {
    prefix: 'fas',
    iconName: 'person-circle-question',
    icon: [
      576,
      512,
      [],
      'e542',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zM432 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zM368 321.6V328c0 8.8 7.2 16 16 16s16-7.2 16-16v-6.4c0-5.3 4.3-9.6 9.6-9.6h40.5c7.7 0 13.9 6.2 13.9 13.9c0 5.2-2.9 9.9-7.4 12.3l-32 16.8c-5.3 2.8-8.6 8.2-8.6 14.2V384c0 8.8 7.2 16 16 16s16-7.2 16-16v-5.1l23.5-12.3c15.1-7.9 24.5-23.6 24.5-40.6c0-25.4-20.6-45.9-45.9-45.9H409.6c-23 0-41.6 18.6-41.6 41.6z',
    ],
  };
  var faH = {
    prefix: 'fas',
    iconName: 'h',
    icon: [
      384,
      512,
      [104],
      '48',
      'M320 256l0 192c0 17.7 14.3 32 32 32s32-14.3 32-32l0-224V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V192L64 192 64 64c0-17.7-14.3-32-32-32S0 46.3 0 64V448c0 17.7 14.3 32 32 32s32-14.3 32-32l0-192 256 0z',
    ],
  };
  var faTarp = {
    prefix: 'fas',
    iconName: 'tarp',
    icon: [
      576,
      512,
      [],
      'e57b',
      'M576 128c0-35.3-28.7-64-64-64H64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64l352 0 0-128c0-17.7 14.3-32 32-32H576V128zM448 448L576 320H448l0 128zM96 192c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faScrewdriverWrench = {
    prefix: 'fas',
    iconName: 'screwdriver-wrench',
    icon: [
      512,
      512,
      ['tools'],
      'f7d9',
      'M78.6 5C69.1-2.4 55.6-1.5 47 7L7 47c-8.5 8.5-9.4 22-2.1 31.6l80 104c4.5 5.9 11.6 9.4 19 9.4h54.1l109 109c-14.7 29-10 65.4 14.3 89.6l112 112c12.5 12.5 32.8 12.5 45.3 0l64-64c12.5-12.5 12.5-32.8 0-45.3l-112-112c-24.2-24.2-60.6-29-89.6-14.3l-109-109V104c0-7.5-3.5-14.5-9.4-19L78.6 5zM19.9 396.1C7.2 408.8 0 426.1 0 444.1C0 481.6 30.4 512 67.9 512c18 0 35.3-7.2 48-19.9L233.7 374.3c-7.8-20.9-9-43.6-3.6-65.1l-61.7-61.7L19.9 396.1zM512 144c0-10.5-1.1-20.7-3.2-30.5c-2.4-11.2-16.1-14.1-24.2-6l-63.9 63.9c-3 3-7.1 4.7-11.3 4.7H352c-8.8 0-16-7.2-16-16V102.6c0-4.2 1.7-8.3 4.7-11.3l63.9-63.9c8.1-8.1 5.2-21.8-6-24.2C388.7 1.1 378.5 0 368 0C288.5 0 224 64.5 224 144l0 .8 85.3 85.3c36-9.1 75.8 .5 104 28.7L429 274.5c49-23 83-72.8 83-130.5zM104 432c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faTools = faScrewdriverWrench;
  var faArrowsToEye = {
    prefix: 'fas',
    iconName: 'arrows-to-eye',
    icon: [
      640,
      512,
      [],
      'e4bf',
      'M15 15C24.4 5.7 39.6 5.7 49 15l63 63V40c0-13.3 10.7-24 24-24s24 10.7 24 24v96c0 13.3-10.7 24-24 24H40c-13.3 0-24-10.7-24-24s10.7-24 24-24H78.1L15 49C5.7 39.6 5.7 24.4 15 15zM133.5 243.9C158.6 193.6 222.7 112 320 112s161.4 81.6 186.5 131.9c3.8 7.6 3.8 16.5 0 24.2C481.4 318.4 417.3 400 320 400s-161.4-81.6-186.5-131.9c-3.8-7.6-3.8-16.5 0-24.2zM320 320c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zM591 15c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-63 63H600c13.3 0 24 10.7 24 24s-10.7 24-24 24H504c-13.3 0-24-10.7-24-24V40c0-13.3 10.7-24 24-24s24 10.7 24 24V78.1l63-63zM15 497c-9.4-9.4-9.4-24.6 0-33.9l63-63H40c-13.3 0-24-10.7-24-24s10.7-24 24-24h96c13.3 0 24 10.7 24 24v96c0 13.3-10.7 24-24 24s-24-10.7-24-24V433.9L49 497c-9.4 9.4-24.6 9.4-33.9 0zm576 0l-63-63V472c0 13.3-10.7 24-24 24s-24-10.7-24-24V376c0-13.3 10.7-24 24-24h96c13.3 0 24 10.7 24 24s-10.7 24-24 24H561.9l63 63c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0z',
    ],
  };
  var faPlugCircleBolt = {
    prefix: 'fas',
    iconName: 'plug-circle-bolt',
    icon: [
      576,
      512,
      [],
      'e55b',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm47.9-225c4.3 3.7 5.4 9.9 2.6 14.9L452.4 356H488c5.2 0 9.8 3.3 11.4 8.2s-.1 10.3-4.2 13.4l-96 72c-4.5 3.4-10.8 3.2-15.1-.6s-5.4-9.9-2.6-14.9L411.6 380H376c-5.2 0-9.8-3.3-11.4-8.2s.1-10.3 4.2-13.4l96-72c4.5-3.4 10.8-3.2 15.1 .6z',
    ],
  };
  var faHeart = {
    prefix: 'fas',
    iconName: 'heart',
    icon: [
      512,
      512,
      [
        128153,
        128154,
        128155,
        128156,
        128420,
        129293,
        129294,
        129505,
        9829,
        10084,
        61578,
      ],
      'f004',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z',
    ],
  };
  var faMarsAndVenus = {
    prefix: 'fas',
    iconName: 'mars-and-venus',
    icon: [
      512,
      512,
      [9893],
      'f224',
      'M337.8 14.8C341.5 5.8 350.3 0 360 0H472c13.3 0 24 10.7 24 24V136c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-39-39-24.7 24.7C407 163.3 416 192.6 416 224c0 80.2-59.1 146.7-136.1 158.2c0 .6 .1 1.2 .1 1.8v.4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .4 .3 .4 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3 .3h24c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v.2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .2 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 .1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0l-24 0-24 0v0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V486 486v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V485 485v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V484v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V483v-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1-.1V481v-.1-.1-.1-.1-.1-.1-.1-.1V480v-.1-.1-.1-.1-.1-.1-.1V479v-.1-.1-.1-.1-.1-.1-.1V478v-.1-.1-.1-.1-.1-.1V477v-.1-.1-.1-.1-.1-.1V476v-.1-.1-.1-.1-.1-.1V475v-.1-.2-.2-.2-.2-.2V474v-.2-.2-.2-.2-.2V473v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V470v-.2-.2-.2-.2-.2V469v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V467v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V463v-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2-.2V459v-.2-.2-.2-.2-.2-.2-.2-.2V457v-.2-.2-.2-.2V456H208c-13.3 0-24-10.7-24-24s10.7-24 24-24h24v-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3V403v-.3-.3V402v-.3-.3V401v-.3-.3V400v-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.3-.4-.3-.4-.4-.4-.4V393v-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4V388v-.4-.4-.4-.4-.4-.4-.4-.4-.4-.4V384c0-.6 0-1.2 .1-1.8C155.1 370.7 96 304.2 96 224c0-88.4 71.6-160 160-160c39.6 0 75.9 14.4 103.8 38.2L382.1 80 343 41c-6.9-6.9-8.9-17.2-5.2-26.2zM448 48l0 0h0v0zM256 488h24c0 13.3-10.7 24-24 24s-24-10.7-24-24h24zm96-264c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96z',
    ],
  };
  var faHouseUser = {
    prefix: 'fas',
    iconName: 'house-user',
    icon: [
      576,
      512,
      ['home-user'],
      'e1b0',
      'M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c.2 35.5-28.5 64.3-64 64.3H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24zM352 224c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zm-96 96c-44.2 0-80 35.8-80 80c0 8.8 7.2 16 16 16H384c8.8 0 16-7.2 16-16c0-44.2-35.8-80-80-80H256z',
    ],
  };
  var faHomeUser = faHouseUser;
  var faDumpsterFire = {
    prefix: 'fas',
    iconName: 'dumpster-fire',
    icon: [
      640,
      512,
      [],
      'f794',
      'M49.7 32c-10.5 0-19.8 6.9-22.9 16.9L.9 133c-.6 2-.9 4.1-.9 6.1C0 150.7 9.3 160 20.9 160h94L140.5 32H49.7zM272 160V32H173.1L147.5 160H272zm32 0h58c15.1-18.1 32.1-35.7 50.5-52.1c1.5-1.4 3.2-2.6 4.8-3.8L402.9 32H304V160zm209.9-23.7c17.4-15.8 43.9-16.2 61.7-1.2c-.1-.7-.3-1.4-.5-2.1L549.2 48.9C546.1 38.9 536.8 32 526.3 32H435.5l12.8 64.2c9.6 1 19 4.9 26.6 11.8c11.7 10.6 23 21.6 33.9 33.1c1.6-1.6 3.3-3.2 5-4.8zM325.2 210.7c3.8-6.2 7.9-12.5 12.3-18.7H32l4 32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H44L64 448c0 17.7 14.3 32 32 32s32-14.3 32-32H337.6c-31-34.7-49.6-80.6-49.6-129.9c0-35.2 16.3-73.6 37.2-107.4zm128.4-78.9c-2.8-2.5-6.3-3.7-9.8-3.8c-3.6 0-7.2 1.2-10 3.7c-33.2 29.7-61.4 63.4-81.4 95.8c-19.7 31.9-32.4 66.2-32.4 92.6C320 407.9 390.3 480 480 480c88.7 0 160-72 160-159.8c0-20.2-9.6-50.9-24.2-79c-14.8-28.5-35.7-58.5-60.4-81.1c-5.6-5.1-14.4-5.2-20 0c-9.6 8.8-18.6 19.6-26.5 29.5c-17.3-20.7-35.8-39.9-55.5-57.7zM530 401c-15 10-31 15-49 15c-45 0-81-29-81-78c0-24 15-45 45-82c4 5 62 79 62 79l36-42c3 4 5 8 7 12c18 33 10 75-20 96z',
    ],
  };
  var faHouseCrack = {
    prefix: 'fas',
    iconName: 'house-crack',
    icon: [
      576,
      512,
      [],
      'e3b1',
      'M543.8 287.6c17 0 32-14 32-32.1c1-9-3-17-11-24L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V448c0 35.3 28.7 64 64 64H230.4l-31.3-52.2c-4.1-6.8-2.6-15.5 3.5-20.5L288 368l-60.2-82.8c-10.9-15 8.2-33.5 22.8-22l117.9 92.6c8 6.3 8.2 18.4 .4 24.9L288 448l38.4 64H448.5c35.5 0 64.2-28.8 64-64.3l-.7-160.2h32z',
    ],
  };
  var faMartiniGlassCitrus = {
    prefix: 'fas',
    iconName: 'martini-glass-citrus',
    icon: [
      576,
      512,
      ['cocktail'],
      'f561',
      'M432 240c53 0 96-43 96-96s-43-96-96-96c-35.5 0-66.6 19.3-83.2 48H296.2C316 40.1 369.3 0 432 0c79.5 0 144 64.5 144 144s-64.5 144-144 144c-27.7 0-53.5-7.8-75.5-21.3l35.4-35.4c12.2 5.6 25.8 8.7 40.1 8.7zM1.8 142.8C5.5 133.8 14.3 128 24 128H392c9.7 0 18.5 5.8 22.2 14.8s1.7 19.3-5.2 26.2l-177 177V464h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H208 120c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V345.9L7 169c-6.9-6.9-8.9-17.2-5.2-26.2z',
    ],
  };
  var faCocktail = faMartiniGlassCitrus;
  var faFaceSurprise = {
    prefix: 'fas',
    iconName: 'face-surprise',
    icon: [
      512,
      512,
      [128558, 'surprise'],
      'f5c2',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM176.4 240c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm192-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM256 416c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faSurprise = faFaceSurprise;
  var faBottleWater = {
    prefix: 'fas',
    iconName: 'bottle-water',
    icon: [
      256,
      512,
      [],
      'e4c5',
      'M88 0h80c13.3 0 24 10.7 24 24V64H64V24C64 10.7 74.7 0 88 0zM0 151.7c0-15.6 9-29.8 23.2-36.5l24.4-11.4c11-5.1 23-7.8 35.1-7.8h90.6c12.1 0 24.1 2.7 35.1 7.8l24.4 11.4c14.2 6.6 23.2 20.8 23.2 36.5c0 14.4-7.5 27-18.9 34.1c11.5 8.8 18.9 22.6 18.9 38.2c0 16.7-8.5 31.4-21.5 40c12.9 8.6 21.5 23.3 21.5 40s-8.5 31.4-21.5 40c12.9 8.6 21.5 23.3 21.5 40s-8.5 31.4-21.5 40c12.9 8.6 21.5 23.3 21.5 40c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48c0-16.7 8.5-31.4 21.5-40C8.5 415.4 0 400.7 0 384s8.5-31.4 21.5-40C8.5 335.4 0 320.7 0 304s8.5-31.4 21.5-40C8.5 255.4 0 240.7 0 224c0-15.6 7.4-29.4 18.9-38.2C7.5 178.7 0 166.1 0 151.7zM64 240c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zM80 352c-8.8 0-16 7.2-16 16s7.2 16 16 16h96c8.8 0 16-7.2 16-16s-7.2-16-16-16H80z',
    ],
  };
  var faCirclePause = {
    prefix: 'fas',
    iconName: 'circle-pause',
    icon: [
      512,
      512,
      [62092, 'pause-circle'],
      'f28b',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM224 192V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32zm128 0V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faPauseCircle = faCirclePause;
  var faToiletPaperSlash = {
    prefix: 'fas',
    iconName: 'toilet-paper-slash',
    icon: [
      640,
      512,
      [],
      'e072',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-109.7-86C569.9 374 608 291.9 608 192C608 86 565 0 512 0s-96 86-96 192c0 49.1 9.2 93.9 24.4 127.9l-59-46.2c1.6-24.8 2.6-52 2.6-81.6c0-65.5 13.2-142.4 60.2-192H160c-24.8 0-47.4 18.8-64.4 49.6L38.8 5.1zM66.5 148.4C64.9 162.4 64 177 64 192c0 101.5-11.7 170.8-23 213.9c-5.1 19.4-10.7 39.9-20.5 57.7c-5.9 9.9-6.1 22.1-.4 32.2S36.5 512 48 512H285.9c22.3 0 45.4-12.1 55.4-36.1c7.4-17.7 17.5-47.2 26-90.6L66.5 148.4zM544 192c0 35.3-14.3 64-32 64s-32-28.7-32-64s14.3-64 32-64s32 28.7 32 64z',
    ],
  };
  var faAppleWhole = {
    prefix: 'fas',
    iconName: 'apple-whole',
    icon: [
      448,
      512,
      [127822, 127823, 'apple-alt'],
      'f5d1',
      'M224 112c-8.8 0-16-7.2-16-16V80c0-44.2 35.8-80 80-80h16c8.8 0 16 7.2 16 16V32c0 44.2-35.8 80-80 80H224zM0 288c0-76.3 35.7-160 112-160c27.3 0 59.7 10.3 82.7 19.3c18.8 7.3 39.9 7.3 58.7 0c22.9-8.9 55.4-19.3 82.7-19.3c76.3 0 112 83.7 112 160c0 128-80 224-160 224c-16.5 0-38.1-6.6-51.5-11.3c-8.1-2.8-16.9-2.8-25 0c-13.4 4.7-35 11.3-51.5 11.3C80 512 0 416 0 288z',
    ],
  };
  var faAppleAlt = faAppleWhole;
  var faKitchenSet = {
    prefix: 'fas',
    iconName: 'kitchen-set',
    icon: [
      576,
      512,
      [],
      'e51a',
      'M240 144c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96zm44.4 32C269.9 240.1 212.5 288 144 288C64.5 288 0 223.5 0 144S64.5 0 144 0c68.5 0 125.9 47.9 140.4 112h71.8c8.8-9.8 21.6-16 35.8-16H496c26.5 0 48 21.5 48 48s-21.5 48-48 48H392c-14.2 0-27-6.2-35.8-16H284.4zM144 208c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm256 32c13.3 0 24 10.7 24 24v8h96c13.3 0 24 10.7 24 24s-10.7 24-24 24H280c-13.3 0-24-10.7-24-24s10.7-24 24-24h96v-8c0-13.3 10.7-24 24-24zM288 464V352H512V464c0 26.5-21.5 48-48 48H336c-26.5 0-48-21.5-48-48zM48 320h80 16 32c26.5 0 48 21.5 48 48s-21.5 48-48 48H160c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V336c0-8.8 7.2-16 16-16zm128 64c8.8 0 16-7.2 16-16s-7.2-16-16-16H160v32h16zM24 464H200c13.3 0 24 10.7 24 24s-10.7 24-24 24H24c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faR = {
    prefix: 'fas',
    iconName: 'r',
    icon: [
      320,
      512,
      [114],
      '52',
      'M32 32C14.3 32 0 46.3 0 64V288 448c0 17.7 14.3 32 32 32s32-14.3 32-32V320h95.3L261.8 466.4c10.1 14.5 30.1 18 44.6 7.9s18-30.1 7.9-44.6L230.1 309.5C282.8 288.1 320 236.4 320 176c0-79.5-64.5-144-144-144H32zM176 256H64V96H176c44.2 0 80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faTemperatureQuarter = {
    prefix: 'fas',
    iconName: 'temperature-quarter',
    icon: [
      320,
      512,
      ['temperature-1', 'thermometer-1', 'thermometer-quarter'],
      'f2ca',
      'M160 64c-26.5 0-48 21.5-48 48V276.5c0 17.3-7.1 31.9-15.3 42.5C86.2 332.6 80 349.5 80 368c0 44.2 35.8 80 80 80s80-35.8 80-80c0-18.5-6.2-35.4-16.7-48.9c-8.2-10.6-15.3-25.2-15.3-42.5V112c0-26.5-21.5-48-48-48zM48 112C48 50.2 98.1 0 160 0s112 50.1 112 112V276.5c0 .1 .1 .3 .2 .6c.2 .6 .8 1.6 1.7 2.8c18.9 24.4 30.1 55 30.1 88.1c0 79.5-64.5 144-144 144S16 447.5 16 368c0-33.2 11.2-63.8 30.1-88.1c.9-1.2 1.5-2.2 1.7-2.8c.1-.3 .2-.5 .2-.6V112zM208 368c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-20.9 13.4-38.7 32-45.3V272c0-8.8 7.2-16 16-16s16 7.2 16 16v50.7c18.6 6.6 32 24.4 32 45.3z',
    ],
  };
  var faTemperature1 = faTemperatureQuarter;
  var faThermometer1 = faTemperatureQuarter;
  var faThermometerQuarter = faTemperatureQuarter;
  var faCube = {
    prefix: 'fas',
    iconName: 'cube',
    icon: [
      512,
      512,
      [],
      'f1b2',
      'M234.5 5.7c13.9-5 29.1-5 43.1 0l192 68.6C495 83.4 512 107.5 512 134.6V377.4c0 27-17 51.2-42.5 60.3l-192 68.6c-13.9 5-29.1 5-43.1 0l-192-68.6C17 428.6 0 404.5 0 377.4V134.6c0-27 17-51.2 42.5-60.3l192-68.6zM256 66L82.3 128 256 190l173.7-62L256 66zm32 368.6l160-57.1v-188L288 246.6v188z',
    ],
  };
  var faBitcoinSign = {
    prefix: 'fas',
    iconName: 'bitcoin-sign',
    icon: [
      320,
      512,
      [],
      'e0b4',
      'M48 32C48 14.3 62.3 0 80 0s32 14.3 32 32V64h32V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64c0 1.5-.1 3.1-.3 4.5C254.1 82.2 288 125.1 288 176c0 24.2-7.7 46.6-20.7 64.9c31.7 19.8 52.7 55 52.7 95.1c0 61.9-50.1 112-112 112v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H112v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H41.7C18.7 448 0 429.3 0 406.3V288 265.7 224 101.6C0 80.8 16.8 64 37.6 64H48V32zM64 224H176c26.5 0 48-21.5 48-48s-21.5-48-48-48H64v96zm112 64H64v96H208c26.5 0 48-21.5 48-48s-21.5-48-48-48H176z',
    ],
  };
  var faShieldDog = {
    prefix: 'fas',
    iconName: 'shield-dog',
    icon: [
      512,
      512,
      [],
      'e573',
      'M269.4 2.9C265.2 1 260.7 0 256 0s-9.2 1-13.4 2.9L54.3 82.8c-22 9.3-38.4 31-38.3 57.2c.5 99.2 41.3 280.7 213.6 363.2c16.7 8 36.1 8 52.8 0C454.7 420.7 495.5 239.2 496 140c.1-26.2-16.3-47.9-38.3-57.2L269.4 2.9zM160.9 286.2c4.8 1.2 9.9 1.8 15.1 1.8c35.3 0 64-28.7 64-64V160h44.2c12.1 0 23.2 6.8 28.6 17.7L320 192h64c8.8 0 16 7.2 16 16v32c0 44.2-35.8 80-80 80H272v50.7c0 7.3-5.9 13.3-13.3 13.3c-1.8 0-3.6-.4-5.2-1.1l-98.7-42.3c-6.6-2.8-10.8-9.3-10.8-16.4c0-2.8 .6-5.5 1.9-8l15-30zM160 160h40 8v32 32c0 17.7-14.3 32-32 32s-32-14.3-32-32V176c0-8.8 7.2-16 16-16zm128 48c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faSolarPanel = {
    prefix: 'fas',
    iconName: 'solar-panel',
    icon: [
      640,
      512,
      [],
      'f5ba',
      'M96 0C80.7 0 67.6 10.8 64.6 25.7l-64 320c-1.9 9.4 .6 19.1 6.6 26.6S22.4 384 32 384H288v64H224c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V384H608c9.6 0 18.7-4.3 24.7-11.7s8.5-17.2 6.6-26.6l-64-320C572.4 10.8 559.3 0 544 0H96zm5.4 168L122.2 64h90.4L202.3 168H101.4zm-9.6 48H197.5L187.1 320H71L91.8 216zm153.9 0H394.3l10.4 104H235.3l10.4-104zm196.8 0H548.2L569 320h-116L442.5 216zm96-48H437.7L427.3 64h90.4l20.8 104zm-149.1 0h-139L260.9 64H379.1l10.4 104z',
    ],
  };
  var faLockOpen = {
    prefix: 'fas',
    iconName: 'lock-open',
    icon: [
      576,
      512,
      [],
      'f3c1',
      'M352 144c0-44.2 35.8-80 80-80s80 35.8 80 80v48c0 17.7 14.3 32 32 32s32-14.3 32-32V144C576 64.5 511.5 0 432 0S288 64.5 288 144v48H64c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V256c0-35.3-28.7-64-64-64H352V144z',
    ],
  };
  var faElevator = {
    prefix: 'fas',
    iconName: 'elevator',
    icon: [
      512,
      512,
      [],
      'e16d',
      'M132.7 4.7l-64 64c-4.6 4.6-5.9 11.5-3.5 17.4s8.3 9.9 14.8 9.9H208c6.5 0 12.3-3.9 14.8-9.9s1.1-12.9-3.5-17.4l-64-64c-6.2-6.2-16.4-6.2-22.6 0zM64 128c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V192c0-35.3-28.7-64-64-64H64zm96 192c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM80 400c0-26.5 21.5-48 48-48h64c26.5 0 48 21.5 48 48v16c0 17.7-14.3 32-32 32H112c-17.7 0-32-14.3-32-32V400zm192 0c0-26.5 21.5-48 48-48h64c26.5 0 48 21.5 48 48v16c0 17.7-14.3 32-32 32H304c-17.7 0-32-14.3-32-32V400zM400 272c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM356.7 91.3c6.2 6.2 16.4 6.2 22.6 0l64-64c4.6-4.6 5.9-11.5 3.5-17.4S438.5 0 432 0H304c-6.5 0-12.3 3.9-14.8 9.9s-1.1 12.9 3.5 17.4l64 64z',
    ],
  };
  var faMoneyBillTransfer = {
    prefix: 'fas',
    iconName: 'money-bill-transfer',
    icon: [
      640,
      512,
      [],
      'e528',
      'M535 41c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l64 64c4.5 4.5 7 10.6 7 17s-2.5 12.5-7 17l-64 64c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l23-23L384 112c-13.3 0-24-10.7-24-24s10.7-24 24-24l174.1 0L535 41zM105 377l-23 23L256 400c13.3 0 24 10.7 24 24s-10.7 24-24 24L81.9 448l23 23c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L7 441c-4.5-4.5-7-10.6-7-17s2.5-12.5 7-17l64-64c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM96 64H337.9c-3.7 7.2-5.9 15.3-5.9 24c0 28.7 23.3 52 52 52l117.4 0c-4 17 .6 35.5 13.8 48.8c20.3 20.3 53.2 20.3 73.5 0L608 169.5V384c0 35.3-28.7 64-64 64H302.1c3.7-7.2 5.9-15.3 5.9-24c0-28.7-23.3-52-52-52l-117.4 0c4-17-.6-35.5-13.8-48.8c-20.3-20.3-53.2-20.3-73.5 0L32 342.5V128c0-35.3 28.7-64 64-64zm64 64H96v64c35.3 0 64-28.7 64-64zM544 320c-35.3 0-64 28.7-64 64h64V320zM320 352c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96s43 96 96 96z',
    ],
  };
  var faMoneyBillTrendUp = {
    prefix: 'fas',
    iconName: 'money-bill-trend-up',
    icon: [
      512,
      512,
      [],
      'e529',
      'M470.7 9.4c3 3.1 5.3 6.6 6.9 10.3s2.4 7.8 2.4 12.2l0 .1v0 96c0 17.7-14.3 32-32 32s-32-14.3-32-32V109.3L310.6 214.6c-11.8 11.8-30.8 12.6-43.5 1.7L176 138.1 84.8 216.3c-13.4 11.5-33.6 9.9-45.1-3.5s-9.9-33.6 3.5-45.1l112-96c12-10.3 29.7-10.3 41.7 0l89.5 76.7L370.7 64H352c-17.7 0-32-14.3-32-32s14.3-32 32-32h96 0c8.8 0 16.8 3.6 22.6 9.3l.1 .1zM0 304c0-26.5 21.5-48 48-48H464c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V304zM48 416v48H96c0-26.5-21.5-48-48-48zM96 304H48v48c26.5 0 48-21.5 48-48zM464 416c-26.5 0-48 21.5-48 48h48V416zM416 304c0 26.5 21.5 48 48 48V304H416zm-96 80c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faHouseFloodWaterCircleArrowRight = {
    prefix: 'fas',
    iconName: 'house-flood-water-circle-arrow-right',
    icon: [
      640,
      512,
      [],
      'e50f',
      'M288 144C288 64.5 223.5 0 144 0S0 64.5 0 144s64.5 144 144 144s144-64.5 144-144zM140.7 76.7c6.2-6.2 16.4-6.2 22.6 0l56 56c6.2 6.2 6.2 16.4 0 22.6l-56 56c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L169.4 160H80c-8.8 0-16-7.2-16-16s7.2-16 16-16h89.4L140.7 99.3c-6.2-6.2-6.2-16.4 0-22.6zM320 144c0 57.3-27.4 108.2-69.8 140.3c11.8-3.6 23-9.4 33-16.2c22.1-15.5 51.6-15.5 73.7 0c18.4 12.7 39.6 20.3 59.2 20.3c19 0 41.2-7.9 59.2-20.3c23.8-16.7 55.8-15.4 78.1 3.4c2.1 1.7 4.2 3.3 6.5 4.9l-.3-84.4H576c13.9 0 26.1-8.9 30.4-22.1s-.4-27.6-11.6-35.8l-176-128C407.6-2 392.4-2 381.2 6.1L301 64.4c12.1 23.9 19 50.9 19 79.6zm18.5 165.9c-11.1-7.9-25.9-7.9-37 0C279 325.4 251.5 336 224 336c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C158.5 389.7 191 400 224 400c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.5-27.3-10.1-39.2-1.7l0 0C471.4 325.2 442.9 336 416 336c-27.5 0-55-10.6-77.5-26.1zm0 112c-11.1-7.9-25.9-7.9-37 0C279 437.4 251.5 448 224 448c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C158.5 501.7 191 512 224 512c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C471.4 437.2 442.9 448 416 448c-27.5 0-55-10.6-77.5-26.1z',
    ],
  };
  var faSquarePollHorizontal = {
    prefix: 'fas',
    iconName: 'square-poll-horizontal',
    icon: [
      448,
      512,
      ['poll-h'],
      'f682',
      'M448 96c0-35.3-28.7-64-64-64L64 32C28.7 32 0 60.7 0 96L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-320zM256 160c0 17.7-14.3 32-32 32l-96 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l96 0c17.7 0 32 14.3 32 32zm64 64c17.7 0 32 14.3 32 32s-14.3 32-32 32l-192 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l192 0zM192 352c0 17.7-14.3 32-32 32l-32 0c-17.7 0-32-14.3-32-32s14.3-32 32-32l32 0c17.7 0 32 14.3 32 32z',
    ],
  };
  var faPollH = faSquarePollHorizontal;
  var faCircle = {
    prefix: 'fas',
    iconName: 'circle',
    icon: [
      512,
      512,
      [
        128308,
        128309,
        128992,
        128993,
        128994,
        128995,
        128996,
        9679,
        9898,
        9899,
        11044,
        61708,
        61915,
      ],
      'f111',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512z',
    ],
  };
  var faBackwardFast = {
    prefix: 'fas',
    iconName: 'backward-fast',
    icon: [
      512,
      512,
      [9198, 'fast-backward'],
      'f049',
      'M493.6 445c-11.2 5.3-24.5 3.6-34.1-4.4L288 297.7V416c0 12.4-7.2 23.7-18.4 29s-24.5 3.6-34.1-4.4L64 297.7V416c0 17.7-14.3 32-32 32s-32-14.3-32-32V96C0 78.3 14.3 64 32 64s32 14.3 32 32V214.3L235.5 71.4c9.5-7.9 22.8-9.7 34.1-4.4S288 83.6 288 96V214.3L459.5 71.4c9.5-7.9 22.8-9.7 34.1-4.4S512 83.6 512 96V416c0 12.4-7.2 23.7-18.4 29z',
    ],
  };
  var faFastBackward = faBackwardFast;
  var faRecycle = {
    prefix: 'fas',
    iconName: 'recycle',
    icon: [
      576,
      512,
      [9842, 9850, 9851],
      'f1b8',
      'M206.7 45.1C224.2 17 255 0 288 0s63.8 17 81.3 45.1l38.6 61.7 27-15.6c8.4-4.9 18.9-4.2 26.6 1.7s11.1 15.9 8.6 25.3l-23.4 87.4c-3.4 12.8-16.6 20.4-29.4 17l-87.4-23.4c-9.4-2.5-16.3-10.4-17.6-20s3.4-19.1 11.8-23.9l28.4-16.4L315 79c-5.8-9.3-16-15-27-15s-21.2 5.7-27 15l-17.5 28c-9.2 14.8-28.6 19.5-43.6 10.5c-15.3-9.2-20.2-29.2-10.7-44.4l17.5-28zM461.5 251.9c15-9 34.4-4.3 43.6 10.5l24.4 39.1c9.4 15.1 14.4 32.4 14.6 50.2c.3 53.1-42.7 96.4-95.8 96.4L352 448v32c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-64-64c-9.4-9.4-9.4-24.6 0-33.9l64-64c6.9-6.9 17.2-8.9 26.2-5.2s14.8 12.5 14.8 22.2v32l96.2 0c17.6 0 31.9-14.4 31.8-32c0-5.9-1.7-11.7-4.8-16.7l-24.4-39.1c-9.5-15.2-4.7-35.2 10.7-44.4zm-364.6-31L68 204.2c-8.4-4.9-13.1-14.3-11.8-23.9s8.2-17.5 17.6-20l87.4-23.4c12.8-3.4 26 4.2 29.4 17L214 241.2c2.5 9.4-.9 19.3-8.6 25.3s-18.2 6.6-26.6 1.7l-26.5-15.3-51.5 82.4c-3.1 5-4.8 10.8-4.8 16.7c-.1 17.6 14.2 32 31.8 32l32.2 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-32.2 0c-53.1 0-96.1-43.2-95.8-96.4c.1-17.8 5.1-35.1 14.6-50.2l50.3-80.5z',
    ],
  };
  var faUserAstronaut = {
    prefix: 'fas',
    iconName: 'user-astronaut',
    icon: [
      448,
      512,
      [],
      'f4fb',
      'M370.7 96.1C346.1 39.5 289.7 0 224 0S101.9 39.5 77.3 96.1C60.9 97.5 48 111.2 48 128v64c0 16.8 12.9 30.5 29.3 31.9C101.9 280.5 158.3 320 224 320s122.1-39.5 146.7-96.1c16.4-1.4 29.3-15.1 29.3-31.9V128c0-16.8-12.9-30.5-29.3-31.9zM336 144v16c0 53-43 96-96 96H208c-53 0-96-43-96-96V144c0-26.5 21.5-48 48-48H288c26.5 0 48 21.5 48 48zM189.3 162.7l-6-21.2c-.9-3.3-3.9-5.5-7.3-5.5s-6.4 2.2-7.3 5.5l-6 21.2-21.2 6c-3.3 .9-5.5 3.9-5.5 7.3s2.2 6.4 5.5 7.3l21.2 6 6 21.2c.9 3.3 3.9 5.5 7.3 5.5s6.4-2.2 7.3-5.5l6-21.2 21.2-6c3.3-.9 5.5-3.9 5.5-7.3s-2.2-6.4-5.5-7.3l-21.2-6zM112.7 316.5C46.7 342.6 0 407 0 482.3C0 498.7 13.3 512 29.7 512H128V448c0-17.7 14.3-32 32-32H288c17.7 0 32 14.3 32 32v64l98.3 0c16.4 0 29.7-13.3 29.7-29.7c0-75.3-46.7-139.7-112.7-165.8C303.9 338.8 265.5 352 224 352s-79.9-13.2-111.3-35.5zM176 448c-8.8 0-16 7.2-16 16v48h32V464c0-8.8-7.2-16-16-16zm96 32c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faPlaneSlash = {
    prefix: 'fas',
    iconName: 'plane-slash',
    icon: [
      640,
      512,
      [],
      'e069',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L440.6 320h73.8c34.2 0 93.7-28 93.7-64c0-35-59.5-64-93.7-64l-116.6 0L297.2 16.1C291.5 6.2 280.9 0 269.4 0H213.2c-10.6 0-18.3 10.2-15.4 20.4l40.3 140.9L38.8 5.1zm2.7 123.6C36 130.6 32 135.9 32 142c0 1.3 .2 2.6 .5 3.9L64 256 32.5 366.1c-.4 1.3-.5 2.6-.5 3.9c0 7.8 6.3 14 14 14H88c5 0 9.8-2.4 12.8-6.4L144 320H246.9l-49 171.6c-2.9 10.2 4.8 20.4 15.4 20.4l56.2 0c11.5 0 22.1-6.2 27.8-16.1l65.3-114.3L41.5 128.7z',
    ],
  };
  var faTrademark = {
    prefix: 'fas',
    iconName: 'trademark',
    icon: [
      640,
      512,
      [8482],
      'f25c',
      'M345.6 108.8c-8.3-11-22.7-15.5-35.7-11.2S288 114.2 288 128V384c0 17.7 14.3 32 32 32s32-14.3 32-32V224l86.4 115.2c6 8.1 15.5 12.8 25.6 12.8s19.6-4.7 25.6-12.8L576 224V384c0 17.7 14.3 32 32 32s32-14.3 32-32V128c0-13.8-8.8-26-21.9-30.4s-27.5 .1-35.7 11.2L464 266.7 345.6 108.8zM0 128c0 17.7 14.3 32 32 32H96V384c0 17.7 14.3 32 32 32s32-14.3 32-32V160h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32C14.3 96 0 110.3 0 128z',
    ],
  };
  var faBasketball = {
    prefix: 'fas',
    iconName: 'basketball',
    icon: [
      512,
      512,
      [127936, 'basketball-ball'],
      'f434',
      'M86.6 64C119 35.5 158.6 15 202.3 5.6C206 19.1 208 33.3 208 48c0 38.4-13.5 73.7-36.1 101.3L86.6 64zM64 86.6l85.2 85.2C121.7 194.5 86.4 208 48 208c-14.7 0-28.9-2-42.4-5.7C15 158.6 35.5 119 64 86.6zM256 0c64.9 0 124.2 24.2 169.4 64L256 233.4 194.6 172C222.9 138.5 240 95.3 240 48c0-16.2-2-32-5.8-47.1C241.4 .3 248.7 0 256 0zM48 240c47.3 0 90.5-17.1 124-45.4L233.4 256 64 425.4C24.2 380.2 0 320.9 0 256c0-7.3 .3-14.6 .9-21.8C16 238 31.8 240 48 240zm463.1 37.8C496 274 480.2 272 464 272c-47.3 0-90.5 17.1-124 45.4L278.6 256 448 86.6c39.8 45.1 64 104.4 64 169.4c0 7.3-.3 14.6-.9 21.8zm-4.7 31.9C497 353.4 476.5 393 448 425.4l-85.2-85.2C390.3 317.5 425.6 304 464 304c14.7 0 28.9 2 42.4 5.7zM340.1 362.7L425.4 448C393 476.5 353.4 497 309.7 506.4C306 492.9 304 478.7 304 464c0-38.4 13.5-73.7 36.1-101.3zM317.4 340C289.1 373.5 272 416.7 272 464c0 16.2 2 32 5.8 47.1c-7.2 .6-14.5 .9-21.8 .9c-64.9 0-124.2-24.2-169.4-64L256 278.6 317.4 340z',
    ],
  };
  var faBasketballBall = faBasketball;
  var faSatelliteDish = {
    prefix: 'fas',
    iconName: 'satellite-dish',
    icon: [
      512,
      512,
      [128225],
      'f7c0',
      'M192 32c0-17.7 14.3-32 32-32C383.1 0 512 128.9 512 288c0 17.7-14.3 32-32 32s-32-14.3-32-32C448 164.3 347.7 64 224 64c-17.7 0-32-14.3-32-32zM60.6 220.6L164.7 324.7l28.4-28.4c-.7-2.6-1.1-5.4-1.1-8.3c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32c-2.9 0-5.6-.4-8.3-1.1l-28.4 28.4L291.4 451.4c14.5 14.5 11.8 38.8-7.3 46.3C260.5 506.9 234.9 512 208 512C93.1 512 0 418.9 0 304c0-26.9 5.1-52.5 14.4-76.1c7.5-19 31.8-21.8 46.3-7.3zM224 96c106 0 192 86 192 192c0 17.7-14.3 32-32 32s-32-14.3-32-32c0-70.7-57.3-128-128-128c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faCircleUp = {
    prefix: 'fas',
    iconName: 'circle-up',
    icon: [
      512,
      512,
      [61467, 'arrow-alt-circle-up'],
      'f35b',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm11.3-395.3l112 112c4.6 4.6 5.9 11.5 3.5 17.4s-8.3 9.9-14.8 9.9H304v96c0 17.7-14.3 32-32 32H240c-17.7 0-32-14.3-32-32V256H144c-6.5 0-12.3-3.9-14.8-9.9s-1.1-12.9 3.5-17.4l112-112c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faArrowAltCircleUp = faCircleUp;
  var faMobileScreenButton = {
    prefix: 'fas',
    iconName: 'mobile-screen-button',
    icon: [
      384,
      512,
      ['mobile-alt'],
      'f3cd',
      'M16 64C16 28.7 44.7 0 80 0H304c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H80c-35.3 0-64-28.7-64-64V64zM224 448c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM304 64H80V384H304V64z',
    ],
  };
  var faMobileAlt = faMobileScreenButton;
  var faVolumeHigh = {
    prefix: 'fas',
    iconName: 'volume-high',
    icon: [
      640,
      512,
      [128266, 'volume-up'],
      'f028',
      'M533.6 32.5C598.5 85.3 640 165.8 640 256s-41.5 170.8-106.4 223.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C557.5 398.2 592 331.2 592 256s-34.5-142.2-88.7-186.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM473.1 107c43.2 35.2 70.9 88.9 70.9 149s-27.7 113.8-70.9 149c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C475.3 341.3 496 301.1 496 256s-20.7-85.3-53.2-111.8c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zm-60.5 74.5C434.1 199.1 448 225.9 448 256s-13.9 56.9-35.4 74.5c-10.3 8.4-25.4 6.8-33.8-3.5s-6.8-25.4 3.5-33.8C393.1 284.4 400 271 400 256s-6.9-28.4-17.7-37.3c-10.3-8.4-11.8-23.5-3.5-33.8s23.5-11.8 33.8-3.5zM301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3z',
    ],
  };
  var faVolumeUp = faVolumeHigh;
  var faUsersRays = {
    prefix: 'fas',
    iconName: 'users-rays',
    icon: [
      640,
      512,
      [],
      'e593',
      'M41 7C31.6-2.3 16.4-2.3 7 7S-2.3 31.6 7 41l72 72c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L41 7zM599 7L527 79c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l72-72c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0zM7 505c9.4 9.4 24.6 9.4 33.9 0l72-72c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L7 471c-9.4 9.4-9.4 24.6 0 33.9zm592 0c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-72-72c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l72 72zM320 256c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zM212.1 336c-2.7 7.5-4.1 15.6-4.1 24c0 13.3 10.7 24 24 24H408c13.3 0 24-10.7 24-24c0-8.4-1.4-16.5-4.1-24c-.5-1.4-1-2.7-1.6-4c-9.4-22.3-29.8-38.9-54.3-43c-3.9-.7-7.9-1-12-1H280c-4.1 0-8.1 .3-12 1c-.8 .1-1.7 .3-2.5 .5c-24.9 5.1-45.1 23-53.4 46.5zM175.8 224c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-26.5 32C119.9 256 96 279.9 96 309.3c0 14.7 11.9 26.7 26.7 26.7h56.1c8-34.1 32.8-61.7 65.2-73.6c-7.5-4.1-16.2-6.4-25.3-6.4H149.3zm368 80c14.7 0 26.7-11.9 26.7-26.7c0-29.5-23.9-53.3-53.3-53.3H421.3c-9.2 0-17.8 2.3-25.3 6.4c32.4 11.9 57.2 39.5 65.2 73.6h56.1zM464 224c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faWallet = {
    prefix: 'fas',
    iconName: 'wallet',
    icon: [
      512,
      512,
      [],
      'f555',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V192c0-35.3-28.7-64-64-64H80c-8.8 0-16-7.2-16-16s7.2-16 16-16H448c17.7 0 32-14.3 32-32s-14.3-32-32-32H64zM416 336c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faClipboardCheck = {
    prefix: 'fas',
    iconName: 'clipboard-check',
    icon: [
      384,
      512,
      [],
      'f46c',
      'M192 0c-41.8 0-77.4 26.7-90.5 64H64C28.7 64 0 92.7 0 128V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H282.5C269.4 26.7 233.8 0 192 0zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM307.8 275.8l-128 128c-10.9 10.9-28.7 10.9-39.6 0l-64-64c-10.9-10.9-10.9-28.7 0-39.6s28.7-10.9 39.6 0L160 344.4 268.2 236.2c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6z',
    ],
  };
  var faFileAudio = {
    prefix: 'fas',
    iconName: 'file-audio',
    icon: [
      384,
      512,
      [],
      'f1c7',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zm2 226.3c37.1 22.4 62 63.1 62 109.7s-24.9 87.3-62 109.7c-7.6 4.6-17.4 2.1-22-5.4s-2.1-17.4 5.4-22C269.4 401.5 288 370.9 288 336s-18.6-65.5-46.5-82.3c-7.6-4.6-10-14.4-5.4-22s14.4-10 22-5.4zm-91.9 30.9c6 2.5 9.9 8.3 9.9 14.8V400c0 6.5-3.9 12.3-9.9 14.8s-12.9 1.1-17.4-3.5L113.4 376H80c-8.8 0-16-7.2-16-16V312c0-8.8 7.2-16 16-16h33.4l35.3-35.3c4.6-4.6 11.5-5.9 17.4-3.5zm51 34.9c6.6-5.9 16.7-5.3 22.6 1.3C249.8 304.6 256 319.6 256 336s-6.2 31.4-16.3 42.7c-5.9 6.6-16 7.1-22.6 1.3s-7.1-16-1.3-22.6c5.1-5.7 8.1-13.1 8.1-21.3s-3.1-15.7-8.1-21.3c-5.9-6.6-5.3-16.7 1.3-22.6z',
    ],
  };
  var faBurger = {
    prefix: 'fas',
    iconName: 'burger',
    icon: [
      512,
      512,
      ['hamburger'],
      'f805',
      'M61.1 224C45 224 32 211 32 194.9c0-1.9 .2-3.7 .6-5.6C37.9 168.3 78.8 32 256 32s218.1 136.3 223.4 157.3c.5 1.9 .6 3.7 .6 5.6c0 16.1-13 29.1-29.1 29.1H61.1zM144 128c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm240 16c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zM272 96c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zM16 304c0-26.5 21.5-48 48-48H448c26.5 0 48 21.5 48 48s-21.5 48-48 48H64c-26.5 0-48-21.5-48-48zm16 96c0-8.8 7.2-16 16-16H464c8.8 0 16 7.2 16 16v16c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V400z',
    ],
  };
  var faHamburger = faBurger;
  var faWrench = {
    prefix: 'fas',
    iconName: 'wrench',
    icon: [
      512,
      512,
      [128295],
      'f0ad',
      'M352 320c88.4 0 160-71.6 160-160c0-15.3-2.2-30.1-6.2-44.2c-3.1-10.8-16.4-13.2-24.3-5.3l-76.8 76.8c-3 3-7.1 4.7-11.3 4.7H336c-8.8 0-16-7.2-16-16V118.6c0-4.2 1.7-8.3 4.7-11.3l76.8-76.8c7.9-7.9 5.4-21.2-5.3-24.3C382.1 2.2 367.3 0 352 0C263.6 0 192 71.6 192 160c0 19.1 3.4 37.5 9.5 54.5L19.9 396.1C7.2 408.8 0 426.1 0 444.1C0 481.6 30.4 512 67.9 512c18 0 35.3-7.2 48-19.9L297.5 310.5c17 6.2 35.4 9.5 54.5 9.5zM80 456c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faBugs = {
    prefix: 'fas',
    iconName: 'bugs',
    icon: [
      640,
      512,
      [],
      'e4d0',
      'M196.5 107.4l33.4-73.5c5.5-12.1 .1-26.3-11.9-31.8s-26.3-.1-31.8 11.9L160 71.7 133.9 14.1C128.4 2 114.1-3.3 102.1 2.1S84.7 21.9 90.1 33.9l33.4 73.5c-10.2 7.1-18.2 17-22.9 28.6h-17l-4.1-20.7c-2.6-13-15.2-21.4-28.2-18.8s-21.4 15.2-18.8 28.2l8 40C42.7 175.9 52.6 184 64 184H96v23.3l-37.8 9.5c-9.5 2.4-16.6 10.2-17.9 19.9l-8 56c-1.9 13.1 7.2 25.3 20.4 27.2s25.3-7.2 27.2-20.4l5.7-40 18.4-4.6C114.7 274.6 135.8 288 160 288s45.3-13.4 56.1-33.2l18.4 4.6 5.7 40c1.9 13.1 14 22.2 27.2 20.4s22.2-14 20.4-27.2l-8-56c-1.4-9.7-8.5-17.5-17.9-19.9L224 207.3V184h32c11.4 0 21.3-8.1 23.5-19.3l8-40c2.6-13-5.8-25.6-18.8-28.2s-25.6 5.8-28.2 18.8L236.3 136h-17c-4.7-11.6-12.7-21.5-22.9-28.6zM528 286.5l65.6-47c10.8-7.7 13.3-22.7 5.6-33.5s-22.7-13.3-33.5-5.6l-51.4 36.8 6.1-62.9c1.3-13.2-8.4-24.9-21.6-26.2s-24.9 8.4-26.2 21.6L464.8 250c-12.3 1-24.2 5.6-34.1 13.3L416 254.8l6.8-20c4.2-12.6-2.5-26.2-15-30.4s-26.2 2.5-30.4 15l-13.1 38.6c-3.7 10.8 .8 22.8 10.7 28.5l27.7 16L391 322.7 353.5 312c-9.4-2.7-19.5 .6-25.5 8.3l-34.9 44.5c-8.2 10.4-6.4 25.5 4.1 33.7s25.5 6.4 33.7-4.1l25-31.8 18.2 5.2c-.5 22.6 11 44.7 32 56.8s45.9 11 65.2-.7l13.6 13.2-15.1 37.5c-4.9 12.3 1 26.3 13.3 31.2s26.3-1 31.2-13.3L535.5 440c3.6-9.1 1.4-19.4-5.6-26.2l-28-27.1 11.6-20.1 27.7 16c9.9 5.7 22.5 3.7 30-4.9L598.2 347c8.7-10 7.8-25.1-2.2-33.9s-25.1-7.8-33.9 2.2l-13.9 15.9-14.7-8.5c1.7-12.4-.2-25-5.5-36.2z',
    ],
  };
  var faRupeeSign = {
    prefix: 'fas',
    iconName: 'rupee-sign',
    icon: [
      448,
      512,
      [8360, 'rupee'],
      'f156',
      'M0 64C0 46.3 14.3 32 32 32h80c79.5 0 144 64.5 144 144c0 58.8-35.2 109.3-85.7 131.7l51.4 128.4c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8L106.3 320H64V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V288 64zM64 256h48c44.2 0 80-35.8 80-80s-35.8-80-80-80H64V256zm256.5 16.4c-.9 6 0 8.7 .4 9.8c.4 1.1 1.4 2.6 4.2 4.9c7.2 5.7 18.7 10 37.9 16.8l1.3 .5c16 5.6 38.7 13.6 55.7 28.1c9.5 8.1 17.9 18.6 23.1 32.3c5.1 13.7 6.1 28.5 3.8 44c-4.2 28.1-20.5 49.3-43.8 60.9c-22.1 11-48.1 12.5-73.2 8l-.2 0 0 0c-9.3-1.8-20.5-5.7-29.3-9c-6-2.3-12.6-4.9-17.7-6.9l0 0c-2.5-1-4.6-1.8-6.3-2.5c-16.5-6.4-24.6-25-18.2-41.4s25-24.6 41.4-18.2c2.6 1 5.2 2 7.9 3.1l0 0c4.8 1.9 9.8 3.9 15.4 6c8.8 3.3 15.3 5.4 18.7 6c15.7 2.8 26.7 .8 32.9-2.3c5-2.5 8-6 9.1-13c1-6.9 .2-10.5-.5-12.3c-.6-1.7-1.8-3.6-4.5-5.9c-6.9-5.8-18.2-10.4-36.9-17l-3-1.1c-15.5-5.4-37-13-53.3-25.9c-9.5-7.5-18.3-17.6-23.7-31c-5.4-13.4-6.6-28-4.4-43.2c8.5-57.1 67-78 116.9-68.9c6.9 1.3 27.3 5.8 35.4 8.4c16.9 5.2 26.3 23.2 21.1 40.1s-23.2 26.3-40.1 21.1c-4.7-1.4-22.3-5.5-27.9-6.5c-14.6-2.7-25.8-.4-32.6 3.2c-6.3 3.3-8.9 7.6-9.5 12z',
    ],
  };
  var faRupee = faRupeeSign;
  var faFileImage = {
    prefix: 'fas',
    iconName: 'file-image',
    icon: [
      384,
      512,
      [128443],
      'f1c5',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM128 256c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm88 32c5.3 0 10.2 2.6 13.2 6.9l88 128c3.4 4.9 3.7 11.3 1 16.5s-8.2 8.6-14.2 8.6H216 176 128 80c-5.8 0-11.1-3.1-13.9-8.1s-2.8-11.2 .2-16.1l48-80c2.9-4.8 8.1-7.8 13.7-7.8s10.8 2.9 13.7 7.8l12.8 21.4 48.3-70.2c3-4.3 7.9-6.9 13.2-6.9z',
    ],
  };
  var faCircleQuestion = {
    prefix: 'fas',
    iconName: 'circle-question',
    icon: [
      512,
      512,
      [62108, 'question-circle'],
      'f059',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM288 352c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faQuestionCircle = faCircleQuestion;
  var faPlaneDeparture = {
    prefix: 'fas',
    iconName: 'plane-departure',
    icon: [
      640,
      512,
      [128747],
      'f5b0',
      'M381 114.9L186.1 41.8c-16.7-6.2-35.2-5.3-51.1 2.7L89.1 67.4C78 73 77.2 88.5 87.6 95.2l146.9 94.5L136 240 77.8 214.1c-8.7-3.9-18.8-3.7-27.3 .6L18.3 230.8c-9.3 4.7-11.8 16.8-5 24.7l73.1 85.3c6.1 7.1 15 11.2 24.3 11.2H248.4c5 0 9.9-1.2 14.3-3.4L535.6 212.2c46.5-23.3 82.5-63.3 100.8-112C645.9 75 627.2 48 600.2 48H542.8c-20.2 0-40.2 4.8-58.2 14L381 114.9zM0 480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faHandshakeSlash = {
    prefix: 'fas',
    iconName: 'handshake-slash',
    icon: [
      640,
      512,
      [],
      'e060',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-135-105.8c-1.1-11.4-6.3-22.3-15.3-30.7l-134.2-123-23.4 18.2-26-20.3 77.2-60.1c7-5.4 17-4.2 22.5 2.8s4.2 17-2.8 22.5l-20.9 16.2L512 316.8V128h-.7l-3.9-2.5L434.8 79c-15.3-9.8-33.2-15-51.4-15c-21.8 0-43 7.5-60 21.2l-89.7 72.6-25.8-20.3 81.8-66.2c-11.6-4.9-24.1-7.4-36.8-7.4C234 64 215.7 69.6 200 80l-35.5 23.7L38.8 5.1zM96 171.6L40.6 128H0V352c0 17.7 14.3 32 32 32H64c17.7 0 32-14.3 32-32V171.6zM413.6 421.9L128 196.9V352h28.2l91.4 83.4c19.6 17.9 49.9 16.5 67.8-3.1c5.5-6.1 9.2-13.2 11.1-20.6l17 15.6c19.5 17.9 49.9 16.6 67.8-2.9c.8-.8 1.5-1.7 2.2-2.6zM48 352c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zM544 128V352c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V128H544zm64 208c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faBookBookmark = {
    prefix: 'fas',
    iconName: 'book-bookmark',
    icon: [
      448,
      512,
      [],
      'e0bb',
      'M0 96C0 43 43 0 96 0h96V190.7c0 13.4 15.5 20.9 26 12.5L272 160l54 43.2c10.5 8.4 26 .9 26-12.5V0h32 32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faCodeBranch = {
    prefix: 'fas',
    iconName: 'code-branch',
    icon: [
      448,
      512,
      [],
      'f126',
      'M80 104c13.3 0 24-10.7 24-24s-10.7-24-24-24S56 66.7 56 80s10.7 24 24 24zm80-24c0 32.8-19.7 61-48 73.3v87.8c18.8-10.9 40.7-17.1 64-17.1h96c35.3 0 64-28.7 64-64v-6.7C307.7 141 288 112.8 288 80c0-44.2 35.8-80 80-80s80 35.8 80 80c0 32.8-19.7 61-48 73.3V160c0 70.7-57.3 128-128 128H176c-35.3 0-64 28.7-64 64v6.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V352 153.3C19.7 141 0 112.8 0 80C0 35.8 35.8 0 80 0s80 35.8 80 80zm232 0c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zM80 456c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faHatCowboy = {
    prefix: 'fas',
    iconName: 'hat-cowboy',
    icon: [
      640,
      512,
      [],
      'f8c0',
      'M320 64c14.4 0 22.3-7 30.8-14.4C360.4 41.1 370.7 32 392 32c49.3 0 84.4 152.2 97.9 221.9C447.8 272.1 390.9 288 320 288s-127.8-15.9-169.9-34.1C163.6 184.2 198.7 32 248 32c21.3 0 31.6 9.1 41.2 17.6C297.7 57 305.6 64 320 64zM111.1 270.7c47.2 24.5 117.5 49.3 209 49.3s161.8-24.8 208.9-49.3c24.8-12.9 49.8-28.3 70.1-47.7c7.9-7.9 20.2-9.2 29.6-3.3c9.5 5.9 13.5 17.9 9.9 28.5c-13.5 37.7-38.4 72.3-66.1 100.6C523.7 398.9 443.6 448 320 448s-203.6-49.1-252.5-99.2C39.8 320.4 14.9 285.8 1.4 248.1c-3.6-10.6 .4-22.6 9.9-28.5c9.5-5.9 21.7-4.5 29.6 3.3c20.4 19.4 45.3 34.8 70.1 47.7z',
    ],
  };
  var faBridge = {
    prefix: 'fas',
    iconName: 'bridge',
    icon: [
      576,
      512,
      [],
      'e4c8',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96H72v64H0V288c53 0 96 43 96 96v64c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V384c0-53 43-96 96-96s96 43 96 96v64c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V384c0-53 43-96 96-96V160H504V96h40c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM456 96v64H376V96h80zM328 96v64H248V96h80zM200 96v64H120V96h80z',
    ],
  };
  var faPhoneFlip = {
    prefix: 'fas',
    iconName: 'phone-flip',
    icon: [
      512,
      512,
      [128381, 'phone-alt'],
      'f879',
      'M347.1 24.6c7.7-18.6 28-28.5 47.4-23.2l88 24C499.9 30.2 512 46 512 64c0 247.4-200.6 448-448 448c-18 0-33.8-12.1-38.6-29.5l-24-88c-5.3-19.4 4.6-39.7 23.2-47.4l96-40c16.3-6.8 35.2-2.1 46.3 11.6L207.3 368c70.4-33.3 127.4-90.3 160.7-160.7L318.7 167c-13.7-11.2-18.4-30-11.6-46.3l40-96z',
    ],
  };
  var faPhoneAlt = faPhoneFlip;
  var faTruckFront = {
    prefix: 'fas',
    iconName: 'truck-front',
    icon: [
      512,
      512,
      [],
      'e2b7',
      'M0 80C0 35.8 35.8 0 80 0H432c44.2 0 80 35.8 80 80V368c0 26.2-12.6 49.4-32 64v48c0 17.7-14.3 32-32 32H416c-17.7 0-32-14.3-32-32V448H128v32c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V432C12.6 417.4 0 394.2 0 368V80zm129.9 72.2L112 224H400l-17.9-71.8C378.5 138 365.7 128 351 128H161c-14.7 0-27.5 10-31 24.2zM128 320c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm288 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faCat = {
    prefix: 'fas',
    iconName: 'cat',
    icon: [
      512,
      512,
      [128008],
      'f6be',
      'M288 192h17.1c22.1 38.3 63.5 64 110.9 64c11 0 21.8-1.4 32-4v4 32V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V339.2L248 448h56c17.7 0 32 14.3 32 32s-14.3 32-32 32H160c-53 0-96-43-96-96V192.5c0-16.1-12-29.8-28-31.8l-7.9-1C10.5 157.6-1.9 141.6 .2 124s18.2-30 35.7-27.8l7.9 1c48 6 84.1 46.8 84.1 95.3v85.3c34.4-51.7 93.2-85.8 160-85.8zm160 26.5v0c-10 3.5-20.8 5.5-32 5.5c-28.4 0-54-12.4-71.6-32h0c-3.7-4.1-7-8.5-9.9-13.2C325.3 164 320 146.6 320 128v0V32 12 10.7C320 4.8 324.7 .1 330.6 0h.2c3.3 0 6.4 1.6 8.4 4.2l0 .1L352 21.3l27.2 36.3L384 64h64l4.8-6.4L480 21.3 492.8 4.3l0-.1c2-2.6 5.1-4.2 8.4-4.2h.2C507.3 .1 512 4.8 512 10.7V12 32v96c0 17.3-4.6 33.6-12.6 47.6c-11.3 19.8-29.6 35.2-51.4 42.9zM400 128c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 16c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faAnchorCircleExclamation = {
    prefix: 'fas',
    iconName: 'anchor-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e4ab',
      'M256 96c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm85.1 80C367 158.8 384 129.4 384 96c0-53-43-96-96-96s-96 43-96 96c0 33.4 17 62.8 42.9 80H224c-17.7 0-32 14.3-32 32s14.3 32 32 32h32V448H208c-53 0-96-43-96-96v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97 263c-9.4-9.4-24.6-9.4-33.9 0L7 319c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 88.4 71.6 160 160 160h80 80c8.2 0 16.3-.6 24.2-1.8c-22.2-16.2-40.4-37.5-53-62.2H320V368 240h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H341.1zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faTruckField = {
    prefix: 'fas',
    iconName: 'truck-field',
    icon: [
      640,
      512,
      [],
      'e58d',
      'M32 96c0-35.3 28.7-64 64-64H320c23.7 0 44.4 12.9 55.4 32h51.8c25.3 0 48.2 14.9 58.5 38l52.8 118.8c.5 1.1 .9 2.1 1.3 3.2H544c35.3 0 64 28.7 64 64v32c17.7 0 32 14.3 32 32s-14.3 32-32 32H576c0 53-43 96-96 96s-96-43-96-96H256c0 53-43 96-96 96s-96-43-96-96H32c-17.7 0-32-14.3-32-32s14.3-32 32-32V288c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32V96zM384 224h85.9l-42.7-96H384v96zM160 432c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm368-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faRoute = {
    prefix: 'fas',
    iconName: 'route',
    icon: [
      512,
      512,
      [],
      'f4d7',
      'M416 256s96-96 96-160c0-53-43-96-96-96s-96 43-96 96c0 29.4 20.2 65.5 42.1 96H320c-53 0-96 43-96 96s43 96 96 96h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H188.6c-6.2 9.6-12.6 18.8-19 27.2c-10.7 14.2-21.3 26.9-30 36.8H416c53 0 96-43 96-96s-43-96-96-96H320c-17.7 0-32-14.3-32-32s14.3-32 32-32h96zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM149.9 448c21.9-30.5 42.1-66.6 42.1-96c0-53-43-96-96-96s-96 43-96 96c0 64 96 160 96 160s3.5-3.5 9.2-9.6c.4-.4 .7-.8 1.1-1.2c3.3-3.5 7.1-7.8 11.4-12.8c.2-.2 .4-.4 .6-.6c9.4-10.8 20.7-24.6 31.6-39.8zM96 384c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faClipboardQuestion = {
    prefix: 'fas',
    iconName: 'clipboard-question',
    icon: [
      384,
      512,
      [],
      'e4e3',
      'M192 0c-41.8 0-77.4 26.7-90.5 64H64C28.7 64 0 92.7 0 128V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H282.5C269.4 26.7 233.8 0 192 0zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM105.8 229.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L216 328.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V314.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H158.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 416c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faPanorama = {
    prefix: 'fas',
    iconName: 'panorama',
    icon: [
      640,
      512,
      [],
      'e209',
      'M45.6 32C20.4 32 0 52.4 0 77.6V434.4C0 459.6 20.4 480 45.6 480c5.1 0 10-.8 14.7-2.4C74.6 472.8 177.6 440 320 440s245.4 32.8 259.6 37.6c4.7 1.6 9.7 2.4 14.7 2.4c25.2 0 45.6-20.4 45.6-45.6V77.6C640 52.4 619.6 32 594.4 32c-5 0-10 .8-14.7 2.4C565.4 39.2 462.4 72 320 72S74.6 39.2 60.4 34.4C55.6 32.8 50.7 32 45.6 32zM160 160c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm208 0c7.9 0 15.4 3.9 19.8 10.5L512.3 353c5.4 8 5.6 18.4 .4 26.5s-14.7 12.3-24.2 10.7C442.7 382.4 385.2 376 320 376c-65.6 0-123.4 6.5-169.3 14.4c-9.8 1.7-19.7-2.9-24.7-11.5s-4.3-19.4 1.9-27.2L197.3 265c4.6-5.7 11.4-9 18.7-9s14.2 3.3 18.7 9l26.4 33.1 87-127.6c4.5-6.6 11.9-10.5 19.8-10.5z',
    ],
  };
  var faCommentMedical = {
    prefix: 'fas',
    iconName: 'comment-medical',
    icon: [
      512,
      512,
      [],
      'f7f5',
      'M256 448c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3 0 0 0 0 0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9zM224 160c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H288v48c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V272H176c-8.8 0-16-7.2-16-16V224c0-8.8 7.2-16 16-16h48V160z',
    ],
  };
  var faTeethOpen = {
    prefix: 'fas',
    iconName: 'teeth-open',
    icon: [
      576,
      512,
      [],
      'f62f',
      'M96 32C43 32 0 75 0 128v64c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-53-43-96-96-96H96zM224 96c26.5 0 48 21.5 48 48v56c0 13.3-10.7 24-24 24H200c-13.3 0-24-10.7-24-24V144c0-26.5 21.5-48 48-48zm80 48c0-26.5 21.5-48 48-48s48 21.5 48 48v56c0 13.3-10.7 24-24 24H328c-13.3 0-24-10.7-24-24V144zM96 128c26.5 0 48 21.5 48 48v24c0 13.3-10.7 24-24 24H72c-13.3 0-24-10.7-24-24V176c0-26.5 21.5-48 48-48zm336 48c0-26.5 21.5-48 48-48s48 21.5 48 48v24c0 13.3-10.7 24-24 24H456c-13.3 0-24-10.7-24-24V176zM96 480H480c53 0 96-43 96-96V352c0-35.3-28.7-64-64-64H64c-35.3 0-64 28.7-64 64v32c0 53 43 96 96 96zm0-64c-26.5 0-48-21.5-48-48V344c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v24c0 26.5-21.5 48-48 48zm80-48V344c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v24c0 26.5-21.5 48-48 48s-48-21.5-48-48zm176 48c-26.5 0-48-21.5-48-48V344c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v24c0 26.5-21.5 48-48 48zm80-48V344c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v24c0 26.5-21.5 48-48 48s-48-21.5-48-48z',
    ],
  };
  var faFileCircleMinus = {
    prefix: 'fas',
    iconName: 'file-circle-minus',
    icon: [
      576,
      512,
      [],
      'e4ed',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zM576 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-64 0c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16s7.2 16 16 16H496c8.8 0 16-7.2 16-16z',
    ],
  };
  var faTags = {
    prefix: 'fas',
    iconName: 'tags',
    icon: [
      512,
      512,
      [],
      'f02c',
      'M345 39.1L472.8 168.4c52.4 53 52.4 138.2 0 191.2L360.8 472.9c-9.3 9.4-24.5 9.5-33.9 .2s-9.5-24.5-.2-33.9L438.6 325.9c33.9-34.3 33.9-89.4 0-123.7L310.9 72.9c-9.3-9.4-9.2-24.6 .2-33.9s24.6-9.2 33.9 .2zM0 229.5V80C0 53.5 21.5 32 48 32H197.5c17 0 33.3 6.7 45.3 18.7l168 168c25 25 25 65.5 0 90.5L277.3 442.7c-25 25-65.5 25-90.5 0l-168-168C6.7 262.7 0 246.5 0 229.5zM144 144c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faWineGlass = {
    prefix: 'fas',
    iconName: 'wine-glass',
    icon: [
      320,
      512,
      [127863],
      'f4e3',
      'M64 0C47.4 0 33.5 12.8 32.1 29.3l-14 168.4c-6 72 42.5 135.2 109.9 150.6V448H80c-17.7 0-32 14.3-32 32s14.3 32 32 32h80 80c17.7 0 32-14.3 32-32s-14.3-32-32-32H192V348.4c67.4-15.4 115.9-78.6 109.9-150.6l-14-168.4C286.5 12.8 272.6 0 256 0H64zM88.1 128l5.3-64H226.6l5.3 64H88.1z',
    ],
  };
  var faForwardFast = {
    prefix: 'fas',
    iconName: 'forward-fast',
    icon: [
      512,
      512,
      [9197, 'fast-forward'],
      'f050',
      'M18.4 445c11.2 5.3 24.5 3.6 34.1-4.4L224 297.7V416c0 12.4 7.2 23.7 18.4 29s24.5 3.6 34.1-4.4L448 297.7V416c0 17.7 14.3 32 32 32s32-14.3 32-32V96c0-17.7-14.3-32-32-32s-32 14.3-32 32V214.3L276.5 71.4c-9.5-7.9-22.8-9.7-34.1-4.4S224 83.6 224 96V214.3L52.5 71.4c-9.5-7.9-22.8-9.7-34.1-4.4S0 83.6 0 96V416c0 12.4 7.2 23.7 18.4 29z',
    ],
  };
  var faFastForward = faForwardFast;
  var faFaceMehBlank = {
    prefix: 'fas',
    iconName: 'face-meh-blank',
    icon: [
      512,
      512,
      [128566, 'meh-blank'],
      'f5a4',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM208.4 208c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm128 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faMehBlank = faFaceMehBlank;
  var faSquareParking = {
    prefix: 'fas',
    iconName: 'square-parking',
    icon: [
      448,
      512,
      [127359, 'parking'],
      'f540',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM192 256h48c17.7 0 32-14.3 32-32s-14.3-32-32-32H192v64zm48 64H192v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V288 168c0-22.1 17.9-40 40-40h72c53 0 96 43 96 96s-43 96-96 96z',
    ],
  };
  var faParking = faSquareParking;
  var faHouseSignal = {
    prefix: 'fas',
    iconName: 'house-signal',
    icon: [
      576,
      512,
      [],
      'e012',
      'M314.3 8.5c12.3-11.3 31.2-11.3 43.4 0l208 192c9.7 8.9 12.9 22.9 8.1 35.2S557.2 256 544 256H512V368c0 26.5-21.5 48-48 48H278.1C259.6 350.8 216.8 295.9 160 261.7V256h-9.9c-16.5-9-34-16.2-52.3-21.6c-4.1-12-.8-25.3 8.5-34l208-192zM304 192c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V208c0-8.8-7.2-16-16-16H304zM24 256c128.1 0 232 103.9 232 232c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-101.6-82.4-184-184-184c-13.3 0-24-10.7-24-24s10.7-24 24-24zm8 256c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM0 376c0-13.3 10.7-24 24-24c75.1 0 136 60.9 136 136c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-48.6-39.4-88-88-88c-13.3 0-24-10.7-24-24z',
    ],
  };
  var faBarsProgress = {
    prefix: 'fas',
    iconName: 'bars-progress',
    icon: [
      512,
      512,
      ['tasks-alt'],
      'f828',
      'M448 160H320V128H448v32zM48 64C21.5 64 0 85.5 0 112v64c0 26.5 21.5 48 48 48H464c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zM448 352v32H192V352H448zM48 288c-26.5 0-48 21.5-48 48v64c0 26.5 21.5 48 48 48H464c26.5 0 48-21.5 48-48V336c0-26.5-21.5-48-48-48H48z',
    ],
  };
  var faTasksAlt = faBarsProgress;
  var faFaucetDrip = {
    prefix: 'fas',
    iconName: 'faucet-drip',
    icon: [
      512,
      512,
      [128688],
      'e006',
      'M224 0c17.7 0 32 14.3 32 32V44l96-12c17.7 0 32 14.3 32 32s-14.3 32-32 32L256 84l-31-3.9-1-.1-1 .1L192 84 96 96C78.3 96 64 81.7 64 64s14.3-32 32-32l96 12V32c0-17.7 14.3-32 32-32zM0 224c0-17.7 14.3-32 32-32h96l22.6-22.6c6-6 14.1-9.4 22.6-9.4H192V116.2l32-4 32 4V160h18.7c8.5 0 16.6 3.4 22.6 9.4L320 192h32c88.4 0 160 71.6 160 160c0 17.7-14.3 32-32 32H416c-17.7 0-32-14.3-32-32s-14.3-32-32-32H315.9c-20.2 29-53.9 48-91.9 48s-71.7-19-91.9-48H32c-17.7 0-32-14.3-32-32V224zM436.8 423.4c1.9-4.5 6.3-7.4 11.2-7.4s9.2 2.9 11.2 7.4l18.2 42.4c1.8 4.1 2.7 8.6 2.7 13.1V480c0 17.7-14.3 32-32 32s-32-14.3-32-32v-1.2c0-4.5 .9-8.9 2.7-13.1l18.2-42.4z',
    ],
  };
  var faCartFlatbed = {
    prefix: 'fas',
    iconName: 'cart-flatbed',
    icon: [
      640,
      512,
      ['dolly-flatbed'],
      'f474',
      'M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64H48c8.8 0 16 7.2 16 16V368c0 44.2 35.8 80 80 80h18.7c-1.8 5-2.7 10.4-2.7 16c0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1-11-2.7-16H450.7c-1.8 5-2.7 10.4-2.7 16c0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1-11-2.7-16H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H144c-8.8 0-16-7.2-16-16V80C128 35.8 92.2 0 48 0H32zM192 80V272c0 26.5 21.5 48 48 48H560c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H464V176c0 5.9-3.2 11.3-8.5 14.1s-11.5 2.5-16.4-.8L400 163.2l-39.1 26.1c-4.9 3.3-11.2 3.6-16.4 .8s-8.5-8.2-8.5-14.1V32H240c-26.5 0-48 21.5-48 48z',
    ],
  };
  var faDollyFlatbed = faCartFlatbed;
  var faBanSmoking = {
    prefix: 'fas',
    iconName: 'ban-smoking',
    icon: [
      512,
      512,
      [128685, 'smoking-ban'],
      'f54d',
      'M99.5 144.8L178.7 224l96 96 92.5 92.5C335.9 434.9 297.5 448 256 448C150 448 64 362 64 256c0-41.5 13.1-79.9 35.5-111.2zM333.3 288l-32-32H384v32H333.3zm32 32H400c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H269.3L144.8 99.5C176.1 77.1 214.5 64 256 64c106 0 192 86 192 192c0 41.5-13.1 79.9-35.5 111.2L365.3 320zM256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM272 96c-8.8 0-16 7.2-16 16c0 26.5 21.5 48 48 48h32c8.8 0 16 7.2 16 16s7.2 16 16 16s16-7.2 16-16c0-26.5-21.5-48-48-48H304c-8.8 0-16-7.2-16-16s-7.2-16-16-16zM229.5 320l-96-96H112c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16H229.5z',
    ],
  };
  var faSmokingBan = faBanSmoking;
  var faTerminal = {
    prefix: 'fas',
    iconName: 'terminal',
    icon: [
      640,
      512,
      [],
      'f120',
      'M41.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 41.4 86.6zM288 416H576c17.7 0 32 14.3 32 32s-14.3 32-32 32H288c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faMobileButton = {
    prefix: 'fas',
    iconName: 'mobile-button',
    icon: [
      384,
      512,
      [],
      'f10b',
      'M80 0C44.7 0 16 28.7 16 64V448c0 35.3 28.7 64 64 64H304c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H80zM192 464c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faHouseMedicalFlag = {
    prefix: 'fas',
    iconName: 'house-medical-flag',
    icon: [
      640,
      512,
      [],
      'e514',
      'M480 0c17.7 0 32 14.3 32 32H624c8.8 0 16 7.2 16 16V176c0 8.8-7.2 16-16 16H512V512H448V192 32c0-17.7 14.3-32 32-32zM276.8 39.7L416 159V512h1l-.2 0H96c-17.7 0-32-14.3-32-32V288H32c-13.4 0-25.4-8.3-30-20.9s-1-26.7 9.2-35.4l224-192c12-10.3 29.7-10.3 41.7 0zM224 208v48H176c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320h48c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H288V208c0-8.8-7.2-16-16-16H240c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faBasketShopping = {
    prefix: 'fas',
    iconName: 'basket-shopping',
    icon: [
      576,
      512,
      ['shopping-basket'],
      'f291',
      'M253.3 35.1c6.1-11.8 1.5-26.3-10.2-32.4s-26.3-1.5-32.4 10.2L117.6 192H32c-17.7 0-32 14.3-32 32s14.3 32 32 32L83.9 463.5C91 492 116.6 512 146 512H430c29.4 0 55-20 62.1-48.5L544 256c17.7 0 32-14.3 32-32s-14.3-32-32-32H458.4L365.3 12.9C359.2 1.2 344.7-3.4 332.9 2.7s-16.3 20.6-10.2 32.4L404.3 192H171.7L253.3 35.1zM192 304v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16s16 7.2 16 16zm96-16c8.8 0 16 7.2 16 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16zm128 16v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V304c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faShoppingBasket = faBasketShopping;
  var faTape = {
    prefix: 'fas',
    iconName: 'tape',
    icon: [
      576,
      512,
      [],
      'f4db',
      'M380.8 416c41.5-40.7 67.2-97.3 67.2-160C448 132.3 347.7 32 224 32S0 132.3 0 256S100.3 480 224 480H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H380.8zM224 352c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96zm64-96c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faBusSimple = {
    prefix: 'fas',
    iconName: 'bus-simple',
    icon: [
      448,
      512,
      ['bus-alt'],
      'f55e',
      'M224 0C348.8 0 448 35.2 448 80V96 416c0 17.7-14.3 32-32 32v32c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V448H128v32c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32l0-32c-17.7 0-32-14.3-32-32V96 80C0 35.2 99.2 0 224 0zM64 128V256c0 17.7 14.3 32 32 32H352c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32zM80 400c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm288 0c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faBusAlt = faBusSimple;
  var faEye = {
    prefix: 'fas',
    iconName: 'eye',
    icon: [
      576,
      512,
      [128065],
      'f06e',
      'M288 32c-80.8 0-145.5 36.8-192.6 80.6C48.6 156 17.3 208 2.5 243.7c-3.3 7.9-3.3 16.7 0 24.6C17.3 304 48.6 356 95.4 399.4C142.5 443.2 207.2 480 288 480s145.5-36.8 192.6-80.6c46.8-43.5 78.1-95.4 93-131.1c3.3-7.9 3.3-16.7 0-24.6c-14.9-35.7-46.2-87.7-93-131.1C433.5 68.8 368.8 32 288 32zM432 256c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zM288 192c0 35.3-28.7 64-64 64c-11.5 0-22.3-3-31.6-8.4c-.2 2.8-.4 5.5-.4 8.4c0 53 43 96 96 96s96-43 96-96s-43-96-96-96c-2.8 0-5.6 .1-8.4 .4c5.3 9.3 8.4 20.1 8.4 31.6z',
    ],
  };
  var faFaceSadCry = {
    prefix: 'fas',
    iconName: 'face-sad-cry',
    icon: [
      512,
      512,
      [128557, 'sad-cry'],
      'f5b3',
      'M352 493.4c-29.6 12-62.1 18.6-96 18.6s-66.4-6.6-96-18.6V288c0-8.8-7.2-16-16-16s-16 7.2-16 16V477.8C51.5 433.5 0 350.8 0 256C0 114.6 114.6 0 256 0S512 114.6 512 256c0 94.8-51.5 177.5-128 221.8V288c0-8.8-7.2-16-16-16s-16 7.2-16 16V493.4zM195.2 233.6c5.3 7.1 15.3 8.5 22.4 3.2s8.5-15.3 3.2-22.4c-30.4-40.5-91.2-40.5-121.6 0c-5.3 7.1-3.9 17.1 3.2 22.4s17.1 3.9 22.4-3.2c17.6-23.5 52.8-23.5 70.4 0zm121.6 0c17.6-23.5 52.8-23.5 70.4 0c5.3 7.1 15.3 8.5 22.4 3.2s8.5-15.3 3.2-22.4c-30.4-40.5-91.2-40.5-121.6 0c-5.3 7.1-3.9 17.1 3.2 22.4s17.1 3.9 22.4-3.2zM208 336v32c0 26.5 21.5 48 48 48s48-21.5 48-48V336c0-26.5-21.5-48-48-48s-48 21.5-48 48z',
    ],
  };
  var faSadCry = faFaceSadCry;
  var faAudioDescription = {
    prefix: 'fas',
    iconName: 'audio-description',
    icon: [
      576,
      512,
      [],
      'f29e',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM213.5 173.3l72 144c5.9 11.9 1.1 26.3-10.7 32.2s-26.3 1.1-32.2-10.7l-9.4-18.9H150.9l-9.4 18.9c-5.9 11.9-20.3 16.7-32.2 10.7s-16.7-20.3-10.7-32.2l72-144c4.1-8.1 12.4-13.3 21.5-13.3s17.4 5.1 21.5 13.3zm-.4 106.6L192 237.7l-21.1 42.2h42.2zM304 184c0-13.3 10.7-24 24-24h56c53 0 96 43 96 96s-43 96-96 96H328c-13.3 0-24-10.7-24-24V184zm48 24v96h32c26.5 0 48-21.5 48-48s-21.5-48-48-48H352z',
    ],
  };
  var faPersonMilitaryToPerson = {
    prefix: 'fas',
    iconName: 'person-military-to-person',
    icon: [
      512,
      512,
      [],
      'e54c',
      'M71 12.5c-8.6 1-15 8.2-15 16.8c0 9.3 7.5 16.8 16.7 16.9H184.1c8.8-.1 15.9-7.2 15.9-16V16c0-9.5-8.3-17-17.8-15.9L71 12.5zM189.5 78.1H66.5C64.9 83.8 64 89.8 64 96c0 35.3 28.7 64 64 64s64-28.7 64-64c0-6.2-.9-12.2-2.5-17.9zM32 256v32c0 17.7 14.3 32 32 32H192c1.8 0 3.5-.1 5.2-.4L53 208.6C40.1 220.3 32 237.2 32 256zm190.2 42.5c1.1-3.3 1.8-6.8 1.8-10.5V256c0-35.3-28.7-64-64-64H96c-3.7 0-7.4 .3-10.9 .9L222.2 298.5zM384 160c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zm-32 32c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32H448c17.7 0 32-14.3 32-32V256c0-35.3-28.7-64-64-64H352zM215.8 450.1c5.2-4.6 8.2-11.1 8.2-18.1s-3-13.5-8.2-18.1l-64-56c-7.1-6.2-17.1-7.7-25.7-3.8S112 366.6 112 376v32l-88 0c-13.3 0-24 10.7-24 24s10.7 24 24 24l88 0v32c0 9.4 5.5 18 14.1 21.9s18.6 2.4 25.7-3.8l64-56zM288 431.9c0 6.9 3 13.5 8.1 18.1l64 56.4c7.1 6.2 17.1 7.8 25.7 3.9s14.1-12.4 14.1-21.9l0-32.4 88 0c13.3 0 24-10.7 24-24s-10.7-24-24-24l-88 0 0-32c0-9.4-5.5-18-14.1-21.9s-18.6-2.4-25.7 3.8l-64 56c-5.2 4.5-8.2 11.1-8.2 18z',
    ],
  };
  var faFileShield = {
    prefix: 'fas',
    iconName: 'file-shield',
    icon: [
      576,
      512,
      [],
      'e4f0',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v47l-92.8 37.1c-21.3 8.5-35.2 29.1-35.2 52c0 56.6 18.9 148 94.2 208.3c-9 4.8-19.3 7.6-30.2 7.6H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm39.1 97.7c5.7-2.3 12.1-2.3 17.8 0l120 48C570 277.4 576 286.2 576 296c0 63.3-25.9 168.8-134.8 214.2c-5.9 2.5-12.6 2.5-18.5 0C313.9 464.8 288 359.3 288 296c0-9.8 6-18.6 15.1-22.3l120-48zM527.4 312L432 273.8V461.7c68.2-33 91.5-99 95.4-149.7z',
    ],
  };
  var faUserSlash = {
    prefix: 'fas',
    iconName: 'user-slash',
    icon: [
      640,
      512,
      [],
      'f506',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L353.3 251.6C407.9 237 448 187.2 448 128C448 57.3 390.7 0 320 0C250.2 0 193.5 55.8 192 125.2L38.8 5.1zM264.3 304.3C170.5 309.4 96 387.2 96 482.3c0 16.4 13.3 29.7 29.7 29.7H514.3c3.9 0 7.6-.7 11-2.1l-261-205.6z',
    ],
  };
  var faPen = {
    prefix: 'fas',
    iconName: 'pen',
    icon: [
      512,
      512,
      [128394],
      'f304',
      'M362.7 19.3L314.3 67.7 444.3 197.7l48.4-48.4c25-25 25-65.5 0-90.5L453.3 19.3c-25-25-65.5-25-90.5 0zm-71 71L58.6 323.5c-10.4 10.4-18 23.3-22.2 37.4L1 481.2C-1.5 489.7 .8 498.8 7 505s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L421.7 220.3 291.7 90.3z',
    ],
  };
  var faTowerObservation = {
    prefix: 'fas',
    iconName: 'tower-observation',
    icon: [
      512,
      512,
      [],
      'e586',
      'M241.7 3.4c9-4.5 19.6-4.5 28.6 0l160 80c15.8 7.9 22.2 27.1 14.3 42.9C439 137.5 427.7 144 416 144v80c0 17.7-14.3 32-32 32h-4.9l32 192H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H384.5c-.4 0-.8 0-1.1 0H128.6c-.4 0-.8 0-1.1 0H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h68.9l32-192H128c-17.7 0-32-14.3-32-32V144c-11.7 0-23-6.5-28.6-17.7c-7.9-15.8-1.5-35 14.3-42.9l160-80zM314.5 448L256 399.2 197.5 448h117zM197.8 256l-4.7 28.3L256 336.8l62.9-52.5L314.2 256H197.8zm-13.9 83.2l-11.2 67L218.5 368l-34.6-28.8zM293.5 368l45.8 38.1-11.2-67L293.5 368zM176 128c-8.8 0-16 7.2-16 16s7.2 16 16 16H336c8.8 0 16-7.2 16-16s-7.2-16-16-16H176z',
    ],
  };
  var faFileCode = {
    prefix: 'fas',
    iconName: 'file-code',
    icon: [
      384,
      512,
      [],
      'f1c9',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM153 289l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L71 337c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM265 255l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z',
    ],
  };
  var faSignal = {
    prefix: 'fas',
    iconName: 'signal',
    icon: [
      576,
      512,
      [128246, 'signal-5', 'signal-perfect'],
      'f012',
      'M544 0c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V32c0-17.7 14.3-32 32-32zM416 96c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V128c0-17.7 14.3-32 32-32zM320 224V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V224c0-17.7 14.3-32 32-32s32 14.3 32 32zM160 288c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V320c0-17.7 14.3-32 32-32zM64 416v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V416c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faSignal5 = faSignal;
  var faSignalPerfect = faSignal;
  var faBus = {
    prefix: 'fas',
    iconName: 'bus',
    icon: [
      512,
      512,
      [128653],
      'f207',
      'M256 0C390.4 0 480 35.2 480 80V96l0 32c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32l0 160c0 17.7-14.3 32-32 32v32c0 17.7-14.3 32-32 32H384c-17.7 0-32-14.3-32-32V448H160v32c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32l0-32c-17.7 0-32-14.3-32-32l0-160c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h0V96h0V80C32 35.2 121.6 0 256 0zM96 160v96c0 17.7 14.3 32 32 32H240V128H128c-17.7 0-32 14.3-32 32zM272 288H384c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H272V288zM112 400c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm288 0c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM352 80c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16s7.2 16 16 16H336c8.8 0 16-7.2 16-16z',
    ],
  };
  var faHeartCircleXmark = {
    prefix: 'fas',
    iconName: 'heart-circle-xmark',
    icon: [
      576,
      512,
      [],
      'e501',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L454.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L432 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L409.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L432 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faHouseChimney = {
    prefix: 'fas',
    iconName: 'house-chimney',
    icon: [
      576,
      512,
      [63499, 'home-lg'],
      'e3af',
      'M543.8 287.6c17 0 32-14 32-32.1c1-9-3-17-11-24L512 185V64c0-17.7-14.3-32-32-32H448c-17.7 0-32 14.3-32 32v36.7L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32v69.7c-.1 .9-.1 1.8-.1 2.8V472c0 22.1 17.9 40 40 40h16c1.2 0 2.4-.1 3.6-.2c1.5 .1 3 .2 4.5 .2H160h24c22.1 0 40-17.9 40-40V448 384c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32v64 24c0 22.1 17.9 40 40 40h24 32.5c1.4 0 2.8 0 4.2-.1c1.1 .1 2.2 .1 3.3 .1h16c22.1 0 40-17.9 40-40V455.8c.3-2.6 .5-5.3 .5-8.1l-.7-160.2h32z',
    ],
  };
  var faHomeLg = faHouseChimney;
  var faWindowMaximize = {
    prefix: 'fas',
    iconName: 'window-maximize',
    icon: [
      512,
      512,
      [128470],
      'f2d0',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM96 96H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H96c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faFaceFrown = {
    prefix: 'fas',
    iconName: 'face-frown',
    icon: [
      512,
      512,
      [9785, 'frown'],
      'f119',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM159.3 388.7c-2.6 8.4-11.6 13.2-20 10.5s-13.2-11.6-10.5-20C145.2 326.1 196.3 288 256 288s110.8 38.1 127.3 91.3c2.6 8.4-2.1 17.4-10.5 20s-17.4-2.1-20-10.5C340.5 349.4 302.1 320 256 320s-84.5 29.4-96.7 68.7zM208.4 208c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faFrown = faFaceFrown;
  var faPrescription = {
    prefix: 'fas',
    iconName: 'prescription',
    icon: [
      448,
      512,
      [],
      'f5b1',
      'M32 0C14.3 0 0 14.3 0 32V192v96c0 17.7 14.3 32 32 32s32-14.3 32-32V224h50.7l128 128L137.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L288 397.3 393.4 502.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L333.3 352 438.6 246.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 306.7l-85.8-85.8C251.4 209.1 288 164.8 288 112C288 50.1 237.9 0 176 0H32zM176 160H64V64H176c26.5 0 48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faShop = {
    prefix: 'fas',
    iconName: 'shop',
    icon: [
      640,
      512,
      ['store-alt'],
      'f54f',
      'M36.8 192H603.2c20.3 0 36.8-16.5 36.8-36.8c0-7.3-2.2-14.4-6.2-20.4L558.2 21.4C549.3 8 534.4 0 518.3 0H121.7c-16 0-31 8-39.9 21.4L6.2 134.7c-4 6.1-6.2 13.2-6.2 20.4C0 175.5 16.5 192 36.8 192zM64 224V384v80c0 26.5 21.5 48 48 48H336c26.5 0 48-21.5 48-48V384 224H320V384H128V224H64zm448 0V480c0 17.7 14.3 32 32 32s32-14.3 32-32V224H512z',
    ],
  };
  var faStoreAlt = faShop;
  var faFloppyDisk = {
    prefix: 'fas',
    iconName: 'floppy-disk',
    icon: [
      448,
      512,
      [128190, 128426, 'save'],
      'f0c7',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V173.3c0-17-6.7-33.3-18.7-45.3L352 50.7C340 38.7 323.7 32 306.7 32H64zm0 96c0-17.7 14.3-32 32-32H288c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V128zM224 416c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faSave = faFloppyDisk;
  var faVihara = {
    prefix: 'fas',
    iconName: 'vihara',
    icon: [
      640,
      512,
      [],
      'f6a7',
      'M281 22L305.8 4.7c1.3-.9 2.7-1.8 4.1-2.4C313.1 .7 316.6 0 320 0s6.9 .7 10.1 2.2c1.4 .7 2.8 1.5 4.1 2.4L359 22C393 45.8 430.8 63.5 470.8 74.4l23 6.3c1.8 .5 3.6 1.1 5.2 2c3.2 1.7 5.9 4 8.1 6.8c3.8 4.9 5.6 11.3 4.7 17.8c-.4 2.8-1.2 5.4-2.5 7.8c-1.7 3.2-4 5.9-6.8 8.1c-4.3 3.2-9.6 5.1-15.1 4.9H480v56.1l6.4 5.1 5.2 4.1c21.1 16.7 45 29.6 70.5 38.1l28.9 9.6c1.6 .5 3.2 1.2 4.6 2c3.1 1.7 5.8 4.1 7.8 6.9s3.5 6.1 4.1 9.6c.5 2.7 .6 5.5 .1 8.3s-1.4 5.4-2.7 7.8c-1.7 3.1-4.1 5.8-6.9 7.8s-6.1 3.5-9.6 4.1c-1.6 .3-3.3 .4-5 .4H544v65.9c20.5 22.8 47.4 39.2 77.4 46.7C632 403 640 412.6 640 424c0 13.3-10.7 24-24 24H576v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H352v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H128v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H24c-13.3 0-24-10.7-24-24c0-11.4 8-21 18.6-23.4c30-7.6 56.9-23.9 77.4-46.7V288H56.6c-1.7 0-3.4-.1-5-.4c-3.5-.7-6.8-2.1-9.6-4.1s-5.2-4.7-7-7.8c-1.3-2.4-2.3-5-2.7-7.8s-.4-5.6 .1-8.3c.7-3.5 2.1-6.8 4.1-9.6s4.7-5.2 7.8-6.9c1.4-.8 3-1.5 4.6-2l28.9-9.6c25.5-8.5 49.4-21.4 70.5-38.1l5.2-4.1 6.4-5.1V176 128h-7.5c-5.5 .1-10.8-1.7-15.1-4.9c-2.8-2.1-5.1-4.8-6.8-8.1c-1.2-2.4-2.1-5-2.5-7.8c-.9-6.5 .9-12.8 4.7-17.8c2.1-2.8 4.8-5.1 8.1-6.8c1.6-.8 3.4-1.5 5.2-2l23-6.3C209.2 63.5 247 45.8 281 22zM416 128H320 224v64h72 48 72V128zM160 288v64H296h24 24H480V288H344 320h0H296 160z',
    ],
  };
  var faScaleUnbalanced = {
    prefix: 'fas',
    iconName: 'scale-unbalanced',
    icon: [
      640,
      512,
      ['balance-scale-left'],
      'f515',
      'M522.1 62.4c16.8-5.6 25.8-23.7 20.2-40.5S518.6-3.9 501.9 1.6l-113 37.7C375 15.8 349.3 0 320 0c-44.2 0-80 35.8-80 80c0 3 .2 5.9 .5 8.8L117.9 129.6c-16.8 5.6-25.8 23.7-20.2 40.5s23.7 25.8 40.5 20.2l135.5-45.2c4.5 3.2 9.3 5.9 14.4 8.2V480c0 17.7 14.3 32 32 32H512c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V153.3c21-9.2 37.2-27 44.2-49l125.9-42zm-396.3 211c.4-.8 1.3-1.3 2.2-1.3s1.7 .5 2.2 1.3L204.9 416H51.1l74.7-142.7zM128 224c-18.8 0-36 10.4-44.7 27L5.5 399.5c-3.1 5.8-6.1 14-5.5 23.8c.7 12.1 4.8 35.2 24.8 55.1C45.1 498.6 77.8 512 128 512s82.9-13.4 103.2-33.5c20-20 24.2-43 24.8-55.1c.6-9.8-2.5-18-5.5-23.8L172.7 251c-8.7-16.6-25.9-27-44.7-27zm384-80c.9 0 1.7 .5 2.2 1.3L588.9 288H435.1l74.7-142.7c.4-.8 1.3-1.3 2.2-1.3zm-44.7-21L389.5 271.5c-3.1 5.8-6.1 14-5.5 23.8c.7 12.1 4.8 35.2 24.8 55.1C429.1 370.6 461.8 384 512 384s82.9-13.4 103.2-33.5c20-20 24.2-43 24.8-55.1c.6-9.8-2.5-18-5.5-23.8L556.7 123C548 106.4 530.8 96 512 96s-36 10.4-44.7 27z',
    ],
  };
  var faBalanceScaleLeft = faScaleUnbalanced;
  var faSortUp = {
    prefix: 'fas',
    iconName: 'sort-up',
    icon: [
      320,
      512,
      ['sort-asc'],
      'f0de',
      'M182.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H288c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z',
    ],
  };
  var faSortAsc = faSortUp;
  var faCommentDots = {
    prefix: 'fas',
    iconName: 'comment-dots',
    icon: [
      512,
      512,
      [128172, 62075, 'commenting'],
      'f4ad',
      'M256 448c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3 0 0 0 0 0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9zM128 272c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm160-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faCommenting = faCommentDots;
  var faPlantWilt = {
    prefix: 'fas',
    iconName: 'plant-wilt',
    icon: [
      512,
      512,
      [],
      'e5aa',
      'M288 120c0-30.9 25.1-56 56-56s56 25.1 56 56v13c-29.3 10-48 34.5-48 70.1c0 27.9 25.3 74.8 66 111.6c3.8 3.5 8.9 5.3 14 5.3s10.2-1.8 14-5.3c40.7-36.8 66-83.7 66-111.6c0-35.6-18.7-60.2-48-70.1V120C464 53.7 410.3 0 344 0S224 53.7 224 120v21.8C207.3 133 188.2 128 168 128c-66.3 0-120 53.7-120 120v13c-29.3 10-48 34.5-48 70.1C0 359 25.3 405.9 66 442.7c3.8 3.5 8.9 5.3 14 5.3s10.2-1.8 14-5.3c40.7-36.8 66-83.7 66-111.6c0-35.6-18.7-60.2-48-70.1V248c0-30.9 25.1-56 56-56s56 25.1 56 56v32V480c0 17.7 14.3 32 32 32s32-14.3 32-32V280 248 120z',
    ],
  };
  var faDiamond = {
    prefix: 'fas',
    iconName: 'diamond',
    icon: [
      512,
      512,
      [9830],
      'f219',
      'M284.3 11.7c-15.6-15.6-40.9-15.6-56.6 0l-216 216c-15.6 15.6-15.6 40.9 0 56.6l216 216c15.6 15.6 40.9 15.6 56.6 0l216-216c15.6-15.6 15.6-40.9 0-56.6l-216-216z',
    ],
  };
  var faFaceGrinSquint = {
    prefix: 'fas',
    iconName: 'face-grin-squint',
    icon: [
      512,
      512,
      [128518, 'grin-squint'],
      'f585',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM383.8 317.8c12.3-3.7 24.3 7 19.2 18.7c-24.5 56.9-81.1 96.7-147 96.7s-122.5-39.8-147-96.7c-5.1-11.8 6.9-22.4 19.2-18.7C166.7 329.4 210.1 336 256 336s89.3-6.6 127.8-18.2zM133.5 146.7l89.9 47.9c10.7 5.7 10.7 21.1 0 26.8l-89.9 47.9c-7.9 4.2-17.5-1.5-17.5-10.5c0-2.8 1-5.5 2.8-7.6l36-43.2-36-43.2c-1.8-2.1-2.8-4.8-2.8-7.6c0-9 9.6-14.7 17.5-10.5zM396 157.1c0 2.8-1 5.5-2.8 7.6l-36 43.2 36 43.2c1.8 2.1 2.8 4.8 2.8 7.6c0 9-9.6 14.7-17.5 10.5l-89.9-47.9c-10.7-5.7-10.7-21.1 0-26.8l89.9-47.9c7.9-4.2 17.5 1.5 17.5 10.5z',
    ],
  };
  var faGrinSquint = faFaceGrinSquint;
  var faHandHoldingDollar = {
    prefix: 'fas',
    iconName: 'hand-holding-dollar',
    icon: [
      576,
      512,
      ['hand-holding-usd'],
      'f4c0',
      'M312 24V34.5c6.4 1.2 12.6 2.7 18.2 4.2c12.8 3.4 20.4 16.6 17 29.4s-16.6 20.4-29.4 17c-10.9-2.9-21.1-4.9-30.2-5c-7.3-.1-14.7 1.7-19.4 4.4c-2.1 1.3-3.1 2.4-3.5 3c-.3 .5-.7 1.2-.7 2.8c0 .3 0 .5 0 .6c.2 .2 .9 1.2 3.3 2.6c5.8 3.5 14.4 6.2 27.4 10.1l.9 .3 0 0c11.1 3.3 25.9 7.8 37.9 15.3c13.7 8.6 26.1 22.9 26.4 44.9c.3 22.5-11.4 38.9-26.7 48.5c-6.7 4.1-13.9 7-21.3 8.8V232c0 13.3-10.7 24-24 24s-24-10.7-24-24V220.6c-9.5-2.3-18.2-5.3-25.6-7.8c-2.1-.7-4.1-1.4-6-2c-12.6-4.2-19.4-17.8-15.2-30.4s17.8-19.4 30.4-15.2c2.6 .9 5 1.7 7.3 2.5c13.6 4.6 23.4 7.9 33.9 8.3c8 .3 15.1-1.6 19.2-4.1c1.9-1.2 2.8-2.2 3.2-2.9c.4-.6 .9-1.8 .8-4.1l0-.2c0-1 0-2.1-4-4.6c-5.7-3.6-14.3-6.4-27.1-10.3l-1.9-.6c-10.8-3.2-25-7.5-36.4-14.4c-13.5-8.1-26.5-22-26.6-44.1c-.1-22.9 12.9-38.6 27.7-47.4c6.4-3.8 13.3-6.4 20.2-8.2V24c0-13.3 10.7-24 24-24s24 10.7 24 24zM568.2 336.3c13.1 17.8 9.3 42.8-8.5 55.9L433.1 485.5c-23.4 17.2-51.6 26.5-80.7 26.5H192 32c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32H68.8l44.9-36c22.7-18.2 50.9-28 80-28H272h16 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H288 272c-8.8 0-16 7.2-16 16s7.2 16 16 16H392.6l119.7-88.2c17.8-13.1 42.8-9.3 55.9 8.5zM193.6 384l0 0-.9 0c.3 0 .6 0 .9 0z',
    ],
  };
  var faHandHoldingUsd = faHandHoldingDollar;
  var faBacterium = {
    prefix: 'fas',
    iconName: 'bacterium',
    icon: [
      576,
      512,
      [],
      'e05a',
      'M455.1 30.6c3.6-12.7-3.7-26-16.5-29.7s-26 3.7-29.7 16.5l-4.2 14.7c-9.8-.4-19.9 .5-29.9 2.8c-12.1 2.8-23.7 5.9-34.9 9.4l-5.9-13.7c-5.2-12.2-19.3-17.8-31.5-12.6s-17.8 19.3-12.6 31.5l4.9 11.3c-22 9.4-42 20.1-60.2 31.8L228 82.7c-7.4-11-22.3-14-33.3-6.7s-14 22.3-6.7 33.3l7.8 11.6c-18 15-33.7 30.8-47.3 47.1L135 157.3c-10.4-8.3-25.5-6.6-33.7 3.7s-6.6 25.5 3.7 33.7l15 12c-2.1 3.2-4.1 6.5-6 9.7c-9.4 15.7-17 31-23.2 45.3l-9.9-3.9c-12.3-4.9-26.3 1.1-31.2 13.4s1.1 26.3 13.4 31.2l11.6 4.6c-.3 1.1-.6 2.1-.9 3.1c-3.5 12.5-5.7 23.2-7.1 31.3c-.7 4.1-1.2 7.5-1.6 10.3c-.2 1.4-.3 2.6-.4 3.6l-.1 1.4-.1 .6 0 .3 0 .1c0 0 0 .1 39.2 3.7l0 0-39.2-3.6c-.5 5-.6 10-.4 14.9l-14.7 4.2c-12.7 3.6-20.1 16.9-16.5 29.7s16.9 20.1 29.7 16.5l13.8-3.9c10.6 20.7 27.6 37.8 48.5 48.5l-3.9 13.7c-3.6 12.7 3.7 26 16.5 29.7s26-3.7 29.7-16.5l4.2-14.7c23.8 1 46.3-5.5 65.1-17.6L247 473c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-10.6-10.6c9.1-14.1 15.1-30.5 17-48.3l.1-.8c.3-1.7 1-5.1 2.3-9.8l.2-.8 12.6 5.4c12.2 5.2 26.3-.4 31.5-12.6s-.4-26.3-12.6-31.5l-11.3-4.8c9.9-14.9 24.9-31.6 48.6-46l2.1 7.5c3.6 12.7 16.9 20.1 29.7 16.5s20.1-16.9 16.5-29.7L403 259.2c6.9-2.2 14.3-4.3 22.2-6.1c12.9-3 24.7-8 35.2-14.8L471 249c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-10.6-10.6c12.2-19 18.6-41.6 17.6-65.1l14.7-4.2c12.7-3.6 20.1-16.9 16.5-29.7s-16.9-20.1-29.7-16.5l-13.7 3.9c-10.8-21.2-28-38-48.5-48.5l3.9-13.8zm-331 332.7l0 0L176 368l-51.9-4.7zM240 320c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm32-88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faHandPointer = {
    prefix: 'fas',
    iconName: 'hand-pointer',
    icon: [
      448,
      512,
      [],
      'f25a',
      'M128 40c0-22.1 17.9-40 40-40s40 17.9 40 40V188.2c8.5-7.6 19.7-12.2 32-12.2c25.3 0 46 19.5 47.9 44.3c8.5-7.7 19.8-12.3 32.1-12.3c25.3 0 46 19.5 47.9 44.3c8.5-7.7 19.8-12.3 32.1-12.3c26.5 0 48 21.5 48 48v32 64c0 70.7-57.3 128-128 128l-16 0H240l-.1 0h-5.2c-5 0-9.9-.3-14.7-1c-55.3-5.6-106.2-34-140-79L8 336c-13.3-17.7-9.7-42.7 8-56s42.7-9.7 56 8l56 74.7V40zM240 304c0-8.8-7.2-16-16-16s-16 7.2-16 16v96c0 8.8 7.2 16 16 16s16-7.2 16-16V304zm48-16c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16s16-7.2 16-16V304c0-8.8-7.2-16-16-16zm80 16c0-8.8-7.2-16-16-16s-16 7.2-16 16v96c0 8.8 7.2 16 16 16s16-7.2 16-16V304z',
    ],
  };
  var faDrumSteelpan = {
    prefix: 'fas',
    iconName: 'drum-steelpan',
    icon: [
      576,
      512,
      [],
      'f56a',
      'M288 32c159.1 0 288 48 288 128V352c0 80-128.9 128-288 128S0 432 0 352V160C0 80 128.9 32 288 32zM528 160c0-9.9-8-29.9-55-49.8c-18.6-7.9-40.9-14.4-66-19.4l-27.8 43.6c-7.3 11.5-11.2 24.8-11.2 38.4c0 17.5 6.4 34.4 18.1 47.5l9.8 11c29.8-5.2 55.9-12.5 77.2-21.5c47.1-19.9 55-39.9 55-49.8zM349.2 237.3c-8-26.2-32.4-45.3-61.2-45.3s-53.3 19.1-61.2 45.3c19.4 1.7 39.9 2.7 61.2 2.7s41.8-.9 61.2-2.7zM169 90.8c-25.2 5-47.4 11.6-66 19.4C56 130.1 48 150.1 48 160s8 29.9 55 49.8c21.3 9 47.4 16.3 77.2 21.5l9.8-11c11.6-13.1 18.1-30 18.1-47.5c0-13.6-3.9-26.9-11.2-38.4L169 90.8zm56.3-8C224.5 87 224 91.5 224 96c0 35.3 28.7 64 64 64s64-28.7 64-64c0-4.5-.5-9-1.4-13.2C330.8 81 309.8 80 288 80s-42.8 1-62.6 2.8z',
    ],
  };
  var faHandScissors = {
    prefix: 'fas',
    iconName: 'hand-scissors',
    icon: [
      512,
      512,
      [],
      'f257',
      'M40 208c-22.1 0-40 17.9-40 40s17.9 40 40 40l180.2 0c-7.6 8.5-12.2 19.7-12.2 32c0 25.3 19.5 46 44.3 47.9c-7.7 8.5-12.3 19.8-12.3 32.1c0 26.5 21.5 48 48 48l32 0 64 0c70.7 0 128-57.3 128-128l0-113.1c0-40.2-16-78.8-44.4-107.3C444.8 76.8 413.9 64 381.7 64L336 64c-21.3 0-39.3 13.9-45.6 33.1l74.5 23.7c8.4 2.7 13.1 11.7 10.4 20.1s-11.7 13.1-20.1 10.4L288 129.9l0 .1L84 65.8C62.9 59.2 40.5 70.9 33.8 92s5.1 43.5 26.2 50.2L269.5 208 40 208z',
    ],
  };
  var faHandsPraying = {
    prefix: 'fas',
    iconName: 'hands-praying',
    icon: [
      640,
      512,
      ['praying-hands'],
      'f684',
      'M351.2 4.8c3.2-2 6.6-3.3 10-4.1c4.7-1 9.6-.9 14.1 .1c7.7 1.8 14.8 6.5 19.4 13.6L514.6 194.2c8.8 13.1 13.4 28.6 13.4 44.4v73.5c0 6.9 4.4 13 10.9 15.2l79.2 26.4C631.2 358 640 370.2 640 384v96c0 9.9-4.6 19.3-12.5 25.4s-18.1 8.1-27.7 5.5L431 465.9c-56-14.9-95-65.7-95-123.7V224c0-17.7 14.3-32 32-32s32 14.3 32 32v80c0 8.8 7.2 16 16 16s16-7.2 16-16V219.1c0-7-1.8-13.8-5.3-19.8L340.3 48.1c-1.7-3-2.9-6.1-3.6-9.3c-1-4.7-1-9.6 .1-14.1c1.9-8 6.8-15.2 14.3-19.9zm-62.4 0c7.5 4.6 12.4 11.9 14.3 19.9c1.1 4.6 1.2 9.4 .1 14.1c-.7 3.2-1.9 6.3-3.6 9.3L213.3 199.3c-3.5 6-5.3 12.9-5.3 19.8V304c0 8.8 7.2 16 16 16s16-7.2 16-16V224c0-17.7 14.3-32 32-32s32 14.3 32 32V342.3c0 58-39 108.7-95 123.7l-168.7 45c-9.6 2.6-19.9 .5-27.7-5.5S0 490 0 480V384c0-13.8 8.8-26 21.9-30.4l79.2-26.4c6.5-2.2 10.9-8.3 10.9-15.2V238.5c0-15.8 4.7-31.2 13.4-44.4L245.2 14.5c4.6-7.1 11.7-11.8 19.4-13.6c4.6-1.1 9.4-1.2 14.1-.1c3.5 .8 6.9 2.1 10 4.1z',
    ],
  };
  var faPrayingHands = faHandsPraying;
  var faArrowRotateRight = {
    prefix: 'fas',
    iconName: 'arrow-rotate-right',
    icon: [
      512,
      512,
      [8635, 'arrow-right-rotate', 'arrow-rotate-forward', 'redo'],
      'f01e',
      'M386.3 160H336c-17.7 0-32 14.3-32 32s14.3 32 32 32H464c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32s-32 14.3-32 32v51.2L414.4 97.6c-87.5-87.5-229.3-87.5-316.8 0s-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3s163.8-62.5 226.3 0L386.3 160z',
    ],
  };
  var faArrowRightRotate = faArrowRotateRight;
  var faArrowRotateForward = faArrowRotateRight;
  var faRedo = faArrowRotateRight;
  var faBiohazard = {
    prefix: 'fas',
    iconName: 'biohazard',
    icon: [
      576,
      512,
      [9763],
      'f780',
      'M173.2 0c-1.8 0-3.5 .7-4.8 2C138.5 32.3 120 74 120 120c0 26.2 6 50.9 16.6 73c-22 2.4-43.8 9.1-64.2 20.5C37.9 232.8 13.3 262.4 .4 296c-.7 1.7-.5 3.7 .5 5.2c2.2 3.7 7.4 4.3 10.6 1.3C64.2 254.3 158 245.1 205 324s-8.1 153.1-77.6 173.2c-4.2 1.2-6.3 5.9-4.1 9.6c1 1.6 2.6 2.7 4.5 3c36.5 5.9 75.2 .1 109.7-19.2c20.4-11.4 37.4-26.5 50.5-43.8c13.1 17.3 30.1 32.4 50.5 43.8c34.5 19.3 73.3 25.2 109.7 19.2c1.9-.3 3.5-1.4 4.5-3c2.2-3.7 .1-8.4-4.1-9.6C379.1 477.1 324 403 371 324s140.7-69.8 193.5-21.4c3.2 2.9 8.4 2.3 10.6-1.3c1-1.6 1.1-3.5 .5-5.2c-12.9-33.6-37.5-63.2-72.1-82.5c-20.4-11.4-42.2-18.1-64.2-20.5C450 170.9 456 146.2 456 120c0-46-18.5-87.7-48.4-118c-1.3-1.3-3-2-4.8-2c-5 0-8.4 5.2-6.7 9.9C421.7 80.5 385.6 176 288 176S154.3 80.5 179.9 9.9c1.7-4.7-1.6-9.9-6.7-9.9zM336 272c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM181.7 417.6c6.3-11.8 9.8-25.1 8.6-39.8c-19.5-18-34-41.4-41.2-67.8c-12.5-8.1-26.2-11.8-40-12.4c-9-.4-18.1 .6-27.1 2.7c7.8 57.1 38.7 106.8 82.9 139.4c6.8-6.7 12.6-14.1 16.8-22.1zM288 64c-28.8 0-56.3 5.9-81.2 16.5c2 8.3 5 16.2 9 23.5c6.8 12.4 16.7 23.1 30.1 30.3c13.3-4.1 27.5-6.3 42.2-6.3s28.8 2.2 42.2 6.3c13.4-7.2 23.3-17.9 30.1-30.3c4-7.3 7-15.2 9-23.5C344.3 69.9 316.8 64 288 64zM426.9 310c-7.2 26.4-21.7 49.7-41.2 67.8c-1.2 14.7 2.2 28.1 8.6 39.8c4.3 8 10 15.4 16.8 22.1c44.3-32.6 75.2-82.3 82.9-139.4c-9-2.2-18.1-3.1-27.1-2.7c-13.8 .6-27.5 4.4-40 12.4z',
    ],
  };
  var faLocationCrosshairs = {
    prefix: 'fas',
    iconName: 'location-crosshairs',
    icon: [
      512,
      512,
      ['location'],
      'f601',
      'M256 0c17.7 0 32 14.3 32 32V66.7C368.4 80.1 431.9 143.6 445.3 224H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H445.3C431.9 368.4 368.4 431.9 288 445.3V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V445.3C143.6 431.9 80.1 368.4 66.7 288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H66.7C80.1 143.6 143.6 80.1 224 66.7V32c0-17.7 14.3-32 32-32zM128 256c0 70.7 57.3 128 128 128s128-57.3 128-128s-57.3-128-128-128s-128 57.3-128 128zm128 80c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faLocation = faLocationCrosshairs;
  var faMarsDouble = {
    prefix: 'fas',
    iconName: 'mars-double',
    icon: [
      640,
      512,
      [9891],
      'f227',
      'M312 32c-9.7 0-18.5 5.8-22.2 14.8s-1.7 19.3 5.2 26.2l33.4 33.4L275.8 159c-28.4-19.5-62.7-31-99.8-31C78.8 128 0 206.8 0 304s78.8 176 176 176s176-78.8 176-176c0-37-11.4-71.4-31-99.8l52.6-52.6L407 185c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V56c0-13.3-10.7-24-24-24H312zm88 48h0v0l0 0zM288 304c0 61.9-50.1 112-112 112s-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112zm80 176c97.2 0 176-78.8 176-176c0-37-11.4-71.4-31-99.8l52.6-52.6L599 185c6.9 6.9 17.2 8.9 26.2 5.2s14.8-12.5 14.8-22.2V56c0-13.3-10.7-24-24-24H504c-9.7 0-18.5 5.8-22.2 14.8c-1.2 2.9-1.8 6-1.8 9l0 .2v.2c0 6.2 2.5 12.2 7 16.8l33.4 33.4L480 146.7V168c0 22.6-13.6 43.1-34.6 51.7c-.8 .3-1.7 .7-2.5 1C465.7 241.2 480 270.9 480 304c0 61.9-50.1 112-112 112c-5.4 0-10.8-.4-16-1.1c-12.9 20.4-29.1 38.3-48.1 53.1c19.8 7.8 41.4 12 64 12z',
    ],
  };
  var faChildDress = {
    prefix: 'fas',
    iconName: 'child-dress',
    icon: [
      320,
      512,
      [],
      'e59c',
      'M224 64c0-35.3-28.7-64-64-64S96 28.7 96 64s28.7 64 64 64s64-28.7 64-64zM88 400v80c0 17.7 14.3 32 32 32s32-14.3 32-32V400h16v80c0 17.7 14.3 32 32 32s32-14.3 32-32V400h17.8c10.9 0 18.6-10.7 15.2-21.1l-31.1-93.4 28.6 37.8c10.7 14.1 30.8 16.8 44.8 6.2s16.8-30.7 6.2-44.8L254.6 207c-22.4-29.6-57.5-47-94.6-47s-72.2 17.4-94.6 47L6.5 284.7c-10.7 14.1-7.9 34.2 6.2 44.8s34.2 7.9 44.8-6.2l28.7-37.8L55 378.9C51.6 389.3 59.3 400 70.2 400H88z',
    ],
  };
  var faUsersBetweenLines = {
    prefix: 'fas',
    iconName: 'users-between-lines',
    icon: [
      640,
      512,
      [],
      'e591',
      'M0 24C0 10.7 10.7 0 24 0H616c13.3 0 24 10.7 24 24s-10.7 24-24 24H24C10.7 48 0 37.3 0 24zM0 488c0-13.3 10.7-24 24-24H616c13.3 0 24 10.7 24 24s-10.7 24-24 24H24c-13.3 0-24-10.7-24-24zM211.2 160c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM32 320c0-35.3 28.7-64 64-64h96c12.2 0 23.7 3.4 33.4 9.4c-37.2 15.1-65.6 47.2-75.8 86.6H64c-17.7 0-32-14.3-32-32zm461.6 32c-10.3-40.1-39.6-72.6-77.7-87.4c9.4-5.5 20.4-8.6 32.1-8.6h96c35.3 0 64 28.7 64 64c0 17.7-14.3 32-32 32H493.6zM391.2 290.4c32.1 7.4 58.1 30.9 68.9 61.6c3.5 10 5.5 20.8 5.5 32c0 17.7-14.3 32-32 32h-224c-17.7 0-32-14.3-32-32c0-11.2 1.9-22 5.5-32c10.5-29.7 35.3-52.8 66.1-60.9c7.8-2.1 16-3.1 24.5-3.1h96c7.4 0 14.7 .8 21.6 2.4zM563.2 160c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM321.6 256c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faLungsVirus = {
    prefix: 'fas',
    iconName: 'lungs-virus',
    icon: [
      640,
      512,
      [],
      'e067',
      'M320 0c17.7 0 32 14.3 32 32V156.2c-8.5-7.6-19.7-12.2-32-12.2s-23.5 4.6-32 12.2V32c0-17.7 14.3-32 32-32zM444.5 195.5c-16.4-16.4-41.8-18.5-60.5-6.1V165.3C384 127 415 96 453.3 96c21.7 0 42.8 10.2 55.8 28.8c15.4 22.1 44.3 65.4 71 116.9c26.5 50.9 52.4 112.5 59.6 170.3c.2 1.3 .2 2.6 .2 4v7c0 49.1-39.8 89-89 89c-7.3 0-14.5-.9-21.6-2.7l-72.7-18.2c-20.9-5.2-38.7-17.1-51.5-32.9c14 1.5 28.5-3 39.2-13.8l-22.6-22.6 22.6 22.6c18.7-18.7 18.7-49.1 0-67.9c-1.1-1.1-1.4-2-1.5-2.5c-.1-.8-.1-1.8 .4-2.9s1.2-1.9 1.8-2.3c.5-.3 1.3-.8 2.9-.8c26.5 0 48-21.5 48-48s-21.5-48-48-48c-1.6 0-2.4-.4-2.9-.8c-.6-.4-1.3-1.2-1.8-2.3s-.5-2.2-.4-2.9c.1-.6 .4-1.4 1.5-2.5c18.7-18.7 18.7-49.1 0-67.9zM421.8 421.8c-6.2 6.2-16.4 6.2-22.6 0C375.9 398.5 336 415 336 448c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-33-39.9-49.5-63.2-26.2c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6C241.5 375.9 225 336 192 336c-8.8 0-16-7.2-16-16s7.2-16 16-16c33 0 49.5-39.9 26.2-63.2c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0C264.1 241.5 304 225 304 192c0-8.8 7.2-16 16-16s16 7.2 16 16c0 33 39.9 49.5 63.2 26.2c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6C398.5 264.1 415 304 448 304c8.8 0 16 7.2 16 16s-7.2 16-16 16c-33 0-49.5 39.9-26.2 63.2c6.2 6.2 6.2 16.4 0 22.6zM183.3 491.2l-72.7 18.2c-7.1 1.8-14.3 2.7-21.6 2.7c-49.1 0-89-39.8-89-89v-7c0-1.3 .1-2.7 .2-4c7.2-57.9 33.1-119.4 59.6-170.3c26.8-51.5 55.6-94.8 71-116.9c13-18.6 34-28.8 55.8-28.8C225 96 256 127 256 165.3v24.1c-18.6-12.4-44-10.3-60.5 6.1c-18.7 18.7-18.7 49.1 0 67.9c1.1 1.1 1.4 2 1.5 2.5c.1 .8 .1 1.8-.4 2.9s-1.2 1.9-1.8 2.3c-.5 .3-1.3 .8-2.9 .8c-26.5 0-48 21.5-48 48s21.5 48 48 48c1.6 0 2.4 .4 2.9 .8c.6 .4 1.3 1.2 1.8 2.3s.5 2.2 .4 2.9c-.1 .6-.4 1.4-1.5 2.5c-18.7 18.7-18.7 49.1 0 67.9c10.7 10.7 25.3 15.3 39.2 13.8c-12.8 15.9-30.6 27.7-51.5 32.9zM296 320c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm72 32c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faFaceGrinTears = {
    prefix: 'fas',
    iconName: 'face-grin-tears',
    icon: [
      640,
      512,
      [128514, 'grin-tears'],
      'f588',
      'M548.6 371.4C506.4 454.8 419.9 512 320 512s-186.4-57.2-228.6-140.6c4.5-2.9 8.7-6.3 12.7-10.3c8.1-8.1 13.2-18.6 16.5-26.6c3.6-8.8 6.5-18.4 8.8-27.5c4.6-18.2 7.7-37 9.3-48.2c3.9-26.5-18.8-49.2-45.2-45.4c-6.8 .9-16.2 2.4-26.6 4.4C85.3 94.5 191.6 0 320 0S554.7 94.5 573.2 217.7c-10.3-2-19.8-3.5-26.6-4.4c-26.5-3.9-49.2 18.8-45.2 45.4c1.6 11.3 4.6 30 9.3 48.2c2.3 9.1 5.2 18.8 8.8 27.5c3.3 8.1 8.4 18.5 16.5 26.6c3.9 3.9 8.2 7.4 12.7 10.3zM107 254.1c-3.1 21.5-11.4 70.2-25.5 84.4c-.9 1-1.9 1.8-2.9 2.7C60 356.7 32 355.5 14.3 337.7c-18.7-18.7-19.1-48.8-.7-67.2c8.6-8.6 30.1-15.1 50.5-19.6c13-2.8 25.5-4.8 33.9-6c5.4-.8 9.9 3.7 9 9zm454.5 87.1c-.8-.6-1.5-1.3-2.3-2c-.2-.2-.5-.4-.7-.7c-14.1-14.1-22.5-62.9-25.5-84.4c-.8-5.4 3.7-9.9 9-9c1 .1 2.2 .3 3.3 .5c8.2 1.2 19.2 3 30.6 5.5c20.4 4.4 41.9 10.9 50.5 19.6c18.4 18.4 18 48.5-.7 67.2c-17.7 17.7-45.7 19-64.2 3.4zm-90.1-9.7c5-11.8-7-22.5-19.3-18.7c-39.7 12.2-84.4 19-131.8 19s-92.1-6.8-131.8-19c-12.3-3.8-24.3 6.9-19.3 18.7c25 59.1 83.2 100.5 151.1 100.5s126.2-41.4 151.1-100.5zM281.6 228.8l0 0 0 0 0 0c2.1 2.8 5.7 3.9 8.9 2.8s5.5-4.1 5.5-7.6c0-17.9-6.7-35.6-16.6-48.8c-9.8-13-23.9-23.2-39.4-23.2s-29.6 10.2-39.4 23.2C190.7 188.4 184 206.1 184 224c0 3.4 2.2 6.5 5.5 7.6s6.9 0 8.9-2.8l0 0 0 0 0 0 .2-.2c.2-.2 .4-.5 .7-.9c.6-.8 1.6-2 2.8-3.4c2.5-2.8 6-6.6 10.2-10.3c8.8-7.8 18.8-14 27.7-14s18.9 6.2 27.7 14c4.2 3.7 7.7 7.5 10.2 10.3c1.2 1.4 2.2 2.6 2.8 3.4c.3 .4 .6 .7 .7 .9l.2 .2 0 0zm160 0l0 0 0 0c2.1 2.8 5.7 3.9 8.9 2.8s5.5-4.1 5.5-7.6c0-17.9-6.7-35.6-16.6-48.8c-9.8-13-23.9-23.2-39.4-23.2s-29.6 10.2-39.4 23.2C350.7 188.4 344 206.1 344 224c0 3.4 2.2 6.5 5.5 7.6s6.9 0 8.9-2.8l0 0 0 0 0 0 .2-.2c.2-.2 .4-.5 .7-.9c.6-.8 1.6-2 2.8-3.4c2.5-2.8 6-6.6 10.2-10.3c8.8-7.8 18.8-14 27.7-14s18.9 6.2 27.7 14c4.2 3.7 7.7 7.5 10.2 10.3c1.2 1.4 2.2 2.6 2.8 3.4c.3 .4 .6 .7 .7 .9l.2 .2 0 0 0 0z',
    ],
  };
  var faGrinTears = faFaceGrinTears;
  var faPhone = {
    prefix: 'fas',
    iconName: 'phone',
    icon: [
      512,
      512,
      [128222, 128379],
      'f095',
      'M164.9 24.6c-7.7-18.6-28-28.5-47.4-23.2l-88 24C12.1 30.2 0 46 0 64C0 311.4 200.6 512 448 512c18 0 33.8-12.1 38.6-29.5l24-88c5.3-19.4-4.6-39.7-23.2-47.4l-96-40c-16.3-6.8-35.2-2.1-46.3 11.6L304.7 368C234.3 334.7 177.3 277.7 144 207.3L193.3 167c13.7-11.2 18.4-30 11.6-46.3l-40-96z',
    ],
  };
  var faCalendarXmark = {
    prefix: 'fas',
    iconName: 'calendar-xmark',
    icon: [
      448,
      512,
      ['calendar-times'],
      'f273',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM305 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l47 47-47 47c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47 47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-47-47 47-47z',
    ],
  };
  var faCalendarTimes = faCalendarXmark;
  var faChildReaching = {
    prefix: 'fas',
    iconName: 'child-reaching',
    icon: [
      384,
      512,
      [],
      'e59d',
      'M256 64c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zM152.9 169.3c-23.7-8.4-44.5-24.3-58.8-45.8L74.6 94.2C64.8 79.5 45 75.6 30.2 85.4s-18.7 29.7-8.9 44.4L40.9 159c18.1 27.1 42.8 48.4 71.1 62.4V480c0 17.7 14.3 32 32 32s32-14.3 32-32V384h32v96c0 17.7 14.3 32 32 32s32-14.3 32-32V221.6c29.1-14.2 54.4-36.2 72.7-64.2l18.2-27.9c9.6-14.8 5.4-34.6-9.4-44.3s-34.6-5.5-44.3 9.4L291 122.4c-21.8 33.4-58.9 53.6-98.8 53.6c-12.6 0-24.9-2-36.6-5.8c-.9-.3-1.8-.7-2.7-.9z',
    ],
  };
  var faHeadSideVirus = {
    prefix: 'fas',
    iconName: 'head-side-virus',
    icon: [
      512,
      512,
      [],
      'e064',
      'M0 224.2C0 100.6 100.2 0 224 0h32c95.2 0 174.2 69.3 189.4 160.1c2.2 13 6.7 25.7 15 36.1l42 52.6c6.2 7.8 9.6 17.4 9.6 27.4c0 24.2-19.6 43.8-43.8 43.8H448v64c0 35.3-28.7 64-64 64H320v32c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V407.3c0-16.7-6.9-32.5-17.1-45.8C16.6 322.4 0 274.1 0 224.2zM240 80c-8.8 0-16 7.2-16 16c0 33-39.9 49.5-63.2 26.2c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6C161.5 168.1 145 208 112 208c-8.8 0-16 7.2-16 16s7.2 16 16 16c33 0 49.5 39.9 26.2 63.2c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0C184.1 302.5 224 319 224 352c0 8.8 7.2 16 16 16s16-7.2 16-16c0-33 39.9-49.5 63.2-26.2c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6C318.5 279.9 335 240 368 240c8.8 0 16-7.2 16-16s-7.2-16-16-16c-33 0-49.5-39.9-26.2-63.2c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0C295.9 145.5 256 129 256 96c0-8.8-7.2-16-16-16zM216 224c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm72 32c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faUserGear = {
    prefix: 'fas',
    iconName: 'user-gear',
    icon: [
      640,
      512,
      ['user-cog'],
      'f4fe',
      'M224 256c-70.7 0-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128s-57.3 128-128 128zm-45.7 48h91.4c11.8 0 23.4 1.2 34.5 3.3c-2.1 18.5 7.4 35.6 21.8 44.8c-16.6 10.6-26.7 31.6-20 53.3c4 12.9 9.4 25.5 16.4 37.6s15.2 23.1 24.4 33c15.7 16.9 39.6 18.4 57.2 8.7v.9c0 9.2 2.7 18.5 7.9 26.3H29.7C13.3 512 0 498.7 0 482.3C0 383.8 79.8 304 178.3 304zM436 218.2c0-7 4.5-13.3 11.3-14.8c10.5-2.4 21.5-3.7 32.7-3.7s22.2 1.3 32.7 3.7c6.8 1.5 11.3 7.8 11.3 14.8v30.6c7.9 3.4 15.4 7.7 22.3 12.8l24.9-14.3c6.1-3.5 13.7-2.7 18.5 2.4c7.6 8.1 14.3 17.2 20.1 27.2s10.3 20.4 13.5 31c2.1 6.7-1.1 13.7-7.2 17.2l-25 14.4c.4 4 .7 8.1 .7 12.3s-.2 8.2-.7 12.3l25 14.4c6.1 3.5 9.2 10.5 7.2 17.2c-3.3 10.6-7.8 21-13.5 31s-12.5 19.1-20.1 27.2c-4.8 5.1-12.5 5.9-18.5 2.4l-24.9-14.3c-6.9 5.1-14.3 9.4-22.3 12.8l0 30.6c0 7-4.5 13.3-11.3 14.8c-10.5 2.4-21.5 3.7-32.7 3.7s-22.2-1.3-32.7-3.7c-6.8-1.5-11.3-7.8-11.3-14.8V454.8c-8-3.4-15.6-7.7-22.5-12.9l-24.7 14.3c-6.1 3.5-13.7 2.7-18.5-2.4c-7.6-8.1-14.3-17.2-20.1-27.2s-10.3-20.4-13.5-31c-2.1-6.7 1.1-13.7 7.2-17.2l24.8-14.3c-.4-4.1-.7-8.2-.7-12.4s.2-8.3 .7-12.4L343.8 325c-6.1-3.5-9.2-10.5-7.2-17.2c3.3-10.6 7.7-21 13.5-31s12.5-19.1 20.1-27.2c4.8-5.1 12.4-5.9 18.5-2.4l24.8 14.3c6.9-5.1 14.5-9.4 22.5-12.9V218.2zm92.1 133.5c0-26.5-21.5-48-48.1-48s-48.1 21.5-48.1 48s21.5 48 48.1 48s48.1-21.5 48.1-48z',
    ],
  };
  var faUserCog = faUserGear;
  var faArrowUp19 = {
    prefix: 'fas',
    iconName: 'arrow-up-1-9',
    icon: [
      576,
      512,
      ['sort-numeric-up'],
      'f163',
      'M160 32c9 0 17.5 3.8 23.6 10.4l88 96c11.9 13 11.1 33.3-2 45.2s-33.3 11.1-45.2-2L192 146.3V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V146.3L95.6 181.6c-11.9 13-32.2 13.9-45.2 2s-13.9-32.2-2-45.2l88-96C142.5 35.8 151 32 160 32zM352 64c0-17.7 14.3-32 32-32h48c17.7 0 32 14.3 32 32v96h16c17.7 0 32 14.3 32 32s-14.3 32-32 32H432 384c-17.7 0-32-14.3-32-32s14.3-32 32-32h16V96H384c-17.7 0-32-14.3-32-32zm93.7 300.9c10.8-5.1 18.3-16.2 18.3-28.9c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32c4.9 0 9.6-1.1 13.7-3.1zm-40.7 54.9C369.6 408.4 344 375.2 344 336c0-48.6 39.4-88 88-88s88 39.4 88 88c0 23.5-7.5 46.3-21.5 65.2L449.7 467c-10.5 14.2-30.6 17.2-44.8 6.7s-17.2-30.6-6.7-44.8l6.8-9.2z',
    ],
  };
  var faSortNumericUp = faArrowUp19;
  var faDoorClosed = {
    prefix: 'fas',
    iconName: 'door-closed',
    icon: [
      576,
      512,
      [128682],
      'f52a',
      'M96 64c0-35.3 28.7-64 64-64H416c35.3 0 64 28.7 64 64V448h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H432 144 32c-17.7 0-32-14.3-32-32s14.3-32 32-32H96V64zM384 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faShieldVirus = {
    prefix: 'fas',
    iconName: 'shield-virus',
    icon: [
      512,
      512,
      [],
      'e06c',
      'M269.4 2.9C265.2 1 260.7 0 256 0s-9.2 1-13.4 2.9L54.3 82.8c-22 9.3-38.4 31-38.3 57.2c.5 99.2 41.3 280.7 213.6 363.2c16.7 8 36.1 8 52.8 0C454.7 420.7 495.5 239.2 496 140c.1-26.2-16.3-47.9-38.3-57.2L269.4 2.9zM256 112c8.8 0 16 7.2 16 16c0 33 39.9 49.5 63.2 26.2c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6C334.5 200.1 351 240 384 240c8.8 0 16 7.2 16 16s-7.2 16-16 16c-33 0-49.5 39.9-26.2 63.2c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0C311.9 334.5 272 351 272 384c0 8.8-7.2 16-16 16s-16-7.2-16-16c0-33-39.9-49.5-63.2-26.2c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6C177.5 311.9 161 272 128 272c-8.8 0-16-7.2-16-16s7.2-16 16-16c33 0 49.5-39.9 26.2-63.2c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0C200.1 177.5 240 161 240 128c0-8.8 7.2-16 16-16zM232 256c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm72 32c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faDiceSix = {
    prefix: 'fas',
    iconName: 'dice-six',
    icon: [
      448,
      512,
      [9861],
      'f526',
      'M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zm160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM128 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm32 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM320 192c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm32 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM320 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faMosquitoNet = {
    prefix: 'fas',
    iconName: 'mosquito-net',
    icon: [
      640,
      512,
      [],
      'e52c',
      'M168.8 462.3c-7.9-4-11.1-13.6-7.2-21.5L192 380.2l0-44.2c0-4.2 1.7-8.3 4.7-11.3L256 265.4V242.2L139.2 344C87.8 395.3 0 358.9 0 286.3c0-41.1 30.6-75.8 71.4-80.9l159.9-23.9-49.6-41.3c-5.1-4.2-7-11.1-4.9-17.4l13.9-41.7-29-58.1c-4-7.9-.7-17.5 7.2-21.5s17.5-.7 21.5 7.2l32 64c1.9 3.8 2.2 8.2 .9 12.2l-12.5 37.6L256 160.5V137.9c0-14.9 10.1-27.3 23.8-31V63.7c0-4.5 3.7-8.2 8.2-8.2s8.2 3.7 8.2 8.2V107c13.7 3.6 23.8 16.1 23.8 31v22.6l45.4-37.8L352.8 85.1c-1.3-4-1-8.4 .9-12.2l32-64c4-7.9 13.6-11.1 21.5-7.2s11.1 13.6 7.2 21.5l-29 58.1 13.9 41.7c2.1 6.2 .1 13.1-4.9 17.4l-49.6 41.3 159.9 23.9c22.5 2.8 41.8 14.6 54.7 31.4c-2.7 2.6-5.2 5.4-7.3 8.6c-8.6-12.9-23.3-21.5-40-21.5s-31.4 8.5-40 21.5c-8.6-12.9-23.3-21.5-40-21.5c-21.7 0-40 14.3-45.9 34.1c-10.7 3.2-19.8 10.1-25.9 19.2l-40.2-35v23.1l32.4 32.4c-.3 2-.4 4.1-.4 6.2c0 16.7 8.5 31.4 21.5 40c-4 2.6-7.5 5.9-10.6 9.5L320 310.6v50c0 17.7-14.3 32-32 32s-32-14.3-32-32v-50l-32 32 0 41.4c0 2.5-.6 4.9-1.7 7.2l-32 64c-4 7.9-13.6 11.1-21.5 7.2zM512 256c8.8 0 16 7.2 16 16v16h48V272c0-8.8 7.2-16 16-16s16 7.2 16 16v16h16c8.8 0 16 7.2 16 16s-7.2 16-16 16H608v48h16c8.8 0 16 7.2 16 16s-7.2 16-16 16H608v48h16c8.8 0 16 7.2 16 16s-7.2 16-16 16H608v16c0 8.8-7.2 16-16 16s-16-7.2-16-16V480H528v16c0 8.8-7.2 16-16 16s-16-7.2-16-16V480H448v16c0 8.8-7.2 16-16 16s-16-7.2-16-16V480H400c-8.8 0-16-7.2-16-16s7.2-16 16-16h16V400H400c-8.8 0-16-7.2-16-16s7.2-16 16-16h16V320H400c-8.8 0-16-7.2-16-16s7.2-16 16-16h16V272c0-8.8 7.2-16 16-16s16 7.2 16 16v16h48V272c0-8.8 7.2-16 16-16zm16 112h48V320H528v48zm0 80h48V400H528v48zM448 320v48h48V320H448zm0 80v48h48V400H448z',
    ],
  };
  var faBridgeWater = {
    prefix: 'fas',
    iconName: 'bridge-water',
    icon: [
      576,
      512,
      [],
      'e4ce',
      'M0 96C0 78.3 14.3 64 32 64H544c17.7 0 32 14.3 32 32v35.6c0 15.7-12.7 28.4-28.4 28.4c-37.3 0-67.6 30.2-67.6 67.6V352.5c-12.9 0-25.8 3.9-36.8 11.7c-18 12.4-40.1 20.3-59.2 20.3h0l0-.5V256c0-53-43-96-96-96s-96 43-96 96V384l0 .5c-19 0-41.2-7.9-59.1-20.3c-11.1-7.8-24-11.7-36.9-11.7V227.6C96 190.2 65.8 160 28.4 160C12.7 160 0 147.3 0 131.6V96zM306.5 389.9C329 405.4 356.5 416 384 416c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 469.7 417 480 384 480c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 405.2 165.1 416 192 416c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faPersonBooth = {
    prefix: 'fas',
    iconName: 'person-booth',
    icon: [
      576,
      512,
      [],
      'f756',
      'M256 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V192h64V32zm320 0c0-17.7-14.3-32-32-32s-32 14.3-32 32V480c0 17.7 14.3 32 32 32s32-14.3 32-32V32zM224 512c17.7 0 32-14.3 32-32V320H192V480c0 17.7 14.3 32 32 32zM320 0c-9.3 0-18.1 4-24.2 11s-8.8 16.3-7.5 25.5l31.2 218.6L288.6 409.7c-3.5 17.3 7.8 34.2 25.1 37.7s34.2-7.8 37.7-25.1l.7-3.6c1.3 16.4 15.1 29.4 31.9 29.4c17.7 0 32-14.3 32-32c0 17.7 14.3 32 32 32s32-14.3 32-32V32c0-17.7-14.3-32-32-32H320zM112 80c0-26.5-21.5-48-48-48S16 53.5 16 80s21.5 48 48 48s48-21.5 48-48zm0 261.3V269.3l4.7 4.7c9 9 21.2 14.1 33.9 14.1H224c17.7 0 32-14.3 32-32s-14.3-32-32-32H157.3l-41.6-41.6c-14.3-14.3-33.8-22.4-54-22.4C27.6 160 0 187.6 0 221.6v55.7l0 .9V480c0 17.7 14.3 32 32 32s32-14.3 32-32V384l32 42.7V480c0 17.7 14.3 32 32 32s32-14.3 32-32V421.3c0-10.4-3.4-20.5-9.6-28.8L112 341.3z',
    ],
  };
  var faTextWidth = {
    prefix: 'fas',
    iconName: 'text-width',
    icon: [
      448,
      512,
      [],
      'f035',
      'M32 32C14.3 32 0 46.3 0 64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V96H192l0 128H176c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H256l0-128H384v32c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H224 32zM9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3l64 64c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V416H320v32c0 12.9 7.8 24.6 19.8 29.6s25.7 2.2 34.9-6.9l64-64c12.5-12.5 12.5-32.8 0-45.3l-64-64c-9.2-9.2-22.9-11.9-34.9-6.9s-19.8 16.6-19.8 29.6v32H128V320c0-12.9-7.8-24.6-19.8-29.6s-25.7-2.2-34.9 6.9l-64 64z',
    ],
  };
  var faHatWizard = {
    prefix: 'fas',
    iconName: 'hat-wizard',
    icon: [
      512,
      512,
      [],
      'f6e8',
      'M64 416L168.6 180.7c15.3-34.4 40.3-63.5 72-83.7l146.9-94c3-1.9 6.5-2.9 10-2.9C407.7 0 416 8.3 416 18.6v1.6c0 2.6-.5 5.1-1.4 7.5L354.8 176.9c-1.9 4.7-2.8 9.7-2.8 14.7c0 5.5 1.2 11 3.4 16.1L448 416H240.9l11.8-35.4 40.4-13.5c6.5-2.2 10.9-8.3 10.9-15.2s-4.4-13-10.9-15.2l-40.4-13.5-13.5-40.4C237 276.4 230.9 272 224 272s-13 4.4-15.2 10.9l-13.5 40.4-40.4 13.5C148.4 339 144 345.1 144 352s4.4 13 10.9 15.2l40.4 13.5L207.1 416H64zM279.6 141.5c-1.1-3.3-4.1-5.5-7.6-5.5s-6.5 2.2-7.6 5.5l-6.7 20.2-20.2 6.7c-3.3 1.1-5.5 4.1-5.5 7.6s2.2 6.5 5.5 7.6l20.2 6.7 6.7 20.2c1.1 3.3 4.1 5.5 7.6 5.5s6.5-2.2 7.6-5.5l6.7-20.2 20.2-6.7c3.3-1.1 5.5-4.1 5.5-7.6s-2.2-6.5-5.5-7.6l-20.2-6.7-6.7-20.2zM32 448H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faPenFancy = {
    prefix: 'fas',
    iconName: 'pen-fancy',
    icon: [
      512,
      512,
      [128395, 10002],
      'f5ac',
      'M373.5 27.1C388.5 9.9 410.2 0 433 0c43.6 0 79 35.4 79 79c0 22.8-9.9 44.6-27.1 59.6L277.7 319l-10.3-10.3-64-64L193 234.3 373.5 27.1zM170.3 256.9l10.4 10.4 64 64 10.4 10.4-19.2 83.4c-3.9 17.1-16.9 30.7-33.8 35.4L24.4 510.3l95.4-95.4c2.6 .7 5.4 1.1 8.3 1.1c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32c0 2.9 .4 5.6 1.1 8.3L1.7 487.6 51.5 310c4.7-16.9 18.3-29.9 35.4-33.8l83.4-19.2z',
    ],
  };
  var faPersonDigging = {
    prefix: 'fas',
    iconName: 'person-digging',
    icon: [
      576,
      512,
      ['digging'],
      'f85e',
      'M304 64c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM9.8 214.8c5.1-12.2 19.1-18 31.4-12.9L60.7 210l22.9-38.1C99.9 144.6 129.3 128 161 128c51.4 0 97 32.9 113.3 81.7l34.6 103.7 79.3 33.1 34.2-45.6c6.4-8.5 16.6-13.3 27.2-12.8s20.3 6.4 25.8 15.5l96 160c5.9 9.9 6.1 22.2 .4 32.2s-16.3 16.2-27.8 16.2H288c-11.1 0-21.4-5.7-27.2-15.2s-6.4-21.2-1.4-31.1l16-32c5.4-10.8 16.5-17.7 28.6-17.7h32l22.5-30L22.8 246.2c-12.2-5.1-18-19.1-12.9-31.4zm82.8 91.8l112 48c11.8 5 19.4 16.6 19.4 29.4v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V405.1l-60.6-26-37 111c-5.6 16.8-23.7 25.8-40.5 20.2S-3.9 486.6 1.6 469.9l48-144 11-33 32 13.7z',
    ],
  };
  var faDigging = faPersonDigging;
  var faTrash = {
    prefix: 'fas',
    iconName: 'trash',
    icon: [
      448,
      512,
      [],
      'f1f8',
      'M135.2 17.7L128 32H32C14.3 32 0 46.3 0 64S14.3 96 32 96H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H320l-7.2-14.3C307.4 6.8 296.3 0 284.2 0H163.8c-12.1 0-23.2 6.8-28.6 17.7zM416 128H32L53.2 467c1.6 25.3 22.6 45 47.9 45H346.9c25.3 0 46.3-19.7 47.9-45L416 128z',
    ],
  };
  var faGaugeSimple = {
    prefix: 'fas',
    iconName: 'gauge-simple',
    icon: [
      512,
      512,
      ['gauge-simple-med', 'tachometer-average'],
      'f629',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM320 352c0-26.9-16.5-49.9-40-59.3V88c0-13.3-10.7-24-24-24s-24 10.7-24 24V292.7c-23.5 9.5-40 32.5-40 59.3c0 35.3 28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faGaugeSimpleMed = faGaugeSimple;
  var faTachometerAverage = faGaugeSimple;
  var faBookMedical = {
    prefix: 'fas',
    iconName: 'book-medical',
    icon: [
      448,
      512,
      [],
      'f7e6',
      'M0 96C0 43 43 0 96 0H384h32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32zM208 112v48H160c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V224h48c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H272V112c0-8.8-7.2-16-16-16H224c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faPoo = {
    prefix: 'fas',
    iconName: 'poo',
    icon: [
      512,
      512,
      [128169],
      'f2fe',
      'M268.9 .9c-5.5-.7-11 1.4-14.5 5.7s-4.6 10.1-2.8 15.4c2.8 8.2 4.3 16.9 4.3 26.1c0 44.1-35.7 79.9-79.8 80H160c-35.3 0-64 28.7-64 64c0 19.1 8.4 36.3 21.7 48H104c-39.8 0-72 32.2-72 72c0 23.2 11 43.8 28 57c-34.1 5.7-60 35.3-60 71c0 39.8 32.2 72 72 72H440c39.8 0 72-32.2 72-72c0-35.7-25.9-65.3-60-71c17-13.2 28-33.8 28-57c0-39.8-32.2-72-72-72H394.3c13.3-11.7 21.7-28.9 21.7-48c0-35.3-28.7-64-64-64h-5.5c3.5-10 5.5-20.8 5.5-32c0-48.6-36.2-88.8-83.1-95.1zM192 320c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm160-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm0 108.3c0 2.4-.7 4.8-2.2 6.7c-8.2 10.5-39.5 45-93.8 45s-85.6-34.6-93.8-45c-1.5-1.9-2.2-4.3-2.2-6.7c0-6.8 5.5-12.3 12.3-12.3H339.7c6.8 0 12.3 5.5 12.3 12.3z',
    ],
  };
  var faQuoteRight = {
    prefix: 'fas',
    iconName: 'quote-right',
    icon: [
      448,
      512,
      [8221, 'quote-right-alt'],
      'f10e',
      'M448 296c0 66.3-53.7 120-120 120h-8c-17.7 0-32-14.3-32-32s14.3-32 32-32h8c30.9 0 56-25.1 56-56v-8H320c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64h64c35.3 0 64 28.7 64 64v32 32 72zm-256 0c0 66.3-53.7 120-120 120H64c-17.7 0-32-14.3-32-32s14.3-32 32-32h8c30.9 0 56-25.1 56-56v-8H64c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64h64c35.3 0 64 28.7 64 64v32 32 72z',
    ],
  };
  var faQuoteRightAlt = faQuoteRight;
  var faShirt = {
    prefix: 'fas',
    iconName: 'shirt',
    icon: [
      640,
      512,
      [128085, 't-shirt', 'tshirt'],
      'f553',
      'M211.8 0c7.8 0 14.3 5.7 16.7 13.2C240.8 51.9 277.1 80 320 80s79.2-28.1 91.5-66.8C413.9 5.7 420.4 0 428.2 0h12.6c22.5 0 44.2 7.9 61.5 22.3L628.5 127.4c6.6 5.5 10.7 13.5 11.4 22.1s-2.1 17.1-7.8 23.6l-56 64c-11.4 13.1-31.2 14.6-44.6 3.5L480 197.7V448c0 35.3-28.7 64-64 64H224c-35.3 0-64-28.7-64-64V197.7l-51.5 42.9c-13.3 11.1-33.1 9.6-44.6-3.5l-56-64c-5.7-6.5-8.5-15-7.8-23.6s4.8-16.6 11.4-22.1L137.7 22.3C155 7.9 176.7 0 199.2 0h12.6z',
    ],
  };
  var faTShirt = faShirt;
  var faTshirt = faShirt;
  var faCubes = {
    prefix: 'fas',
    iconName: 'cubes',
    icon: [
      576,
      512,
      [],
      'f1b3',
      'M290.8 48.6l78.4 29.7L288 109.5 206.8 78.3l78.4-29.7c1.8-.7 3.8-.7 5.7 0zM136 92.5V204.7c-1.3 .4-2.6 .8-3.9 1.3l-96 36.4C14.4 250.6 0 271.5 0 294.7V413.9c0 22.2 13.1 42.3 33.5 51.3l96 42.2c14.4 6.3 30.7 6.3 45.1 0L288 457.5l113.5 49.9c14.4 6.3 30.7 6.3 45.1 0l96-42.2c20.3-8.9 33.5-29.1 33.5-51.3V294.7c0-23.3-14.4-44.1-36.1-52.4l-96-36.4c-1.3-.5-2.6-.9-3.9-1.3V92.5c0-23.3-14.4-44.1-36.1-52.4l-96-36.4c-12.8-4.8-26.9-4.8-39.7 0l-96 36.4C150.4 48.4 136 69.3 136 92.5zM392 210.6l-82.4 31.2V152.6L392 121v89.6zM154.8 250.9l78.4 29.7L152 311.7 70.8 280.6l78.4-29.7c1.8-.7 3.8-.7 5.7 0zm18.8 204.4V354.8L256 323.2v95.9l-82.4 36.2zM421.2 250.9c1.8-.7 3.8-.7 5.7 0l78.4 29.7L424 311.7l-81.2-31.1 78.4-29.7zM523.2 421.2l-77.6 34.1V354.8L528 323.2v90.7c0 3.2-1.9 6-4.8 7.3z',
    ],
  };
  var faDivide = {
    prefix: 'fas',
    iconName: 'divide',
    icon: [
      448,
      512,
      [10135, 247],
      'f529',
      'M272 96c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm0 320c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM400 288c17.7 0 32-14.3 32-32s-14.3-32-32-32H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H400z',
    ],
  };
  var faTengeSign = {
    prefix: 'fas',
    iconName: 'tenge-sign',
    icon: [
      384,
      512,
      [8376, 'tenge'],
      'f7d7',
      'M0 64C0 46.3 14.3 32 32 32H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64zM0 192c0-17.7 14.3-32 32-32H192 352c17.7 0 32 14.3 32 32s-14.3 32-32 32H224V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V224H32c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faTenge = faTengeSign;
  var faHeadphones = {
    prefix: 'fas',
    iconName: 'headphones',
    icon: [
      512,
      512,
      [127911],
      'f025',
      'M256 80C149.9 80 62.4 159.4 49.6 262c9.4-3.8 19.6-6 30.4-6c26.5 0 48 21.5 48 48V432c0 26.5-21.5 48-48 48c-44.2 0-80-35.8-80-80V384 336 288C0 146.6 114.6 32 256 32s256 114.6 256 256v48 48 16c0 44.2-35.8 80-80 80c-26.5 0-48-21.5-48-48V304c0-26.5 21.5-48 48-48c10.8 0 21 2.1 30.4 6C449.6 159.4 362.1 80 256 80z',
    ],
  };
  var faHandsHolding = {
    prefix: 'fas',
    iconName: 'hands-holding',
    icon: [
      640,
      512,
      [],
      'f4c2',
      'M80 104c0-22.1-17.9-40-40-40S0 81.9 0 104v56 64V325.5c0 25.5 10.1 49.9 28.1 67.9L128 493.3c12 12 28.3 18.7 45.3 18.7H240c26.5 0 48-21.5 48-48V385.1c0-29.7-11.8-58.2-32.8-79.2l-25.3-25.3 0 0-15.2-15.2-32-32c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l32 32 15.2 15.2c11 11 9.2 29.2-3.7 37.8c-9.7 6.5-22.7 5.2-31-3.1L98.7 309.5c-12-12-18.7-28.3-18.7-45.3V224 144 104zm480 0v40 80 40.2c0 17-6.7 33.3-18.7 45.3l-51.1 51.1c-8.3 8.3-21.3 9.6-31 3.1c-12.9-8.6-14.7-26.9-3.7-37.8l15.2-15.2 32-32c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-32 32-15.2 15.2 0 0-25.3 25.3c-21 21-32.8 49.5-32.8 79.2V464c0 26.5 21.5 48 48 48h66.7c17 0 33.3-6.7 45.3-18.7l99.9-99.9c18-18 28.1-42.4 28.1-67.9V224 160 104c0-22.1-17.9-40-40-40s-40 17.9-40 40z',
    ],
  };
  var faHandsClapping = {
    prefix: 'fas',
    iconName: 'hands-clapping',
    icon: [
      576,
      512,
      [],
      'e1a8',
      'M368 16V80c0 8.8-7.2 16-16 16s-16-7.2-16-16V16c0-8.8 7.2-16 16-16s16 7.2 16 16zm-98.7 7.1l32 48c4.9 7.4 2.9 17.3-4.4 22.2s-17.3 2.9-22.2-4.4l-32-48c-4.9-7.4-2.9-17.3 4.4-22.2s17.3-2.9 22.2 4.4zM167 119c9.4-9.4 24.6-9.4 33.9 0L324.7 242.7c10.1 10.1 27.3 2.9 27.3-11.3V192c0-17.7 14.3-32 32-32s32 14.3 32 32V345.6c0 57.1-30 110-78.9 139.4c-64 38.4-145.8 28.3-198.5-24.4L39 361c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l53 53c6.1 6.1 16 6.1 22.1 0s6.1-16 0-22.1L55 265c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l93 93c6.1 6.1 16 6.1 22.1 0s6.1-16 0-22.1L87 185c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l117 117c6.1 6.1 16 6.1 22.1 0s6.1-16 0-22.1l-93-93c-9.4-9.4-9.4-24.6 0-33.9zM465.1 484.9c-24.2 14.5-50.9 22.1-77.7 23.1c48.1-39.6 76.6-99 76.6-162.4l0-98.1c8.2-.1 16-6.4 16-16V192c0-17.7 14.3-32 32-32s32 14.3 32 32V345.6c0 57.1-30 110-78.9 139.4zM456.9 18.7c7.4 4.9 9.3 14.8 4.4 22.2l-32 48c-4.9 7.4-14.8 9.3-22.2 4.4s-9.3-14.8-4.4-22.2l32-48c4.9-7.4 14.8-9.3 22.2-4.4z',
    ],
  };
  var faRepublican = {
    prefix: 'fas',
    iconName: 'republican',
    icon: [
      640,
      512,
      [],
      'f75e',
      'M0 192C0 103.6 71.6 32 160 32H384c88.4 0 160 71.6 160 160v64H0V192zm415.9-64c-2.4 0-4.7 1.3-5.7 3.4l-12.6 24.6-28.2 4c-2.4 .3-4.4 2-5.2 4.2s-.1 4.7 1.6 6.3l20.4 19.2-4.8 27.1c-.4 2.3 .6 4.7 2.5 6s4.6 1.6 6.7 .5l25.2-12.8 25.2 12.8c2.2 1.1 4.8 .9 6.7-.5s3-3.7 2.5-6l-4.8-27.1L466 170.5c1.7-1.6 2.4-4.1 1.6-6.3s-2.8-3.9-5.2-4.2l-28.2-4-12.6-24.6c-1.1-2.1-3.3-3.4-5.7-3.4zm-138.3 3.4c-1.1-2.1-3.3-3.4-5.7-3.4s-4.7 1.3-5.7 3.4l-12.6 24.6-28.2 4c-2.4 .3-4.4 2-5.2 4.2s-.1 4.7 1.6 6.3l20.4 19.2-4.8 27.1c-.4 2.3 .6 4.7 2.5 6s4.6 1.6 6.7 .5l25.2-12.8 25.2 12.8c2.2 1.1 4.8 .9 6.7-.5s3-3.7 2.5-6l-4.8-27.1L322 170.5c1.7-1.6 2.4-4.1 1.6-6.3s-2.8-3.9-5.2-4.2l-28.2-4-12.6-24.6zM127.9 128c-2.4 0-4.7 1.3-5.7 3.4l-12.6 24.6-28.2 4c-2.4 .3-4.4 2-5.2 4.2s-.1 4.7 1.6 6.3l20.4 19.2-4.8 27.1c-.4 2.3 .6 4.7 2.5 6s4.6 1.6 6.7 .5l25.2-12.8 25.2 12.8c2.2 1.1 4.8 .9 6.7-.5s3-3.7 2.5-6l-4.8-27.1L178 170.5c1.7-1.6 2.4-4.1 1.6-6.3s-2.8-3.9-5.2-4.2l-28.2-4-12.6-24.6c-1.1-2.1-3.3-3.4-5.7-3.4zm.1 160H320h96 32 64 32v32 80c0 8.8 7.2 16 16 16s16-7.2 16-16V352c0-17.7 14.3-32 32-32s32 14.3 32 32v48c0 44.2-35.8 80-80 80s-80-35.8-80-80V352H448v32 64c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V384H128v64c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V384 288H128z',
    ],
  };
  var faArrowLeft = {
    prefix: 'fas',
    iconName: 'arrow-left',
    icon: [
      448,
      512,
      [8592],
      'f060',
      'M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z',
    ],
  };
  var faPersonCircleXmark = {
    prefix: 'fas',
    iconName: 'person-circle-xmark',
    icon: [
      576,
      512,
      [],
      'e543',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zM432 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm59.3-180.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z',
    ],
  };
  var faRuler = {
    prefix: 'fas',
    iconName: 'ruler',
    icon: [
      512,
      512,
      [128207],
      'f545',
      'M177.9 494.1c-18.7 18.7-49.1 18.7-67.9 0L17.9 401.9c-18.7-18.7-18.7-49.1 0-67.9l50.7-50.7 48 48c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-48-48 41.4-41.4 48 48c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-48-48 41.4-41.4 48 48c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-48-48 41.4-41.4 48 48c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-48-48 50.7-50.7c18.7-18.7 49.1-18.7 67.9 0l92.1 92.1c18.7 18.7 18.7 49.1 0 67.9L177.9 494.1z',
    ],
  };
  var faAlignLeft = {
    prefix: 'fas',
    iconName: 'align-left',
    icon: [
      448,
      512,
      [],
      'f036',
      'M288 64c0 17.7-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32H256c17.7 0 32 14.3 32 32zm0 256c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H256c17.7 0 32 14.3 32 32zM0 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z',
    ],
  };
  var faDiceD6 = {
    prefix: 'fas',
    iconName: 'dice-d6',
    icon: [
      448,
      512,
      [],
      'f6d1',
      'M216.3 2c4.8-2.6 10.5-2.6 15.3 0L422.3 106c5.1 2.8 8.3 8.2 8.3 14s-3.2 11.2-8.3 14L231.7 238c-4.8 2.6-10.5 2.6-15.3 0L25.7 134c-5.1-2.8-8.3-8.2-8.3-14s3.2-11.2 8.3-14L216.3 2zM23.7 170l176 96c5.1 2.8 8.3 8.2 8.3 14V496c0 5.6-3 10.9-7.8 13.8s-10.9 3-15.8 .3L8.3 414C3.2 411.2 0 405.9 0 400V184c0-5.6 3-10.9 7.8-13.8s10.9-3 15.8-.3zm400.7 0c5-2.7 11-2.6 15.8 .3s7.8 8.1 7.8 13.8V400c0 5.9-3.2 11.2-8.3 14l-176 96c-5 2.7-11 2.6-15.8-.3s-7.8-8.1-7.8-13.8V280c0-5.9 3.2-11.2 8.3-14l176-96z',
    ],
  };
  var faRestroom = {
    prefix: 'fas',
    iconName: 'restroom',
    icon: [
      640,
      512,
      [],
      'f7bd',
      'M176 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM120 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V325.2c-8.1 9.2-21.1 13.2-33.5 9.4c-16.9-5.3-26.3-23.2-21-40.1l30.9-99.1C44.9 155.3 82 128 124 128h8c42 0 79.1 27.3 91.6 67.4l30.9 99.1c5.3 16.9-4.1 34.8-21 40.1c-12.4 3.9-25.4-.2-33.5-9.4V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H120zM320 0c13.3 0 24 10.7 24 24V488c0 13.3-10.7 24-24 24s-24-10.7-24-24V24c0-13.3 10.7-24 24-24zM560 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM440 480V384H422.2c-10.9 0-18.6-10.7-15.2-21.1l9-26.9c-3.2 0-6.4-.5-9.5-1.5c-16.9-5.3-26.3-23.2-21-40.1l29.7-95.2C428.4 156.9 467.6 128 512 128s83.6 28.9 96.8 71.2l29.7 95.2c5.3 16.9-4.1 34.8-21 40.1c-3.2 1-6.4 1.5-9.5 1.5l9 26.9c3.5 10.4-4.3 21.1-15.2 21.1H584v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384H504v96c0 17.7-14.3 32-32 32s-32-14.3-32-32z',
    ],
  };
  var faJ = {
    prefix: 'fas',
    iconName: 'j',
    icon: [
      320,
      512,
      [106],
      '4a',
      'M288 32c17.7 0 32 14.3 32 32V320c0 88.4-71.6 160-160 160S0 408.4 0 320V288c0-17.7 14.3-32 32-32s32 14.3 32 32v32c0 53 43 96 96 96s96-43 96-96V64c0-17.7 14.3-32 32-32z',
    ],
  };
  var faUsersViewfinder = {
    prefix: 'fas',
    iconName: 'users-viewfinder',
    icon: [
      640,
      512,
      [],
      'e595',
      'M48 48h88c13.3 0 24-10.7 24-24s-10.7-24-24-24H32C14.3 0 0 14.3 0 32V136c0 13.3 10.7 24 24 24s24-10.7 24-24V48zM175.8 224c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-26.5 32C119.9 256 96 279.9 96 309.3c0 14.7 11.9 26.7 26.7 26.7h56.1c8-34.1 32.8-61.7 65.2-73.6c-7.5-4.1-16.2-6.4-25.3-6.4H149.3zm368 80c14.7 0 26.7-11.9 26.7-26.7c0-29.5-23.9-53.3-53.3-53.3H421.3c-9.2 0-17.8 2.3-25.3 6.4c32.4 11.9 57.2 39.5 65.2 73.6h56.1zm-89.4 0c-8.6-24.3-29.9-42.6-55.9-47c-3.9-.7-7.9-1-12-1H280c-4.1 0-8.1 .3-12 1c-26 4.4-47.3 22.7-55.9 47c-2.7 7.5-4.1 15.6-4.1 24c0 13.3 10.7 24 24 24H408c13.3 0 24-10.7 24-24c0-8.4-1.4-16.5-4.1-24zM464 224c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-80-32c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zM504 48h88v88c0 13.3 10.7 24 24 24s24-10.7 24-24V32c0-17.7-14.3-32-32-32H504c-13.3 0-24 10.7-24 24s10.7 24 24 24zM48 464V376c0-13.3-10.7-24-24-24s-24 10.7-24 24V480c0 17.7 14.3 32 32 32H136c13.3 0 24-10.7 24-24s-10.7-24-24-24H48zm456 0c-13.3 0-24 10.7-24 24s10.7 24 24 24H608c17.7 0 32-14.3 32-32V376c0-13.3-10.7-24-24-24s-24 10.7-24 24v88H504z',
    ],
  };
  var faFileVideo = {
    prefix: 'fas',
    iconName: 'file-video',
    icon: [
      384,
      512,
      [],
      'f1c8',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM64 288c0-17.7 14.3-32 32-32h96c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V288zM300.9 397.9L256 368V304l44.9-29.9c2-1.3 4.4-2.1 6.8-2.1c6.8 0 12.3 5.5 12.3 12.3V387.7c0 6.8-5.5 12.3-12.3 12.3c-2.4 0-4.8-.7-6.8-2.1z',
    ],
  };
  var faUpRightFromSquare = {
    prefix: 'fas',
    iconName: 'up-right-from-square',
    icon: [
      448,
      512,
      ['external-link-alt'],
      'f35d',
      'M288 32c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9L306.7 128 169.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L352 173.3l41.4 41.4c9.2 9.2 22.9 11.9 34.9 6.9s19.8-16.6 19.8-29.6V64c0-17.7-14.3-32-32-32H288zM80 64C35.8 64 0 99.8 0 144V400c0 44.2 35.8 80 80 80H336c44.2 0 80-35.8 80-80V320c0-17.7-14.3-32-32-32s-32 14.3-32 32v80c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16h80c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z',
    ],
  };
  var faExternalLinkAlt = faUpRightFromSquare;
  var faTableCells = {
    prefix: 'fas',
    iconName: 'table-cells',
    icon: [
      512,
      512,
      ['th'],
      'f00a',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm88 64v64H64V96h88zm56 0h88v64H208V96zm240 0v64H360V96h88zM64 224h88v64H64V224zm232 0v64H208V224h88zm64 0h88v64H360V224zM152 352v64H64V352h88zm56 0h88v64H208V352zm240 0v64H360V352h88z',
    ],
  };
  var faTh = faTableCells;
  var faFilePdf = {
    prefix: 'fas',
    iconName: 'file-pdf',
    icon: [
      384,
      512,
      [],
      'f1c1',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM64 224H88c30.9 0 56 25.1 56 56s-25.1 56-56 56H80v32c0 8.8-7.2 16-16 16s-16-7.2-16-16V320 240c0-8.8 7.2-16 16-16zm24 80c13.3 0 24-10.7 24-24s-10.7-24-24-24H80v48h8zm72-64c0-8.8 7.2-16 16-16h24c26.5 0 48 21.5 48 48v64c0 26.5-21.5 48-48 48H176c-8.8 0-16-7.2-16-16V240zm32 112h8c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16h-8v96zm96-128h48c8.8 0 16 7.2 16 16s-7.2 16-16 16H304v32h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H304v48c0 8.8-7.2 16-16 16s-16-7.2-16-16V304 240c0-8.8 7.2-16 16-16z',
    ],
  };
  var faBookBible = {
    prefix: 'fas',
    iconName: 'book-bible',
    icon: [
      448,
      512,
      ['bible'],
      'f647',
      'M96 0C43 0 0 43 0 96V416c0 53 43 96 96 96H384h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H384 96zm0 384H352v64H96c-17.7 0-32-14.3-32-32s14.3-32 32-32zM208 80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272V304c0 8.8-7.2 16-16 16H224c-8.8 0-16-7.2-16-16V192H160c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16h48V80z',
    ],
  };
  var faBible = faBookBible;
  var faO = {
    prefix: 'fas',
    iconName: 'o',
    icon: [
      448,
      512,
      [111],
      '4f',
      'M224 96C135.6 96 64 167.6 64 256s71.6 160 160 160s160-71.6 160-160s-71.6-160-160-160zM0 256C0 132.3 100.3 32 224 32s224 100.3 224 224s-100.3 224-224 224S0 379.7 0 256z',
    ],
  };
  var faSuitcaseMedical = {
    prefix: 'fas',
    iconName: 'suitcase-medical',
    icon: [
      512,
      512,
      ['medkit'],
      'f0fa',
      'M184 48H328c4.4 0 8 3.6 8 8V96H176V56c0-4.4 3.6-8 8-8zm-56 8V96v32V480H384V128 96 56c0-30.9-25.1-56-56-56H184c-30.9 0-56 25.1-56 56zM96 96H64C28.7 96 0 124.7 0 160V416c0 35.3 28.7 64 64 64H96V96zM416 480h32c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H416V480zM224 208c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H288v48c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V320H176c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h48V208z',
    ],
  };
  var faMedkit = faSuitcaseMedical;
  var faUserSecret = {
    prefix: 'fas',
    iconName: 'user-secret',
    icon: [
      448,
      512,
      [128373],
      'f21b',
      'M224 16c-6.7 0-10.8-2.8-15.5-6.1C201.9 5.4 194 0 176 0c-30.5 0-52 43.7-66 89.4C62.7 98.1 32 112.2 32 128c0 14.3 25 27.1 64.6 35.9c-.4 4-.6 8-.6 12.1c0 17 3.3 33.2 9.3 48H45.4C38 224 32 230 32 237.4c0 1.7 .3 3.4 1 5l38.8 96.9C28.2 371.8 0 423.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7c0-58.5-28.2-110.4-71.7-143L415 242.4c.6-1.6 1-3.3 1-5c0-7.4-6-13.4-13.4-13.4H342.7c6-14.8 9.3-31 9.3-48c0-4.1-.2-8.1-.6-12.1C391 155.1 416 142.3 416 128c0-15.8-30.7-29.9-78-38.6C324 43.7 302.5 0 272 0c-18 0-25.9 5.4-32.5 9.9c-4.7 3.3-8.8 6.1-15.5 6.1zm56 208H267.6c-16.5 0-31.1-10.6-36.3-26.2c-2.3-7-12.2-7-14.5 0c-5.2 15.6-19.9 26.2-36.3 26.2H168c-22.1 0-40-17.9-40-40V169.6c28.2 4.1 61 6.4 96 6.4s67.8-2.3 96-6.4V184c0 22.1-17.9 40-40 40zm-88 96l16 32L176 480 128 288l64 32zm128-32L272 480 240 352l16-32 64-32z',
    ],
  };
  var faOtter = {
    prefix: 'fas',
    iconName: 'otter',
    icon: [
      640,
      512,
      [129446],
      'f700',
      'M181.5 197.1l12.9 6.4c5.9 3 12.4 4.5 19.1 4.5c23.5 0 42.6-19.1 42.6-42.6V144c0-35.3-28.7-64-64-64H128c-35.3 0-64 28.7-64 64v21.4c0 23.5 19.1 42.6 42.6 42.6c6.6 0 13.1-1.5 19.1-4.5l12.9-6.4 8.4-4.2L135.1 185c-4.5-3-7.1-8-7.1-13.3V168c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24v3.7c0 5.3-2.7 10.3-7.1 13.3l-11.8 7.9 8.4 4.2zm-8.6 49.4L160 240l-12.9 6.4c-12.6 6.3-26.5 9.6-40.5 9.6c-3.6 0-7.1-.2-10.6-.6v.6c0 35.3 28.7 64 64 64h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384V336 320c0-23.7 12.9-44.4 32-55.4c9.4-5.4 20.3-8.6 32-8.6V240c0-26.5 21.5-48 48-48c8.8 0 16 7.2 16 16v32 16 48c0 8.8 7.2 16 16 16s16-7.2 16-16V204.3c0-48.2-30.8-91-76.6-106.3l-8.5-2.8c-8-2.7-12.6-11.1-10.4-19.3s10.3-13.2 18.6-11.6l19.9 4C576 86.1 640 164.2 640 254.9l0 1.1h0c0 123.7-100.3 224-224 224h-1.1H256h-.6C132 480 32 380 32 256.6V256 216.8c-10.1-14.6-16-32.3-16-51.4V144l0-1.4C6.7 139.3 0 130.5 0 120c0-13.3 10.7-24 24-24h2.8C44.8 58.2 83.3 32 128 32h64c44.7 0 83.2 26.2 101.2 64H296c13.3 0 24 10.7 24 24c0 10.5-6.7 19.3-16 22.6l0 1.4v21.4c0 1.4 0 2.8-.1 4.3c12-6.2 25.7-9.6 40.1-9.6h8c17.7 0 32 14.3 32 32s-14.3 32-32 32h-8c-13.3 0-24 10.7-24 24v8h56.4c-15.2 17-24.4 39.4-24.4 64H320c-42.3 0-78.2-27.4-91-65.3c-5.1 .9-10.3 1.3-15.6 1.3c-14.1 0-27.9-3.3-40.5-9.6zM96 160c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm144-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faPersonDress = {
    prefix: 'fas',
    iconName: 'person-dress',
    icon: [
      320,
      512,
      ['female'],
      'f182',
      'M160 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM88 384H70.2c-10.9 0-18.6-10.7-15.2-21.1L93.3 248.1 59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l53.6-89.2c20.3-33.7 56.7-54.3 96-54.3h11.6c39.3 0 75.7 20.6 96 54.3l53.6 89.2c9.1 15.1 4.2 34.8-10.9 43.9s-34.8 4.2-43.9-10.9l-33.9-56.3L265 362.9c3.5 10.4-4.3 21.1-15.2 21.1H232v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384H152v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z',
    ],
  };
  var faFemale = faPersonDress;
  var faCommentDollar = {
    prefix: 'fas',
    iconName: 'comment-dollar',
    icon: [
      512,
      512,
      [],
      'f651',
      'M256 448c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3 0 0 0 0 0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9zm20-312v13.9c7.5 1.2 14.6 2.9 21.1 4.7c10.7 2.8 17 13.8 14.2 24.5s-13.8 17-24.5 14.2c-11-2.9-21.6-5-31.2-5.2c-7.9-.1-16 1.8-21.5 5c-4.8 2.8-6.2 5.6-6.2 9.3c0 1.8 .1 3.5 5.3 6.7c6.3 3.8 15.5 6.7 28.3 10.5l.7 .2c11.2 3.4 25.6 7.7 37.1 15c12.9 8.1 24.3 21.3 24.6 41.6c.3 20.9-10.5 36.1-24.8 45c-7.2 4.5-15.2 7.3-23.2 9V344c0 11-9 20-20 20s-20-9-20-20V329.4c-10.3-2.2-20-5.5-28.2-8.4l0 0 0 0c-2.1-.7-4.1-1.4-6.1-2.1c-10.5-3.5-16.1-14.8-12.6-25.3s14.8-16.1 25.3-12.6c2.5 .8 4.9 1.7 7.2 2.4c13.6 4.6 24 8.1 35.1 8.5c8.6 .3 16.5-1.6 21.4-4.7c4.1-2.5 6-5.5 5.9-10.5c0-2.9-.8-5-5.9-8.2c-6.3-4-15.4-6.9-28-10.7l-1.7-.5c-10.9-3.3-24.6-7.4-35.6-14c-12.7-7.7-24.6-20.5-24.7-40.7c-.1-21.1 11.8-35.7 25.8-43.9c6.9-4.1 14.5-6.8 22.2-8.5V136c0-11 9-20 20-20s20 9 20 20z',
    ],
  };
  var faBusinessTime = {
    prefix: 'fas',
    iconName: 'business-time',
    icon: [
      640,
      512,
      ['briefcase-clock'],
      'f64a',
      'M184 48H328c4.4 0 8 3.6 8 8V96H176V56c0-4.4 3.6-8 8-8zm-56 8V96H64C28.7 96 0 124.7 0 160v96H192 352h8.2c32.3-39.1 81.1-64 135.8-64c5.4 0 10.7 .2 16 .7V160c0-35.3-28.7-64-64-64H384V56c0-30.9-25.1-56-56-56H184c-30.9 0-56 25.1-56 56zM320 352H224c-17.7 0-32-14.3-32-32V288H0V416c0 35.3 28.7 64 64 64H360.2C335.1 449.6 320 410.5 320 368c0-5.4 .2-10.7 .7-16l-.7 0zm320 16c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zM496 288c8.8 0 16 7.2 16 16v48h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H496c-8.8 0-16-7.2-16-16V304c0-8.8 7.2-16 16-16z',
    ],
  };
  var faBriefcaseClock = faBusinessTime;
  var faTableCellsLarge = {
    prefix: 'fas',
    iconName: 'table-cells-large',
    icon: [
      512,
      512,
      ['th-large'],
      'f009',
      'M448 96V224H288V96H448zm0 192V416H288V288H448zM224 224H64V96H224V224zM64 288H224V416H64V288zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z',
    ],
  };
  var faThLarge = faTableCellsLarge;
  var faBookTanakh = {
    prefix: 'fas',
    iconName: 'book-tanakh',
    icon: [
      448,
      512,
      ['tanakh'],
      'f827',
      'M352 0c53 0 96 43 96 96V416c0 53-43 96-96 96H64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32V384c-17.7 0-32-14.3-32-32V32C0 14.3 14.3 0 32 0H64 352zm0 384H96v64H352c17.7 0 32-14.3 32-32s-14.3-32-32-32zM138.7 208l13.9 24H124.9l13.9-24zm-13.9-24L97.1 232c-6.2 10.7 1.5 24 13.9 24h55.4l27.7 48c6.2 10.7 21.6 10.7 27.7 0l27.7-48H305c12.3 0 20-13.3 13.9-24l-27.7-48 27.7-48c6.2-10.7-1.5-24-13.9-24H249.6L221.9 64c-6.2-10.7-21.6-10.7-27.7 0l-27.7 48H111c-12.3 0-20 13.3-13.9 24l27.7 48zm27.7 0l27.7-48h55.4l27.7 48-27.7 48H180.3l-27.7-48zm0-48l-13.9 24-13.9-24h27.7zm41.6-24L208 88l13.9 24H194.1zm69.3 24h27.7l-13.9 24-13.9-24zm13.9 72l13.9 24H263.4l13.9-24zm-55.4 48L208 280l-13.9-24h27.7z',
    ],
  };
  var faTanakh = faBookTanakh;
  var faPhoneVolume = {
    prefix: 'fas',
    iconName: 'phone-volume',
    icon: [
      512,
      512,
      ['volume-control-phone'],
      'f2a0',
      'M188.8 39.3c13.8 8.5 19.6 26.8 13.6 42.7L174.2 156c-5.3 14-18.5 22.5-32.4 21l-42.6-4.6c-17.4 54.1-17.4 113.2 0 167.3l42.6-4.6c13.9-1.5 27.1 7 32.4 21L202.4 430c6.1 15.9 .3 34.2-13.6 42.7l-56.4 34.8c-12.4 7.7-28 5.4-38.1-5.5C-31.4 366.1-31.4 145.9 94.3 10C104.4-.9 120.1-3.1 132.5 4.5l56.4 34.8zm218.4-5.5C471.2 86.6 512 166.6 512 256s-40.8 169.4-104.7 222.2c-10.2 8.4-25.3 7-33.8-3.2s-7-25.3 3.2-33.8C430.1 397.1 464 330.5 464 256s-33.9-141.1-87.3-185.2c-10.2-8.4-11.7-23.6-3.2-33.8s23.6-11.7 33.8-3.2zm-64.4 71.4C387.4 140.4 416 194.8 416 256s-28.6 115.6-73.1 150.8c-10.4 8.2-25.5 6.4-33.7-4s-6.4-25.5 4-33.7C346.6 342.7 368 301.8 368 256s-21.4-86.7-54.8-113.1c-10.4-8.2-12.2-23.3-4-33.7s23.3-12.2 33.7-4zm-65.4 71C303.1 193.5 320 222.8 320 256s-16.9 62.5-42.5 79.7c-11 7.4-25.9 4.5-33.3-6.5s-4.5-25.9 6.5-33.3c12.9-8.7 21.3-23.3 21.3-39.9s-8.4-31.2-21.3-39.9c-11-7.4-13.9-22.3-6.5-33.3s22.3-13.9 33.3-6.5z',
    ],
  };
  var faVolumeControlPhone = faPhoneVolume;
  var faHatCowboySide = {
    prefix: 'fas',
    iconName: 'hat-cowboy-side',
    icon: [
      640,
      512,
      [],
      'f8c1',
      'M463.2 71.3c-2.4-12.8-9.8-24.1-20.7-31.3s-24.2-9.7-36.9-6.8l-216 48c-19.8 4.4-34.7 20.8-37.2 40.9l-8.8 70.6c5.3-.4 10.8-.7 16.5-.7c82.9 0 141.9 55.3 197.5 107.5l0 0c3.1 3 6.3 5.9 9.4 8.8C427.1 364.5 486.9 416 576 416c0 0 64 0 64-48c0-96-112-128-144-128h-1.6L463.2 71.3zM576 448c-102.9 0-171.1-60.5-230.9-116.3l-6.5-6C279.9 270.8 229.9 224 160 224c-57.8 0-97.4 28.6-123.1 63.5C10.7 323 0 363.8 0 384c0 35.3 28.7 64 64 64H576z',
    ],
  };
  var faClipboardUser = {
    prefix: 'fas',
    iconName: 'clipboard-user',
    icon: [
      384,
      512,
      [],
      'f7f3',
      'M192 0c-41.8 0-77.4 26.7-90.5 64H64C28.7 64 0 92.7 0 128V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H282.5C269.4 26.7 233.8 0 192 0zm0 128c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm64 128c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM80 432c0-44.2 35.8-80 80-80h64c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faChild = {
    prefix: 'fas',
    iconName: 'child',
    icon: [
      320,
      512,
      [],
      'f1ae',
      'M224 64c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM144 384v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V287.8L59.1 321c-9.4 15-29.2 19.4-44.1 10S-4.5 301.9 4.9 287l39.9-63.3C69.7 184 113.2 160 160 160s90.3 24 115.2 63.6L315.1 287c9.4 15 4.9 34.7-10 44.1s-34.7 4.9-44.1-10L240 287.8V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V384H144z',
    ],
  };
  var faLiraSign = {
    prefix: 'fas',
    iconName: 'lira-sign',
    icon: [
      384,
      512,
      [8356],
      'f195',
      'M144 160.4c0-35.5 28.8-64.4 64.4-64.4c6.9 0 13.8 1.1 20.4 3.3l81.2 27.1c16.8 5.6 34.9-3.5 40.5-20.2s-3.5-34.9-20.2-40.5L249 38.6c-13.1-4.4-26.8-6.6-40.6-6.6C137.5 32 80 89.5 80 160.4V192H64c-17.7 0-32 14.3-32 32s14.3 32 32 32H80v32H64c-17.7 0-32 14.3-32 32s14.3 32 32 32H78c-2.2 10.5-6.1 20.6-11.7 29.9L36.6 431.5c-5.9 9.9-6.1 22.2-.4 32.2S52.5 480 64 480H320c17.7 0 32-14.3 32-32s-14.3-32-32-32H120.5l.7-1.1c11.6-19.3 18.9-40.7 21.6-62.9H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H144V256H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H144V160.4z',
    ],
  };
  var faSatellite = {
    prefix: 'fas',
    iconName: 'satellite',
    icon: [
      512,
      512,
      [128752],
      'f7bf',
      'M233 7c-9.4-9.4-24.6-9.4-33.9 0l-96 96c-9.4 9.4-9.4 24.6 0 33.9l89.4 89.4-15.5 15.5C152.3 230.4 124.9 224 96 224c-31.7 0-61.5 7.7-87.8 21.2c-9 4.7-10.3 16.7-3.1 23.8L112.7 376.7 96.3 393.1c-2.6-.7-5.4-1.1-8.3-1.1c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32c0-2.9-.4-5.6-1.1-8.3l16.4-16.4L242.9 506.9c7.2 7.2 19.2 5.9 23.8-3.1C280.3 477.5 288 447.7 288 416c0-28.9-6.4-56.3-17.8-80.9l15.5-15.5L375 409c9.4 9.4 24.6 9.4 33.9 0l96-96c9.4-9.4 9.4-24.6 0-33.9l-89.4-89.4 55-55c12.5-12.5 12.5-32.8 0-45.3l-48-48c-12.5-12.5-32.8-12.5-45.3 0l-55 55L233 7zm159 351l-72.4-72.4 62.1-62.1L454.1 296 392 358.1zM226.3 192.4L153.9 120 216 57.9l72.4 72.4-62.1 62.1z',
    ],
  };
  var faPlaneLock = {
    prefix: 'fas',
    iconName: 'plane-lock',
    icon: [
      640,
      512,
      [],
      'e558',
      'M192 93.7C192 59.5 221 0 256 0c36 0 64 59.5 64 93.7v84.6l101.8 58.2C418 247.6 416 259.6 416 272v24.6c-17.9 10.4-30.3 29.1-31.8 50.9L320 329.1V400l57.6 43.2c4 3 6.4 7.8 6.4 12.8v24 18c0 7.8-6.3 14-14 14c-1.3 0-2.6-.2-3.9-.5L256 480 145.9 511.5c-1.3 .4-2.6 .5-3.9 .5c-7.8 0-14-6.3-14-14V456c0-5 2.4-9.8 6.4-12.8L192 400l0-70.9-171.6 49C10.2 381.1 0 373.4 0 362.8V297.3c0-5.7 3.1-11 8.1-13.9L192 178.3V93.7zM528 240c-17.7 0-32 14.3-32 32v48h64V272c0-17.7-14.3-32-32-32zm-80 32c0-44.2 35.8-80 80-80s80 35.8 80 80v48c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H448c-17.7 0-32-14.3-32-32V352c0-17.7 14.3-32 32-32V272z',
    ],
  };
  var faTag = {
    prefix: 'fas',
    iconName: 'tag',
    icon: [
      448,
      512,
      [127991],
      'f02b',
      'M0 80V229.5c0 17 6.7 33.3 18.7 45.3l176 176c25 25 65.5 25 90.5 0L418.7 317.3c25-25 25-65.5 0-90.5l-176-176c-12-12-28.3-18.7-45.3-18.7H48C21.5 32 0 53.5 0 80zm112 96c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faComment = {
    prefix: 'fas',
    iconName: 'comment',
    icon: [
      512,
      512,
      [128489, 61669],
      'f075',
      'M512 240c0 114.9-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4l0 0 0 0 0 0 0 0 .3-.3c.3-.3 .7-.7 1.3-1.4c1.1-1.2 2.8-3.1 4.9-5.7c4.1-5 9.6-12.4 15.2-21.6c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208z',
    ],
  };
  var faCakeCandles = {
    prefix: 'fas',
    iconName: 'cake-candles',
    icon: [
      448,
      512,
      [127874, 'birthday-cake', 'cake'],
      'f1fd',
      'M86.4 5.5L61.8 47.6C58 54.1 56 61.6 56 69.2V72c0 22.1 17.9 40 40 40s40-17.9 40-40V69.2c0-7.6-2-15-5.8-21.6L105.6 5.5C103.6 2.1 100 0 96 0s-7.6 2.1-9.6 5.5zm128 0L189.8 47.6c-3.8 6.5-5.8 14-5.8 21.6V72c0 22.1 17.9 40 40 40s40-17.9 40-40V69.2c0-7.6-2-15-5.8-21.6L233.6 5.5C231.6 2.1 228 0 224 0s-7.6 2.1-9.6 5.5zM317.8 47.6c-3.8 6.5-5.8 14-5.8 21.6V72c0 22.1 17.9 40 40 40s40-17.9 40-40V69.2c0-7.6-2-15-5.8-21.6L361.6 5.5C359.6 2.1 356 0 352 0s-7.6 2.1-9.6 5.5L317.8 47.6zM128 176c0-17.7-14.3-32-32-32s-32 14.3-32 32v48c-35.3 0-64 28.7-64 64v71c8.3 5.2 18.1 9 28.8 9c13.5 0 27.2-6.1 38.4-13.4c5.4-3.5 9.9-7.1 13-9.7c1.5-1.3 2.7-2.4 3.5-3.1c.4-.4 .7-.6 .8-.8l.1-.1 0 0 0 0s0 0 0 0s0 0 0 0c3.1-3.2 7.4-4.9 11.9-4.8s8.6 2.1 11.6 5.4l0 0 0 0 .1 .1c.1 .1 .4 .4 .7 .7c.7 .7 1.7 1.7 3.1 3c2.8 2.6 6.8 6.1 11.8 9.5c10.2 7.1 23 13.1 36.3 13.1s26.1-6 36.3-13.1c5-3.5 9-6.9 11.8-9.5c1.4-1.3 2.4-2.3 3.1-3c.3-.3 .6-.6 .7-.7l.1-.1c3-3.5 7.4-5.4 12-5.4s9 2 12 5.4l.1 .1c.1 .1 .4 .4 .7 .7c.7 .7 1.7 1.7 3.1 3c2.8 2.6 6.8 6.1 11.8 9.5c10.2 7.1 23 13.1 36.3 13.1s26.1-6 36.3-13.1c5-3.5 9-6.9 11.8-9.5c1.4-1.3 2.4-2.3 3.1-3c.3-.3 .6-.6 .7-.7l.1-.1c2.9-3.4 7.1-5.3 11.6-5.4s8.7 1.6 11.9 4.8l0 0 0 0 0 0 .1 .1c.2 .2 .4 .4 .8 .8c.8 .7 1.9 1.8 3.5 3.1c3.1 2.6 7.5 6.2 13 9.7c11.2 7.3 24.9 13.4 38.4 13.4c10.7 0 20.5-3.9 28.8-9V288c0-35.3-28.7-64-64-64V176c0-17.7-14.3-32-32-32s-32 14.3-32 32v48H256V176c0-17.7-14.3-32-32-32s-32 14.3-32 32v48H128V176zM448 394.6c-8.5 3.3-18.2 5.4-28.8 5.4c-22.5 0-42.4-9.9-55.8-18.6c-4.1-2.7-7.8-5.4-10.9-7.8c-2.8 2.4-6.1 5-9.8 7.5C329.8 390 310.6 400 288 400s-41.8-10-54.6-18.9c-3.5-2.4-6.7-4.9-9.4-7.2c-2.7 2.3-5.9 4.7-9.4 7.2C201.8 390 182.6 400 160 400s-41.8-10-54.6-18.9c-3.7-2.6-7-5.2-9.8-7.5c-3.1 2.4-6.8 5.1-10.9 7.8C71.2 390.1 51.3 400 28.8 400c-10.6 0-20.3-2.2-28.8-5.4V480c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32V394.6z',
    ],
  };
  var faBirthdayCake = faCakeCandles;
  var faCake = faCakeCandles;
  var faEnvelope = {
    prefix: 'fas',
    iconName: 'envelope',
    icon: [
      512,
      512,
      [128386, 9993, 61443],
      'f0e0',
      'M48 64C21.5 64 0 85.5 0 112c0 15.1 7.1 29.3 19.2 38.4L236.8 313.6c11.4 8.5 27 8.5 38.4 0L492.8 150.4c12.1-9.1 19.2-23.3 19.2-38.4c0-26.5-21.5-48-48-48H48zM0 176V384c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V176L294.4 339.2c-22.8 17.1-54 17.1-76.8 0L0 176z',
    ],
  };
  var faAnglesUp = {
    prefix: 'fas',
    iconName: 'angles-up',
    icon: [
      448,
      512,
      ['angle-double-up'],
      'f102',
      'M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z',
    ],
  };
  var faAngleDoubleUp = faAnglesUp;
  var faPaperclip = {
    prefix: 'fas',
    iconName: 'paperclip',
    icon: [
      512,
      512,
      [128206],
      'f0c6',
      'M396.2 83.8c-24.4-24.4-64-24.4-88.4 0l-184 184c-42.1 42.1-42.1 110.3 0 152.4s110.3 42.1 152.4 0l152-152c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-152 152c-64 64-167.6 64-231.6 0s-64-167.6 0-231.6l184-184c46.3-46.3 121.3-46.3 167.6 0s46.3 121.3 0 167.6l-176 176c-28.6 28.6-75 28.6-103.6 0s-28.6-75 0-103.6l144-144c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-144 144c-6.7 6.7-6.7 17.7 0 24.4s17.7 6.7 24.4 0l176-176c24.4-24.4 24.4-64 0-88.4z',
    ],
  };
  var faArrowRightToCity = {
    prefix: 'fas',
    iconName: 'arrow-right-to-city',
    icon: [
      640,
      512,
      [],
      'e4b3',
      'M288 48c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48V192h40V120c0-13.3 10.7-24 24-24s24 10.7 24 24v72h24c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H432 336c-26.5 0-48-21.5-48-48V48zm64 32v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16zm16 80c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H368zM352 272v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16zm176-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H528zM512 368v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H528c-8.8 0-16 7.2-16 16zM166.6 153.4l80 80c12.5 12.5 12.5 32.8 0 45.3l-80 80c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L146.7 288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H146.7l-25.4-25.4c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0z',
    ],
  };
  var faRibbon = {
    prefix: 'fas',
    iconName: 'ribbon',
    icon: [
      448,
      512,
      [127895],
      'f4d6',
      'M224 96c39.5 0 66.8 12.2 81.9 21.5L245.6 184l79.3 87.4 36.3-40c14.7-16.2 22.8-37.3 22.8-59.1v-27c0-15.6-4.1-30.8-12-44.3L337.7 42C326.4 22.7 307 6.8 282.1 3.5C267.8 1.6 248.4 0 224 0s-43.8 1.6-58 3.5C141 6.8 121.7 22.7 110.4 42L76 101c-7.8 13.4-12 28.7-12 44.3v27c0 21.9 8.1 42.9 22.8 59.1l57.9 63.8L224 382.6 334.2 504.1c6.4 7 16.3 9.7 25.4 6.6l72-24c7.7-2.6 13.6-8.8 15.6-16.7s0-16.2-5.4-22.2L303.3 295.2 224 207.8l-81.9-90.3C157.3 108.2 184.5 96 224 96zM202.4 406.5L123.2 319 6.3 447.9c-5.4 6-7.5 14.4-5.4 22.2s7.9 14.1 15.6 16.7l72 24c9 3 19 .4 25.4-6.6l88.6-97.7z',
    ],
  };
  var faLungs = {
    prefix: 'fas',
    iconName: 'lungs',
    icon: [
      640,
      512,
      [129729],
      'f604',
      'M320 0c17.7 0 32 14.3 32 32V164.1c0 16.4 8.4 31.7 22.2 40.5l9.8 6.2V165.3C384 127 415 96 453.3 96c21.7 0 42.8 10.2 55.8 28.8c15.4 22.1 44.3 65.4 71 116.9c26.5 50.9 52.4 112.5 59.6 170.3c.2 1.3 .2 2.6 .2 4v7c0 49.1-39.8 89-89 89c-7.3 0-14.5-.9-21.6-2.7l-72.7-18.2C414 480.5 384 442.1 384 398V325l90.5 57.6c7.5 4.7 17.3 2.5 22.1-4.9s2.5-17.3-4.9-22.1L384 287.1v-.4l-44.1-28.1c-7.3-4.6-13.9-10.1-19.9-16.1c-5.9 6-12.6 11.5-19.9 16.1L256 286.7 161.2 347l-13.5 8.6c0 0 0 0-.1 0c-7.4 4.8-9.6 14.6-4.8 22.1c4.7 7.5 14.6 9.7 22.1 4.9l91.1-58V398c0 44.1-30 82.5-72.7 93.1l-72.7 18.2c-7.1 1.8-14.3 2.7-21.6 2.7c-49.1 0-89-39.8-89-89v-7c0-1.3 .1-2.7 .2-4c7.2-57.9 33.1-119.4 59.6-170.3c26.8-51.5 55.6-94.8 71-116.9c13-18.6 34-28.8 55.8-28.8C225 96 256 127 256 165.3v45.5l9.8-6.2c13.8-8.8 22.2-24.1 22.2-40.5V32c0-17.7 14.3-32 32-32z',
    ],
  };
  var faArrowUp91 = {
    prefix: 'fas',
    iconName: 'arrow-up-9-1',
    icon: [
      576,
      512,
      ['sort-numeric-up-alt'],
      'f887',
      'M160 32c9 0 17.5 3.8 23.6 10.4l88 96c11.9 13 11.1 33.3-2 45.2s-33.3 11.1-45.2-2L192 146.3V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V146.3L95.6 181.6c-11.9 13-32.2 13.9-45.2 2s-13.9-32.2-2-45.2l88-96C142.5 35.8 151 32 160 32zM352 320c0-17.7 14.3-32 32-32h48c17.7 0 32 14.3 32 32v96h16c17.7 0 32 14.3 32 32s-14.3 32-32 32H432 384c-17.7 0-32-14.3-32-32s14.3-32 32-32h16V352H384c-17.7 0-32-14.3-32-32zm93.7-171.1c10.8-5.1 18.3-16.2 18.3-28.9c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32c4.9 0 9.6-1.1 13.7-3.1zm-40.7 54.9C369.6 192.4 344 159.2 344 120c0-48.6 39.4-88 88-88s88 39.4 88 88c0 23.5-7.5 46.3-21.5 65.2L449.7 251c-10.5 14.2-30.6 17.2-44.8 6.7s-17.2-30.6-6.7-44.8l6.8-9.2z',
    ],
  };
  var faSortNumericUpAlt = faArrowUp91;
  var faLitecoinSign = {
    prefix: 'fas',
    iconName: 'litecoin-sign',
    icon: [
      448,
      512,
      [],
      'e1d3',
      'M160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32V213.6L55.2 225.2c-17 4.9-26.8 22.6-22 39.6s22.6 26.8 39.6 22L96 280.1V448c0 17.7 14.3 32 32 32H384c17.7 0 32-14.3 32-32s-14.3-32-32-32H160V261.9l136.8-39.1c17-4.9 26.8-22.6 22-39.6s-22.6-26.8-39.6-22L160 195.3V64z',
    ],
  };
  var faBorderNone = {
    prefix: 'fas',
    iconName: 'border-none',
    icon: [
      448,
      512,
      [],
      'f850',
      'M32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zm96 64c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0-384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0 128c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zM320 480c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0-448c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zm0 256c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM224 416c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zm0-320c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0 128c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zM416 480c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm0-384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM32 32C14.3 32 0 46.3 0 64S14.3 96 32 96s32-14.3 32-32s-14.3-32-32-32zM416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zM224 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm192-64c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zM32 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM416 128c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zM32 192c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm192-64c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32z',
    ],
  };
  var faCircleNodes = {
    prefix: 'fas',
    iconName: 'circle-nodes',
    icon: [
      512,
      512,
      [],
      'e4e2',
      'M418.4 157.9c35.3-8.3 61.6-40 61.6-77.9c0-44.2-35.8-80-80-80c-43.4 0-78.7 34.5-80 77.5L136.2 151.1C121.7 136.8 101.9 128 80 128c-44.2 0-80 35.8-80 80s35.8 80 80 80c12.2 0 23.8-2.7 34.1-7.6L259.7 407.8c-2.4 7.6-3.7 15.8-3.7 24.2c0 44.2 35.8 80 80 80s80-35.8 80-80c0-27.7-14-52.1-35.4-66.4l37.8-207.7zM156.3 232.2c2.2-6.9 3.5-14.2 3.7-21.7l183.8-73.5c3.6 3.5 7.4 6.7 11.6 9.5L317.6 354.1c-5.5 1.3-10.8 3.1-15.8 5.5L156.3 232.2z',
    ],
  };
  var faParachuteBox = {
    prefix: 'fas',
    iconName: 'parachute-box',
    icon: [
      512,
      512,
      [],
      'f4cd',
      'M383.5 192c.3-5.3 .5-10.6 .5-16c0-51-15.9-96-40.2-127.6C319.5 16.9 288.2 0 256 0s-63.5 16.9-87.8 48.4C143.9 80 128 125 128 176c0 5.4 .2 10.7 .5 16H240V320H208c-7 0-13.7 1.5-19.7 4.2L68.2 192H96.5c-.3-5.3-.5-10.6-.5-16c0-64 22.2-121.2 57.1-159.3C62 49.3 18.6 122.6 4.2 173.6C1.5 183.1 9 192 18.9 192h6L165.2 346.3c-3.3 6.5-5.2 13.9-5.2 21.7v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V368c0-7.8-1.9-15.2-5.2-21.7L487.1 192h6c9.9 0 17.4-8.9 14.7-18.4C493.4 122.6 450 49.3 358.9 16.7C393.8 54.8 416 112.1 416 176c0 5.4-.2 10.7-.5 16h28.3L323.7 324.2c-6-2.7-12.7-4.2-19.7-4.2H272V192H383.5z',
    ],
  };
  var faIndent = {
    prefix: 'fas',
    iconName: 'indent',
    icon: [
      448,
      512,
      [],
      'f03c',
      'M0 64C0 46.3 14.3 32 32 32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64zM192 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32zm32 96H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32zM0 448c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM127.8 268.6L25.8 347.9C15.3 356.1 0 348.6 0 335.3V176.7c0-13.3 15.3-20.8 25.8-12.6l101.9 79.3c8.2 6.4 8.2 18.9 0 25.3z',
    ],
  };
  var faTruckFieldUn = {
    prefix: 'fas',
    iconName: 'truck-field-un',
    icon: [
      640,
      512,
      [],
      'e58e',
      'M96 32C60.7 32 32 60.7 32 96v32c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32v32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64c0 53 43 96 96 96s96-43 96-96H384c0 53 43 96 96 96s96-43 96-96h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V288c0-35.3-28.7-64-64-64h-4.2c-.4-1.1-.9-2.1-1.3-3.2L485.7 102c-10.3-23.1-33.2-38-58.5-38H375.4C364.4 44.9 343.7 32 320 32H96zm288 96h43.2l42.7 96H384V128zM208 384c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm272 48c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM253.3 135.1l34.7 52V144c0-8.8 7.2-16 16-16s16 7.2 16 16v96c0 7.1-4.6 13.3-11.4 15.3s-14-.6-17.9-6.4l-34.7-52V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V144c0-7.1 4.6-13.3 11.4-15.3s14 .6 17.9 6.4zM128 144v64c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8 7.2-16 16-16s16 7.2 16 16v64c0 26.5-21.5 48-48 48s-48-21.5-48-48V144c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faHourglass = {
    prefix: 'fas',
    iconName: 'hourglass',
    icon: [
      384,
      512,
      [9203, 62032, 'hourglass-empty'],
      'f254',
      'M0 32C0 14.3 14.3 0 32 0H64 320h32c17.7 0 32 14.3 32 32s-14.3 32-32 32V75c0 42.4-16.9 83.1-46.9 113.1L237.3 256l67.9 67.9c30 30 46.9 70.7 46.9 113.1v11c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32V437c0-42.4 16.9-83.1 46.9-113.1L146.7 256 78.9 188.1C48.9 158.1 32 117.4 32 75V64C14.3 64 0 49.7 0 32zM96 64V75c0 25.5 10.1 49.9 28.1 67.9L192 210.7l67.9-67.9c18-18 28.1-42.4 28.1-67.9V64H96zm0 384H288V437c0-25.5-10.1-49.9-28.1-67.9L192 301.3l-67.9 67.9c-18 18-28.1 42.4-28.1 67.9v11z',
    ],
  };
  var faHourglassEmpty = faHourglass;
  var faMountain = {
    prefix: 'fas',
    iconName: 'mountain',
    icon: [
      512,
      512,
      [127956],
      'f6fc',
      'M256 32c12.5 0 24.1 6.4 30.7 17L503.4 394.4c5.6 8.9 8.6 19.2 8.6 29.7c0 30.9-25 55.9-55.9 55.9H55.9C25 480 0 455 0 424.1c0-10.5 3-20.8 8.6-29.7L225.2 49c6.6-10.6 18.3-17 30.8-17zm65 192L256 120.4 176.9 246.5 208 288l48-64h65z',
    ],
  };
  var faUserDoctor = {
    prefix: 'fas',
    iconName: 'user-doctor',
    icon: [
      448,
      512,
      ['user-md'],
      'f0f0',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-96 55.2C54 332.9 0 401.3 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7c0-81-54-149.4-128-171.1V362c27.6 7.1 48 32.2 48 62v40c0 8.8-7.2 16-16 16H336c-8.8 0-16-7.2-16-16s7.2-16 16-16V424c0-17.7-14.3-32-32-32s-32 14.3-32 32v24c8.8 0 16 7.2 16 16s-7.2 16-16 16H256c-8.8 0-16-7.2-16-16V424c0-29.8 20.4-54.9 48-62V304.9c-6-.6-12.1-.9-18.3-.9H178.3c-6.2 0-12.3 .3-18.3 .9v65.4c23.1 6.9 40 28.3 40 53.7c0 30.9-25.1 56-56 56s-56-25.1-56-56c0-25.4 16.9-46.8 40-53.7V311.2zM144 448c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faUserMd = faUserDoctor;
  var faCircleInfo = {
    prefix: 'fas',
    iconName: 'circle-info',
    icon: [
      512,
      512,
      ['info-circle'],
      'f05a',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-144c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faInfoCircle = faCircleInfo;
  var faCloudMeatball = {
    prefix: 'fas',
    iconName: 'cloud-meatball',
    icon: [
      512,
      512,
      [],
      'f73b',
      'M0 224c0 53 43 96 96 96h44.7c9.5-23.5 32.5-40 59.3-40c2 0 3.9 .1 5.8 .3C217.6 265.5 235.7 256 256 256s38.4 9.5 50.2 24.3c1.9-.2 3.9-.3 5.8-.3c26.9 0 49.9 16.5 59.3 40H416c53 0 96-43 96-96s-43-96-96-96c-.5 0-1.1 0-1.6 0c1.1-5.2 1.6-10.5 1.6-16c0-44.2-35.8-80-80-80c-24.3 0-46.1 10.9-60.8 28C256.5 24.3 219.1 0 176 0C114.1 0 64 50.1 64 112c0 7.1 .7 14.1 1.9 20.8C27.6 145.4 0 181.5 0 224zm288 96c0-17.7-14.3-32-32-32s-32 14.3-32 32c0 1 .1 2.1 .1 3.1c-.7-.8-1.4-1.6-2.1-2.3c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3c.7 .7 1.5 1.4 2.3 2.1c-1-.1-2.1-.1-3.1-.1c-17.7 0-32 14.3-32 32s14.3 32 32 32c1 0 2.1-.1 3.1-.1c-.8 .7-1.6 1.3-2.3 2.1c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0c.7-.7 1.4-1.5 2.1-2.3c-.1 1-.1 2.1-.1 3.1c0 17.7 14.3 32 32 32s32-14.3 32-32c0-1-.1-2.1-.1-3.1c.7 .8 1.3 1.6 2.1 2.3c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3c-.7-.7-1.5-1.4-2.3-2.1c1 .1 2.1 .1 3.1 .1c17.7 0 32-14.3 32-32s-14.3-32-32-32c-1 0-2.1 .1-3.1 .1c.8-.7 1.6-1.3 2.3-2.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-.7 .7-1.4 1.5-2.1 2.3c.1-1 .1-2.1 .1-3.1zM48 448c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm416 0c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faCamera = {
    prefix: 'fas',
    iconName: 'camera',
    icon: [
      512,
      512,
      [62258, 'camera-alt'],
      'f030',
      'M149.1 64.8L138.7 96H64C28.7 96 0 124.7 0 160V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H373.3L362.9 64.8C356.4 45.2 338.1 32 317.4 32H194.6c-20.7 0-39 13.2-45.5 32.8zM256 384c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z',
    ],
  };
  var faCameraAlt = faCamera;
  var faSquareVirus = {
    prefix: 'fas',
    iconName: 'square-virus',
    icon: [
      448,
      512,
      [],
      'e578',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM223.8 93.7c13.3 0 24 10.7 24 24c0 29.3 35.4 43.9 56.1 23.2c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9c-20.7 20.7-6 56.1 23.2 56.1c13.3 0 24 10.7 24 24s-10.7 24-24 24c-29.3 0-43.9 35.4-23.2 56.1c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0c-20.7-20.7-56.1-6-56.1 23.2c0 13.3-10.7 24-24 24s-24-10.7-24-24c0-29.3-35.4-43.9-56.1-23.2c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9c20.7-20.7 6-56.1-23.2-56.1c-13.3 0-24-10.7-24-24s10.7-24 24-24c29.3 0 43.9-35.4 23.2-56.1c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0c20.7 20.7 56.1 6 56.1-23.2c0-13.3 10.7-24 24-24zM192 256c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm88 32c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faMeteor = {
    prefix: 'fas',
    iconName: 'meteor',
    icon: [
      512,
      512,
      [9732],
      'f753',
      'M493.7 .9L299.4 75.6l2.3-29.3c1-12.8-12.8-21.5-24-15.1L101.3 133.4C38.6 169.7 0 236.6 0 309C0 421.1 90.9 512 203 512c72.4 0 139.4-38.6 175.7-101.3L480.8 234.3c6.5-11.1-2.2-25-15.1-24l-29.3 2.3L511.1 18.3c.6-1.5 .9-3.2 .9-4.8C512 6 506 0 498.5 0c-1.7 0-3.3 .3-4.8 .9zM192 448c-70.7 0-128-57.3-128-128s57.3-128 128-128s128 57.3 128 128s-57.3 128-128 128zm0-160c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm16 96c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faCarOn = {
    prefix: 'fas',
    iconName: 'car-on',
    icon: [
      512,
      512,
      [],
      'e4dd',
      'M280 24c0-13.3-10.7-24-24-24s-24 10.7-24 24v80c0 13.3 10.7 24 24 24s24-10.7 24-24V24zM185.8 224H326.2c6.8 0 12.8 4.3 15.1 10.6L360.3 288H151.7l19.1-53.4c2.3-6.4 8.3-10.6 15.1-10.6zm-75.3-10.9L82.2 292.4C62.1 300.9 48 320.8 48 344v40 64 32c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V448H384v32c0 17.7 14.3 32 32 32h16c17.7 0 32-14.3 32-32V448 384 344c0-23.2-14.1-43.1-34.2-51.6l-28.3-79.3C390.1 181.3 360 160 326.2 160H185.8c-33.8 0-64 21.3-75.3 53.1zM128 392c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm280-24c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM39 39c-9.4 9.4-9.4 24.6 0 33.9l48 48c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L73 39c-9.4-9.4-24.6-9.4-33.9 0zm400 0L391 87c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l48-48c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0z',
    ],
  };
  var faSleigh = {
    prefix: 'fas',
    iconName: 'sleigh',
    icon: [
      640,
      512,
      [],
      'f7cc',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96V256c0 53 43 96 96 96v32h64V352H384v32h64V352c53 0 96-43 96-96V160c17.7 0 32-14.3 32-32s-14.3-32-32-32H512 480c-17.7 0-32 14.3-32 32v41.3c0 30.2-24.5 54.7-54.7 54.7c-75.5 0-145.6-38.9-185.6-102.9l-4.3-6.9C174.2 67.6 125 37.6 70.7 32.7c-2.2-.5-4.4-.7-6.7-.7H55 32zM640 384c0-17.7-14.3-32-32-32s-32 14.3-32 32v8c0 13.3-10.7 24-24 24H64c-17.7 0-32 14.3-32 32s14.3 32 32 32H552c48.6 0 88-39.4 88-88v-8z',
    ],
  };
  var faArrowDown19 = {
    prefix: 'fas',
    iconName: 'arrow-down-1-9',
    icon: [
      576,
      512,
      ['sort-numeric-asc', 'sort-numeric-down'],
      'f162',
      'M352 64c0 17.7 14.3 32 32 32h16v64H384c-17.7 0-32 14.3-32 32s14.3 32 32 32h48 48c17.7 0 32-14.3 32-32s-14.3-32-32-32H464V64c0-17.7-14.3-32-32-32H384c-17.7 0-32 14.3-32 32zM160 480c9 0 17.5-3.8 23.6-10.4l88-96c11.9-13 11.1-33.3-2-45.2s-33.3-11.1-45.2 2L192 365.7V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V365.7L95.6 330.4c-11.9-13-32.2-13.9-45.2-2s-13.9 32.2-2 45.2l88 96C142.5 476.2 151 480 160 480zM445.7 364.9c-4.2 2-8.8 3.1-13.7 3.1c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32c0 12.8-7.5 23.8-18.3 28.9zm-40.7 54.9l-6.8 9.2c-10.5 14.2-7.5 34.2 6.7 44.8s34.2 7.5 44.8-6.7l48.8-65.8c14-18.9 21.5-41.7 21.5-65.2c0-48.6-39.4-88-88-88s-88 39.4-88 88c0 39.2 25.6 72.4 61.1 83.8z',
    ],
  };
  var faSortNumericAsc = faArrowDown19;
  var faSortNumericDown = faArrowDown19;
  var faHandHoldingDroplet = {
    prefix: 'fas',
    iconName: 'hand-holding-droplet',
    icon: [
      576,
      512,
      ['hand-holding-water'],
      'f4c1',
      'M275.5 6.6C278.3 2.5 283 0 288 0s9.7 2.5 12.5 6.6L366.8 103C378 119.3 384 138.6 384 158.3V160c0 53-43 96-96 96s-96-43-96-96v-1.7c0-19.8 6-39 17.2-55.3L275.5 6.6zM568.2 336.3c13.1 17.8 9.3 42.8-8.5 55.9L433.1 485.5c-23.4 17.2-51.6 26.5-80.7 26.5H192 32c-17.7 0-32-14.3-32-32V416c0-17.7 14.3-32 32-32H68.8l44.9-36c22.7-18.2 50.9-28 80-28H272h16 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H288 272c-8.8 0-16 7.2-16 16s7.2 16 16 16H392.6l119.7-88.2c17.8-13.1 42.8-9.3 55.9 8.5zM193.6 384l0 0-.9 0c.3 0 .6 0 .9 0z',
    ],
  };
  var faHandHoldingWater = faHandHoldingDroplet;
  var faWater = {
    prefix: 'fas',
    iconName: 'water',
    icon: [
      576,
      512,
      [],
      'f773',
      'M269.5 69.9c11.1-7.9 25.9-7.9 37 0C329 85.4 356.5 96 384 96c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 149.7 417 160 384 160c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4C42.8 92.6 61 83.5 75.3 71.6c11.1-9.5 27.3-10.1 39.2-1.7l0 0C136.7 85.2 165.1 96 192 96c27.5 0 55-10.6 77.5-26.1zm37 288C329 373.4 356.5 384 384 384c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 437.7 417 448 384 448c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 373.2 165.1 384 192 384c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0zm0-144C329 229.4 356.5 240 384 240c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 293.7 417 304 384 304c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.5 27.3-10.1 39.2-1.7l0 0C136.7 229.2 165.1 240 192 240c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faCalendarCheck = {
    prefix: 'fas',
    iconName: 'calendar-check',
    icon: [
      448,
      512,
      [],
      'f274',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM329 305c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-95 95-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L329 305z',
    ],
  };
  var faBraille = {
    prefix: 'fas',
    iconName: 'braille',
    icon: [
      640,
      512,
      [],
      'f2a1',
      'M128 96c0 35.3-28.7 64-64 64S0 131.3 0 96S28.7 32 64 32s64 28.7 64 64zm96 176c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm0 48c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM80 416c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm112 0c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM64 320c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM224 160c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM480 96c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm112 0c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM576 272c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm0 48c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm16 96c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM416 272c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm0 48c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zm16 96c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 0c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64z',
    ],
  };
  var faPrescriptionBottleMedical = {
    prefix: 'fas',
    iconName: 'prescription-bottle-medical',
    icon: [
      384,
      512,
      ['prescription-bottle-alt'],
      'f486',
      'M0 32C0 14.3 14.3 0 32 0H352c17.7 0 32 14.3 32 32V64c0 17.7-14.3 32-32 32H32C14.3 96 0 81.7 0 64V32zm32 96H352V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zM160 240v48H112c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V352h48c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16H224V240c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faPrescriptionBottleAlt = faPrescriptionBottleMedical;
  var faLandmark = {
    prefix: 'fas',
    iconName: 'landmark',
    icon: [
      512,
      512,
      [127963],
      'f66f',
      'M240.1 4.2c9.8-5.6 21.9-5.6 31.8 0l171.8 98.1L448 104l0 .9 47.9 27.4c12.6 7.2 18.8 22 15.1 36s-16.4 23.8-30.9 23.8H32c-14.5 0-27.2-9.8-30.9-23.8s2.5-28.8 15.1-36L64 104.9V104l4.4-1.6L240.1 4.2zM64 224h64V416h40V224h64V416h48V224h64V416h40V224h64V420.3c.6 .3 1.2 .7 1.8 1.1l48 32c11.7 7.8 17 22.4 12.9 35.9S494.1 512 480 512H32c-14.1 0-26.5-9.2-30.6-22.7s1.1-28.1 12.9-35.9l48-32c.6-.4 1.2-.7 1.8-1.1V224z',
    ],
  };
  var faTruck = {
    prefix: 'fas',
    iconName: 'truck',
    icon: [
      640,
      512,
      [128666, 9951],
      'f0d1',
      'M48 0C21.5 0 0 21.5 0 48V368c0 26.5 21.5 48 48 48H64c0 53 43 96 96 96s96-43 96-96H384c0 53 43 96 96 96s96-43 96-96h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V288 256 237.3c0-17-6.7-33.3-18.7-45.3L512 114.7c-12-12-28.3-18.7-45.3-18.7H416V48c0-26.5-21.5-48-48-48H48zM416 160h50.7L544 237.3V256H416V160zM208 416c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm272 48c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faCrosshairs = {
    prefix: 'fas',
    iconName: 'crosshairs',
    icon: [
      512,
      512,
      [],
      'f05b',
      'M256 0c17.7 0 32 14.3 32 32V42.4c93.7 13.9 167.7 88 181.6 181.6H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H469.6c-13.9 93.7-88 167.7-181.6 181.6V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V469.6C130.3 455.7 56.3 381.7 42.4 288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H42.4C56.3 130.3 130.3 56.3 224 42.4V32c0-17.7 14.3-32 32-32zM107.4 288c12.5 58.3 58.4 104.1 116.6 116.6V384c0-17.7 14.3-32 32-32s32 14.3 32 32v20.6c58.3-12.5 104.1-58.4 116.6-116.6H384c-17.7 0-32-14.3-32-32s14.3-32 32-32h20.6C392.1 165.7 346.3 119.9 288 107.4V128c0 17.7-14.3 32-32 32s-32-14.3-32-32V107.4C165.7 119.9 119.9 165.7 107.4 224H128c17.7 0 32 14.3 32 32s-14.3 32-32 32H107.4zM256 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faPersonCane = {
    prefix: 'fas',
    iconName: 'person-cane',
    icon: [
      448,
      512,
      [],
      'e53c',
      'M272 48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm-8 187.3l47.4 57.1c11.3 13.6 31.5 15.5 45.1 4.2s15.5-31.5 4.2-45.1l-73.7-88.9c-18.2-22-45.3-34.7-73.9-34.7H177.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9L120 256.9V480c0 17.7 14.3 32 32 32s32-14.3 32-32V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V235.3zM352 376c0-4.4 3.6-8 8-8s8 3.6 8 8V488c0 13.3 10.7 24 24 24s24-10.7 24-24V376c0-30.9-25.1-56-56-56s-56 25.1-56 56v8c0 13.3 10.7 24 24 24s24-10.7 24-24v-8z',
    ],
  };
  var faTent = {
    prefix: 'fas',
    iconName: 'tent',
    icon: [
      576,
      512,
      [],
      'e57d',
      'M269.4 6C280.5-2 295.5-2 306.6 6l224 160c7.4 5.3 12.2 13.5 13.2 22.5l32 288c1 9-1.9 18.1-8 24.9s-14.7 10.7-23.8 10.7H416L288 288V512H32c-9.1 0-17.8-3.9-23.8-10.7s-9-15.8-8-24.9l32-288c1-9 5.8-17.2 13.2-22.5L269.4 6z',
    ],
  };
  var faVestPatches = {
    prefix: 'fas',
    iconName: 'vest-patches',
    icon: [
      448,
      512,
      [],
      'e086',
      'M151.2 69.7l55.9 167.7-11 33.1c-2.7 8.2-4.1 16.7-4.1 25.3V464c0 14.5 3.9 28.2 10.7 39.9C195 509 185.9 512 176 512H48c-26.5 0-48-21.5-48-48V270.5c0-9.5 2.8-18.7 8.1-26.6l47.9-71.8c5.3-7.9 8.1-17.1 8.1-26.6V128 54.3 48C64 21.5 85.5 0 112 0h4.5c.2 0 .4 0 .6 0c.4 0 .8 0 1.2 0c18.8 0 34.1 9.7 44.1 18.8C171.6 27.2 190.8 40 224 40s52.4-12.8 61.7-21.2C295.7 9.7 311 0 329.7 0c.4 0 .8 0 1.2 0c.2 0 .4 0 .6 0H336c26.5 0 48 21.5 48 48v6.3V128v17.5c0 9.5 2.8 18.7 8.1 26.6l47.9 71.8c5.3 7.9 8.1 17.1 8.1 26.6V464c0 26.5-21.5 48-48 48H272c-26.5 0-48-21.5-48-48V295.8c0-5.2 .8-10.3 2.5-15.2L296.8 69.7C279.4 79.7 255.4 88 224 88s-55.4-8.3-72.8-18.3zM96 456c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM63.5 255.5c-4.7 4.7-4.7 12.3 0 17L79 288 63.5 303.5c-4.7 4.7-4.7 12.3 0 17s12.3 4.7 17 0L96 305l15.5 15.5c4.7 4.7 12.3 4.7 17 0s4.7-12.3 0-17L113 288l15.5-15.5c4.7-4.7 4.7-12.3 0-17s-12.3-4.7-17 0L96 271 80.5 255.5c-4.7-4.7-12.3-4.7-17 0zM304 280v8 32c0 8.8 7.2 16 16 16h32 8c13.3 0 24-10.7 24-24s-10.7-24-24-24h-8v-8c0-13.3-10.7-24-24-24s-24 10.7-24 24z',
    ],
  };
  var faCheckDouble = {
    prefix: 'fas',
    iconName: 'check-double',
    icon: [
      512,
      512,
      [],
      'f560',
      'M374.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 178.7l-57.4-57.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l80 80c12.5 12.5 32.8 12.5 45.3 0l160-160zm96 128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 402.7 86.6 297.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l256-256z',
    ],
  };
  var faArrowDownAZ = {
    prefix: 'fas',
    iconName: 'arrow-down-a-z',
    icon: [
      576,
      512,
      ['sort-alpha-asc', 'sort-alpha-down'],
      'f15d',
      'M183.6 469.6C177.5 476.2 169 480 160 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L128 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 320c0-17.7 14.3-32 32-32H480c12.9 0 24.6 7.8 29.6 19.8s2.2 25.7-6.9 34.9L429.3 416H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H352c-12.9 0-24.6-7.8-29.6-19.8s-2.2-25.7 6.9-34.9L402.7 352H352c-17.7 0-32-14.3-32-32zM416 32c12.1 0 23.2 6.8 28.6 17.7l64 128 16 32c7.9 15.8 1.5 35-14.3 42.9s-35 1.5-42.9-14.3L460.2 224H371.8l-7.2 14.3c-7.9 15.8-27.1 22.2-42.9 14.3s-22.2-27.1-14.3-42.9l16-32 64-128C392.8 38.8 403.9 32 416 32zM395.8 176h40.4L416 135.6 395.8 176z',
    ],
  };
  var faSortAlphaAsc = faArrowDownAZ;
  var faSortAlphaDown = faArrowDownAZ;
  var faMoneyBillWheat = {
    prefix: 'fas',
    iconName: 'money-bill-wheat',
    icon: [
      512,
      512,
      [],
      'e52a',
      'M176 0c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80c0-8.8 7.2-16 16-16zM56 16h48c13.3 0 24 10.7 24 24s-10.7 24-24 24H56C42.7 64 32 53.3 32 40s10.7-24 24-24zM24 88H136c13.3 0 24 10.7 24 24s-10.7 24-24 24H24c-13.3 0-24-10.7-24-24S10.7 88 24 88zm8 96c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24s-10.7 24-24 24H56c-13.3 0-24-10.7-24-24zM272 16c0-8.8 7.2-16 16-16c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80zM400 0c44.2 0 80 35.8 80 80c0 8.8-7.2 16-16 16c-44.2 0-80-35.8-80-80c0-8.8 7.2-16 16-16zm80 144c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16zM352 128c8.8 0 16 7.2 16 16c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80zm-96 16c0 44.2-35.8 80-80 80c-8.8 0-16-7.2-16-16c0-44.2 35.8-80 80-80c8.8 0 16 7.2 16 16zM0 304c0-26.5 21.5-48 48-48H464c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V304zM48 416v48H96c0-26.5-21.5-48-48-48zM96 304H48v48c26.5 0 48-21.5 48-48zM464 416c-26.5 0-48 21.5-48 48h48V416zM416 304c0 26.5 21.5 48 48 48V304H416zm-96 80c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faCookie = {
    prefix: 'fas',
    iconName: 'cookie',
    icon: [
      512,
      512,
      [127850],
      'f563',
      'M247.2 17c-22.1-3.1-44.6 .9-64.4 11.4l-74 39.5C89.1 78.4 73.2 94.9 63.4 115L26.7 190.6c-9.8 20.1-13 42.9-9.1 64.9l14.5 82.8c3.9 22.1 14.6 42.3 30.7 57.9l60.3 58.4c16.1 15.6 36.6 25.6 58.7 28.7l83 11.7c22.1 3.1 44.6-.9 64.4-11.4l74-39.5c19.7-10.5 35.6-27 45.4-47.2l36.7-75.5c9.8-20.1 13-42.9 9.1-64.9l-14.6-82.8c-3.9-22.1-14.6-42.3-30.7-57.9L388.9 57.5c-16.1-15.6-36.6-25.6-58.7-28.7L247.2 17zM208 208c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm0 128c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm160 0c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faArrowRotateLeft = {
    prefix: 'fas',
    iconName: 'arrow-rotate-left',
    icon: [
      512,
      512,
      [
        8634,
        'arrow-left-rotate',
        'arrow-rotate-back',
        'arrow-rotate-backward',
        'undo',
      ],
      'f0e2',
      'M125.7 160H176c17.7 0 32 14.3 32 32s-14.3 32-32 32H48c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32s32 14.3 32 32v51.2L97.6 97.6c87.5-87.5 229.3-87.5 316.8 0s87.5 229.3 0 316.8s-229.3 87.5-316.8 0c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0c62.5 62.5 163.8 62.5 226.3 0s62.5-163.8 0-226.3s-163.8-62.5-226.3 0L125.7 160z',
    ],
  };
  var faArrowLeftRotate = faArrowRotateLeft;
  var faArrowRotateBack = faArrowRotateLeft;
  var faArrowRotateBackward = faArrowRotateLeft;
  var faUndo = faArrowRotateLeft;
  var faHardDrive = {
    prefix: 'fas',
    iconName: 'hard-drive',
    icon: [
      512,
      512,
      [128436, 'hdd'],
      'f0a0',
      'M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V280.4c-17-15.2-39.4-24.4-64-24.4H64c-24.6 0-47 9.2-64 24.4V96zM64 288H448c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V352c0-35.3 28.7-64 64-64zM320 416c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm128-32c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faHdd = faHardDrive;
  var faFaceGrinSquintTears = {
    prefix: 'fas',
    iconName: 'face-grin-squint-tears',
    icon: [
      512,
      512,
      [129315, 'grin-squint-tears'],
      'f586',
      'M426.8 14.2C446-5 477.5-4.6 497.1 14.9s20 51 .7 70.3c-6.8 6.8-21.4 12.4-37.4 16.7c-18.5 5-38.8 8.3-50.9 10c-4.9 .8-9.1-2.8-9.5-7.4c-.1-.7 0-1.4 .1-2.1c1.6-11.2 4.6-29.6 9-47c.3-1.3 .7-2.6 1-3.9c4.3-15.9 9.8-30.5 16.7-37.4zm-44.7 19c-1.5 4.8-2.9 9.6-4.1 14.3c-4.8 18.9-8 38.5-9.7 50.3c-4 26.8 18.9 49.7 45.7 45.8c11.9-1.6 31.5-4.8 50.4-9.7c4.7-1.2 9.5-2.5 14.3-4.1C534.2 227.5 520.2 353.8 437 437c-83.2 83.2-209.5 97.2-307.2 41.8c1.5-4.8 2.8-9.6 4-14.3c4.8-18.9 8-38.5 9.7-50.3c4-26.8-18.9-49.7-45.7-45.8c-11.9 1.6-31.5 4.8-50.4 9.7c-4.7 1.2-9.5 2.5-14.3 4.1C-22.2 284.5-8.2 158.2 75 75C158.2-8.3 284.5-22.2 382.2 33.2zM51.5 410.1c18.5-5 38.8-8.3 50.9-10c.4-.1 .7-.1 1-.1c5.1-.2 9.2 4.3 8.4 9.6c-1.7 12.1-5 32.4-10 50.9C97.6 476.4 92 491 85.2 497.8C66 517 34.5 516.6 14.9 497.1s-20-51-.7-70.3c6.8-6.8 21.4-12.4 37.4-16.7zM416.9 209c-4.7-11.9-20.8-11-26.8 .3c-19 35.5-45 70.8-77.5 103.3S244.8 371.1 209.3 390c-11.3 6-12.2 22.1-.3 26.8c57.6 22.9 125.8 11 172.3-35.5s58.4-114.8 35.5-172.3zM87.1 285.1c2 2 4.6 3.2 7.3 3.4l56.1 5.1 5.1 56.1c.3 2.8 1.5 5.4 3.4 7.3c6.3 6.3 17.2 3.6 19.8-4.9l29.7-97.4c3.5-11.6-7.3-22.5-19-19L92 265.3c-8.6 2.6-11.3 13.4-4.9 19.8zM265.3 92l-29.7 97.4c-3.5 11.6 7.3 22.5 19 19l97.4-29.7c8.6-2.6 11.3-13.4 4.9-19.8c-2-2-4.6-3.2-7.3-3.4l-56.1-5.1-5.1-56.1c-.2-2.8-1.5-5.4-3.4-7.3c-6.3-6.3-17.2-3.6-19.8 4.9z',
    ],
  };
  var faGrinSquintTears = faFaceGrinSquintTears;
  var faDumbbell = {
    prefix: 'fas',
    iconName: 'dumbbell',
    icon: [
      640,
      512,
      [],
      'f44b',
      'M112 96c0-17.7 14.3-32 32-32h16c17.7 0 32 14.3 32 32V224v64V416c0 17.7-14.3 32-32 32H144c-17.7 0-32-14.3-32-32V384H64c-17.7 0-32-14.3-32-32V288c-17.7 0-32-14.3-32-32s14.3-32 32-32V160c0-17.7 14.3-32 32-32h48V96zm416 0v32h48c17.7 0 32 14.3 32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32v64c0 17.7-14.3 32-32 32H528v32c0 17.7-14.3 32-32 32H480c-17.7 0-32-14.3-32-32V288 224 96c0-17.7 14.3-32 32-32h16c17.7 0 32 14.3 32 32zM416 224v64H224V224H416z',
    ],
  };
  var faRectangleList = {
    prefix: 'fas',
    iconName: 'rectangle-list',
    icon: [
      576,
      512,
      ['list-alt'],
      'f022',
      'M0 96C0 60.7 28.7 32 64 32H512c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM128 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm32-128c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM128 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm96-248c-13.3 0-24 10.7-24 24s10.7 24 24 24H448c13.3 0 24-10.7 24-24s-10.7-24-24-24H224zm0 96c-13.3 0-24 10.7-24 24s10.7 24 24 24H448c13.3 0 24-10.7 24-24s-10.7-24-24-24H224zm0 96c-13.3 0-24 10.7-24 24s10.7 24 24 24H448c13.3 0 24-10.7 24-24s-10.7-24-24-24H224z',
    ],
  };
  var faListAlt = faRectangleList;
  var faTarpDroplet = {
    prefix: 'fas',
    iconName: 'tarp-droplet',
    icon: [
      576,
      512,
      [],
      'e57c',
      'M288 160c-35.3 0-64-26.9-64-60c0-24 33.7-70.1 52.2-93.5c6.1-7.7 17.5-7.7 23.6 0C318.3 29.9 352 76 352 100c0 33.1-28.7 60-64 60zM64 128H197.5c13.2 37.3 48.7 64 90.5 64s77.4-26.7 90.5-64H512c35.3 0 64 28.7 64 64V352H448c-17.7 0-32 14.3-32 32l0 128L64 512c-35.3 0-64-28.7-64-64V192c0-35.3 28.7-64 64-64zM448 512l0-128H576L448 512zM96 256c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faHouseMedicalCircleCheck = {
    prefix: 'fas',
    iconName: 'house-medical-circle-check',
    icon: [
      640,
      512,
      [],
      'e511',
      'M320 368c0 59.5 29.5 112.1 74.8 144H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L522.1 193.9c-8.5-1.3-17.3-1.9-26.1-1.9c-54.7 0-103.5 24.9-135.8 64H320V208c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16v48H208c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zm320 0c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-76.7-43.3c-6.2-6.2-16.4-6.2-22.6 0L480 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faPersonSkiingNordic = {
    prefix: 'fas',
    iconName: 'person-skiing-nordic',
    icon: [
      576,
      512,
      ['skiing-nordic'],
      'f7ca',
      'M336 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM227.2 160c1.9 0 3.8 .1 5.6 .3L201.6 254c-9.3 28 1.7 58.8 26.8 74.5l86.2 53.9L291.3 464H202.8l41.1-88.1-32.4-20.3c-7.8-4.9-14.7-10.7-20.6-17.3L132.2 464H99.7l54.2-257.6c4.6-1.5 9-4.1 12.7-7.8l23.1-23.1c9.9-9.9 23.4-15.5 37.5-15.5zM121.4 198.6c.4 .4 .8 .8 1.3 1.2L67 464H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H159.3c.4 0 .9 0 1.3 0H319.3c.5 0 1 0 1.4 0H504c39.8 0 72-32.2 72-72v-8c0-13.3-10.7-24-24-24s-24 10.7-24 24v8c0 13.3-10.7 24-24 24H434.6l27.6-179.3c10.5-5.2 17.8-16.1 17.8-28.7c0-17.7-14.3-32-32-32H426.7c-12.9 0-24.6-7.8-29.5-19.7l-6.3-15c-14.6-35.1-44.1-61.9-80.5-73.1l-48.7-15c-11.1-3.4-22.7-5.2-34.4-5.2c-31 0-60.8 12.3-82.7 34.3l-23.1 23.1c-12.5 12.5-12.5 32.8 0 45.3zm308 89.4L402.3 464H357.8l21.6-75.6c5.9-20.6-2.6-42.6-20.7-53.9L302 299l30.9-82.4 5.1 12.3C353 264.7 387.9 288 426.7 288h2.7z',
    ],
  };
  var faSkiingNordic = faPersonSkiingNordic;
  var faCalendarPlus = {
    prefix: 'fas',
    iconName: 'calendar-plus',
    icon: [
      448,
      512,
      [],
      'f271',
      'M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192zM224 248c13.3 0 24 10.7 24 24v56h56c13.3 0 24 10.7 24 24s-10.7 24-24 24H248v56c0 13.3-10.7 24-24 24s-24-10.7-24-24V376H144c-13.3 0-24-10.7-24-24s10.7-24 24-24h56V272c0-13.3 10.7-24 24-24z',
    ],
  };
  var faPlaneArrival = {
    prefix: 'fas',
    iconName: 'plane-arrival',
    icon: [
      640,
      512,
      [128748],
      'f5af',
      'M.3 166.9L0 68C0 57.7 9.5 50.1 19.5 52.3l35.6 7.9c10.6 2.3 19.2 9.9 23 20L96 128l127.3 37.6L181.8 20.4C178.9 10.2 186.6 0 197.2 0h40.1c11.6 0 22.2 6.2 27.9 16.3l109 193.8 107.2 31.7c15.9 4.7 30.8 12.5 43.7 22.8l34.4 27.6c24 19.2 18.1 57.3-10.7 68.2c-41.2 15.6-86.2 18.1-128.8 7L121.7 289.8c-11.1-2.9-21.2-8.7-29.3-16.9L9.5 189.4c-5.9-6-9.3-14-9.3-22.5zM32 448H608c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32zm160-80c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm64 48c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faCircleLeft = {
    prefix: 'fas',
    iconName: 'circle-left',
    icon: [
      512,
      512,
      [61840, 'arrow-alt-circle-left'],
      'f359',
      'M512 256C512 114.6 397.4 0 256 0S0 114.6 0 256S114.6 512 256 512s256-114.6 256-256zM116.7 244.7l112-112c4.6-4.6 11.5-5.9 17.4-3.5s9.9 8.3 9.9 14.8l0 64 96 0c17.7 0 32 14.3 32 32l0 32c0 17.7-14.3 32-32 32l-96 0 0 64c0 6.5-3.9 12.3-9.9 14.8s-12.9 1.1-17.4-3.5l-112-112c-6.2-6.2-6.2-16.4 0-22.6z',
    ],
  };
  var faArrowAltCircleLeft = faCircleLeft;
  var faTrainSubway = {
    prefix: 'fas',
    iconName: 'train-subway',
    icon: [
      448,
      512,
      ['subway'],
      'f239',
      'M96 0C43 0 0 43 0 96V352c0 48 35.2 87.7 81.1 94.9l-46 46C28.1 499.9 33.1 512 43 512H82.7c8.5 0 16.6-3.4 22.6-9.4L160 448H288l54.6 54.6c6 6 14.1 9.4 22.6 9.4H405c10 0 15-12.1 7.9-19.1l-46-46c46-7.1 81.1-46.9 81.1-94.9V96c0-53-43-96-96-96H96zM64 128c0-17.7 14.3-32 32-32h80c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V128zM272 96h80c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H272c-17.7 0-32-14.3-32-32V128c0-17.7 14.3-32 32-32zM128 352c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm224 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faSubway = faTrainSubway;
  var faChartGantt = {
    prefix: 'fas',
    iconName: 'chart-gantt',
    icon: [
      512,
      512,
      [],
      'e0e4',
      'M32 32c17.7 0 32 14.3 32 32V400c0 8.8 7.2 16 16 16H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H80c-44.2 0-80-35.8-80-80V64C0 46.3 14.3 32 32 32zm96 96c0-17.7 14.3-32 32-32l96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32H160c-17.7 0-32-14.3-32-32zm96 64H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32s14.3-32 32-32zm160 96h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faIndianRupeeSign = {
    prefix: 'fas',
    iconName: 'indian-rupee-sign',
    icon: [
      320,
      512,
      ['indian-rupee', 'inr'],
      'e1bc',
      'M0 64C0 46.3 14.3 32 32 32H96h16H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H231.8c9.6 14.4 16.7 30.6 20.7 48H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H252.4c-13.2 58.3-61.9 103.2-122.2 110.9L274.6 422c14.4 10.3 17.7 30.3 7.4 44.6s-30.3 17.7-44.6 7.4L13.4 314C2.1 306-2.7 291.5 1.5 278.2S18.1 256 32 256h80c32.8 0 61-19.7 73.3-48H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H185.3C173 115.7 144.8 96 112 96H96 32C14.3 96 0 81.7 0 64z',
    ],
  };
  var faIndianRupee = faIndianRupeeSign;
  var faInr = faIndianRupeeSign;
  var faCropSimple = {
    prefix: 'fas',
    iconName: 'crop-simple',
    icon: [
      512,
      512,
      ['crop-alt'],
      'f565',
      'M128 32c0-17.7-14.3-32-32-32S64 14.3 64 32V64H32C14.3 64 0 78.3 0 96s14.3 32 32 32H64V384c0 35.3 28.7 64 64 64H352V384H128V32zM384 480c0 17.7 14.3 32 32 32s32-14.3 32-32V448h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H448l0-256c0-35.3-28.7-64-64-64L160 64v64l224 0 0 352z',
    ],
  };
  var faCropAlt = faCropSimple;
  var faMoneyBill1 = {
    prefix: 'fas',
    iconName: 'money-bill-1',
    icon: [
      576,
      512,
      ['money-bill-alt'],
      'f3d1',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm64 320H64V320c35.3 0 64 28.7 64 64zM64 192V128h64c0 35.3-28.7 64-64 64zM448 384c0-35.3 28.7-64 64-64v64H448zm64-192c-35.3 0-64-28.7-64-64h64v64zM400 256c0 61.9-50.1 112-112 112s-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112zM252 208c0 9.7 6.9 17.7 16 19.6V276h-4c-11 0-20 9-20 20s9 20 20 20h24 24c11 0 20-9 20-20s-9-20-20-20h-4V208c0-11-9-20-20-20H272c-11 0-20 9-20 20z',
    ],
  };
  var faMoneyBillAlt = faMoneyBill1;
  var faLeftLong = {
    prefix: 'fas',
    iconName: 'left-long',
    icon: [
      512,
      512,
      ['long-arrow-alt-left'],
      'f30a',
      'M177.5 98c-8.8-3.8-19-2-26 4.6l-144 136C2.7 243.1 0 249.4 0 256s2.7 12.9 7.5 17.4l144 136c7 6.6 17.2 8.4 26 4.6s14.5-12.5 14.5-22l0-88 288 0c17.7 0 32-14.3 32-32l0-32c0-17.7-14.3-32-32-32l-288 0 0-88c0-9.6-5.7-18.2-14.5-22z',
    ],
  };
  var faLongArrowAltLeft = faLeftLong;
  var faDna = {
    prefix: 'fas',
    iconName: 'dna',
    icon: [
      448,
      512,
      [129516],
      'f471',
      'M416 0c17.7 0 32 14.3 32 32c0 59.8-30.3 107.5-69.4 146.6c-28 28-62.5 53.5-97.3 77.4l-2.5 1.7c-11.9 8.1-23.8 16.1-35.5 23.9l0 0 0 0 0 0-1.6 1c-6 4-11.9 7.9-17.8 11.9c-20.9 14-40.8 27.7-59.3 41.5H283.3c-9.8-7.4-20.1-14.7-30.7-22.1l7-4.7 3-2c15.1-10.1 30.9-20.6 46.7-31.6c25 18.1 48.9 37.3 69.4 57.7C417.7 372.5 448 420.2 448 480c0 17.7-14.3 32-32 32s-32-14.3-32-32H64c0 17.7-14.3 32-32 32s-32-14.3-32-32c0-59.8 30.3-107.5 69.4-146.6c28-28 62.5-53.5 97.3-77.4c-34.8-23.9-69.3-49.3-97.3-77.4C30.3 139.5 0 91.8 0 32C0 14.3 14.3 0 32 0S64 14.3 64 32H384c0-17.7 14.3-32 32-32zM338.6 384H109.4c-10.1 10.6-18.6 21.3-25.5 32H364.1c-6.8-10.7-15.3-21.4-25.5-32zM109.4 128H338.6c10.1-10.7 18.6-21.3 25.5-32H83.9c6.8 10.7 15.3 21.3 25.5 32zm55.4 48c18.4 13.8 38.4 27.5 59.3 41.5c20.9-14 40.8-27.7 59.3-41.5H164.7z',
    ],
  };
  var faVirusSlash = {
    prefix: 'fas',
    iconName: 'virus-slash',
    icon: [
      640,
      512,
      [],
      'e075',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-154.3-121c-2-30.1 20.8-60.1 56-60.1H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H532.5c-49.9 0-74.9-60.3-39.6-95.6l8.2-8.2c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-8.2 8.2C412.3 118.4 352 93.4 352 43.5V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V43.5c0 49.9-60.3 74.9-95.6 39.6L184.2 75c-12.5-12.5-32.8-12.5-45.3 0c-1.6 1.6-3.1 3.4-4.3 5.3L38.8 5.1zm225.8 177c6.9-3.9 14.9-6.1 23.4-6.1c26.5 0 48 21.5 48 48c0 4.4-.6 8.7-1.7 12.7l-69.7-54.6zM107.5 224H96c-17.7 0-32 14.3-32 32s14.3 32 32 32h11.5c49.9 0 74.9 60.3 39.6 95.6l-8.2 8.2c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l8.2-8.2c35.3-35.3 95.6-10.3 95.6 39.6V480c0 17.7 14.3 32 32 32s32-14.3 32-32V468.5c0-31.2 23.6-52.7 50-55.7L144.7 210c-9.5 8.5-22.2 14-37.2 14z',
    ],
  };
  var faMinus = {
    prefix: 'fas',
    iconName: 'minus',
    icon: [
      448,
      512,
      [8211, 8722, 10134, 'subtract'],
      'f068',
      'M432 256c0 17.7-14.3 32-32 32L48 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l352 0c17.7 0 32 14.3 32 32z',
    ],
  };
  var faSubtract = faMinus;
  var faChildRifle = {
    prefix: 'fas',
    iconName: 'child-rifle',
    icon: [
      576,
      512,
      [],
      'e4e0',
      'M176 128c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zm-8 352V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V300.5L260.9 321c9.4 15 29.2 19.4 44.1 10s19.4-29.2 10-44.1l-51.7-82.1c-17.6-27.9-48.3-44.9-81.2-44.9H169.8c-33 0-63.7 16.9-81.2 44.9L36.9 287c-9.4 15-4.9 34.7 10 44.1s34.7 4.9 44.1-10L104 300.5V480c0 17.7 14.3 32 32 32s32-14.3 32-32zM448 0H432 416c-8.8 0-16 7.2-16 16s7.2 16 16 16V132.3c-9.6 5.5-16 15.9-16 27.7v32c-17.7 0-32 14.3-32 32V368c0 17.7 14.3 32 32 32h16v96c0 8.8 7.2 16 16 16h59.5c10.4 0 18-9.8 15.5-19.9L484 400h44c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H480V325.3l53.1-17.7c6.5-2.2 10.9-8.3 10.9-15.2V208c0-8.8-7.2-16-16-16H512c-8.8 0-16 7.2-16 16v56l-16 5.3V160c0-11.8-6.4-22.2-16-27.7V16c0-8.8-7.2-16-16-16z',
    ],
  };
  var faChess = {
    prefix: 'fas',
    iconName: 'chess',
    icon: [
      512,
      512,
      [],
      'f439',
      'M144 16c0-8.8-7.2-16-16-16s-16 7.2-16 16V32H96c-8.8 0-16 7.2-16 16s7.2 16 16 16h16V96H59.4C48.7 96 40 104.7 40 115.4c0 3 .7 5.9 2 8.7c6 12.4 23.8 50.8 32.8 83.9H72c-13.3 0-24 10.7-24 24s10.7 24 24 24h7.7C78 302.9 69.4 352.7 63.1 384H192.9c-6.4-31.3-14.9-81.1-16.6-128H184c13.3 0 24-10.7 24-24s-10.7-24-24-24h-2.8c9-33.2 26.8-71.5 32.8-83.9c1.3-2.7 2-5.6 2-8.7c0-10.7-8.7-19.4-19.4-19.4H144V64h16c8.8 0 16-7.2 16-16s-7.2-16-16-16H144V16zM25.2 451.4l-8.8 4.4C6.3 460.8 0 471.1 0 482.3C0 498.7 13.3 512 29.7 512H226.3c16.4 0 29.7-13.3 29.7-29.7c0-11.2-6.3-21.5-16.4-26.5l-8.8-4.4c-4.1-2.1-6.8-6.3-6.8-10.9c0-13.5-10.9-24.4-24.4-24.4H56.4C42.9 416 32 426.9 32 440.4c0 4.6-2.6 8.9-6.8 10.9zm279.2 4.4c-10.1 5-16.4 15.3-16.4 26.5c0 16.4 13.3 29.7 29.7 29.7H482.3c16.4 0 29.7-13.3 29.7-29.7c0-11.2-6.3-21.5-16.4-26.5l-8.8-4.4c-4.1-2.1-6.8-6.3-6.8-10.9c0-13.5-10.9-24.4-24.4-24.4H344.4c-13.5 0-24.4 10.9-24.4 24.4c0 4.6-2.6 8.9-6.8 10.9l-8.8 4.4zM304 259.9c0 7.8 2.8 15.3 8 21.1l18.9 21.4c5.4 6.1 8.2 14 8 22.1L337 384H462.5l-2.7-58.7c-.4-8.5 2.6-16.9 8.4-23.1l19.3-21c5.4-5.9 8.5-13.6 8.5-21.7V200c0-4.4-3.6-8-8-8H464c-4.4 0-8 3.6-8 8v16c0 4.4-3.6 8-8 8h-8c-4.4 0-8-3.6-8-8V200c0-4.4-3.6-8-8-8H376c-4.4 0-8 3.6-8 8v16c0 4.4-3.6 8-8 8h-8c-4.4 0-8-3.6-8-8V200c0-4.4-3.6-8-8-8H312c-4.4 0-8 3.6-8 8v59.9zM392 336c-4.4 0-8-3.6-8-8V304c0-8.8 7.2-16 16-16s16 7.2 16 16v24c0 4.4-3.6 8-8 8H392z',
    ],
  };
  var faArrowLeftLong = {
    prefix: 'fas',
    iconName: 'arrow-left-long',
    icon: [
      512,
      512,
      ['long-arrow-left'],
      'f177',
      'M109.3 288L480 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-370.7 0 73.4-73.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 288z',
    ],
  };
  var faLongArrowLeft = faArrowLeftLong;
  var faPlugCircleCheck = {
    prefix: 'fas',
    iconName: 'plug-circle-check',
    icon: [
      576,
      512,
      [],
      'e55c',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM576 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L416 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faStreetView = {
    prefix: 'fas',
    iconName: 'street-view',
    icon: [
      512,
      512,
      [],
      'f21d',
      'M320 64c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zm-96 96c-35.3 0-64 28.7-64 64v48c0 17.7 14.3 32 32 32h1.8l11.1 99.5c1.8 16.2 15.5 28.5 31.8 28.5h38.7c16.3 0 30-12.3 31.8-28.5L318.2 304H320c17.7 0 32-14.3 32-32V224c0-35.3-28.7-64-64-64H224zM132.3 394.2c13-2.4 21.7-14.9 19.3-27.9s-14.9-21.7-27.9-19.3c-32.4 5.9-60.9 14.2-82 24.8c-10.5 5.3-20.3 11.7-27.8 19.6C6.4 399.5 0 410.5 0 424c0 21.4 15.5 36.1 29.1 45c14.7 9.6 34.3 17.3 56.4 23.4C130.2 504.7 190.4 512 256 512s125.8-7.3 170.4-19.6c22.1-6.1 41.8-13.8 56.4-23.4c13.7-8.9 29.1-23.6 29.1-45c0-13.5-6.4-24.5-14-32.6c-7.5-7.9-17.3-14.3-27.8-19.6c-21-10.6-49.5-18.9-82-24.8c-13-2.4-25.5 6.3-27.9 19.3s6.3 25.5 19.3 27.9c30.2 5.5 53.7 12.8 69 20.5c3.2 1.6 5.8 3.1 7.9 4.5c3.6 2.4 3.6 7.2 0 9.6c-8.8 5.7-23.1 11.8-43 17.3C374.3 457 318.5 464 256 464s-118.3-7-157.7-17.9c-19.9-5.5-34.2-11.6-43-17.3c-3.6-2.4-3.6-7.2 0-9.6c2.1-1.4 4.8-2.9 7.9-4.5c15.3-7.7 38.8-14.9 69-20.5z',
    ],
  };
  var faFrancSign = {
    prefix: 'fas',
    iconName: 'franc-sign',
    icon: [
      320,
      512,
      [],
      'e18f',
      'M80 32C62.3 32 48 46.3 48 64V224v96H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H48v64c0 17.7 14.3 32 32 32s32-14.3 32-32V384h80c17.7 0 32-14.3 32-32s-14.3-32-32-32H112V256H256c17.7 0 32-14.3 32-32s-14.3-32-32-32H112V96H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H80z',
    ],
  };
  var faVolumeOff = {
    prefix: 'fas',
    iconName: 'volume-off',
    icon: [
      320,
      512,
      [],
      'f026',
      'M320 64c0-12.6-7.4-24-18.9-29.2s-25-3.1-34.4 5.3L131.8 160H64c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64h67.8L266.7 471.9c9.4 8.4 22.9 10.4 34.4 5.3S320 460.6 320 448V64z',
    ],
  };
  var faHandsAslInterpreting = {
    prefix: 'fas',
    iconName: 'hands-asl-interpreting',
    icon: [
      640,
      512,
      [
        'american-sign-language-interpreting',
        'asl-interpreting',
        'hands-american-sign-language-interpreting',
      ],
      'f2a3',
      'M156.6 46.3c7.9-15.8 1.5-35-14.3-42.9s-35-1.5-42.9 14.3L13.5 189.4C4.6 207.2 0 226.8 0 246.7V256c0 70.7 57.3 128 128 128h72 8v-.3c35.2-2.7 65.4-22.8 82.1-51.7c8.8-15.3 3.6-34.9-11.7-43.7s-34.9-3.6-43.7 11.7c-7 12-19.9 20-34.7 20c-22.1 0-40-17.9-40-40s17.9-40 40-40c14.8 0 27.7 8 34.7 20c8.8 15.3 28.4 20.5 43.7 11.7s20.5-28.4 11.7-43.7c-12.8-22.1-33.6-39.1-58.4-47.1l80.8-22c17-4.6 27.1-22.2 22.5-39.3s-22.2-27.1-39.3-22.5L194.9 124.6l81.6-68c13.6-11.3 15.4-31.5 4.1-45.1S249.1-3.9 235.5 7.4L133.6 92.3l23-46zM483.4 465.7c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3l85.9-171.7c8.9-17.8 13.5-37.4 13.5-57.2V256c0-70.7-57.3-128-128-128H440h-8v.3c-35.2 2.7-65.4 22.8-82.1 51.7c-8.9 15.3-3.6 34.9 11.7 43.7s34.9 3.6 43.7-11.7c7-12 19.9-20 34.7-20c22.1 0 40 17.9 40 40s-17.9 40-40 40c-14.8 0-27.7-8-34.7-20c-8.9-15.3-28.4-20.5-43.7-11.7s-20.5 28.4-11.7 43.7c12.8 22.1 33.6 39.1 58.4 47.1l-80.8 22c-17.1 4.7-27.1 22.2-22.5 39.3s22.2 27.1 39.3 22.5l100.7-27.5-81.6 68c-13.6 11.3-15.4 31.5-4.1 45.1s31.5 15.4 45.1 4.1l101.9-84.9-23 46z',
    ],
  };
  var faAmericanSignLanguageInterpreting = faHandsAslInterpreting;
  var faAslInterpreting = faHandsAslInterpreting;
  var faHandsAmericanSignLanguageInterpreting = faHandsAslInterpreting;
  var faGear = {
    prefix: 'fas',
    iconName: 'gear',
    icon: [
      512,
      512,
      [9881, 'cog'],
      'f013',
      'M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80z',
    ],
  };
  var faCog = faGear;
  var faDropletSlash = {
    prefix: 'fas',
    iconName: 'droplet-slash',
    icon: [
      640,
      512,
      ['tint-slash'],
      'f5c7',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L491.5 359.9c3-12.8 4.5-26.2 4.5-39.9c0-74.1-102.3-230.6-150.9-300.7c-12.3-17.7-37.8-17.7-50.1 0c-20.8 30-51.4 75.8-79.6 124.1L38.8 5.1zM144 320c0 97.2 78.8 176 176 176c48.1 0 91.7-19.3 123.5-50.6L170 229.9c-15.6 34.7-26 66.6-26 90.1zm96 0c0 44.2 35.8 80 80 80c8.8 0 16 7.2 16 16s-7.2 16-16 16c-61.9 0-112-50.1-112-112c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faTintSlash = faDropletSlash;
  var faMosque = {
    prefix: 'fas',
    iconName: 'mosque',
    icon: [
      640,
      512,
      [128332],
      'f678',
      'M400 0c5 0 9.8 2.4 12.8 6.4c34.7 46.3 78.1 74.9 133.5 111.5l0 0 0 0c5.2 3.4 10.5 7 16 10.6c28.9 19.2 45.7 51.7 45.7 86.1c0 28.6-11.3 54.5-29.8 73.4H221.8c-18.4-19-29.8-44.9-29.8-73.4c0-34.4 16.7-66.9 45.7-86.1c5.4-3.6 10.8-7.1 16-10.6l0 0 0 0C309.1 81.3 352.5 52.7 387.2 6.4c3-4 7.8-6.4 12.8-6.4zM288 512V440c0-13.3-10.7-24-24-24s-24 10.7-24 24v72H192c-17.7 0-32-14.3-32-32V352c0-17.7 14.3-32 32-32H608c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H560V440c0-13.3-10.7-24-24-24s-24 10.7-24 24v72H448V454c0-19-8.4-37-23-49.2L400 384l-25 20.8C360.4 417 352 435 352 454v58H288zM70.4 5.2c5.7-4.3 13.5-4.3 19.2 0l16 12C139.8 42.9 160 83.2 160 126v2H0v-2C0 83.2 20.2 42.9 54.4 17.2l16-12zM0 160H160V296.6c-19.1 11.1-32 31.7-32 55.4V480c0 9.6 2.1 18.6 5.8 26.8c-6.6 3.4-14 5.2-21.8 5.2H48c-26.5 0-48-21.5-48-48V176 160z',
    ],
  };
  var faMosquito = {
    prefix: 'fas',
    iconName: 'mosquito',
    icon: [
      640,
      512,
      [],
      'e52b',
      'M463.7 505.9c9.8-8.9 10.7-24.3 2.1-34.3l-42.1-49 0-54.7c0-5.5-1.8-10.8-5.1-15.1L352 266.3l0-.3L485.4 387.8C542.4 447.6 640 405.2 640 320.6c0-47.9-34-88.3-79.4-94.2l-153-23.9 40.8-40.9c7.8-7.8 9.4-20.1 3.9-29.8L428.5 90.1l38.2-50.9c8-10.6 6.1-25.9-4.3-34.1s-25.2-6.3-33.2 4.4l-48 63.9c-5.9 7.9-6.6 18.6-1.7 27.2L402.2 140 352 190.3l0-38.2c0-14.9-10.2-27.4-24-31l0-57.2c0-4.4-3.6-8-8-8s-8 3.6-8 8l0 57.2c-13.8 3.6-24 16.1-24 31l0 38.1L237.8 140l22.6-39.5c4.9-8.6 4.2-19.3-1.7-27.2l-48-63.9c-8-10.6-22.8-12.6-33.2-4.4s-12.2 23.5-4.3 34.1l38.2 50.9-23.9 41.7c-5.5 9.7-3.9 22 3.9 29.8l40.8 40.9-153 23.9C34 232.3 0 272.7 0 320.6c0 84.6 97.6 127 154.6 67.1L288 266l0 .3-66.5 86.4c-3.3 4.3-5.1 9.6-5.1 15.1l0 54.7-42.1 49c-8.6 10.1-7.7 25.5 2.1 34.3s24.7 7.9 33.4-2.1l48-55.9c3.8-4.4 5.9-10.2 5.9-16.1l0-55.4L288 344.7l0 63.1c0 17.7 14.3 32 32 32s32-14.3 32-32l0-63.1 24.3 31.6 0 55.4c0 5.9 2.1 11.7 5.9 16.1l48 55.9c8.6 10.1 23.6 11 33.4 2.1z',
    ],
  };
  var faStarOfDavid = {
    prefix: 'fas',
    iconName: 'star-of-david',
    icon: [
      512,
      512,
      [10017],
      'f69a',
      'M404.2 309.5L383.1 344h42.3l-21.1-34.5zM371.4 256l-54-88H194.6l-54 88 54 88H317.4l54-88zm65.7 0l53.4 87c3.6 5.9 5.5 12.7 5.5 19.6c0 20.7-16.8 37.4-37.4 37.4H348.7l-56.2 91.5C284.8 504.3 270.9 512 256 512s-28.8-7.7-36.6-20.5L163.3 400H53.4C32.8 400 16 383.2 16 362.6c0-6.9 1.9-13.7 5.5-19.6l53.4-87L21.5 169c-3.6-5.9-5.5-12.7-5.5-19.6C16 128.8 32.8 112 53.4 112H163.3l56.2-91.5C227.2 7.7 241.1 0 256 0s28.8 7.7 36.6 20.5L348.7 112H458.6c20.7 0 37.4 16.8 37.4 37.4c0 6.9-1.9 13.7-5.5 19.6l-53.4 87zm-54-88l21.1 34.5L425.4 168H383.1zM283 112L256 68l-27 44h54zM128.9 168H86.6l21.1 34.5L128.9 168zM107.8 309.5L86.6 344h42.3l-21.1-34.5zM229 400l27 44 27-44H229z',
    ],
  };
  var faPersonMilitaryRifle = {
    prefix: 'fas',
    iconName: 'person-military-rifle',
    icon: [
      512,
      512,
      [],
      'e54b',
      'M160 39c0-13 10-23.8 22.9-24.9L334.7 1.4C344 .7 352 8 352 17.4V48c0 8.8-7.2 16-16 16H185c-13.8 0-25-11.2-25-25zm17.6 57H334.4c1 5.2 1.6 10.5 1.6 16c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-5.5 .6-10.8 1.6-16zm228 364.3L352 369.7V480c0 1.3-.1 2.5-.2 3.8L177.5 234.9c16.6-7.1 34.6-10.9 53.3-10.9h50.4c15.9 0 31.3 2.8 45.8 7.9L421.9 67.7c-7.7-4.4-10.3-14.2-5.9-21.9s14.2-10.3 21.9-5.9l13.9 8 13.9 8c7.7 4.4 10.3 14.2 5.9 21.9L416 173.9l1.6 .9c15.3 8.8 20.6 28.4 11.7 43.7L392.6 282c2 2.8 3.9 5.8 5.7 8.8l76.1 128.8c11.2 19 4.9 43.5-14.1 54.8s-43.5 4.9-54.8-14.1zM320 512H192c-17.7 0-32-14.3-32-32V369.7l-53.6 90.6c-11.2 19-35.8 25.3-54.8 14.1s-25.3-35.8-14.1-54.8l76.1-128.8c9.4-15.8 21.7-29.3 36-40L331.1 510c-3.5 1.3-7.2 2-11.1 2zM296 320c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faCartShopping = {
    prefix: 'fas',
    iconName: 'cart-shopping',
    icon: [
      576,
      512,
      [128722, 'shopping-cart'],
      'f07a',
      'M24 0C10.7 0 0 10.7 0 24S10.7 48 24 48H76.1l60.3 316.5c2.2 11.3 12.1 19.5 23.6 19.5H488c13.3 0 24-10.7 24-24s-10.7-24-24-24H179.9l-9.1-48h317c14.3 0 26.9-9.5 30.8-23.3l54-192C578.3 52.3 563 32 541.8 32H122l-2.4-12.5C117.4 8.2 107.5 0 96 0H24zM176 512c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm336-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faShoppingCart = faCartShopping;
  var faVials = {
    prefix: 'fas',
    iconName: 'vials',
    icon: [
      512,
      512,
      [],
      'f493',
      'M0 64C0 46.3 14.3 32 32 32H88h48 56c17.7 0 32 14.3 32 32s-14.3 32-32 32V400c0 44.2-35.8 80-80 80s-80-35.8-80-80V96C14.3 96 0 81.7 0 64zM136 96H88V256h48V96zM288 64c0-17.7 14.3-32 32-32h56 48 56c17.7 0 32 14.3 32 32s-14.3 32-32 32V400c0 44.2-35.8 80-80 80s-80-35.8-80-80V96c-17.7 0-32-14.3-32-32zM424 96H376V256h48V96z',
    ],
  };
  var faPlugCirclePlus = {
    prefix: 'fas',
    iconName: 'plug-circle-plus',
    icon: [
      576,
      512,
      [],
      'e55f',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm16-208v48h48c8.8 0 16 7.2 16 16s-7.2 16-16 16H448v48c0 8.8-7.2 16-16 16s-16-7.2-16-16V384H368c-8.8 0-16-7.2-16-16s7.2-16 16-16h48V304c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faPlaceOfWorship = {
    prefix: 'fas',
    iconName: 'place-of-worship',
    icon: [
      640,
      512,
      [],
      'f67f',
      'M224 109.3V217.6L183.3 242c-14.5 8.7-23.3 24.3-23.3 41.2V512h96V416c0-35.3 28.7-64 64-64s64 28.7 64 64v96h96V283.2c0-16.9-8.8-32.5-23.3-41.2L416 217.6V109.3c0-8.5-3.4-16.6-9.4-22.6L331.3 11.3c-6.2-6.2-16.4-6.2-22.6 0L233.4 86.6c-6 6-9.4 14.1-9.4 22.6zM24.9 330.3C9.5 338.8 0 354.9 0 372.4V464c0 26.5 21.5 48 48 48h80V273.6L24.9 330.3zM592 512c26.5 0 48-21.5 48-48V372.4c0-17.5-9.5-33.6-24.9-42.1L512 273.6V512h80z',
    ],
  };
  var faGripVertical = {
    prefix: 'fas',
    iconName: 'grip-vertical',
    icon: [
      320,
      512,
      [],
      'f58e',
      'M40 352c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40l-48 0zm192 0c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40l-48 0zM40 320l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40l-48 0c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40zM232 192c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40l-48 0zM40 160l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40L40 32C17.9 32 0 49.9 0 72l0 48c0 22.1 17.9 40 40 40zM232 32c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40l48 0c22.1 0 40-17.9 40-40l0-48c0-22.1-17.9-40-40-40l-48 0z',
    ],
  };
  var faArrowTurnUp = {
    prefix: 'fas',
    iconName: 'arrow-turn-up',
    icon: [
      384,
      512,
      ['level-up'],
      'f148',
      'M32 448c-17.7 0-32 14.3-32 32s14.3 32 32 32l96 0c53 0 96-43 96-96l0-306.7 73.4 73.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 109.3 160 416c0 17.7-14.3 32-32 32l-96 0z',
    ],
  };
  var faLevelUp = faArrowTurnUp;
  var faU = {
    prefix: 'fas',
    iconName: 'u',
    icon: [
      384,
      512,
      [117],
      '55',
      'M32 32c17.7 0 32 14.3 32 32V288c0 70.7 57.3 128 128 128s128-57.3 128-128V64c0-17.7 14.3-32 32-32s32 14.3 32 32V288c0 106-86 192-192 192S0 394 0 288V64C0 46.3 14.3 32 32 32z',
    ],
  };
  var faSquareRootVariable = {
    prefix: 'fas',
    iconName: 'square-root-variable',
    icon: [
      576,
      512,
      ['square-root-alt'],
      'f698',
      'M289 24.2C292.5 10 305.3 0 320 0H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H345L239 487.8c-3.2 13-14.2 22.6-27.6 24s-26.1-5.5-32.1-17.5L76.2 288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H96c12.1 0 23.2 6.8 28.6 17.7l73.3 146.6L289 24.2zM393.4 233.4c12.5-12.5 32.8-12.5 45.3 0L480 274.7l41.4-41.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3L525.3 320l41.4 41.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L480 365.3l-41.4 41.4c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L434.7 320l-41.4-41.4c-12.5-12.5-12.5-32.8 0-45.3z',
    ],
  };
  var faSquareRootAlt = faSquareRootVariable;
  var faClock = {
    prefix: 'fas',
    iconName: 'clock',
    icon: [
      512,
      512,
      [128339, 'clock-four'],
      'f017',
      'M256 512C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256s-114.6 256-256 256zM232 120V256c0 8 4 15.5 10.7 20l96 64c11 7.4 25.9 4.4 33.3-6.7s4.4-25.9-6.7-33.3L280 243.2V120c0-13.3-10.7-24-24-24s-24 10.7-24 24z',
    ],
  };
  var faClockFour = faClock;
  var faBackwardStep = {
    prefix: 'fas',
    iconName: 'backward-step',
    icon: [
      320,
      512,
      ['step-backward'],
      'f048',
      'M267.5 440.6c9.5 7.9 22.8 9.7 34.1 4.4s18.4-16.6 18.4-29V96c0-12.4-7.2-23.7-18.4-29s-24.5-3.6-34.1 4.4l-192 160L64 241V96c0-17.7-14.3-32-32-32S0 78.3 0 96V416c0 17.7 14.3 32 32 32s32-14.3 32-32V271l11.5 9.6 192 160z',
    ],
  };
  var faStepBackward = faBackwardStep;
  var faPallet = {
    prefix: 'fas',
    iconName: 'pallet',
    icon: [
      640,
      512,
      [],
      'f482',
      'M32 320c-17.7 0-32 14.3-32 32s14.3 32 32 32H64v64H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H96 320 544h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H576V384h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H544 320 96 32zm96 64H288v64H128V384zm224 0H512v64H352V384z',
    ],
  };
  var faFaucet = {
    prefix: 'fas',
    iconName: 'faucet',
    icon: [
      512,
      512,
      [],
      'e005',
      'M192 96v12L96 96c-17.7 0-32 14.3-32 32s14.3 32 32 32l96-12 31-3.9 1-.1 1 .1 31 3.9 96 12c17.7 0 32-14.3 32-32s-14.3-32-32-32l-96 12V96c0-17.7-14.3-32-32-32s-32 14.3-32 32zM32 256c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H132.1c20.2 29 53.9 48 91.9 48s71.7-19 91.9-48H352c17.7 0 32 14.3 32 32s14.3 32 32 32h64c17.7 0 32-14.3 32-32c0-88.4-71.6-160-160-160H320l-22.6-22.6c-6-6-14.1-9.4-22.6-9.4H256V180.2l-32-4-32 4V224H173.3c-8.5 0-16.6 3.4-22.6 9.4L128 256H32z',
    ],
  };
  var faBaseballBatBall = {
    prefix: 'fas',
    iconName: 'baseball-bat-ball',
    icon: [
      640,
      512,
      [],
      'f432',
      'M550.3 0c-10.9 0-21.4 3.4-30.2 9.8L279.7 184.6c-13.9 10.1-26.8 21.4-38.7 33.8L138.7 325.3c-9.2 9.6-19.3 18.4-30.1 26.3L79.3 372.9c1.3 1.5 2.6 3 3.9 4.7l48 64c1.6 2.2 3.1 4.4 4.4 6.6l27.3-19.9c11.6-8.4 24-15.8 37-21.8l135.3-63.1c16.7-7.8 32.7-17.2 47.6-28.1L619 143.6c13.2-9.6 21-24.9 21-41.2c0-11-3.6-21.8-10.2-30.6L609.6 44.8 591.4 20.6C581.7 7.6 566.5 0 550.3 0zM496 512c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zM57.6 396.8c-10.6-14.1-30.7-17-44.8-6.4s-17 30.7-6.4 44.8l48 64c10.6 14.1 30.7 17 44.8 6.4s17-30.7 6.4-44.8l-48-64z',
    ],
  };
  var faS = {
    prefix: 'fas',
    iconName: 's',
    icon: [
      384,
      512,
      [115],
      '53',
      'M131.1 105.4c-20.1 8.6-30.8 21.8-33.9 39.4c-2.4 14.1-.7 23.2 2 29.4c2.8 6.3 7.9 12.4 16.7 18.6c19.2 13.4 48.3 22.1 84.9 32.5c1 .3 1.9 .6 2.9 .8c32.7 9.3 72 20.6 100.9 40.7c15.7 10.9 29.9 25.5 38.6 45.1c8.8 19.8 10.8 42 6.6 66.3c-7.3 42.5-35.3 71.7-71.8 87.3c-35.4 15.2-79.1 17.9-123.7 10.9l-.2 0 0 0c-24-3.9-62.7-17.1-87.6-25.6c-4.8-1.7-9.2-3.1-12.8-4.3c-16.8-5.6-25.8-23.7-20.3-40.5s23.7-25.8 40.5-20.3c4.9 1.6 10.2 3.4 15.9 5.4c25.4 8.6 56.4 19.2 74.4 22.1c36.8 5.7 67.5 2.5 88.5-6.5c20.1-8.6 30.8-21.8 33.9-39.4c2.4-14.1 .7-23.2-2-29.4c-2.8-6.3-7.9-12.4-16.7-18.6c-19.2-13.4-48.3-22.1-84.9-32.5c-1-.3-1.9-.6-2.9-.8c-32.7-9.3-72-20.6-100.9-40.7c-15.7-10.9-29.9-25.5-38.6-45.1c-8.8-19.8-10.8-42-6.6-66.3l31.5 5.5-31.5-5.5c7.3-42.5 35.3-71.7 71.8-87.3c35.4-15.2 79.1-17.9 123.7-10.9c13 2 52.4 9.6 66.6 13.4c17.1 4.5 27.2 22.1 22.7 39.2s-22.1 27.2-39.1 22.7c-11.2-3-48.2-10.2-60.1-12l4.9-31.5-4.9 31.5c-36.9-5.8-67.5-2.5-88.6 6.5z',
    ],
  };
  var faTimeline = {
    prefix: 'fas',
    iconName: 'timeline',
    icon: [
      640,
      512,
      [],
      'e29c',
      'M128 120c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm32 49.3c28.3-12.3 48-40.5 48-73.3c0-44.2-35.8-80-80-80S48 51.8 48 96c0 32.8 19.7 61 48 73.3V224H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H288v54.7c-28.3 12.3-48 40.5-48 73.3c0 44.2 35.8 80 80 80s80-35.8 80-80c0-32.8-19.7-61-48-73.3V288H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H544V169.3c28.3-12.3 48-40.5 48-73.3c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 32.8 19.7 61 48 73.3V224H160V169.3zM536 96c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM320 440c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faKeyboard = {
    prefix: 'fas',
    iconName: 'keyboard',
    icon: [
      576,
      512,
      [9000],
      'f11c',
      'M64 64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64H64zm16 64h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16zm80-176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V144zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zM160 336c0-8.8 7.2-16 16-16H400c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V336zM272 128h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16zM256 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM368 128h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16zM352 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V240zM464 128h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H464c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16zM448 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H464c-8.8 0-16-7.2-16-16V240zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H464c-8.8 0-16-7.2-16-16V336c0-8.8 7.2-16 16-16z',
    ],
  };
  var faCaretDown = {
    prefix: 'fas',
    iconName: 'caret-down',
    icon: [
      320,
      512,
      [],
      'f0d7',
      'M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z',
    ],
  };
  var faHouseChimneyMedical = {
    prefix: 'fas',
    iconName: 'house-chimney-medical',
    icon: [
      576,
      512,
      ['clinic-medical'],
      'f7f2',
      'M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c.2 35.5-28.5 64.3-64 64.3H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L416 100.7V64c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V185l52.8 46.4c8 7 12 15 11 24zM272 192c-8.8 0-16 7.2-16 16v48H208c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V320h48c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H320V208c0-8.8-7.2-16-16-16H272z',
    ],
  };
  var faClinicMedical = faHouseChimneyMedical;
  var faTemperatureThreeQuarters = {
    prefix: 'fas',
    iconName: 'temperature-three-quarters',
    icon: [
      320,
      512,
      ['temperature-3', 'thermometer-3', 'thermometer-three-quarters'],
      'f2c8',
      'M160 64c-26.5 0-48 21.5-48 48V276.5c0 17.3-7.1 31.9-15.3 42.5C86.2 332.6 80 349.5 80 368c0 44.2 35.8 80 80 80s80-35.8 80-80c0-18.5-6.2-35.4-16.7-48.9c-8.2-10.6-15.3-25.2-15.3-42.5V112c0-26.5-21.5-48-48-48zM48 112C48 50.2 98.1 0 160 0s112 50.1 112 112V276.5c0 .1 .1 .3 .2 .6c.2 .6 .8 1.6 1.7 2.8c18.9 24.4 30.1 55 30.1 88.1c0 79.5-64.5 144-144 144S16 447.5 16 368c0-33.2 11.2-63.8 30.1-88.1c.9-1.2 1.5-2.2 1.7-2.8c.1-.3 .2-.5 .2-.6V112zM208 368c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-20.9 13.4-38.7 32-45.3V152c0-8.8 7.2-16 16-16s16 7.2 16 16V322.7c18.6 6.6 32 24.4 32 45.3z',
    ],
  };
  var faTemperature3 = faTemperatureThreeQuarters;
  var faThermometer3 = faTemperatureThreeQuarters;
  var faThermometerThreeQuarters = faTemperatureThreeQuarters;
  var faMobileScreen = {
    prefix: 'fas',
    iconName: 'mobile-screen',
    icon: [
      384,
      512,
      ['mobile-android-alt'],
      'f3cf',
      'M16 64C16 28.7 44.7 0 80 0H304c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H80c-35.3 0-64-28.7-64-64V64zM144 448c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16s-7.2-16-16-16H160c-8.8 0-16 7.2-16 16zM304 64H80V384H304V64z',
    ],
  };
  var faMobileAndroidAlt = faMobileScreen;
  var faPlaneUp = {
    prefix: 'fas',
    iconName: 'plane-up',
    icon: [
      512,
      512,
      [],
      'e22d',
      'M192 93.7C192 59.5 221 0 256 0c36 0 64 59.5 64 93.7l0 66.3L497.8 278.5c8.9 5.9 14.2 15.9 14.2 26.6v56.7c0 10.9-10.7 18.6-21.1 15.2L320 320v80l57.6 43.2c4 3 6.4 7.8 6.4 12.8v42c0 7.8-6.3 14-14 14c-1.3 0-2.6-.2-3.9-.5L256 480 145.9 511.5c-1.3 .4-2.6 .5-3.9 .5c-7.8 0-14-6.3-14-14V456c0-5 2.4-9.8 6.4-12.8L192 400V320L21.1 377C10.7 380.4 0 372.7 0 361.8V305.1c0-10.7 5.3-20.7 14.2-26.6L192 160V93.7z',
    ],
  };
  var faPiggyBank = {
    prefix: 'fas',
    iconName: 'piggy-bank',
    icon: [
      576,
      512,
      [],
      'f4d3',
      'M400 96l0 .7c-5.3-.4-10.6-.7-16-.7H256c-16.5 0-32.5 2.1-47.8 6c-.1-2-.2-4-.2-6c0-53 43-96 96-96s96 43 96 96zm-16 32c3.5 0 7 .1 10.4 .3c4.2 .3 8.4 .7 12.6 1.3C424.6 109.1 450.8 96 480 96h32l-18.8 75.1c15.8 14.8 28.7 32.8 37.5 52.9H544c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H512c-9.1 12.1-19.9 22.9-32 32v64c0 17.7-14.3 32-32 32H416c-17.7 0-32-14.3-32-32V448H256v32c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V416c-34.9-26.2-58.7-66.3-63.2-112H68c-37.6 0-68-30.4-68-68s30.4-68 68-68h4c13.3 0 24 10.7 24 24s-10.7 24-24 24H68c-11 0-20 9-20 20s9 20 20 20H99.2c12.1-59.8 57.7-107.5 116.3-122.8c12.9-3.4 26.5-5.2 40.5-5.2H384zm64 136c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faBatteryHalf = {
    prefix: 'fas',
    iconName: 'battery-half',
    icon: [
      576,
      512,
      ['battery-3'],
      'f242',
      'M0 176c0-44.2 35.8-80 80-80H464c44.2 0 80 35.8 80 80v16c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32v16c0 44.2-35.8 80-80 80H80c-44.2 0-80-35.8-80-80V176zm80-16c-8.8 0-16 7.2-16 16V336c0 8.8 7.2 16 16 16H464c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H80zm208 32V320H96V192H288z',
    ],
  };
  var faBattery3 = faBatteryHalf;
  var faMountainCity = {
    prefix: 'fas',
    iconName: 'mountain-city',
    icon: [
      640,
      512,
      [],
      'e52e',
      'M336 0c-26.5 0-48 21.5-48 48v92.1l71.4 118.4c2.5-1.6 5.4-2.5 8.6-2.5h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16h-3.5l73.8 122.4c12.4 20.6 12.9 46.3 1.2 67.3c-.4 .8-.9 1.6-1.4 2.3H592c26.5 0 48-21.5 48-48V240c0-26.5-21.5-48-48-48H568V120c0-13.3-10.7-24-24-24s-24 10.7-24 24v72H480V48c0-26.5-21.5-48-48-48H336zm32 64h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V80c0-8.8 7.2-16 16-16zM352 176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V176zm160 96c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H528c-8.8 0-16-7.2-16-16V272zm16 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H528c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16zM224 188.9L283.8 288H223l-48 64-24.6-41.2L224 188.9zm29.4-44.2C247.1 134.3 236 128 224 128s-23.1 6.3-29.4 16.7L5.1 458.9c-6.5 10.8-6.7 24.3-.7 35.3S22 512 34.5 512H413.5c12.5 0 24-6.8 30.1-17.8s5.8-24.5-.7-35.3L253.4 144.7z',
    ],
  };
  var faCoins = {
    prefix: 'fas',
    iconName: 'coins',
    icon: [
      512,
      512,
      [],
      'f51e',
      'M512 80c0 18-14.3 34.6-38.4 48c-29.1 16.1-72.5 27.5-122.3 30.9c-3.7-1.8-7.4-3.5-11.3-5C300.6 137.4 248.2 128 192 128c-8.3 0-16.4 .2-24.5 .6l-1.1-.6C142.3 114.6 128 98 128 80c0-44.2 86-80 192-80S512 35.8 512 80zM160.7 161.1c10.2-.7 20.7-1.1 31.3-1.1c62.2 0 117.4 12.3 152.5 31.4C369.3 204.9 384 221.7 384 240c0 4-.7 7.9-2.1 11.7c-4.6 13.2-17 25.3-35 35.5c0 0 0 0 0 0c-.1 .1-.3 .1-.4 .2l0 0 0 0c-.3 .2-.6 .3-.9 .5c-35 19.4-90.8 32-153.6 32c-59.6 0-112.9-11.3-148.2-29.1c-1.9-.9-3.7-1.9-5.5-2.9C14.3 274.6 0 258 0 240c0-34.8 53.4-64.5 128-75.4c10.5-1.5 21.4-2.7 32.7-3.5zM416 240c0-21.9-10.6-39.9-24.1-53.4c28.3-4.4 54.2-11.4 76.2-20.5c16.3-6.8 31.5-15.2 43.9-25.5V176c0 19.3-16.5 37.1-43.8 50.9c-14.6 7.4-32.4 13.7-52.4 18.5c.1-1.8 .2-3.5 .2-5.3zm-32 96c0 18-14.3 34.6-38.4 48c-1.8 1-3.6 1.9-5.5 2.9C304.9 404.7 251.6 416 192 416c-62.8 0-118.6-12.6-153.6-32C14.3 370.6 0 354 0 336V300.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 342.6 135.8 352 192 352s108.6-9.4 148.1-25.9c7.8-3.2 15.3-6.9 22.4-10.9c6.1-3.4 11.8-7.2 17.2-11.2c1.5-1.1 2.9-2.3 4.3-3.4V304v5.7V336zm32 0V304 278.1c19-4.2 36.5-9.5 52.1-16c16.3-6.8 31.5-15.2 43.9-25.5V272c0 10.5-5 21-14.9 30.9c-16.3 16.3-45 29.7-81.3 38.4c.1-1.7 .2-3.5 .2-5.3zM192 448c56.2 0 108.6-9.4 148.1-25.9c16.3-6.8 31.5-15.2 43.9-25.5V432c0 44.2-86 80-192 80S0 476.2 0 432V396.6c12.5 10.3 27.6 18.7 43.9 25.5C83.4 438.6 135.8 448 192 448z',
    ],
  };
  var faKhanda = {
    prefix: 'fas',
    iconName: 'khanda',
    icon: [
      576,
      512,
      [9772],
      'f66d',
      'M277.8 3.7c5.9-4.9 14.6-4.9 20.5 0l48 40c5.9 4.9 7.5 13.2 3.8 19.9l0 0 0 0 0 0 0 0-.1 .1-.3 .6c-.3 .5-.7 1.3-1.2 2.3c-1 2-2.6 5-4.4 8.6c-.5 .9-.9 1.9-1.4 2.9C376.9 97.4 400 134 400 176s-23.1 78.6-57.3 97.8c.5 1 1 2 1.4 2.9c1.8 3.7 3.3 6.6 4.4 8.6c.5 1 .9 1.8 1.2 2.3l.3 .6 .1 .1 0 0 0 0c3.6 6.7 2 15-3.8 19.9L304 343.5v19.8l35.6-24.5 41.1-28.2c42.8-29.4 68.4-78 68.4-130c0-31.1-9.2-61.6-26.5-87.5l-2.8-4.2c-4-6-3.5-14 1.3-19.5s12.7-7 19.2-3.7L433.1 80c7.2-14.3 7.2-14.3 7.2-14.3l0 0 0 0 .1 0 .3 .2 1 .5c.8 .4 2 1.1 3.5 1.9c2.9 1.7 7 4.1 11.8 7.3c9.6 6.4 22.5 16.1 35.4 29c25.7 25.7 52.7 65.6 52.7 119.3c0 53.1-26.4 100.5-51.2 133.6c-12.6 16.7-25.1 30.3-34.5 39.7c-4.7 4.7-8.7 8.4-11.5 10.9c-1.4 1.3-2.5 2.2-3.3 2.9l-.9 .8-.3 .2-.1 .1 0 0 0 0s0 0-10.2-12.3l10.2 12.3c-5.1 4.3-12.4 4.9-18.2 1.6l-75.6-43-32.7 22.5 45.5 31.3c1.8-.4 3.7-.7 5.7-.7c13.3 0 24 10.7 24 24s-10.7 24-24 24c-12.2 0-22.3-9.1-23.8-21L304 423.4v28.9c9.6 5.5 16 15.9 16 27.7c0 17.7-14.3 32-32 32s-32-14.3-32-32c0-11.8 6.4-22.2 16-27.7V424.1l-40.3 27.7C229.8 463.3 219.9 472 208 472c-13.3 0-24-10.7-24-24s10.7-24 24-24c2.2 0 4.4 .3 6.5 .9l45.8-31.5-32.7-22.5-75.6 43c-5.8 3.3-13 2.7-18.2-1.6L144 400c-10.2 12.3-10.2 12.3-10.3 12.3l0 0 0 0-.1-.1-.3-.2-.9-.8c-.8-.7-1.9-1.7-3.3-2.9c-2.8-2.5-6.7-6.2-11.5-10.9c-9.4-9.4-21.9-23-34.5-39.7C58.4 324.5 32 277.1 32 224c0-53.7 26.9-93.6 52.7-119.3c12.9-12.9 25.8-22.6 35.4-29c4.8-3.2 8.9-5.7 11.8-7.3c1.5-.8 2.6-1.5 3.5-1.9l1-.5 .3-.2 .1 0 0 0 0 0s0 0 7.2 14.3l-7.2-14.3c6.5-3.2 14.3-1.7 19.2 3.7s5.3 13.4 1.3 19.5l-2.8 4.2C137.2 119 128 149.5 128 180.6c0 51.9 25.6 100.6 68.4 130l41.1 28.2L272 362.6V343.5l-42.2-35.2c-5.9-4.9-7.5-13.2-3.8-19.9l0 0 0 0 0 0 .1-.1 .3-.6c.3-.5 .7-1.3 1.2-2.3c1-2 2.6-5 4.4-8.6c.5-.9 .9-1.9 1.4-2.9C199.1 254.6 176 218 176 176s23.1-78.6 57.3-97.8c-.5-1-1-2-1.4-2.9c-1.8-3.7-3.3-6.6-4.4-8.6c-.5-1-.9-1.8-1.2-2.3l-.3-.6-.1-.1 0 0 0 0 0 0c-3.6-6.7-2-15 3.8-19.9l48-40zM252.2 122.9c-17 11.5-28.2 31-28.2 53.1s11.2 41.6 28.2 53.1C259 210.2 264 190.9 264 176s-5-34.2-11.8-53.1zm71.5 106.2c17-11.5 28.2-31 28.2-53.1s-11.2-41.6-28.2-53.1C317 141.8 312 161.1 312 176s5 34.2 11.8 53.1z',
    ],
  };
  var faSliders = {
    prefix: 'fas',
    iconName: 'sliders',
    icon: [
      512,
      512,
      ['sliders-h'],
      'f1de',
      'M0 416c0-17.7 14.3-32 32-32l54.7 0c12.3-28.3 40.5-48 73.3-48s61 19.7 73.3 48L480 384c17.7 0 32 14.3 32 32s-14.3 32-32 32l-246.7 0c-12.3 28.3-40.5 48-73.3 48s-61-19.7-73.3-48L32 448c-17.7 0-32-14.3-32-32zm192 0c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM384 256c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm-32-80c32.8 0 61 19.7 73.3 48l54.7 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-54.7 0c-12.3 28.3-40.5 48-73.3 48s-61-19.7-73.3-48L32 288c-17.7 0-32-14.3-32-32s14.3-32 32-32l246.7 0c12.3-28.3 40.5-48 73.3-48zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32s-14.3-32-32-32zm73.3 0L480 64c17.7 0 32 14.3 32 32s-14.3 32-32 32l-214.7 0c-12.3 28.3-40.5 48-73.3 48s-61-19.7-73.3-48L32 128C14.3 128 0 113.7 0 96S14.3 64 32 64l86.7 0C131 35.7 159.2 16 192 16s61 19.7 73.3 48z',
    ],
  };
  var faSlidersH = faSliders;
  var faFolderTree = {
    prefix: 'fas',
    iconName: 'folder-tree',
    icon: [
      576,
      512,
      [],
      'f802',
      'M64 32C64 14.3 49.7 0 32 0S0 14.3 0 32v96V384c0 35.3 28.7 64 64 64H256V384H64V160H256V96H64V32zM288 192c0 17.7 14.3 32 32 32H544c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H445.3c-8.5 0-16.6-3.4-22.6-9.4L409.4 9.4c-6-6-14.1-9.4-22.6-9.4H320c-17.7 0-32 14.3-32 32V192zm0 288c0 17.7 14.3 32 32 32H544c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32H445.3c-8.5 0-16.6-3.4-22.6-9.4l-13.3-13.3c-6-6-14.1-9.4-22.6-9.4H320c-17.7 0-32 14.3-32 32V480z',
    ],
  };
  var faNetworkWired = {
    prefix: 'fas',
    iconName: 'network-wired',
    icon: [
      640,
      512,
      [],
      'f6ff',
      'M256 64H384v64H256V64zM240 0c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h48v32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96v32H80c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H240c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H192V288H448v32H400c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48H560c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48H512V288h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H352V192h48c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H240zM96 448V384H224v64H96zm320-64H544v64H416V384z',
    ],
  };
  var faMapPin = {
    prefix: 'fas',
    iconName: 'map-pin',
    icon: [
      320,
      512,
      [128205],
      'f276',
      'M320 144c0 79.5-64.5 144-144 144S32 223.5 32 144S96.5 0 176 0s144 64.5 144 144zM176 80c8.8 0 16-7.2 16-16s-7.2-16-16-16c-53 0-96 43-96 96c0 8.8 7.2 16 16 16s16-7.2 16-16c0-35.3 28.7-64 64-64zM144 480V317.1c10.4 1.9 21.1 2.9 32 2.9s21.6-1 32-2.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32z',
    ],
  };
  var faHamsa = {
    prefix: 'fas',
    iconName: 'hamsa',
    icon: [
      512,
      512,
      [],
      'f665',
      'M34.6 288H80c8.8 0 16-7.2 16-16V72c0-22.1 17.9-40 40-40s40 17.9 40 40V204c0 11 9 20 20 20s20-9 20-20V40c0-22.1 17.9-40 40-40s40 17.9 40 40V204c0 11 9 20 20 20s20-9 20-20V72c0-22.1 17.9-40 40-40s40 17.9 40 40V272c0 8.8 7.2 16 16 16h45.4c19.1 0 34.6 15.5 34.6 34.6c0 8.6-3.2 16.9-9 23.3L416.6 441c-41.1 45.2-99.4 71-160.6 71s-119.4-25.8-160.6-71L9 345.9c-5.8-6.4-9-14.7-9-23.3C0 303.5 15.5 288 34.6 288zM256 288c-38.4 0-76.8 35.8-90.6 50.2c-3.6 3.7-5.4 8.7-5.4 13.8s1.8 10.1 5.4 13.8C179.2 380.2 217.6 416 256 416s76.8-35.8 90.6-50.2c3.6-3.7 5.4-8.7 5.4-13.8s-1.8-10.1-5.4-13.8C332.8 323.8 294.4 288 256 288zm0 96c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faCentSign = {
    prefix: 'fas',
    iconName: 'cent-sign',
    icon: [
      384,
      512,
      [],
      'e3f5',
      'M224 0c17.7 0 32 14.3 32 32V66.7c30.9 5.2 59.2 17.7 83.2 35.8c14.1 10.6 17 30.7 6.4 44.8s-30.7 17-44.8 6.4C279.4 137.5 252.9 128 224 128c-70.7 0-128 57.3-128 128s57.3 128 128 128c28.9 0 55.4-9.5 76.8-25.6c14.1-10.6 34.2-7.8 44.8 6.4s7.8 34.2-6.4 44.8c-24 18-52.4 30.6-83.2 35.8V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V445.3C101.2 430.1 32 351.1 32 256s69.2-174.1 160-189.3V32c0-17.7 14.3-32 32-32z',
    ],
  };
  var faFlask = {
    prefix: 'fas',
    iconName: 'flask',
    icon: [
      448,
      512,
      [],
      'f0c3',
      'M288 0H160 128C110.3 0 96 14.3 96 32s14.3 32 32 32V196.8c0 11.8-3.3 23.5-9.5 33.5L10.3 406.2C3.6 417.2 0 429.7 0 442.6C0 480.9 31.1 512 69.4 512H378.6c38.3 0 69.4-31.1 69.4-69.4c0-12.8-3.6-25.4-10.3-36.4L329.5 230.4c-6.2-10.1-9.5-21.7-9.5-33.5V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H288zM192 196.8V64h64V196.8c0 23.7 6.6 46.9 19 67.1L309.5 320h-171L173 263.9c12.4-20.2 19-43.4 19-67.1z',
    ],
  };
  var faPersonPregnant = {
    prefix: 'fas',
    iconName: 'person-pregnant',
    icon: [
      384,
      512,
      [],
      'e31e',
      'M192 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zM120 383c-13.8-3.6-24-16.1-24-31V296.9l-4.6 7.6c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c15-24.9 40.3-41.5 68.7-45.6c4.1-.6 8.2-1 12.5-1h1.1 12.5H192c1.4 0 2.8 .1 4.1 .3c35.7 2.9 65.4 29.3 72.1 65l6.1 32.5c44.3 8.6 77.7 47.5 77.7 94.3v32c0 17.7-14.3 32-32 32H304 264v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384h-8-8v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V383z',
    ],
  };
  var faWandSparkles = {
    prefix: 'fas',
    iconName: 'wand-sparkles',
    icon: [
      512,
      512,
      [],
      'f72b',
      'M464 6.1c9.5-8.5 24-8.1 33 .9l8 8c9 9 9.4 23.5 .9 33l-85.8 95.9c-2.6 2.9-4.1 6.7-4.1 10.7V176c0 8.8-7.2 16-16 16H384.2c-4.6 0-8.9 1.9-11.9 5.3L100.7 500.9C94.3 508 85.3 512 75.8 512c-8.8 0-17.3-3.5-23.5-9.8L9.7 459.7C3.5 453.4 0 445 0 436.2c0-9.5 4-18.5 11.1-24.8l111.6-99.8c3.4-3 5.3-7.4 5.3-11.9V272c0-8.8 7.2-16 16-16h34.6c3.9 0 7.7-1.5 10.7-4.1L464 6.1zM432 288c3.6 0 6.7 2.4 7.7 5.8l14.8 51.7 51.7 14.8c3.4 1 5.8 4.1 5.8 7.7s-2.4 6.7-5.8 7.7l-51.7 14.8-14.8 51.7c-1 3.4-4.1 5.8-7.7 5.8s-6.7-2.4-7.7-5.8l-14.8-51.7-51.7-14.8c-3.4-1-5.8-4.1-5.8-7.7s2.4-6.7 5.8-7.7l51.7-14.8 14.8-51.7c1-3.4 4.1-5.8 7.7-5.8zM87.7 69.8l14.8 51.7 51.7 14.8c3.4 1 5.8 4.1 5.8 7.7s-2.4 6.7-5.8 7.7l-51.7 14.8L87.7 218.2c-1 3.4-4.1 5.8-7.7 5.8s-6.7-2.4-7.7-5.8L57.5 166.5 5.8 151.7c-3.4-1-5.8-4.1-5.8-7.7s2.4-6.7 5.8-7.7l51.7-14.8L72.3 69.8c1-3.4 4.1-5.8 7.7-5.8s6.7 2.4 7.7 5.8zM224 0c3.7 0 6.9 2.5 7.8 6.1l6.8 27.3 27.3 6.8c3.6 .9 6.1 4.1 6.1 7.8s-2.5 6.9-6.1 7.8l-27.3 6.8-6.8 27.3c-.9 3.6-4.1 6.1-7.8 6.1s-6.9-2.5-7.8-6.1l-6.8-27.3-27.3-6.8c-3.6-.9-6.1-4.1-6.1-7.8s2.5-6.9 6.1-7.8l27.3-6.8 6.8-27.3c.9-3.6 4.1-6.1 7.8-6.1z',
    ],
  };
  var faEllipsisVertical = {
    prefix: 'fas',
    iconName: 'ellipsis-vertical',
    icon: [
      128,
      512,
      ['ellipsis-v'],
      'f142',
      'M64 360c30.9 0 56 25.1 56 56s-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56zm0-160c30.9 0 56 25.1 56 56s-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56zM120 96c0 30.9-25.1 56-56 56S8 126.9 8 96S33.1 40 64 40s56 25.1 56 56z',
    ],
  };
  var faEllipsisV = faEllipsisVertical;
  var faTicket = {
    prefix: 'fas',
    iconName: 'ticket',
    icon: [
      576,
      512,
      [127903],
      'f145',
      'M64 64C28.7 64 0 92.7 0 128v80c26.5 0 48 21.5 48 48s-21.5 48-48 48v80c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V304c-26.5 0-48-21.5-48-48s21.5-48 48-48V128c0-35.3-28.7-64-64-64H64zm64 96l0 192H448V160H128zm-32 0c0-17.7 14.3-32 32-32H448c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32V160z',
    ],
  };
  var faPowerOff = {
    prefix: 'fas',
    iconName: 'power-off',
    icon: [
      512,
      512,
      [9211],
      'f011',
      'M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V256c0 17.7 14.3 32 32 32s32-14.3 32-32V32zM143.5 120.6c13.6-11.3 15.4-31.5 4.1-45.1s-31.5-15.4-45.1-4.1C49.7 115.4 16 181.8 16 256c0 132.5 107.5 240 240 240s240-107.5 240-240c0-74.2-33.8-140.6-86.6-184.6c-13.6-11.3-33.8-9.4-45.1 4.1s-9.4 33.8 4.1 45.1c38.9 32.3 63.5 81 63.5 135.4c0 97.2-78.8 176-176 176s-176-78.8-176-176c0-54.4 24.7-103.1 63.5-135.4z',
    ],
  };
  var faRightLong = {
    prefix: 'fas',
    iconName: 'right-long',
    icon: [
      512,
      512,
      ['long-arrow-alt-right'],
      'f30b',
      'M334.5 414c8.8 3.8 19 2 26-4.6l144-136c4.8-4.5 7.5-10.8 7.5-17.4s-2.7-12.9-7.5-17.4l-144-136c-7-6.6-17.2-8.4-26-4.6s-14.5 12.5-14.5 22l0 88L32 208c-17.7 0-32 14.3-32 32l0 32c0 17.7 14.3 32 32 32l288 0 0 88c0 9.6 5.7 18.2 14.5 22z',
    ],
  };
  var faLongArrowAltRight = faRightLong;
  var faFlagUsa = {
    prefix: 'fas',
    iconName: 'flag-usa',
    icon: [
      512,
      512,
      [],
      'f74d',
      'M63 23.9C59.4 10.1 46.9 0 32 0C14.3 0 0 14.3 0 32V480c0 17.7 14.3 32 32 32s32-14.3 32-32V380.1c2-.8 4.8-1.8 8.2-3c8-2.8 19.4-6.6 32.6-10.4C131.9 359 164.5 352 192 352c26.3 0 46 6.4 70 14.4l1 .3c23.8 7.9 51.9 17.3 89 17.3c36.8 0 72.5-9.1 98.1-17.6c13-4.3 23.8-8.7 31.5-11.9c3.8-1.6 6.9-3 9-4c1.1-.5 1.9-.9 2.5-1.2l.7-.4 .2-.1 .1 0 0 0 0 0s0 0-14.3-28.6l14.3 28.6c10.8-5.4 17.7-16.5 17.7-28.6V289.1c-2.2 .8-5 1.8-8.2 3c-8.8 3.1-21.1 7.2-35.5 11.3C439.8 311.5 402.1 320 368 320c-34.1 0-63.9-8.5-91.4-16.4l-.8-.2C247.5 295.3 221.4 288 192 288c-29.7 0-61.9 7.5-87.3 15.3C92.1 307.2 81.5 311 74 313.9c-3.7 1.4-6.7 2.6-8.6 3.5L64 318V283.5c7.9-3 18.7-6.9 31.3-10.8c26.6-8.2 62.4-16.7 96.7-16.7c34.3 0 64.2 8.5 91.8 16.4l.7 .2c28.3 8.1 54.2 15.4 83.5 15.4c29.6 0 63.9-7.5 91.5-15.4c13.6-3.9 25.4-7.8 33.6-10.7c4.1-1.5 7.4-2.7 9.6-3.5c1.1-.4 2-.7 2.5-1l.6-.2 .1-.1 0 0 0 0 0 0 0 0 5.9-2.4V193.1c-2.2 .8-5 1.8-8.2 3c-8.8 3.1-21.1 7.2-35.5 11.3C439.8 215.5 402.1 224 368 224c-34.1 0-63.9-8.5-91.4-16.4l-.8-.2C247.5 199.3 221.4 192 192 192c-29.7 0-61.9 7.5-87.3 15.3C92.1 211.2 81.5 215 74 217.9c-3.7 1.4-6.7 2.6-8.6 3.5L64 222V187.5c7.9-3 18.7-6.9 31.3-10.8c26.6-8.2 62.4-16.7 96.7-16.7c34.3 0 64.2 8.5 91.8 16.4l0 0 .7 .2c28.3 8.1 54.2 15.4 83.5 15.4c29.6 0 63.9-7.5 91.5-15.4c13.6-3.9 25.4-7.8 33.6-10.7c4.1-1.5 7.4-2.7 9.6-3.5c1.1-.4 2-.7 2.5-1l.6-.2 .1-.1 0 0 0 0 0 0 0 0 5.9-2.4V97.1c-2.2 .8-5 1.8-8.2 3c-8.8 3.1-21.1 7.2-35.5 11.3C439.8 119.5 402.1 128 368 128c-34.1 0-63.9-8.5-91.4-16.4l-.8-.2c-6.7-1.9-13.2-3.8-19.7-5.5V72.8c9.6 2.4 18.8 5 27.8 7.6l.7 .2C312.8 88.7 338.7 96 368 96c29.6 0 63.9-7.5 91.5-15.4c13.6-3.9 25.4-7.8 33.6-10.7c4.1-1.5 7.4-2.7 9.6-3.5c1.1-.4 2-.7 2.5-1l.6-.2 .1-.1 0 0 0 0 0 0 0 0 5.9-2.4V32c0-11.4-6.1-21.9-15.9-27.7s-22-5.8-31.9-.2l-.2 .1c-.3 .2-.7 .4-1.4 .8c-1.3 .7-3.4 1.8-6.2 3.1c-5.5 2.6-13.6 6.2-23.4 9.8c-20 7.3-46.2 14.1-73 14.1c-26.7 0-50.6-6.6-79.1-14.8l-1.3-.4C252.3 9.1 220.5 0 184 0C147.3 0 109.8 9 82.6 17.4c-7.2 2.2-13.8 4.4-19.6 6.5zM208 48c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm-64 8c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm48 72c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm-48-8c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faLaptopFile = {
    prefix: 'fas',
    iconName: 'laptop-file',
    icon: [
      640,
      512,
      [],
      'e51d',
      'M192 0H48C21.5 0 0 21.5 0 48V368c0 26.5 21.5 48 48 48H162.7c6.6-18.6 24.4-32 45.3-32V272c0-44.2 35.8-80 80-80h32V128H224c-17.7 0-32-14.3-32-32V0zm96 224c-26.5 0-48 21.5-48 48v16 96 32H208c-8.8 0-16 7.2-16 16v16c0 35.3 28.7 64 64 64H576c35.3 0 64-28.7 64-64V432c0-8.8-7.2-16-16-16H592V288c0-35.3-28.7-64-64-64H320 304 288zm32 64H528V416H304V288h16zM224 0V96h96L224 0z',
    ],
  };
  var faTty = {
    prefix: 'fas',
    iconName: 'tty',
    icon: [
      512,
      512,
      ['teletype'],
      'f1e4',
      'M472.7 188.8c-8.5 13.8-26.8 19.6-42.7 13.6L356 174.2c-14-5.3-22.5-18.5-21-32.4l4.6-42.6c-54.1-17.4-113.2-17.4-167.3 0l4.6 42.6c1.5 13.9-7 27.1-21 32.4L82 202.4c-15.9 6.1-34.2 .3-42.7-13.6L4.5 132.5c-7.7-12.4-5.4-28 5.5-38.1c135.9-125.8 356.1-125.8 492 0c10.9 10.1 13.2 25.7 5.5 38.1l-34.8 56.4zM32 272c0-8.8 7.2-16 16-16H80c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V272zm0 192c0-8.8 7.2-16 16-16H80c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H48c-8.8 0-16-7.2-16-16V464zM96 352h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H96c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16zm32-80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H144c-8.8 0-16-7.2-16-16V272zm64 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H192c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16zm32-80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V272zm64 80h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H288c-8.8 0-16-7.2-16-16V368c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H384c-8.8 0-16-7.2-16-16V368zM336 256h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H336c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H432c-8.8 0-16-7.2-16-16V272zm16 176h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H432c-8.8 0-16-7.2-16-16V464c0-8.8 7.2-16 16-16zM128 464c0-8.8 7.2-16 16-16H368c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H144c-8.8 0-16-7.2-16-16V464z',
    ],
  };
  var faTeletype = faTty;
  var faDiagramNext = {
    prefix: 'fas',
    iconName: 'diagram-next',
    icon: [
      512,
      512,
      [],
      'e476',
      'M512 160c0 35.3-28.7 64-64 64H280v64h46.1c21.4 0 32.1 25.9 17 41L273 399c-9.4 9.4-24.6 9.4-33.9 0L169 329c-15.1-15.1-4.4-41 17-41H232V224H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64v64zM448 416V352H365.3l.4-.4c18.4-18.4 20.4-43.7 11-63.6l71.3 0c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64L64 480c-35.3 0-64-28.7-64-64V352c0-35.3 28.7-64 64-64l71.3 0c-9.4 19.9-7.4 45.2 11 63.6l.4 .4H64v64H210.7l5.7 5.7c21.9 21.9 57.3 21.9 79.2 0l5.7-5.7H448z',
    ],
  };
  var faPersonRifle = {
    prefix: 'fas',
    iconName: 'person-rifle',
    icon: [
      576,
      512,
      [],
      'e54e',
      'M265.2 192c25.4 0 49.8 7.1 70.8 19.9V512H144V337.7L90.4 428.3c-11.2 19-35.8 25.3-54.8 14.1s-25.3-35.8-14.1-54.8L97.7 258.8c24.5-41.4 69-66.8 117.1-66.8h50.4zM320 80c0 44.2-35.8 80-80 80s-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80zM448 0c8.8 0 16 7.2 16 16V132.3c9.6 5.5 16 15.9 16 27.7V269.3l16-5.3V208c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16v84.5c0 6.9-4.4 13-10.9 15.2L480 325.3V352h48c8.8 0 16 7.2 16 16v16c0 8.8-7.2 16-16 16H484l23 92.1c2.5 10.1-5.1 19.9-15.5 19.9H432c-8.8 0-16-7.2-16-16V400H400c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32V160c0-11.8 6.4-22.2 16-27.7V32c-8.8 0-16-7.2-16-16s7.2-16 16-16h16 16z',
    ],
  };
  var faHouseMedicalCircleExclamation = {
    prefix: 'fas',
    iconName: 'house-medical-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e512',
      'M320 368c0 59.5 29.5 112.1 74.8 144H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L522.1 193.9c-8.5-1.3-17.3-1.9-26.1-1.9c-54.7 0-103.5 24.9-135.8 64H320V208c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16v48H208c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v48c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zM496 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm0-192c-8.8 0-16 7.2-16 16v80c0 8.8 7.2 16 16 16s16-7.2 16-16V288c0-8.8-7.2-16-16-16z',
    ],
  };
  var faClosedCaptioning = {
    prefix: 'fas',
    iconName: 'closed-captioning',
    icon: [
      576,
      512,
      [],
      'f20a',
      'M0 96C0 60.7 28.7 32 64 32H512c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zM200 208c14.2 0 27 6.1 35.8 16c8.8 9.9 24 10.7 33.9 1.9s10.7-24 1.9-33.9c-17.5-19.6-43.1-32-71.5-32c-53 0-96 43-96 96s43 96 96 96c28.4 0 54-12.4 71.5-32c8.8-9.9 8-25-1.9-33.9s-25-8-33.9 1.9c-8.8 9.9-21.6 16-35.8 16c-26.5 0-48-21.5-48-48s21.5-48 48-48zm144 48c0-26.5 21.5-48 48-48c14.2 0 27 6.1 35.8 16c8.8 9.9 24 10.7 33.9 1.9s10.7-24 1.9-33.9c-17.5-19.6-43.1-32-71.5-32c-53 0-96 43-96 96s43 96 96 96c28.4 0 54-12.4 71.5-32c8.8-9.9 8-25-1.9-33.9s-25-8-33.9 1.9c-8.8 9.9-21.6 16-35.8 16c-26.5 0-48-21.5-48-48z',
    ],
  };
  var faPersonHiking = {
    prefix: 'fas',
    iconName: 'person-hiking',
    icon: [
      384,
      512,
      ['hiking'],
      'f6ec',
      'M288 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM243.3 230.7L224.2 307l49.7 49.7c9 9 14.1 21.2 14.1 33.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V397.3l-73.9-73.9c-15.8-15.8-22.2-38.6-16.9-60.3l20.4-84c8.3-34.1 42.7-54.9 76.7-46.4c19 4.8 35.6 16.4 46.4 32.7L305.1 208H336V184c0-13.3 10.7-24 24-24s24 10.7 24 24v55.8c0 .1 0 .2 0 .2s0 .2 0 .2V488c0 13.3-10.7 24-24 24s-24-10.7-24-24V272H296.6c-16 0-31-8-39.9-21.4l-13.3-20zM81.1 471.9L117.3 334c3 4.2 6.4 8.2 10.1 11.9l41.9 41.9L142.9 488.1c-4.5 17.1-22 27.3-39.1 22.8s-27.3-22-22.8-39.1zm55.5-346L101.4 266.5c-3 12.1-14.9 19.9-27.2 17.9l-47.9-8c-14-2.3-22.9-16.3-19.2-30L31.9 155c9.5-34.8 41.1-59 77.2-59h4.2c15.6 0 27.1 14.7 23.3 29.8z',
    ],
  };
  var faHiking = faPersonHiking;
  var faVenusDouble = {
    prefix: 'fas',
    iconName: 'venus-double',
    icon: [
      640,
      512,
      [9890],
      'f226',
      'M192 288c61.9 0 112-50.1 112-112s-50.1-112-112-112S80 114.1 80 176s50.1 112 112 112zM368 176c0 86.3-62.1 158.1-144 173.1V384h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H224v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H128c-17.7 0-32-14.3-32-32s14.3-32 32-32h32V349.1C78.1 334.1 16 262.3 16 176C16 78.8 94.8 0 192 0s176 78.8 176 176zM344 318c14.6-15.6 26.8-33.4 36-53c18.8 14.4 42.4 23 68 23c61.9 0 112-50.1 112-112s-50.1-112-112-112c-25.6 0-49.1 8.6-68 23c-9.3-19.5-21.5-37.4-36-53C373.1 12.6 409.1 0 448 0c97.2 0 176 78.8 176 176c0 86.3-62.1 158.1-144 173.1V384h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H480v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448H384c-17.7 0-32-14.3-32-32s14.3-32 32-32h32V349.1c-26.6-4.9-51.1-15.7-72-31.1z',
    ],
  };
  var faImages = {
    prefix: 'fas',
    iconName: 'images',
    icon: [
      576,
      512,
      [],
      'f302',
      'M160 32c-35.3 0-64 28.7-64 64V320c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H160zM396 138.7l96 144c4.9 7.4 5.4 16.8 1.2 24.6S480.9 320 472 320H328 280 200c-9.2 0-17.6-5.3-21.6-13.6s-2.9-18.2 2.9-25.4l64-80c4.6-5.7 11.4-9 18.7-9s14.2 3.3 18.7 9l17.3 21.6 56-84C360.5 132 368 128 376 128s15.5 4 20 10.7zM256 128c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM48 120c0-13.3-10.7-24-24-24S0 106.7 0 120V344c0 75.1 60.9 136 136 136H456c13.3 0 24-10.7 24-24s-10.7-24-24-24H136c-48.6 0-88-39.4-88-88V120z',
    ],
  };
  var faCalculator = {
    prefix: 'fas',
    iconName: 'calculator',
    icon: [
      384,
      512,
      [128425],
      'f1ec',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM96 64H288c17.7 0 32 14.3 32 32v32c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32zM64 224c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm32 64c17.7 0 32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32zM64 416c0-17.7 14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H96c-17.7 0-32-14.3-32-32zM192 192c17.7 0 32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32zM160 320c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zM288 192c17.7 0 32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32zM256 320c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm32 64c17.7 0 32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faPeoplePulling = {
    prefix: 'fas',
    iconName: 'people-pulling',
    icon: [
      576,
      512,
      [],
      'e535',
      'M80 96c26.5 0 48-21.5 48-48s-21.5-48-48-48S32 21.5 32 48s21.5 48 48 48zM64 128c-35.3 0-64 28.7-64 64V320c0 17.7 14.3 32 32 32c9.8 0 18.5-4.4 24.4-11.2L80.4 485.3c2.9 17.4 19.4 29.2 36.8 26.3s29.2-19.4 26.3-36.8L123.1 352h15.7l30 134.9c3.8 17.3 20.9 28.1 38.2 24.3s28.1-20.9 24.3-38.2l-57.3-258 116.3 53.8c.5 .3 1.1 .5 1.6 .7c8.6 3.6 18 3.1 25.9-.7c3.4-1.6 6.6-3.9 9.3-6.7c3.1-3.2 5.5-7 7.1-11.4c.1-.3 .2-.7 .3-1l2.5-7.5c5.7-17.1 18.3-30.9 34.7-38.2l8-3.5c1-.4 1.9-.8 2.9-1.2l-16.9 63.5c-5.6 21.1-.1 43.6 14.7 59.7l70.7 77.1 22 88.1c4.3 17.1 21.7 27.6 38.8 23.3s27.6-21.7 23.3-38.8l-23-92.1c-1.9-7.8-5.8-14.9-11.2-20.8l-49.5-54 19.3-65.5 9.6 23c4.4 10.6 12.5 19.3 22.8 24.5l26.7 13.3c15.8 7.9 35 1.5 42.9-14.3s1.5-35-14.3-42.9L537 232.7l-15.3-36.8C504.5 154.8 464.3 128 419.7 128c-22.8 0-45.3 4.8-66.1 14l-8 3.5c-24.4 10.9-44.6 29-58.1 51.6L157.3 136.9C144.7 131 130.9 128 117 128H64zM464 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM349.7 335.6l-25 62.4-59.4 59.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L372.3 441c4.6-4.6 8.2-10.1 10.6-16.1l14.5-36.2-40.7-44.4c-2.5-2.7-4.8-5.6-7-8.6z',
    ],
  };
  var faN = {
    prefix: 'fas',
    iconName: 'n',
    icon: [
      384,
      512,
      [110],
      '4e',
      'M0 448c0 17.7 14.3 32 32 32s32-14.3 32-32H0zM32 64L56.6 43.5C48 33.2 33.8 29.3 21.1 33.9S0 50.5 0 64l32 0zM352 448l-24.6 20.5c8.6 10.3 22.8 14.2 35.5 9.6s21.1-16.6 21.1-30.1H352zM384 64c0-17.7-14.3-32-32-32s-32 14.3-32 32h64zM64 448V64H0V448H64zM7.4 84.5l320 384 49.2-41-320-384L7.4 84.5zM384 448V64H320V448h64z',
    ],
  };
  var faCableCar = {
    prefix: 'fas',
    iconName: 'cable-car',
    icon: [
      512,
      512,
      [128673, 57551, 'tram'],
      'f7da',
      'M288 64c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm-64-8c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM32 288c0-35.3 28.7-64 64-64H232V157.5l-203.1 42c-13 2.7-25.7-5.7-28.4-18.6s5.7-25.7 18.6-28.4l232-48 232-48c13-2.7 25.7 5.7 28.4 18.6s-5.7 25.7-18.6 28.4L280 147.5V224H416c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V288zm64 0c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16H96zm112 16v64c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16H224c-8.8 0-16 7.2-16 16zm144-16c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16H352z',
    ],
  };
  var faTram = faCableCar;
  var faCloudRain = {
    prefix: 'fas',
    iconName: 'cloud-rain',
    icon: [
      512,
      512,
      [127783, 9926],
      'f73d',
      'M96 320c-53 0-96-43-96-96c0-42.5 27.6-78.6 65.9-91.2C64.7 126.1 64 119.1 64 112C64 50.1 114.1 0 176 0c43.1 0 80.5 24.3 99.2 60c14.7-17.1 36.5-28 60.8-28c44.2 0 80 35.8 80 80c0 5.5-.6 10.8-1.6 16c.5 0 1.1 0 1.6 0c53 0 96 43 96 96s-43 96-96 96H96zm-6.8 52c1.3-2.5 3.9-4 6.8-4s5.4 1.5 6.8 4l35.1 64.6c4.1 7.5 6.2 15.8 6.2 24.3v3c0 26.5-21.5 48-48 48s-48-21.5-48-48v-3c0-8.5 2.1-16.9 6.2-24.3L89.2 372zm160 0c1.3-2.5 3.9-4 6.8-4s5.4 1.5 6.8 4l35.1 64.6c4.1 7.5 6.2 15.8 6.2 24.3v3c0 26.5-21.5 48-48 48s-48-21.5-48-48v-3c0-8.5 2.1-16.9 6.2-24.3L249.2 372zm124.9 64.6L409.2 372c1.3-2.5 3.9-4 6.8-4s5.4 1.5 6.8 4l35.1 64.6c4.1 7.5 6.2 15.8 6.2 24.3v3c0 26.5-21.5 48-48 48s-48-21.5-48-48v-3c0-8.5 2.1-16.9 6.2-24.3z',
    ],
  };
  var faBuildingCircleXmark = {
    prefix: 'fas',
    iconName: 'building-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e4d4',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c15.1 0 28.5-6.9 37.3-17.8C340.4 462.2 320 417.5 320 368c0-54.7 24.9-103.5 64-135.8V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L518.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faShip = {
    prefix: 'fas',
    iconName: 'ship',
    icon: [
      576,
      512,
      [128674],
      'f21a',
      'M192 32c0-17.7 14.3-32 32-32H352c17.7 0 32 14.3 32 32V64h48c26.5 0 48 21.5 48 48V240l44.4 14.8c23.1 7.7 29.5 37.5 11.5 53.9l-101 92.6c-16.2 9.4-34.7 15.1-50.9 15.1c-19.6 0-40.8-7.7-59.2-20.3c-22.1-15.5-51.6-15.5-73.7 0c-17.1 11.8-38 20.3-59.2 20.3c-16.2 0-34.7-5.7-50.9-15.1l-101-92.6c-18-16.5-11.6-46.2 11.5-53.9L96 240V112c0-26.5 21.5-48 48-48h48V32zM160 218.7l107.8-35.9c13.1-4.4 27.3-4.4 40.5 0L416 218.7V128H160v90.7zM306.5 421.9C329 437.4 356.5 448 384 448c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 501.7 417 512 384 512c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 437.2 165.1 448 192 448c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faArrowsDownToLine = {
    prefix: 'fas',
    iconName: 'arrows-down-to-line',
    icon: [
      640,
      512,
      [],
      'e4b8',
      'M576 416L64 416c-17.7 0-32 14.3-32 32s14.3 32 32 32l512 0c17.7 0 32-14.3 32-32s-14.3-32-32-32zm22.6-137.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L512 274.7 512 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 210.7-41.4-41.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0l96-96zm-320-45.3c-12.5-12.5-32.8-12.5-45.3 0L192 274.7 192 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 210.7L86.6 233.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0l96-96c12.5-12.5 12.5-32.8 0-45.3z',
    ],
  };
  var faDownload = {
    prefix: 'fas',
    iconName: 'download',
    icon: [
      512,
      512,
      [],
      'f019',
      'M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V274.7l-73.4-73.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l128-128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L288 274.7V32zM64 352c-35.3 0-64 28.7-64 64v32c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V416c0-35.3-28.7-64-64-64H346.5l-45.3 45.3c-25 25-65.5 25-90.5 0L165.5 352H64zM432 456c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faFaceGrin = {
    prefix: 'fas',
    iconName: 'face-grin',
    icon: [
      512,
      512,
      [128512, 'grin'],
      'f580',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM388.1 312.8c12.3-3.8 24.3 6.9 19.3 18.7C382.4 390.6 324.2 432 256.3 432s-126.2-41.4-151.1-100.5c-5-11.8 7-22.5 19.3-18.7c39.7 12.2 84.5 19 131.8 19s92.1-6.8 131.8-19zM208.4 208c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faGrin = faFaceGrin;
  var faDeleteLeft = {
    prefix: 'fas',
    iconName: 'delete-left',
    icon: [
      576,
      512,
      [9003, 'backspace'],
      'f55a',
      'M576 128c0-35.3-28.7-64-64-64H205.3c-17 0-33.3 6.7-45.3 18.7L9.4 233.4c-6 6-9.4 14.1-9.4 22.6s3.4 16.6 9.4 22.6L160 429.3c12 12 28.3 18.7 45.3 18.7H512c35.3 0 64-28.7 64-64V128zM271 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z',
    ],
  };
  var faBackspace = faDeleteLeft;
  var faEyeDropper = {
    prefix: 'fas',
    iconName: 'eye-dropper',
    icon: [
      512,
      512,
      ['eye-dropper-empty', 'eyedropper'],
      'f1fb',
      'M341.6 29.2L240.1 130.8l-9.4-9.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-9.4-9.4L482.8 170.4c39-39 39-102.2 0-141.1s-102.2-39-141.1 0zM55.4 323.3c-15 15-23.4 35.4-23.4 56.6v42.4L5.4 462.2c-8.5 12.7-6.8 29.6 4 40.4s27.7 12.5 40.4 4L89.7 480h42.4c21.2 0 41.6-8.4 56.6-23.4L309.4 335.9l-45.3-45.3L143.4 411.3c-3 3-7.1 4.7-11.3 4.7H96V379.9c0-4.2 1.7-8.3 4.7-11.3L221.4 247.9l-45.3-45.3L55.4 323.3z',
    ],
  };
  var faEyeDropperEmpty = faEyeDropper;
  var faEyedropper = faEyeDropper;
  var faFileCircleCheck = {
    prefix: 'fas',
    iconName: 'file-circle-check',
    icon: [
      576,
      512,
      [],
      'e5a0',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zM576 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-76.7-43.3c-6.2-6.2-16.4-6.2-22.6 0L416 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faForward = {
    prefix: 'fas',
    iconName: 'forward',
    icon: [
      512,
      512,
      [9193],
      'f04e',
      'M52.5 440.6c-9.5 7.9-22.8 9.7-34.1 4.4S0 428.4 0 416V96C0 83.6 7.2 72.3 18.4 67s24.5-3.6 34.1 4.4L224 214.3V256v41.7L52.5 440.6zM256 352V256 128 96c0-12.4 7.2-23.7 18.4-29s24.5-3.6 34.1 4.4l192 160c7.3 6.1 11.5 15.1 11.5 24.6s-4.2 18.5-11.5 24.6l-192 160c-9.5 7.9-22.8 9.7-34.1 4.4s-18.4-16.6-18.4-29V352z',
    ],
  };
  var faMobile = {
    prefix: 'fas',
    iconName: 'mobile',
    icon: [
      384,
      512,
      [128241, 'mobile-android', 'mobile-phone'],
      'f3ce',
      'M80 0C44.7 0 16 28.7 16 64V448c0 35.3 28.7 64 64 64H304c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H80zm80 432h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H160c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faMobileAndroid = faMobile;
  var faMobilePhone = faMobile;
  var faFaceMeh = {
    prefix: 'fas',
    iconName: 'face-meh',
    icon: [
      512,
      512,
      [128528, 'meh'],
      'f11a',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM176.4 240c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm192-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM160 336H352c8.8 0 16 7.2 16 16s-7.2 16-16 16H160c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faMeh = faFaceMeh;
  var faAlignCenter = {
    prefix: 'fas',
    iconName: 'align-center',
    icon: [
      448,
      512,
      [],
      'f037',
      'M352 64c0-17.7-14.3-32-32-32H128c-17.7 0-32 14.3-32 32s14.3 32 32 32H320c17.7 0 32-14.3 32-32zm96 128c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32zM0 448c0 17.7 14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32zM352 320c0-17.7-14.3-32-32-32H128c-17.7 0-32 14.3-32 32s14.3 32 32 32H320c17.7 0 32-14.3 32-32z',
    ],
  };
  var faBookSkull = {
    prefix: 'fas',
    iconName: 'book-skull',
    icon: [
      448,
      512,
      ['book-dead'],
      'f6b7',
      'M0 96C0 43 43 0 96 0H384h32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32zM320 112c0-35.3-35.8-64-80-64s-80 28.7-80 64c0 20.9 12.6 39.5 32 51.2V176c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V163.2c19.4-11.7 32-30.3 32-51.2zM208 128c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm80-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zM134.3 209.3c-8.1-3.5-17.5 .3-21 8.4s.3 17.5 8.4 21L199.4 272l-77.7 33.3c-8.1 3.5-11.9 12.9-8.4 21s12.9 11.9 21 8.4L240 289.4l105.7 45.3c8.1 3.5 17.5-.3 21-8.4s-.3-17.5-8.4-21L280.6 272l77.7-33.3c8.1-3.5 11.9-12.9 8.4-21s-12.9-11.9-21-8.4L240 254.6 134.3 209.3z',
    ],
  };
  var faBookDead = faBookSkull;
  var faIdCard = {
    prefix: 'fas',
    iconName: 'id-card',
    icon: [
      576,
      512,
      [62147, 'drivers-license'],
      'f2c2',
      'M0 96l576 0c0-35.3-28.7-64-64-64H64C28.7 32 0 60.7 0 96zm0 32V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V128H0zM64 405.3c0-29.5 23.9-53.3 53.3-53.3H234.7c29.5 0 53.3 23.9 53.3 53.3c0 5.9-4.8 10.7-10.7 10.7H74.7c-5.9 0-10.7-4.8-10.7-10.7zM176 320c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64zM352 208c0-8.8 7.2-16 16-16H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16H496c8.8 0 16 7.2 16 16s-7.2 16-16 16H368c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faDriversLicense = faIdCard;
  var faOutdent = {
    prefix: 'fas',
    iconName: 'outdent',
    icon: [
      512,
      512,
      ['dedent'],
      'f03b',
      'M32 64c0-17.7 14.3-32 32-32H448c17.7 0 32 14.3 32 32s-14.3 32-32 32H64C46.3 96 32 81.7 32 64zM224 192c0-17.7 14.3-32 32-32H448c17.7 0 32 14.3 32 32s-14.3 32-32 32H256c-17.7 0-32-14.3-32-32zm32 96H448c17.7 0 32 14.3 32 32s-14.3 32-32 32H256c-17.7 0-32-14.3-32-32s14.3-32 32-32zM32 448c0-17.7 14.3-32 32-32H448c17.7 0 32 14.3 32 32s-14.3 32-32 32H64c-17.7 0-32-14.3-32-32zm.2-179.4c-8.2-6.4-8.2-18.9 0-25.3l101.9-79.3c10.5-8.2 25.8-.7 25.8 12.6V335.3c0 13.3-15.3 20.8-25.8 12.6L32.2 268.6z',
    ],
  };
  var faDedent = faOutdent;
  var faHeartCircleExclamation = {
    prefix: 'fas',
    iconName: 'heart-circle-exclamation',
    icon: [
      576,
      512,
      [],
      'e4fe',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faHouse = {
    prefix: 'fas',
    iconName: 'house',
    icon: [
      576,
      512,
      [127968, 63498, 63500, 'home', 'home-alt', 'home-lg-alt'],
      'f015',
      'M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c0 2.7-.2 5.4-.5 8.1V472c0 22.1-17.9 40-40 40H456c-1.1 0-2.2 0-3.3-.1c-1.4 .1-2.8 .1-4.2 .1H416 392c-22.1 0-40-17.9-40-40V448 384c0-17.7-14.3-32-32-32H256c-17.7 0-32 14.3-32 32v64 24c0 22.1-17.9 40-40 40H160 128.1c-1.5 0-3-.1-4.5-.2c-1.2 .1-2.4 .2-3.6 .2H104c-22.1 0-40-17.9-40-40V360c0-.9 0-1.9 .1-2.8V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L564.8 231.5c8 7 12 15 11 24z',
    ],
  };
  var faHome = faHouse;
  var faHomeAlt = faHouse;
  var faHomeLgAlt = faHouse;
  var faCalendarWeek = {
    prefix: 'fas',
    iconName: 'calendar-week',
    icon: [
      448,
      512,
      [],
      'f784',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16H368c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z',
    ],
  };
  var faLaptopMedical = {
    prefix: 'fas',
    iconName: 'laptop-medical',
    icon: [
      640,
      512,
      [],
      'f812',
      'M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM288 160c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H352v48c0 8.8-7.2 16-16 16H304c-8.8 0-16-7.2-16-16V272H240c-8.8 0-16-7.2-16-16V224c0-8.8 7.2-16 16-16h48V160z',
    ],
  };
  var faB = {
    prefix: 'fas',
    iconName: 'b',
    icon: [
      320,
      512,
      [98],
      '42',
      'M32 32C14.3 32 0 46.3 0 64V256 448c0 17.7 14.3 32 32 32H192c70.7 0 128-57.3 128-128c0-46.5-24.8-87.3-62-109.7c18.7-22.3 30-51 30-82.3c0-70.7-57.3-128-128-128H32zM160 224H64V96h96c35.3 0 64 28.7 64 64s-28.7 64-64 64zM64 288h96 32c35.3 0 64 28.7 64 64s-28.7 64-64 64H64V288z',
    ],
  };
  var faFileMedical = {
    prefix: 'fas',
    iconName: 'file-medical',
    icon: [
      384,
      512,
      [],
      'f477',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM160 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H224v48c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V352H112c-8.8 0-16-7.2-16-16V304c0-8.8 7.2-16 16-16h48V240z',
    ],
  };
  var faDiceOne = {
    prefix: 'fas',
    iconName: 'dice-one',
    icon: [
      448,
      512,
      [9856],
      'f525',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM224 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faKiwiBird = {
    prefix: 'fas',
    iconName: 'kiwi-bird',
    icon: [
      576,
      512,
      [],
      'f535',
      'M291.2 388.4c31.2-18.8 64.7-36.4 101.1-36.4H448c4.6 0 9.1-.2 13.6-.7l85.3 121.9c4 5.7 11.3 8.2 17.9 6.1s11.2-8.3 11.2-15.3V224c0-70.7-57.3-128-128-128H392.3c-36.4 0-69.9-17.6-101.1-36.4C262.3 42.1 228.3 32 192 32C86 32 0 118 0 224c0 71.1 38.6 133.1 96 166.3V456c0 13.3 10.7 24 24 24s24-10.7 24-24V410c15.3 3.9 31.4 6 48 6c5.4 0 10.7-.2 16-.7V456c0 13.3 10.7 24 24 24s24-10.7 24-24V405.1c12.4-4.4 24.2-10 35.2-16.7zM448 248c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faArrowRightArrowLeft = {
    prefix: 'fas',
    iconName: 'arrow-right-arrow-left',
    icon: [
      576,
      512,
      [8644, 'exchange'],
      'f0ec',
      'M422.6 278.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L434.7 176H64c-17.7 0-32-14.3-32-32s14.3-32 32-32H434.7L377.4 54.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l112 112c12.5 12.5 12.5 32.8 0 45.3l-112 112zm-269.3 224l-112-112c-12.5-12.5-12.5-32.8 0-45.3l112-112c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3L141.3 336H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H141.3l57.4 57.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0z',
    ],
  };
  var faExchange = faArrowRightArrowLeft;
  var faRotateRight = {
    prefix: 'fas',
    iconName: 'rotate-right',
    icon: [
      512,
      512,
      ['redo-alt', 'rotate-forward'],
      'f2f9',
      'M463.5 224H472c13.3 0 24-10.7 24-24V72c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2L413.4 96.6c-87.6-86.5-228.7-86.2-315.8 1c-87.5 87.5-87.5 229.3 0 316.8s229.3 87.5 316.8 0c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0c-62.5 62.5-163.8 62.5-226.3 0s-62.5-163.8 0-226.3c62.2-62.2 162.7-62.5 225.3-1L327 183c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H463.5z',
    ],
  };
  var faRedoAlt = faRotateRight;
  var faRotateForward = faRotateRight;
  var faUtensils = {
    prefix: 'fas',
    iconName: 'utensils',
    icon: [
      448,
      512,
      [127860, 61685, 'cutlery'],
      'f2e7',
      'M416 0C400 0 288 32 288 176V288c0 35.3 28.7 64 64 64h32V480c0 17.7 14.3 32 32 32s32-14.3 32-32V352 240 32c0-17.7-14.3-32-32-32zM64 16C64 7.8 57.9 1 49.7 .1S34.2 4.6 32.4 12.5L2.1 148.8C.7 155.1 0 161.5 0 167.9c0 45.9 35.1 83.6 80 87.7V480c0 17.7 14.3 32 32 32s32-14.3 32-32V255.6c44.9-4.1 80-41.8 80-87.7c0-6.4-.7-12.8-2.1-19.1L191.6 12.5c-1.8-8-9.3-13.3-17.4-12.4S160 7.8 160 16V150.2c0 5.4-4.4 9.8-9.8 9.8c-5.1 0-9.3-3.9-9.8-9L127.9 14.6C127.2 6.3 120.3 0 112 0s-15.2 6.3-15.9 14.6L83.7 151c-.5 5.1-4.7 9-9.8 9c-5.4 0-9.8-4.4-9.8-9.8V16zm48.3 152l-.3 0-.3 0 .3-.7 .3 .7z',
    ],
  };
  var faCutlery = faUtensils;
  var faArrowUpWideShort = {
    prefix: 'fas',
    iconName: 'arrow-up-wide-short',
    icon: [
      576,
      512,
      ['sort-amount-up'],
      'f161',
      'M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faSortAmountUp = faArrowUpWideShort;
  var faMillSign = {
    prefix: 'fas',
    iconName: 'mill-sign',
    icon: [
      384,
      512,
      [],
      'e1ed',
      'M302.1 42.8c5.9-16.6-2.7-35-19.4-40.9s-35 2.7-40.9 19.4L208 116.1c-5.7 4-11.1 8.5-16 13.5C171.7 108.9 143.3 96 112 96c-19.5 0-37.8 5-53.7 13.7C52.5 101.4 42.9 96 32 96C14.3 96 0 110.3 0 128v80V416c0 17.7 14.3 32 32 32s32-14.3 32-32V208c0-26.5 21.5-48 48-48s48 21.5 48 48v42.5L81.9 469.2c-5.9 16.6 2.7 35 19.4 40.9s35-2.7 40.9-19.4l21.4-60C168.9 441 179.6 448 192 448c17.7 0 32-14.3 32-32V261.5l35.7-100c3.9-1 8.1-1.6 12.3-1.6c26.5 0 48 21.5 48 48V416c0 17.7 14.3 32 32 32s32-14.3 32-32V208c0-58.2-44.3-106-101.1-111.5l19.2-53.8z',
    ],
  };
  var faBowlRice = {
    prefix: 'fas',
    iconName: 'bowl-rice',
    icon: [
      512,
      512,
      [],
      'e2eb',
      'M176 56c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H200c-13.3 0-24-10.7-24-24zm24 48h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H200c-13.3 0-24-10.7-24-24s10.7-24 24-24zM56 176H72c13.3 0 24 10.7 24 24s-10.7 24-24 24H56c-13.3 0-24-10.7-24-24s10.7-24 24-24zM0 283.4C0 268.3 12.3 256 27.4 256H484.6c15.1 0 27.4 12.3 27.4 27.4c0 70.5-44.4 130.7-106.7 154.1L403.5 452c-2 16-15.6 28-31.8 28H140.2c-16.1 0-29.8-12-31.8-28l-1.8-14.4C44.4 414.1 0 353.9 0 283.4zM224 200c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H248c-13.3 0-24-10.7-24-24zm-96 0c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H152c-13.3 0-24-10.7-24-24zm-24-96h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H104c-13.3 0-24-10.7-24-24s10.7-24 24-24zm216 96c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H344c-13.3 0-24-10.7-24-24zm-24-96h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H296c-13.3 0-24-10.7-24-24s10.7-24 24-24zm120 96c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H440c-13.3 0-24-10.7-24-24zm-24-96h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H392c-13.3 0-24-10.7-24-24s10.7-24 24-24zM296 32h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H296c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faSkull = {
    prefix: 'fas',
    iconName: 'skull',
    icon: [
      512,
      512,
      [128128],
      'f54c',
      'M416 398.9c58.5-41.1 96-104.1 96-174.9C512 100.3 397.4 0 256 0S0 100.3 0 224c0 70.7 37.5 133.8 96 174.9c0 .4 0 .7 0 1.1v64c0 26.5 21.5 48 48 48h48V464c0-8.8 7.2-16 16-16s16 7.2 16 16v48h64V464c0-8.8 7.2-16 16-16s16 7.2 16 16v48h48c26.5 0 48-21.5 48-48V400c0-.4 0-.7 0-1.1zM224 256c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm128 64c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faTowerBroadcast = {
    prefix: 'fas',
    iconName: 'tower-broadcast',
    icon: [
      576,
      512,
      ['broadcast-tower'],
      'f519',
      'M80.3 44C69.8 69.9 64 98.2 64 128s5.8 58.1 16.3 84c6.6 16.4-1.3 35-17.7 41.7s-35-1.3-41.7-17.7C7.4 202.6 0 166.1 0 128S7.4 53.4 20.9 20C27.6 3.6 46.2-4.3 62.6 2.3S86.9 27.6 80.3 44zM555.1 20C568.6 53.4 576 89.9 576 128s-7.4 74.6-20.9 108c-6.6 16.4-25.3 24.3-41.7 17.7S489.1 228.4 495.7 212c10.5-25.9 16.3-54.2 16.3-84s-5.8-58.1-16.3-84C489.1 27.6 497 9 513.4 2.3s35 1.3 41.7 17.7zM352 128c0 23.7-12.9 44.4-32 55.4V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V183.4c-19.1-11.1-32-31.7-32-55.4c0-35.3 28.7-64 64-64s64 28.7 64 64zM170.6 76.8C163.8 92.4 160 109.7 160 128s3.8 35.6 10.6 51.2c7.1 16.2-.3 35.1-16.5 42.1s-35.1-.3-42.1-16.5c-10.3-23.6-16-49.6-16-76.8s5.7-53.2 16-76.8c7.1-16.2 25.9-23.6 42.1-16.5s23.6 25.9 16.5 42.1zM464 51.2c10.3 23.6 16 49.6 16 76.8s-5.7 53.2-16 76.8c-7.1 16.2-25.9 23.6-42.1 16.5s-23.6-25.9-16.5-42.1c6.8-15.6 10.6-32.9 10.6-51.2s-3.8-35.6-10.6-51.2c-7.1-16.2 .3-35.1 16.5-42.1s35.1 .3 42.1 16.5z',
    ],
  };
  var faBroadcastTower = faTowerBroadcast;
  var faTruckPickup = {
    prefix: 'fas',
    iconName: 'truck-pickup',
    icon: [
      640,
      512,
      [128763],
      'f63c',
      'M368.6 96l76.8 96H288V96h80.6zM224 80V192H64c-17.7 0-32 14.3-32 32v64c-17.7 0-32 14.3-32 32s14.3 32 32 32H65.1c-.7 5.2-1.1 10.6-1.1 16c0 61.9 50.1 112 112 112s112-50.1 112-112c0-5.4-.4-10.8-1.1-16h66.3c-.7 5.2-1.1 10.6-1.1 16c0 61.9 50.1 112 112 112s112-50.1 112-112c0-5.4-.4-10.8-1.1-16H608c17.7 0 32-14.3 32-32s-14.3-32-32-32V224c0-17.7-14.3-32-32-32H527.4L418.6 56c-12.1-15.2-30.5-24-50-24H272c-26.5 0-48 21.5-48 48zM128 368c0-26.5 21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48zm288 0c0-26.5 21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48z',
    ],
  };
  var faUpLong = {
    prefix: 'fas',
    iconName: 'up-long',
    icon: [
      320,
      512,
      ['long-arrow-alt-up'],
      'f30c',
      'M318 177.5c3.8-8.8 2-19-4.6-26l-136-144C172.9 2.7 166.6 0 160 0s-12.9 2.7-17.4 7.5l-136 144c-6.6 7-8.4 17.2-4.6 26S14.4 192 24 192h88l0 288c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32l0-288h88c9.6 0 18.2-5.7 22-14.5z',
    ],
  };
  var faLongArrowAltUp = faUpLong;
  var faStop = {
    prefix: 'fas',
    iconName: 'stop',
    icon: [
      384,
      512,
      [9209],
      'f04d',
      'M0 128C0 92.7 28.7 64 64 64H320c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128z',
    ],
  };
  var faCodeMerge = {
    prefix: 'fas',
    iconName: 'code-merge',
    icon: [
      448,
      512,
      [],
      'f387',
      'M80 104c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm32.4 49.2c28-12.4 47.6-40.5 47.6-73.2c0-44.2-35.8-80-80-80S0 35.8 0 80c0 32.8 19.7 61 48 73.3V358.7C19.7 371 0 399.2 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-32.8-19.7-61-48-73.3V272c26.7 20.1 60 32 96 32h86.7c12.3 28.3 40.5 48 73.3 48c44.2 0 80-35.8 80-80s-35.8-80-80-80c-32.8 0-61 19.7-73.3 48H208c-49.9 0-91-38.1-95.6-86.8zM80 456c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zM392 272c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faUpload = {
    prefix: 'fas',
    iconName: 'upload',
    icon: [
      512,
      512,
      [],
      'f093',
      'M288 109.3V352c0 17.7-14.3 32-32 32s-32-14.3-32-32V109.3l-73.4 73.4c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l128-128c12.5-12.5 32.8-12.5 45.3 0l128 128c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L288 109.3zM64 352H192c0 35.3 28.7 64 64 64s64-28.7 64-64H448c35.3 0 64 28.7 64 64v32c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V416c0-35.3 28.7-64 64-64zM432 456c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faHurricane = {
    prefix: 'fas',
    iconName: 'hurricane',
    icon: [
      384,
      512,
      [],
      'f751',
      'M0 208C0 104.4 75.7 18.5 174.9 2.6C184 1.2 192 8.6 192 17.9V81.2c0 8.4 6.5 15.3 14.7 16.5C307 112.5 384 199 384 303.4c0 103.6-75.7 189.5-174.9 205.4c-9.2 1.5-17.1-5.9-17.1-15.2V430.2c0-8.4-6.5-15.3-14.7-16.5C77 398.9 0 312.4 0 208zm288 48c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96zm-96 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faMound = {
    prefix: 'fas',
    iconName: 'mound',
    icon: [
      576,
      512,
      [],
      'e52d',
      'M144.1 179.2C173.8 127.7 228.6 96 288 96s114.2 31.7 143.9 83.2L540.4 368c12.3 21.3-3.1 48-27.7 48H63.3c-24.6 0-40-26.6-27.7-48L144.1 179.2z',
    ],
  };
  var faToiletPortable = {
    prefix: 'fas',
    iconName: 'toilet-portable',
    icon: [
      320,
      512,
      [],
      'e583',
      'M0 32V64H320V32c0-17.7-14.3-32-32-32H32C14.3 0 0 14.3 0 32zM24 96H0v24V488c0 13.3 10.7 24 24 24s24-10.7 24-24v-8H272v8c0 13.3 10.7 24 24 24s24-10.7 24-24V120 96H296 24zM256 240v64c0 8.8-7.2 16-16 16s-16-7.2-16-16V240c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faCompactDisc = {
    prefix: 'fas',
    iconName: 'compact-disc',
    icon: [
      512,
      512,
      [128191, 128192, 128440],
      'f51f',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 224c17.7 0 32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32zm-96 32c0 53 43 96 96 96s96-43 96-96s-43-96-96-96s-96 43-96 96zM96 240c0-35 17.5-71.1 45.2-98.8S205 96 240 96c8.8 0 16-7.2 16-16s-7.2-16-16-16c-45.4 0-89.2 22.3-121.5 54.5S64 194.6 64 240c0 8.8 7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faFileArrowDown = {
    prefix: 'fas',
    iconName: 'file-arrow-down',
    icon: [
      384,
      512,
      ['file-download'],
      'f56d',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM216 232V334.1l31-31c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-72 72c-9.4 9.4-24.6 9.4-33.9 0l-72-72c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l31 31V232c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faFileDownload = faFileArrowDown;
  var faCaravan = {
    prefix: 'fas',
    iconName: 'caravan',
    icon: [
      640,
      512,
      [],
      'f8ff',
      'M0 112C0 67.8 35.8 32 80 32H416c88.4 0 160 71.6 160 160V352h32c17.7 0 32 14.3 32 32s-14.3 32-32 32l-32 0H288c0 53-43 96-96 96s-96-43-96-96H80c-44.2 0-80-35.8-80-80V112zM320 352H448V256H416c-8.8 0-16-7.2-16-16s7.2-16 16-16h32V160c0-17.7-14.3-32-32-32H352c-17.7 0-32 14.3-32 32V352zM96 128c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H224c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H96zm96 336c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faShieldCat = {
    prefix: 'fas',
    iconName: 'shield-cat',
    icon: [
      512,
      512,
      [],
      'e572',
      'M269.4 2.9C265.2 1 260.7 0 256 0s-9.2 1-13.4 2.9L54.3 82.8c-22 9.3-38.4 31-38.3 57.2c.5 99.2 41.3 280.7 213.6 363.2c16.7 8 36.1 8 52.8 0C454.7 420.7 495.5 239.2 496 140c.1-26.2-16.3-47.9-38.3-57.2L269.4 2.9zM160 154.4c0-5.8 4.7-10.4 10.4-10.4h.2c3.4 0 6.5 1.6 8.5 4.3l40 53.3c3 4 7.8 6.4 12.8 6.4h48c5 0 9.8-2.4 12.8-6.4l40-53.3c2-2.7 5.2-4.3 8.5-4.3h.2c5.8 0 10.4 4.7 10.4 10.4V272c0 53-43 96-96 96s-96-43-96-96V154.4zM216 288c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16zm96-16c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faBolt = {
    prefix: 'fas',
    iconName: 'bolt',
    icon: [
      448,
      512,
      [9889, 'zap'],
      'f0e7',
      'M349.4 44.6c5.9-13.7 1.5-29.7-10.6-38.5s-28.6-8-39.9 1.8l-256 224c-10 8.8-13.6 22.9-8.9 35.3S50.7 288 64 288H175.5L98.6 467.4c-5.9 13.7-1.5 29.7 10.6 38.5s28.6 8 39.9-1.8l256-224c10-8.8 13.6-22.9 8.9-35.3s-16.6-20.7-30-20.7H272.5L349.4 44.6z',
    ],
  };
  var faZap = faBolt;
  var faGlassWater = {
    prefix: 'fas',
    iconName: 'glass-water',
    icon: [
      448,
      512,
      [],
      'e4f4',
      'M64 0C55.1 0 46.6 3.7 40.6 10.2s-9.1 15.2-8.5 24.1L60.9 437.7c3 41.9 37.8 74.3 79.8 74.3H307.3c42 0 76.8-32.4 79.8-74.3L415.9 34.3c.6-8.9-2.4-17.6-8.5-24.1S392.9 0 384 0H64zm41 156.5L98.4 64H349.6L343 156.5l-24.2 12.1c-19.4 9.7-42.2 9.7-61.6 0c-20.9-10.4-45.5-10.4-66.4 0c-19.4 9.7-42.2 9.7-61.6 0L105 156.5z',
    ],
  };
  var faOilWell = {
    prefix: 'fas',
    iconName: 'oil-well',
    icon: [
      576,
      512,
      [],
      'e532',
      'M528.3 61.3c-11.4-42.7-55.3-68-98-56.6L414.9 8.8C397.8 13.4 387.7 31 392.3 48l24.5 91.4L308.5 167.5l-6.3-18.1C297.7 136.6 285.6 128 272 128s-25.7 8.6-30.2 21.4l-13.6 39L96 222.6V184c0-13.3-10.7-24-24-24s-24 10.7-24 24V448H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H406.7L340 257.5l-62.2 16.1L305.3 352H238.7L265 277l-74.6 19.3L137.3 448H96V288.8l337.4-87.5 25.2 94c4.6 17.1 22.1 27.2 39.2 22.6l15.5-4.1c42.7-11.4 68-55.3 56.6-98L528.3 61.3zM205.1 448l11.2-32H327.7l11.2 32H205.1z',
    ],
  };
  var faVault = {
    prefix: 'fas',
    iconName: 'vault',
    icon: [
      576,
      512,
      [],
      'e2c5',
      'M64 0C28.7 0 0 28.7 0 64V416c0 35.3 28.7 64 64 64H80l16 32h64l16-32H400l16 32h64l16-32h16c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM224 320c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zm0 80c-88.4 0-160-71.6-160-160s71.6-160 160-160s160 71.6 160 160s-71.6 160-160 160zM480 221.3V336c0 8.8-7.2 16-16 16s-16-7.2-16-16V221.3c-18.6-6.6-32-24.4-32-45.3c0-26.5 21.5-48 48-48s48 21.5 48 48c0 20.9-13.4 38.7-32 45.3z',
    ],
  };
  var faMars = {
    prefix: 'fas',
    iconName: 'mars',
    icon: [
      448,
      512,
      [9794],
      'f222',
      'M289.8 46.8c3.7-9 12.5-14.8 22.2-14.8H424c13.3 0 24 10.7 24 24V168c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-33.4-33.4L321 204.2c19.5 28.4 31 62.7 31 99.8c0 97.2-78.8 176-176 176S0 401.2 0 304s78.8-176 176-176c37 0 71.4 11.4 99.8 31l52.6-52.6L295 73c-6.9-6.9-8.9-17.2-5.2-26.2zM400 80l0 0h0v0zM176 416c61.9 0 112-50.1 112-112s-50.1-112-112-112s-112 50.1-112 112s50.1 112 112 112z',
    ],
  };
  var faToilet = {
    prefix: 'fas',
    iconName: 'toilet',
    icon: [
      448,
      512,
      [128701],
      'f7d8',
      'M24 0C10.7 0 0 10.7 0 24S10.7 48 24 48h8V196.9c-1.9 1.4-3.8 2.9-5.6 4.4C10.9 214.5 0 232.9 0 256c0 46.9 14.3 84.1 37 112.5c14.2 17.7 31.1 31.3 48.5 41.8L65.6 469.9c-3.3 9.8-1.6 20.5 4.4 28.8s15.7 13.3 26 13.3H352c10.3 0 19.9-4.9 26-13.3s7.7-19.1 4.4-28.8l-19.8-59.5c17.4-10.5 34.3-24.1 48.5-41.8c22.7-28.4 37-65.5 37-112.5c0-23.1-10.9-41.5-26.4-54.6c-1.8-1.5-3.7-3-5.6-4.4V48h8c13.3 0 24-10.7 24-24s-10.7-24-24-24H24zM384 256.3c0 1-.3 2.6-3.8 5.6c-4.8 4.1-14 9-29.3 13.4C320.5 284 276.1 288 224 288s-96.5-4-126.9-12.8c-15.3-4.4-24.5-9.3-29.3-13.4c-3.5-3-3.8-4.6-3.8-5.6l0-.3 0-.1c0-1 0-2.5 3.8-5.8c4.8-4.1 14-9 29.3-13.4C127.5 228 171.9 224 224 224s96.5 4 126.9 12.8c15.3 4.4 24.5 9.3 29.3 13.4c3.8 3.2 3.8 4.8 3.8 5.8l0 .1 0 .3zM328.2 384l-.2 .5 0-.5h.2zM112 64h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faPlaneCircleXmark = {
    prefix: 'fas',
    iconName: 'plane-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e557',
      'M256 0c-35 0-64 59.5-64 93.7v84.6L8.1 283.4c-5 2.8-8.1 8.2-8.1 13.9v65.5c0 10.6 10.2 18.3 20.4 15.4l171.6-49 0 70.9-57.6 43.2c-4 3-6.4 7.8-6.4 12.8v42c0 7.8 6.3 14 14 14c1.3 0 2.6-.2 3.9-.5L256 480l110.1 31.5c1.3 .4 2.6 .5 3.9 .5c6 0 11.1-3.7 13.1-9C344.5 470.7 320 422.2 320 368c0-60.6 30.6-114 77.1-145.6L320 178.3V93.7C320 59.5 292 0 256 0zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L518.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faYenSign = {
    prefix: 'fas',
    iconName: 'yen-sign',
    icon: [
      320,
      512,
      [165, 'cny', 'jpy', 'rmb', 'yen'],
      'f157',
      'M58.6 46.2C48.8 31.5 29 27.6 14.2 37.4S-4.4 67 5.4 81.7L100.2 224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32h80v32H48c-17.7 0-32 14.3-32 32s14.3 32 32 32h80v64c0 17.7 14.3 32 32 32s32-14.3 32-32V384h80c17.7 0 32-14.3 32-32s-14.3-32-32-32H192V288h80c17.7 0 32-14.3 32-32s-14.3-32-32-32H219.8L314.6 81.7c9.8-14.7 5.8-34.6-8.9-44.4s-34.6-5.8-44.4 8.9L160 198.3 58.6 46.2z',
    ],
  };
  var faCny = faYenSign;
  var faJpy = faYenSign;
  var faRmb = faYenSign;
  var faYen = faYenSign;
  var faRubleSign = {
    prefix: 'fas',
    iconName: 'ruble-sign',
    icon: [
      384,
      512,
      [8381, 'rouble', 'rub', 'ruble'],
      'f158',
      'M96 32C78.3 32 64 46.3 64 64V256H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64v32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64v32c0 17.7 14.3 32 32 32s32-14.3 32-32V416H288c17.7 0 32-14.3 32-32s-14.3-32-32-32H128V320H240c79.5 0 144-64.5 144-144s-64.5-144-144-144H96zM240 256H128V96H240c44.2 0 80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faRouble = faRubleSign;
  var faRub = faRubleSign;
  var faRuble = faRubleSign;
  var faSun = {
    prefix: 'fas',
    iconName: 'sun',
    icon: [
      512,
      512,
      [9728],
      'f185',
      'M361.5 1.2c5 2.1 8.6 6.6 9.6 11.9L391 121l107.9 19.8c5.3 1 9.8 4.6 11.9 9.6s1.5 10.7-1.6 15.2L446.9 256l62.3 90.3c3.1 4.5 3.7 10.2 1.6 15.2s-6.6 8.6-11.9 9.6L391 391 371.1 498.9c-1 5.3-4.6 9.8-9.6 11.9s-10.7 1.5-15.2-1.6L256 446.9l-90.3 62.3c-4.5 3.1-10.2 3.7-15.2 1.6s-8.6-6.6-9.6-11.9L121 391 13.1 371.1c-5.3-1-9.8-4.6-11.9-9.6s-1.5-10.7 1.6-15.2L65.1 256 2.8 165.7c-3.1-4.5-3.7-10.2-1.6-15.2s6.6-8.6 11.9-9.6L121 121 140.9 13.1c1-5.3 4.6-9.8 9.6-11.9s10.7-1.5 15.2 1.6L256 65.1 346.3 2.8c4.5-3.1 10.2-3.7 15.2-1.6zM352 256c0 53-43 96-96 96s-96-43-96-96s43-96 96-96s96 43 96 96zm32 0c0-70.7-57.3-128-128-128s-128 57.3-128 128s57.3 128 128 128s128-57.3 128-128z',
    ],
  };
  var faGuitar = {
    prefix: 'fas',
    iconName: 'guitar',
    icon: [
      512,
      512,
      [],
      'f7a6',
      'M465 7c-9.4-9.4-24.6-9.4-33.9 0L383 55c-2.4 2.4-4.3 5.3-5.5 8.5l-15.4 41-77.5 77.6c-45.1-29.4-99.3-30.2-131 1.6c-11 11-18 24.6-21.4 39.6c-3.7 16.6-19.1 30.7-36.1 31.6c-25.6 1.3-49.3 10.7-67.3 28.6C-16 328.4-7.6 409.4 47.5 464.5s136.1 63.5 180.9 18.7c17.9-17.9 27.4-41.7 28.6-67.3c.9-17 15-32.3 31.6-36.1c15-3.4 28.6-10.5 39.6-21.4c31.8-31.8 31-85.9 1.6-131l77.6-77.6 41-15.4c3.2-1.2 6.1-3.1 8.5-5.5l48-48c9.4-9.4 9.4-24.6 0-33.9L465 7zM208 352c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faFaceLaughWink = {
    prefix: 'fas',
    iconName: 'face-laugh-wink',
    icon: [
      512,
      512,
      ['laugh-wink'],
      'f59c',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM96.8 314.1c-3.8-13.7 7.4-26.1 21.6-26.1H393.6c14.2 0 25.5 12.4 21.6 26.1C396.2 382 332.1 432 256 432s-140.2-50-159.2-117.9zM208.4 192c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm92.4 25.6c-5.3 7.1-15.3 8.5-22.4 3.2s-8.5-15.3-3.2-22.4c30.4-40.5 91.2-40.5 121.6 0c5.3 7.1 3.9 17.1-3.2 22.4s-17.1 3.9-22.4-3.2c-17.6-23.5-52.8-23.5-70.4 0z',
    ],
  };
  var faLaughWink = faFaceLaughWink;
  var faHorseHead = {
    prefix: 'fas',
    iconName: 'horse-head',
    icon: [
      512,
      512,
      [],
      'f7ab',
      'M0 464V316.9C0 208.5 68.3 111.8 170.5 75.6L340.2 15.5C361.6 7.9 384 23.8 384 46.4c0 11-5.5 21.2-14.6 27.3L336 96c48.1 0 91.2 29.8 108.1 74.9l48.6 129.5c11.8 31.4 4.1 66.8-19.6 90.5c-16 16-37.8 25.1-60.5 25.1h-3.4c-26.1 0-50.9-11.6-67.6-31.7l-32.3-38.7c-11.7 4.1-24.2 6.4-37.3 6.4l-.1 0 0 0c-6.3 0-12.5-.5-18.6-1.5c-3.6-.6-7.2-1.4-10.7-2.3l0 0c-28.9-7.8-53.1-26.8-67.8-52.2c-4.4-7.6-14.2-10.3-21.9-5.8s-10.3 14.2-5.8 21.9c24 41.5 68.3 70 119.3 71.9l47.2 70.8c4 6.1 6.2 13.2 6.2 20.4c0 20.3-16.5 36.8-36.8 36.8H48c-26.5 0-48-21.5-48-48zM328 224c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24z',
    ],
  };
  var faBoreHole = {
    prefix: 'fas',
    iconName: 'bore-hole',
    icon: [
      512,
      512,
      [],
      'e4c3',
      'M256 0c-17.7 0-32 14.3-32 32V296.6c-19.1 11.1-32 31.7-32 55.4c0 35.3 28.7 64 64 64s64-28.7 64-64c0-23.7-12.9-44.4-32-55.4V32c0-17.7-14.3-32-32-32zM48 128c-26.5 0-48 21.5-48 48V464c0 26.5 21.5 48 48 48H464c26.5 0 48-21.5 48-48V176c0-26.5-21.5-48-48-48H352V352c0 53-43 96-96 96s-96-43-96-96V128H48z',
    ],
  };
  var faIndustry = {
    prefix: 'fas',
    iconName: 'industry',
    icon: [
      512,
      512,
      [],
      'f275',
      'M32 32C14.3 32 0 46.3 0 64V304v48 80c0 26.5 21.5 48 48 48H464c26.5 0 48-21.5 48-48V304 152.2c0-18.2-19.4-29.7-35.4-21.1L320 215.4V152.2c0-18.2-19.4-29.7-35.4-21.1L128 215.4V64c0-17.7-14.3-32-32-32H32z',
    ],
  };
  var faCircleDown = {
    prefix: 'fas',
    iconName: 'circle-down',
    icon: [
      512,
      512,
      [61466, 'arrow-alt-circle-down'],
      'f358',
      'M256 0C114.6 0 0 114.6 0 256S114.6 512 256 512s256-114.6 256-256S397.4 0 256 0zM244.7 395.3l-112-112c-4.6-4.6-5.9-11.5-3.5-17.4s8.3-9.9 14.8-9.9l64 0 0-96c0-17.7 14.3-32 32-32l32 0c17.7 0 32 14.3 32 32l0 96 64 0c6.5 0 12.3 3.9 14.8 9.9s1.1 12.9-3.5 17.4l-112 112c-6.2 6.2-16.4 6.2-22.6 0z',
    ],
  };
  var faArrowAltCircleDown = faCircleDown;
  var faArrowsTurnToDots = {
    prefix: 'fas',
    iconName: 'arrows-turn-to-dots',
    icon: [
      512,
      512,
      [],
      'e4c1',
      'M249.4 25.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3L269.3 96 416 96c53 0 96 43 96 96v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7-14.3-32-32-32l-146.7 0 25.4 25.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0l-80-80c-12.5-12.5-12.5-32.8 0-45.3l80-80zm13.3 256l80 80c12.5 12.5 12.5 32.8 0 45.3l-80 80c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L242.7 416 96 416c-17.7 0-32 14.3-32 32v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V448c0-53 43-96 96-96l146.7 0-25.4-25.4c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0zM512 384c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM64 64c35.3 0 64 28.7 64 64s-28.7 64-64 64s-64-28.7-64-64S28.7 64 64 64z',
    ],
  };
  var faFlorinSign = {
    prefix: 'fas',
    iconName: 'florin-sign',
    icon: [
      384,
      512,
      [],
      'e184',
      'M314.7 32c-38.8 0-73.7 23.3-88.6 59.1L170.7 224H64c-17.7 0-32 14.3-32 32s14.3 32 32 32h80L98.9 396.3c-5 11.9-16.6 19.7-29.5 19.7H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H69.3c38.8 0 73.7-23.3 88.6-59.1L213.3 288H320c17.7 0 32-14.3 32-32s-14.3-32-32-32H240l45.1-108.3c5-11.9 16.6-19.7 29.5-19.7H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H314.7z',
    ],
  };
  var faArrowDownShortWide = {
    prefix: 'fas',
    iconName: 'arrow-down-short-wide',
    icon: [
      576,
      512,
      ['sort-amount-desc', 'sort-amount-down-alt'],
      'f884',
      'M151.6 469.6C145.5 476.2 137 480 128 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L96 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H320c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 128h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H320c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 128H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320c-17.7 0-32-14.3-32-32s14.3-32 32-32zm0 128H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H320c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faSortAmountDesc = faArrowDownShortWide;
  var faSortAmountDownAlt = faArrowDownShortWide;
  var faLessThan = {
    prefix: 'fas',
    iconName: 'less-than',
    icon: [
      384,
      512,
      [62774],
      '3c',
      'M380.6 81.7c7.9 15.8 1.5 35-14.3 42.9L103.6 256 366.3 387.4c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3l-320-160C6.8 279.2 0 268.1 0 256s6.8-23.2 17.7-28.6l320-160c15.8-7.9 35-1.5 42.9 14.3z',
    ],
  };
  var faAngleDown = {
    prefix: 'fas',
    iconName: 'angle-down',
    icon: [
      448,
      512,
      [8964],
      'f107',
      'M201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z',
    ],
  };
  var faCarTunnel = {
    prefix: 'fas',
    iconName: 'car-tunnel',
    icon: [
      512,
      512,
      [],
      'e4de',
      'M256 0C114.6 0 0 114.6 0 256V448c0 35.3 28.7 64 64 64h64H384h64c35.3 0 64-28.7 64-64V256C512 114.6 397.4 0 256 0zM384 512c-17.7 0-32-14.3-32-32V448H160v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V376c0-20.8 11.3-38.9 28.1-48.6l21-64.7c7.5-23.1 29-38.7 53.3-38.7H313.6c24.3 0 45.8 15.6 53.3 38.7l21 64.7c16.8 9.7 28.2 27.8 28.2 48.6V480c0 17.7-14.3 32-32 32zM190.8 277.5L177 320H335l-13.8-42.5c-1.1-3.3-4.1-5.5-7.6-5.5H198.4c-3.5 0-6.5 2.2-7.6 5.5zM168 408c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm200-24c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faHeadSideCough = {
    prefix: 'fas',
    iconName: 'head-side-cough',
    icon: [
      640,
      512,
      [],
      'e061',
      'M0 201.7C0 90.3 90.3 0 201.7 0H224c95.2 0 174.2 69.3 189.4 160.1c2.2 13 6.7 25.7 15 36.1l42 52.6c6.2 7.8 9.6 17.4 9.6 27.4c0 24.2-19.6 43.8-43.8 43.8H416v32H352c-17.7 0-32 14.3-32 32s14.3 32 32 32h64c0 35.3-28.7 64-64 64H288c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V375.8c0-17-7.1-33-17.5-46.4C18.3 293.2 0 246.5 0 201.7zM336 224c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm272 88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm-40 24c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm-64 48c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm128 0c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM608 504c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm-40-72c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faGripLines = {
    prefix: 'fas',
    iconName: 'grip-lines',
    icon: [
      448,
      512,
      [],
      'f7a4',
      'M32 288c-17.7 0-32 14.3-32 32s14.3 32 32 32l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L32 288zm0-128c-17.7 0-32 14.3-32 32s14.3 32 32 32l384 0c17.7 0 32-14.3 32-32s-14.3-32-32-32L32 160z',
    ],
  };
  var faThumbsDown = {
    prefix: 'fas',
    iconName: 'thumbs-down',
    icon: [
      512,
      512,
      [128078, 61576],
      'f165',
      'M313.4 479.1c26-5.2 42.9-30.5 37.7-56.5l-2.3-11.4c-5.3-26.7-15.1-52.1-28.8-75.2H464c26.5 0 48-21.5 48-48c0-25.3-19.5-46-44.3-47.9c7.7-8.5 12.3-19.8 12.3-32.1c0-23.4-16.8-42.9-38.9-47.1c4.4-7.3 6.9-15.8 6.9-24.9c0-21.3-13.9-39.4-33.1-45.6c.7-3.3 1.1-6.8 1.1-10.4c0-26.5-21.5-48-48-48H294.5c-19 0-37.5 5.6-53.3 16.1L202.7 73.8C176 91.6 160 121.6 160 153.7V192v48 24.9c0 29.2 13.3 56.7 36 75l7.4 5.9c26.5 21.2 44.6 51 51.2 84.2l2.3 11.4c5.2 26 30.5 42.9 56.5 37.7zM32 320H96c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64V288c0 17.7 14.3 32 32 32z',
    ],
  };
  var faUserLock = {
    prefix: 'fas',
    iconName: 'user-lock',
    icon: [
      640,
      512,
      [],
      'f502',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H392.6c-5.4-9.4-8.6-20.3-8.6-32V352c0-2.1 .1-4.2 .3-6.3c-31-26-71-41.7-114.6-41.7H178.3zM528 240c17.7 0 32 14.3 32 32v48H496V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faArrowRightLong = {
    prefix: 'fas',
    iconName: 'arrow-right-long',
    icon: [
      512,
      512,
      ['long-arrow-right'],
      'f178',
      'M502.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l370.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128z',
    ],
  };
  var faLongArrowRight = faArrowRightLong;
  var faAnchorCircleXmark = {
    prefix: 'fas',
    iconName: 'anchor-circle-xmark',
    icon: [
      640,
      512,
      [],
      'e4ac',
      'M256 96c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm85.1 80C367 158.8 384 129.4 384 96c0-53-43-96-96-96s-96 43-96 96c0 33.4 17 62.8 42.9 80H224c-17.7 0-32 14.3-32 32s14.3 32 32 32h32V448H208c-53 0-96-43-96-96v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97 263c-9.4-9.4-24.6-9.4-33.9 0L7 319c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 88.4 71.6 160 160 160h80 80c8.2 0 16.3-.6 24.2-1.8c-22.2-16.2-40.4-37.5-53-62.2H320V368 240h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H341.1zM496 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L518.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L496 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L473.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L496 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faEllipsis = {
    prefix: 'fas',
    iconName: 'ellipsis',
    icon: [
      448,
      512,
      ['ellipsis-h'],
      'f141',
      'M120 256c0 30.9-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56zm160 0c0 30.9-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56zm104 56c-30.9 0-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56s-25.1 56-56 56z',
    ],
  };
  var faEllipsisH = faEllipsis;
  var faChessPawn = {
    prefix: 'fas',
    iconName: 'chess-pawn',
    icon: [
      320,
      512,
      [9823],
      'f443',
      'M264 136c0 37.1-19.4 69.6-48.6 88H224c17.7 0 32 14.3 32 32s-14.3 32-32 32c0 96 24 128 24 128H72s24-32 24-128c-17.7 0-32-14.3-32-32s14.3-32 32-32h8.5C75.4 205.6 56 173.1 56 136C56 78.6 102.6 32 160 32s104 46.6 104 104zM32 448H288c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faKitMedical = {
    prefix: 'fas',
    iconName: 'kit-medical',
    icon: [
      576,
      512,
      ['first-aid'],
      'f479',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H96V32H64zm64 0V480H448V32H128zM512 480c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H480V480h32zM256 176c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H320v48c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V288H208c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16h48V176z',
    ],
  };
  var faFirstAid = faKitMedical;
  var faPersonThroughWindow = {
    prefix: 'fas',
    iconName: 'person-through-window',
    icon: [
      640,
      512,
      [],
      'e5a9',
      'M64 64l224 0 0 9.8c0 39-23.7 74-59.9 88.4C167.6 186.5 128 245 128 310.2l0 73.8s0 0 0 0H64V64zm288 0l224 0V384H508.3l-3.7-4.5-75.2-90.2c-9.1-10.9-22.6-17.3-36.9-17.3l-71.1 0-41-63.1c-.3-.5-.6-1-1-1.4c44.7-29 72.5-79 72.5-133.6l0-9.8zm73 320H379.2l42.7 64H592c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48V400c0 26.5 21.5 48 48 48H308.2l33.2 49.8c9.8 14.7 29.7 18.7 44.4 8.9s18.7-29.7 8.9-44.4L310.5 336l74.6 0 40 48zm-159.5 0H192s0 0 0 0l0-73.8c0-10.2 1.6-20.1 4.7-29.5L265.5 384zM192 128c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faToolbox = {
    prefix: 'fas',
    iconName: 'toolbox',
    icon: [
      512,
      512,
      [129520],
      'f552',
      'M176 88v40H336V88c0-4.4-3.6-8-8-8H184c-4.4 0-8 3.6-8 8zm-48 40V88c0-30.9 25.1-56 56-56H328c30.9 0 56 25.1 56 56v40h28.1c12.7 0 24.9 5.1 33.9 14.1l51.9 51.9c9 9 14.1 21.2 14.1 33.9V304H384V288c0-17.7-14.3-32-32-32s-32 14.3-32 32v16H192V288c0-17.7-14.3-32-32-32s-32 14.3-32 32v16H0V227.9c0-12.7 5.1-24.9 14.1-33.9l51.9-51.9c9-9 21.2-14.1 33.9-14.1H128zM0 416V336H128v16c0 17.7 14.3 32 32 32s32-14.3 32-32V336H320v16c0 17.7 14.3 32 32 32s32-14.3 32-32V336H512v80c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64z',
    ],
  };
  var faHandsHoldingCircle = {
    prefix: 'fas',
    iconName: 'hands-holding-circle',
    icon: [
      640,
      512,
      [],
      'e4fb',
      'M320 256c-70.7 0-128-57.3-128-128S249.3 0 320 0s128 57.3 128 128s-57.3 128-128 128zM40 64c22.1 0 40 17.9 40 40v40 80 40.2c0 17 6.7 33.3 18.7 45.3l51.1 51.1c8.3 8.3 21.3 9.6 31 3.1c12.9-8.6 14.7-26.9 3.7-37.8l-15.2-15.2-32-32c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l32 32 15.2 15.2 0 0 25.3 25.3c21 21 32.8 49.5 32.8 79.2V464c0 26.5-21.5 48-48 48H173.3c-17 0-33.3-6.7-45.3-18.7L28.1 393.4C10.1 375.4 0 351 0 325.5V224 160 104C0 81.9 17.9 64 40 64zm560 0c22.1 0 40 17.9 40 40v56 64V325.5c0 25.5-10.1 49.9-28.1 67.9L512 493.3c-12 12-28.3 18.7-45.3 18.7H400c-26.5 0-48-21.5-48-48V385.1c0-29.7 11.8-58.2 32.8-79.2l25.3-25.3 0 0 15.2-15.2 32-32c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-32 32-15.2 15.2c-11 11-9.2 29.2 3.7 37.8c9.7 6.5 22.7 5.2 31-3.1l51.1-51.1c12-12 18.7-28.3 18.7-45.3V224 144 104c0-22.1 17.9-40 40-40z',
    ],
  };
  var faBug = {
    prefix: 'fas',
    iconName: 'bug',
    icon: [
      512,
      512,
      [],
      'f188',
      'M256 0c53 0 96 43 96 96v3.6c0 15.7-12.7 28.4-28.4 28.4H188.4c-15.7 0-28.4-12.7-28.4-28.4V96c0-53 43-96 96-96zM41.4 105.4c12.5-12.5 32.8-12.5 45.3 0l64 64c.7 .7 1.3 1.4 1.9 2.1c14.2-7.3 30.4-11.4 47.5-11.4H312c17.1 0 33.2 4.1 47.5 11.4c.6-.7 1.2-1.4 1.9-2.1l64-64c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-64 64c-.7 .7-1.4 1.3-2.1 1.9c6.2 12 10.1 25.3 11.1 39.5H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H416c0 24.6-5.5 47.8-15.4 68.6c2.2 1.3 4.2 2.9 6 4.8l64 64c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0l-63.1-63.1c-24.5 21.8-55.8 36.2-90.3 39.6V240c0-8.8-7.2-16-16-16s-16 7.2-16 16V479.2c-34.5-3.4-65.8-17.8-90.3-39.6L86.6 502.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l64-64c1.9-1.9 3.9-3.4 6-4.8C101.5 367.8 96 344.6 96 320H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H96.3c1.1-14.1 5-27.5 11.1-39.5c-.7-.6-1.4-1.2-2.1-1.9l-64-64c-12.5-12.5-12.5-32.8 0-45.3z',
    ],
  };
  var faCreditCard = {
    prefix: 'fas',
    iconName: 'credit-card',
    icon: [
      576,
      512,
      [128179, 62083, 'credit-card-alt'],
      'f09d',
      'M64 32C28.7 32 0 60.7 0 96v32H576V96c0-35.3-28.7-64-64-64H64zM576 224H0V416c0 35.3 28.7 64 64 64H512c35.3 0 64-28.7 64-64V224zM112 352h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm112 16c0-8.8 7.2-16 16-16H368c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faCreditCardAlt = faCreditCard;
  var faCar = {
    prefix: 'fas',
    iconName: 'car',
    icon: [
      512,
      512,
      [128664, 'automobile'],
      'f1b9',
      'M135.2 117.4L109.1 192H402.9l-26.1-74.6C372.3 104.6 360.2 96 346.6 96H165.4c-13.6 0-25.7 8.6-30.2 21.4zM39.6 196.8L74.8 96.3C88.3 57.8 124.6 32 165.4 32H346.6c40.8 0 77.1 25.8 90.6 64.3l35.2 100.5c23.2 9.6 39.6 32.5 39.6 59.2V400v48c0 17.7-14.3 32-32 32H448c-17.7 0-32-14.3-32-32V400H96v48c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V400 256c0-26.7 16.4-49.6 39.6-59.2zM128 288c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm288 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faAutomobile = faCar;
  var faHandHoldingHand = {
    prefix: 'fas',
    iconName: 'hand-holding-hand',
    icon: [
      576,
      512,
      [],
      'e4f7',
      'M7.8 207.7c-13.1-17.8-9.3-42.8 8.5-55.9L142.9 58.5C166.2 41.3 194.5 32 223.5 32H384 544c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H507.2l-44.9 36c-22.7 18.2-50.9 28-80 28H304 288 224c-17.7 0-32-14.3-32-32s14.3-32 32-32h64 16c8.8 0 16-7.2 16-16s-7.2-16-16-16H183.4L63.7 216.2c-17.8 13.1-42.8 9.3-55.9-8.5zM382.4 160l0 0 .9 0c-.3 0-.6 0-.9 0zM568.2 304.3c13.1 17.8 9.3 42.8-8.5 55.9L433.1 453.5c-23.4 17.2-51.6 26.5-80.7 26.5H192 32c-17.7 0-32-14.3-32-32V384c0-17.7 14.3-32 32-32H68.8l44.9-36c22.7-18.2 50.9-28 80-28H272h16 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H288 272c-8.8 0-16 7.2-16 16s7.2 16 16 16H392.6l119.7-88.2c17.8-13.1 42.8-9.3 55.9 8.5zM193.6 352l0 0-.9 0c.3 0 .6 0 .9 0z',
    ],
  };
  var faBookOpenReader = {
    prefix: 'fas',
    iconName: 'book-open-reader',
    icon: [
      512,
      512,
      ['book-reader'],
      'f5da',
      'M352 96c0 53-43 96-96 96s-96-43-96-96s43-96 96-96s96 43 96 96zM240 248V512l-48.4-24.2c-20.9-10.4-43.5-17-66.8-19.3l-96-9.6C12.5 457.2 0 443.5 0 427V224c0-17.7 14.3-32 32-32H62.3c63.6 0 125.6 19.6 177.7 56zm32 264V248c52.1-36.4 114.1-56 177.7-56H480c17.7 0 32 14.3 32 32V427c0 16.4-12.5 30.2-28.8 31.8l-96 9.6c-23.2 2.3-45.9 8.9-66.8 19.3L272 512z',
    ],
  };
  var faBookReader = faBookOpenReader;
  var faMountainSun = {
    prefix: 'fas',
    iconName: 'mountain-sun',
    icon: [
      640,
      512,
      [],
      'e52f',
      'M560 160c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zM55.9 512H381.1h75H578.9c33.8 0 61.1-27.4 61.1-61.1c0-11.2-3.1-22.2-8.9-31.8l-132-216.3C495 196.1 487.8 192 480 192s-15 4.1-19.1 10.7l-48.2 79L286.8 81c-6.6-10.6-18.3-17-30.8-17s-24.1 6.4-30.8 17L8.6 426.4C3 435.3 0 445.6 0 456.1C0 487 25 512 55.9 512z',
    ],
  };
  var faArrowsLeftRightToLine = {
    prefix: 'fas',
    iconName: 'arrows-left-right-to-line',
    icon: [
      640,
      512,
      [],
      'e4ba',
      'M32 64c17.7 0 32 14.3 32 32l0 320c0 17.7-14.3 32-32 32s-32-14.3-32-32V96C0 78.3 14.3 64 32 64zm214.6 73.4c12.5 12.5 12.5 32.8 0 45.3L205.3 224l229.5 0-41.4-41.4c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l96 96c12.5 12.5 12.5 32.8 0 45.3l-96 96c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L434.7 288l-229.5 0 41.4 41.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0l-96-96c-12.5-12.5-12.5-32.8 0-45.3l96-96c12.5-12.5 32.8-12.5 45.3 0zM640 96V416c0 17.7-14.3 32-32 32s-32-14.3-32-32V96c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faDiceD20 = {
    prefix: 'fas',
    iconName: 'dice-d20',
    icon: [
      512,
      512,
      [],
      'f6cf',
      'M64.7 125.8l53.2 31.9c7.8 4.7 17.8 2 22.2-5.9L217.6 12.1c3-5.4-.9-12.1-7.1-12.1c-1.6 0-3.2 .5-4.6 1.4L63.9 98.8c-9.6 6.6-9.2 20.9 .8 26.9zM32 171.7V295.3c0 8 10.4 11 14.7 4.4l60-92c5-7.6 2.6-17.8-5.2-22.5L56.2 158C45.6 151.6 32 159.3 32 171.7zM326.4 12.1l77.6 139.6c4.4 7.9 14.5 10.6 22.2 5.9l53.2-31.9c10-6 10.4-20.3 .8-26.9L338.1 1.4c-1.4-.9-3-1.4-4.6-1.4c-6.2 0-10.1 6.7-7.1 12.1zM512 171.7c0-12.4-13.6-20.1-24.2-13.7l-45.3 27.2c-7.8 4.7-10.1 14.9-5.2 22.5l60 92c4.3 6.7 14.7 3.6 14.7-4.4V171.7zm-49.3 246L302.1 436.6c-8.1 .9-14.1 7.8-14.1 15.9v52.8c0 3.7 3 6.8 6.8 6.8c.8 0 1.6-.1 2.4-.4l172.7-64c6.1-2.2 10.1-8 10.1-14.5c0-9.3-8.1-16.5-17.3-15.4zM249.2 512c3.7 0 6.8-3 6.8-6.8V452.6c0-8.1-6.1-14.9-14.1-15.9l-160.6-19c-9.2-1.1-17.3 6.1-17.3 15.4c0 6.5 4 12.3 10.1 14.5l172.7 64c.8 .3 1.6 .4 2.4 .4zM57.7 382.9l170.9 20.2c7.8 .9 13.4-7.5 9.5-14.3l-85.7-150c-5.9-10.4-20.7-10.8-27.3-.8L46.2 358.2c-6.5 9.9-.3 23.3 11.5 24.7zm439.6-24.8L418.9 238.1c-6.5-10-21.4-9.6-27.3 .8L306.2 388.5c-3.9 6.8 1.6 15.2 9.5 14.3l170.1-20c11.8-1.4 18-14.7 11.5-24.6zm-216.9 11l78.4-137.2c6.1-10.7-1.6-23.9-13.9-23.9H199.1c-12.3 0-20 13.3-13.9 23.9l78.4 137.2c3.7 6.4 13 6.4 16.7 0zM190.4 176H353.6c12.2 0 19.9-13.1 14-23.8l-80-144c-2.8-5.1-8.2-8.2-14-8.2h-3.2c-5.8 0-11.2 3.2-14 8.2l-80 144c-5.9 10.7 1.8 23.8 14 23.8z',
    ],
  };
  var faTruckDroplet = {
    prefix: 'fas',
    iconName: 'truck-droplet',
    icon: [
      640,
      512,
      [],
      'e58c',
      'M0 48C0 21.5 21.5 0 48 0H368c26.5 0 48 21.5 48 48V96h50.7c17 0 33.3 6.7 45.3 18.7L589.3 192c12 12 18.7 28.3 18.7 45.3V256v32 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H576c0 53-43 96-96 96s-96-43-96-96H256c0 53-43 96-96 96s-96-43-96-96H48c-26.5 0-48-21.5-48-48V48zM416 256H544V237.3L466.7 160H416v96zM160 464c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm368-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM208 272c39.8 0 72-29.6 72-66c0-27-39.4-82.9-59.9-110.3c-6.1-8.2-18.1-8.2-24.2 0C175.4 123 136 179 136 206c0 36.5 32.2 66 72 66z',
    ],
  };
  var faFileCircleXmark = {
    prefix: 'fas',
    iconName: 'file-circle-xmark',
    icon: [
      576,
      512,
      [],
      'e5a1',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm48 384c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm59.3-180.7c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L432 345.4l-36.7-36.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L409.4 368l-36.7 36.7c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L432 390.6l36.7 36.7c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L454.6 368l36.7-36.7z',
    ],
  };
  var faTemperatureArrowUp = {
    prefix: 'fas',
    iconName: 'temperature-arrow-up',
    icon: [
      512,
      512,
      ['temperature-up'],
      'e040',
      'M96 112c0-26.5 21.5-48 48-48s48 21.5 48 48V276.5c0 17.3 7.1 31.9 15.3 42.5C217.8 332.6 224 349.5 224 368c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-18.5 6.2-35.4 16.7-48.9C88.9 308.4 96 293.8 96 276.5V112zM144 0C82.1 0 32 50.1 32 112V276.4c0 .1-.1 .3-.2 .6c-.2 .6-.8 1.6-1.7 2.8C11.2 304.2 0 334.8 0 368c0 79.5 64.5 144 144 144s144-64.5 144-144c0-33.2-11.3-63.8-30.1-88.1c-.9-1.2-1.5-2.2-1.7-2.8c-.1-.3-.2-.5-.2-.6V112C256 50.1 205.9 0 144 0zm0 416c26.5 0 48-21.5 48-48c0-20.9-13.4-38.7-32-45.3V112c0-8.8-7.2-16-16-16s-16 7.2-16 16V322.7c-18.6 6.6-32 24.4-32 45.3c0 26.5 21.5 48 48 48zM448 160h32c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-64-64c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8h32V448c0 17.7 14.3 32 32 32s32-14.3 32-32V160z',
    ],
  };
  var faTemperatureUp = faTemperatureArrowUp;
  var faMedal = {
    prefix: 'fas',
    iconName: 'medal',
    icon: [
      512,
      512,
      [127941],
      'f5a2',
      'M16 0H144c5.3 0 10.3 2.7 13.3 7.1l81.1 121.6c-49.5 4.1-94 25.6-127.6 58.3L2.7 24.9C-.6 20-.9 13.7 1.9 8.5S10.1 0 16 0zM509.3 24.9L401.2 187.1c-33.5-32.7-78.1-54.2-127.6-58.3L354.7 7.1c3-4.5 8-7.1 13.3-7.1H496c5.9 0 11.3 3.2 14.1 8.5s2.5 11.5-.8 16.4zM432 336c0 97.2-78.8 176-176 176s-176-78.8-176-176s78.8-176 176-176s176 78.8 176 176zM264.4 241.1c-3.4-7-13.3-7-16.8 0l-22.4 45.4c-1.4 2.8-4 4.7-7 5.1L168 298.9c-7.7 1.1-10.7 10.5-5.2 16l36.3 35.4c2.2 2.2 3.2 5.2 2.7 8.3l-8.6 49.9c-1.3 7.6 6.7 13.5 13.6 9.9l44.8-23.6c2.7-1.4 6-1.4 8.7 0l44.8 23.6c6.9 3.6 14.9-2.2 13.6-9.9l-8.6-49.9c-.5-3 .5-6.1 2.7-8.3l36.3-35.4c5.6-5.4 2.5-14.8-5.2-16l-50.1-7.3c-3-.4-5.7-2.4-7-5.1l-22.4-45.4z',
    ],
  };
  var faBed = {
    prefix: 'fas',
    iconName: 'bed',
    icon: [
      640,
      512,
      [128716],
      'f236',
      'M32 32c17.7 0 32 14.3 32 32V320H288V160c0-17.7 14.3-32 32-32H544c53 0 96 43 96 96V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V416H352 320 64v32c0 17.7-14.3 32-32 32s-32-14.3-32-32V64C0 46.3 14.3 32 32 32zM176 288c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faSquareH = {
    prefix: 'fas',
    iconName: 'square-h',
    icon: [
      448,
      512,
      ['h-square'],
      'f0fd',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM336 152V256 360c0 13.3-10.7 24-24 24s-24-10.7-24-24V280H160l0 80c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-208c0-13.3 10.7-24 24-24s24 10.7 24 24v80H288V152c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faHSquare = faSquareH;
  var faPodcast = {
    prefix: 'fas',
    iconName: 'podcast',
    icon: [
      448,
      512,
      [],
      'f2ce',
      'M319.4 372c48.5-31.3 80.6-85.9 80.6-148c0-97.2-78.8-176-176-176S48 126.8 48 224c0 62.1 32.1 116.6 80.6 148c1.2 17.3 4 38 7.2 57.1l.2 1C56 395.8 0 316.5 0 224C0 100.3 100.3 0 224 0S448 100.3 448 224c0 92.5-56 171.9-136 206.1l.2-1.1c3.1-19.2 6-39.8 7.2-57zm-2.3-38.1c-1.6-5.7-3.9-11.1-7-16.2c-5.8-9.7-13.5-17-21.9-22.4c19.5-17.6 31.8-43 31.8-71.3c0-53-43-96-96-96s-96 43-96 96c0 28.3 12.3 53.8 31.8 71.3c-8.4 5.4-16.1 12.7-21.9 22.4c-3.1 5.1-5.4 10.5-7 16.2C99.8 307.5 80 268 80 224c0-79.5 64.5-144 144-144s144 64.5 144 144c0 44-19.8 83.5-50.9 109.9zM224 312c32.9 0 64 8.6 64 43.8c0 33-12.9 104.1-20.6 132.9c-5.1 19-24.5 23.4-43.4 23.4s-38.2-4.4-43.4-23.4c-7.8-28.5-20.6-99.7-20.6-132.8c0-35.1 31.1-43.8 64-43.8zm0-32c-30.9 0-56-25.1-56-56s25.1-56 56-56s56 25.1 56 56s-25.1 56-56 56z',
    ],
  };
  var faTemperatureFull = {
    prefix: 'fas',
    iconName: 'temperature-full',
    icon: [
      320,
      512,
      ['temperature-4', 'thermometer-4', 'thermometer-full'],
      'f2c7',
      'M160 64c-26.5 0-48 21.5-48 48V276.5c0 17.3-7.1 31.9-15.3 42.5C86.2 332.6 80 349.5 80 368c0 44.2 35.8 80 80 80s80-35.8 80-80c0-18.5-6.2-35.4-16.7-48.9c-8.2-10.6-15.3-25.2-15.3-42.5V112c0-26.5-21.5-48-48-48zM48 112C48 50.2 98.1 0 160 0s112 50.1 112 112V276.5c0 .1 .1 .3 .2 .6c.2 .6 .8 1.6 1.7 2.8c18.9 24.4 30.1 55 30.1 88.1c0 79.5-64.5 144-144 144S16 447.5 16 368c0-33.2 11.2-63.8 30.1-88.1c.9-1.2 1.5-2.2 1.7-2.8c.1-.3 .2-.5 .2-.6V112zM208 368c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-20.9 13.4-38.7 32-45.3V112c0-8.8 7.2-16 16-16s16 7.2 16 16V322.7c18.6 6.6 32 24.4 32 45.3z',
    ],
  };
  var faTemperature4 = faTemperatureFull;
  var faThermometer4 = faTemperatureFull;
  var faThermometerFull = faTemperatureFull;
  var faBell = {
    prefix: 'fas',
    iconName: 'bell',
    icon: [
      448,
      512,
      [128276, 61602],
      'f0f3',
      'M224 0c-17.7 0-32 14.3-32 32V51.2C119 66 64 130.6 64 208v18.8c0 47-17.3 92.4-48.5 127.6l-7.4 8.3c-8.4 9.4-10.4 22.9-5.3 34.4S19.4 416 32 416H416c12.6 0 24-7.4 29.2-18.9s3.1-25-5.3-34.4l-7.4-8.3C401.3 319.2 384 273.9 384 226.8V208c0-77.4-55-142-128-156.8V32c0-17.7-14.3-32-32-32zm45.3 493.3c12-12 18.7-28.3 18.7-45.3H224 160c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7z',
    ],
  };
  var faSuperscript = {
    prefix: 'fas',
    iconName: 'superscript',
    icon: [
      512,
      512,
      [],
      'f12b',
      'M480 32c0-11.1-5.7-21.4-15.2-27.2s-21.2-6.4-31.1-1.4l-32 16c-15.8 7.9-22.2 27.1-14.3 42.9C393 73.5 404.3 80 416 80v80c-17.7 0-32 14.3-32 32s14.3 32 32 32h32 32c17.7 0 32-14.3 32-32s-14.3-32-32-32V32zM32 64C14.3 64 0 78.3 0 96s14.3 32 32 32H47.3l89.6 128L47.3 384H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64c10.4 0 20.2-5.1 26.2-13.6L176 311.8l85.8 122.6c6 8.6 15.8 13.6 26.2 13.6h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H304.7L215.1 256l89.6-128H320c17.7 0 32-14.3 32-32s-14.3-32-32-32H288c-10.4 0-20.2 5.1-26.2 13.6L176 200.2 90.2 77.6C84.2 69.1 74.4 64 64 64H32z',
    ],
  };
  var faPlugCircleXmark = {
    prefix: 'fas',
    iconName: 'plug-circle-xmark',
    icon: [
      576,
      512,
      [],
      'e560',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm59.3-180.7L454.6 368l36.7 36.7c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0L432 390.6l-36.7 36.7c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6L409.4 368l-36.7-36.7c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L432 345.4l36.7-36.7c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faStarOfLife = {
    prefix: 'fas',
    iconName: 'star-of-life',
    icon: [
      512,
      512,
      [],
      'f621',
      'M208 32c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V172.9l122-70.4c15.3-8.8 34.9-3.6 43.7 11.7l16 27.7c8.8 15.3 3.6 34.9-11.7 43.7L352 256l122 70.4c15.3 8.8 20.5 28.4 11.7 43.7l-16 27.7c-8.8 15.3-28.4 20.6-43.7 11.7L304 339.1V480c0 17.7-14.3 32-32 32H240c-17.7 0-32-14.3-32-32V339.1L86 409.6c-15.3 8.8-34.9 3.6-43.7-11.7l-16-27.7c-8.8-15.3-3.6-34.9 11.7-43.7L160 256 38 185.6c-15.3-8.8-20.5-28.4-11.7-43.7l16-27.7C51.1 98.8 70.7 93.6 86 102.4l122 70.4V32z',
    ],
  };
  var faPhoneSlash = {
    prefix: 'fas',
    iconName: 'phone-slash',
    icon: [
      640,
      512,
      [],
      'f3dd',
      'M601.2 5.1c10.4-8.2 25.5-6.3 33.7 4.1s6.3 25.5-4.1 33.7l-592 464c-10.4 8.2-25.5 6.3-33.7-4.1s-6.3-25.5 4.1-33.7l155.6-122C101.8 270 64 171.4 64 64c0-18 12.1-33.8 29.5-38.6l88-24c19.4-5.3 39.7 4.6 47.4 23.2l40 96c6.8 16.3 2.1 35.2-11.6 46.3L208 207.3c12 25.5 27.2 49.2 45 70.7L601.2 5.1zM325.7 343.7c13.7 9.1 28 17.3 43 24.3L409 318.7c11.2-13.7 30-18.4 46.3-11.6l96 40c18.6 7.7 28.5 28 23.2 47.4l-24 88C545.8 499.9 530 512 512 512c-104.9 0-201.3-36-277.7-96.4l91.3-72z',
    ],
  };
  var faPaintRoller = {
    prefix: 'fas',
    iconName: 'paint-roller',
    icon: [
      512,
      512,
      [],
      'f5aa',
      'M0 64C0 28.7 28.7 0 64 0H352c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM160 352c0-17.7 14.3-32 32-32V304c0-44.2 35.8-80 80-80H416c17.7 0 32-14.3 32-32V160 69.5c37.3 13.2 64 48.7 64 90.5v32c0 53-43 96-96 96H272c-8.8 0-16 7.2-16 16v16c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V352z',
    ],
  };
  var faHandshakeAngle = {
    prefix: 'fas',
    iconName: 'handshake-angle',
    icon: [
      640,
      512,
      ['hands-helping'],
      'f4c4',
      'M543.9 251.4c0-1.1 .1-2.2 .1-3.4c0-48.6-39.4-88-88-88l-40 0H320l-16 0 0 0v16 72c0 22.1-17.9 40-40 40s-40-17.9-40-40V128h.4c4-36 34.5-64 71.6-64H408c2.8 0 5.6 .2 8.3 .5l40.1-40.1c21.9-21.9 57.3-21.9 79.2 0l78.1 78.1c21.9 21.9 21.9 57.3 0 79.2l-69.7 69.7zM192 128V248c0 39.8 32.2 72 72 72s72-32.2 72-72V192h80l40 0c30.9 0 56 25.1 56 56c0 27.2-19.4 49.9-45.2 55c8.2 8.6 13.2 20.2 13.2 33c0 26.5-21.5 48-48 48h-2.7c1.8 5 2.7 10.4 2.7 16c0 26.5-21.5 48-48 48H224c-.9 0-1.8 0-2.7-.1l-37.7 37.7c-21.9 21.9-57.3 21.9-79.2 0L26.3 407.6c-21.9-21.9-21.9-57.3 0-79.2L96 258.7V224c0-53 43-96 96-96z',
    ],
  };
  var faHandsHelping = faHandshakeAngle;
  var faLocationDot = {
    prefix: 'fas',
    iconName: 'location-dot',
    icon: [
      384,
      512,
      ['map-marker-alt'],
      'f3c5',
      'M215.7 499.2C267 435 384 279.4 384 192C384 86 298 0 192 0S0 86 0 192c0 87.4 117 243 168.3 307.2c12.3 15.3 35.1 15.3 47.4 0zM192 256c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faMapMarkerAlt = faLocationDot;
  var faFile = {
    prefix: 'fas',
    iconName: 'file',
    icon: [
      384,
      512,
      [128196, 128459, 61462],
      'f15b',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128z',
    ],
  };
  var faGreaterThan = {
    prefix: 'fas',
    iconName: 'greater-than',
    icon: [
      384,
      512,
      [62769],
      '3e',
      'M3.4 81.7c-7.9 15.8-1.5 35 14.3 42.9L280.5 256 17.7 387.4C1.9 395.3-4.5 414.5 3.4 430.3s27.1 22.2 42.9 14.3l320-160c10.8-5.4 17.7-16.5 17.7-28.6s-6.8-23.2-17.7-28.6l-320-160c-15.8-7.9-35-1.5-42.9 14.3z',
    ],
  };
  var faPersonSwimming = {
    prefix: 'fas',
    iconName: 'person-swimming',
    icon: [
      576,
      512,
      [127946, 'swimmer'],
      'f5c4',
      'M309.5 178.4L447.9 297.1c-1.6 .9-3.2 2-4.8 3c-18 12.4-40.1 20.3-59.2 20.3c-19.6 0-40.8-7.7-59.2-20.3c-22.1-15.5-51.6-15.5-73.7 0c-17.1 11.8-38 20.3-59.2 20.3c-10.1 0-21.1-2.2-31.9-6.2C163.1 193.2 262.2 96 384 96h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384c-26.9 0-52.3 6.6-74.5 18.4zM32 160c0-35.3 28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64s-64-28.7-64-64zM306.5 325.9C329 341.4 356.5 352 384 352c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 405.7 417 416 384 416c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 341.2 165.1 352 192 352c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faSwimmer = faPersonSwimming;
  var faArrowDown = {
    prefix: 'fas',
    iconName: 'arrow-down',
    icon: [
      384,
      512,
      [8595],
      'f063',
      'M169.4 470.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 370.8 224 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 306.7L54.6 265.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z',
    ],
  };
  var faDroplet = {
    prefix: 'fas',
    iconName: 'droplet',
    icon: [
      384,
      512,
      [128167, 'tint'],
      'f043',
      'M192 496c97.2 0 176-78.8 176-176c0-74.1-102.3-230.6-150.9-300.7c-12.3-17.7-37.8-17.7-50.1 0C118.3 89.4 16 245.9 16 320c0 97.2 78.8 176 176 176zM112 320c0 44.2 35.8 80 80 80c8.8 0 16 7.2 16 16s-7.2 16-16 16c-61.9 0-112-50.1-112-112c0-8.8 7.2-16 16-16s16 7.2 16 16z',
    ],
  };
  var faTint = faDroplet;
  var faEraser = {
    prefix: 'fas',
    iconName: 'eraser',
    icon: [
      576,
      512,
      [],
      'f12d',
      'M290.7 57.4L57.4 290.7c-25 25-25 65.5 0 90.5l80 80c12 12 28.3 18.7 45.3 18.7H288h9.4H512c17.7 0 32-14.3 32-32s-14.3-32-32-32H387.9L518.6 285.3c25-25 25-65.5 0-90.5L381.3 57.4c-25-25-65.5-25-90.5 0zM297.4 416H288l-105.4 0-80-80L227.3 211.3 364.7 348.7 297.4 416z',
    ],
  };
  var faEarthAmericas = {
    prefix: 'fas',
    iconName: 'earth-americas',
    icon: [
      512,
      512,
      [127758, 'earth', 'earth-america', 'globe-americas'],
      'f57d',
      'M57.7 193l9.4 16.4c8.3 14.5 21.9 25.2 38 29.8L163 255.7c17.2 4.9 29 20.6 29 38.5v39.9c0 11 6.2 21 16 25.9s16 14.9 16 25.9v39c0 15.6 14.9 26.9 29.9 22.6c16.1-4.6 28.6-17.5 32.7-33.8l2.8-11.2c4.2-16.9 15.2-31.4 30.3-40l8.1-4.6c15-8.5 24.2-24.5 24.2-41.7v-8.3c0-12.7-5.1-24.9-14.1-33.9l-3.9-3.9c-9-9-21.2-14.1-33.9-14.1H257c-11.1 0-22.1-2.9-31.8-8.4l-34.5-19.7c-4.3-2.5-7.6-6.5-9.2-11.2c-3.2-9.6 1.1-20 10.2-24.5l5.9-3c6.6-3.3 14.3-3.9 21.3-1.5l23.2 7.7c8.2 2.7 17.2-.4 21.9-7.5c4.7-7 4.2-16.3-1.2-22.8l-13.6-16.3c-10-12-9.9-29.5 .3-41.3l15.7-18.3c8.8-10.3 10.2-25 3.5-36.7l-2.4-4.2c-3.5-.2-6.9-.3-10.4-.3C163.1 48 84.4 108.9 57.7 193zM464 256c0-36.8-9.6-71.4-26.4-101.5L412 164.8c-15.7 6.3-23.8 23.8-18.5 39.8l16.9 50.7c3.5 10.4 12 18.3 22.6 20.9l29.1 7.3c1.2-9 1.8-18.2 1.8-27.5zm48 0c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256z',
    ],
  };
  var faEarth = faEarthAmericas;
  var faEarthAmerica = faEarthAmericas;
  var faGlobeAmericas = faEarthAmericas;
  var faPersonBurst = {
    prefix: 'fas',
    iconName: 'person-burst',
    icon: [
      640,
      512,
      [],
      'e53b',
      'M480 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-8 384V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V256.9l28.6 47.5c9.1 15.1 28.8 20 43.9 10.9s20-28.8 10.9-43.9l-58.3-97c-17.4-28.9-48.6-46.6-82.3-46.6H465.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9L408 256.9V480c0 17.7 14.3 32 32 32s32-14.3 32-32zM190.9 18.1C188.4 12 182.6 8 176 8s-12.4 4-14.9 10.1l-29.4 74L55.6 68.9c-6.3-1.9-13.1 .2-17.2 5.3s-4.6 12.2-1.4 17.9l39.5 69.1L10.9 206.4c-5.4 3.7-8 10.3-6.5 16.7s6.7 11.2 13.1 12.2l78.7 12.2L90.6 327c-.5 6.5 3.1 12.7 9 15.5s12.9 1.8 17.8-2.6L176 286.1l58.6 53.9c4.8 4.4 11.9 5.5 17.8 2.6s9.5-9 9-15.5l-5.6-79.4 50.5-7.8 24.4-40.5-55.2-38L315 92.2c3.3-5.7 2.7-12.8-1.4-17.9s-10.9-7.2-17.2-5.3L220.3 92.1l-29.4-74z',
    ],
  };
  var faDove = {
    prefix: 'fas',
    iconName: 'dove',
    icon: [
      512,
      512,
      [128330],
      'f4ba',
      'M160.8 96.5c14 17 31 30.9 49.5 42.2c25.9 15.8 53.7 25.9 77.7 31.6V138.8C265.8 108.5 250 71.5 248.6 28c-.4-11.3-7.5-21.5-18.4-24.4c-7.6-2-15.8-.2-21 5.8c-13.3 15.4-32.7 44.6-48.4 87.2zM320 144v30.6l0 0v1.3l0 0 0 32.1c-60.8-5.1-185-43.8-219.3-157.2C97.4 40 87.9 32 76.6 32c-7.9 0-15.3 3.9-18.8 11C46.8 65.9 32 112.1 32 176c0 116.9 80.1 180.5 118.4 202.8L11.8 416.6C6.7 418 2.6 421.8 .9 426.8s-.8 10.6 2.3 14.8C21.7 466.2 77.3 512 160 512c3.6 0 7.2-1.2 10-3.5L245.6 448H320c88.4 0 160-71.6 160-160V128l29.9-44.9c1.3-2 2.1-4.4 2.1-6.8c0-6.8-5.5-12.3-12.3-12.3H400c-44.2 0-80 35.8-80 80zm80 16c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faBatteryEmpty = {
    prefix: 'fas',
    iconName: 'battery-empty',
    icon: [
      576,
      512,
      ['battery-0'],
      'f244',
      'M80 96C35.8 96 0 131.8 0 176V336c0 44.2 35.8 80 80 80H464c44.2 0 80-35.8 80-80V320c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32V176c0-44.2-35.8-80-80-80H80zM64 176c0-8.8 7.2-16 16-16H464c8.8 0 16 7.2 16 16V336c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V176z',
    ],
  };
  var faBattery0 = faBatteryEmpty;
  var faSocks = {
    prefix: 'fas',
    iconName: 'socks',
    icon: [
      512,
      512,
      [129510],
      'f696',
      'M175.2 476.6c-9.7-18-15.2-38.7-15.2-60.6c0-40.3 19-78.2 51.2-102.4l64-48c8.1-6 12.8-15.5 12.8-25.6V96H128V240c0 20.1-9.5 39.1-25.6 51.2l-64 48C14.2 357.3 0 385.8 0 416c0 53 43 96 96 96c20.8 0 41-6.7 57.6-19.2l21.6-16.2zM128 64H288V48c0-14.5 3.9-28.2 10.7-39.9C291 3 281.9 0 272 0H176c-26.5 0-48 21.5-48 48V64zM320 96V240c0 20.1-9.5 39.1-25.6 51.2l-64 48C206.2 357.3 192 385.8 192 416c0 53 43 96 96 96c20.8 0 41-6.7 57.6-19.2l115.2-86.4C493 382.2 512 344.3 512 304V96H320zM512 64V48c0-26.5-21.5-48-48-48H368c-26.5 0-48 21.5-48 48V64H512z',
    ],
  };
  var faInbox = {
    prefix: 'fas',
    iconName: 'inbox',
    icon: [
      512,
      512,
      [],
      'f01c',
      'M121 32C91.6 32 66 52 58.9 80.5L1.9 308.4C.6 313.5 0 318.7 0 323.9V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V323.9c0-5.2-.6-10.4-1.9-15.5l-57-227.9C446 52 420.4 32 391 32H121zm0 64H391l48 192H387.8c-12.1 0-23.2 6.8-28.6 17.7l-14.3 28.6c-5.4 10.8-16.5 17.7-28.6 17.7H195.8c-12.1 0-23.2-6.8-28.6-17.7l-14.3-28.6c-5.4-10.8-16.5-17.7-28.6-17.7H73L121 96z',
    ],
  };
  var faSection = {
    prefix: 'fas',
    iconName: 'section',
    icon: [
      320,
      512,
      [],
      'e447',
      'M96.9 96c2.1-11.6 8.7-19.8 21.1-25.4c13.8-6.2 34.8-8.9 61.2-4.5c8.8 1.4 36.1 7.1 44.1 9.3c17 4.8 34.7-5.1 39.5-22.2s-5.1-34.7-22.2-39.5c-11.1-3.1-41-9.2-50.9-10.8c-34.7-5.7-69.4-3.6-98 9.3c-29.8 13.5-52.2 38.6-58 74.1c-.1 .5-.2 1.1-.2 1.6c-2.2 19.7 .3 37.9 8.1 54.1c7.7 16.1 19.4 28 32 36.9c.6 .5 1.3 .9 2 1.4C54.3 194.2 38.5 215.1 33.7 243c-.1 .6-.2 1.1-.2 1.7c-2.3 19.3 .4 37.1 8.4 53c7.9 15.6 19.8 27 32.3 35.5c22.4 15.2 51.9 24 75.4 31l0 0 3.7 1.1c27.2 8.2 46.9 14.6 59.4 23.8c5.5 4 8.2 7.6 9.5 10.9c1.3 3.2 2.6 8.6 .9 18.1c-1.7 10.1-7.7 18-20.7 23.5c-14 6-35.4 8.5-62 4.4c-12.8-2.1-35.1-9.7-54.1-16.2l0 0c-4.3-1.5-8.5-2.9-12.3-4.2c-16.8-5.6-34.9 3.5-40.5 20.3s3.5 34.9 20.3 40.5c2.6 .8 5.7 1.9 9.2 3.1c18.6 6.3 48.5 16.6 67.3 19.6l0 0 .2 0c34.5 5.4 68.8 3.4 97.2-8.7c29.4-12.6 52.5-36.5 58.5-71.5c3.3-19.3 1.9-37.4-5-53.9c-6.3-15-16.4-26.4-27.6-35.2c16.5-13.9 28.5-33.2 32.6-58.2c3.2-19.8 1.9-38.3-4.8-55.1c-6.7-16.8-17.8-29.4-30.2-39c-22.8-17.6-53.6-27.4-77.7-35l-1.4-.5c-27.4-8.7-47.8-15.3-61.5-25c-6.1-4.4-9.5-8.5-11.4-12.4c-1.8-3.7-3.2-9.3-2.3-18.5zm76.7 208.5c-.2-.1-.4-.1-.6-.2l-1.4-.4c-27.4-8.2-47.9-14.5-61.7-23.8c-6.2-4.2-9.3-7.9-11-11.3c-1.5-3-2.9-7.7-2.1-15.7c1.9-9.7 7.9-17.3 20.5-22.7c14-6 35.4-8.5 62.1-4.3l16.4 2.6c6.3 2.9 11.7 6 16.2 9.5c5.5 4.2 8.4 8.2 10 12.2c1.6 4 2.8 10.4 1.1 20.9c-2.4 14.7-12.8 26.4-37.1 31l-12.4 2.3z',
    ],
  };
  var faGaugeHigh = {
    prefix: 'fas',
    iconName: 'gauge-high',
    icon: [
      512,
      512,
      [62461, 'tachometer-alt', 'tachometer-alt-fast'],
      'f625',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM288 96c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM256 416c35.3 0 64-28.7 64-64c0-17.4-6.9-33.1-18.1-44.6L366 161.7c5.3-12.1-.2-26.3-12.3-31.6s-26.3 .2-31.6 12.3L257.9 288c-.6 0-1.3 0-1.9 0c-35.3 0-64 28.7-64 64s28.7 64 64 64zM176 144c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM96 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm352-32c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faTachometerAlt = faGaugeHigh;
  var faTachometerAltFast = faGaugeHigh;
  var faEnvelopeOpenText = {
    prefix: 'fas',
    iconName: 'envelope-open-text',
    icon: [
      512,
      512,
      [],
      'f658',
      'M215.4 96H144 107.8 96v8.8V144v40.4 89L.2 202.5c1.6-18.1 10.9-34.9 25.7-45.8L48 140.3V96c0-26.5 21.5-48 48-48h76.6l49.9-36.9C232.2 3.9 243.9 0 256 0s23.8 3.9 33.5 11L339.4 48H416c26.5 0 48 21.5 48 48v44.3l22.1 16.4c14.8 10.9 24.1 27.7 25.7 45.8L416 273.4v-89V144 104.8 96H404.2 368 296.6 215.4zM0 448V242.1L217.6 403.3c11.1 8.2 24.6 12.7 38.4 12.7s27.3-4.4 38.4-12.7L512 242.1V448v0c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64v0zM176 160H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H176c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H176c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faHospital = {
    prefix: 'fas',
    iconName: 'hospital',
    icon: [
      640,
      512,
      [127973, 62589, 'hospital-alt', 'hospital-wide'],
      'f0f8',
      'M192 48c0-26.5 21.5-48 48-48H400c26.5 0 48 21.5 48 48V512H368V432c0-26.5-21.5-48-48-48s-48 21.5-48 48v80H192V48zM48 96H160V512H48c-26.5 0-48-21.5-48-48V320H80c8.8 0 16-7.2 16-16s-7.2-16-16-16H0V224H80c8.8 0 16-7.2 16-16s-7.2-16-16-16H0V144c0-26.5 21.5-48 48-48zm544 0c26.5 0 48 21.5 48 48v48H560c-8.8 0-16 7.2-16 16s7.2 16 16 16h80v64H560c-8.8 0-16 7.2-16 16s7.2 16 16 16h80V464c0 26.5-21.5 48-48 48H480V96H592zM312 64c-8.8 0-16 7.2-16 16v24H272c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16h24v24c0 8.8 7.2 16 16 16h16c8.8 0 16-7.2 16-16V152h24c8.8 0 16-7.2 16-16V120c0-8.8-7.2-16-16-16H344V80c0-8.8-7.2-16-16-16H312z',
    ],
  };
  var faHospitalAlt = faHospital;
  var faHospitalWide = faHospital;
  var faWineBottle = {
    prefix: 'fas',
    iconName: 'wine-bottle',
    icon: [
      512,
      512,
      [],
      'f72f',
      'M393.4 9.4c12.5-12.5 32.8-12.5 45.3 0l64 64c12.5 12.5 12.5 32.8 0 45.3c-11.8 11.8-30.7 12.5-43.2 1.9l-9.5 9.5-48.8 48.8c-9.2 9.2-11.5 22.9-8.6 35.6c9.4 40.9-1.9 85.6-33.8 117.5L197.3 493.3c-25 25-65.5 25-90.5 0l-88-88c-25-25-25-65.5 0-90.5L180.2 153.3c31.9-31.9 76.6-43.1 117.5-33.8c12.6 2.9 26.4 .5 35.5-8.6l48.8-48.8 9.5-9.5c-10.6-12.6-10-31.4 1.9-43.2zM99.3 347.3l65.4 65.4c6.2 6.2 16.4 6.2 22.6 0l97.4-97.4c6.2-6.2 6.2-16.4 0-22.6l-65.4-65.4c-6.2-6.2-16.4-6.2-22.6 0L99.3 324.7c-6.2 6.2-6.2 16.4 0 22.6z',
    ],
  };
  var faChessRook = {
    prefix: 'fas',
    iconName: 'chess-rook',
    icon: [
      384,
      512,
      [9820],
      'f447',
      'M0 204.2V48c0-8.8 7.2-16 16-16H72c8.8 0 16 7.2 16 16V88c0 4.4 3.6 8 8 8h32c4.4 0 8-3.6 8-8V48c0-8.8 7.2-16 16-16h80c8.8 0 16 7.2 16 16V88c0 4.4 3.6 8 8 8h32c4.4 0 8-3.6 8-8V48c0-8.8 7.2-16 16-16h56c8.8 0 16 7.2 16 16V204.2c0 12.1-6.8 23.2-17.7 28.6l-28.6 14.3c-10.8 5.4-17.7 16.5-17.5 28.6C322.2 360.7 336 416 336 416H48s13.8-55.3 15.8-140.2c.3-12.1-6.6-23.2-17.5-28.6L17.7 232.8C6.8 227.4 0 216.3 0 204.2zM176 320h32c8.8 0 16-7.2 16-16V256c0-17.7-14.3-32-32-32s-32 14.3-32 32v48c0 8.8 7.2 16 16 16zM32 448H352c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faBarsStaggered = {
    prefix: 'fas',
    iconName: 'bars-staggered',
    icon: [
      512,
      512,
      ['reorder', 'stream'],
      'f550',
      'M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM64 256c0-17.7 14.3-32 32-32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H96c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z',
    ],
  };
  var faReorder = faBarsStaggered;
  var faStream = faBarsStaggered;
  var faDharmachakra = {
    prefix: 'fas',
    iconName: 'dharmachakra',
    icon: [
      512,
      512,
      [9784],
      'f655',
      'M337.8 205.7l48.6-42.5c13.8 19.3 23.4 41.9 27.4 66.2l-64.4 4.3c-2.4-10.1-6.4-19.5-11.6-28zm140.1 19.5c-5.3-38.8-20.6-74.5-43.2-104.3l.8-.7C449 108.4 449.7 87.6 437 75s-33.4-12-45.2 1.5l-.7 .8c-29.8-22.6-65.5-37.9-104.3-43.2l.1-1.1c1.2-17.9-13-33-30.9-33s-32.1 15.2-30.9 33l.1 1.1c-38.8 5.3-74.5 20.6-104.3 43.2l-.7-.8C108.4 63 87.6 62.3 75 75s-12 33.4 1.5 45.2l.8 .7c-22.6 29.8-37.9 65.5-43.2 104.3l-1.1-.1c-17.9-1.2-33 13-33 30.9s15.2 32.1 33 30.9l1.1-.1c5.3 38.8 20.6 74.5 43.2 104.3l-.8 .7C63 403.6 62.3 424.4 75 437s33.4 12 45.2-1.5l.7-.8c29.8 22.6 65.5 37.9 104.3 43.2l-.1 1.1c-1.2 17.9 13 33 30.9 33s32.1-15.2 30.9-33l-.1-1.1c38.8-5.3 74.5-20.6 104.3-43.2l.7 .8c11.8 13.5 32.5 14.2 45.2 1.5s12-33.4-1.5-45.2l-.8-.7c22.6-29.8 37.9-65.5 43.2-104.3l1.1 .1c17.9 1.2 33-13 33-30.9s-15.2-32.1-33-30.9l-1.1 .1zM163.2 125.6c19.3-13.8 41.9-23.4 66.2-27.5l4.3 64.4c-10 2.4-19.5 6.4-28 11.6l-42.5-48.6zm-65 103.8c4.1-24.4 13.7-46.9 27.5-66.2l48.6 42.5c-5.3 8.5-9.2 18-11.6 28l-64.4-4.3zm27.5 119.4c-13.8-19.3-23.4-41.9-27.5-66.2l64.4-4.3c2.4 10 6.4 19.5 11.6 28l-48.6 42.5zm103.8 65c-24.4-4.1-46.9-13.7-66.2-27.4l42.5-48.6c8.5 5.3 18 9.2 28 11.6l-4.3 64.4zm119.4-27.4c-19.3 13.8-41.9 23.4-66.2 27.4l-4.3-64.4c10-2.4 19.5-6.4 28-11.6l42.5 48.6zm65-103.8c-4.1 24.4-13.7 46.9-27.4 66.2l-48.6-42.5c5.3-8.5 9.2-18 11.6-28l64.4 4.3zm-65-156.9l-42.5 48.6c-8.6-5.3-18-9.2-28-11.6l4.3-64.4c24.4 4.1 46.9 13.7 66.2 27.5zM256 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faHotdog = {
    prefix: 'fas',
    iconName: 'hotdog',
    icon: [
      512,
      512,
      [127789],
      'f80f',
      'M488.6 23.4c31.2 31.2 31.2 81.9 0 113.1l-352 352c-31.2 31.2-81.9 31.2-113.1 0s-31.2-81.9 0-113.1l352-352c31.2-31.2 81.9-31.2 113.1 0zM443.3 92.7c-6.2-6.2-16.4-6.2-22.6 0c-12.5 12.5-23.8 15.1-37.5 17.6l-2.5 .4c-13.8 2.5-31.6 5.6-48 22c-16.7 16.7-20.9 36-24.1 50.9l0 0v0l-.2 1c-3.4 15.6-6 26.4-15.7 36.1s-20.5 12.3-36.1 15.7l-1 .2c-14.9 3.2-34.2 7.4-50.9 24.1s-20.9 36-24.1 50.9l-.2 1c-3.4 15.6-6 26.4-15.7 36.1c-9.2 9.2-18 10.8-32.7 13.4l0 0-.9 .2c-15.6 2.8-34.9 6.9-54.4 26.4c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0c12.5-12.5 23.8-15.1 37.5-17.6l2.5-.4c13.8-2.5 31.6-5.6 48-22c16.7-16.7 20.9-36 24.1-50.9l.2-1c3.4-15.6 6-26.4 15.7-36.1s20.5-12.3 36.1-15.7l1-.2c14.9-3.2 34.2-7.4 50.9-24.1s20.9-36 24.1-50.9l.2-1c3.4-15.6 6-26.4 15.7-36.1c9.2-9.2 18-10.8 32.7-13.4l.9-.2c15.6-2.8 34.9-6.9 54.4-26.4c6.2-6.2 6.2-16.4 0-22.6zM191.2 479.2l288-288L495 207c10.9 10.9 17 25.6 17 41s-6.1 30.1-17 41L289 495c-10.9 10.9-25.6 17-41 17s-30.1-6.1-41-17l-15.8-15.8zM17 305C6.1 294.1 0 279.4 0 264s6.1-30.1 17-41L223 17C233.9 6.1 248.6 0 264 0s30.1 6.1 41 17l15.8 15.8-288 288L17 305z',
    ],
  };
  var faPersonWalkingWithCane = {
    prefix: 'fas',
    iconName: 'person-walking-with-cane',
    icon: [
      512,
      512,
      ['blind'],
      'f29d',
      'M176 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-8.4 32c-36.4 0-69.6 20.5-85.9 53.1L35.4 273.7c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3L128 231.6v43.2c0 17 6.7 33.3 18.7 45.3L224 397.3V480c0 17.7 14.3 32 32 32s32-14.3 32-32V390.6c0-12.7-5.1-24.9-14.1-33.9L224 306.7V213.3l70.4 93.9c10.6 14.1 30.7 17 44.8 6.4s17-30.7 6.4-44.8L268.8 166.4C250.7 142.2 222.2 128 192 128H167.6zM128.3 346.8L97 472.2c-4.3 17.1 6.1 34.5 23.3 38.8s34.5-6.1 38.8-23.3l22-88.2-52.8-52.8zM450.8 505.1c5 7.3 15 9.1 22.3 4s9.1-15 4-22.3L358.9 316.1c-2.8 3.8-6.1 7.3-10.1 10.3c-5 3.8-10.5 6.4-16.2 7.9L450.8 505.1z',
    ],
  };
  var faBlind = faPersonWalkingWithCane;
  var faDrum = {
    prefix: 'fas',
    iconName: 'drum',
    icon: [
      576,
      512,
      [129345],
      'f569',
      'M533.2 76.1c11.1-7.3 14.2-22.1 6.9-33.2s-22.1-14.2-33.2-6.9L402.2 104.5C367.8 98.7 329 96 288 96C146.6 96 32 128 32 208V368c0 31.3 27.4 58.8 72 78.7V344c0-13.3 10.7-24 24-24s24 10.7 24 24V463.4c33 8.9 71.1 14.5 112 16.1V376c0-13.3 10.7-24 24-24s24 10.7 24 24V479.5c40.9-1.6 79-7.2 112-16.1V344c0-13.3 10.7-24 24-24s24 10.7 24 24V446.7c44.6-19.9 72-47.4 72-78.7V208c0-41.1-30.2-69.5-78.8-87.4l67.9-44.5zM339.4 145.6l-64.6 42.3c-11.1 7.3-14.2 22.1-6.9 33.2s22.1 14.2 33.2 6.9l111.1-72.8c14.7 3.2 27.9 7 39.4 11.5C490.4 181.8 496 197.4 496 208c0 .8-2.7 17.2-46 35.9C411.1 260.7 354 272 288 272s-123.1-11.3-162-28.1C82.7 225.2 80 208.8 80 208c0-10.6 5.6-26.2 44.4-41.3C162.6 151.9 219.8 144 288 144c18 0 35.1 .5 51.4 1.6z',
    ],
  };
  var faIceCream = {
    prefix: 'fas',
    iconName: 'ice-cream',
    icon: [
      384,
      512,
      [127848],
      'f810',
      'M335.1 160c.6-5.3 .9-10.6 .9-16C336 64.5 271.5 0 192 0S48 64.5 48 144c0 5.4 .3 10.7 .9 16H48c-26.5 0-48 21.5-48 48s21.5 48 48 48h53.5 181H336c26.5 0 48-21.5 48-48s-21.5-48-48-48h-.9zM64 288L168.8 497.7c4.4 8.8 13.3 14.3 23.2 14.3s18.8-5.5 23.2-14.3L320 288H64z',
    ],
  };
  var faHeartCircleBolt = {
    prefix: 'fas',
    iconName: 'heart-circle-bolt',
    icon: [
      576,
      512,
      [],
      'e4fc',
      'M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9l2.6-2.4C267.2 438.6 256 404.6 256 368c0-97.2 78.8-176 176-176c28.3 0 55 6.7 78.7 18.5c.9-6.5 1.3-13 1.3-19.6v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm47.9-225c4.3 3.7 5.4 9.9 2.6 14.9L452.4 356H488c5.2 0 9.8 3.3 11.4 8.2s-.1 10.3-4.2 13.4l-96 72c-4.5 3.4-10.8 3.2-15.1-.6s-5.4-9.9-2.6-14.9L411.6 380H376c-5.2 0-9.8-3.3-11.4-8.2s.1-10.3 4.2-13.4l96-72c4.5-3.4 10.8-3.2 15.1 .6z',
    ],
  };
  var faFax = {
    prefix: 'fas',
    iconName: 'fax',
    icon: [
      512,
      512,
      [128224, 128439],
      'f1ac',
      'M128 64v96h64V64H386.7L416 93.3V160h64V93.3c0-17-6.7-33.3-18.7-45.3L432 18.7C420 6.7 403.7 0 386.7 0H192c-35.3 0-64 28.7-64 64zM0 160V480c0 17.7 14.3 32 32 32H64c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32H32c-17.7 0-32 14.3-32 32zm480 32H128V480c0 17.7 14.3 32 32 32H480c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM256 320c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm160-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM384 448c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm-96-32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faParagraph = {
    prefix: 'fas',
    iconName: 'paragraph',
    icon: [
      448,
      512,
      [182],
      'f1dd',
      'M192 32h64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H384l0 352c0 17.7-14.3 32-32 32s-32-14.3-32-32l0-352H288V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H192c-88.4 0-160-71.6-160-160s71.6-160 160-160z',
    ],
  };
  var faCheckToSlot = {
    prefix: 'fas',
    iconName: 'check-to-slot',
    icon: [
      576,
      512,
      ['vote-yea'],
      'f772',
      'M96 80c0-26.5 21.5-48 48-48H432c26.5 0 48 21.5 48 48V384H96V80zm313 47c-9.4-9.4-24.6-9.4-33.9 0l-111 111-47-47c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0L409 161c9.4-9.4 9.4-24.6 0-33.9zM0 336c0-26.5 21.5-48 48-48H64V416H512V288h16c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V336z',
    ],
  };
  var faVoteYea = faCheckToSlot;
  var faStarHalf = {
    prefix: 'fas',
    iconName: 'star-half',
    icon: [
      576,
      512,
      [61731],
      'f089',
      'M288 0c-12.2 .1-23.3 7-28.6 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3L288 439.8V0zM429.9 512c1.1 .1 2.1 .1 3.2 0h-3.2z',
    ],
  };
  var faBoxesStacked = {
    prefix: 'fas',
    iconName: 'boxes-stacked',
    icon: [
      576,
      512,
      [62625, 'boxes', 'boxes-alt'],
      'f468',
      'M160 48c0-26.5 21.5-48 48-48h48V80c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V0h48c26.5 0 48 21.5 48 48V176c0 26.5-21.5 48-48 48H208c-26.5 0-48-21.5-48-48V48zM48 288H96v80c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V288h48c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V336c0-26.5 21.5-48 48-48zm320 0h48v80c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V288h48c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H368c-26.5 0-48-21.5-48-48V336c0-26.5 21.5-48 48-48z',
    ],
  };
  var faBoxes = faBoxesStacked;
  var faBoxesAlt = faBoxesStacked;
  var faLink = {
    prefix: 'fas',
    iconName: 'link',
    icon: [
      640,
      512,
      [128279, 'chain'],
      'f0c1',
      'M579.8 267.7c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114L422.3 334.8c-31.5 31.5-82.5 31.5-114 0c-27.9-27.9-31.5-71.8-8.6-103.8l1.1-1.6c10.3-14.4 6.9-34.4-7.4-44.6s-34.4-6.9-44.6 7.4l-1.1 1.6C206.5 251.2 213 330 263 380c56.5 56.5 148 56.5 204.5 0L579.8 267.7zM60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5L217.7 177.2c31.5-31.5 82.5-31.5 114 0c27.9 27.9 31.5 71.8 8.6 103.9l-1.1 1.6c-10.3 14.4-6.9 34.4 7.4 44.6s34.4 6.9 44.6-7.4l1.1-1.6C433.5 260.8 427 182 377 132c-56.5-56.5-148-56.5-204.5 0L60.2 244.3z',
    ],
  };
  var faChain = faLink;
  var faEarListen = {
    prefix: 'fas',
    iconName: 'ear-listen',
    icon: [
      512,
      512,
      ['assistive-listening-systems'],
      'f2a2',
      'M398.3 3.4c-15.8-7.9-35-1.5-42.9 14.3c-7.9 15.8-1.5 34.9 14.2 42.9l.4 .2c.4 .2 1.1 .6 2.1 1.2c2 1.2 5 3 8.7 5.6c7.5 5.2 17.6 13.2 27.7 24.2C428.5 113.4 448 146 448 192c0 17.7 14.3 32 32 32s32-14.3 32-32c0-66-28.5-113.4-56.5-143.7C441.6 33.2 427.7 22.2 417.3 15c-5.3-3.7-9.7-6.4-13-8.3c-1.6-1-3-1.7-4-2.2c-.5-.3-.9-.5-1.2-.7l-.4-.2-.2-.1-.1 0 0 0c0 0 0 0-14.3 28.6L398.3 3.4zM128.7 227.5c6.2-56 53.7-99.5 111.3-99.5c61.9 0 112 50.1 112 112c0 29.3-11.2 55.9-29.6 75.9c-17 18.4-34.4 45.1-34.4 78V400c0 26.5-21.5 48-48 48c-17.7 0-32 14.3-32 32s14.3 32 32 32c61.9 0 112-50.1 112-112v-6.1c0-9.8 5.4-21.7 17.4-34.7C398.3 327.9 416 286 416 240c0-97.2-78.8-176-176-176C149.4 64 74.8 132.5 65.1 220.5c-1.9 17.6 10.7 33.4 28.3 35.3s33.4-10.7 35.3-28.3zM32 512c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM192 352c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-64-64c-12.5-12.5-32.8-12.5-45.3 0zM208 240c0-17.7 14.3-32 32-32s32 14.3 32 32c0 13.3 10.7 24 24 24s24-10.7 24-24c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 13.3 10.7 24 24 24s24-10.7 24-24z',
    ],
  };
  var faAssistiveListeningSystems = faEarListen;
  var faTreeCity = {
    prefix: 'fas',
    iconName: 'tree-city',
    icon: [
      640,
      512,
      [],
      'e587',
      'M288 48c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48V192h40V120c0-13.3 10.7-24 24-24s24 10.7 24 24v72h24c26.5 0 48 21.5 48 48V464c0 26.5-21.5 48-48 48H432 336c-26.5 0-48-21.5-48-48V48zm64 32v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V80c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16zm16 80c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H368zM352 272v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H368c-8.8 0-16 7.2-16 16zm176-16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H528zM512 368v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H528c-8.8 0-16 7.2-16 16zM224 160c0 6-1 11-2 16c20 14 34 38 34 64c0 45-36 80-80 80H160V480c0 18-15 32-32 32c-18 0-32-14-32-32V320H80c-45 0-80-35-80-80c0-26 13-50 33-64c-1-5-1-10-1-16c0-53 42-96 96-96c53 0 96 43 96 96z',
    ],
  };
  var faPlay = {
    prefix: 'fas',
    iconName: 'play',
    icon: [
      384,
      512,
      [9654],
      'f04b',
      'M73 39c-14.8-9.1-33.4-9.4-48.5-.9S0 62.6 0 80V432c0 17.4 9.4 33.4 24.5 41.9s33.7 8.1 48.5-.9L361 297c14.3-8.7 23-24.2 23-41s-8.7-32.2-23-41L73 39z',
    ],
  };
  var faFont = {
    prefix: 'fas',
    iconName: 'font',
    icon: [
      448,
      512,
      [],
      'f031',
      'M254 52.8C249.3 40.3 237.3 32 224 32s-25.3 8.3-30 20.8L57.8 416H32c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32h-1.8l18-48H303.8l18 48H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H390.2L254 52.8zM279.8 304H168.2L224 155.1 279.8 304z',
    ],
  };
  var faRupiahSign = {
    prefix: 'fas',
    iconName: 'rupiah-sign',
    icon: [
      512,
      512,
      [],
      'e23d',
      'M0 64C0 46.3 14.3 32 32 32h80c79.5 0 144 64.5 144 144c0 58.8-35.2 109.3-85.7 131.7l51.4 128.4c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8L106.3 320H64V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V288 64zM64 256h48c44.2 0 80-35.8 80-80s-35.8-80-80-80H64V256zm256-96h80c61.9 0 112 50.1 112 112s-50.1 112-112 112H352v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V352 192c0-17.7 14.3-32 32-32zm80 160c26.5 0 48-21.5 48-48s-21.5-48-48-48H352v96h48z',
    ],
  };
  var faMagnifyingGlass = {
    prefix: 'fas',
    iconName: 'magnifying-glass',
    icon: [
      512,
      512,
      [128269, 'search'],
      'f002',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352c79.5 0 144-64.5 144-144s-64.5-144-144-144S64 128.5 64 208s64.5 144 144 144z',
    ],
  };
  var faSearch = faMagnifyingGlass;
  var faTableTennisPaddleBall = {
    prefix: 'fas',
    iconName: 'table-tennis-paddle-ball',
    icon: [
      512,
      512,
      [127955, 'ping-pong-paddle-ball', 'table-tennis'],
      'f45d',
      'M416 288c-50.1 0-93.6 28.8-114.6 70.8L68.9 126.3l.6-.6 60.1-60.1c87.5-87.5 229.3-87.5 316.8 0c67.1 67.1 82.7 166.3 46.8 248.3C471.8 297.6 445 288 416 288zM49.3 151.9L290.1 392.7c-1.4 7.5-2.1 15.3-2.1 23.3c0 23.2 6.2 44.9 16.9 63.7c-3 .2-6.1 .3-9.2 .3H293c-33.9 0-66.5-13.5-90.5-37.5l-9.8-9.8c-13.1-13.1-34.6-12.4-46.8 1.7L88.2 501c-5.8 6.7-14.2 10.7-23 11s-17.5-3.1-23.8-9.4l-32-32C3.1 464.3-.3 455.7 0 446.9s4.3-17.2 11-23l66.6-57.7c14-12.2 14.8-33.7 1.7-46.8l-9.8-9.8C45.5 285.5 32 252.9 32 219v-2.7c0-22.8 6.1-44.9 17.3-64.3zM416 512c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96z',
    ],
  };
  var faPingPongPaddleBall = faTableTennisPaddleBall;
  var faTableTennis = faTableTennisPaddleBall;
  var faPersonDotsFromLine = {
    prefix: 'fas',
    iconName: 'person-dots-from-line',
    icon: [
      576,
      512,
      ['diagnoses'],
      'f470',
      'M288 176c48.6 0 88-39.4 88-88s-39.4-88-88-88s-88 39.4-88 88s39.4 88 88 88zM78.7 372.9c15-12.5 50-34.4 97.3-50.1V432H400V322.7c47.3 15.8 82.3 37.7 97.3 50.1c20.4 17 50.6 14.2 67.6-6.1s14.2-50.6-6.1-67.6c-12-10-30.1-22.5-53.2-35C497.2 278.4 481.7 288 464 288c-26.5 0-48-21.5-48-48c0-4.3 .6-8.4 1.6-12.4C379.1 215.9 335.3 208 288 208c-60.2 0-114.9 12.9-160 29.9c0 .7 0 1.4 0 2.1c0 26.5-21.5 48-48 48c-11.8 0-22.7-4.3-31-11.4c-13.1 8.1-23.7 15.9-31.7 22.5c-20.4 17-23.1 47.2-6.1 67.6s47.2 23.1 67.6 6.1zM24 464c-13.3 0-24 10.7-24 24s10.7 24 24 24H552c13.3 0 24-10.7 24-24s-10.7-24-24-24H24zM272 280c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm56 104c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zM96 240c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm368 16c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faDiagnoses = faPersonDotsFromLine;
  var faTrashCanArrowUp = {
    prefix: 'fas',
    iconName: 'trash-can-arrow-up',
    icon: [
      448,
      512,
      ['trash-restore-alt'],
      'f82a',
      'M163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3C140.6 6.8 151.7 0 163.8 0zM32 128H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V128zm192 64c-6.4 0-12.5 2.5-17 7l-80 80c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39V408c0 13.3 10.7 24 24 24s24-10.7 24-24V273.9l39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-4.5-4.5-10.6-7-17-7z',
    ],
  };
  var faTrashRestoreAlt = faTrashCanArrowUp;
  var faNairaSign = {
    prefix: 'fas',
    iconName: 'naira-sign',
    icon: [
      448,
      512,
      [],
      'e1f6',
      'M122.6 46.3c-7.8-11.7-22.4-17-35.9-12.9S64 49.9 64 64V256H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64V448c0 17.7 14.3 32 32 32s32-14.3 32-32V320H228.2l97.2 145.8c7.8 11.7 22.4 17 35.9 12.9s22.7-16.5 22.7-30.6V320h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H384V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V256H262.5L122.6 46.3zM305.1 320H320v22.3L305.1 320zM185.5 256H128V169.7L185.5 256z',
    ],
  };
  var faCartArrowDown = {
    prefix: 'fas',
    iconName: 'cart-arrow-down',
    icon: [
      576,
      512,
      [],
      'f218',
      'M0 24C0 10.7 10.7 0 24 0H96c11.5 0 21.4 8.2 23.6 19.5L122 32H312V134.1l-23-23c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l64 64c9.4 9.4 24.6 9.4 33.9 0l64-64c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-23 23V32H541.8c21.2 0 36.5 20.3 30.8 40.7l-54 192c-3.9 13.8-16.5 23.3-30.8 23.3h-317l9.1 48H488c13.3 0 24 10.7 24 24s-10.7 24-24 24H160c-11.5 0-21.4-8.2-23.6-19.5L76.1 48H24C10.7 48 0 37.3 0 24zM224 464c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zm240 48c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faWalkieTalkie = {
    prefix: 'fas',
    iconName: 'walkie-talkie',
    icon: [
      384,
      512,
      [],
      'f8ef',
      'M112 24c0-13.3-10.7-24-24-24S64 10.7 64 24V96H48C21.5 96 0 117.5 0 144V300.1c0 12.7 5.1 24.9 14.1 33.9l3.9 3.9c9 9 14.1 21.2 14.1 33.9V464c0 26.5 21.5 48 48 48H304c26.5 0 48-21.5 48-48V371.9c0-12.7 5.1-24.9 14.1-33.9l3.9-3.9c9-9 14.1-21.2 14.1-33.9V144c0-26.5-21.5-48-48-48H320c0-17.7-14.3-32-32-32s-32 14.3-32 32H224c0-17.7-14.3-32-32-32s-32 14.3-32 32H112V24zm0 136H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faFilePen = {
    prefix: 'fas',
    iconName: 'file-pen',
    icon: [
      576,
      512,
      [128221, 'file-edit'],
      'f31c',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384V285.7l-86.8 86.8c-10.3 10.3-17.5 23.1-21 37.2l-18.7 74.9c-2.3 9.2-1.8 18.8 1.3 27.5H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zM549.8 235.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-29.4 29.4-71-71 29.4-29.4c15.6-15.6 40.9-15.6 56.6 0zM311.9 417L441.1 287.8l71 71L382.9 487.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z',
    ],
  };
  var faFileEdit = faFilePen;
  var faReceipt = {
    prefix: 'fas',
    iconName: 'receipt',
    icon: [
      384,
      512,
      [129534],
      'f543',
      'M14 2.2C22.5-1.7 32.5-.3 39.6 5.8L80 40.4 120.4 5.8c9-7.7 22.3-7.7 31.2 0L192 40.4 232.4 5.8c9-7.7 22.2-7.7 31.2 0L304 40.4 344.4 5.8c7.1-6.1 17.1-7.5 25.6-3.6s14 12.4 14 21.8V488c0 9.4-5.5 17.9-14 21.8s-18.5 2.5-25.6-3.6L304 471.6l-40.4 34.6c-9 7.7-22.2 7.7-31.2 0L192 471.6l-40.4 34.6c-9 7.7-22.3 7.7-31.2 0L80 471.6 39.6 506.2c-7.1 6.1-17.1 7.5-25.6 3.6S0 497.4 0 488V24C0 14.6 5.5 6.1 14 2.2zM96 144c-8.8 0-16 7.2-16 16s7.2 16 16 16H288c8.8 0 16-7.2 16-16s-7.2-16-16-16H96zM80 352c0 8.8 7.2 16 16 16H288c8.8 0 16-7.2 16-16s-7.2-16-16-16H96c-8.8 0-16 7.2-16 16zM96 240c-8.8 0-16 7.2-16 16s7.2 16 16 16H288c8.8 0 16-7.2 16-16s-7.2-16-16-16H96z',
    ],
  };
  var faSquarePen = {
    prefix: 'fas',
    iconName: 'square-pen',
    icon: [
      448,
      512,
      ['pen-square', 'pencil-square'],
      'f14b',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM325.8 139.7l14.4 14.4c15.6 15.6 15.6 40.9 0 56.6l-21.4 21.4-71-71 21.4-21.4c15.6-15.6 40.9-15.6 56.6 0zM119.9 289L225.1 183.8l71 71L190.9 359.9c-4.1 4.1-9.2 7-14.9 8.4l-60.1 15c-5.5 1.4-11.2-.2-15.2-4.2s-5.6-9.7-4.2-15.2l15-60.1c1.4-5.6 4.3-10.8 8.4-14.9z',
    ],
  };
  var faPenSquare = faSquarePen;
  var faPencilSquare = faSquarePen;
  var faSuitcaseRolling = {
    prefix: 'fas',
    iconName: 'suitcase-rolling',
    icon: [
      384,
      512,
      [],
      'f5c1',
      'M144 56c0-4.4 3.6-8 8-8h80c4.4 0 8 3.6 8 8v72H144V56zm176 72H288V56c0-30.9-25.1-56-56-56H152C121.1 0 96 25.1 96 56v72H64c-35.3 0-64 28.7-64 64V416c0 35.3 28.7 64 64 64c0 17.7 14.3 32 32 32s32-14.3 32-32H256c0 17.7 14.3 32 32 32s32-14.3 32-32c35.3 0 64-28.7 64-64V192c0-35.3-28.7-64-64-64zM112 224H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 128H272c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faPersonCircleExclamation = {
    prefix: 'fas',
    iconName: 'person-circle-exclamation',
    icon: [
      576,
      512,
      [],
      'e53f',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zM432 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm0-192c-8.8 0-16 7.2-16 16v80c0 8.8 7.2 16 16 16s16-7.2 16-16V288c0-8.8-7.2-16-16-16z',
    ],
  };
  var faChevronDown = {
    prefix: 'fas',
    iconName: 'chevron-down',
    icon: [
      512,
      512,
      [],
      'f078',
      'M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z',
    ],
  };
  var faBatteryFull = {
    prefix: 'fas',
    iconName: 'battery-full',
    icon: [
      576,
      512,
      [128267, 'battery', 'battery-5'],
      'f240',
      'M0 176c0-44.2 35.8-80 80-80H464c44.2 0 80 35.8 80 80v16c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32v16c0 44.2-35.8 80-80 80H80c-44.2 0-80-35.8-80-80V176zm80-16c-8.8 0-16 7.2-16 16V336c0 8.8 7.2 16 16 16H464c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H80zm368 32V320H96V192H448z',
    ],
  };
  var faBattery = faBatteryFull;
  var faBattery5 = faBatteryFull;
  var faSkullCrossbones = {
    prefix: 'fas',
    iconName: 'skull-crossbones',
    icon: [
      512,
      512,
      [128369, 9760],
      'f714',
      'M400 128c0 44.4-25.4 83.5-64 106.4V256c0 17.7-14.3 32-32 32H208c-17.7 0-32-14.3-32-32V234.4c-38.6-23-64-62.1-64-106.4C112 57.3 176.5 0 256 0s144 57.3 144 128zM200 176c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm144-32c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM35.4 273.7c7.9-15.8 27.1-22.2 42.9-14.3L256 348.2l177.7-88.8c15.8-7.9 35-1.5 42.9 14.3s1.5 35-14.3 42.9L327.6 384l134.8 67.4c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3L256 419.8 78.3 508.6c-15.8 7.9-35 1.5-42.9-14.3s-1.5-35 14.3-42.9L184.4 384 49.7 316.6c-15.8-7.9-22.2-27.1-14.3-42.9z',
    ],
  };
  var faCodeCompare = {
    prefix: 'fas',
    iconName: 'code-compare',
    icon: [
      512,
      512,
      [],
      'e13a',
      'M320 488c0 9.5-5.6 18.1-14.2 21.9s-18.8 2.3-25.8-4.1l-80-72c-5.1-4.6-7.9-11-7.9-17.8s2.9-13.3 7.9-17.8l80-72c7-6.3 17.2-7.9 25.8-4.1s14.2 12.4 14.2 21.9v40h16c35.3 0 64-28.7 64-64V153.3C371.7 141 352 112.8 352 80c0-44.2 35.8-80 80-80s80 35.8 80 80c0 32.8-19.7 61-48 73.3V320c0 70.7-57.3 128-128 128H320v40zM456 80c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zM192 24c0-9.5 5.6-18.1 14.2-21.9s18.8-2.3 25.8 4.1l80 72c5.1 4.6 7.9 11 7.9 17.8s-2.9 13.3-7.9 17.8l-80 72c-7 6.3-17.2 7.9-25.8 4.1s-14.2-12.4-14.2-21.9V128H176c-35.3 0-64 28.7-64 64V358.7c28.3 12.3 48 40.5 48 73.3c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-32.8 19.7-61 48-73.3V192c0-70.7 57.3-128 128-128h16V24zM56 432c0 13.3 10.7 24 24 24s24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24z',
    ],
  };
  var faListUl = {
    prefix: 'fas',
    iconName: 'list-ul',
    icon: [
      512,
      512,
      ['list-dots'],
      'f0ca',
      'M64 144c26.5 0 48-21.5 48-48s-21.5-48-48-48S16 69.5 16 96s21.5 48 48 48zM192 64c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm0 160c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zM64 464c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm48-208c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faListDots = faListUl;
  var faSchoolLock = {
    prefix: 'fas',
    iconName: 'school-lock',
    icon: [
      640,
      512,
      [],
      'e56f',
      'M302.2 5.4c10.7-7.2 24.8-7.2 35.5 0l139 92.7L602.4 126c22 4.9 37.6 24.4 37.6 46.9V272c0-61.9-50.1-112-112-112s-112 50.1-112 112v24.6c-19.1 11.1-32 31.7-32 55.4H320.3l-.3 0c-35.3 0-64 28.7-64 64v96h64v0H48c-26.5 0-48-21.5-48-48V172.8c0-22.5 15.6-42 37.6-46.9L163.2 98.1l139-92.7zM80 208v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V208c0-8.8-7.2-16-16-16H96c-8.8 0-16 7.2-16 16zm0 128v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V336c0-8.8-7.2-16-16-16H96c-8.8 0-16 7.2-16 16zm240-72c48.6 0 88-39.4 88-88s-39.4-88-88-88s-88 39.4-88 88s39.4 88 88 88zm16-120v16h16c8.8 0 16 7.2 16 16s-7.2 16-16 16H320c-8.8 0-16-7.2-16-16V144c0-8.8 7.2-16 16-16s16 7.2 16 16zm192 96c-17.7 0-32 14.3-32 32v48h64V272c0-17.7-14.3-32-32-32zm-80 32c0-44.2 35.8-80 80-80s80 35.8 80 80v48c17.7 0 32 14.3 32 32V480c0 17.7-14.3 32-32 32H448c-17.7 0-32-14.3-32-32V352c0-17.7 14.3-32 32-32V272z',
    ],
  };
  var faTowerCell = {
    prefix: 'fas',
    iconName: 'tower-cell',
    icon: [
      576,
      512,
      [],
      'e585',
      'M62.6 2.3C46.2-4.3 27.6 3.6 20.9 20C7.4 53.4 0 89.9 0 128s7.4 74.6 20.9 108c6.6 16.4 25.3 24.3 41.7 17.7S86.9 228.4 80.3 212C69.8 186.1 64 157.8 64 128s5.8-58.1 16.3-84C86.9 27.6 79 9 62.6 2.3zm450.8 0C497 9 489.1 27.6 495.7 44C506.2 69.9 512 98.2 512 128s-5.8 58.1-16.3 84c-6.6 16.4 1.3 35 17.7 41.7s35-1.3 41.7-17.7c13.5-33.4 20.9-69.9 20.9-108s-7.4-74.6-20.9-108C548.4 3.6 529.8-4.3 513.4 2.3zM340.1 165.2c7.5-10.5 11.9-23.3 11.9-37.2c0-35.3-28.7-64-64-64s-64 28.7-64 64c0 13.9 4.4 26.7 11.9 37.2L98.9 466.8c-7.3 16.1-.2 35.1 15.9 42.4s35.1 .2 42.4-15.9L177.7 448H398.3l20.6 45.2c7.3 16.1 26.3 23.2 42.4 15.9s23.2-26.3 15.9-42.4L340.1 165.2zM369.2 384H206.8l14.5-32H354.7l14.5 32zM288 205.3L325.6 288H250.4L288 205.3zM163.3 73.6c5.3-12.1-.2-26.3-12.4-31.6s-26.3 .2-31.6 12.4C109.5 77 104 101.9 104 128s5.5 51 15.3 73.6c5.3 12.1 19.5 17.7 31.6 12.4s17.7-19.5 12.4-31.6C156 165.8 152 147.4 152 128s4-37.8 11.3-54.4zM456.7 54.4c-5.3-12.1-19.5-17.7-31.6-12.4s-17.7 19.5-12.4 31.6C420 90.2 424 108.6 424 128s-4 37.8-11.3 54.4c-5.3 12.1 .2 26.3 12.4 31.6s26.3-.2 31.6-12.4C466.5 179 472 154.1 472 128s-5.5-51-15.3-73.6z',
    ],
  };
  var faDownLong = {
    prefix: 'fas',
    iconName: 'down-long',
    icon: [
      320,
      512,
      ['long-arrow-alt-down'],
      'f309',
      'M318 334.5c3.8 8.8 2 19-4.6 26l-136 144c-4.5 4.8-10.8 7.5-17.4 7.5s-12.9-2.7-17.4-7.5l-136-144c-6.6-7-8.4-17.2-4.6-26S14.4 320 24 320h88l0-288c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32l0 288h88c9.6 0 18.2 5.7 22 14.5z',
    ],
  };
  var faLongArrowAltDown = faDownLong;
  var faRankingStar = {
    prefix: 'fas',
    iconName: 'ranking-star',
    icon: [
      640,
      512,
      [],
      'e561',
      'M353.8 54.1L330.2 6.3c-3.9-8.3-16.1-8.6-20.4 0L286.2 54.1l-52.3 7.5c-9.3 1.4-13.3 12.9-6.4 19.8l38 37-9 52.1c-1.4 9.3 8.2 16.5 16.8 12.2l46.9-24.8 46.6 24.4c8.6 4.3 18.3-2.9 16.8-12.2l-9-52.1 38-36.6c6.8-6.8 2.9-18.3-6.4-19.8l-52.3-7.5zM256 256c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H384c17.7 0 32-14.3 32-32V288c0-17.7-14.3-32-32-32H256zM32 320c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H160c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32H32zm416 96v64c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V416c0-17.7-14.3-32-32-32H480c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faChessKing = {
    prefix: 'fas',
    iconName: 'chess-king',
    icon: [
      448,
      512,
      [9818],
      'f43f',
      'M224 0c17.7 0 32 14.3 32 32V48h16c17.7 0 32 14.3 32 32s-14.3 32-32 32H256v48H416c10.3 0 19.9 4.9 26 13.3s7.7 19.1 4.4 28.8L375.1 416H72.9L1.6 202.1C-1.6 192.4 0 181.6 6 173.3s15.7-13.3 26-13.3H192V112H176c-17.7 0-32-14.3-32-32s14.3-32 32-32h16V32c0-17.7 14.3-32 32-32zM32 480c0-17.7 14.3-32 32-32H83.6 364.4 384c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 128 64c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faPersonHarassing = {
    prefix: 'fas',
    iconName: 'person-harassing',
    icon: [
      576,
      512,
      [],
      'e549',
      'M192 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM59.4 304.5L88 256.9V480c0 17.7 14.3 32 32 32s32-14.3 32-32V352h16V480c0 17.7 14.3 32 32 32s32-14.3 32-32V235.3l47.4 57.1c11.3 13.6 31.5 15.5 45.1 4.2s15.5-31.5 4.2-45.1l-73.7-88.9c-18.2-22-45.3-34.7-73.9-34.7H145.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9zM480 240c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM464 344v58.7l-41.4-41.4c-7.3-7.3-17.6-10.6-27.8-9s-18.9 8.1-23.5 17.3l-48 96c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3L408.8 438l54.7 54.7c12.4 12.4 29.1 19.3 46.6 19.3c36.4 0 65.9-29.5 65.9-65.9V344c0-30.9-25.1-56-56-56s-56 25.1-56 56zM288 48c0 8.8 7.2 16 16 16h56c8.8 0 16-7.2 16-16s-7.2-16-16-16H304c-8.8 0-16 7.2-16 16zm-.8 49.7c-7.9-4-17.5-.7-21.5 7.2s-.7 17.5 7.2 21.5l48 24c7.9 4 17.5 .7 21.5-7.2s.7-17.5-7.2-21.5l-48-24z',
    ],
  };
  var faBrazilianRealSign = {
    prefix: 'fas',
    iconName: 'brazilian-real-sign',
    icon: [
      512,
      512,
      [],
      'e46c',
      'M400 0c17.7 0 32 14.3 32 32V50.2c12.5 2.3 24.7 6.4 36.2 12.1l10.1 5.1c15.8 7.9 22.2 27.1 14.3 42.9s-27.1 22.2-42.9 14.3l-10.2-5.1c-9.9-5-20.9-7.5-32-7.5h-1.7c-29.8 0-53.9 24.1-53.9 53.9c0 22 13.4 41.8 33.9 50l52 20.8c44.7 17.9 74.1 61.2 74.1 109.4v3.4c0 51.2-33.6 94.6-80 109.2V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V460.6c-15-3.5-29.4-9.7-42.3-18.3l-23.4-15.6c-14.7-9.8-18.7-29.7-8.9-44.4s29.7-18.7 44.4-8.9L361.2 389c10.8 7.2 23.4 11 36.3 11c27.9 0 50.5-22.6 50.5-50.5v-3.4c0-22-13.4-41.8-33.9-50l-52-20.8C317.3 257.4 288 214.1 288 165.9C288 114 321.5 70 368 54.2V32c0-17.7 14.3-32 32-32zM0 64C0 46.3 14.3 32 32 32h80c79.5 0 144 64.5 144 144c0 58.8-35.2 109.3-85.7 131.7l51.4 128.4c6.6 16.4-1.4 35-17.8 41.6s-35-1.4-41.6-17.8L106.3 320H64V448c0 17.7-14.3 32-32 32s-32-14.3-32-32V288 64zM64 256h48c44.2 0 80-35.8 80-80s-35.8-80-80-80H64V256z',
    ],
  };
  var faLandmarkDome = {
    prefix: 'fas',
    iconName: 'landmark-dome',
    icon: [
      512,
      512,
      ['landmark-alt'],
      'f752',
      'M248 0h16c13.3 0 24 10.7 24 24V34.7C368.4 48.1 431.9 111.6 445.3 192H448c17.7 0 32 14.3 32 32s-14.3 32-32 32H64c-17.7 0-32-14.3-32-32s14.3-32 32-32h2.7C80.1 111.6 143.6 48.1 224 34.7V24c0-13.3 10.7-24 24-24zM64 288h64V416h40V288h64V416h48V288h64V416h40V288h64V420.3c.6 .3 1.2 .7 1.7 1.1l48 32c11.7 7.8 17 22.4 12.9 35.9S494.1 512 480 512H32c-14.1 0-26.5-9.2-30.6-22.7s1.1-28.1 12.9-35.9l48-32c.6-.4 1.2-.7 1.8-1.1V288z',
    ],
  };
  var faLandmarkAlt = faLandmarkDome;
  var faArrowUp = {
    prefix: 'fas',
    iconName: 'arrow-up',
    icon: [
      384,
      512,
      [8593],
      'f062',
      'M214.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 141.2V448c0 17.7 14.3 32 32 32s32-14.3 32-32V141.2L329.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160z',
    ],
  };
  var faTv = {
    prefix: 'fas',
    iconName: 'tv',
    icon: [
      640,
      512,
      [63717, 'television', 'tv-alt'],
      'f26c',
      'M64 64V352H576V64H64zM0 64C0 28.7 28.7 0 64 0H576c35.3 0 64 28.7 64 64V352c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64zM128 448H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H128c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faTelevision = faTv;
  var faTvAlt = faTv;
  var faShrimp = {
    prefix: 'fas',
    iconName: 'shrimp',
    icon: [
      512,
      512,
      [129424],
      'e448',
      'M64 32C28.7 32 0 60.7 0 96s28.7 64 64 64h1c3.7 88.9 77 160 167 160h56V128H264 88.8 64c-17.7 0-32-14.3-32-32s14.3-32 32-32H464c8.8 0 16-7.2 16-16s-7.2-16-16-16H64zM224 456c0 13.3 10.7 24 24 24h72V407.8l-64.1-22.4c-12.5-4.4-26.2 2.2-30.6 14.7s2.2 26.2 14.7 30.6l4.5 1.6C233 433.9 224 443.9 224 456zm128 23.3c36.4-3.3 69.5-17.6 96.1-39.6l-86.5-34.6c-3 1.8-6.2 3.2-9.6 4.3v69.9zM472.6 415c24.6-30.3 39.4-68.9 39.4-111c0-12.3-1.3-24.3-3.7-35.9L382.8 355.1c.8 3.4 1.2 7 1.2 10.6c0 4.6-.7 9-1.9 13.1L472.6 415zM336 128H320V320h18.3c9.9 0 19.1 3.2 26.6 8.5l133.5-92.4C471.8 172.6 409.1 128 336 128zM216 192c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faListCheck = {
    prefix: 'fas',
    iconName: 'list-check',
    icon: [
      576,
      512,
      ['tasks'],
      'f0ae',
      'M184.1 38.2c9.9 8.9 10.7 24 1.8 33.9l-72 80c-4.4 4.9-10.6 7.8-17.2 7.9s-12.9-2.4-17.6-7L39 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l22.1 22.1 55.1-61.2c8.9-9.9 24-10.7 33.9-1.8zm0 160c9.9 8.9 10.7 24 1.8 33.9l-72 80c-4.4 4.9-10.6 7.8-17.2 7.9s-12.9-2.4-17.6-7L39 273c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l22.1 22.1 55.1-61.2c8.9-9.9 24-10.7 33.9-1.8zM256 96c0-17.7 14.3-32 32-32H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H288c-17.7 0-32-14.3-32-32zm0 160c0-17.7 14.3-32 32-32H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H288c-17.7 0-32-14.3-32-32zM192 416c0-17.7 14.3-32 32-32H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H224c-17.7 0-32-14.3-32-32zM80 464c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faTasks = faListCheck;
  var faJugDetergent = {
    prefix: 'fas',
    iconName: 'jug-detergent',
    icon: [
      384,
      512,
      [],
      'e519',
      'M96 24c0-13.3 10.7-24 24-24h80c13.3 0 24 10.7 24 24V48h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H88C74.7 96 64 85.3 64 72s10.7-24 24-24h8V24zM0 256c0-70.7 57.3-128 128-128H256c70.7 0 128 57.3 128 128V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V256zm256 0v96c0 17.7 14.3 32 32 32s32-14.3 32-32V256c0-17.7-14.3-32-32-32s-32 14.3-32 32z',
    ],
  };
  var faCircleUser = {
    prefix: 'fas',
    iconName: 'circle-user',
    icon: [
      512,
      512,
      [62142, 'user-circle'],
      'f2bd',
      'M399 384.2C376.9 345.8 335.4 320 288 320H224c-47.4 0-88.9 25.8-111 64.2c35.2 39.2 86.2 63.8 143 63.8s107.8-24.7 143-63.8zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 272c39.8 0 72-32.2 72-72s-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72z',
    ],
  };
  var faUserCircle = faCircleUser;
  var faUserShield = {
    prefix: 'fas',
    iconName: 'user-shield',
    icon: [
      640,
      512,
      [],
      'f505',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c1.8 0 3.5-.2 5.3-.5c-76.3-55.1-99.8-141-103.1-200.2c-16.1-4.8-33.1-7.3-50.7-7.3H178.3zm308.8-78.3l-120 48C358 277.4 352 286.2 352 296c0 63.3 25.9 168.8 134.8 214.2c5.9 2.5 12.6 2.5 18.5 0C614.1 464.8 640 359.3 640 296c0-9.8-6-18.6-15.1-22.3l-120-48c-5.7-2.3-12.1-2.3-17.8 0zM591.4 312c-3.9 50.7-27.2 116.7-95.4 149.7V273.8L591.4 312z',
    ],
  };
  var faWind = {
    prefix: 'fas',
    iconName: 'wind',
    icon: [
      512,
      512,
      [],
      'f72e',
      'M288 32c0 17.7 14.3 32 32 32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H352c53 0 96-43 96-96s-43-96-96-96H320c-17.7 0-32 14.3-32 32zm64 352c0 17.7 14.3 32 32 32h32c53 0 96-43 96-96s-43-96-96-96H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H384c-17.7 0-32 14.3-32 32zM128 512h32c53 0 96-43 96-96s-43-96-96-96H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H160c17.7 0 32 14.3 32 32s-14.3 32-32 32H128c-17.7 0-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faCarBurst = {
    prefix: 'fas',
    iconName: 'car-burst',
    icon: [
      640,
      512,
      ['car-crash'],
      'f5e1',
      'M176 8c-6.6 0-12.4 4-14.9 10.1l-29.4 74L55.6 68.9c-6.3-1.9-13.1 .2-17.2 5.3s-4.6 12.2-1.4 17.9l39.5 69.1L10.9 206.4c-5.4 3.7-8 10.3-6.5 16.7s6.7 11.2 13.1 12.2l78.7 12.2L90.6 327c-.5 6.5 3.1 12.7 9 15.5s12.9 1.8 17.8-2.6l35.3-32.5 9.5-35.4 10.4-38.6c8-29.9 30.5-52.1 57.9-60.9l41-59.2c11.3-16.3 26.4-28.9 43.5-37.2c-.4-.6-.8-1.2-1.3-1.8c-4.1-5.1-10.9-7.2-17.2-5.3L220.3 92.1l-29.4-74C188.4 12 182.6 8 176 8zM367.7 161.5l135.6 36.3c6.5 1.8 11.3 7.4 11.8 14.2l4.6 56.5-201.5-54 32.2-46.6c3.8-5.6 10.8-8.1 17.3-6.4zm-69.9-30l-47.9 69.3c-21.6 3-40.3 18.6-46.3 41l-10.4 38.6-16.6 61.8-8.3 30.9c-4.6 17.1 5.6 34.6 22.6 39.2l15.5 4.1c17.1 4.6 34.6-5.6 39.2-22.6l8.3-30.9 247.3 66.3-8.3 30.9c-4.6 17.1 5.6 34.6 22.6 39.2l15.5 4.1c17.1 4.6 34.6-5.6 39.2-22.6l8.3-30.9L595 388l10.4-38.6c6-22.4-2.5-45.2-19.6-58.7l-6.8-84c-2.7-33.7-26.4-62-59-70.8L384.2 99.7c-32.7-8.8-67.3 4-86.5 31.8zM268.3 308.8c-12.8-3.4-20.4-16.6-17-29.4s16.6-20.4 29.4-17s20.4 16.6 17 29.4s-16.6 20.4-29.4 17zM545 358.1c-3.4 12.8-16.6 20.4-29.4 17s-20.4-16.6-17-29.4s16.6-20.4 29.4-17s20.4 16.6 17 29.4z',
    ],
  };
  var faCarCrash = faCarBurst;
  var faY = {
    prefix: 'fas',
    iconName: 'y',
    icon: [
      384,
      512,
      [121],
      '59',
      'M58 45.4C47.8 31 27.8 27.7 13.4 38S-4.3 68.2 6 82.6L160 298.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V298.3L378 82.6c10.3-14.4 6.9-34.4-7.4-44.6S336.2 31 326 45.4L192 232.9 58 45.4z',
    ],
  };
  var faPersonSnowboarding = {
    prefix: 'fas',
    iconName: 'person-snowboarding',
    icon: [
      576,
      512,
      [127938, 'snowboarding'],
      'f7ce',
      'M241.7 3.4c15.8-7.9 35-1.5 42.9 14.3l25 50 42.4 8.5c19.5 3.9 37.8 12.3 53.5 24.5l126.1 98.1c14 10.9 16.5 31 5.6 44.9s-31 16.5-44.9 5.6l-72.1-56.1-71.5 31.8 33.1 27.6c23.2 19.3 33.5 50 26.7 79.4l-17.4 75.2c-2.2 9.4-8.2 16.8-16.1 21l86.5 33.1c4.6 1.8 9.4 2.6 14.3 2.6H504c13.3 0 24 10.7 24 24s-10.7 24-24 24H475.8c-10.8 0-21.4-2-31.5-5.8L92.1 371.3c-11.5-4.4-22-11.2-30.8-20L39 329c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l22.4 22.4c4 4 8.7 7.1 14 9.1l22.4 8.6c-.8-1.6-1.5-3.2-2.1-4.9c-5.6-16.8 3.5-34.9 20.2-40.5L224 264.9l0-53.2c0-24.2 13.7-46.4 35.4-57.2l45.2-22.6-7.5-1.5c-19.4-3.9-35.9-16.5-44.7-34.1l-25-50c-7.9-15.8-1.5-35 14.3-42.9zM171 350.1l159 60.9c-2.1-5.6-2.6-11.9-1.1-18.2l17.4-75.2c1.4-5.9-.7-12-5.4-15.9l-52.8-44 0 18.8c0 20.7-13.2 39-32.8 45.5L171 350.1zM464 96c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faSnowboarding = faPersonSnowboarding;
  var faTruckFast = {
    prefix: 'fas',
    iconName: 'truck-fast',
    icon: [
      640,
      512,
      ['shipping-fast'],
      'f48b',
      'M112 0C85.5 0 64 21.5 64 48V96H16c-8.8 0-16 7.2-16 16s7.2 16 16 16H64 272c8.8 0 16 7.2 16 16s-7.2 16-16 16H64 48c-8.8 0-16 7.2-16 16s7.2 16 16 16H64 240c8.8 0 16 7.2 16 16s-7.2 16-16 16H64 16c-8.8 0-16 7.2-16 16s7.2 16 16 16H64 208c8.8 0 16 7.2 16 16s-7.2 16-16 16H64V416c0 53 43 96 96 96s96-43 96-96H384c0 53 43 96 96 96s96-43 96-96h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V288 256 237.3c0-17-6.7-33.3-18.7-45.3L512 114.7c-12-12-28.3-18.7-45.3-18.7H416V48c0-26.5-21.5-48-48-48H112zM544 237.3V256H416V160h50.7L544 237.3zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm368-48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48z',
    ],
  };
  var faShippingFast = faTruckFast;
  var faFish = {
    prefix: 'fas',
    iconName: 'fish',
    icon: [
      576,
      512,
      [128031],
      'f578',
      'M180.5 141.5C219.7 108.5 272.6 80 336 80s116.3 28.5 155.5 61.5c39.1 33 66.9 72.4 81 99.8c4.7 9.2 4.7 20.1 0 29.3c-14.1 27.4-41.9 66.8-81 99.8C452.3 403.5 399.4 432 336 432s-116.3-28.5-155.5-61.5c-16.2-13.7-30.5-28.5-42.7-43.1L48.1 379.6c-12.5 7.3-28.4 5.3-38.7-4.9S-3 348.7 4.2 336.1L50 256 4.2 175.9c-7.2-12.6-5-28.4 5.3-38.6s26.1-12.2 38.7-4.9l89.7 52.3c12.2-14.6 26.5-29.4 42.7-43.1zM448 256c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faUserGraduate = {
    prefix: 'fas',
    iconName: 'user-graduate',
    icon: [
      448,
      512,
      [],
      'f501',
      'M219.3 .5c3.1-.6 6.3-.6 9.4 0l200 40C439.9 42.7 448 52.6 448 64s-8.1 21.3-19.3 23.5L352 102.9V160c0 70.7-57.3 128-128 128s-128-57.3-128-128V102.9L48 93.3v65.1l15.7 78.4c.9 4.7-.3 9.6-3.3 13.3s-7.6 5.9-12.4 5.9H16c-4.8 0-9.3-2.1-12.4-5.9s-4.3-8.6-3.3-13.3L16 158.4V86.6C6.5 83.3 0 74.3 0 64C0 52.6 8.1 42.7 19.3 40.5l200-40zM129.1 323.2l83.2 88.4c6.3 6.7 17 6.7 23.3 0l83.2-88.4c73.7 14.9 129.1 80 129.1 158.1c0 17-13.8 30.7-30.7 30.7H30.7C13.8 512 0 498.2 0 481.3c0-78.1 55.5-143.2 129.1-158.1z',
    ],
  };
  var faCircleHalfStroke = {
    prefix: 'fas',
    iconName: 'circle-half-stroke',
    icon: [
      512,
      512,
      [9680, 'adjust'],
      'f042',
      'M448 256c0-106-86-192-192-192V448c106 0 192-86 192-192zm64 0c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256z',
    ],
  };
  var faAdjust = faCircleHalfStroke;
  var faClapperboard = {
    prefix: 'fas',
    iconName: 'clapperboard',
    icon: [
      512,
      512,
      [],
      'e131',
      'M448 32H361.9l-1 1-127 127h92.1l1-1L453.8 32.3c-1.9-.2-3.8-.3-5.8-.3zm64 128V96c0-15.1-5.3-29.1-14-40l-104 104H512zM294.1 32H201.9l-1 1L73.9 160h92.1l1-1 127-127zM64 32C28.7 32 0 60.7 0 96v64H6.1l1-1 127-127H64zM512 192H0V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V192z',
    ],
  };
  var faCircleRadiation = {
    prefix: 'fas',
    iconName: 'circle-radiation',
    icon: [
      512,
      512,
      [9762, 'radiation-alt'],
      'f7ba',
      'M256 448C150 448 64 362 64 256S150 64 256 64s192 86 192 192s-86 192-192 192zm0 64c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM200 256c0-20.7 11.3-38.8 28-48.5l-36-62.3c-8.8-15.3-28.7-20.8-42-9c-25.6 22.6-43.9 53.3-50.9 88.1C95.7 241.5 110.3 256 128 256l72 0zm28 48.5l-36 62.4c-8.8 15.3-3.6 35.2 13.1 40.8c16 5.4 33.1 8.3 50.9 8.3s34.9-2.9 50.9-8.3c16.7-5.6 21.9-25.5 13.1-40.8l-36-62.4c-8.2 4.8-17.8 7.5-28 7.5s-19.8-2.7-28-7.5zM312 256l72 0c17.7 0 32.3-14.5 28.8-31.8c-7-34.8-25.3-65.5-50.9-88.1c-13.2-11.7-33.1-6.3-42 9l-36 62.3c16.7 9.7 28 27.8 28 48.5zm-56 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faRadiationAlt = faCircleRadiation;
  var faBaseball = {
    prefix: 'fas',
    iconName: 'baseball',
    icon: [
      512,
      512,
      [129358, 9918, 'baseball-ball'],
      'f433',
      'M62.7 223.4c-4.8 .4-9.7 .6-14.7 .6c-15.6 0-30.8-2-45.2-5.9C19.2 107.1 107.1 19.2 218.1 2.8C222 17.2 224 32.4 224 48c0 4.9-.2 9.8-.6 14.7c-.7 8.8 5.8 16.5 14.6 17.3s16.5-5.8 17.3-14.6c.5-5.7 .7-11.5 .7-17.3c0-16.5-1.9-32.6-5.6-47.9c1.8 0 3.7-.1 5.6-.1C397.4 0 512 114.6 512 256c0 1.9 0 3.7-.1 5.6c-15.4-3.6-31.4-5.6-47.9-5.6c-5.8 0-11.6 .2-17.3 .7c-8.8 .7-15.4 8.5-14.6 17.3s8.5 15.4 17.3 14.6c4.8-.4 9.7-.6 14.7-.6c15.6 0 30.8 2 45.2 5.9C492.8 404.9 404.9 492.8 293.9 509.2C290 494.8 288 479.6 288 464c0-4.9 .2-9.8 .6-14.7c.7-8.8-5.8-16.5-14.6-17.3s-16.5 5.8-17.3 14.6c-.5 5.7-.7 11.5-.7 17.3c0 16.5 1.9 32.6 5.6 47.9c-1.8 0-3.7 .1-5.6 .1C114.6 512 0 397.4 0 256c0-1.9 0-3.7 .1-5.6C15.4 254.1 31.5 256 48 256c5.8 0 11.6-.2 17.3-.7c8.8-.7 15.4-8.5 14.6-17.3s-8.5-15.4-17.3-14.6zM121.3 208c-8 3.7-11.6 13.2-7.9 21.2s13.2 11.6 21.2 7.9c45.2-20.8 81.7-57.2 102.5-102.5c3.7-8 .2-17.5-7.9-21.2s-17.5-.2-21.2 7.9c-17.6 38.3-48.5 69.2-86.7 86.7zm277.2 74.7c-3.7-8-13.2-11.6-21.2-7.9c-45.2 20.8-81.7 57.2-102.5 102.5c-3.7 8-.2 17.5 7.9 21.2s17.5 .2 21.2-7.9c17.6-38.3 48.5-69.2 86.7-86.7c8-3.7 11.6-13.2 7.9-21.2z',
    ],
  };
  var faBaseballBall = faBaseball;
  var faJetFighterUp = {
    prefix: 'fas',
    iconName: 'jet-fighter-up',
    icon: [
      512,
      512,
      [],
      'e518',
      'M270.7 9.7C268.2 3.8 262.4 0 256 0s-12.2 3.8-14.7 9.7L197.2 112.6c-3.4 8-5.2 16.5-5.2 25.2v77l-144 84V280c0-13.3-10.7-24-24-24s-24 10.7-24 24v56 32 24c0 13.3 10.7 24 24 24s24-10.7 24-24v-8H192v32.7L133.5 468c-3.5 3-5.5 7.4-5.5 12v16c0 8.8 7.2 16 16 16h96V448c0-8.8 7.2-16 16-16s16 7.2 16 16v64h96c8.8 0 16-7.2 16-16V480c0-4.6-2-9-5.5-12L320 416.7V384H464v8c0 13.3 10.7 24 24 24s24-10.7 24-24V368 336 280c0-13.3-10.7-24-24-24s-24 10.7-24 24v18.8l-144-84v-77c0-8.7-1.8-17.2-5.2-25.2L270.7 9.7z',
    ],
  };
  var faDiagramProject = {
    prefix: 'fas',
    iconName: 'diagram-project',
    icon: [
      576,
      512,
      ['project-diagram'],
      'f542',
      'M0 80C0 53.5 21.5 32 48 32h96c26.5 0 48 21.5 48 48V96H384V80c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H432c-26.5 0-48-21.5-48-48V160H192v16c0 1.7-.1 3.4-.3 5L272 288h96c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H272c-26.5 0-48-21.5-48-48V336c0-1.7 .1-3.4 .3-5L144 224H48c-26.5 0-48-21.5-48-48V80z',
    ],
  };
  var faProjectDiagram = faDiagramProject;
  var faCopy = {
    prefix: 'fas',
    iconName: 'copy',
    icon: [
      512,
      512,
      [],
      'f0c5',
      'M224 0c-35.3 0-64 28.7-64 64V288c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H224zM64 160c-35.3 0-64 28.7-64 64V448c0 35.3 28.7 64 64 64H288c35.3 0 64-28.7 64-64V384H288v64H64V224h64V160H64z',
    ],
  };
  var faVolumeXmark = {
    prefix: 'fas',
    iconName: 'volume-xmark',
    icon: [
      576,
      512,
      ['volume-mute', 'volume-times'],
      'f6a9',
      'M301.1 34.8C312.6 40 320 51.4 320 64V448c0 12.6-7.4 24-18.9 29.2s-25 3.1-34.4-5.3L131.8 352H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64h67.8L266.7 40.1c9.4-8.4 22.9-10.4 34.4-5.3zM425 167l55 55 55-55c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-55 55 55 55c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-55-55-55 55c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l55-55-55-55c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z',
    ],
  };
  var faVolumeMute = faVolumeXmark;
  var faVolumeTimes = faVolumeXmark;
  var faHandSparkles = {
    prefix: 'fas',
    iconName: 'hand-sparkles',
    icon: [
      640,
      512,
      [],
      'e05d',
      'M320 0c17.7 0 32 14.3 32 32V240c0 8.8 7.2 16 16 16s16-7.2 16-16V64c0-17.7 14.3-32 32-32s32 14.3 32 32V240c0 8.8 7.2 16 16 16s16-7.2 16-16V128c0-17.7 14.3-32 32-32s32 14.3 32 32V323.1c-11.9 4.8-21.3 14.9-25 27.8l-8.9 31.2L478.9 391C460.6 396.3 448 413 448 432c0 18.9 12.5 35.6 30.6 40.9C448.4 497.4 409.9 512 368 512H348.8c-59.6 0-116.9-22.9-160-64L76.4 341c-16-15.2-16.6-40.6-1.4-56.6s40.6-16.6 56.6-1.4l60.5 57.6c0-1.5-.1-3.1-.1-4.6V64c0-17.7 14.3-32 32-32s32 14.3 32 32V240c0 8.8 7.2 16 16 16s16-7.2 16-16V32c0-17.7 14.3-32 32-32zm-7.3 326.6c-1.1-3.9-4.7-6.6-8.7-6.6s-7.6 2.7-8.7 6.6L288 352l-25.4 7.3c-3.9 1.1-6.6 4.7-6.6 8.7s2.7 7.6 6.6 8.7L288 384l7.3 25.4c1.1 3.9 4.7 6.6 8.7 6.6s7.6-2.7 8.7-6.6L320 384l25.4-7.3c3.9-1.1 6.6-4.7 6.6-8.7s-2.7-7.6-6.6-8.7L320 352l-7.3-25.4zM104 120l48.3 13.8c4.6 1.3 7.7 5.5 7.7 10.2s-3.1 8.9-7.7 10.2L104 168 90.2 216.3c-1.3 4.6-5.5 7.7-10.2 7.7s-8.9-3.1-10.2-7.7L56 168 7.7 154.2C3.1 152.9 0 148.7 0 144s3.1-8.9 7.7-10.2L56 120 69.8 71.7C71.1 67.1 75.3 64 80 64s8.9 3.1 10.2 7.7L104 120zM584 408l48.3 13.8c4.6 1.3 7.7 5.5 7.7 10.2s-3.1 8.9-7.7 10.2L584 456l-13.8 48.3c-1.3 4.6-5.5 7.7-10.2 7.7s-8.9-3.1-10.2-7.7L536 456l-48.3-13.8c-4.6-1.3-7.7-5.5-7.7-10.2s3.1-8.9 7.7-10.2L536 408l13.8-48.3c1.3-4.6 5.5-7.7 10.2-7.7s8.9 3.1 10.2 7.7L584 408z',
    ],
  };
  var faGrip = {
    prefix: 'fas',
    iconName: 'grip',
    icon: [
      448,
      512,
      ['grip-horizontal'],
      'f58d',
      'M128 136c0-22.1-17.9-40-40-40L40 96C17.9 96 0 113.9 0 136l0 48c0 22.1 17.9 40 40 40H88c22.1 0 40-17.9 40-40V136zm0 192c0-22.1-17.9-40-40-40H40c-22.1 0-40 17.9-40 40v48c0 22.1 17.9 40 40 40H88c22.1 0 40-17.9 40-40V328zm32-192v48c0 22.1 17.9 40 40 40h48c22.1 0 40-17.9 40-40V136c0-22.1-17.9-40-40-40l-48 0c-22.1 0-40 17.9-40 40zM288 328c0-22.1-17.9-40-40-40H200c-22.1 0-40 17.9-40 40l0 48c0 22.1 17.9 40 40 40h48c22.1 0 40-17.9 40-40V328zm32-192v48c0 22.1 17.9 40 40 40h48c22.1 0 40-17.9 40-40V136c0-22.1-17.9-40-40-40l-48 0c-22.1 0-40 17.9-40 40zM448 328c0-22.1-17.9-40-40-40H360c-22.1 0-40 17.9-40 40v48c0 22.1 17.9 40 40 40h48c22.1 0 40-17.9 40-40V328z',
    ],
  };
  var faGripHorizontal = faGrip;
  var faShareFromSquare = {
    prefix: 'fas',
    iconName: 'share-from-square',
    icon: [
      576,
      512,
      [61509, 'share-square'],
      'f14d',
      'M384 24c0-9.6 5.7-18.2 14.5-22s19-2 26 4.6l144 136c4.8 4.5 7.5 10.8 7.5 17.4s-2.7 12.9-7.5 17.4l-144 136c-7 6.6-17.2 8.4-26 4.6s-14.5-12.5-14.5-22V224H352 337.5c-45 0-81.5 36.5-81.5 81.5c0 22.3 10.3 34.3 19.2 40.5c6.8 4.7 12.8 12 12.8 20.3c0 9.8-8 17.8-17.8 17.8h-2.5c-2.4 0-4.8-.4-7.1-1.4C242.8 374.8 160 333.4 160 240c0-79.5 64.5-144 144-144h80V24zM0 144C0 99.8 35.8 64 80 64H96c17.7 0 32 14.3 32 32s-14.3 32-32 32H80c-8.8 0-16 7.2-16 16V432c0 8.8 7.2 16 16 16H368c8.8 0 16-7.2 16-16V416c0-17.7 14.3-32 32-32s32 14.3 32 32v16c0 44.2-35.8 80-80 80H80c-44.2 0-80-35.8-80-80V144z',
    ],
  };
  var faShareSquare = faShareFromSquare;
  var faGun = {
    prefix: 'fas',
    iconName: 'gun',
    icon: [
      576,
      512,
      [],
      'e19b',
      'M528 56c0-13.3-10.7-24-24-24s-24 10.7-24 24v8H32C14.3 64 0 78.3 0 96V208c0 17.7 14.3 32 32 32H42c20.8 0 36.1 19.6 31 39.8L33 440.2c-2.4 9.6-.2 19.7 5.8 27.5S54.1 480 64 480h96c14.7 0 27.5-10 31-24.2L217 352H321.4c23.7 0 44.8-14.9 52.7-37.2L400.9 240H432c8.5 0 16.6-3.4 22.6-9.4L477.3 208H544c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32H528V56zM321.4 304H229l16-64h105l-21 58.7c-1.1 3.2-4.2 5.3-7.5 5.3zM80 128H464c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faSquarePhone = {
    prefix: 'fas',
    iconName: 'square-phone',
    icon: [
      448,
      512,
      ['phone-square'],
      'f098',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm90.7 96.7c9.7-2.6 19.9 2.3 23.7 11.6l20 48c3.4 8.2 1 17.6-5.8 23.2L168 231.7c16.6 35.2 45.1 63.7 80.3 80.3l20.2-24.7c5.6-6.8 15-9.2 23.2-5.8l48 20c9.3 3.9 14.2 14 11.6 23.7l-12 44C336.9 378 329 384 320 384C196.3 384 96 283.7 96 160c0-9 6-16.9 14.7-19.3l44-12z',
    ],
  };
  var faPhoneSquare = faSquarePhone;
  var faPlus = {
    prefix: 'fas',
    iconName: 'plus',
    icon: [
      448,
      512,
      [10133, 61543, 'add'],
      '2b',
      'M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z',
    ],
  };
  var faAdd = faPlus;
  var faExpand = {
    prefix: 'fas',
    iconName: 'expand',
    icon: [
      448,
      512,
      [],
      'f065',
      'M32 32C14.3 32 0 46.3 0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V96h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zM64 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v96c0 17.7 14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H64V352zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h64v64c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32H320zM448 352c0-17.7-14.3-32-32-32s-32 14.3-32 32v64H320c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32V352z',
    ],
  };
  var faComputer = {
    prefix: 'fas',
    iconName: 'computer',
    icon: [
      640,
      512,
      [],
      'e4e5',
      'M384 96V320H64L64 96H384zM64 32C28.7 32 0 60.7 0 96V320c0 35.3 28.7 64 64 64H181.3l-10.7 32H96c-17.7 0-32 14.3-32 32s14.3 32 32 32H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H277.3l-10.7-32H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm464 0c-26.5 0-48 21.5-48 48V432c0 26.5 21.5 48 48 48h64c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H528zm16 64h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H544c-8.8 0-16-7.2-16-16s7.2-16 16-16zm-16 80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H544c-8.8 0-16-7.2-16-16zm32 224c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faXmark = {
    prefix: 'fas',
    iconName: 'xmark',
    icon: [
      320,
      512,
      [
        128473,
        10005,
        10006,
        10060,
        215,
        'close',
        'multiply',
        'remove',
        'times',
      ],
      'f00d',
      'M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z',
    ],
  };
  var faClose = faXmark;
  var faMultiply = faXmark;
  var faRemove = faXmark;
  var faTimes = faXmark;
  var faArrowsUpDownLeftRight = {
    prefix: 'fas',
    iconName: 'arrows-up-down-left-right',
    icon: [
      512,
      512,
      ['arrows'],
      'f047',
      'M278.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l9.4-9.4V224H109.3l9.4-9.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-64 64c-12.5 12.5-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-9.4-9.4H224V402.7l-9.4-9.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l64 64c12.5 12.5 32.8 12.5 45.3 0l64-64c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-9.4 9.4V288H402.7l-9.4 9.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l64-64c12.5-12.5 12.5-32.8 0-45.3l-64-64c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l9.4 9.4H288V109.3l9.4 9.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-64-64z',
    ],
  };
  var faArrows = faArrowsUpDownLeftRight;
  var faChalkboardUser = {
    prefix: 'fas',
    iconName: 'chalkboard-user',
    icon: [
      640,
      512,
      ['chalkboard-teacher'],
      'f51c',
      'M160 64c0-35.3 28.7-64 64-64H576c35.3 0 64 28.7 64 64V352c0 35.3-28.7 64-64 64H336.8c-11.8-25.5-29.9-47.5-52.4-64H384V320c0-17.7 14.3-32 32-32h64c17.7 0 32 14.3 32 32v32h64V64L224 64v49.1C205.2 102.2 183.3 96 160 96V64zm0 256c-53 0-96-43-96-96s43-96 96-96s96 43 96 96s-43 96-96 96zm-26.7 32h53.3C260.3 352 320 411.7 320 485.3c0 14.7-11.9 26.7-26.7 26.7H26.7C11.9 512 0 500.1 0 485.3C0 411.7 59.7 352 133.3 352z',
    ],
  };
  var faChalkboardTeacher = faChalkboardUser;
  var faPesoSign = {
    prefix: 'fas',
    iconName: 'peso-sign',
    icon: [
      384,
      512,
      [],
      'e222',
      'M64 32C46.3 32 32 46.3 32 64v64c-17.7 0-32 14.3-32 32s14.3 32 32 32l0 32c-17.7 0-32 14.3-32 32s14.3 32 32 32l0 64v96c0 17.7 14.3 32 32 32s32-14.3 32-32V384h80c68.4 0 127.7-39 156.8-96H352c17.7 0 32-14.3 32-32s-14.3-32-32-32h-.7c.5-5.3 .7-10.6 .7-16s-.2-10.7-.7-16h.7c17.7 0 32-14.3 32-32s-14.3-32-32-32H332.8C303.7 71 244.4 32 176 32H64zm190.4 96H96V96h80c30.5 0 58.2 12.2 78.4 32zM96 192H286.9c.7 5.2 1.1 10.6 1.1 16s-.4 10.8-1.1 16H96V192zm158.4 96c-20.2 19.8-47.9 32-78.4 32H96V288H254.4z',
    ],
  };
  var faBuildingShield = {
    prefix: 'fas',
    iconName: 'building-shield',
    icon: [
      576,
      512,
      [],
      'e4d8',
      'M0 48C0 21.5 21.5 0 48 0H336c26.5 0 48 21.5 48 48V207l-42.4 17H304 272c-8.8 0-16 7.2-16 16v32 24.2V304c0 .9 .1 1.7 .2 2.6c2.3 58.1 24.1 144.8 98.7 201.5c-5.8 2.5-12.2 3.9-18.9 3.9H240V432c0-26.5-21.5-48-48-48s-48 21.5-48 48v80H48c-26.5 0-48-21.5-48-48V48zM80 224c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H80zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H176c-8.8 0-16 7.2-16 16zM64 112v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16zM176 96c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H176zm80 16v32c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V112c0-8.8-7.2-16-16-16H272c-8.8 0-16 7.2-16 16zM423.1 225.7c5.7-2.3 12.1-2.3 17.8 0l120 48C570 277.4 576 286.2 576 296c0 63.3-25.9 168.8-134.8 214.2c-5.9 2.5-12.6 2.5-18.5 0C313.9 464.8 288 359.3 288 296c0-9.8 6-18.6 15.1-22.3l120-48zM527.4 312L432 273.8V461.7c68.2-33 91.5-99 95.4-149.7z',
    ],
  };
  var faBaby = {
    prefix: 'fas',
    iconName: 'baby',
    icon: [
      448,
      512,
      [],
      'f77c',
      'M296 88c0 39.8-32.2 72-72 72s-72-32.2-72-72s32.2-72 72-72s72 32.2 72 72zM39.7 144.5c13-17.9 38-21.8 55.9-8.8L131.8 162c26.8 19.5 59.1 30 92.2 30s65.4-10.5 92.2-30l36.2-26.4c17.9-13 42.9-9 55.9 8.8s9 42.9-8.8 55.9l-36.2 26.4c-13.6 9.9-28.1 18.2-43.3 25V288H128V251.7c-15.2-6.7-29.7-15.1-43.3-25L48.5 200.3c-17.9-13-21.8-38-8.8-55.9zm89.8 184.8l60.6 53-26 37.2 24.3 24.3c15.6 15.6 15.6 40.9 0 56.6s-40.9 15.6-56.6 0l-48-48C70 438.6 68.1 417 79.2 401.1l50.2-71.8zm128.5 53l60.6-53 50.2 71.8c11.1 15.9 9.2 37.5-4.5 51.2l-48 48c-15.6 15.6-40.9 15.6-56.6 0s-15.6-40.9 0-56.6L284 419.4l-26-37.2z',
    ],
  };
  var faUsersLine = {
    prefix: 'fas',
    iconName: 'users-line',
    icon: [
      640,
      512,
      [],
      'e592',
      'M211.2 96c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zM32 256c0 17.7 14.3 32 32 32h85.6c10.1-39.4 38.6-71.5 75.8-86.6c-9.7-6-21.2-9.4-33.4-9.4H96c-35.3 0-64 28.7-64 64zm461.6 32H576c17.7 0 32-14.3 32-32c0-35.3-28.7-64-64-64H448c-11.7 0-22.7 3.1-32.1 8.6c38.1 14.8 67.4 47.3 77.7 87.4zM391.2 226.4c-6.9-1.6-14.2-2.4-21.6-2.4h-96c-8.5 0-16.7 1.1-24.5 3.1c-30.8 8.1-55.6 31.1-66.1 60.9c-3.5 10-5.5 20.8-5.5 32c0 17.7 14.3 32 32 32h224c17.7 0 32-14.3 32-32c0-11.2-1.9-22-5.5-32c-10.8-30.7-36.8-54.2-68.9-61.6zM563.2 96c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zM321.6 192c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zM32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faQuoteLeft = {
    prefix: 'fas',
    iconName: 'quote-left',
    icon: [
      448,
      512,
      [8220, 'quote-left-alt'],
      'f10d',
      'M0 216C0 149.7 53.7 96 120 96h8c17.7 0 32 14.3 32 32s-14.3 32-32 32h-8c-30.9 0-56 25.1-56 56v8h64c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V320 288 216zm256 0c0-66.3 53.7-120 120-120h8c17.7 0 32 14.3 32 32s-14.3 32-32 32h-8c-30.9 0-56 25.1-56 56v8h64c35.3 0 64 28.7 64 64v64c0 35.3-28.7 64-64 64H320c-35.3 0-64-28.7-64-64V320 288 216z',
    ],
  };
  var faQuoteLeftAlt = faQuoteLeft;
  var faTractor = {
    prefix: 'fas',
    iconName: 'tractor',
    icon: [
      640,
      512,
      [128668],
      'f722',
      'M96 64c0-35.3 28.7-64 64-64H266.3c26.2 0 49.7 15.9 59.4 40.2L373.7 160H480V126.2c0-24.8 5.8-49.3 16.9-71.6l2.5-5c7.9-15.8 27.1-22.2 42.9-14.3s22.2 27.1 14.3 42.9l-2.5 5c-6.7 13.3-10.1 28-10.1 42.9V160h56c22.1 0 40 17.9 40 40v45.4c0 16.5-8.5 31.9-22.6 40.7l-43.3 27.1c-14.2-5.9-29.8-9.2-46.1-9.2c-39.3 0-74.1 18.9-96 48H352c0 17.7-14.3 32-32 32h-8.2c-1.7 4.8-3.7 9.5-5.8 14.1l5.8 5.8c12.5 12.5 12.5 32.8 0 45.3l-22.6 22.6c-12.5 12.5-32.8 12.5-45.3 0l-5.8-5.8c-4.6 2.2-9.3 4.1-14.1 5.8V480c0 17.7-14.3 32-32 32H160c-17.7 0-32-14.3-32-32v-8.2c-4.8-1.7-9.5-3.7-14.1-5.8l-5.8 5.8c-12.5 12.5-32.8 12.5-45.3 0L40.2 449.1c-12.5-12.5-12.5-32.8 0-45.3l5.8-5.8c-2.2-4.6-4.1-9.3-5.8-14.1H32c-17.7 0-32-14.3-32-32V320c0-17.7 14.3-32 32-32h8.2c1.7-4.8 3.7-9.5 5.8-14.1l-5.8-5.8c-12.5-12.5-12.5-32.8 0-45.3l22.6-22.6c9-9 21.9-11.5 33.1-7.6V192 160 64zm170.3 0H160v96h32H304.7L266.3 64zM176 256c-44.2 0-80 35.8-80 80s35.8 80 80 80s80-35.8 80-80s-35.8-80-80-80zM528 448c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm0 64c-48.6 0-88-39.4-88-88c0-29.8 14.8-56.1 37.4-72c14.3-10.1 31.8-16 50.6-16c2.7 0 5.3 .1 7.9 .3c44.9 4 80.1 41.7 80.1 87.7c0 48.6-39.4 88-88 88z',
    ],
  };
  var faTrashArrowUp = {
    prefix: 'fas',
    iconName: 'trash-arrow-up',
    icon: [
      448,
      512,
      ['trash-restore'],
      'f829',
      'M163.8 0H284.2c12.1 0 23.2 6.8 28.6 17.7L320 32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 96 0 81.7 0 64S14.3 32 32 32h96l7.2-14.3C140.6 6.8 151.7 0 163.8 0zM32 128H416L394.8 467c-1.6 25.3-22.6 45-47.9 45H101.1c-25.3 0-46.3-19.7-47.9-45L32 128zm192 64c-6.4 0-12.5 2.5-17 7l-80 80c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l39-39V408c0 13.3 10.7 24 24 24s24-10.7 24-24V273.9l39 39c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-80-80c-4.5-4.5-10.6-7-17-7z',
    ],
  };
  var faTrashRestore = faTrashArrowUp;
  var faArrowDownUpLock = {
    prefix: 'fas',
    iconName: 'arrow-down-up-lock',
    icon: [
      640,
      512,
      [],
      'e4b0',
      'M150.6 502.6l96-96c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 402.7V288H416V272c0-17.2 3.9-33.5 10.8-48H352V109.3l41.4 41.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-96-96c-6-6-14.1-9.4-22.6-9.4s-16.6 3.4-22.6 9.4l-96 96c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L288 109.3V224l-128 0H96l-64 0c-17.7 0-32 14.3-32 32s14.3 32 32 32H96V402.7L54.6 361.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0zM160 192V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V192h64zM288 320V448c0 17.7 14.3 32 32 32s32-14.3 32-32V320H288zm240-80c17.7 0 32 14.3 32 32v48H496V272c0-17.7 14.3-32 32-32zm-80 32v48c-17.7 0-32 14.3-32 32V480c0 17.7 14.3 32 32 32H608c17.7 0 32-14.3 32-32V352c0-17.7-14.3-32-32-32V272c0-44.2-35.8-80-80-80s-80 35.8-80 80z',
    ],
  };
  var faLinesLeaning = {
    prefix: 'fas',
    iconName: 'lines-leaning',
    icon: [
      448,
      512,
      [],
      'e51e',
      'M222.4 74.1c5.6-16.8-3.5-34.9-20.2-40.5s-34.9 3.5-40.5 20.2l-128 384c-5.6 16.8 3.5 34.9 20.2 40.5s34.9-3.5 40.5-20.2l128-384zm70.9-41.7c-17.4-2.9-33.9 8.9-36.8 26.3l-64 384c-2.9 17.4 8.9 33.9 26.3 36.8s33.9-8.9 36.8-26.3l64-384c2.9-17.4-8.9-33.9-26.3-36.8zM384 32c-17.7 0-32 14.3-32 32V448c0 17.7 14.3 32 32 32s32-14.3 32-32V64c0-17.7-14.3-32-32-32z',
    ],
  };
  var faRulerCombined = {
    prefix: 'fas',
    iconName: 'ruler-combined',
    icon: [
      512,
      512,
      [],
      'f546',
      'M.2 468.9C2.7 493.1 23.1 512 48 512l96 0 320 0c26.5 0 48-21.5 48-48l0-96c0-26.5-21.5-48-48-48l-48 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-64 0 0 80c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-80-80 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l80 0 0-64-80 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l80 0 0-64-80 0c-8.8 0-16-7.2-16-16s7.2-16 16-16l80 0 0-48c0-26.5-21.5-48-48-48L48 0C21.5 0 0 21.5 0 48L0 368l0 96c0 1.7 .1 3.3 .2 4.9z',
    ],
  };
  var faCopyright = {
    prefix: 'fas',
    iconName: 'copyright',
    icon: [
      512,
      512,
      [169],
      'f1f9',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM199.4 312.6c31.2 31.2 81.9 31.2 113.1 0c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9c-50 50-131 50-181 0s-50-131 0-181s131-50 181 0c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0c-31.2-31.2-81.9-31.2-113.1 0s-31.2 81.9 0 113.1z',
    ],
  };
  var faEquals = {
    prefix: 'fas',
    iconName: 'equals',
    icon: [
      448,
      512,
      [62764],
      '3d',
      'M48 128c-17.7 0-32 14.3-32 32s14.3 32 32 32H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H48zm0 192c-17.7 0-32 14.3-32 32s14.3 32 32 32H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H48z',
    ],
  };
  var faBlender = {
    prefix: 'fas',
    iconName: 'blender',
    icon: [
      512,
      512,
      [],
      'f517',
      'M0 64C0 28.7 28.7 0 64 0h64 32H470.1c21.1 0 36.4 20.1 30.9 40.4L494.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H485.8l-17.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H459.6l-17.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16h97.5L416 352H160l-8.7-96H64c-35.3 0-64-28.7-64-64V64zM145.5 192L133.8 64H64V192h81.5zM144 384H432c26.5 0 48 21.5 48 48v32c0 26.5-21.5 48-48 48H144c-26.5 0-48-21.5-48-48V432c0-26.5 21.5-48 48-48zm144 96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM0 64C0 28.7 28.7 0 64 0h64 32H470.1c21.1 0 36.4 20.1 30.9 40.4L494.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H485.8l-17.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16H459.6l-17.5 64H336c-8.8 0-16 7.2-16 16s7.2 16 16 16h97.5L416 352H160l-8.7-96H64c-35.3 0-64-28.7-64-64V64zM145.5 192L133.8 64H64V192h81.5zM144 384H432c26.5 0 48 21.5 48 48v32c0 26.5-21.5 48-48 48H144c-26.5 0-48-21.5-48-48V432c0-26.5 21.5-48 48-48zm144 96c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faTeeth = {
    prefix: 'fas',
    iconName: 'teeth',
    icon: [
      576,
      512,
      [],
      'f62e',
      'M0 128C0 75 43 32 96 32H480c53 0 96 43 96 96V384c0 53-43 96-96 96H96c-53 0-96-43-96-96V128zm176 48v56c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V176c0-26.5-21.5-48-48-48s-48 21.5-48 48zm176-48c-26.5 0-48 21.5-48 48v56c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V176c0-26.5-21.5-48-48-48zM48 208v24c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V208c0-26.5-21.5-48-48-48s-48 21.5-48 48zM96 384c26.5 0 48-21.5 48-48V312c0-13.3-10.7-24-24-24H72c-13.3 0-24 10.7-24 24v24c0 26.5 21.5 48 48 48zm80-48c0 26.5 21.5 48 48 48s48-21.5 48-48V312c0-13.3-10.7-24-24-24H200c-13.3 0-24 10.7-24 24v24zm176 48c26.5 0 48-21.5 48-48V312c0-13.3-10.7-24-24-24H328c-13.3 0-24 10.7-24 24v24c0 26.5 21.5 48 48 48zm80-176v24c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V208c0-26.5-21.5-48-48-48s-48 21.5-48 48zm48 176c26.5 0 48-21.5 48-48V312c0-13.3-10.7-24-24-24H456c-13.3 0-24 10.7-24 24v24c0 26.5 21.5 48 48 48z',
    ],
  };
  var faShekelSign = {
    prefix: 'fas',
    iconName: 'shekel-sign',
    icon: [
      448,
      512,
      [8362, 'ils', 'shekel', 'sheqel', 'sheqel-sign'],
      'f20b',
      'M32 32C14.3 32 0 46.3 0 64V448c0 17.7 14.3 32 32 32s32-14.3 32-32V96H192c35.3 0 64 28.7 64 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V160c0-70.7-57.3-128-128-128H32zM320 480c70.7 0 128-57.3 128-128V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V352c0 35.3-28.7 64-64 64H192V192c0-17.7-14.3-32-32-32s-32 14.3-32 32V448c0 17.7 14.3 32 32 32H320z',
    ],
  };
  var faIls = faShekelSign;
  var faShekel = faShekelSign;
  var faSheqel = faShekelSign;
  var faSheqelSign = faShekelSign;
  var faMap = {
    prefix: 'fas',
    iconName: 'map',
    icon: [
      576,
      512,
      [128506, 62072],
      'f279',
      'M384 476.1L192 421.2V35.9L384 90.8V476.1zm32-1.2V88.4L543.1 37.5c15.8-6.3 32.9 5.3 32.9 22.3V394.6c0 9.8-6 18.6-15.1 22.3L416 474.8zM15.1 95.1L160 37.2V423.6L32.9 474.5C17.1 480.8 0 469.2 0 452.2V117.4c0-9.8 6-18.6 15.1-22.3z',
    ],
  };
  var faRocket = {
    prefix: 'fas',
    iconName: 'rocket',
    icon: [
      512,
      512,
      [],
      'f135',
      'M156.6 384.9L125.7 354c-8.5-8.5-11.5-20.8-7.7-32.2c3-8.9 7-20.5 11.8-33.8L24 288c-8.6 0-16.6-4.6-20.9-12.1s-4.2-16.7 .2-24.1l52.5-88.5c13-21.9 36.5-35.3 61.9-35.3l82.3 0c2.4-4 4.8-7.7 7.2-11.3C289.1-4.1 411.1-8.1 483.9 5.3c11.6 2.1 20.6 11.2 22.8 22.8c13.4 72.9 9.3 194.8-111.4 276.7c-3.5 2.4-7.3 4.8-11.3 7.2v82.3c0 25.4-13.4 49-35.3 61.9l-88.5 52.5c-7.4 4.4-16.6 4.5-24.1 .2s-12.1-12.2-12.1-20.9V380.8c-14.1 4.9-26.4 8.9-35.7 11.9c-11.2 3.6-23.4 .5-31.8-7.8zM384 168c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40z',
    ],
  };
  var faPhotoFilm = {
    prefix: 'fas',
    iconName: 'photo-film',
    icon: [
      640,
      512,
      ['photo-video'],
      'f87c',
      'M256 0H576c35.3 0 64 28.7 64 64V288c0 35.3-28.7 64-64 64H256c-35.3 0-64-28.7-64-64V64c0-35.3 28.7-64 64-64zM476 106.7C471.5 100 464 96 456 96s-15.5 4-20 10.7l-56 84L362.7 169c-4.6-5.7-11.5-9-18.7-9s-14.2 3.3-18.7 9l-64 80c-5.8 7.2-6.9 17.1-2.9 25.4s12.4 13.6 21.6 13.6h80 48H552c8.9 0 17-4.9 21.2-12.7s3.7-17.3-1.2-24.6l-96-144zM336 96c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM64 128h96V384v32c0 17.7 14.3 32 32 32H320c17.7 0 32-14.3 32-32V384H512v64c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V192c0-35.3 28.7-64 64-64zm8 64c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16H88c8.8 0 16-7.2 16-16V208c0-8.8-7.2-16-16-16H72zm0 104c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16H88c8.8 0 16-7.2 16-16V312c0-8.8-7.2-16-16-16H72zm0 104c-8.8 0-16 7.2-16 16v16c0 8.8 7.2 16 16 16H88c8.8 0 16-7.2 16-16V416c0-8.8-7.2-16-16-16H72zm336 16v16c0 8.8 7.2 16 16 16h16c8.8 0 16-7.2 16-16V416c0-8.8-7.2-16-16-16H424c-8.8 0-16 7.2-16 16z',
    ],
  };
  var faPhotoVideo = faPhotoFilm;
  var faFolderMinus = {
    prefix: 'fas',
    iconName: 'folder-minus',
    icon: [
      512,
      512,
      [],
      'f65d',
      'M448 480H64c-35.3 0-64-28.7-64-64V96C0 60.7 28.7 32 64 32H181.5c17 0 33.3 6.7 45.3 18.7l26.5 26.5c12 12 28.3 18.7 45.3 18.7H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64zM184 272c-13.3 0-24 10.7-24 24s10.7 24 24 24H328c13.3 0 24-10.7 24-24s-10.7-24-24-24H184z',
    ],
  };
  var faStore = {
    prefix: 'fas',
    iconName: 'store',
    icon: [
      576,
      512,
      [],
      'f54e',
      'M547.6 103.8L490.3 13.1C485.2 5 476.1 0 466.4 0H109.6C99.9 0 90.8 5 85.7 13.1L28.3 103.8c-29.6 46.8-3.4 111.9 51.9 119.4c4 .5 8.1 .8 12.1 .8c26.1 0 49.3-11.4 65.2-29c15.9 17.6 39.1 29 65.2 29c26.1 0 49.3-11.4 65.2-29c15.9 17.6 39.1 29 65.2 29c26.2 0 49.3-11.4 65.2-29c16 17.6 39.1 29 65.2 29c4.1 0 8.1-.3 12.1-.8c55.5-7.4 81.8-72.5 52.1-119.4zM499.7 254.9l-.1 0c-5.3 .7-10.7 1.1-16.2 1.1c-12.4 0-24.3-1.9-35.4-5.3V384H128V250.6c-11.2 3.5-23.2 5.4-35.6 5.4c-5.5 0-11-.4-16.3-1.1l-.1 0c-4.1-.6-8.1-1.3-12-2.3V384v64c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V384 252.6c-4 1-8 1.8-12.3 2.3z',
    ],
  };
  var faArrowTrendUp = {
    prefix: 'fas',
    iconName: 'arrow-trend-up',
    icon: [
      576,
      512,
      [],
      'e098',
      'M384 160c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32V288c0 17.7-14.3 32-32 32s-32-14.3-32-32V205.3L342.6 374.6c-12.5 12.5-32.8 12.5-45.3 0L192 269.3 54.6 406.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160c12.5-12.5 32.8-12.5 45.3 0L320 306.7 466.7 160H384z',
    ],
  };
  var faPlugCircleMinus = {
    prefix: 'fas',
    iconName: 'plug-circle-minus',
    icon: [
      576,
      512,
      [],
      'e55e',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM576 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-64 0c0 8.8-7.2 16-16 16l-128 0c-8.8 0-16-7.2-16-16s7.2-16 16-16H496c8.8 0 16 7.2 16 16z',
    ],
  };
  var faSignHanging = {
    prefix: 'fas',
    iconName: 'sign-hanging',
    icon: [
      512,
      512,
      ['sign'],
      'f4d9',
      'M96 0c17.7 0 32 14.3 32 32V64l352 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-352 0V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V128H32C14.3 128 0 113.7 0 96S14.3 64 32 64H64V32C64 14.3 78.3 0 96 0zm96 160H448c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32V192c0-17.7 14.3-32 32-32z',
    ],
  };
  var faSign = faSignHanging;
  var faBezierCurve = {
    prefix: 'fas',
    iconName: 'bezier-curve',
    icon: [
      640,
      512,
      [],
      'f55b',
      'M296 136V88h48v48H296zM288 32c-26.5 0-48 21.5-48 48v4H121.6C111.2 62.7 89.3 48 64 48C28.7 48 0 76.7 0 112s28.7 64 64 64c25.3 0 47.2-14.7 57.6-36h66.9c-58.9 39.6-98.9 105-104 180H80c-26.5 0-48 21.5-48 48v64c0 26.5 21.5 48 48 48h64c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48h-3.3c5.9-67 48.5-123.4 107.5-149.1c8.6 12.7 23.2 21.1 39.8 21.1h64c16.6 0 31.1-8.4 39.8-21.1c59 25.7 101.6 82.1 107.5 149.1H496c-26.5 0-48 21.5-48 48v64c0 26.5 21.5 48 48 48h64c26.5 0 48-21.5 48-48V368c0-26.5-21.5-48-48-48h-4.5c-5-75-45.1-140.4-104-180h66.9c10.4 21.3 32.3 36 57.6 36c35.3 0 64-28.7 64-64s-28.7-64-64-64c-25.3 0-47.2 14.7-57.6 36H400V80c0-26.5-21.5-48-48-48H288zM88 376h48v48H88V376zm416 48V376h48v48H504z',
    ],
  };
  var faBellSlash = {
    prefix: 'fas',
    iconName: 'bell-slash',
    icon: [
      640,
      512,
      [128277, 61943],
      'f1f6',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-87.5-68.6c.5-1.7 .7-3.5 .7-5.4c0-27.6-11-54.1-30.5-73.7L512 320c-20.5-20.5-32-48.3-32-77.3V208c0-77.4-55-142-128-156.8V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V51.2c-42.6 8.6-79 34.2-102 69.3L38.8 5.1zM160 242.7c0 29-11.5 56.8-32 77.3l-1.5 1.5C107 341 96 367.5 96 395.2c0 11.5 9.3 20.8 20.8 20.8H406.2L160 222.1v20.7zM384 448H320 256c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7s18.7-28.3 18.7-45.3z',
    ],
  };
  var faTablet = {
    prefix: 'fas',
    iconName: 'tablet',
    icon: [
      448,
      512,
      ['tablet-android'],
      'f3fb',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM176 432h96c8.8 0 16 7.2 16 16s-7.2 16-16 16H176c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faTabletAndroid = faTablet;
  var faSchoolFlag = {
    prefix: 'fas',
    iconName: 'school-flag',
    icon: [
      576,
      512,
      [],
      'e56e',
      'M288 0H400c8.8 0 16 7.2 16 16V64c0 8.8-7.2 16-16 16H320V95.5L410.3 160H512c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H336V400c0-26.5-21.5-48-48-48s-48 21.5-48 48V512H64c-35.3 0-64-28.7-64-64V224c0-35.3 28.7-64 64-64H165.7L256 95.5V32c0-17.7 14.3-32 32-32zm48 240c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM80 224c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H80zm368 16v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V240c0-8.8-7.2-16-16-16H464c-8.8 0-16 7.2-16 16zM80 352c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H80zm384 0c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16V368c0-8.8-7.2-16-16-16H464z',
    ],
  };
  var faFill = {
    prefix: 'fas',
    iconName: 'fill',
    icon: [
      576,
      512,
      [],
      'f575',
      'M118.6 9.4C106.1-3.1 85.9-3.1 73.4 9.4s-12.5 32.8 0 45.3L154.7 136 62.6 228.1c-37.5 37.5-37.5 98.3 0 135.8L180.1 481.4c37.5 37.5 98.3 37.5 135.8 0L506.3 290.9c28.1-28.1 28.1-73.7 0-101.8L354.9 37.7c-28.1-28.1-73.7-28.1-101.8 0L200 90.7 118.6 9.4zM200 181.3l49.4 49.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L245.3 136l53.1-53.1c3.1-3.1 8.2-3.1 11.3 0L461.1 234.3c3.1 3.1 3.1 8.2 0 11.3L418.7 288H99.5c1.4-5.4 4.2-10.4 8.4-14.6L200 181.3z',
    ],
  };
  var faAngleUp = {
    prefix: 'fas',
    iconName: 'angle-up',
    icon: [
      448,
      512,
      [8963],
      'f106',
      'M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160z',
    ],
  };
  var faDrumstickBite = {
    prefix: 'fas',
    iconName: 'drumstick-bite',
    icon: [
      512,
      512,
      [],
      'f6d7',
      'M160 265.2c0 8.5-3.4 16.6-9.4 22.6l-26.8 26.8c-12.3 12.3-32.5 11.4-49.4 7.2C69.8 320.6 65 320 60 320c-33.1 0-60 26.9-60 60s26.9 60 60 60c6.3 0 12 5.7 12 12c0 33.1 26.9 60 60 60s60-26.9 60-60c0-5-.6-9.8-1.8-14.5c-4.2-16.9-5.2-37.1 7.2-49.4l26.8-26.8c6-6 14.1-9.4 22.6-9.4H336c6.3 0 12.4-.3 18.5-1c11.9-1.2 16.4-15.5 10.8-26c-8.5-15.8-13.3-33.8-13.3-53c0-61.9 50.1-112 112-112c8 0 15.7 .8 23.2 2.4c11.7 2.5 24.1-5.9 22-17.6C494.5 62.5 422.5 0 336 0C238.8 0 160 78.8 160 176v89.2z',
    ],
  };
  var faHollyBerry = {
    prefix: 'fas',
    iconName: 'holly-berry',
    icon: [
      512,
      512,
      [],
      'f7aa',
      'M256 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-80 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM276.8 383.8c1 .1 2.1 .2 3.2 .2c39.8 0 72 32.2 72 72v22.7c0 16.4 16 27.9 31.6 22.8l12.8-4.3c18-6 37.3-6.5 55.6-1.5l19.4 5.3c17.9 4.9 34.4-11.6 29.5-29.5L495.6 452c-5-18.3-4.4-37.6 1.5-55.6l4.3-12.8c5.2-15.5-6.4-31.6-22.8-31.6c-34.6 0-62.7-28.1-62.7-62.7v-32c0-16.4-16-27.9-31.6-22.8l-12.8 4.3c-18 6-37.3 6.5-55.6 1.5l-29.6-8.1c-2.9-.8-5.9-1-8.7-.7c4.2 9.7 5.8 20.8 3.7 32.3L275 298.7c-1.5 8.4-1.4 17 .5 25.3l5.3 23.9c2.8 12.7 1.1 25.2-4 35.9zM127.6 234.5c-15.5-5.2-31.6 6.4-31.6 22.8v32C96 323.9 67.9 352 33.3 352c-16.4 0-27.9 16-22.8 31.6l4.3 12.8c6 18 6.5 37.3 1.5 55.6l-5.3 19.4C6.2 489.4 22.6 505.8 40.5 501L60 495.6c18.3-5 37.6-4.5 55.6 1.5l12.8 4.3c15.5 5.2 31.6-6.4 31.6-22.8v-32c0-34.6 28.1-62.7 62.7-62.7c16.4 0 27.9-16 22.8-31.6l-4.3-12.8c-6-18-6.5-37.3-1.5-55.6l5.3-19.4c4.9-17.9-11.6-34.4-29.5-29.5L196 240.4c-18.3 5-37.6 4.4-55.6-1.5l-12.8-4.3zM384 144c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48z',
    ],
  };
  var faChevronLeft = {
    prefix: 'fas',
    iconName: 'chevron-left',
    icon: [
      384,
      512,
      [9001],
      'f053',
      'M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l192 192c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 278.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192z',
    ],
  };
  var faBacteria = {
    prefix: 'fas',
    iconName: 'bacteria',
    icon: [
      640,
      512,
      [],
      'e059',
      'M304.9 .7c-9.6-2.7-19.5 2.8-22.3 12.4l-3.1 11c-7.4-.3-14.9 .4-22.4 2.1c-9 2.1-17.8 4.4-26.2 7l-4.4-10.3c-3.9-9.1-14.5-13.4-23.6-9.5s-13.4 14.5-9.5 23.6l3.6 8.5c-16.5 7.1-31.5 15.1-45.2 23.9L147 62c-5.5-8.3-16.7-10.5-25-5s-10.5 16.7-5 25l5.8 8.7c-13.5 11.2-25.3 23.1-35.5 35.3l-10.1-8.1c-7.8-6.2-19.1-5-25.3 2.8s-5 19.1 2.8 25.3L66 155c-1.6 2.4-3.1 4.8-4.5 7.3c-7.1 11.8-12.8 23.2-17.4 34l-7.4-3c-9.2-3.7-19.7 .8-23.4 10s.8 19.7 10 23.4l8.7 3.5c-.2 .8-.4 1.6-.7 2.3c-2.6 9.4-4.2 17.4-5.3 23.5c-.5 3.1-.9 5.7-1.2 7.7c-.1 1-.2 2-.3 2.7l-.1 1.1 0 .5 0 .2 0 .1c0 0 0 .1 29.4 2.8l0 0-29.4-2.7c-.3 3.8-.4 7.5-.3 11.2l-11 3.1C3.5 285.4-2 295.4 .7 304.9s12.7 15.1 22.3 12.4l10.3-2.9c8 15.5 20.7 28.3 36.4 36.4L66.7 361c-2.7 9.6 2.8 19.5 12.4 22.3s19.5-2.8 22.3-12.4l3.1-11c17.8 .8 34.7-4.1 48.8-13.2l8 8c7 7 18.4 7 25.5 0s7-18.4 0-25.5l-8-8c6.8-10.6 11.3-22.9 12.7-36.2l.1-.6c.2-1.3 .7-3.8 1.7-7.4l.2-.6 9.4 4c9.1 3.9 19.7-.3 23.6-9.5s-.3-19.7-9.5-23.6l-8.5-3.6c7.5-11.1 18.7-23.7 36.5-34.5l1.6 5.6c2.7 9.6 12.7 15.1 22.3 12.4s15.1-12.7 12.4-22.3l-3-10.6c5.2-1.7 10.7-3.2 16.6-4.6c9.7-2.2 18.5-6 26.4-11.1l8 8c7 7 18.4 7 25.5 0s7-18.4 0-25.5l-8-8c9.1-14.3 14-31.2 13.2-48.8l11-3.1c9.6-2.7 15.1-12.7 12.4-22.3S370.6 64 361 66.7l-10.3 2.9c-8.1-15.9-21-28.5-36.4-36.4l2.9-10.3c2.7-9.6-2.8-19.5-12.4-22.3zM106.2 275.8l-37.1-3.4 0 0 37.1 3.4zM128 256c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm96-112c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm98.7 345c-2.7 9.6 2.8 19.5 12.4 22.3s19.5-2.8 22.2-12.4l3.1-11c7.4 .3 14.9-.4 22.4-2.1c9-2.1 17.8-4.4 26.2-7l4.4 10.3c3.9 9.1 14.5 13.4 23.6 9.5s13.4-14.5 9.5-23.6l-3.6-8.5c16.5-7.1 31.5-15.1 45.2-23.9L493 450c5.5 8.3 16.7 10.5 25 5s10.5-16.7 5-25l-5.8-8.7c13.5-11.2 25.3-23.1 35.5-35.3l10.1 8.1c7.8 6.2 19.1 5 25.3-2.8s5-19.1-2.8-25.3L574 357c1.6-2.4 3.1-4.8 4.5-7.3c7.1-11.8 12.8-23.2 17.4-34l7.4 3c9.2 3.7 19.7-.8 23.4-10s-.8-19.7-10-23.4l-8.7-3.5c.2-.8 .4-1.6 .7-2.3c2.6-9.4 4.2-17.4 5.3-23.5c.5-3.1 .9-5.7 1.2-7.7c.1-1 .2-2 .3-2.7l.1-1.1 0-.5 0-.2 0-.1c0 0 0-.1-29.4-2.8l0 0 29.4 2.7c.3-3.8 .4-7.5 .3-11.2l11-3.1c9.6-2.7 15.1-12.7 12.4-22.3s-12.7-15.1-22.3-12.4l-10.3 2.9c-8-15.5-20.7-28.3-36.4-36.4l2.9-10.3c2.7-9.6-2.8-19.5-12.4-22.3s-19.5 2.8-22.2 12.4l-3.1 11c-17.8-.8-34.7 4.1-48.8 13.2l-8-8c-7-7-18.4-7-25.5 0s-7 18.4 0 25.5l8 8c-6.8 10.6-11.3 22.9-12.7 36.2l-.1 .6c-.2 1.3-.7 3.8-1.7 7.4l-.2 .6-9.4-4c-9.1-3.9-19.7 .3-23.6 9.5s.3 19.7 9.5 23.6l8.5 3.6c-7.5 11.1-18.7 23.7-36.5 34.5l-1.6-5.6c-2.7-9.6-12.7-15.1-22.3-12.4s-15.1 12.7-12.4 22.3l3 10.6c-5.2 1.7-10.7 3.2-16.6 4.6c-9.7 2.2-18.5 6-26.4 11.1l-8-8c-7-7-18.4-7-25.5 0s-7 18.4 0 25.5l8 8c-9.1 14.2-14 31.2-13.2 48.8l-11 3.1c-9.6 2.7-15.1 12.7-12.4 22.2s12.7 15.1 22.3 12.4l10.3-2.9c8.1 15.9 21 28.5 36.4 36.4l-3 10.3zM570.9 239.5l0 0-37.1-3.4 37.1 3.4zM384 384c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32z',
    ],
  };
  var faHandLizard = {
    prefix: 'fas',
    iconName: 'hand-lizard',
    icon: [
      512,
      512,
      [],
      'f258',
      'M0 112C0 85.5 21.5 64 48 64H160h80 46.5c36.8 0 71.2 18 92.1 48.2l113.5 164c13 18.7 19.9 41 19.9 63.8v12 16 48c0 17.7-14.3 32-32 32H384c-17.7 0-32-14.3-32-32V402.2L273.9 352H240 160 112c-26.5 0-48-21.5-48-48s21.5-48 48-48h48 80c26.5 0 48-21.5 48-48s-21.5-48-48-48H160 48c-26.5 0-48-21.5-48-48z',
    ],
  };
  var faDisease = {
    prefix: 'fas',
    iconName: 'disease',
    icon: [
      512,
      512,
      [],
      'f7fa',
      'M238.5 53.1C251 39.6 268.6 32 287 32c28.9 0 54.5 18.7 63.2 46.3L366 128.6c7.3 23 25.2 41 48.2 48.3l62.2 19.9c21.2 6.8 35.6 26.5 35.6 48.7c0 17.5-8.9 33.7-23.6 43.1l-85.9 54.8c-10.6 6.8-16.6 18.8-15.7 31.3l2.5 33.9c2.8 38.5-27.7 71.4-66.4 71.4c-13.6 0-26.9-4.2-38.1-12l-48.2-33.6c-14.8-10.3-32.3-15.8-50.3-15.8H170.2c-4.9 0-9.9 .4-14.8 1.2L83.9 432.1c-21.3 3.6-42.8-5.7-54.6-23.9c-11.8-18.1-11.8-41.4 0-59.4L56.5 307c4.9-7.5 7.5-16.3 7.5-25.3c0-9.9-3.2-19.5-9-27.4L11.3 194.6C-6.5 170.3-.7 136.2 24.2 119.2c9.7-6.6 21.2-9.8 32.9-9.1l80.6 4.6c26.1 1.5 51.5-8.7 69.4-27.9l31.5-33.8zM160 256c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm160-48c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zM288 352c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faBriefcaseMedical = {
    prefix: 'fas',
    iconName: 'briefcase-medical',
    icon: [
      512,
      512,
      [],
      'f469',
      'M184 48H328c4.4 0 8 3.6 8 8V96H176V56c0-4.4 3.6-8 8-8zm-56 8V96H64C28.7 96 0 124.7 0 160V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H384V56c0-30.9-25.1-56-56-56H184c-30.9 0-56 25.1-56 56zm96 152c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H288v48c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V320H176c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h48V208z',
    ],
  };
  var faGenderless = {
    prefix: 'fas',
    iconName: 'genderless',
    icon: [
      384,
      512,
      [],
      'f22d',
      'M192 368c-61.9 0-112-50.1-112-112s50.1-112 112-112s112 50.1 112 112s-50.1 112-112 112zm0 64c97.2 0 176-78.8 176-176s-78.8-176-176-176S16 158.8 16 256s78.8 176 176 176z',
    ],
  };
  var faChevronRight = {
    prefix: 'fas',
    iconName: 'chevron-right',
    icon: [
      384,
      512,
      [9002],
      'f054',
      'M342.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-192 192c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L274.7 256 105.4 86.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l192 192z',
    ],
  };
  var faRetweet = {
    prefix: 'fas',
    iconName: 'retweet',
    icon: [
      576,
      512,
      [],
      'f079',
      'M272 416c17.7 0 32-14.3 32-32s-14.3-32-32-32H160c-17.7 0-32-14.3-32-32V192h32c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-64-64c-12.5-12.5-32.8-12.5-45.3 0l-64 64c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l32 0 0 128c0 53 43 96 96 96H272zM304 96c-17.7 0-32 14.3-32 32s14.3 32 32 32l112 0c17.7 0 32 14.3 32 32l0 128H416c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l64 64c12.5 12.5 32.8 12.5 45.3 0l64-64c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8l-32 0V192c0-53-43-96-96-96L304 96z',
    ],
  };
  var faCarRear = {
    prefix: 'fas',
    iconName: 'car-rear',
    icon: [
      512,
      512,
      ['car-alt'],
      'f5de',
      'M165.4 96H346.6c13.6 0 25.7 8.6 30.2 21.4L402.9 192H109.1l26.1-74.6c4.5-12.8 16.6-21.4 30.2-21.4zm-90.6 .3L39.6 196.8C16.4 206.4 0 229.3 0 256v80c0 23.7 12.9 44.4 32 55.4V448c0 17.7 14.3 32 32 32H96c17.7 0 32-14.3 32-32V400H384v48c0 17.7 14.3 32 32 32h32c17.7 0 32-14.3 32-32V391.4c19.1-11.1 32-31.7 32-55.4V256c0-26.7-16.4-49.6-39.6-59.2L437.2 96.3C423.7 57.8 387.4 32 346.6 32H165.4c-40.8 0-77.1 25.8-90.6 64.3zM208 272h96c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H208c-8.8 0-16-7.2-16-16V288c0-8.8 7.2-16 16-16zM48 280c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H72c-13.3 0-24-10.7-24-24zm360-24h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H408c-13.3 0-24-10.7-24-24s10.7-24 24-24z',
    ],
  };
  var faCarAlt = faCarRear;
  var faPumpSoap = {
    prefix: 'fas',
    iconName: 'pump-soap',
    icon: [
      448,
      512,
      [],
      'e06b',
      'M128 32v96H256V96h60.1c4.2 0 8.3 1.7 11.3 4.7l33.9 33.9c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L372.7 55.4c-15-15-35.4-23.4-56.6-23.4H256c0-17.7-14.3-32-32-32H160c-17.7 0-32 14.3-32 32zM117.4 160c-33.3 0-61 25.5-63.8 58.7L35 442.7C31.9 480 61.3 512 98.8 512H285.2c37.4 0 66.9-32 63.8-69.3l-18.7-224c-2.8-33.2-30.5-58.7-63.8-58.7H117.4zM256 360c0 35.3-28.7 56-64 56s-64-20.7-64-56c0-32.5 37-80.9 50.9-97.9c3.2-3.9 8.1-6.1 13.1-6.1s9.9 2.2 13.1 6.1C219 279.1 256 327.5 256 360z',
    ],
  };
  var faVideoSlash = {
    prefix: 'fas',
    iconName: 'video-slash',
    icon: [
      640,
      512,
      [],
      'f4e2',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7l-86.4-67.7 13.8 9.2c9.8 6.5 22.4 7.2 32.9 1.6s16.9-16.4 16.9-28.2V128c0-11.8-6.5-22.6-16.9-28.2s-23-5-32.9 1.6l-96 64L448 174.9V192 320v5.8l-32-25.1V128c0-35.3-28.7-64-64-64H113.9L38.8 5.1zM32 128V384c0 35.3 28.7 64 64 64H352c23.4 0 43.9-12.6 55-31.3L32.3 121.5c-.2 2.1-.3 4.3-.3 6.5z',
    ],
  };
  var faBatteryQuarter = {
    prefix: 'fas',
    iconName: 'battery-quarter',
    icon: [
      576,
      512,
      ['battery-2'],
      'f243',
      'M0 176c0-44.2 35.8-80 80-80H464c44.2 0 80 35.8 80 80v16c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32v16c0 44.2-35.8 80-80 80H80c-44.2 0-80-35.8-80-80V176zm80-16c-8.8 0-16 7.2-16 16V336c0 8.8 7.2 16 16 16H464c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H80zm112 32V320H96V192h96z',
    ],
  };
  var faBattery2 = faBatteryQuarter;
  var faRadio = {
    prefix: 'fas',
    iconName: 'radio',
    icon: [
      512,
      512,
      [128251],
      'f8d7',
      'M494.8 47c12.7-3.7 20-17.1 16.3-29.8S494-2.8 481.2 1L51.7 126.9c-9.4 2.7-17.9 7.3-25.1 13.2C10.5 151.7 0 170.6 0 192v4V304 448c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V192c0-35.3-28.7-64-64-64H218.5L494.8 47zM368 400c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80zM80 256c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16s-7.2 16-16 16H96c-8.8 0-16-7.2-16-16zM64 320c0-8.8 7.2-16 16-16H208c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16zm16 64c0-8.8 7.2-16 16-16h96c8.8 0 16 7.2 16 16s-7.2 16-16 16H96c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faBabyCarriage = {
    prefix: 'fas',
    iconName: 'baby-carriage',
    icon: [
      512,
      512,
      ['carriage-baby'],
      'f77d',
      'M256 192H.1C2.7 117.9 41.3 52.9 99 14.1c13.3-8.9 30.8-4.3 39.9 8.8L256 192zm128-32c0-35.3 28.7-64 64-64h32c17.7 0 32 14.3 32 32s-14.3 32-32 32l-32 0v64c0 25.2-5.8 50.2-17 73.5s-27.8 44.5-48.6 62.3s-45.5 32-72.7 41.6S253.4 416 224 416s-58.5-5-85.7-14.6s-51.9-23.8-72.7-41.6s-37.3-39-48.6-62.3S0 249.2 0 224l224 0 160 0V160zM80 512c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48zm336-48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48z',
    ],
  };
  var faCarriageBaby = faBabyCarriage;
  var faTrafficLight = {
    prefix: 'fas',
    iconName: 'traffic-light',
    icon: [
      320,
      512,
      [128678],
      'f637',
      'M64 0C28.7 0 0 28.7 0 64V352c0 88.4 71.6 160 160 160s160-71.6 160-160V64c0-35.3-28.7-64-64-64H64zm96 320c26.5 0 48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48zm-48-80c0-26.5 21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48zM160 64c26.5 0 48 21.5 48 48s-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48z',
    ],
  };
  var faThermometer = {
    prefix: 'fas',
    iconName: 'thermometer',
    icon: [
      512,
      512,
      [],
      'f491',
      'M96 382.1V293.3c0-14.9 5.9-29.1 16.4-39.6l27.3-27.3 57 57c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-57-57 41.4-41.4 57 57c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-57-57 41.4-41.4 57 57c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-57-57 45.5-45.5C355.2 10.9 381.4 0 408.8 0C465.8 0 512 46.2 512 103.2c0 27.4-10.9 53.6-30.2 73L258.3 399.6c-10.5 10.5-24.7 16.4-39.6 16.4H129.9L41 505c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l89-89z',
    ],
  };
  var faVrCardboard = {
    prefix: 'fas',
    iconName: 'vr-cardboard',
    icon: [
      640,
      512,
      [],
      'f729',
      'M576 64H64C28.7 64 0 92.7 0 128V384c0 35.3 28.7 64 64 64H184.4c24.2 0 46.4-13.7 57.2-35.4l32-64c8.8-17.5 26.7-28.6 46.3-28.6s37.5 11.1 46.3 28.6l32 64c10.8 21.7 33 35.4 57.2 35.4H576c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zM224 240c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm256 64c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faHandMiddleFinger = {
    prefix: 'fas',
    iconName: 'hand-middle-finger',
    icon: [
      448,
      512,
      [128405],
      'f806',
      'M232 0c-22.1 0-40 17.9-40 40V204.2c-8.5-7.6-19.7-12.2-32-12.2c-26.5 0-48 21.5-48 48v7 73c0 8.8-7.2 16-16 16s-16-7.2-16-16V264.3c-2 1.4-3.9 3-5.8 4.5L55 284.8C40.4 297 32 315 32 334V372c0 38 16.9 74 46.1 98.3l5.4 4.5c28.8 24 65 37.1 102.4 37.1H304c70.7 0 128-57.3 128-128V320 288c0-26.5-21.5-48-48-48c-12.4 0-23.6 4.7-32.1 12.3C350 227.5 329.3 208 304 208c-12.3 0-23.5 4.6-32 12.2V40c0-22.1-17.9-40-40-40z',
    ],
  };
  var faPercent = {
    prefix: 'fas',
    iconName: 'percent',
    icon: [
      384,
      512,
      [62101, 62785, 'percentage'],
      '25',
      'M374.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-320 320c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l320-320zM128 128c0-35.3-28.7-64-64-64S0 92.7 0 128s28.7 64 64 64s64-28.7 64-64zM384 384c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faPercentage = faPercent;
  var faTruckMoving = {
    prefix: 'fas',
    iconName: 'truck-moving',
    icon: [
      640,
      512,
      [],
      'f4df',
      'M64 32C28.7 32 0 60.7 0 96V304v80 16c0 44.2 35.8 80 80 80c26.2 0 49.4-12.6 64-32c14.6 19.4 37.8 32 64 32c44.2 0 80-35.8 80-80c0-5.5-.6-10.8-1.6-16H416h33.6c-1 5.2-1.6 10.5-1.6 16c0 44.2 35.8 80 80 80s80-35.8 80-80c0-5.5-.6-10.8-1.6-16H608c17.7 0 32-14.3 32-32V288 272 261.7c0-9.2-3.2-18.2-9-25.3l-58.8-71.8c-10.6-13-26.5-20.5-43.3-20.5H480V96c0-35.3-28.7-64-64-64H64zM585 256H480V192h48.8c2.4 0 4.7 1.1 6.2 2.9L585 256zM528 432c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zM240 400c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM80 432c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faGlassWaterDroplet = {
    prefix: 'fas',
    iconName: 'glass-water-droplet',
    icon: [
      448,
      512,
      [],
      'e4f5',
      'M64 0C55.1 0 46.6 3.7 40.6 10.2s-9.1 15.2-8.5 24.1L60.9 437.7c3 41.9 37.8 74.3 79.8 74.3H307.3c42 0 76.8-32.4 79.8-74.3L415.9 34.3c.6-8.9-2.4-17.6-8.5-24.1S392.9 0 384 0H64zm51 297.5L98.4 64H349.6L333 297.5 320 304c-20.1 10.1-43.9 10.1-64 0s-43.9-10.1-64 0s-43.9 10.1-64 0l-13-6.5zM288 196c0-24-33.7-70.1-52.2-93.5c-6.1-7.7-17.5-7.7-23.6 0C193.7 125.9 160 172 160 196c0 33.1 28.7 60 64 60s64-26.9 64-60z',
    ],
  };
  var faDisplay = {
    prefix: 'fas',
    iconName: 'display',
    icon: [
      576,
      512,
      [],
      'e163',
      'M64 0C28.7 0 0 28.7 0 64V352c0 35.3 28.7 64 64 64H240l-10.7 32H160c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H346.7L336 416H512c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM512 64V352H64V64H512z',
    ],
  };
  var faFaceSmile = {
    prefix: 'fas',
    iconName: 'face-smile',
    icon: [
      512,
      512,
      [128578, 'smile'],
      'f118',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM164.1 325.5C182 346.2 212.6 368 256 368s74-21.8 91.9-42.5c5.8-6.7 15.9-7.4 22.6-1.6s7.4 15.9 1.6 22.6C349.8 372.1 311.1 400 256 400s-93.8-27.9-116.1-53.5c-5.8-6.7-5.1-16.8 1.6-22.6s16.8-5.1 22.6 1.6zM208.4 208c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faSmile = faFaceSmile;
  var faThumbtack = {
    prefix: 'fas',
    iconName: 'thumbtack',
    icon: [
      384,
      512,
      [128204, 128392, 'thumb-tack'],
      'f08d',
      'M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z',
    ],
  };
  var faThumbTack = faThumbtack;
  var faTrophy = {
    prefix: 'fas',
    iconName: 'trophy',
    icon: [
      576,
      512,
      [127942],
      'f091',
      'M400 0H176c-26.5 0-48.1 21.8-47.1 48.2c.2 5.3 .4 10.6 .7 15.8H24C10.7 64 0 74.7 0 88c0 92.6 33.5 157 78.5 200.7c44.3 43.1 98.3 64.8 138.1 75.8c23.4 6.5 39.4 26 39.4 45.6c0 20.9-17 37.9-37.9 37.9H192c-17.7 0-32 14.3-32 32s14.3 32 32 32H384c17.7 0 32-14.3 32-32s-14.3-32-32-32H357.9C337 448 320 431 320 410.1c0-19.6 15.9-39.2 39.4-45.6c39.9-11 93.9-32.7 138.2-75.8C542.5 245 576 180.6 576 88c0-13.3-10.7-24-24-24H446.4c.3-5.2 .5-10.4 .7-15.8C448.1 21.8 426.5 0 400 0zM48.9 112h84.4c9.1 90.1 29.2 150.3 51.9 190.6c-24.9-11-50.8-26.5-73.2-48.3c-32-31.1-58-76-63-142.3zM464.1 254.3c-22.4 21.8-48.3 37.3-73.2 48.3c22.7-40.3 42.8-100.5 51.9-190.6h84.4c-5.1 66.3-31.1 111.2-63 142.3z',
    ],
  };
  var faPersonPraying = {
    prefix: 'fas',
    iconName: 'person-praying',
    icon: [
      448,
      512,
      [128720, 'pray'],
      'f683',
      'M352 64c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zM232.7 264l22.9 31.5c6.5 8.9 16.3 14.7 27.2 16.1s21.9-1.7 30.4-8.7l88-72c17.1-14 19.6-39.2 5.6-56.3s-39.2-19.6-56.3-5.6l-55.2 45.2-26.2-36C253.6 156.7 228.6 144 202 144c-30.9 0-59.2 17.1-73.6 44.4L79.8 280.9c-20.2 38.5-9.4 85.9 25.6 111.8L158.6 432H72c-22.1 0-40 17.9-40 40s17.9 40 40 40H280c17.3 0 32.6-11.1 38-27.5s-.3-34.4-14.2-44.7L187.7 354l45-90z',
    ],
  };
  var faPray = faPersonPraying;
  var faHammer = {
    prefix: 'fas',
    iconName: 'hammer',
    icon: [
      576,
      512,
      [128296],
      'f6e3',
      'M413.5 237.5c-28.2 4.8-58.2-3.6-80-25.4l-38.1-38.1C280.4 159 272 138.8 272 117.6V105.5L192.3 62c-5.3-2.9-8.6-8.6-8.3-14.7s3.9-11.5 9.5-14l47.2-21C259.1 4.2 279 0 299.2 0h18.1c36.7 0 72 14 98.7 39.1l44.6 42c24.2 22.8 33.2 55.7 26.6 86L503 183l8-8c9.4-9.4 24.6-9.4 33.9 0l24 24c9.4 9.4 9.4 24.6 0 33.9l-88 88c-9.4 9.4-24.6 9.4-33.9 0l-24-24c-9.4-9.4-9.4-24.6 0-33.9l8-8-17.5-17.5zM27.4 377.1L260.9 182.6c3.5 4.9 7.5 9.6 11.8 14l38.1 38.1c6 6 12.4 11.2 19.2 15.7L134.9 484.6c-14.5 17.4-36 27.4-58.6 27.4C34.1 512 0 477.8 0 435.7c0-22.6 10.1-44.1 27.4-58.6z',
    ],
  };
  var faHandPeace = {
    prefix: 'fas',
    iconName: 'hand-peace',
    icon: [
      512,
      512,
      [9996],
      'f25b',
      'M224 0c17.7 0 32 14.3 32 32V240H192V32c0-17.7 14.3-32 32-32zm96 160c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V192c0-17.7 14.3-32 32-32zm64 64c0-17.7 14.3-32 32-32s32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V224zM93.3 51.2L175.9 240H106.1L34.7 76.8C27.6 60.6 35 41.8 51.2 34.7s35.1 .3 42.1 16.5zm27 221.3l-.2-.5h69.9H216c22.1 0 40 17.9 40 40s-17.9 40-40 40H160c-8.8 0-16 7.2-16 16s7.2 16 16 16h56c39.8 0 72-32.2 72-72l0-.6c9.4 5.4 20.3 8.6 32 8.6c13.2 0 25.4-4 35.6-10.8c8.7 24.9 32.5 42.8 60.4 42.8c11.7 0 22.6-3.1 32-8.6V352c0 88.4-71.6 160-160 160H226.3c-42.4 0-83.1-16.9-113.1-46.9l-11.6-11.6C77.5 429.5 64 396.9 64 363V336c0-32.7 24.6-59.7 56.3-63.5z',
    ],
  };
  var faRotate = {
    prefix: 'fas',
    iconName: 'rotate',
    icon: [
      512,
      512,
      [128260, 'sync-alt'],
      'f2f1',
      'M142.9 142.9c62.2-62.2 162.7-62.5 225.3-1L327 183c-6.9 6.9-8.9 17.2-5.2 26.2s12.5 14.8 22.2 14.8H463.5c0 0 0 0 0 0H472c13.3 0 24-10.7 24-24V72c0-9.7-5.8-18.5-14.8-22.2s-19.3-1.7-26.2 5.2L413.4 96.6c-87.6-86.5-228.7-86.2-315.8 1C73.2 122 55.6 150.7 44.8 181.4c-5.9 16.7 2.9 34.9 19.5 40.8s34.9-2.9 40.8-19.5c7.7-21.8 20.2-42.3 37.8-59.8zM16 312v7.6 .7V440c0 9.7 5.8 18.5 14.8 22.2s19.3 1.7 26.2-5.2l41.6-41.6c87.6 86.5 228.7 86.2 315.8-1c24.4-24.4 42.1-53.1 52.9-83.7c5.9-16.7-2.9-34.9-19.5-40.8s-34.9 2.9-40.8 19.5c-7.7 21.8-20.2 42.3-37.8 59.8c-62.2 62.2-162.7 62.5-225.3 1L185 329c6.9-6.9 8.9-17.2 5.2-26.2s-12.5-14.8-22.2-14.8H48.4h-.7H40c-13.3 0-24 10.7-24 24z',
    ],
  };
  var faSyncAlt = faRotate;
  var faSpinner = {
    prefix: 'fas',
    iconName: 'spinner',
    icon: [
      512,
      512,
      [],
      'f110',
      'M304 48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm0 416c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM48 304c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm464-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM142.9 437c18.7-18.7 18.7-49.1 0-67.9s-49.1-18.7-67.9 0s-18.7 49.1 0 67.9s49.1 18.7 67.9 0zm0-294.2c18.7-18.7 18.7-49.1 0-67.9S93.7 56.2 75 75s-18.7 49.1 0 67.9s49.1 18.7 67.9 0zM369.1 437c18.7 18.7 49.1 18.7 67.9 0s18.7-49.1 0-67.9s-49.1-18.7-67.9 0s-18.7 49.1 0 67.9z',
    ],
  };
  var faRobot = {
    prefix: 'fas',
    iconName: 'robot',
    icon: [
      640,
      512,
      [129302],
      'f544',
      'M320 0c17.7 0 32 14.3 32 32V96H480c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H160c-35.3 0-64-28.7-64-64V160c0-35.3 28.7-64 64-64H288V32c0-17.7 14.3-32 32-32zM208 384c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H208zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H304zm96 0c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H400zM264 256c0-22.1-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40s40-17.9 40-40zm152 40c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40zM48 224H64V416H48c-26.5 0-48-21.5-48-48V272c0-26.5 21.5-48 48-48zm544 0c26.5 0 48 21.5 48 48v96c0 26.5-21.5 48-48 48H576V224h16z',
    ],
  };
  var faPeace = {
    prefix: 'fas',
    iconName: 'peace',
    icon: [
      512,
      512,
      [9774],
      'f67c',
      'M224 445.3V323.5l-94.3 77.1c26.1 22.8 58.5 38.7 94.3 44.7zM89.2 351.1L224 240.8V66.7C133.2 81.9 64 160.9 64 256c0 34.6 9.2 67.1 25.2 95.1zm293.1 49.5L288 323.5V445.3c35.7-6 68.1-21.9 94.3-44.7zm40.6-49.5c16-28 25.2-60.5 25.2-95.1c0-95.1-69.2-174.1-160-189.3V240.8L422.8 351.1zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256z',
    ],
  };
  var faGears = {
    prefix: 'fas',
    iconName: 'gears',
    icon: [
      640,
      512,
      ['cogs'],
      'f085',
      'M308.5 135.3c7.1-6.3 9.9-16.2 6.2-25c-2.3-5.3-4.8-10.5-7.6-15.5L304 89.4c-3-5-6.3-9.9-9.8-14.6c-5.7-7.6-15.7-10.1-24.7-7.1l-28.2 9.3c-10.7-8.8-23-16-36.2-20.9L199 27.1c-1.9-9.3-9.1-16.7-18.5-17.8C173.7 8.4 166.9 8 160 8s-13.7 .4-20.4 1.2c-9.4 1.1-16.6 8.6-18.5 17.8L115 56.1c-13.3 5-25.5 12.1-36.2 20.9L50.5 67.8c-9-3-19-.5-24.7 7.1c-3.5 4.7-6.8 9.6-9.9 14.6l-3 5.3c-2.8 5-5.3 10.2-7.6 15.6c-3.7 8.7-.9 18.6 6.2 25l22.2 19.8C32.6 161.9 32 168.9 32 176s.6 14.1 1.7 20.9L11.5 216.7c-7.1 6.3-9.9 16.2-6.2 25c2.3 5.3 4.8 10.5 7.6 15.6l3 5.2c3 5.1 6.3 9.9 9.9 14.6c5.7 7.6 15.7 10.1 24.7 7.1l28.2-9.3c10.7 8.8 23 16 36.2 20.9l6.1 29.1c1.9 9.3 9.1 16.7 18.5 17.8c6.7 .8 13.5 1.2 20.4 1.2s13.7-.4 20.4-1.2c9.4-1.1 16.6-8.6 18.5-17.8l6.1-29.1c13.3-5 25.5-12.1 36.2-20.9l28.2 9.3c9 3 19 .5 24.7-7.1c3.5-4.7 6.8-9.5 9.8-14.6l3.1-5.4c2.8-5 5.3-10.2 7.6-15.5c3.7-8.7 .9-18.6-6.2-25l-22.2-19.8c1.1-6.8 1.7-13.8 1.7-20.9s-.6-14.1-1.7-20.9l22.2-19.8zM208 176c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM504.7 500.5c6.3 7.1 16.2 9.9 25 6.2c5.3-2.3 10.5-4.8 15.5-7.6l5.4-3.1c5-3 9.9-6.3 14.6-9.8c7.6-5.7 10.1-15.7 7.1-24.7l-9.3-28.2c8.8-10.7 16-23 20.9-36.2l29.1-6.1c9.3-1.9 16.7-9.1 17.8-18.5c.8-6.7 1.2-13.5 1.2-20.4s-.4-13.7-1.2-20.4c-1.1-9.4-8.6-16.6-17.8-18.5L583.9 307c-5-13.3-12.1-25.5-20.9-36.2l9.3-28.2c3-9 .5-19-7.1-24.7c-4.7-3.5-9.6-6.8-14.6-9.9l-5.3-3c-5-2.8-10.2-5.3-15.6-7.6c-8.7-3.7-18.6-.9-25 6.2l-19.8 22.2c-6.8-1.1-13.8-1.7-20.9-1.7s-14.1 .6-20.9 1.7l-19.8-22.2c-6.3-7.1-16.2-9.9-25-6.2c-5.3 2.3-10.5 4.8-15.6 7.6l-5.2 3c-5.1 3-9.9 6.3-14.6 9.9c-7.6 5.7-10.1 15.7-7.1 24.7l9.3 28.2c-8.8 10.7-16 23-20.9 36.2L315.1 313c-9.3 1.9-16.7 9.1-17.8 18.5c-.8 6.7-1.2 13.5-1.2 20.4s.4 13.7 1.2 20.4c1.1 9.4 8.6 16.6 17.8 18.5l29.1 6.1c5 13.3 12.1 25.5 20.9 36.2l-9.3 28.2c-3 9-.5 19 7.1 24.7c4.7 3.5 9.5 6.8 14.6 9.8l5.4 3.1c5 2.8 10.2 5.3 15.5 7.6c8.7 3.7 18.6 .9 25-6.2l19.8-22.2c6.8 1.1 13.8 1.7 20.9 1.7s14.1-.6 20.9-1.7l19.8 22.2zM464 400c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faCogs = faGears;
  var faWarehouse = {
    prefix: 'fas',
    iconName: 'warehouse',
    icon: [
      640,
      512,
      [],
      'f494',
      'M0 488V171.3c0-26.2 15.9-49.7 40.2-59.4L308.1 4.8c7.6-3.1 16.1-3.1 23.8 0L599.8 111.9c24.3 9.7 40.2 33.3 40.2 59.4V488c0 13.3-10.7 24-24 24H568c-13.3 0-24-10.7-24-24V224c0-17.7-14.3-32-32-32H128c-17.7 0-32 14.3-32 32V488c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24zm488 24l-336 0c-13.3 0-24-10.7-24-24V432H512l0 56c0 13.3-10.7 24-24 24zM128 400V336H512v64H128zm0-96V224H512l0 80H128z',
    ],
  };
  var faArrowUpRightDots = {
    prefix: 'fas',
    iconName: 'arrow-up-right-dots',
    icon: [
      576,
      512,
      [],
      'e4b7',
      'M160 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h50.7L9.4 265.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L256 109.3V160c0 17.7 14.3 32 32 32s32-14.3 32-32V32c0-17.7-14.3-32-32-32H160zM576 80c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM448 208c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM400 384c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm48 80c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm128 0c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM272 384c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm48 80c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM144 512c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM576 336c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zm-48-80c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48z',
    ],
  };
  var faSplotch = {
    prefix: 'fas',
    iconName: 'splotch',
    icon: [
      512,
      512,
      [],
      'f5bc',
      'M287.6 .1c-19.7 0-38.3 9.1-50.4 24.6L205.9 64.9c-17.9 23-46 35.6-75.1 33.7L59.1 94c-13.5-.9-26.9 3.2-37.7 11.6C-1.3 123.2-6.7 155.2 8.8 179.4l44.5 69.2c7.1 11 10.8 23.8 10.8 36.8c0 11.9-3.1 23.5-9 33.8L27.4 367.7c-10 17.5-10 39.1 0 56.6c12.1 21.2 36.4 32.3 60.4 27.7l67-13c5.5-1.1 11.2-1.6 16.8-1.6H180c20.9 0 41 7.4 56.9 20.9l45 38.2c11.8 10 26.9 15.6 42.4 15.6c37.8 0 67.7-31.9 65.4-69.6l-3.1-50.6c-1-16.8 6.6-32.9 20.1-42.8l82.5-60.2c14.2-10.4 22.7-27 22.7-44.6c0-23.2-14.5-43.9-36.3-51.8l-58.2-21.2c-24.4-8.9-42.9-29.1-49.7-54.2L349.3 47.4C341.8 19.5 316.5 .1 287.6 .1z',
    ],
  };
  var faFaceGrinHearts = {
    prefix: 'fas',
    iconName: 'face-grin-hearts',
    icon: [
      512,
      512,
      [128525, 'grin-hearts'],
      'f584',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM383.8 317.8c12.3-3.7 24.3 7 19.2 18.7c-24.5 56.9-81.1 96.7-147 96.7s-122.5-39.8-147-96.7c-5.1-11.8 6.9-22.4 19.2-18.7C166.7 329.4 210.1 336 256 336s89.3-6.6 127.8-18.2zM199.3 129.1c17.8 4.8 28.4 23.1 23.6 40.8l-17.4 65c-2.3 8.5-11.1 13.6-19.6 11.3l-65.1-17.4c-17.8-4.8-28.4-23.1-23.6-40.8s23.1-28.4 40.8-23.6l16.1 4.3 4.3-16.1c4.8-17.8 23.1-28.4 40.8-23.6zm154.3 23.6l4.3 16.1 16.1-4.3c17.8-4.8 36.1 5.8 40.8 23.6s-5.8 36.1-23.6 40.8l-65.1 17.4c-8.5 2.3-17.3-2.8-19.6-11.3l-17.4-65c-4.8-17.8 5.8-36.1 23.6-40.8s36.1 5.8 40.9 23.6z',
    ],
  };
  var faGrinHearts = faFaceGrinHearts;
  var faDiceFour = {
    prefix: 'fas',
    iconName: 'dice-four',
    icon: [
      448,
      512,
      [9859],
      'f524',
      'M0 96C0 60.7 28.7 32 64 32H384c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zm160 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM128 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zM352 160c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM320 384c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faSimCard = {
    prefix: 'fas',
    iconName: 'sim-card',
    icon: [
      384,
      512,
      [],
      'f7c4',
      'M64 0H242.7c17 0 33.3 6.7 45.3 18.7L365.3 96c12 12 18.7 28.3 18.7 45.3V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64C0 28.7 28.7 0 64 0zM96 192c-17.7 0-32 14.3-32 32v32h64V192H96zM64 352h80 96 80V288H240 144 64v64zM320 224c0-17.7-14.3-32-32-32H256v64h64V224zM160 192v64h64V192H160zM288 448c17.7 0 32-14.3 32-32V384H256v64h32zM160 384v64h64V384H160zM64 416c0 17.7 14.3 32 32 32h32V384H64v32z',
    ],
  };
  var faTransgender = {
    prefix: 'fas',
    iconName: 'transgender',
    icon: [
      512,
      512,
      [9895, 'transgender-alt'],
      'f225',
      'M112 0c6.5 0 12.3 3.9 14.8 9.9s1.1 12.9-3.5 17.4l-31 31L112 78.1l7-7c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-7 7 15.2 15.2C187.7 107.6 220.5 96 256 96s68.3 11.6 94.9 31.2l68.8-68.8-31-31c-4.6-4.6-5.9-11.5-3.5-17.4s8.3-9.9 14.8-9.9h96c8.8 0 16 7.2 16 16v96c0 6.5-3.9 12.3-9.9 14.8s-12.9 1.1-17.4-3.5l-31-31-68.8 68.8C404.4 187.7 416 220.5 416 256c0 80.2-59 146.6-136 158.2V432h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v8c0 13.3-10.7 24-24 24s-24-10.7-24-24v-8H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h16V414.2C155 402.6 96 336.2 96 256c0-35.5 11.6-68.3 31.2-94.9L112 145.9l-7 7c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l7-7L58.3 92.3l-31 31c-4.6 4.6-11.5 5.9-17.4 3.5S0 118.5 0 112V16C0 7.2 7.2 0 16 0h96zM352 256c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96z',
    ],
  };
  var faTransgenderAlt = faTransgender;
  var faMercury = {
    prefix: 'fas',
    iconName: 'mercury',
    icon: [
      384,
      512,
      [9791],
      'f223',
      'M72.1 7C85.8-4 106-1.8 117 12c17.6 22 44.7 36 75 36s57.3-14 75-36c11.1-13.8 31.2-16 45-5s16 31.2 5 45c-7.8 9.7-16.6 18.4-26.4 26.1C337.3 109.7 368 163.3 368 224c0 89.1-66.2 162.7-152 174.4V424h32c13.3 0 24 10.7 24 24s-10.7 24-24 24H216v16c0 13.3-10.7 24-24 24s-24-10.7-24-24V472H136c-13.3 0-24-10.7-24-24s10.7-24 24-24h32V398.4C82.2 386.7 16 313.1 16 224c0-60.7 30.7-114.3 77.5-145.9C83.7 70.5 74.9 61.7 67.1 52c-11.1-13.8-8.8-33.9 5-45zM80 224c0 61.9 50.1 112 112 112s112-50.1 112-112s-50.1-112-112-112s-112 50.1-112 112z',
    ],
  };
  var faArrowTurnDown = {
    prefix: 'fas',
    iconName: 'arrow-turn-down',
    icon: [
      384,
      512,
      ['level-down'],
      'f149',
      'M32 64C14.3 64 0 49.7 0 32S14.3 0 32 0l96 0c53 0 96 43 96 96l0 306.7 73.4-73.4c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3l-128 128c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 402.7 160 96c0-17.7-14.3-32-32-32L32 64z',
    ],
  };
  var faLevelDown = faArrowTurnDown;
  var faPersonFallingBurst = {
    prefix: 'fas',
    iconName: 'person-falling-burst',
    icon: [
      640,
      512,
      [],
      'e547',
      'M256 32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 9.8c0 39-23.7 74-59.9 88.4C71.6 154.5 32 213 32 278.2V352c0 17.7 14.3 32 32 32s32-14.3 32-32l0-73.8c0-10 1.6-19.8 4.5-29L261.1 497.4c9.6 14.8 29.4 19.1 44.3 9.5s19.1-29.4 9.5-44.3L222.6 320H224l80 0 38.4 51.2c10.6 14.1 30.7 17 44.8 6.4s17-30.7 6.4-44.8l-43.2-57.6C341.3 263.1 327.1 256 312 256l-71.5 0-56.8-80.2-.2-.3c44.7-29 72.5-79 72.5-133.6l0-9.8zM96 80c0-26.5-21.5-48-48-48S0 53.5 0 80s21.5 48 48 48s48-21.5 48-48zM464 286.1l58.6 53.9c4.8 4.4 11.9 5.5 17.8 2.6s9.5-9 9-15.5l-5.6-79.4 78.7-12.2c6.5-1 11.7-5.9 13.1-12.2s-1.1-13-6.5-16.7l-65.6-45.1L603 92.2c3.3-5.7 2.7-12.8-1.4-17.9s-10.9-7.2-17.2-5.3L508.3 92.1l-29.4-74C476.4 12 470.6 8 464 8s-12.4 4-14.9 10.1l-29.4 74L343.6 68.9c-6.3-1.9-13.1 .2-17.2 5.3s-4.6 12.2-1.4 17.9l39.5 69.1-65.6 45.1c-5.4 3.7-8 10.3-6.5 16.7c.1 .3 .1 .6 .2 .8l19.4 0c20.1 0 39.2 7.5 53.8 20.8l18.4 2.9L383 265.3l36.2 48.3c2.1 2.8 3.9 5.7 5.5 8.6L464 286.1z',
    ],
  };
  var faAward = {
    prefix: 'fas',
    iconName: 'award',
    icon: [
      384,
      512,
      [],
      'f559',
      'M173.8 5.5c11-7.3 25.4-7.3 36.4 0L228 17.2c6 3.9 13 5.8 20.1 5.4l21.3-1.3c13.2-.8 25.6 6.4 31.5 18.2l9.6 19.1c3.2 6.4 8.4 11.5 14.7 14.7L344.5 83c11.8 5.9 19 18.3 18.2 31.5l-1.3 21.3c-.4 7.1 1.5 14.2 5.4 20.1l11.8 17.8c7.3 11 7.3 25.4 0 36.4L366.8 228c-3.9 6-5.8 13-5.4 20.1l1.3 21.3c.8 13.2-6.4 25.6-18.2 31.5l-19.1 9.6c-6.4 3.2-11.5 8.4-14.7 14.7L301 344.5c-5.9 11.8-18.3 19-31.5 18.2l-21.3-1.3c-7.1-.4-14.2 1.5-20.1 5.4l-17.8 11.8c-11 7.3-25.4 7.3-36.4 0L156 366.8c-6-3.9-13-5.8-20.1-5.4l-21.3 1.3c-13.2 .8-25.6-6.4-31.5-18.2l-9.6-19.1c-3.2-6.4-8.4-11.5-14.7-14.7L39.5 301c-11.8-5.9-19-18.3-18.2-31.5l1.3-21.3c.4-7.1-1.5-14.2-5.4-20.1L5.5 210.2c-7.3-11-7.3-25.4 0-36.4L17.2 156c3.9-6 5.8-13 5.4-20.1l-1.3-21.3c-.8-13.2 6.4-25.6 18.2-31.5l19.1-9.6C65 70.2 70.2 65 73.4 58.6L83 39.5c5.9-11.8 18.3-19 31.5-18.2l21.3 1.3c7.1 .4 14.2-1.5 20.1-5.4L173.8 5.5zM272 192c0-44.2-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80s80-35.8 80-80zM1.3 441.8L44.4 339.3c.2 .1 .3 .2 .4 .4l9.6 19.1c11.7 23.2 36 37.3 62 35.8l21.3-1.3c.2 0 .5 0 .7 .2l17.8 11.8c5.1 3.3 10.5 5.9 16.1 7.7l-37.6 89.3c-2.3 5.5-7.4 9.2-13.3 9.7s-11.6-2.2-14.8-7.2L74.4 455.5l-56.1 8.3c-5.7 .8-11.4-1.5-15-6s-4.3-10.7-2.1-16zm248 60.4L211.7 413c5.6-1.8 11-4.3 16.1-7.7l17.8-11.8c.2-.1 .4-.2 .7-.2l21.3 1.3c26 1.5 50.3-12.6 62-35.8l9.6-19.1c.1-.2 .2-.3 .4-.4l43.2 102.5c2.2 5.3 1.4 11.4-2.1 16s-9.3 6.9-15 6l-56.1-8.3-32.2 49.2c-3.2 5-8.9 7.7-14.8 7.2s-11-4.3-13.3-9.7z',
    ],
  };
  var faTicketSimple = {
    prefix: 'fas',
    iconName: 'ticket-simple',
    icon: [
      576,
      512,
      ['ticket-alt'],
      'f3ff',
      'M0 128C0 92.7 28.7 64 64 64H512c35.3 0 64 28.7 64 64v80c-26.5 0-48 21.5-48 48s21.5 48 48 48v80c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V304c26.5 0 48-21.5 48-48s-21.5-48-48-48V128z',
    ],
  };
  var faTicketAlt = faTicketSimple;
  var faBuilding = {
    prefix: 'fas',
    iconName: 'building',
    icon: [
      384,
      512,
      [127970, 61687],
      'f1ad',
      'M48 0C21.5 0 0 21.5 0 48V464c0 26.5 21.5 48 48 48h96V432c0-26.5 21.5-48 48-48s48 21.5 48 48v80h96c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48H48zM64 240c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V240zm112-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V240c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V240zM80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H80c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm80 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V112zM272 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16z',
    ],
  };
  var faAnglesLeft = {
    prefix: 'fas',
    iconName: 'angles-left',
    icon: [
      512,
      512,
      [171, 'angle-double-left'],
      'f100',
      'M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160zm352-160l-160 160c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L301.3 256 438.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0z',
    ],
  };
  var faAngleDoubleLeft = faAnglesLeft;
  var faQrcode = {
    prefix: 'fas',
    iconName: 'qrcode',
    icon: [
      448,
      512,
      [],
      'f029',
      'M48 32C21.5 32 0 53.5 0 80v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H48zm80 64v64H64V96h64zM48 288c-26.5 0-48 21.5-48 48v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V336c0-26.5-21.5-48-48-48H48zm80 64v64H64V352h64zM256 80v96c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H304c-26.5 0-48 21.5-48 48zm64 16h64v64H320V96zm32 352v32h32V448H352zm96 0H416v32h32V448zM416 288v32H352V288H256v96 96h64V384h32v32h96V352 320 288H416z',
    ],
  };
  var faClockRotateLeft = {
    prefix: 'fas',
    iconName: 'clock-rotate-left',
    icon: [
      512,
      512,
      ['history'],
      'f1da',
      'M75 75L41 41C25.9 25.9 0 36.6 0 57.9V168c0 13.3 10.7 24 24 24H134.1c21.4 0 32.1-25.9 17-41l-30.8-30.8C155 85.5 203 64 256 64c106 0 192 86 192 192s-86 192-192 192c-40.8 0-78.6-12.7-109.7-34.4c-14.5-10.1-34.4-6.6-44.6 7.9s-6.6 34.4 7.9 44.6C151.2 495 201.7 512 256 512c141.4 0 256-114.6 256-256S397.4 0 256 0C185.3 0 121.3 28.7 75 75zm181 53c-13.3 0-24 10.7-24 24V256c0 6.4 2.5 12.5 7 17l72 72c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-65-65V152c0-13.3-10.7-24-24-24z',
    ],
  };
  var faHistory = faClockRotateLeft;
  var faFaceGrinBeamSweat = {
    prefix: 'fas',
    iconName: 'face-grin-beam-sweat',
    icon: [
      512,
      512,
      [128517, 'grin-beam-sweat'],
      'f583',
      'M476.8 126.3c-4.1 1.1-8.4 1.7-12.8 1.7c-26.5 0-48-21-48-47c0-5 1.8-11.3 4.6-18.1c.3-.7 .6-1.4 .9-2.1c9-20.2 26.5-44.9 36-57.5c3.2-4.4 9.6-4.4 12.8 0C483.4 20.6 512 61 512 81c0 21.7-14.9 39.8-35.2 45.3zM256 0c51.4 0 99.3 15.2 139.4 41.2c-1.5 3.1-3 6.2-4.3 9.3c-3.4 8-7.1 19-7.1 30.5c0 44.3 36.6 79 80 79c9.6 0 18.8-1.7 27.4-4.8c13.3 30.9 20.6 65 20.6 100.8c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0zM383.8 317.8C345.3 329.4 301.9 336 256 336s-89.3-6.6-127.8-18.2c-12.3-3.7-24.3 7-19.2 18.7c24.5 56.9 81.1 96.7 147 96.7s122.5-39.8 147-96.7c5.1-11.8-6.9-22.4-19.2-18.7zm-166.2-89l0 0 0 0c2.1 2.8 5.7 3.9 8.9 2.8s5.5-4.1 5.5-7.6c0-17.9-6.7-35.6-16.6-48.8c-9.8-13-23.9-23.2-39.4-23.2s-29.6 10.2-39.4 23.2C126.7 188.4 120 206.1 120 224c0 3.4 2.2 6.5 5.5 7.6s6.9 0 8.9-2.8l0 0 0 0 0 0 .2-.2c.2-.2 .4-.5 .7-.9c.6-.8 1.6-2 2.8-3.4c2.5-2.8 6-6.6 10.2-10.3c8.8-7.8 18.8-14 27.7-14s18.9 6.2 27.7 14c4.2 3.7 7.7 7.5 10.2 10.3c1.2 1.4 2.2 2.6 2.8 3.4c.3 .4 .6 .7 .7 .9l.2 .2 0 0 0 0zm160 0l0 0 0 0 0 0c2.1 2.8 5.7 3.9 8.9 2.8s5.5-4.1 5.5-7.6c0-17.9-6.7-35.6-16.6-48.8c-9.8-13-23.9-23.2-39.4-23.2s-29.6 10.2-39.4 23.2C286.7 188.4 280 206.1 280 224c0 3.4 2.2 6.5 5.5 7.6s6.9 0 8.9-2.8l0 0 0 0 0 0 .2-.2c.2-.2 .4-.5 .7-.9c.6-.8 1.6-2 2.8-3.4c2.5-2.8 6-6.6 10.2-10.3c8.8-7.8 18.8-14 27.7-14s18.9 6.2 27.7 14c4.2 3.7 7.7 7.5 10.2 10.3c1.2 1.4 2.2 2.6 2.8 3.4c.3 .4 .6 .7 .7 .9l.2 .2 0 0z',
    ],
  };
  var faGrinBeamSweat = faFaceGrinBeamSweat;
  var faFileExport = {
    prefix: 'fas',
    iconName: 'file-export',
    icon: [
      640,
      512,
      ['arrow-right-from-file'],
      'f56e',
      'M32 64C32 28.7 60.7 0 96 0H256V128c0 17.7 14.3 32 32 32H416V288H248c-13.3 0-24 10.7-24 24s10.7 24 24 24H416V448c0 35.3-28.7 64-64 64H96c-35.3 0-64-28.7-64-64V64zM416 336V288H526.1l-39-39c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l80 80c9.4 9.4 9.4 24.6 0 33.9l-80 80c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l39-39H416zm0-208H288V0L416 128z',
    ],
  };
  var faArrowRightFromFile = faFileExport;
  var faShield = {
    prefix: 'fas',
    iconName: 'shield',
    icon: [
      512,
      512,
      [128737, 'shield-blank'],
      'f132',
      'M256 0c4.6 0 9.2 1 13.4 2.9L457.7 82.8c22 9.3 38.4 31 38.3 57.2c-.5 99.2-41.3 280.7-213.7 363.2c-16.7 8-36.1 8-52.8 0C57.3 420.7 16.5 239.2 16 140c-.1-26.2 16.3-47.9 38.3-57.2L242.7 2.9C246.8 1 251.4 0 256 0z',
    ],
  };
  var faShieldBlank = faShield;
  var faArrowUpShortWide = {
    prefix: 'fas',
    iconName: 'arrow-up-short-wide',
    icon: [
      576,
      512,
      ['sort-amount-up-alt'],
      'f885',
      'M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 32c-17.7 0-32 14.3-32 32s14.3 32 32 32h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320zm0 128c-17.7 0-32 14.3-32 32s14.3 32 32 32h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320zm0 128c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320zm0 128c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320z',
    ],
  };
  var faSortAmountUpAlt = faArrowUpShortWide;
  var faHouseMedical = {
    prefix: 'fas',
    iconName: 'house-medical',
    icon: [
      576,
      512,
      [],
      'e3b2',
      'M543.8 287.6c17 0 32-14 32-32.1c1-9-3-17-11-24L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V448c0 35.3 28.7 64 64 64H448.5c35.5 0 64.2-28.8 64-64.3l-.7-160.2h32zM256 208c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h48c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H320v48c0 8.8-7.2 16-16 16H272c-8.8 0-16-7.2-16-16V320H208c-8.8 0-16-7.2-16-16V272c0-8.8 7.2-16 16-16h48V208z',
    ],
  };
  var faGolfBallTee = {
    prefix: 'fas',
    iconName: 'golf-ball-tee',
    icon: [
      384,
      512,
      ['golf-ball'],
      'f450',
      'M384 192c0 66.8-34.1 125.6-85.8 160H85.8C34.1 317.6 0 258.8 0 192C0 86 86 0 192 0S384 86 384 192zM242.1 256.6c0 18.5-15 33.5-33.5 33.5c-4.9 0-9.6-1.1-13.8-3c5.3 11.6 16.9 19.7 30.5 19.7c18.5 0 33.5-15 33.5-33.5c0-13.6-8.1-25.3-19.7-30.5c1.9 4.2 3 8.9 3 13.8zm-52.3-49.3c-4.9 0-9.6-1.1-13.8-3c5.3 11.6 16.9 19.7 30.5 19.7c18.5 0 33.5-15 33.5-33.5c0-13.6-8.1-25.3-19.7-30.5c1.9 4.2 3 8.9 3 13.8c0 18.5-15 33.5-33.5 33.5zm113.5-17.5c0 18.5-15 33.5-33.5 33.5c-4.9 0-9.6-1.1-13.8-3c5.3 11.6 16.9 19.7 30.5 19.7c18.5 0 33.5-15 33.5-33.5c0-13.6-8.1-25.3-19.7-30.5c1.9 4.2 3 8.9 3 13.8zM96 416c0-17.7 14.3-32 32-32h64 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H240c-8.8 0-16 7.2-16 16v16c0 17.7-14.3 32-32 32s-32-14.3-32-32V464c0-8.8-7.2-16-16-16H128c-17.7 0-32-14.3-32-32z',
    ],
  };
  var faGolfBall = faGolfBallTee;
  var faCircleChevronLeft = {
    prefix: 'fas',
    iconName: 'circle-chevron-left',
    icon: [
      512,
      512,
      ['chevron-circle-left'],
      'f137',
      'M512 256C512 114.6 397.4 0 256 0S0 114.6 0 256S114.6 512 256 512s256-114.6 256-256zM271 135c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-87 87 87 87c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0L167 273c-9.4-9.4-9.4-24.6 0-33.9L271 135z',
    ],
  };
  var faChevronCircleLeft = faCircleChevronLeft;
  var faHouseChimneyWindow = {
    prefix: 'fas',
    iconName: 'house-chimney-window',
    icon: [
      576,
      512,
      [],
      'e00d',
      'M575.8 255.5c0 18-15 32.1-32 32.1h-32l.7 160.2c.2 35.5-28.5 64.3-64 64.3H128.1c-35.3 0-64-28.7-64-64V287.6H32c-18 0-32-14-32-32.1c0-9 3-17 10-24L266.4 8c7-7 15-8 22-8s15 2 21 7L416 100.7V64c0-17.7 14.3-32 32-32h32c17.7 0 32 14.3 32 32V185l52.8 46.4c8 7 12 15 11 24zM248 192c-13.3 0-24 10.7-24 24v80c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V216c0-13.3-10.7-24-24-24H248z',
    ],
  };
  var faPenNib = {
    prefix: 'fas',
    iconName: 'pen-nib',
    icon: [
      512,
      512,
      [10001],
      'f5ad',
      'M368.4 18.3L312.7 74.1 437.9 199.3l55.7-55.7c21.9-21.9 21.9-57.3 0-79.2L447.6 18.3c-21.9-21.9-57.3-21.9-79.2 0zM288 94.6l-9.2 2.8L134.7 140.6c-19.9 6-35.7 21.2-42.3 41L3.8 445.8c-3.8 11.3-1 23.9 7.3 32.4L164.7 324.7c-3-6.3-4.7-13.3-4.7-20.7c0-26.5 21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48c-7.4 0-14.4-1.7-20.7-4.7L33.7 500.9c8.6 8.3 21.1 11.2 32.4 7.3l264.3-88.6c19.7-6.6 35-22.4 41-42.3l43.2-144.1 2.8-9.2L288 94.6z',
    ],
  };
  var faTentArrowTurnLeft = {
    prefix: 'fas',
    iconName: 'tent-arrow-turn-left',
    icon: [
      640,
      512,
      [],
      'e580',
      'M152.1 41.8c9.9-8.9 10.7-24 1.8-33.9s-24-10.7-33.9-1.8l-80 72C34.9 82.7 32 89.2 32 96s2.9 13.3 7.9 17.8l80 72c9.9 8.9 25 8.1 33.9-1.8s8.1-25-1.8-33.9L118.5 120 488 120c39.8 0 72 32.2 72 72v40c0 13.3 10.7 24 24 24s24-10.7 24-24V192c0-66.3-53.7-120-120-120L118.5 72l33.5-30.2zM339.4 166.5c-11.5-8.7-27.3-8.7-38.8 0l-168 128c-6.6 5-11 12.5-12.3 20.7l-24 160c-1.4 9.2 1.3 18.6 7.4 25.6s14.9 11.1 24.2 11.1H320V352l96 160h96c9.3 0 18.2-4.1 24.2-11.1s8.8-16.4 7.4-25.6l-24-160c-1.2-8.2-5.6-15.7-12.3-20.7l-168-128z',
    ],
  };
  var faTents = {
    prefix: 'fas',
    iconName: 'tents',
    icon: [
      640,
      512,
      [],
      'e582',
      'M396.6 6.5L235.8 129.1c9.6 1.8 18.9 5.8 27 12l168 128c13.2 10.1 22 24.9 24.5 41.4l6.2 41.5H608c9.3 0 18.2-4.1 24.2-11.1s8.8-16.4 7.4-25.6l-24-160c-1.2-8.2-5.6-15.7-12.3-20.7l-168-128c-11.5-8.7-27.3-8.7-38.8 0zm-153.2 160c-11.5-8.7-27.3-8.7-38.8 0l-168 128c-6.6 5-11 12.5-12.3 20.7l-24 160c-1.4 9.2 1.3 18.6 7.4 25.6S22.7 512 32 512H224V352l96 160h96c9.3 0 18.2-4.1 24.2-11.1s8.8-16.4 7.4-25.6l-24-160c-1.2-8.2-5.6-15.7-12.3-20.7l-168-128z',
    ],
  };
  var faWandMagic = {
    prefix: 'fas',
    iconName: 'wand-magic',
    icon: [
      512,
      512,
      ['magic'],
      'f0d0',
      'M14.1 463.3c-18.7-18.7-18.7-49.1 0-67.9L395.4 14.1c18.7-18.7 49.1-18.7 67.9 0l34.6 34.6c18.7 18.7 18.7 49.1 0 67.9L116.5 497.9c-18.7 18.7-49.1 18.7-67.9 0L14.1 463.3zM347.6 187.6l105-105L429.4 59.3l-105 105 23.3 23.3z',
    ],
  };
  var faMagic = faWandMagic;
  var faDog = {
    prefix: 'fas',
    iconName: 'dog',
    icon: [
      576,
      512,
      [128021],
      'f6d3',
      'M309.6 158.5L332.7 19.8C334.6 8.4 344.5 0 356.1 0c7.5 0 14.5 3.5 19 9.5L392 32h52.1c12.7 0 24.9 5.1 33.9 14.1L496 64h56c13.3 0 24 10.7 24 24v24c0 44.2-35.8 80-80 80H464 448 426.7l-5.1 30.5-112-64zM416 256.1L416 480c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V364.8c-24 12.3-51.2 19.2-80 19.2s-56-6.9-80-19.2V480c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V249.8c-28.8-10.9-51.4-35.3-59.2-66.5L1 167.8c-4.3-17.1 6.1-34.5 23.3-38.8s34.5 6.1 38.8 23.3l3.9 15.5C70.5 182 83.3 192 98 192h30 16H303.8L416 256.1zM464 80c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16z',
    ],
  };
  var faCarrot = {
    prefix: 'fas',
    iconName: 'carrot',
    icon: [
      512,
      512,
      [129365],
      'f787',
      'M346.7 6C337.6 17 320 42.3 320 72c0 40 15.3 55.3 40 80s40 40 80 40c29.7 0 55-17.6 66-26.7c4-3.3 6-8.2 6-13.3s-2-10-6-13.2c-11.4-9.1-38.3-26.8-74-26.8c-32 0-40 8-40 8s8-8 8-40c0-35.7-17.7-62.6-26.8-74C370 2 365.1 0 360 0s-10 2-13.3 6zM244.6 136c-40 0-77.1 18.1-101.7 48.2l60.5 60.5c6.2 6.2 6.2 16.4 0 22.6s-16.4 6.2-22.6 0l-55.3-55.3 0 .1L2.2 477.9C-2 487-.1 497.8 7 505s17.9 9 27.1 4.8l134.7-62.4-52.1-52.1c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L199.7 433l100.2-46.4c46.4-21.5 76.2-68 76.2-119.2C376 194.8 317.2 136 244.6 136z',
    ],
  };
  var faMoon = {
    prefix: 'fas',
    iconName: 'moon',
    icon: [
      384,
      512,
      [127769, 9214],
      'f186',
      'M223.5 32C100 32 0 132.3 0 256S100 480 223.5 480c60.6 0 115.5-24.2 155.8-63.4c5-4.9 6.3-12.5 3.1-18.7s-10.1-9.7-17-8.5c-9.8 1.7-19.8 2.6-30.1 2.6c-96.9 0-175.5-78.8-175.5-176c0-65.8 36-123.1 89.3-153.3c6.1-3.5 9.2-10.5 7.7-17.3s-7.3-11.9-14.3-12.5c-6.3-.5-12.6-.8-19-.8z',
    ],
  };
  var faWineGlassEmpty = {
    prefix: 'fas',
    iconName: 'wine-glass-empty',
    icon: [
      320,
      512,
      ['wine-glass-alt'],
      'f5ce',
      'M64 0C47.4 0 33.5 12.8 32.1 29.3l-14 168.4c-6 72 42.5 135.2 109.9 150.6V448H80c-17.7 0-32 14.3-32 32s14.3 32 32 32h80 80c17.7 0 32-14.3 32-32s-14.3-32-32-32H192V348.4c67.4-15.4 115.9-78.6 109.9-150.6l-14-168.4C286.5 12.8 272.6 0 256 0H64zM81.9 203.1L93.4 64H226.6l11.6 139.1C242 248.8 205.9 288 160 288s-82-39.2-78.1-84.9z',
    ],
  };
  var faWineGlassAlt = faWineGlassEmpty;
  var faCheese = {
    prefix: 'fas',
    iconName: 'cheese',
    icon: [
      512,
      512,
      [],
      'f7ef',
      'M512 240.2V256H0c0-20 10-38.7 26.6-49.8L274.9 40.7c8.6-5.7 18.6-8.7 28.9-8.7C418.8 32 512 125.2 512 240.2zm0 47.8V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V288H512z',
    ],
  };
  var faYinYang = {
    prefix: 'fas',
    iconName: 'yin-yang',
    icon: [
      512,
      512,
      [9775],
      'f6ad',
      'M256 64c53 0 96 43 96 96s-43 96-96 96s-96 43-96 96s43 96 96 96C150 448 64 362 64 256S150 64 256 64zm0 448c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm32-352c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0 192c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faMusic = {
    prefix: 'fas',
    iconName: 'music',
    icon: [
      512,
      512,
      [127925],
      'f001',
      'M499.1 6.3c8.1 6 12.9 15.6 12.9 25.7v72V368c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V147L192 223.8V432c0 44.2-43 80-96 80s-96-35.8-96-80s43-80 96-80c11.2 0 22 1.6 32 4.6V200 128c0-14.1 9.3-26.6 22.8-30.7l320-96c9.7-2.9 20.2-1.1 28.3 5z',
    ],
  };
  var faCodeCommit = {
    prefix: 'fas',
    iconName: 'code-commit',
    icon: [
      640,
      512,
      [],
      'f386',
      'M320 336c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zm156.8-48C462 361 397.4 416 320 416s-142-55-156.8-128H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H163.2C178 151 242.6 96 320 96s142 55 156.8 128H608c17.7 0 32 14.3 32 32s-14.3 32-32 32H476.8z',
    ],
  };
  var faTemperatureLow = {
    prefix: 'fas',
    iconName: 'temperature-low',
    icon: [
      512,
      512,
      [],
      'f76b',
      'M448 96c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm64 0c0 53-43 96-96 96s-96-43-96-96s43-96 96-96s96 43 96 96zM144 64c-26.5 0-48 21.5-48 48V276.5c0 17.3-7.1 31.9-15.3 42.5C70.2 332.6 64 349.5 64 368c0 44.2 35.8 80 80 80s80-35.8 80-80c0-18.5-6.2-35.4-16.7-48.9c-8.2-10.6-15.3-25.2-15.3-42.5V112c0-26.5-21.5-48-48-48zM32 112C32 50.2 82.1 0 144 0s112 50.1 112 112V276.5c0 .1 .1 .3 .2 .6c.2 .6 .8 1.6 1.7 2.8c18.9 24.4 30.1 55 30.1 88.1c0 79.5-64.5 144-144 144S0 447.5 0 368c0-33.2 11.2-63.8 30.1-88.1c.9-1.2 1.5-2.2 1.7-2.8c.1-.3 .2-.5 .2-.6V112zM192 368c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-20.9 13.4-38.7 32-45.3V272c0-8.8 7.2-16 16-16s16 7.2 16 16v50.7c18.6 6.6 32 24.4 32 45.3z',
    ],
  };
  var faPersonBiking = {
    prefix: 'fas',
    iconName: 'person-biking',
    icon: [
      640,
      512,
      [128692, 'biking'],
      'f84a',
      'M400 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm27.2 64l-61.8-48.8c-17.3-13.6-41.7-13.8-59.1-.3l-83.1 64.2c-30.7 23.8-28.5 70.8 4.3 91.6L288 305.1V416c0 17.7 14.3 32 32 32s32-14.3 32-32V288c0-10.7-5.3-20.7-14.2-26.6L295 232.9l60.3-48.5L396 217c5.7 4.5 12.7 7 20 7h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H427.2zM200 384c0 39.8-32.2 72-72 72s-72-32.2-72-72s32.2-72 72-72s72 32.2 72 72zm56 0c0-70.7-57.3-128-128-128S0 313.3 0 384s57.3 128 128 128s128-57.3 128-128zm328 0c0 39.8-32.2 72-72 72s-72-32.2-72-72s32.2-72 72-72s72 32.2 72 72zm56 0c0-70.7-57.3-128-128-128s-128 57.3-128 128s57.3 128 128 128s128-57.3 128-128z',
    ],
  };
  var faBiking = faPersonBiking;
  var faBroom = {
    prefix: 'fas',
    iconName: 'broom',
    icon: [
      640,
      512,
      [129529],
      'f51a',
      'M627.6 57.3c14-10.9 16.5-31 5.6-44.9s-31-16.5-44.9-5.6l-144 112-72 56-8.7 6.8-30.8-39.4c-3.7-4.8-9.8-7-15.8-5.8s-10.7 5.7-12.3 11.5l-12.5 46.3L371.1 295l48-.9c6.1-.1 11.5-3.7 14.1-9.1s1.9-11.9-1.8-16.7L403 231.9l8.6-6.7 72-56 144-112zM16.7 507.7c37.4 2.8 196.8 12 252.3-31.4c57.7-45.1 76.8-161.5 76.8-161.5L267.1 213.9s-117.6-9.6-175.3 35.5C69 267.1 50.5 304.1 36.3 344c-2.4 6.7 4.7 12.8 11 9.4L86.2 333c4.1-2.2 9.2-1.1 12 2.6s2.7 8.8-.4 12.3L24.4 430.4C13.2 442.9 5.5 458.1 2.4 474.5c-.9 4.8-1.6 8.9-2.2 12.1c-.9 5 .5 10.1 3.6 14.1s7.7 6.6 12.8 7z',
    ],
  };
  var faShieldHeart = {
    prefix: 'fas',
    iconName: 'shield-heart',
    icon: [
      512,
      512,
      [],
      'e574',
      'M269.4 2.9C265.2 1 260.7 0 256 0s-9.2 1-13.4 2.9L54.3 82.8c-22 9.3-38.4 31-38.3 57.2c.5 99.2 41.3 280.7 213.6 363.2c16.7 8 36.1 8 52.8 0C454.7 420.7 495.5 239.2 496 140c.1-26.2-16.3-47.9-38.3-57.2L269.4 2.9zM144 221.3c0-33.8 27.4-61.3 61.3-61.3c16.2 0 31.8 6.5 43.3 17.9l7.4 7.4 7.4-7.4c11.5-11.5 27.1-17.9 43.3-17.9c33.8 0 61.3 27.4 61.3 61.3c0 16.2-6.5 31.8-17.9 43.3l-82.7 82.7c-6.2 6.2-16.4 6.2-22.6 0l-82.7-82.7c-11.5-11.5-17.9-27.1-17.9-43.3z',
    ],
  };
  var faGopuram = {
    prefix: 'fas',
    iconName: 'gopuram',
    icon: [
      512,
      512,
      [],
      'f664',
      'M120 0c13.3 0 24 10.7 24 24v8h40V24c0-13.3 10.7-24 24-24s24 10.7 24 24v8h48V24c0-13.3 10.7-24 24-24s24 10.7 24 24v8h40V24c0-13.3 10.7-24 24-24s24 10.7 24 24v8V64v64c17.7 0 32 14.3 32 32v64c17.7 0 32 14.3 32 32v96c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32H416V352H384V224H352V128H320v96h32V352h32V512H304V464c0-26.5-21.5-48-48-48s-48 21.5-48 48v48H128V352h32V224h32V128H160v96H128V352H96V512H32c-17.7 0-32-14.3-32-32V384c0-17.7 14.3-32 32-32V256c0-17.7 14.3-32 32-32V160c0-17.7 14.3-32 32-32V64 32 24c0-13.3 10.7-24 24-24zM256 272c-17.7 0-32 14.3-32 32v48h64V304c0-17.7-14.3-32-32-32zm-32-80v32h64V192c0-17.7-14.3-32-32-32s-32 14.3-32 32z',
    ],
  };
  var faEarthOceania = {
    prefix: 'fas',
    iconName: 'earth-oceania',
    icon: [
      512,
      512,
      ['globe-oceania'],
      'e47b',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM208.6 357.3l-39-13.5c-6.5-2.2-13.6-2.3-20.1-.3l-15.3 4.9c-18.5 5.9-38.5-2.4-47.5-19.5l-3.3-6.2c-10.6-20.1-2.3-45 18.2-54.7l35.3-16.8c2.3-1.1 4.4-2.8 5.9-4.8l5.3-7c7.2-9.6 18.6-15.3 30.6-15.3s23.4 5.7 30.6 15.3l4.6 6.1c2 2.6 4.9 4.5 8.1 5.1c7.8 1.6 15.7-1.5 20.4-7.9l10.4-14.2c2-2.8 5.3-4.4 8.7-4.4c4.4 0 8.4 2.7 10 6.8l10.1 25.9c2.8 7.2 6.7 14 11.5 20.2L311 299.8c5.8 7.4 9 16.6 9 26s-3.2 18.6-9 26L299 367.2c-8.3 10.6-21 16.8-34.4 16.8c-8.4 0-16.6-2.4-23.7-7l-25.4-16.4c-2.2-1.4-4.5-2.5-6.9-3.4zm65.2-214.8L296 164.7c10.1 10.1 2.9 27.3-11.3 27.3H254.8c-5.6 0-11.1-1.2-16.2-3.4l-42.8-19c-14.3-6.3-11.9-27.3 3.4-30.3l38.5-7.7c13.1-2.6 26.7 1.5 36.1 10.9zM248 432c0-8.8 7.2-16 16-16h16c8.8 0 16 7.2 16 16s-7.2 16-16 16H264c-8.8 0-16-7.2-16-16zM431.2 298.9l8 24c2.8 8.4-1.7 17.4-10.1 20.2s-17.4-1.7-20.2-10.1l-8-24c-2.8-8.4 1.7-17.4 10.1-20.2s17.4 1.7 20.2 10.1zm-19.9 80.4l-32 32c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l32-32c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z',
    ],
  };
  var faGlobeOceania = faEarthOceania;
  var faSquareXmark = {
    prefix: 'fas',
    iconName: 'square-xmark',
    icon: [
      448,
      512,
      [10062, 'times-square', 'xmark-square'],
      'f2d3',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm79 143c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z',
    ],
  };
  var faTimesSquare = faSquareXmark;
  var faXmarkSquare = faSquareXmark;
  var faHashtag = {
    prefix: 'fas',
    iconName: 'hashtag',
    icon: [
      448,
      512,
      [62098],
      '23',
      'M181.3 32.4c17.4 2.9 29.2 19.4 26.3 36.8L197.8 128h95.1l11.5-69.3c2.9-17.4 19.4-29.2 36.8-26.3s29.2 19.4 26.3 36.8L357.8 128H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H347.1L325.8 320H384c17.7 0 32 14.3 32 32s-14.3 32-32 32H315.1l-11.5 69.3c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8l9.8-58.7H155.1l-11.5 69.3c-2.9 17.4-19.4 29.2-36.8 26.3s-29.2-19.4-26.3-36.8L90.2 384H32c-17.7 0-32-14.3-32-32s14.3-32 32-32h68.9l21.3-128H64c-17.7 0-32-14.3-32-32s14.3-32 32-32h68.9l11.5-69.3c2.9-17.4 19.4-29.2 36.8-26.3zM187.1 192L165.8 320h95.1l21.3-128H187.1z',
    ],
  };
  var faUpRightAndDownLeftFromCenter = {
    prefix: 'fas',
    iconName: 'up-right-and-down-left-from-center',
    icon: [
      512,
      512,
      ['expand-alt'],
      'f424',
      'M344 0H488c13.3 0 24 10.7 24 24V168c0 9.7-5.8 18.5-14.8 22.2s-19.3 1.7-26.2-5.2l-39-39-87 87c-9.4 9.4-24.6 9.4-33.9 0l-32-32c-9.4-9.4-9.4-24.6 0-33.9l87-87L327 41c-6.9-6.9-8.9-17.2-5.2-26.2S334.3 0 344 0zM184 496H40c-13.3 0-24-10.7-24-24V328c0-9.7 5.8-18.5 14.8-22.2s19.3-1.7 26.2 5.2l39 39 87-87c9.4-9.4 24.6-9.4 33.9 0l32 32c9.4 9.4 9.4 24.6 0 33.9l-87 87 39 39c6.9 6.9 8.9 17.2 5.2 26.2s-12.5 14.8-22.2 14.8z',
    ],
  };
  var faExpandAlt = faUpRightAndDownLeftFromCenter;
  var faOilCan = {
    prefix: 'fas',
    iconName: 'oil-can',
    icon: [
      640,
      512,
      [],
      'f613',
      'M320 128c17.7 0 32-14.3 32-32s-14.3-32-32-32H192c-17.7 0-32 14.3-32 32s14.3 32 32 32h32v32H144 96 48c-26.5 0-48 21.5-48 48v64.8c0 19 11.2 36.2 28.5 43.9l67.5 30V368c0 26.5 21.5 48 48 48H403.1c18.4 0 35.8-7.9 48-21.7L633.5 187.7c12.3-13.9-.3-35.4-18.4-31.5L448 192l-50.5-25.2c-8.9-4.4-18.7-6.8-28.6-6.8H288V128h32zM96 208v86.1L48 272.8V208H96z',
    ],
  };
  var faT = {
    prefix: 'fas',
    iconName: 't',
    icon: [
      384,
      512,
      [116],
      '54',
      'M32 32C14.3 32 0 46.3 0 64S14.3 96 32 96H160V448c0 17.7 14.3 32 32 32s32-14.3 32-32V96H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H192 32z',
    ],
  };
  var faHippo = {
    prefix: 'fas',
    iconName: 'hippo',
    icon: [
      640,
      512,
      [129435],
      'f6ed',
      'M407 47c9.4-9.4 24.6-9.4 33.9 0l17.2 17.2c1.9-.1 3.9-.2 5.8-.2h32c11.2 0 21.9 2.3 31.6 6.5L543 55c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9L564 101.9c7.6 12.2 12 26.7 12 42.1c0 10.2 7.4 18.8 16.7 23c27.9 12.5 47.3 40.5 47.3 73c0 26.2-12.6 49.4-32 64v32c0 8.8-7.2 16-16 16H560c-8.8 0-16-7.2-16-16V320H480v16c0 8.8-7.2 16-16 16H432c-8.8 0-16-7.2-16-16V318.4c-11.8-2.4-22.7-7.4-32-14.4c-1.5-1.1-2.9-2.3-4.3-3.5c-17-14.7-27.7-36.4-27.7-60.5c0-8.8-7.2-16-16-16s-16 7.2-16 16c0 44.7 26.2 83.2 64 101.2V352c0 17.7 14.3 32 32 32h32v64c0 17.7-14.3 32-32 32H352c-17.7 0-32-14.3-32-32V372c-19.8 7.7-41.4 12-64 12s-44.2-4.3-64-12v76c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V329.1L45.9 369.7c-5.4 12.1-19.6 17.6-31.7 12.2S-3.3 362.4 2.1 350.3L24 300.9c5.3-11.9 8-24.7 8-37.7C32 155.7 117.2 68 223.8 64.1l.2-.1h7.2H256h32c41.7 0 83.4 12.1 117.2 25.7c1.7-1.8 3.5-3.6 5.3-5.2L407 81c-9.4-9.4-9.4-24.6 0-33.9zm73 185c0-13.3-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24s24-10.7 24-24zm88 24c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zM480 144c0-8.8-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16s16-7.2 16-16zm48 16c8.8 0 16-7.2 16-16s-7.2-16-16-16s-16 7.2-16 16s7.2 16 16 16z',
    ],
  };
  var faChartColumn = {
    prefix: 'fas',
    iconName: 'chart-column',
    icon: [
      512,
      512,
      [],
      'e0e3',
      'M32 32c17.7 0 32 14.3 32 32V400c0 8.8 7.2 16 16 16H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H80c-44.2 0-80-35.8-80-80V64C0 46.3 14.3 32 32 32zM160 224c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V256c0-17.7 14.3-32 32-32zm128-64V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V160c0-17.7 14.3-32 32-32s32 14.3 32 32zm64 32c17.7 0 32 14.3 32 32v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V224c0-17.7 14.3-32 32-32zM480 96V320c0 17.7-14.3 32-32 32s-32-14.3-32-32V96c0-17.7 14.3-32 32-32s32 14.3 32 32z',
    ],
  };
  var faInfinity = {
    prefix: 'fas',
    iconName: 'infinity',
    icon: [
      640,
      512,
      [8734, 9854],
      'f534',
      'M0 241.1C0 161 65 96 145.1 96c38.5 0 75.4 15.3 102.6 42.5L320 210.7l72.2-72.2C419.5 111.3 456.4 96 494.9 96C575 96 640 161 640 241.1v29.7C640 351 575 416 494.9 416c-38.5 0-75.4-15.3-102.6-42.5L320 301.3l-72.2 72.2C220.5 400.7 183.6 416 145.1 416C65 416 0 351 0 270.9V241.1zM274.7 256l-72.2-72.2c-15.2-15.2-35.9-23.8-57.4-23.8C100.3 160 64 196.3 64 241.1v29.7c0 44.8 36.3 81.1 81.1 81.1c21.5 0 42.2-8.5 57.4-23.8L274.7 256zm90.5 0l72.2 72.2c15.2 15.2 35.9 23.8 57.4 23.8c44.8 0 81.1-36.3 81.1-81.1V241.1c0-44.8-36.3-81.1-81.1-81.1c-21.5 0-42.2 8.5-57.4 23.8L365.3 256z',
    ],
  };
  var faVialCircleCheck = {
    prefix: 'fas',
    iconName: 'vial-circle-check',
    icon: [
      512,
      512,
      [],
      'e596',
      'M0 64C0 46.3 14.3 32 32 32H96h64 64c17.7 0 32 14.3 32 32s-14.3 32-32 32V266.8c-20.2 28.6-32 63.5-32 101.2c0 25.2 5.3 49.1 14.8 70.8C189.5 463.7 160.6 480 128 480c-53 0-96-43-96-96V96C14.3 96 0 81.7 0 64zM96 96v96h64V96H96zM512 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-76.7-43.3c-6.2-6.2-16.4-6.2-22.6 0L352 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faPersonArrowDownToLine = {
    prefix: 'fas',
    iconName: 'person-arrow-down-to-line',
    icon: [
      640,
      512,
      [],
      'e538',
      'M192 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm-8 352V352h16v96H184zm-64 0H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H152h80H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H264V256.9l28.6 47.5c9.1 15.1 28.8 20 43.9 10.9s20-28.8 10.9-43.9l-58.3-97c-17.4-28.9-48.6-46.6-82.3-46.6H177.1c-33.7 0-64.9 17.7-82.3 46.6l-58.3 97c-9.1 15.1-4.2 34.8 10.9 43.9s34.8 4.2 43.9-10.9L120 256.9V448zM464 64V306.7l-25.4-25.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l80 80c12.5 12.5 32.8 12.5 45.3 0l80-80c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L528 306.7V64c0-17.7-14.3-32-32-32s-32 14.3-32 32z',
    ],
  };
  var faVoicemail = {
    prefix: 'fas',
    iconName: 'voicemail',
    icon: [
      640,
      512,
      [],
      'f897',
      'M144 160c44.2 0 80 35.8 80 80s-35.8 80-80 80s-80-35.8-80-80s35.8-80 80-80zM263.8 320c15.3-22.9 24.2-50.4 24.2-80c0-79.5-64.5-144-144-144S0 160.5 0 240s64.5 144 144 144H496c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144c0 29.6 8.9 57.1 24.2 80H263.8zM496 320c-44.2 0-80-35.8-80-80s35.8-80 80-80s80 35.8 80 80s-35.8 80-80 80z',
    ],
  };
  var faFan = {
    prefix: 'fas',
    iconName: 'fan',
    icon: [
      512,
      512,
      [],
      'f863',
      'M258.6 0c-1.7 0-3.4 .1-5.1 .5C168 17 115.6 102.3 130.5 189.3c2.9 17 8.4 32.9 15.9 47.4L32 224H29.4C13.2 224 0 237.2 0 253.4c0 1.7 .1 3.4 .5 5.1C17 344 102.3 396.4 189.3 381.5c17-2.9 32.9-8.4 47.4-15.9L224 480v2.6c0 16.2 13.2 29.4 29.4 29.4c1.7 0 3.4-.1 5.1-.5C344 495 396.4 409.7 381.5 322.7c-2.9-17-8.4-32.9-15.9-47.4L480 288h2.6c16.2 0 29.4-13.2 29.4-29.4c0-1.7-.1-3.4-.5-5.1C495 168 409.7 115.6 322.7 130.5c-17 2.9-32.9 8.4-47.4 15.9L288 32V29.4C288 13.2 274.8 0 258.6 0zM256 288c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faPersonWalkingLuggage = {
    prefix: 'fas',
    iconName: 'person-walking-luggage',
    icon: [
      576,
      512,
      [],
      'e554',
      'M432 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM347.7 200.5c1-.4 1.9-.8 2.9-1.2l-16.9 63.5c-5.6 21.1-.1 43.6 14.7 59.7l70.7 77.1 22 88.1c4.3 17.1 21.7 27.6 38.8 23.3s27.6-21.7 23.3-38.8l-23-92.1c-1.9-7.8-5.8-14.9-11.2-20.8l-49.5-54 19.3-65.5 9.6 23c4.4 10.6 12.5 19.3 22.8 24.5l26.7 13.3c15.8 7.9 35 1.5 42.9-14.3s1.5-35-14.3-42.9L505 232.7l-15.3-36.8C472.5 154.8 432.3 128 387.7 128c-22.8 0-45.3 4.8-66.1 14l-8 3.5c-32.9 14.6-58.1 42.4-69.4 76.5l-2.6 7.8c-5.6 16.8 3.5 34.9 20.2 40.5s34.9-3.5 40.5-20.2l2.6-7.8c5.7-17.1 18.3-30.9 34.7-38.2l8-3.5zm-30 135.1l-25 62.4-59.4 59.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L340.3 441c4.6-4.6 8.2-10.1 10.6-16.1l14.5-36.2-40.7-44.4c-2.5-2.7-4.8-5.6-7-8.6zM256 274.1c-7.7-4.4-17.4-1.8-21.9 5.9l-32 55.4L147.7 304c-15.3-8.8-34.9-3.6-43.7 11.7L40 426.6c-8.8 15.3-3.6 34.9 11.7 43.7l55.4 32c15.3 8.8 34.9 3.6 43.7-11.7l64-110.9c1.5-2.6 2.6-5.2 3.3-8L261.9 296c4.4-7.7 1.8-17.4-5.9-21.9z',
    ],
  };
  var faUpDown = {
    prefix: 'fas',
    iconName: 'up-down',
    icon: [
      256,
      512,
      [8597, 11021, 'arrows-alt-v'],
      'f338',
      'M145.6 7.7C141 2.8 134.7 0 128 0s-13 2.8-17.6 7.7l-104 112c-6.5 7-8.2 17.2-4.4 25.9S14.5 160 24 160H80V352H24c-9.5 0-18.2 5.7-22 14.4s-2.1 18.9 4.4 25.9l104 112c4.5 4.9 10.9 7.7 17.6 7.7s13-2.8 17.6-7.7l104-112c6.5-7 8.2-17.2 4.4-25.9s-12.5-14.4-22-14.4H176V160h56c9.5 0 18.2-5.7 22-14.4s2.1-18.9-4.4-25.9l-104-112z',
    ],
  };
  var faArrowsAltV = faUpDown;
  var faCloudMoonRain = {
    prefix: 'fas',
    iconName: 'cloud-moon-rain',
    icon: [
      640,
      512,
      [],
      'f73c',
      'M513.2 0C449 0 395.5 46.5 385.7 107.6c35.4 17.6 60.2 53.3 62.1 95.1c23.2 11 42 29.7 53.1 52.7c4 .4 8.1 .6 12.3 .6c34.9 0 66.7-13.8 89.9-36.1c5.1-4.9 6.4-12.5 3.2-18.7s-10.1-9.7-17-8.6c-4.9 .8-10 1.3-15.2 1.3c-49 0-88.4-39.3-88.4-87.4c0-32.6 18-61.1 44.9-76.1c6.1-3.4 9.3-10.5 7.8-17.4s-7.3-12-14.3-12.6c-3.6-.3-7.3-.5-10.9-.5zM399.9 383.9c44.2 0 80-35.8 80-80c0-39.3-28.4-72.1-65.8-78.7c1.2-5.6 1.9-11.3 1.9-17.2c0-44.2-35.8-80-80-80c-17 0-32.8 5.3-45.8 14.4C273.3 114.6 242.8 96 208 96c-53 0-96 43-96 96l0 1.3c-45.4 7.6-80 47.1-80 94.6c0 53 43 96 96 96H399.9zM117.4 420.1c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3zm96 0c-11-7.4-25.9-4.4-33.3 6.7l-32 48c-7.4 11-4.4 25.9 6.7 33.3s25.9 4.4 33.3-6.7l32-48c7.4-11 4.4-25.9-6.7-33.3z',
    ],
  };
  var faCalendar = {
    prefix: 'fas',
    iconName: 'calendar',
    icon: [
      448,
      512,
      [128197, 128198],
      'f133',
      'M96 32V64H48C21.5 64 0 85.5 0 112v48H448V112c0-26.5-21.5-48-48-48H352V32c0-17.7-14.3-32-32-32s-32 14.3-32 32V64H160V32c0-17.7-14.3-32-32-32S96 14.3 96 32zM448 192H0V464c0 26.5 21.5 48 48 48H400c26.5 0 48-21.5 48-48V192z',
    ],
  };
  var faTrailer = {
    prefix: 'fas',
    iconName: 'trailer',
    icon: [
      640,
      512,
      [],
      'e041',
      'M48 32C21.5 32 0 53.5 0 80V336c0 26.5 21.5 48 48 48H65.1c7.8-54.3 54.4-96 110.9-96s103.1 41.7 110.9 96H488h8H608c17.7 0 32-14.3 32-32s-14.3-32-32-32H544V80c0-26.5-21.5-48-48-48H48zM80 96c8.8 0 16 7.2 16 16l0 131.2c-11.4 5.9-22.2 12.9-32 21V112c0-8.8 7.2-16 16-16zm96 128c-5.4 0-10.7 .2-16 .7L160 112c0-8.8 7.2-16 16-16s16 7.2 16 16l0 112.7c-5.3-.5-10.6-.7-16-.7zm80 19.2L256 112c0-8.8 7.2-16 16-16s16 7.2 16 16l0 152.2c-9.8-8.1-20.6-15.2-32-21zM368 96c8.8 0 16 7.2 16 16l0 192c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-192c0-8.8 7.2-16 16-16zm112 16l0 192c0 8.8-7.2 16-16 16s-16-7.2-16-16l0-192c0-8.8 7.2-16 16-16s16 7.2 16 16zM176 480c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zm0-48c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faBahai = {
    prefix: 'fas',
    iconName: 'bahai',
    icon: [
      576,
      512,
      ['haykal'],
      'f666',
      'M288 0c14.5 0 27.2 9.7 30.9 23.8l23.9 89.6 75.9-53.3c11.9-8.3 27.8-7.6 39 1.7s14.6 24.9 8.4 38.1l-39.3 84 92.4 8c14.4 1.2 26.2 12 28.8 26.3s-4.9 28.5-18 34.6l-84.1 39.1 65.7 65.5c10.3 10.2 12.4 26.1 5.1 38.7s-22 18.7-36 14.9L391 386.8l8.2 92.4c1.3 14.4-7.3 27.9-20.9 32.9s-28.9 .1-37.2-11.7l-53.1-76-53.1 76c-8.3 11.9-23.6 16.7-37.2 11.7s-22.2-18.5-20.9-32.9l8.2-92.4L95.4 410.9c-14 3.8-28.8-2.3-36-14.9s-5.2-28.4 5.1-38.7l65.7-65.5L46 252.7c-13.1-6.1-20.5-20.3-18-34.6s14.3-25.1 28.8-26.3l92.4-8-39.3-84c-6.1-13.1-2.7-28.8 8.4-38.1s27.1-10 39-1.7l75.9 53.3 23.9-89.6C260.8 9.7 273.5 0 288 0zm0 156.2l-4.8 18c-2.7 10.1-10.2 18.2-20 21.8s-20.8 2.1-29.3-3.9l-15.2-10.7 7.9 16.8c4.4 9.5 4 20.5-1.3 29.6s-14.5 15-25 15.9l-18.5 1.6 16.8 7.8c9.5 4.4 16.2 13.2 18 23.5s-1.5 20.8-8.9 28.2l-13.2 13.1 17.9-4.8c10.1-2.7 20.9-.3 28.9 6.4s12.2 16.9 11.3 27.3l-1.6 18.5 10.6-15.2c6-8.6 15.8-13.7 26.2-13.7s20.2 5.1 26.2 13.7l10.6 15.2-1.6-18.5c-.9-10.4 3.3-20.6 11.3-27.3s18.8-9.1 28.9-6.4l17.9 4.8-13.2-13.1c-7.4-7.4-10.7-17.9-8.9-28.2s8.5-19.1 18-23.5l16.8-7.8-18.5-1.6c-10.4-.9-19.7-6.8-25-15.9s-5.7-20.1-1.3-29.6l7.9-16.8-15.2 10.7c-8.6 6-19.5 7.5-29.3 3.9s-17.3-11.7-20-21.8l-4.8-18z',
    ],
  };
  var faHaykal = faBahai;
  var faSdCard = {
    prefix: 'fas',
    iconName: 'sd-card',
    icon: [
      384,
      512,
      [],
      'f7c2',
      'M320 0H141.3C124.3 0 108 6.7 96 18.7L18.7 96C6.7 108 0 124.3 0 141.3V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64zM160 88v48c0 13.3-10.7 24-24 24s-24-10.7-24-24V88c0-13.3 10.7-24 24-24s24 10.7 24 24zm80 0v48c0 13.3-10.7 24-24 24s-24-10.7-24-24V88c0-13.3 10.7-24 24-24s24 10.7 24 24zm80 0v48c0 13.3-10.7 24-24 24s-24-10.7-24-24V88c0-13.3 10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faDragon = {
    prefix: 'fas',
    iconName: 'dragon',
    icon: [
      640,
      512,
      [128009],
      'f6d5',
      'M352 124.5l-51.9-13c-6.5-1.6-11.3-7.1-12-13.8s2.8-13.1 8.7-16.1l40.8-20.4L294.4 28.8c-5.5-4.1-7.8-11.3-5.6-17.9S297.1 0 304 0H416h32 16c30.2 0 58.7 14.2 76.8 38.4l57.6 76.8c6.2 8.3 9.6 18.4 9.6 28.8c0 26.5-21.5 48-48 48H538.5c-17 0-33.3-6.7-45.3-18.7L480 160H448v21.5c0 24.8 12.8 47.9 33.8 61.1l106.6 66.6c32.1 20.1 51.6 55.2 51.6 93.1C640 462.9 590.9 512 530.2 512H496 432 32.3c-3.3 0-6.6-.4-9.6-1.4C13.5 507.8 6 501 2.4 492.1C1 488.7 .2 485.2 0 481.4c-.2-3.7 .3-7.3 1.3-10.7c2.8-9.2 9.6-16.7 18.6-20.4c3-1.2 6.2-2 9.5-2.2L433.3 412c8.3-.7 14.7-7.7 14.7-16.1c0-4.3-1.7-8.4-4.7-11.4l-44.4-44.4c-30-30-46.9-70.7-46.9-113.1V181.5v-57zM512 72.3c0-.1 0-.2 0-.3s0-.2 0-.3v.6zm-1.3 7.4L464.3 68.1c-.2 1.3-.3 2.6-.3 3.9c0 13.3 10.7 24 24 24c10.6 0 19.5-6.8 22.7-16.3zM130.9 116.5c16.3-14.5 40.4-16.2 58.5-4.1l130.6 87V227c0 32.8 8.4 64.8 24 93H112c-6.7 0-12.7-4.2-15-10.4s-.5-13.3 4.6-17.7L171 232.3 18.4 255.8c-7 1.1-13.9-2.6-16.9-9s-1.5-14.1 3.8-18.8L130.9 116.5z',
    ],
  };
  var faShoePrints = {
    prefix: 'fas',
    iconName: 'shoe-prints',
    icon: [
      640,
      512,
      [],
      'f54b',
      'M416 0C352.3 0 256 32 256 32V160c48 0 76 16 104 32s56 32 104 32c56.4 0 176-16 176-96S512 0 416 0zM128 96c0 35.3 28.7 64 64 64h32V32H192c-35.3 0-64 28.7-64 64zM288 512c96 0 224-48 224-128s-119.6-96-176-96c-48 0-76 16-104 32s-56 32-104 32V480s96.3 32 160 32zM0 416c0 35.3 28.7 64 64 64H96V352H64c-35.3 0-64 28.7-64 64z',
    ],
  };
  var faCirclePlus = {
    prefix: 'fas',
    iconName: 'circle-plus',
    icon: [
      512,
      512,
      ['plus-circle'],
      'f055',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM232 344V280H168c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V168c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H280v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z',
    ],
  };
  var faPlusCircle = faCirclePlus;
  var faFaceGrinTongueWink = {
    prefix: 'fas',
    iconName: 'face-grin-tongue-wink',
    icon: [
      512,
      512,
      [128540, 'grin-tongue-wink'],
      'f58b',
      'M174.5 498.8C73.1 464.7 0 368.9 0 256C0 114.6 114.6 0 256 0S512 114.6 512 256c0 112.9-73.1 208.7-174.5 242.8C346.7 484 352 466.6 352 448V401.1c24.3-17.5 43.6-41.6 55.4-69.6c5-11.8-7-22.5-19.3-18.7c-39.7 12.2-84.5 19-131.8 19s-92.1-6.8-131.8-19c-12.3-3.8-24.3 6.9-19.3 18.7c11.7 27.8 30.8 51.7 54.8 69.2V448c0 18.6 5.3 36 14.5 50.8zm20.7-265.2c5.3 7.1 15.3 8.5 22.4 3.2s8.5-15.3 3.2-22.4c-30.4-40.5-91.2-40.5-121.6 0c-5.3 7.1-3.9 17.1 3.2 22.4s17.1 3.9 22.4-3.2c17.6-23.5 52.8-23.5 70.4 0zM336 272c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64zM320 402.6V448c0 35.3-28.7 64-64 64s-64-28.7-64-64V402.6c0-14.7 11.9-26.6 26.6-26.6h2c11.3 0 21.1 7.9 23.6 18.9c2.8 12.6 20.8 12.6 23.6 0c2.5-11.1 12.3-18.9 23.6-18.9h2c14.7 0 26.6 11.9 26.6 26.6zM336 232c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faGrinTongueWink = faFaceGrinTongueWink;
  var faHandHolding = {
    prefix: 'fas',
    iconName: 'hand-holding',
    icon: [
      576,
      512,
      [],
      'f4bd',
      'M559.7 392.2c17.8-13.1 21.6-38.1 8.5-55.9s-38.1-21.6-55.9-8.5L392.6 416H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h16 64c17.7 0 32-14.3 32-32s-14.3-32-32-32H288 272 193.7c-29.1 0-57.3 9.9-80 28L68.8 384H32c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H192 352.5c29 0 57.3-9.3 80.7-26.5l126.6-93.3zm-367-8.2c.3 0 .6 0 .9 0c0 0 0 0 0 0c-.3 0-.6 0-.9 0z',
    ],
  };
  var faPlugCircleExclamation = {
    prefix: 'fas',
    iconName: 'plug-circle-exclamation',
    icon: [
      576,
      512,
      [],
      'e55d',
      'M96 0C78.3 0 64 14.3 64 32v96h64V32c0-17.7-14.3-32-32-32zM288 0c-17.7 0-32 14.3-32 32v96h64V32c0-17.7-14.3-32-32-32zM32 160c-17.7 0-32 14.3-32 32s14.3 32 32 32v32c0 77.4 55 142 128 156.8V480c0 17.7 14.3 32 32 32s32-14.3 32-32V412.8c12.3-2.5 24.1-6.4 35.1-11.5c-2.1-10.8-3.1-21.9-3.1-33.3c0-80.3 53.8-148 127.3-169.2c.5-2.2 .7-4.5 .7-6.8c0-17.7-14.3-32-32-32H32zM432 512c79.5 0 144-64.5 144-144s-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144zm0-48c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm0-192c8.8 0 16 7.2 16 16v80c0 8.8-7.2 16-16 16s-16-7.2-16-16V288c0-8.8 7.2-16 16-16z',
    ],
  };
  var faLinkSlash = {
    prefix: 'fas',
    iconName: 'link-slash',
    icon: [
      640,
      512,
      ['chain-broken', 'chain-slash', 'unlink'],
      'f127',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L489.3 358.2l90.5-90.5c56.5-56.5 56.5-148 0-204.5c-50-50-128.8-56.5-186.3-15.4l-1.6 1.1c-14.4 10.3-17.7 30.3-7.4 44.6s30.3 17.7 44.6 7.4l1.6-1.1c32.1-22.9 76-19.3 103.8 8.6c31.5 31.5 31.5 82.5 0 114l-96 96-31.9-25C430.9 239.6 420.1 175.1 377 132c-52.2-52.3-134.5-56.2-191.3-11.7L38.8 5.1zM239 162c30.1-14.9 67.7-9.9 92.8 15.3c20 20 27.5 48.3 21.7 74.5L239 162zM406.6 416.4L220.9 270c-2.1 39.8 12.2 80.1 42.2 110c38.9 38.9 94.4 51 143.6 36.3zm-290-228.5L60.2 244.3c-56.5 56.5-56.5 148 0 204.5c50 50 128.8 56.5 186.3 15.4l1.6-1.1c14.4-10.3 17.7-30.3 7.4-44.6s-30.3-17.7-44.6-7.4l-1.6 1.1c-32.1 22.9-76 19.3-103.8-8.6C74 372 74 321 105.5 289.5l61.8-61.8-50.6-39.9z',
    ],
  };
  var faChainBroken = faLinkSlash;
  var faChainSlash = faLinkSlash;
  var faUnlink = faLinkSlash;
  var faClone = {
    prefix: 'fas',
    iconName: 'clone',
    icon: [
      512,
      512,
      [],
      'f24d',
      'M0 448c0 35.3 28.7 64 64 64H288c35.3 0 64-28.7 64-64V384H224c-53 0-96-43-96-96V160H64c-35.3 0-64 28.7-64 64V448zm224-96H448c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H224c-35.3 0-64 28.7-64 64V288c0 35.3 28.7 64 64 64z',
    ],
  };
  var faPersonWalkingArrowLoopLeft = {
    prefix: 'fas',
    iconName: 'person-walking-arrow-loop-left',
    icon: [
      640,
      512,
      [],
      'e551',
      'M208 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM123.7 200.5c1-.4 1.9-.8 2.9-1.2l-16.9 63.5c-5.6 21.1-.1 43.6 14.7 59.7l70.7 77.1 22 88.1c4.3 17.1 21.7 27.6 38.8 23.3s27.6-21.7 23.3-38.8l-23-92.1c-1.9-7.8-5.8-14.9-11.2-20.8l-49.5-54 19.3-65.5 9.6 23c4.4 10.6 12.5 19.3 22.8 24.5l26.7 13.3c15.8 7.9 35 1.5 42.9-14.3s1.5-35-14.3-42.9L281 232.7l-15.3-36.8C248.5 154.8 208.3 128 163.7 128c-22.8 0-45.3 4.8-66.1 14l-8 3.5c-32.9 14.6-58.1 42.4-69.4 76.5l-2.6 7.8c-5.6 16.8 3.5 34.9 20.2 40.5s34.9-3.5 40.5-20.2l2.6-7.8c5.7-17.1 18.3-30.9 34.7-38.2l8-3.5zm-30 135.1L68.7 398 9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L116.3 441c4.6-4.6 8.2-10.1 10.6-16.1l14.5-36.2-40.7-44.4c-2.5-2.7-4.8-5.6-7-8.6zm347.7 119c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L461.3 384H480c88.4 0 160-71.6 160-160s-71.6-160-160-160L352 64c-17.7 0-32 14.3-32 32s14.3 32 32 32l128 0c53 0 96 43 96 96s-43 96-96 96H461.3l25.4-25.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-80 80c-12.5 12.5-12.5 32.8 0 45.3l80 80z',
    ],
  };
  var faArrowUpZA = {
    prefix: 'fas',
    iconName: 'arrow-up-z-a',
    icon: [
      576,
      512,
      ['sort-alpha-up-alt'],
      'f882',
      'M183.6 42.4C177.5 35.8 169 32 160 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L128 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 64c0 17.7 14.3 32 32 32h50.7l-73.4 73.4c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H429.3l73.4-73.4c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8H352c-17.7 0-32 14.3-32 32zm96 192c-12.1 0-23.2 6.8-28.6 17.7l-64 128-16 32c-7.9 15.8-1.5 35 14.3 42.9s35 1.5 42.9-14.3l7.2-14.3h88.4l7.2 14.3c7.9 15.8 27.1 22.2 42.9 14.3s22.2-27.1 14.3-42.9l-16-32-64-128C439.2 262.8 428.1 256 416 256zM395.8 400L416 359.6 436.2 400H395.8z',
    ],
  };
  var faSortAlphaUpAlt = faArrowUpZA;
  var faFireFlameCurved = {
    prefix: 'fas',
    iconName: 'fire-flame-curved',
    icon: [
      384,
      512,
      ['fire-alt'],
      'f7e4',
      'M153.6 29.9l16-21.3C173.6 3.2 180 0 186.7 0C198.4 0 208 9.6 208 21.3V43.5c0 13.1 5.4 25.7 14.9 34.7L307.6 159C356.4 205.6 384 270.2 384 337.7C384 434 306 512 209.7 512H192C86 512 0 426 0 320v-3.8c0-48.8 19.4-95.6 53.9-130.1l3.5-3.5c4.2-4.2 10-6.6 16-6.6C85.9 176 96 186.1 96 198.6V288c0 35.3 28.7 64 64 64s64-28.7 64-64v-3.9c0-18-7.2-35.3-19.9-48l-38.6-38.6c-24-24-37.5-56.7-37.5-90.7c0-27.7 9-54.8 25.6-76.9z',
    ],
  };
  var faFireAlt = faFireFlameCurved;
  var faTornado = {
    prefix: 'fas',
    iconName: 'tornado',
    icon: [
      448,
      512,
      [127786],
      'f76f',
      'M0 32V45.6C0 62.7 1.7 79.6 5 96H357.8c3.2-6.9 7.5-13.3 13-18.8l38.6-38.6c4.2-4.2 6.6-10 6.6-16C416 10.1 405.9 0 393.4 0H32C14.3 0 0 14.3 0 32zm352.2 96H13.6c12.2 35.9 32.3 68.7 58.8 96H412l-47.2-62.9c-7.3-9.7-11.6-21.2-12.6-33.1zm-226 138.2l116.4 68.5c8.2 4.8 15.8 10.7 22.5 17.3H445c2-9.8 3-19.9 3-30.1c0-23-5.3-45.5-15.3-65.9H110.2c5.2 3.6 10.5 7 16 10.2zM288 384c10.3 21.4 13.8 45.5 9.9 69l-5.9 35.7c-2 12.2 7.4 23.4 19.8 23.4c5.3 0 10.4-2.1 14.2-5.9l78.2-78.2c12.8-12.8 23.1-27.7 30.4-43.9H288z',
    ],
  };
  var faFileCirclePlus = {
    prefix: 'fas',
    iconName: 'file-circle-plus',
    icon: [
      576,
      512,
      [58606],
      'e494',
      'M0 64C0 28.7 28.7 0 64 0H224V128c0 17.7 14.3 32 32 32H384v38.6C310.1 219.5 256 287.4 256 368c0 59.1 29.1 111.3 73.7 143.3c-3.2 .5-6.4 .7-9.7 .7H64c-35.3 0-64-28.7-64-64V64zm384 64H256V0L384 128zm48 384c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm16-208c0-8.8-7.2-16-16-16s-16 7.2-16 16v48H368c-8.8 0-16 7.2-16 16s7.2 16 16 16h48v48c0 8.8 7.2 16 16 16s16-7.2 16-16V384h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H448V304z',
    ],
  };
  var faBookQuran = {
    prefix: 'fas',
    iconName: 'book-quran',
    icon: [
      448,
      512,
      ['quran'],
      'f687',
      'M352 0c53 0 96 43 96 96V416c0 53-43 96-96 96H64 32c-17.7 0-32-14.3-32-32s14.3-32 32-32V384c-17.7 0-32-14.3-32-32V32C0 14.3 14.3 0 32 0H64 352zm0 384H96v64H352c17.7 0 32-14.3 32-32s-14.3-32-32-32zM274.1 150.2l-8.9 21.4-23.1 1.9c-5.7 .5-8 7.5-3.7 11.2L256 199.8l-5.4 22.6c-1.3 5.5 4.7 9.9 9.6 6.9L280 217.2l19.8 12.1c4.9 3 10.9-1.4 9.6-6.9L304 199.8l17.6-15.1c4.3-3.7 2-10.8-3.7-11.2l-23.1-1.9-8.9-21.4c-2.2-5.3-9.6-5.3-11.8 0zM96 192c0 70.7 57.3 128 128 128c25.6 0 49.5-7.5 69.5-20.5c3.2-2.1 4.5-6.2 3.1-9.7s-5.2-5.6-9-4.8c-6.1 1.2-12.5 1.9-19 1.9c-52.4 0-94.9-42.5-94.9-94.9s42.5-94.9 94.9-94.9c6.5 0 12.8 .7 19 1.9c3.8 .8 7.5-1.3 9-4.8s.2-7.6-3.1-9.7C273.5 71.5 249.6 64 224 64C153.3 64 96 121.3 96 192z',
    ],
  };
  var faQuran = faBookQuran;
  var faAnchor = {
    prefix: 'fas',
    iconName: 'anchor',
    icon: [
      576,
      512,
      [9875],
      'f13d',
      'M256 96c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm85.1 80C367 158.8 384 129.4 384 96c0-53-43-96-96-96s-96 43-96 96c0 33.4 17 62.8 42.9 80H224c-17.7 0-32 14.3-32 32s14.3 32 32 32h32V448H208c-53 0-96-43-96-96v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97 263c-9.4-9.4-24.6-9.4-33.9 0L7 319c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 88.4 71.6 160 160 160h80 80c88.4 0 160-71.6 160-160v-6.1l7 7c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-56-56c-9.4-9.4-24.6-9.4-33.9 0l-56 56c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l7-7V352c0 53-43 96-96 96H320V240h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H341.1z',
    ],
  };
  var faBorderAll = {
    prefix: 'fas',
    iconName: 'border-all',
    icon: [
      448,
      512,
      [],
      'f84c',
      'M384 96V224H256V96H384zm0 192V416H256V288H384zM192 224H64V96H192V224zM64 288H192V416H64V288zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z',
    ],
  };
  var faFaceAngry = {
    prefix: 'fas',
    iconName: 'face-angry',
    icon: [
      512,
      512,
      [128544, 'angry'],
      'f556',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM161.3 382.1c-5.4 12.3 8.7 21.6 21.1 16.4c22.4-9.5 47.4-14.8 73.7-14.8s51.3 5.3 73.7 14.8c12.4 5.2 26.5-4.1 21.1-16.4c-16-36.6-52.4-62.1-94.8-62.1s-78.8 25.6-94.8 62.1zM176.4 272c17.7 0 32-14.3 32-32c0-1.5-.1-3-.3-4.4l10.9 3.6c8.4 2.8 17.4-1.7 20.2-10.1s-1.7-17.4-10.1-20.2l-96-32c-8.4-2.8-17.4 1.7-20.2 10.1s1.7 17.4 10.1 20.2l30.7 10.2c-5.8 5.8-9.3 13.8-9.3 22.6c0 17.7 14.3 32 32 32zm192-32c0-8.9-3.6-17-9.5-22.8l30.2-10.1c8.4-2.8 12.9-11.9 10.1-20.2s-11.9-12.9-20.2-10.1l-96 32c-8.4 2.8-12.9 11.9-10.1 20.2s11.9 12.9 20.2 10.1l11.7-3.9c-.2 1.5-.3 3.1-.3 4.7c0 17.7 14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faAngry = faFaceAngry;
  var faCookieBite = {
    prefix: 'fas',
    iconName: 'cookie-bite',
    icon: [
      512,
      512,
      [],
      'f564',
      'M257.5 27.6c-.8-5.4-4.9-9.8-10.3-10.6c-22.1-3.1-44.6 .9-64.4 11.4l-74 39.5C89.1 78.4 73.2 94.9 63.4 115L26.7 190.6c-9.8 20.1-13 42.9-9.1 64.9l14.5 82.8c3.9 22.1 14.6 42.3 30.7 57.9l60.3 58.4c16.1 15.6 36.6 25.6 58.7 28.7l83 11.7c22.1 3.1 44.6-.9 64.4-11.4l74-39.5c19.7-10.5 35.6-27 45.4-47.2l36.7-75.5c9.8-20.1 13-42.9 9.1-64.9c-.9-5.3-5.3-9.3-10.6-10.1c-51.5-8.2-92.8-47.1-104.5-97.4c-1.8-7.6-8-13.4-15.7-14.6c-54.6-8.7-97.7-52-106.2-106.8zM208 208c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm0 128c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm160 0c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faArrowTrendDown = {
    prefix: 'fas',
    iconName: 'arrow-trend-down',
    icon: [
      576,
      512,
      [],
      'e097',
      'M384 352c-17.7 0-32 14.3-32 32s14.3 32 32 32H544c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v82.7L342.6 137.4c-12.5-12.5-32.8-12.5-45.3 0L192 242.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0L320 205.3 466.7 352H384z',
    ],
  };
  var faRss = {
    prefix: 'fas',
    iconName: 'rss',
    icon: [
      448,
      512,
      ['feed'],
      'f09e',
      'M0 64C0 46.3 14.3 32 32 32c229.8 0 416 186.2 416 416c0 17.7-14.3 32-32 32s-32-14.3-32-32C384 253.6 226.4 96 32 96C14.3 96 0 81.7 0 64zM128 416c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM32 160c159.1 0 288 128.9 288 288c0 17.7-14.3 32-32 32s-32-14.3-32-32c0-123.7-100.3-224-224-224c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faFeed = faRss;
  var faDrawPolygon = {
    prefix: 'fas',
    iconName: 'draw-polygon',
    icon: [
      448,
      512,
      [],
      'f5ee',
      'M96 151.4V360.6c9.7 5.6 17.8 13.7 23.4 23.4H328.6c0-.1 .1-.2 .1-.3l-4.5-7.9-32-56 0 0c-1.4 .1-2.8 .1-4.2 .1c-35.3 0-64-28.7-64-64s28.7-64 64-64c1.4 0 2.8 0 4.2 .1l0 0 32-56 4.5-7.9-.1-.3H119.4c-5.6 9.7-13.7 17.8-23.4 23.4zM384.3 352c35.2 .2 63.7 28.7 63.7 64c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H119.4c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V151.4C12.9 140.4 0 119.7 0 96C0 60.7 28.7 32 64 32c23.7 0 44.4 12.9 55.4 32H328.6c11.1-19.1 31.7-32 55.4-32c35.3 0 64 28.7 64 64c0 35.3-28.5 63.8-63.7 64l-4.5 7.9-32 56-2.3 4c4.2 8.5 6.5 18 6.5 28.1s-2.3 19.6-6.5 28.1l2.3 4 32 56 4.5 7.9z',
    ],
  };
  var faScaleBalanced = {
    prefix: 'fas',
    iconName: 'scale-balanced',
    icon: [
      640,
      512,
      [9878, 'balance-scale'],
      'f24e',
      'M384 32H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H398.4c-5.2 25.8-22.9 47.1-46.4 57.3V448H512c17.7 0 32 14.3 32 32s-14.3 32-32 32H320 128c-17.7 0-32-14.3-32-32s14.3-32 32-32H288V153.3c-23.5-10.3-41.2-31.6-46.4-57.3H128c-17.7 0-32-14.3-32-32s14.3-32 32-32H256c14.6-19.4 37.8-32 64-32s49.4 12.6 64 32zM125.8 177.3L51.1 320H204.9L130.2 177.3c-.4-.8-1.3-1.3-2.2-1.3s-1.7 .5-2.2 1.3zM128 128c18.8 0 36 10.4 44.7 27l77.8 148.5c3.1 5.8 6.1 14 5.5 23.8c-.7 12.1-4.8 35.2-24.8 55.1C210.9 402.6 178.2 416 128 416s-82.9-13.4-103.2-33.5c-20-20-24.2-43-24.8-55.1c-.6-9.8 2.5-18 5.5-23.8L83.3 155c8.7-16.6 25.9-27 44.7-27zm384 48c-.9 0-1.7 .5-2.2 1.3L435.1 320H588.9L514.2 177.3c-.4-.8-1.3-1.3-2.2-1.3zm-44.7-21c8.7-16.6 25.9-27 44.7-27s36 10.4 44.7 27l77.8 148.5c3.1 5.8 6.1 14 5.5 23.8c-.7 12.1-4.8 35.2-24.8 55.1C594.9 402.6 562.2 416 512 416s-82.9-13.4-103.2-33.5c-20-20-24.2-43-24.8-55.1c-.6-9.8 2.5-18 5.5-23.8L467.3 155z',
    ],
  };
  var faBalanceScale = faScaleBalanced;
  var faGaugeSimpleHigh = {
    prefix: 'fas',
    iconName: 'gauge-simple-high',
    icon: [
      512,
      512,
      [61668, 'tachometer', 'tachometer-fast'],
      'f62a',
      'M512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM320 352c0-15.9-5.8-30.4-15.3-41.6l76.6-147.4c6.1-11.8 1.5-26.3-10.2-32.4s-26.2-1.5-32.4 10.2L262.1 288.3c-2-.2-4-.3-6.1-.3c-35.3 0-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64z',
    ],
  };
  var faTachometer = faGaugeSimpleHigh;
  var faTachometerFast = faGaugeSimpleHigh;
  var faShower = {
    prefix: 'fas',
    iconName: 'shower',
    icon: [
      512,
      512,
      [128703],
      'f2cc',
      'M64 131.9C64 112.1 80.1 96 99.9 96c9.5 0 18.6 3.8 25.4 10.5l16.2 16.2c-21 38.9-17.4 87.5 10.9 123L151 247c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0L345 121c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-1.3 1.3c-35.5-28.3-84.1-31.9-123-10.9L170.5 61.3C151.8 42.5 126.4 32 99.9 32C44.7 32 0 76.7 0 131.9V448c0 17.7 14.3 32 32 32s32-14.3 32-32V131.9zM256 352c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm64 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0-128c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm64 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm0-128c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32zm64 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm32-32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faDesktop = {
    prefix: 'fas',
    iconName: 'desktop',
    icon: [
      576,
      512,
      [128421, 61704, 'desktop-alt'],
      'f390',
      'M64 0C28.7 0 0 28.7 0 64V352c0 35.3 28.7 64 64 64H240l-10.7 32H160c-17.7 0-32 14.3-32 32s14.3 32 32 32H416c17.7 0 32-14.3 32-32s-14.3-32-32-32H346.7L336 416H512c35.3 0 64-28.7 64-64V64c0-35.3-28.7-64-64-64H64zM512 64V288H64V64H512z',
    ],
  };
  var faDesktopAlt = faDesktop;
  var faM = {
    prefix: 'fas',
    iconName: 'm',
    icon: [
      448,
      512,
      [109],
      '4d',
      'M0 448c0 17.7 14.3 32 32 32s32-14.3 32-32H0zM32 64L58.6 46.2c-7.8-11.7-22.4-17-35.9-12.9S0 49.9 0 64l32 0zM224 352l-26.6 17.8c5.9 8.9 15.9 14.2 26.6 14.2s20.7-5.3 26.6-14.2L224 352zM416 64h32c0-14.1-9.2-26.5-22.7-30.6s-28.1 1.1-35.9 12.9L416 64zM384 448c0 17.7 14.3 32 32 32s32-14.3 32-32H384zM64 448V64H0V448H64zM5.4 81.8l192 288 53.3-35.5-192-288L5.4 81.8zm245.3 288l192-288L389.4 46.2l-192 288 53.3 35.5zM384 64V448h64V64H384z',
    ],
  };
  var faTableList = {
    prefix: 'fas',
    iconName: 'table-list',
    icon: [
      512,
      512,
      ['th-list'],
      'f00b',
      'M0 96C0 60.7 28.7 32 64 32H448c35.3 0 64 28.7 64 64V416c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V96zm64 0v64h64V96H64zm384 0H192v64H448V96zM64 224v64h64V224H64zm384 0H192v64H448V224zM64 352v64h64V352H64zm384 0H192v64H448V352z',
    ],
  };
  var faThList = faTableList;
  var faCommentSms = {
    prefix: 'fas',
    iconName: 'comment-sms',
    icon: [
      512,
      512,
      ['sms'],
      'f7cd',
      'M256 448c141.4 0 256-93.1 256-208S397.4 32 256 32S0 125.1 0 240c0 45.1 17.7 86.8 47.7 120.9c-1.9 24.5-11.4 46.3-21.4 62.9c-5.5 9.2-11.1 16.6-15.2 21.6c-2.1 2.5-3.7 4.4-4.9 5.7c-.6 .6-1 1.1-1.3 1.4l-.3 .3 0 0 0 0 0 0 0 0c-4.6 4.6-5.9 11.4-3.4 17.4c2.5 6 8.3 9.9 14.8 9.9c28.7 0 57.6-8.9 81.6-19.3c22.9-10 42.4-21.9 54.3-30.6c31.8 11.5 67 17.9 104.1 17.9zM202.9 176.8c6.5-2.2 13.7 .1 17.9 5.6L256 229.3l35.2-46.9c4.1-5.5 11.3-7.8 17.9-5.6s10.9 8.3 10.9 15.2v96c0 8.8-7.2 16-16 16s-16-7.2-16-16V240l-19.2 25.6c-3 4-7.8 6.4-12.8 6.4s-9.8-2.4-12.8-6.4L224 240v48c0 8.8-7.2 16-16 16s-16-7.2-16-16V192c0-6.9 4.4-13 10.9-15.2zm173.1 38c0 .2 0 .4 0 .4c.1 .1 .6 .8 2.2 1.7c3.9 2.3 9.6 4.1 18.3 6.8l.6 .2c7.4 2.2 17.3 5.2 25.2 10.2c9.1 5.7 17.4 15.2 17.6 29.9c.2 15-7.6 26-17.8 32.3c-9.5 5.9-20.9 7.9-30.7 7.6c-12.2-.4-23.7-4.4-32.6-7.4l0 0 0 0c-1.4-.5-2.7-.9-4-1.4c-8.4-2.8-12.9-11.9-10.1-20.2s11.9-12.9 20.2-10.1c1.7 .6 3.3 1.1 4.9 1.6l0 0 0 0c9.1 3.1 15.6 5.3 22.6 5.5c5.3 .2 10-1 12.8-2.8c1.2-.8 1.8-1.5 2.1-2c.2-.4 .6-1.2 .6-2.7l0-.2c0-.7 0-1.4-2.7-3.1c-3.8-2.4-9.6-4.3-18-6.9l-1.2-.4c-7.2-2.2-16.7-5-24.3-9.6c-9-5.4-17.7-14.7-17.7-29.4c-.1-15.2 8.6-25.7 18.5-31.6c9.4-5.5 20.5-7.5 29.7-7.4c10 .2 19.7 2.3 27.9 4.4c8.5 2.3 13.6 11 11.3 19.6s-11 13.6-19.6 11.3c-7.3-1.9-14.1-3.3-20.1-3.4c-4.9-.1-9.8 1.1-12.9 2.9c-1.4 .8-2.1 1.6-2.4 2c-.2 .3-.4 .8-.4 1.9zm-272 0c0 .2 0 .4 0 .4c.1 .1 .6 .8 2.2 1.7c3.9 2.3 9.6 4.1 18.3 6.8l.6 .2c7.4 2.2 17.3 5.2 25.2 10.2c9.1 5.7 17.4 15.2 17.6 29.9c.2 15-7.6 26-17.8 32.3c-9.5 5.9-20.9 7.9-30.7 7.6c-12.3-.4-24.2-4.5-33.2-7.6l0 0 0 0c-1.3-.4-2.5-.8-3.6-1.2c-8.4-2.8-12.9-11.9-10.1-20.2s11.9-12.9 20.2-10.1c1.4 .5 2.7 .9 4 1.4l0 0 0 0 0 0c9.5 3.2 16.5 5.6 23.7 5.8c5.3 .2 10-1 12.8-2.8c1.2-.8 1.8-1.5 2.1-2c.2-.4 .6-1.2 .6-2.7l0-.2c0-.7 0-1.4-2.7-3.1c-3.8-2.4-9.6-4.3-18-6.9l-1.2-.4 0 0c-7.2-2.2-16.7-5-24.3-9.6C80.8 239 72.1 229.7 72 215c-.1-15.2 8.6-25.7 18.5-31.6c9.4-5.5 20.5-7.5 29.7-7.4c9.5 .1 22.2 2.1 31.1 4.4c8.5 2.3 13.6 11 11.3 19.6s-11 13.6-19.6 11.3c-6.6-1.8-16.8-3.3-23.3-3.4c-4.9-.1-9.8 1.1-12.9 2.9c-1.4 .8-2.1 1.6-2.4 2c-.2 .3-.4 .8-.4 1.9z',
    ],
  };
  var faSms = faCommentSms;
  var faBook = {
    prefix: 'fas',
    iconName: 'book',
    icon: [
      448,
      512,
      [128212],
      'f02d',
      'M96 0C43 0 0 43 0 96V416c0 53 43 96 96 96H384h32c17.7 0 32-14.3 32-32s-14.3-32-32-32V384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H384 96zm0 384H352v64H96c-17.7 0-32-14.3-32-32s14.3-32 32-32zm32-240c0-8.8 7.2-16 16-16H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16zm16 48H336c8.8 0 16 7.2 16 16s-7.2 16-16 16H144c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faUserPlus = {
    prefix: 'fas',
    iconName: 'user-plus',
    icon: [
      640,
      512,
      [],
      'f234',
      'M352 128c0 70.7-57.3 128-128 128s-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128zM0 482.3C0 383.8 79.8 304 178.3 304h91.4C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7H29.7C13.3 512 0 498.7 0 482.3zM504 312V248H440c-13.3 0-24-10.7-24-24s10.7-24 24-24h64V136c0-13.3 10.7-24 24-24s24 10.7 24 24v64h64c13.3 0 24 10.7 24 24s-10.7 24-24 24H552v64c0 13.3-10.7 24-24 24s-24-10.7-24-24z',
    ],
  };
  var faCheck = {
    prefix: 'fas',
    iconName: 'check',
    icon: [
      512,
      512,
      [10003, 10004],
      'f00c',
      'M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z',
    ],
  };
  var faBatteryThreeQuarters = {
    prefix: 'fas',
    iconName: 'battery-three-quarters',
    icon: [
      576,
      512,
      ['battery-4'],
      'f241',
      'M0 176c0-44.2 35.8-80 80-80H464c44.2 0 80 35.8 80 80v16c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32v16c0 44.2-35.8 80-80 80H80c-44.2 0-80-35.8-80-80V176zm80-16c-8.8 0-16 7.2-16 16V336c0 8.8 7.2 16 16 16H464c8.8 0 16-7.2 16-16V176c0-8.8-7.2-16-16-16H80zm272 32V320H96V192H352z',
    ],
  };
  var faBattery4 = faBatteryThreeQuarters;
  var faHouseCircleCheck = {
    prefix: 'fas',
    iconName: 'house-circle-check',
    icon: [
      640,
      512,
      [],
      'e509',
      'M320.7 351.7C329 262.1 404.3 192 496 192c8.9 0 17.6 .7 26.1 1.9L309.5 7c-6-5-14-7-21-7s-15 1-22 8L10 231.5c-7 7-10 15-10 24c0 18 14 32.1 32 32.1h32V480c0 17.7 14.3 32 32 32H192c17.7 0 32-14.3 32-32V383.7c0-17.7 14.3-32 32-32h64l.7 0zM640 368c0-79.5-64.5-144-144-144s-144 64.5-144 144s64.5 144 144 144s144-64.5 144-144zm-76.7-43.3c6.2 6.2 6.2 16.4 0 22.6l-72 72c-6.2 6.2-16.4 6.2-22.6 0l-40-40c-6.2-6.2-6.2-16.4 0-22.6s16.4-6.2 22.6 0L480 385.4l60.7-60.7c6.2-6.2 16.4-6.2 22.6 0z',
    ],
  };
  var faAngleLeft = {
    prefix: 'fas',
    iconName: 'angle-left',
    icon: [
      320,
      512,
      [8249],
      'f104',
      'M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z',
    ],
  };
  var faDiagramSuccessor = {
    prefix: 'fas',
    iconName: 'diagram-successor',
    icon: [
      512,
      512,
      [],
      'e47a',
      'M512 416l0-64c0-35.3-28.7-64-64-64L64 288c-35.3 0-64 28.7-64 64l0 64c0 35.3 28.7 64 64 64l384 0c35.3 0 64-28.7 64-64zM64 160l0-64 144 0 16 0 0 64L64 160zm224 0l0-64 80 0c8.8 0 16 7.2 16 16l0 16-38.1 0c-21.4 0-32.1 25.9-17 41L399 239c9.4 9.4 24.6 9.4 33.9 0L503 169c15.1-15.1 4.4-41-17-41L448 128l0-16c0-44.2-35.8-80-80-80L224 32l-16 0L64 32C28.7 32 0 60.7 0 96l0 64c0 35.3 28.7 64 64 64l160 0c35.3 0 64-28.7 64-64z',
    ],
  };
  var faTruckArrowRight = {
    prefix: 'fas',
    iconName: 'truck-arrow-right',
    icon: [
      640,
      512,
      [],
      'e58b',
      'M0 48C0 21.5 21.5 0 48 0H368c26.5 0 48 21.5 48 48V96h50.7c17 0 33.3 6.7 45.3 18.7L589.3 192c12 12 18.7 28.3 18.7 45.3V256v32 64c17.7 0 32 14.3 32 32s-14.3 32-32 32H576c0 53-43 96-96 96s-96-43-96-96H256c0 53-43 96-96 96s-96-43-96-96H48c-26.5 0-48-21.5-48-48V48zM416 256H544V237.3L466.7 160H416v96zM160 464c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zm368-48c0-26.5-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48s48-21.5 48-48zM257 95c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l39 39H96c-13.3 0-24 10.7-24 24s10.7 24 24 24H262.1l-39 39c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l80-80c9.4-9.4 9.4-24.6 0-33.9L257 95z',
    ],
  };
  var faArrowsSplitUpAndLeft = {
    prefix: 'fas',
    iconName: 'arrows-split-up-and-left',
    icon: [
      512,
      512,
      [],
      'e4bc',
      'M246.6 150.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l96-96c12.5-12.5 32.8-12.5 45.3 0l96 96c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L352 109.3V384c0 35.3 28.7 64 64 64h64c17.7 0 32 14.3 32 32s-14.3 32-32 32H416c-70.7 0-128-57.3-128-128c0-35.3-28.7-64-64-64H109.3l41.4 41.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0l-96-96c-12.5-12.5-12.5-32.8 0-45.3l96-96c12.5-12.5 32.8-12.5 45.3 0s12.5 32.8 0 45.3L109.3 256H224c23.3 0 45.2 6.2 64 17.1V109.3l-41.4 41.4z',
    ],
  };
  var faHandFist = {
    prefix: 'fas',
    iconName: 'hand-fist',
    icon: [
      384,
      512,
      [9994, 'fist-raised'],
      'f6de',
      'M160 0c17.7 0 32 14.3 32 32V144H128V32c0-17.7 14.3-32 32-32zM32 64c0-17.7 14.3-32 32-32s32 14.3 32 32v80H32V64zm192 0c0-17.7 14.3-32 32-32s32 14.3 32 32v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V64zm96 64c0-17.7 14.3-32 32-32s32 14.3 32 32v64c0 17.7-14.3 32-32 32s-32-14.3-32-32V128zm-96 88l0-.6c9.4 5.4 20.3 8.6 32 8.6c13.2 0 25.4-4 35.6-10.8c8.7 24.9 32.5 42.8 60.4 42.8c11.7 0 22.6-3.1 32-8.6V256c0 52.3-25.1 98.8-64 128v96c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32V401.6c-17.3-7.9-33.2-18.8-46.9-32.5L37.5 357.5C13.5 333.5 0 300.9 0 267V240c0-35.3 28.7-64 64-64h88c22.1 0 40 17.9 40 40s-17.9 40-40 40H96c-8.8 0-16 7.2-16 16s7.2 16 16 16h56c39.8 0 72-32.2 72-72z',
    ],
  };
  var faFistRaised = faHandFist;
  var faCloudMoon = {
    prefix: 'fas',
    iconName: 'cloud-moon',
    icon: [
      640,
      512,
      [],
      'f6c3',
      'M495.8 0c5.5 0 10.9 .2 16.3 .7c7 .6 12.8 5.7 14.3 12.5s-1.6 13.9-7.7 17.3c-44.4 25.2-74.4 73-74.4 127.8c0 81 65.5 146.6 146.2 146.6c8.6 0 17-.7 25.1-2.1c6.9-1.2 13.8 2.2 17 8.5s1.9 13.8-3.1 18.7c-34.5 33.6-81.7 54.4-133.6 54.4c-9.3 0-18.4-.7-27.4-1.9c-11.2-22.6-29.8-40.9-52.6-51.7c-2.7-58.5-50.3-105.3-109.2-106.7c-1.7-10.4-2.6-21-2.6-31.8C304 86.1 389.8 0 495.8 0zM447.9 431.9c0 44.2-35.8 80-80 80H96c-53 0-96-43-96-96c0-47.6 34.6-87 80-94.6l0-1.3c0-53 43-96 96-96c34.9 0 65.4 18.6 82.2 46.4c13-9.1 28.8-14.4 45.8-14.4c44.2 0 80 35.8 80 80c0 5.9-.6 11.7-1.9 17.2c37.4 6.7 65.8 39.4 65.8 78.7z',
    ],
  };
  var faBriefcase = {
    prefix: 'fas',
    iconName: 'briefcase',
    icon: [
      512,
      512,
      [128188],
      'f0b1',
      'M184 48H328c4.4 0 8 3.6 8 8V96H176V56c0-4.4 3.6-8 8-8zm-56 8V96H64C28.7 96 0 124.7 0 160v96H192 320 512V160c0-35.3-28.7-64-64-64H384V56c0-30.9-25.1-56-56-56H184c-30.9 0-56 25.1-56 56zM512 288H320v32c0 17.7-14.3 32-32 32H224c-17.7 0-32-14.3-32-32V288H0V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V288z',
    ],
  };
  var faPersonFalling = {
    prefix: 'fas',
    iconName: 'person-falling',
    icon: [
      512,
      512,
      [],
      'e546',
      'M288 0c17.7 0 32 14.3 32 32l0 9.8c0 54.6-27.9 104.6-72.5 133.6l.2 .3L304.5 256l87.5 0c15.1 0 29.3 7.1 38.4 19.2l43.2 57.6c10.6 14.1 7.7 34.2-6.4 44.8s-34.2 7.7-44.8-6.4L384 320l-96 0h-1.4l92.3 142.6c9.6 14.8 5.4 34.6-9.5 44.3s-34.6 5.4-44.3-9.5L164.5 249.2c-2.9 9.2-4.5 19-4.5 29l0 73.8c0 17.7-14.3 32-32 32s-32-14.3-32-32V278.2c0-65.1 39.6-123.7 100.1-147.9C232.3 115.8 256 80.8 256 41.8l0-9.8c0-17.7 14.3-32 32-32zM112 128c-26.5 0-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48s-21.5 48-48 48z',
    ],
  };
  var faImagePortrait = {
    prefix: 'fas',
    iconName: 'image-portrait',
    icon: [
      384,
      512,
      ['portrait'],
      'f3e0',
      'M384 64c0-35.3-28.7-64-64-64H64C28.7 0 0 28.7 0 64L0 448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64l0-384zM256 192c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zM80 356.6c0-37.9 30.7-68.6 68.6-68.6h86.9c37.9 0 68.6 30.7 68.6 68.6c0 15.1-12.3 27.4-27.4 27.4H107.4C92.3 384 80 371.7 80 356.6z',
    ],
  };
  var faPortrait = faImagePortrait;
  var faUserTag = {
    prefix: 'fas',
    iconName: 'user-tag',
    icon: [
      640,
      512,
      [],
      'f507',
      'M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0S96 57.3 96 128s57.3 128 128 128zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c10 0 18.8-4.9 24.2-12.5l-99.2-99.2c-14.9-14.9-23.3-35.1-23.3-56.1v-33c-15.9-4.7-32.8-7.2-50.3-7.2H178.3zM384 224c-17.7 0-32 14.3-32 32v82.7c0 17 6.7 33.3 18.7 45.3L478.1 491.3c18.7 18.7 49.1 18.7 67.9 0l73.4-73.4c18.7-18.7 18.7-49.1 0-67.9L512 242.7c-12-12-28.3-18.7-45.3-18.7H384zm72 80c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24z',
    ],
  };
  var faRug = {
    prefix: 'fas',
    iconName: 'rug',
    icon: [
      640,
      512,
      [],
      'e569',
      'M24 64H56 80V88v88 80 80 88 24H56 24c-13.3 0-24-10.7-24-24s10.7-24 24-24h8V360H24c-13.3 0-24-10.7-24-24s10.7-24 24-24h8V280H24c-13.3 0-24-10.7-24-24s10.7-24 24-24h8V200H24c-13.3 0-24-10.7-24-24s10.7-24 24-24h8V112H24C10.7 112 0 101.3 0 88S10.7 64 24 64zm88 0H528V448H112V64zM640 88c0 13.3-10.7 24-24 24h-8v40h8c13.3 0 24 10.7 24 24s-10.7 24-24 24h-8v32h8c13.3 0 24 10.7 24 24s-10.7 24-24 24h-8v32h8c13.3 0 24 10.7 24 24s-10.7 24-24 24h-8v40h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H584 560V424 336 256 176 88 64h24 32c13.3 0 24 10.7 24 24z',
    ],
  };
  var faEarthEurope = {
    prefix: 'fas',
    iconName: 'earth-europe',
    icon: [
      512,
      512,
      ['globe-europe'],
      'f7a2',
      'M266.3 48.3L232.5 73.6c-5.4 4-8.5 10.4-8.5 17.1v9.1c0 6.8 5.5 12.3 12.3 12.3c2.4 0 4.8-.7 6.8-2.1l41.8-27.9c2-1.3 4.4-2.1 6.8-2.1h1c6.2 0 11.3 5.1 11.3 11.3c0 3-1.2 5.9-3.3 8l-19.9 19.9c-5.8 5.8-12.9 10.2-20.7 12.8l-26.5 8.8c-5.8 1.9-9.6 7.3-9.6 13.4c0 3.7-1.5 7.3-4.1 10l-17.9 17.9c-6.4 6.4-9.9 15-9.9 24v4.3c0 16.4 13.6 29.7 29.9 29.7c11 0 21.2-6.2 26.1-16l4-8.1c2.4-4.8 7.4-7.9 12.8-7.9c4.5 0 8.7 2.1 11.4 5.7l16.3 21.7c2.1 2.9 5.5 4.5 9.1 4.5c8.4 0 13.9-8.9 10.1-16.4l-1.1-2.3c-3.5-7 0-15.5 7.5-18l21.2-7.1c7.6-2.5 12.7-9.6 12.7-17.6c0-10.3 8.3-18.6 18.6-18.6H400c8.8 0 16 7.2 16 16s-7.2 16-16 16H379.3c-7.2 0-14.2 2.9-19.3 8l-4.7 4.7c-2.1 2.1-3.3 5-3.3 8c0 6.2 5.1 11.3 11.3 11.3h11.3c6 0 11.8 2.4 16 6.6l6.5 6.5c1.8 1.8 2.8 4.3 2.8 6.8s-1 5-2.8 6.8l-7.5 7.5C386 262 384 266.9 384 272s2 10 5.7 13.7L408 304c10.2 10.2 24.1 16 38.6 16H454c6.5-20.2 10-41.7 10-64c0-111.4-87.6-202.4-197.7-207.7zm172 307.9c-3.7-2.6-8.2-4.1-13-4.1c-6 0-11.8-2.4-16-6.6L396 332c-7.7-7.7-18-12-28.9-12c-9.7 0-19.2-3.5-26.6-9.8L314 287.4c-11.6-9.9-26.4-15.4-41.6-15.4H251.4c-12.6 0-25 3.7-35.5 10.7L188.5 301c-17.8 11.9-28.5 31.9-28.5 53.3v3.2c0 17 6.7 33.3 18.7 45.3l16 16c8.5 8.5 20 13.3 32 13.3H248c13.3 0 24 10.7 24 24c0 2.5 .4 5 1.1 7.3c71.3-5.8 132.5-47.6 165.2-107.2zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM187.3 100.7c-6.2-6.2-16.4-6.2-22.6 0l-32 32c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0l32-32c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faGlobeEurope = faEarthEurope;
  var faCartFlatbedSuitcase = {
    prefix: 'fas',
    iconName: 'cart-flatbed-suitcase',
    icon: [
      640,
      512,
      ['luggage-cart'],
      'f59d',
      'M0 32C0 14.3 14.3 0 32 0H48c44.2 0 80 35.8 80 80V368c0 8.8 7.2 16 16 16H608c17.7 0 32 14.3 32 32s-14.3 32-32 32H541.3c1.8 5 2.7 10.4 2.7 16c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-5.6 1-11 2.7-16H253.3c1.8 5 2.7 10.4 2.7 16c0 26.5-21.5 48-48 48s-48-21.5-48-48c0-5.6 1-11 2.7-16H144c-44.2 0-80-35.8-80-80V80c0-8.8-7.2-16-16-16H32C14.3 64 0 49.7 0 32zM432 96V56c0-4.4-3.6-8-8-8H344c-4.4 0-8 3.6-8 8V96h96zM288 96V56c0-30.9 25.1-56 56-56h80c30.9 0 56 25.1 56 56V96 320H288V96zM512 320V96h16c26.5 0 48 21.5 48 48V272c0 26.5-21.5 48-48 48H512zM240 96h16V320H240c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48z',
    ],
  };
  var faLuggageCart = faCartFlatbedSuitcase;
  var faRectangleXmark = {
    prefix: 'fas',
    iconName: 'rectangle-xmark',
    icon: [
      512,
      512,
      [62164, 'rectangle-times', 'times-rectangle', 'window-close'],
      'f410',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z',
    ],
  };
  var faRectangleTimes = faRectangleXmark;
  var faTimesRectangle = faRectangleXmark;
  var faWindowClose = faRectangleXmark;
  var faBahtSign = {
    prefix: 'fas',
    iconName: 'baht-sign',
    icon: [
      320,
      512,
      [],
      'e0ac',
      'M144 0c-17.7 0-32 14.3-32 32V64H37.6C16.8 64 0 80.8 0 101.6V224v41.7V288 406.3c0 23 18.7 41.7 41.7 41.7H112v32c0 17.7 14.3 32 32 32s32-14.3 32-32V448h32c61.9 0 112-50.1 112-112c0-40.1-21.1-75.3-52.7-95.1C280.3 222.6 288 200.2 288 176c0-61.9-50.1-112-112-112V32c0-17.7-14.3-32-32-32zM112 128v96H64V128h48zm64 96V128c26.5 0 48 21.5 48 48s-21.5 48-48 48zm-64 64v96H64V288h48zm64 96V288h32c26.5 0 48 21.5 48 48s-21.5 48-48 48H176z',
    ],
  };
  var faBookOpen = {
    prefix: 'fas',
    iconName: 'book-open',
    icon: [
      576,
      512,
      [128214, 128366],
      'f518',
      'M249.6 471.5c10.8 3.8 22.4-4.1 22.4-15.5V78.6c0-4.2-1.6-8.4-5-11C247.4 52 202.4 32 144 32C87.5 32 35.1 48.6 9 59.9c-5.6 2.4-9 8-9 14V454.1c0 11.9 12.8 20.2 24.1 16.5C55.6 460.1 105.5 448 144 448c33.9 0 79 14 105.6 23.5zm76.8 0C353 462 398.1 448 432 448c38.5 0 88.4 12.1 119.9 22.6c11.3 3.8 24.1-4.6 24.1-16.5V73.9c0-6.1-3.4-11.6-9-14C540.9 48.6 488.5 32 432 32c-58.4 0-103.4 20-123 35.6c-3.3 2.6-5 6.8-5 11V456c0 11.4 11.7 19.3 22.4 15.5z',
    ],
  };
  var faBookJournalWhills = {
    prefix: 'fas',
    iconName: 'book-journal-whills',
    icon: [
      448,
      512,
      ['journal-whills'],
      'f66a',
      'M0 96C0 43 43 0 96 0H384h32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32zm90.4-234.4l-21.2-21.2c-3 10.1-5.1 20.6-5.1 31.6c0 .2 0 .5 .1 .8s.1 .5 .1 .8L165.2 226c2.5 2.1 3.4 5.8 2.3 8.9c-1.3 3-4.1 5.1-7.5 5.1c-1.9-.1-3.8-.8-5.2-2l-23.6-20.6C142.8 267 186.9 304 240 304s97.3-37 108.9-86.6L325.3 238c-1.4 1.2-3.3 2-5.3 2c-2.2-.1-4.4-1.1-6-2.8c-1.3-1.5-1.9-3.4-2-5.2c.1-2.2 1.1-4.4 2.7-6l37.1-32.5c0-.3 0-.5 .1-.8s.1-.5 .1-.8c0-11-2.1-21.5-5.1-31.6l-21.2 21.2c-3.1 3.1-8.1 3.1-11.3 0s-3.1-8.1 0-11.2l26.4-26.5c-10-20.7-26.1-38-46.4-49.2c17 27.1 11 62.8-14 82.6c14.1 14.6 19.1 35.9 13.1 55.2c-5.9 19.4-22 34.1-41.9 38.3l-1.4-34.3 12.6 8.6c.6 .4 1.5 .6 2.3 .6c1.5 0 2.7-.8 3.5-2s.6-2.8-.1-4L260 225.4l18-3.6c1.8-.4 3.1-2.1 3.1-4s-1.4-3.5-3.1-3.9l-18-3.7 8.5-14.3c.8-1.2 .9-2.9 .1-4.1s-2-2-3.5-2l-.1 0c-.7 .1-1.5 .3-2.1 .7l-14.1 9.6L244 87.9c-.1-2.2-1.9-3.9-4-3.9s-3.9 1.6-4 3.9l-4.6 110.8-12-8.1c-1.5-1.1-3.6-.9-5 .4s-1.6 3.4-.8 5l8.6 14.3-18 3.7c-1.8 .4-3.1 2-3.1 3.9s1.4 3.6 3.1 4l18 3.8-8.6 14.2c-.2 .6-.5 1.4-.5 2c0 1.1 .5 2.1 1.2 3c.8 .6 1.8 1 2.8 1c.7 0 1.6-.2 2.2-.6l10.4-7.1-1.4 32.8c-19.9-4.1-36-18.9-41.9-38.3c-6-19.4-1-40.5 13.1-55.2c-25-19.9-31-55.5-14-82.6c-20.1 11.2-36.4 28.5-46.4 49.2l26.4 26.5c3.1 3.1 3.1 8.1 0 11.2s-8.1 3.1-11.2 0z',
    ],
  };
  var faJournalWhills = faBookJournalWhills;
  var faHandcuffs = {
    prefix: 'fas',
    iconName: 'handcuffs',
    icon: [
      640,
      512,
      [],
      'e4f8',
      'M304 32c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zM192 112c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm-32 16c17.7 0 32 14.3 32 32h8c13.3 0 24 10.7 24 24v16c0 1.7-.2 3.4-.5 5.1C280.3 229.6 320 286.2 320 352c0 88.4-71.6 160-160 160S0 440.4 0 352c0-65.8 39.7-122.4 96.5-146.9c-.4-1.6-.5-3.3-.5-5.1V184c0-13.3 10.7-24 24-24h8c0-17.7 14.3-32 32-32zm0 320c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96s43 96 96 96zm192-96c0-25.9-5.1-50.5-14.4-73.1c16.9-32.9 44.8-59.1 78.9-73.9c-.4-1.6-.5-3.3-.5-5.1V184c0-13.3 10.7-24 24-24h8c0-17.7 14.3-32 32-32s32 14.3 32 32h8c13.3 0 24 10.7 24 24v16c0 1.7-.2 3.4-.5 5.1C600.3 229.6 640 286.2 640 352c0 88.4-71.6 160-160 160c-62 0-115.8-35.3-142.4-86.9c9.3-22.5 14.4-47.2 14.4-73.1zm224 0c0-53-43-96-96-96s-96 43-96 96s43 96 96 96s96-43 96-96zM368 64c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm80 48c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faTriangleExclamation = {
    prefix: 'fas',
    iconName: 'triangle-exclamation',
    icon: [
      512,
      512,
      [9888, 'exclamation-triangle', 'warning'],
      'f071',
      'M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32z',
    ],
  };
  var faExclamationTriangle = faTriangleExclamation;
  var faWarning = faTriangleExclamation;
  var faDatabase = {
    prefix: 'fas',
    iconName: 'database',
    icon: [
      448,
      512,
      [],
      'f1c0',
      'M448 80v48c0 44.2-100.3 80-224 80S0 172.2 0 128V80C0 35.8 100.3 0 224 0S448 35.8 448 80zM393.2 214.7c20.8-7.4 39.9-16.9 54.8-28.6V288c0 44.2-100.3 80-224 80S0 332.2 0 288V186.1c14.9 11.8 34 21.2 54.8 28.6C99.7 230.7 159.5 240 224 240s124.3-9.3 169.2-25.3zM0 346.1c14.9 11.8 34 21.2 54.8 28.6C99.7 390.7 159.5 400 224 400s124.3-9.3 169.2-25.3c20.8-7.4 39.9-16.9 54.8-28.6V432c0 44.2-100.3 80-224 80S0 476.2 0 432V346.1z',
    ],
  };
  var faShare = {
    prefix: 'fas',
    iconName: 'share',
    icon: [
      512,
      512,
      ['arrow-turn-right', 'mail-forward'],
      'f064',
      'M307 34.8c-11.5 5.1-19 16.6-19 29.2v64H176C78.8 128 0 206.8 0 304C0 417.3 81.5 467.9 100.2 478.1c2.5 1.4 5.3 1.9 8.1 1.9c10.9 0 19.7-8.9 19.7-19.7c0-7.5-4.3-14.4-9.8-19.5C108.8 431.9 96 414.4 96 384c0-53 43-96 96-96h96v64c0 12.6 7.4 24.1 19 29.2s25 3 34.4-5.4l160-144c6.7-6.1 10.6-14.7 10.6-23.8s-3.8-17.7-10.6-23.8l-160-144c-9.4-8.5-22.9-10.6-34.4-5.4z',
    ],
  };
  var faArrowTurnRight = faShare;
  var faMailForward = faShare;
  var faBottleDroplet = {
    prefix: 'fas',
    iconName: 'bottle-droplet',
    icon: [
      256,
      512,
      [],
      'e4c4',
      'M64 0C50.7 0 40 10.7 40 24s10.7 24 24 24c4.4 0 8 3.6 8 8v64.9c0 12.2-7.2 23.1-17.2 30.1C21.7 174.1 0 212.5 0 256V448c0 35.3 28.7 64 64 64H192c35.3 0 64-28.7 64-64V256c0-43.5-21.7-81.9-54.8-105c-10-7-17.2-17.9-17.2-30.1V56c0-4.4 3.6-8 8-8c13.3 0 24-10.7 24-24s-10.7-24-24-24l-8 0 0 0 0 0H72l0 0 0 0L64 0zm64 382c-26.5 0-48-20.1-48-45c0-16.8 22.1-48.1 36.3-66.4c6-7.8 17.5-7.8 23.5 0C153.9 288.9 176 320.2 176 337c0 24.9-21.5 45-48 45z',
    ],
  };
  var faMaskFace = {
    prefix: 'fas',
    iconName: 'mask-face',
    icon: [
      640,
      512,
      [],
      'e1d7',
      'M320 64c-27.2 0-53.8 8-76.4 23.1l-37.1 24.8c-15.8 10.5-34.3 16.1-53.3 16.1H144 128 56c-30.9 0-56 25.1-56 56v85c0 55.1 37.5 103.1 90.9 116.4l108 27C233.8 435 275.4 448 320 448s86.2-13 121.1-35.5l108-27C602.5 372.1 640 324.1 640 269V184c0-30.9-25.1-56-56-56H512 496h-9.2c-19 0-37.5-5.6-53.3-16.1L396.4 87.1C373.8 72 347.2 64 320 64zM132.3 346.3l-29.8-7.4C70.5 330.9 48 302.1 48 269V184c0-4.4 3.6-8 8-8H96v48c0 45.1 13.4 87.2 36.3 122.3zm405.1-7.4l-29.8 7.4c23-35.2 36.3-77.2 36.3-122.3V176h40c4.4 0 8 3.6 8 8v85c0 33-22.5 61.8-54.5 69.9zM192 208c0-8.8 7.2-16 16-16H432c8.8 0 16 7.2 16 16s-7.2 16-16 16H208c-8.8 0-16-7.2-16-16zm16 48H432c8.8 0 16 7.2 16 16s-7.2 16-16 16H208c-8.8 0-16-7.2-16-16s7.2-16 16-16zm16 80c0-8.8 7.2-16 16-16H400c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-8.8 0-16-7.2-16-16z',
    ],
  };
  var faHillRockslide = {
    prefix: 'fas',
    iconName: 'hill-rockslide',
    icon: [
      576,
      512,
      [],
      'e508',
      'M252.4 103.8l27 48c2.8 5 8.2 8.2 13.9 8.2l53.3 0c5.8 0 11.1-3.1 13.9-8.2l27-48c2.7-4.9 2.7-10.8 0-15.7l-27-48c-2.8-5-8.2-8.2-13.9-8.2H293.4c-5.8 0-11.1 3.1-13.9 8.2l-27 48c-2.7 4.9-2.7 10.8 0 15.7zM68.3 87C43.1 61.8 0 79.7 0 115.3V432c0 44.2 35.8 80 80 80H396.7c35.6 0 53.5-43.1 28.3-68.3L68.3 87zM504.2 403.6c4.9 2.7 10.8 2.7 15.7 0l48-27c5-2.8 8.2-8.2 8.2-13.9V309.4c0-5.8-3.1-11.1-8.2-13.9l-48-27c-4.9-2.7-10.8-2.7-15.7 0l-48 27c-5 2.8-8.2 8.2-8.2 13.9v53.3c0 5.8 3.1 11.1 8.2 13.9l48 27zM192 64c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zM384 288c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faRightLeft = {
    prefix: 'fas',
    iconName: 'right-left',
    icon: [
      512,
      512,
      ['exchange-alt'],
      'f362',
      'M32 96l320 0V32c0-12.9 7.8-24.6 19.8-29.6s25.7-2.2 34.9 6.9l96 96c6 6 9.4 14.1 9.4 22.6s-3.4 16.6-9.4 22.6l-96 96c-9.2 9.2-22.9 11.9-34.9 6.9s-19.8-16.6-19.8-29.6V160L32 160c-17.7 0-32-14.3-32-32s14.3-32 32-32zM480 352c17.7 0 32 14.3 32 32s-14.3 32-32 32H160v64c0 12.9-7.8 24.6-19.8 29.6s-25.7 2.2-34.9-6.9l-96-96c-6-6-9.4-14.1-9.4-22.6s3.4-16.6 9.4-22.6l96-96c9.2-9.2 22.9-11.9 34.9-6.9s19.8 16.6 19.8 29.6l0 64H480z',
    ],
  };
  var faExchangeAlt = faRightLeft;
  var faPaperPlane = {
    prefix: 'fas',
    iconName: 'paper-plane',
    icon: [
      512,
      512,
      [61913],
      'f1d8',
      'M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L277.3 424.9l-40.1 74.5c-5.2 9.7-16.3 14.6-27 11.9S192 499 192 488V392c0-5.3 1.8-10.5 5.1-14.7L362.4 164.7c2.5-7.1-6.5-14.3-13-8.4L170.4 318.2l-32 28.9 0 0c-9.2 8.3-22.3 10.6-33.8 5.8l-85-35.4C8.4 312.8 .8 302.2 .1 290s5.5-23.7 16.1-29.8l448-256c10.7-6.1 23.9-5.5 34 1.4z',
    ],
  };
  var faRoadCircleExclamation = {
    prefix: 'fas',
    iconName: 'road-circle-exclamation',
    icon: [
      640,
      512,
      [],
      'e565',
      'M213.2 32H288V96c0 17.7 14.3 32 32 32s32-14.3 32-32V32h74.8c27.1 0 51.3 17.1 60.3 42.6l42.7 120.6c-10.9-2.1-22.2-3.2-33.8-3.2c-59.5 0-112.1 29.6-144 74.8V224c0-17.7-14.3-32-32-32s-32 14.3-32 32v64c0 17.7 14.3 32 32 32c2.3 0 4.6-.3 6.8-.7c-4.5 15.5-6.8 31.8-6.8 48.7c0 5.4 .2 10.7 .7 16l-.7 0c-17.7 0-32 14.3-32 32v64H86.6C56.5 480 32 455.5 32 425.4c0-6.2 1.1-12.4 3.1-18.2L152.9 74.6C162 49.1 186.1 32 213.2 32zM496 512c-79.5 0-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144s-64.5 144-144 144zm0-48c13.3 0 24-10.7 24-24s-10.7-24-24-24s-24 10.7-24 24s10.7 24 24 24zm0-192c-8.8 0-16 7.2-16 16v80c0 8.8 7.2 16 16 16s16-7.2 16-16V288c0-8.8-7.2-16-16-16z',
    ],
  };
  var faDungeon = {
    prefix: 'fas',
    iconName: 'dungeon',
    icon: [
      512,
      512,
      [],
      'f6d9',
      'M336.6 156.5c1.3 1.1 2.7 2.2 3.9 3.3c9.3 8.2 23 10.5 33.4 3.6l67.6-45.1c11.4-7.6 14.2-23.2 5.1-33.4C430 66.6 410.9 50.6 389.7 37.6c-11.9-7.3-26.9-1.4-32.1 11.6l-30.5 76.2c-4.5 11.1 .2 23.6 9.5 31.2zM328 36.8c5.1-12.8-1.6-27.4-15-30.5C294.7 2.2 275.6 0 256 0s-38.7 2.2-57 6.4C185.5 9.4 178.8 24 184 36.8l30.3 75.8c4.5 11.3 16.8 17.2 29 16c4.2-.4 8.4-.6 12.7-.6s8.6 .2 12.7 .6c12.1 1.2 24.4-4.7 29-16L328 36.8zM65.5 85c-9.1 10.2-6.3 25.8 5.1 33.4l67.6 45.1c10.3 6.9 24.1 4.6 33.4-3.6c1.3-1.1 2.6-2.3 4-3.3c9.3-7.5 13.9-20.1 9.5-31.2L154.4 49.2c-5.2-12.9-20.3-18.8-32.1-11.6C101.1 50.6 82 66.6 65.5 85zm314 137.1c.9 3.3 1.7 6.6 2.3 10c2.5 13 13 23.9 26.2 23.9h80c13.3 0 24.1-10.8 22.9-24c-2.5-27.2-9.3-53.2-19.7-77.3c-5.5-12.9-21.4-16.6-33.1-8.9l-68.6 45.7c-9.8 6.5-13.2 19.2-10 30.5zM53.9 145.8c-11.6-7.8-27.6-4-33.1 8.9C10.4 178.8 3.6 204.8 1.1 232c-1.2 13.2 9.6 24 22.9 24h80c13.3 0 23.8-10.8 26.2-23.9c.6-3.4 1.4-6.7 2.3-10c3.1-11.4-.2-24-10-30.5L53.9 145.8zM104 288H24c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V312c0-13.3-10.7-24-24-24zm304 0c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V312c0-13.3-10.7-24-24-24H408zM24 416c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V440c0-13.3-10.7-24-24-24H24zm384 0c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h80c13.3 0 24-10.7 24-24V440c0-13.3-10.7-24-24-24H408zM272 192c0-8.8-7.2-16-16-16s-16 7.2-16 16V464c0 8.8 7.2 16 16 16s16-7.2 16-16V192zm-64 32c0-8.8-7.2-16-16-16s-16 7.2-16 16V464c0 8.8 7.2 16 16 16s16-7.2 16-16V224zm128 0c0-8.8-7.2-16-16-16s-16 7.2-16 16V464c0 8.8 7.2 16 16 16s16-7.2 16-16V224z',
    ],
  };
  var faAlignRight = {
    prefix: 'fas',
    iconName: 'align-right',
    icon: [
      448,
      512,
      [],
      'f038',
      'M448 64c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zm0 256c0 17.7-14.3 32-32 32H192c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32zM0 192c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z',
    ],
  };
  var faMoneyBill1Wave = {
    prefix: 'fas',
    iconName: 'money-bill-1-wave',
    icon: [
      576,
      512,
      ['money-bill-wave-alt'],
      'f53b',
      'M0 112.5V422.3c0 18 10.1 35 27 41.3c87 32.5 174 10.3 261-11.9c79.8-20.3 159.6-40.7 239.3-18.9c23 6.3 48.7-9.5 48.7-33.4V89.7c0-18-10.1-35-27-41.3C462 15.9 375 38.1 288 60.3C208.2 80.6 128.4 100.9 48.7 79.1C25.6 72.8 0 88.6 0 112.5zM128 416H64V352c35.3 0 64 28.7 64 64zM64 224V160h64c0 35.3-28.7 64-64 64zM448 352c0-35.3 28.7-64 64-64v64H448zm64-192c-35.3 0-64-28.7-64-64h64v64zM384 256c0 61.9-43 112-96 112s-96-50.1-96-112s43-112 96-112s96 50.1 96 112zM252 208c0 9.7 6.9 17.7 16 19.6V276h-4c-11 0-20 9-20 20s9 20 20 20h24 24c11 0 20-9 20-20s-9-20-20-20h-4V208c0-11-9-20-20-20H272c-11 0-20 9-20 20z',
    ],
  };
  var faMoneyBillWaveAlt = faMoneyBill1Wave;
  var faLifeRing = {
    prefix: 'fas',
    iconName: 'life-ring',
    icon: [
      512,
      512,
      [],
      'f1cd',
      'M367.2 412.5C335.9 434.9 297.5 448 256 448s-79.9-13.1-111.2-35.5l58-58c15.8 8.6 34 13.5 53.3 13.5s37.4-4.9 53.3-13.5l58 58zm91 .5c33.7-43.3 53.8-97.8 53.8-157s-20.1-113.6-53.8-157l12.4-12.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L413 53.8C369.6 20.1 315.2 0 256 0S142.4 20.1 99 53.8L86.6 41.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L53.8 99C20.1 142.4 0 196.8 0 256s20.1 113.6 53.8 157L41.4 425.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L99 458.2c43.3 33.7 97.8 53.8 157 53.8s113.6-20.1 157-53.8l12.4 12.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L458.2 413zm-45.7-45.7l-58-58c8.6-15.8 13.5-34 13.5-53.3s-4.9-37.4-13.5-53.3l58-58C434.9 176.1 448 214.5 448 256s-13.1 79.9-35.5 111.2zM367.2 99.5l-58 58c-15.8-8.6-34-13.5-53.3-13.5s-37.4 4.9-53.3 13.5l-58-58C176.1 77.1 214.5 64 256 64s79.9 13.1 111.2 35.5zM157.5 309.3l-58 58C77.1 335.9 64 297.5 64 256s13.1-79.9 35.5-111.2l58 58c-8.6 15.8-13.5 34-13.5 53.3s4.9 37.4 13.5 53.3zM304 256c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48z',
    ],
  };
  var faHands = {
    prefix: 'fas',
    iconName: 'hands',
    icon: [
      512,
      512,
      ['sign-language', 'signing'],
      'f2a7',
      'M154.9 162c.3 .7 .7 1.5 1.1 2.2l17.8 30.9c11.1-12.6 27.4-19.8 44.4-19.1l-20.7-35.8c-6.6-11.5-21.3-15.4-32.8-8.8c-10.8 6.2-14.9 19.5-9.9 30.6zm173.6 47C399.7 231.7 448 297.8 448 372.5c0 1.5 0 3-.1 4.5c39.7-25.6 64.1-69.7 64.1-117.4V136c0-13.3-10.7-24-24-24s-24 10.7-24 24l0 81.7L347.8 16.5C341.2 5 326.5 1.1 315.1 7.7s-15.4 21.3-8.8 32.8l64 110.9c2.2 3.8 .9 8.7-2.9 10.9s-8.7 .9-10.9-2.9l-80-138.6C269.8 9.3 255.1 5.4 243.6 12s-15.4 21.3-8.8 32.8l80 138.6c2.2 3.8 .9 8.7-2.9 10.9s-8.7 .9-10.9-2.9L237 80.5c-6.6-11.5-21.3-15.4-32.8-8.8s-15.4 21.3-8.8 32.8l44 76.2L328.5 209zM64 488c0 12.4 9.4 22.6 21.5 23.9c.8 .1 1.6 .1 2.5 .1H288.7 296c66.3 0 120-53.7 120-120c0-1.2 0-2.4-.1-3.6c0-1.2 .1-2.5 .1-3.7c0-68-44-128.2-108.9-148.9l-83.9-26.7c-12.6-4-26.1 3-30.1 15.6s3 26.1 15.6 30.1L262.6 272H56c-13.3 0-24 10.7-24 24s10.7 24 24 24H184c4.4 0 8 3.6 8 8s-3.6 8-8 8H24c-13.3 0-24 10.7-24 24s10.7 24 24 24H184c4.4 0 8 3.6 8 8s-3.6 8-8 8H56c-13.3 0-24 10.7-24 24s10.7 24 24 24H184c4.4 0 8 3.6 8 8s-3.6 8-8 8H88c-13.3 0-24 10.7-24 24z',
    ],
  };
  var faSignLanguage = faHands;
  var faSigning = faHands;
  var faCalendarDay = {
    prefix: 'fas',
    iconName: 'calendar-day',
    icon: [
      448,
      512,
      [],
      'f783',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zm80 64c-8.8 0-16 7.2-16 16v96c0 8.8 7.2 16 16 16h96c8.8 0 16-7.2 16-16V272c0-8.8-7.2-16-16-16H80z',
    ],
  };
  var faWaterLadder = {
    prefix: 'fas',
    iconName: 'water-ladder',
    icon: [
      576,
      512,
      ['ladder-water', 'swimming-pool'],
      'f5c5',
      'M128 127.7C128 74.9 170.9 32 223.7 32c48.3 0 89 36 95 83.9l1 8.2c2.2 17.5-10.2 33.5-27.8 35.7s-33.5-10.2-35.7-27.8l-1-8.2c-2-15.9-15.5-27.8-31.5-27.8c-17.5 0-31.7 14.2-31.7 31.7V224H384V127.7C384 74.9 426.9 32 479.7 32c48.3 0 89 36 95 83.9l1 8.2c2.2 17.5-10.2 33.5-27.8 35.7s-33.5-10.2-35.7-27.8l-1-8.2c-2-15.9-15.5-27.8-31.5-27.8c-17.5 0-31.7 14.2-31.7 31.7V361c-1.6 1-3.3 2-4.8 3.1c-18 12.4-40.1 20.3-59.2 20.3h0V288H192v96.5c-19 0-41.2-7.9-59.1-20.3c-1.6-1.1-3.2-2.2-4.9-3.1V127.7zM306.5 389.9C329 405.4 356.5 416 384 416c26.9 0 55.4-10.8 77.4-26.1l0 0c11.9-8.5 28.1-7.8 39.2 1.7c14.4 11.9 32.5 21 50.6 25.2c17.2 4 27.9 21.2 23.9 38.4s-21.2 27.9-38.4 23.9c-24.5-5.7-44.9-16.5-58.2-25C449.5 469.7 417 480 384 480c-31.9 0-60.6-9.9-80.4-18.9c-5.8-2.7-11.1-5.3-15.6-7.7c-4.5 2.4-9.7 5.1-15.6 7.7c-19.8 9-48.5 18.9-80.4 18.9c-33 0-65.5-10.3-94.5-25.8c-13.4 8.4-33.7 19.3-58.2 25c-17.2 4-34.4-6.7-38.4-23.9s6.7-34.4 23.9-38.4c18.1-4.2 36.2-13.3 50.6-25.2c11.1-9.4 27.3-10.1 39.2-1.7l0 0C136.7 405.2 165.1 416 192 416c27.5 0 55-10.6 77.5-26.1c11.1-7.9 25.9-7.9 37 0z',
    ],
  };
  var faLadderWater = faWaterLadder;
  var faSwimmingPool = faWaterLadder;
  var faArrowsUpDown = {
    prefix: 'fas',
    iconName: 'arrows-up-down',
    icon: [
      320,
      512,
      ['arrows-v'],
      'f07d',
      'M182.6 9.4c-12.5-12.5-32.8-12.5-45.3 0l-96 96c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L128 109.3V402.7L86.6 361.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l96 96c12.5 12.5 32.8 12.5 45.3 0l96-96c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 402.7V109.3l41.4 41.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-96-96z',
    ],
  };
  var faArrowsV = faArrowsUpDown;
  var faFaceGrimace = {
    prefix: 'fas',
    iconName: 'face-grimace',
    icon: [
      512,
      512,
      [128556, 'grimace'],
      'f57f',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zm96-112h-8V360l55.3 0c-3.8 22.7-23.6 40-47.3 40zm47.3-56L344 344V304h8c23.8 0 43.5 17.3 47.3 40zM328 344H264V304h64v40zm0 56H264V360h64v40zm-80-96v40l-64 0V304h64zm0 56v40H184V360l64 0zm-80-16H112.7c3.8-22.7 23.6-40 47.3-40h8v40zm0 56h-8c-23.8 0-43.5-17.3-47.3-40H168v40zm40.4-192c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faGrimace = faFaceGrimace;
  var faWheelchairMove = {
    prefix: 'fas',
    iconName: 'wheelchair-move',
    icon: [
      448,
      512,
      ['wheelchair-alt'],
      'e2ce',
      'M416 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM204.5 121.3c-5.4-2.5-11.7-1.9-16.4 1.7l-40.9 30.7c-14.1 10.6-34.2 7.7-44.8-6.4s-7.7-34.2 6.4-44.8l40.9-30.7c23.7-17.8 55.3-21 82.1-8.4l90.4 42.5c29.1 13.7 36.8 51.6 15.2 75.5L299.1 224h97.4c30.3 0 53 27.7 47.1 57.4L415.4 422.3c-3.5 17.3-20.3 28.6-37.7 25.1s-28.6-20.3-25.1-37.7L377 288H306.7c8.6 19.6 13.3 41.2 13.3 64c0 88.4-71.6 160-160 160S0 440.4 0 352s71.6-160 160-160c11.1 0 22 1.1 32.4 3.3l54.2-54.2-42.1-19.8zM160 448c53 0 96-43 96-96s-43-96-96-96s-96 43-96 96s43 96 96 96z',
    ],
  };
  var faWheelchairAlt = faWheelchairMove;
  var faTurnDown = {
    prefix: 'fas',
    iconName: 'turn-down',
    icon: [
      384,
      512,
      [10549, 'level-down-alt'],
      'f3be',
      'M178.3 506.3L40.3 368.3C35 363 32 355.8 32 348.3C32 332.7 44.7 320 60.3 320H144V112c0-8.8-7.2-16-16-16H32C14.3 96 0 81.7 0 64V32C0 14.3 14.3 0 32 0h96c61.9 0 112 50.1 112 112V320h83.7c15.6 0 28.3 12.7 28.3 28.3c0 7.5-3 14.7-8.3 20L205.7 506.3C202 510 197.1 512 192 512s-10-2-13.7-5.7z',
    ],
  };
  var faLevelDownAlt = faTurnDown;
  var faPersonWalkingArrowRight = {
    prefix: 'fas',
    iconName: 'person-walking-arrow-right',
    icon: [
      640,
      512,
      [],
      'e552',
      'M208 96c26.5 0 48-21.5 48-48s-21.5-48-48-48s-48 21.5-48 48s21.5 48 48 48zM123.7 200.5c1-.4 1.9-.8 2.9-1.2l-16.9 63.5c-5.6 21.1-.1 43.6 14.7 59.7l70.7 77.1 22 88.1c4.3 17.1 21.7 27.6 38.8 23.3s27.6-21.7 23.3-38.8l-23-92.1c-1.9-7.8-5.8-14.9-11.2-20.8l-49.5-54 19.3-65.5 9.6 23c4.4 10.6 12.5 19.3 22.8 24.5l26.7 13.3c15.8 7.9 35 1.5 42.9-14.3s1.5-35-14.3-42.9L281 232.7l-15.3-36.8C248.5 154.8 208.3 128 163.7 128c-22.8 0-45.3 4.8-66.1 14l-8 3.5c-32.9 14.6-58.1 42.4-69.4 76.5l-2.6 7.8c-5.6 16.8 3.5 34.9 20.2 40.5s34.9-3.5 40.5-20.2l2.6-7.8c5.7-17.1 18.3-30.9 34.7-38.2l8-3.5zm-30 135.1L68.7 398 9.4 457.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L116.3 441c4.6-4.6 8.2-10.1 10.6-16.1l14.5-36.2-40.7-44.4c-2.5-2.7-4.8-5.6-7-8.6zM550.6 153.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L530.7 224H384c-17.7 0-32 14.3-32 32s14.3 32 32 32H530.7l-25.4 25.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l80-80c12.5-12.5 12.5-32.8 0-45.3l-80-80z',
    ],
  };
  var faSquareEnvelope = {
    prefix: 'fas',
    iconName: 'square-envelope',
    icon: [
      448,
      512,
      ['envelope-square'],
      'f199',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM218 271.7L64.2 172.4C66 156.4 79.5 144 96 144H352c16.5 0 30 12.4 31.8 28.4L230 271.7c-1.8 1.2-3.9 1.8-6 1.8s-4.2-.6-6-1.8zm29.4 26.9L384 210.4V336c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V210.4l136.6 88.2c7 4.5 15.1 6.9 23.4 6.9s16.4-2.4 23.4-6.9z',
    ],
  };
  var faEnvelopeSquare = faSquareEnvelope;
  var faDice = {
    prefix: 'fas',
    iconName: 'dice',
    icon: [
      640,
      512,
      [127922],
      'f522',
      'M252.3 11.7c-15.6-15.6-40.9-15.6-56.6 0l-184 184c-15.6 15.6-15.6 40.9 0 56.6l184 184c15.6 15.6 40.9 15.6 56.6 0l184-184c15.6-15.6 15.6-40.9 0-56.6l-184-184zM248 224c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zM96 248c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm128 80c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm128-80c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zM224 72c13.3 0 24 10.7 24 24s-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24zm96 392c0 26.5 21.5 48 48 48H592c26.5 0 48-21.5 48-48V240c0-26.5-21.5-48-48-48H472.5c13.4 26.9 8.8 60.5-13.6 82.9L320 413.8V464zm160-88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faBowlingBall = {
    prefix: 'fas',
    iconName: 'bowling-ball',
    icon: [
      512,
      512,
      [],
      'f436',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM240 144c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32zm32 64c0 17.7-14.3 32-32 32s-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32zm-128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faBrain = {
    prefix: 'fas',
    iconName: 'brain',
    icon: [
      512,
      512,
      [129504],
      'f5dc',
      'M184 0c30.9 0 56 25.1 56 56V456c0 30.9-25.1 56-56 56c-28.9 0-52.7-21.9-55.7-50.1c-5.2 1.4-10.7 2.1-16.3 2.1c-35.3 0-64-28.7-64-64c0-7.4 1.3-14.6 3.6-21.2C21.4 367.4 0 338.2 0 304c0-31.9 18.7-59.5 45.8-72.3C37.1 220.8 32 207 32 192c0-30.7 21.6-56.3 50.4-62.6C80.8 123.9 80 118 80 112c0-29.9 20.6-55.1 48.3-62.1C131.3 21.9 155.1 0 184 0zM328 0c28.9 0 52.6 21.9 55.7 49.9c27.8 7 48.3 32.1 48.3 62.1c0 6-.8 11.9-2.4 17.4c28.8 6.2 50.4 31.9 50.4 62.6c0 15-5.1 28.8-13.8 39.7C493.3 244.5 512 272.1 512 304c0 34.2-21.4 63.4-51.6 74.8c2.3 6.6 3.6 13.8 3.6 21.2c0 35.3-28.7 64-64 64c-5.6 0-11.1-.7-16.3-2.1c-3 28.2-26.8 50.1-55.7 50.1c-30.9 0-56-25.1-56-56V56c0-30.9 25.1-56 56-56z',
    ],
  };
  var faBandage = {
    prefix: 'fas',
    iconName: 'bandage',
    icon: [
      640,
      512,
      [129657, 'band-aid'],
      'f462',
      'M480 416h96c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64H480V416zM448 96H192V416H448V96zM64 96C28.7 96 0 124.7 0 160V352c0 35.3 28.7 64 64 64h96V96H64zM296 208c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm72 24c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24zm-72 72c0 13.3-10.7 24-24 24s-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24zm72 24c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faBandAid = faBandage;
  var faCalendarMinus = {
    prefix: 'fas',
    iconName: 'calendar-minus',
    icon: [
      448,
      512,
      [],
      'f272',
      'M128 0c17.7 0 32 14.3 32 32V64H288V32c0-17.7 14.3-32 32-32s32 14.3 32 32V64h48c26.5 0 48 21.5 48 48v48H0V112C0 85.5 21.5 64 48 64H96V32c0-17.7 14.3-32 32-32zM0 192H448V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V192zM312 376c13.3 0 24-10.7 24-24s-10.7-24-24-24H136c-13.3 0-24 10.7-24 24s10.7 24 24 24H312z',
    ],
  };
  var faCircleXmark = {
    prefix: 'fas',
    iconName: 'circle-xmark',
    icon: [
      512,
      512,
      [61532, 'times-circle', 'xmark-circle'],
      'f057',
      'M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z',
    ],
  };
  var faTimesCircle = faCircleXmark;
  var faXmarkCircle = faCircleXmark;
  var faGifts = {
    prefix: 'fas',
    iconName: 'gifts',
    icon: [
      640,
      512,
      [],
      'f79c',
      'M200.6 32C205 19.5 198.5 5.8 186 1.4S159.8 3.5 155.4 16L144.7 46.2l-9.9-29.8C130.6 3.8 117-3 104.4 1.2S85 19 89.2 31.6l8.3 25-27.4-20c-10.7-7.8-25.7-5.4-33.5 5.3s-5.4 25.7 5.3 33.5L70.2 96H48C21.5 96 0 117.5 0 144V464c0 26.5 21.5 48 48 48H200.6c-5.4-9.4-8.6-20.3-8.6-32V256c0-29.9 20.5-55 48.2-62c1.8-31 17.1-58.2 40.1-76.1C271.7 104.7 256.9 96 240 96H217.8l28.3-20.6c10.7-7.8 13.1-22.8 5.3-33.5s-22.8-13.1-33.5-5.3L192.5 55.1 200.6 32zM363.5 185.5L393.1 224H344c-13.3 0-24-10.7-24-24c0-13.1 10.8-24 24.2-24c7.6 0 14.7 3.5 19.3 9.5zM272 200c0 8.4 1.4 16.5 4.1 24H272c-26.5 0-48 21.5-48 48v80H416V256h32v96H640V272c0-26.5-21.5-48-48-48h-4.1c2.7-7.5 4.1-15.6 4.1-24c0-39.9-32.5-72-72.2-72c-22.4 0-43.6 10.4-57.3 28.2L432 195.8l-30.5-39.6c-13.7-17.8-35-28.2-57.3-28.2c-39.7 0-72.2 32.1-72.2 72zM224 464c0 26.5 21.5 48 48 48H416V384H224v80zm224 48H592c26.5 0 48-21.5 48-48V384H448V512zm96-312c0 13.3-10.7 24-24 24H470.9l29.6-38.5c4.6-5.9 11.7-9.5 19.3-9.5c13.4 0 24.2 10.9 24.2 24z',
    ],
  };
  var faHotel = {
    prefix: 'fas',
    iconName: 'hotel',
    icon: [
      512,
      512,
      [127976],
      'f594',
      'M32 0C14.3 0 0 14.3 0 32S14.3 64 32 64V448c-17.7 0-32 14.3-32 32s14.3 32 32 32H208V448h96v64H480c17.7 0 32-14.3 32-32s-14.3-32-32-32V64c17.7 0 32-14.3 32-32s-14.3-32-32-32H32zm80 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H112c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zm112 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V112zM368 96h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V112c0-8.8 7.2-16 16-16zM96 208c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H112c-8.8 0-16-7.2-16-16V208zm144-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H240c-8.8 0-16-7.2-16-16V208c0-8.8 7.2-16 16-16zm112 16c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v32c0 8.8-7.2 16-16 16H368c-8.8 0-16-7.2-16-16V208zm-3 152.2c3.3 12.8-7.8 23.8-21 23.8H184c-13.3 0-24.3-10.9-21-23.8c10.6-41.5 48.2-72.2 93-72.2s82.5 30.7 93 72.2z',
    ],
  };
  var faEarthAsia = {
    prefix: 'fas',
    iconName: 'earth-asia',
    icon: [
      512,
      512,
      [127759, 'globe-asia'],
      'f57e',
      'M51.7 295.1l31.7 6.3c7.9 1.6 16-.9 21.7-6.6l15.4-15.4c11.6-11.6 31.1-8.4 38.4 6.2l9.3 18.5c4.8 9.6 14.6 15.7 25.4 15.7c15.2 0 26.1-14.6 21.7-29.2l-6-19.9c-4.6-15.4 6.9-30.9 23-30.9h2.3c13.4 0 25.9-6.7 33.3-17.8l10.7-16.1c5.6-8.5 5.3-19.6-.8-27.7l-16.1-21.5c-10.3-13.7-3.3-33.5 13.4-37.7l17-4.3c7.5-1.9 13.6-7.2 16.5-14.4l16.4-40.9C303.4 52.1 280.2 48 256 48C141.1 48 48 141.1 48 256c0 13.4 1.3 26.5 3.7 39.1zm407.7 4.6c-3-.3-6-.1-9 .8l-15.8 4.4c-6.7 1.9-13.8-.9-17.5-6.7l-2-3.1c-6-9.4-16.4-15.1-27.6-15.1s-21.6 5.7-27.6 15.1l-6.1 9.5c-1.4 2.2-3.4 4.1-5.7 5.3L312 330.1c-18.1 10.1-25.5 32.4-17 51.3l5.5 12.4c8.6 19.2 30.7 28.5 50.5 21.1l2.6-1c10-3.7 21.3-2.2 29.9 4.1l1.5 1.1c37.2-29.5 64.1-71.4 74.4-119.5zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM144.5 348.1c-2.1 8.6 3.1 17.3 11.6 19.4l32 8c8.6 2.1 17.3-3.1 19.4-11.6s-3.1-17.3-11.6-19.4l-32-8c-8.6-2.1-17.3 3.1-19.4 11.6zm92-20c-2.1 8.6 3.1 17.3 11.6 19.4s17.3-3.1 19.4-11.6l8-32c2.1-8.6-3.1-17.3-11.6-19.4s-17.3 3.1-19.4 11.6l-8 32zM343.2 113.7c-7.9-4-17.5-.7-21.5 7.2l-16 32c-4 7.9-.7 17.5 7.2 21.5s17.5 .7 21.5-7.2l16-32c4-7.9 .7-17.5-7.2-21.5z',
    ],
  };
  var faGlobeAsia = faEarthAsia;
  var faIdCardClip = {
    prefix: 'fas',
    iconName: 'id-card-clip',
    icon: [
      576,
      512,
      ['id-card-alt'],
      'f47f',
      'M256 0h64c17.7 0 32 14.3 32 32V96c0 17.7-14.3 32-32 32H256c-17.7 0-32-14.3-32-32V32c0-17.7 14.3-32 32-32zM64 64H192v48c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48V64H512c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128C0 92.7 28.7 64 64 64zM176 437.3c0 5.9 4.8 10.7 10.7 10.7H389.3c5.9 0 10.7-4.8 10.7-10.7c0-29.5-23.9-53.3-53.3-53.3H229.3c-29.5 0-53.3 23.9-53.3 53.3zM288 352c35.3 0 64-28.7 64-64s-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64z',
    ],
  };
  var faIdCardAlt = faIdCardClip;
  var faMagnifyingGlassPlus = {
    prefix: 'fas',
    iconName: 'magnifying-glass-plus',
    icon: [
      512,
      512,
      ['search-plus'],
      'f00e',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM184 296c0 13.3 10.7 24 24 24s24-10.7 24-24V232h64c13.3 0 24-10.7 24-24s-10.7-24-24-24H232V120c0-13.3-10.7-24-24-24s-24 10.7-24 24v64H120c-13.3 0-24 10.7-24 24s10.7 24 24 24h64v64z',
    ],
  };
  var faSearchPlus = faMagnifyingGlassPlus;
  var faThumbsUp = {
    prefix: 'fas',
    iconName: 'thumbs-up',
    icon: [
      512,
      512,
      [128077, 61575],
      'f164',
      'M313.4 32.9c26 5.2 42.9 30.5 37.7 56.5l-2.3 11.4c-5.3 26.7-15.1 52.1-28.8 75.2H464c26.5 0 48 21.5 48 48c0 25.3-19.5 46-44.3 47.9c7.7 8.5 12.3 19.8 12.3 32.1c0 23.4-16.8 42.9-38.9 47.1c4.4 7.2 6.9 15.8 6.9 24.9c0 21.3-13.9 39.4-33.1 45.6c.7 3.3 1.1 6.8 1.1 10.4c0 26.5-21.5 48-48 48H294.5c-19 0-37.5-5.6-53.3-16.1l-38.5-25.7C176 420.4 160 390.4 160 358.3V320 272 247.1c0-29.2 13.3-56.7 36-75l7.4-5.9c26.5-21.2 44.6-51 51.2-84.2l2.3-11.4c5.2-26 30.5-42.9 56.5-37.7zM32 192H96c17.7 0 32 14.3 32 32V448c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32z',
    ],
  };
  var faUserClock = {
    prefix: 'fas',
    iconName: 'user-clock',
    icon: [
      640,
      512,
      [],
      'f4fd',
      'M224 256c-70.7 0-128-57.3-128-128S153.3 0 224 0s128 57.3 128 128s-57.3 128-128 128zm-45.7 48h91.4c20.6 0 40.4 3.5 58.8 9.9C323 331 320 349.1 320 368c0 59.5 29.5 112.1 74.8 144H29.7C13.3 512 0 498.7 0 482.3C0 383.8 79.8 304 178.3 304zM640 368c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zM496 288c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h48c8.8 0 16-7.2 16-16s-7.2-16-16-16H512V304c0-8.8-7.2-16-16-16z',
    ],
  };
  var faHandDots = {
    prefix: 'fas',
    iconName: 'hand-dots',
    icon: [
      512,
      512,
      ['allergies'],
      'f461',
      'M288 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V336c0 1.5 0 3.1 .1 4.6L67.6 283c-16-15.2-41.3-14.6-56.6 1.4s-14.6 41.3 1.4 56.6L124.8 448c43.1 41.1 100.4 64 160 64H304c97.2 0 176-78.8 176-176V128c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V64c0-17.7-14.3-32-32-32s-32 14.3-32 32V240c0 8.8-7.2 16-16 16s-16-7.2-16-16V32zM272 336c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm48 48c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm80-48c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zM352 448c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm-80-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zm-80-16c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faAllergies = faHandDots;
  var faFileInvoice = {
    prefix: 'fas',
    iconName: 'file-invoice',
    icon: [
      384,
      512,
      [],
      'f570',
      'M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM80 64h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16s7.2-16 16-16zm0 64h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H80c-8.8 0-16-7.2-16-16s7.2-16 16-16zm16 96H288c17.7 0 32 14.3 32 32v64c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V256c0-17.7 14.3-32 32-32zm0 32v64H288V256H96zM240 416h64c8.8 0 16 7.2 16 16s-7.2 16-16 16H240c-8.8 0-16-7.2-16-16s7.2-16 16-16z',
    ],
  };
  var faWindowMinimize = {
    prefix: 'fas',
    iconName: 'window-minimize',
    icon: [
      512,
      512,
      [128469],
      'f2d1',
      'M32 416c-17.7 0-32 14.3-32 32s14.3 32 32 32H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H32z',
    ],
  };
  var faMugSaucer = {
    prefix: 'fas',
    iconName: 'mug-saucer',
    icon: [
      640,
      512,
      ['coffee'],
      'f0f4',
      'M96 64c0-17.7 14.3-32 32-32H448h64c70.7 0 128 57.3 128 128s-57.3 128-128 128H480c0 53-43 96-96 96H192c-53 0-96-43-96-96V64zM480 224h32c35.3 0 64-28.7 64-64s-28.7-64-64-64H480V224zM32 416H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32z',
    ],
  };
  var faCoffee = faMugSaucer;
  var faBrush = {
    prefix: 'fas',
    iconName: 'brush',
    icon: [
      384,
      512,
      [],
      'f55d',
      'M192 64L160 0H128L96 64 64 0H48C21.5 0 0 21.5 0 48V256H384V48c0-26.5-21.5-48-48-48H224L192 64zM0 288v32c0 35.3 28.7 64 64 64h64v64c0 35.3 28.7 64 64 64s64-28.7 64-64V384h64c35.3 0 64-28.7 64-64V288H0zM192 464c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16z',
    ],
  };
  var faMask = {
    prefix: 'fas',
    iconName: 'mask',
    icon: [
      576,
      512,
      [],
      'f6fa',
      'M288 64C64 64 0 160 0 272S80 448 176 448h8.4c24.2 0 46.4-13.7 57.2-35.4l23.2-46.3c4.4-8.8 13.3-14.3 23.2-14.3s18.8 5.5 23.2 14.3l23.2 46.3c10.8 21.7 33 35.4 57.2 35.4H400c96 0 176-64 176-176s-64-208-288-208zM224 256c0 35.3-28.7 64-64 64s-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64zm192 64c-35.3 0-64-28.7-64-64s28.7-64 64-64s64 28.7 64 64s-28.7 64-64 64z',
    ],
  };
  var faMagnifyingGlassMinus = {
    prefix: 'fas',
    iconName: 'magnifying-glass-minus',
    icon: [
      512,
      512,
      ['search-minus'],
      'f010',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM136 184c-13.3 0-24 10.7-24 24s10.7 24 24 24H280c13.3 0 24-10.7 24-24s-10.7-24-24-24H136z',
    ],
  };
  var faSearchMinus = faMagnifyingGlassMinus;
  var faRulerVertical = {
    prefix: 'fas',
    iconName: 'ruler-vertical',
    icon: [
      256,
      512,
      [],
      'f548',
      'M0 48C0 21.5 21.5 0 48 0H208c26.5 0 48 21.5 48 48V96H176c-8.8 0-16 7.2-16 16s7.2 16 16 16h80v64H176c-8.8 0-16 7.2-16 16s7.2 16 16 16h80v64H176c-8.8 0-16 7.2-16 16s7.2 16 16 16h80v64H176c-8.8 0-16 7.2-16 16s7.2 16 16 16h80v48c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V48z',
    ],
  };
  var faUserLarge = {
    prefix: 'fas',
    iconName: 'user-large',
    icon: [
      512,
      512,
      ['user-alt'],
      'f406',
      'M256 288c79.5 0 144-64.5 144-144S335.5 0 256 0S112 64.5 112 144s64.5 144 144 144zm-94.7 32C72.2 320 0 392.2 0 481.3c0 17 13.8 30.7 30.7 30.7H481.3c17 0 30.7-13.8 30.7-30.7C512 392.2 439.8 320 350.7 320H161.3z',
    ],
  };
  var faUserAlt = faUserLarge;
  var faTrainTram = {
    prefix: 'fas',
    iconName: 'train-tram',
    icon: [
      448,
      512,
      [128650],
      'e5b4',
      'M86.8 48c-12.2 0-23.6 5.5-31.2 15L42.7 79C34.5 89.3 19.4 91 9 82.7S-3 59.4 5.3 49L18 33C34.7 12.2 60 0 86.8 0H361.2c26.7 0 52 12.2 68.7 33l12.8 16c8.3 10.4 6.6 25.5-3.7 33.7s-25.5 6.6-33.7-3.7L392.5 63c-7.6-9.5-19.1-15-31.2-15H248V96h40c53 0 96 43 96 96V352c0 30.6-14.3 57.8-36.6 75.4l65.5 65.5c7.1 7.1 2.1 19.1-7.9 19.1H365.3c-8.5 0-16.6-3.4-22.6-9.4L288 448H160l-54.6 54.6c-6 6-14.1 9.4-22.6 9.4H43c-10 0-15-12.1-7.9-19.1l65.5-65.5C78.3 409.8 64 382.6 64 352V192c0-53 43-96 96-96h40V48H86.8zM160 160c-17.7 0-32 14.3-32 32v32c0 17.7 14.3 32 32 32H288c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32H160zm32 192c0-17.7-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32s32-14.3 32-32zm96 32c17.7 0 32-14.3 32-32s-14.3-32-32-32s-32 14.3-32 32s14.3 32 32 32z',
    ],
  };
  var faUserNurse = {
    prefix: 'fas',
    iconName: 'user-nurse',
    icon: [
      448,
      512,
      [],
      'f82f',
      'M96 128V70.2c0-13.3 8.3-25.3 20.8-30l96-36c7.2-2.7 15.2-2.7 22.5 0l96 36c12.5 4.7 20.8 16.6 20.8 30V128h-.3c.2 2.6 .3 5.3 .3 8v40c0 70.7-57.3 128-128 128s-128-57.3-128-128V136c0-2.7 .1-5.4 .3-8H96zm48 48c0 44.2 35.8 80 80 80s80-35.8 80-80V160H144v16zM129.1 323.2l83.2 88.4c6.3 6.7 17 6.7 23.3 0l83.2-88.4c73.7 14.9 129.1 80 129.1 158.1c0 17-13.8 30.7-30.7 30.7H30.7C13.8 512 0 498.2 0 481.3c0-78.1 55.5-143.2 129.1-158.1zM208 48V64H192c-4.4 0-8 3.6-8 8V88c0 4.4 3.6 8 8 8h16v16c0 4.4 3.6 8 8 8h16c4.4 0 8-3.6 8-8V96h16c4.4 0 8-3.6 8-8V72c0-4.4-3.6-8-8-8H240V48c0-4.4-3.6-8-8-8H216c-4.4 0-8 3.6-8 8z',
    ],
  };
  var faSyringe = {
    prefix: 'fas',
    iconName: 'syringe',
    icon: [
      512,
      512,
      [128137],
      'f48e',
      'M441 7l32 32 32 32c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-15-15L417.9 128l55 55c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-72-72L295 73c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l55 55L422.1 56 407 41c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0zM210.3 155.7l61.1-61.1c.3 .3 .6 .7 1 1l16 16 56 56 56 56 16 16c.3 .3 .6 .6 1 1l-191 191c-10.5 10.5-24.7 16.4-39.6 16.4H97.9L41 505c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l57-57V325.3c0-14.9 5.9-29.1 16.4-39.6l43.3-43.3 57 57c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-57-57 41.4-41.4 57 57c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6l-57-57z',
    ],
  };
  var faCloudSun = {
    prefix: 'fas',
    iconName: 'cloud-sun',
    icon: [
      640,
      512,
      [9925],
      'f6c4',
      'M122.4 1.2C127.6-.9 133.4-.2 137.9 3l70.3 50.3L278.5 3c4.5-3.2 10.3-3.9 15.4-1.8s8.8 6.7 9.7 12.2l14.1 85.3L403 112.8c5.4 .9 10.1 4.6 12.2 9.7s1.4 10.9-1.8 15.4l-38.8 54.3c-2.2-.1-4.3-.2-6.5-.2c-23.2 0-45 6.2-63.8 17c.1-12.5-2.2-25.3-7.3-37.6c-20.3-49-76.4-72.2-125.4-52s-72.2 76.4-52 125.4c18.3 44.3 66 67.5 111.1 56.6c-36.3 18.2-62.8 53.3-69.1 94.9l-23.6 16.9c-4.5 3.2-10.3 3.9-15.4 1.8s-8.8-6.7-9.7-12.2L98.7 317.7 13.4 303.6c-5.5-.9-10.1-4.6-12.2-9.7S-.2 282.9 3 278.5l50.3-70.3L3 137.9c-3.2-4.5-3.9-10.3-1.8-15.4s6.7-8.8 12.2-9.7L98.7 98.7l14.1-85.3c.9-5.5 4.6-10.1 9.7-12.2zM149 232.7c-13.5-32.7 2-70.1 34.6-83.6s70.1 2 83.6 34.6s-2 70.1-34.6 83.6s-70.1-2-83.6-34.6zM639.9 431.9c0 44.2-35.8 80-80 80H288c-53 0-96-43-96-96c0-47.6 34.6-87 80-94.6l0-1.3c0-53 43-96 96-96c34.9 0 65.4 18.6 82.2 46.4c13-9.1 28.8-14.4 45.8-14.4c44.2 0 80 35.8 80 80c0 5.9-.6 11.7-1.9 17.2c37.4 6.7 65.8 39.4 65.8 78.7z',
    ],
  };
  var faStopwatch20 = {
    prefix: 'fas',
    iconName: 'stopwatch-20',
    icon: [
      448,
      512,
      [],
      'e06f',
      'M176 0c-17.7 0-32 14.3-32 32s14.3 32 32 32h16V98.4C92.3 113.8 16 200 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-41.8-12.3-80.7-33.5-113.2l24.1-24.1c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L355.7 143c-28.1-23-62.2-38.8-99.7-44.6V64h16c17.7 0 32-14.3 32-32s-14.3-32-32-32H176zM288 204c28.7 0 52 23.3 52 52v96c0 28.7-23.3 52-52 52s-52-23.3-52-52V256c0-28.7 23.3-52 52-52zm-12 52v96c0 6.6 5.4 12 12 12s12-5.4 12-12V256c0-6.6-5.4-12-12-12s-12 5.4-12 12zM159.5 244c-5.4 0-10.2 3.5-11.9 8.6l-.6 1.7c-3.5 10.5-14.8 16.1-25.3 12.6s-16.1-14.8-12.6-25.3l.6-1.7c7.2-21.5 27.2-35.9 49.8-35.9c29 0 52.5 23.5 52.5 52.5v2.2c0 13.4-4.9 26.4-13.8 36.4l-39 43.9c-6.2 7-10 15.7-10.9 24.9H192c11 0 20 9 20 20s-9 20-20 20H128c-11 0-20-9-20-20V368.3c0-20.6 7.5-40.4 21.2-55.8l39-43.9c2.4-2.7 3.7-6.2 3.7-9.8v-2.2c0-6.9-5.6-12.5-12.5-12.5z',
    ],
  };
  var faSquareFull = {
    prefix: 'fas',
    iconName: 'square-full',
    icon: [
      512,
      512,
      [128997, 128998, 128999, 129000, 129001, 129002, 129003, 11035, 11036],
      'f45c',
      'M0 0H512V512H0V0z',
    ],
  };
  var faMagnet = {
    prefix: 'fas',
    iconName: 'magnet',
    icon: [
      448,
      512,
      [129522],
      'f076',
      'M0 160v96C0 379.7 100.3 480 224 480s224-100.3 224-224V160H320v96c0 53-43 96-96 96s-96-43-96-96V160H0zm0-32H128V64c0-17.7-14.3-32-32-32H32C14.3 32 0 46.3 0 64v64zm320 0H448V64c0-17.7-14.3-32-32-32H352c-17.7 0-32 14.3-32 32v64z',
    ],
  };
  var faJar = {
    prefix: 'fas',
    iconName: 'jar',
    icon: [
      320,
      512,
      [],
      'e516',
      'M32 32C32 14.3 46.3 0 64 0H256c17.7 0 32 14.3 32 32s-14.3 32-32 32H64C46.3 64 32 49.7 32 32zM0 160c0-35.3 28.7-64 64-64H256c35.3 0 64 28.7 64 64V448c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V160zm96 64c-17.7 0-32 14.3-32 32v96c0 17.7 14.3 32 32 32H224c17.7 0 32-14.3 32-32V256c0-17.7-14.3-32-32-32H96z',
    ],
  };
  var faNoteSticky = {
    prefix: 'fas',
    iconName: 'note-sticky',
    icon: [
      448,
      512,
      [62026, 'sticky-note'],
      'f249',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H290.7c17 0 33.3-6.7 45.3-18.7L429.3 368c12-12 18.7-28.3 18.7-45.3V96c0-35.3-28.7-64-64-64H64zm0 64H384V320H320c-17.7 0-32 14.3-32 32v64H64V96z',
    ],
  };
  var faStickyNote = faNoteSticky;
  var faBugSlash = {
    prefix: 'fas',
    iconName: 'bug-slash',
    icon: [
      640,
      512,
      [],
      'e490',
      'M38.8 5.1C28.4-3.1 13.3-1.2 5.1 9.2S-1.2 34.7 9.2 42.9l592 464c10.4 8.2 25.5 6.3 33.7-4.1s6.3-25.5-4.1-33.7L477.4 348.9c1.7-9.4 2.6-19 2.6-28.9h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H479.7c-1.1-14.1-5-27.5-11.1-39.5c.7-.6 1.4-1.2 2.1-1.9l64-64c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-64 64c-.7 .7-1.3 1.4-1.9 2.1C409.2 164.1 393.1 160 376 160H264c-8.3 0-16.3 1-24 2.8L38.8 5.1zM320 0c-53 0-96 43-96 96v3.6c0 15.7 12.7 28.4 28.4 28.4H387.6c15.7 0 28.4-12.7 28.4-28.4V96c0-53-43-96-96-96zM160.3 256H96c-17.7 0-32 14.3-32 32s14.3 32 32 32h64c0 24.6 5.5 47.8 15.4 68.6c-2.2 1.3-4.2 2.9-6 4.8l-64 64c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l63.1-63.1c24.5 21.8 55.8 36.2 90.3 39.6V335.5L166.7 227.3c-3.4 9-5.6 18.7-6.4 28.7zM336 479.2c36.6-3.6 69.7-19.6 94.8-43.8L336 360.7V479.2z',
    ],
  };
  var faArrowUpFromWaterPump = {
    prefix: 'fas',
    iconName: 'arrow-up-from-water-pump',
    icon: [
      576,
      512,
      [],
      'e4b6',
      'M112 0C85.5 0 64 21.5 64 48V256H48c-26.5 0-48 21.5-48 48v96c0 8 2 15.6 5.4 22.2c3.8-1.7 7.8-3.1 12-4.1c13.1-3.1 26.7-9.8 37.3-18.6c22.2-18.7 54.3-20.1 78.1-3.4c18 12.4 40.1 20.3 59.2 20.3c21.1 0 42-8.5 59.2-20.3c22.1-15.5 51.6-15.5 73.7 0c18.4 12.7 39.6 20.3 59.2 20.3c19 0 41.2-7.9 59.2-20.3c23.8-16.7 55.8-15.3 78.1 3.4c10.6 8.8 24.2 15.6 37.3 18.6c4.2 1 8.2 2.4 12 4.1C574 415.6 576 408 576 400V304c0-26.5-21.5-48-48-48H480l0-146.7 25.4 25.4c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-80-80c-12.5-12.5-32.8-12.5-45.3 0l-80 80c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L416 109.3 416 256H288V48c0-26.5-21.5-48-48-48H112zM306.5 421.9c-11.1-7.9-25.9-7.9-37 0C247 437.4 219.5 448 192 448c-26.9 0-55.3-10.8-77.4-26.1l0 0c-11.9-8.5-28.1-7.8-39.2 1.7c-14.4 11.9-32.5 21-50.6 25.2c-17.2 4-27.9 21.2-23.9 38.4s21.2 27.9 38.4 23.9c24.5-5.7 44.9-16.5 58.2-25C126.5 501.7 159 512 192 512c31.9 0 60.6-9.9 80.4-18.9c5.8-2.7 11.1-5.3 15.6-7.7c4.5 2.4 9.7 5.1 15.6 7.7c19.8 9 48.6 18.9 80.4 18.9c33 0 65.5-10.3 94.5-25.8c13.4 8.4 33.7 19.3 58.2 25c17.2 4 34.4-6.7 38.4-23.9s-6.7-34.4-23.9-38.4c-18.1-4.2-36.2-13.3-50.6-25.2c-11.1-9.4-27.3-10.1-39.2-1.7l0 0C439.4 437.2 410.9 448 384 448c-27.5 0-55-10.6-77.5-26.1z',
    ],
  };
  var faBone = {
    prefix: 'fas',
    iconName: 'bone',
    icon: [
      576,
      512,
      [129460],
      'f5d7',
      'M153.7 144.8c6.9 16.3 20.6 31.2 38.3 31.2H384c17.7 0 31.4-14.9 38.3-31.2C434.4 116.1 462.9 96 496 96c44.2 0 80 35.8 80 80c0 30.4-17 56.9-42 70.4c-3.6 1.9-6 5.5-6 9.6s2.4 7.7 6 9.6c25 13.5 42 40 42 70.4c0 44.2-35.8 80-80 80c-33.1 0-61.6-20.1-73.7-48.8C415.4 350.9 401.7 336 384 336H192c-17.7 0-31.4 14.9-38.3 31.2C141.6 395.9 113.1 416 80 416c-44.2 0-80-35.8-80-80c0-30.4 17-56.9 42-70.4c3.6-1.9 6-5.5 6-9.6s-2.4-7.7-6-9.6C17 232.9 0 206.4 0 176c0-44.2 35.8-80 80-80c33.1 0 61.6 20.1 73.7 48.8z',
    ],
  };
  var faUserInjured = {
    prefix: 'fas',
    iconName: 'user-injured',
    icon: [
      448,
      512,
      [],
      'f728',
      'M240 80H342.7c-7.9-19.5-20.4-36.5-36.2-49.9L240 80zm37.7-68.2C261.3 4.2 243.2 0 224 0c-53.7 0-99.7 33.1-118.7 80h81.4l91-68.2zM224 256c70.7 0 128-57.3 128-128c0-5.4-.3-10.8-1-16H97c-.7 5.2-1 10.6-1 16c0 70.7 57.3 128 128 128zM124 312.4c-9.7 3.1-19.1 7-28 11.7V512H243.7L181.5 408.2 124 312.4zm33-7.2L204.3 384H272c44.2 0 80 35.8 80 80c0 18-6 34.6-16 48h82.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3c-7.2 0-14.3 .4-21.3 1.3zM0 482.3C0 498.7 13.3 512 29.7 512H64V345.4C24.9 378.1 0 427.3 0 482.3zM320 464c0-26.5-21.5-48-48-48H223.5l57.1 95.2C303 507.2 320 487.6 320 464z',
    ],
  };
  var faFaceSadTear = {
    prefix: 'fas',
    iconName: 'face-sad-tear',
    icon: [
      512,
      512,
      [128546, 'sad-tear'],
      'f5b4',
      'M0 256C0 397.4 114.6 512 256 512s256-114.6 256-256S397.4 0 256 0S0 114.6 0 256zm240 80c0-8.8 7.2-16 16-16c45 0 85.6 20.5 115.7 53.1c6 6.5 5.6 16.6-.9 22.6s-16.6 5.6-22.6-.9c-25-27.1-57.4-42.9-92.3-42.9c-8.8 0-16-7.2-16-16zm-80 80c-26.5 0-48-21-48-47c0-20 28.6-60.4 41.6-77.7c3.2-4.4 9.6-4.4 12.8 0C179.6 308.6 208 349 208 369c0 26-21.5 47-48 47zM303.6 208c0-17.7 14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32s-32-14.3-32-32zm-128 32c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faSadTear = faFaceSadTear;
  var faPlane = {
    prefix: 'fas',
    iconName: 'plane',
    icon: [
      576,
      512,
      [],
      'f072',
      'M482.3 192c34.2 0 93.7 29 93.7 64c0 36-59.5 64-93.7 64l-116.6 0L265.2 495.9c-5.7 10-16.3 16.1-27.8 16.1l-56.2 0c-10.6 0-18.3-10.2-15.4-20.4l49-171.6L112 320 68.8 377.6c-3 4-7.8 6.4-12.8 6.4l-42 0c-7.8 0-14-6.3-14-14c0-1.3 .2-2.6 .5-3.9L32 256 .5 145.9c-.4-1.3-.5-2.6-.5-3.9c0-7.8 6.3-14 14-14l42 0c5 0 9.8 2.4 12.8 6.4L112 192l102.9 0-49-171.6C162.9 10.2 170.6 0 181.2 0l56.2 0c11.5 0 22.1 6.2 27.8 16.1L365.7 192l116.6 0z',
    ],
  };
  var faTentArrowsDown = {
    prefix: 'fas',
    iconName: 'tent-arrows-down',
    icon: [
      576,
      512,
      [],
      'e581',
      'M209.8 111.9c-8.9-9.9-24-10.7-33.9-1.8l-39.9 36L136 24c0-13.3-10.7-24-24-24S88 10.7 88 24l0 122.1-39.9-36c-9.9-8.9-25-8.1-33.9 1.8s-8.1 25 1.8 33.9l80 72c9.1 8.2 23 8.2 32.1 0l80-72c9.9-8.9 10.7-24 1.8-33.9zm352 0c-8.9-9.9-24-10.7-33.9-1.8l-39.9 36V24c0-13.3-10.7-24-24-24s-24 10.7-24 24V146.1l-39.9-36c-9.9-8.9-25-8.1-33.9 1.8s-8.1 25 1.8 33.9l80 72c9.1 8.2 23 8.2 32.1 0l80-72c9.9-8.9 10.7-24 1.8-33.9zM307.4 166.5c-11.5-8.7-27.3-8.7-38.8 0l-168 128c-6.6 5-11 12.5-12.3 20.7l-24 160c-1.4 9.2 1.3 18.6 7.4 25.6S86.7 512 96 512H288V352l96 160h96c9.3 0 18.2-4.1 24.2-11.1s8.8-16.4 7.4-25.6l-24-160c-1.2-8.2-5.6-15.7-12.3-20.7l-168-128z',
    ],
  };
  var faExclamation = {
    prefix: 'fas',
    iconName: 'exclamation',
    icon: [
      128,
      512,
      [10069, 10071, 61738],
      '21',
      'M96 64c0-17.7-14.3-32-32-32S32 46.3 32 64V320c0 17.7 14.3 32 32 32s32-14.3 32-32V64zM64 480c22.1 0 40-17.9 40-40s-17.9-40-40-40s-40 17.9-40 40s17.9 40 40 40z',
    ],
  };
  var faArrowsSpin = {
    prefix: 'fas',
    iconName: 'arrows-spin',
    icon: [
      448,
      512,
      [],
      'e4bb',
      'M224 96c38.4 0 73.7 13.5 101.3 36.1l-32.6 32.6c-4.6 4.6-5.9 11.5-3.5 17.4s8.3 9.9 14.8 9.9H416c8.8 0 16-7.2 16-16V64c0-6.5-3.9-12.3-9.9-14.8s-12.9-1.1-17.4 3.5l-34 34C331.4 52.6 280.1 32 224 32c-10.9 0-21.5 .8-32 2.3V99.2c10.3-2.1 21-3.2 32-3.2zM100.1 154.7l32.6 32.6c4.6 4.6 11.5 5.9 17.4 3.5s9.9-8.3 9.9-14.8V64c0-8.8-7.2-16-16-16H32c-6.5 0-12.3 3.9-14.8 9.9s-1.1 12.9 3.5 17.4l34 34C20.6 148.6 0 199.9 0 256c0 10.9 .8 21.5 2.3 32H67.2c-2.1-10.3-3.2-21-3.2-32c0-38.4 13.5-73.7 36.1-101.3zM445.7 224H380.8c2.1 10.3 3.2 21 3.2 32c0 38.4-13.5 73.7-36.1 101.3l-32.6-32.6c-4.6-4.6-11.5-5.9-17.4-3.5s-9.9 8.3-9.9 14.8V448c0 8.8 7.2 16 16 16H416c6.5 0 12.3-3.9 14.8-9.9s1.1-12.9-3.5-17.4l-34-34C427.4 363.4 448 312.1 448 256c0-10.9-.8-21.5-2.3-32zM224 416c-38.4 0-73.7-13.5-101.3-36.1l32.6-32.6c4.6-4.6 5.9-11.5 3.5-17.4s-8.3-9.9-14.8-9.9H32c-8.8 0-16 7.2-16 16l0 112c0 6.5 3.9 12.3 9.9 14.8s12.9 1.1 17.4-3.5l34-34C116.6 459.4 167.9 480 224 480c10.9 0 21.5-.8 32-2.3V412.8c-10.3 2.1-21 3.2-32 3.2z',
    ],
  };
  var faPrint = {
    prefix: 'fas',
    iconName: 'print',
    icon: [
      512,
      512,
      [128424, 128438, 9113],
      'f02f',
      'M128 0C92.7 0 64 28.7 64 64v96h64V64H354.7L384 93.3V160h64V93.3c0-17-6.7-33.3-18.7-45.3L400 18.7C388 6.7 371.7 0 354.7 0H128zM384 352v32 64H128V384 368 352H384zm64 32h32c17.7 0 32-14.3 32-32V256c0-35.3-28.7-64-64-64H64c-35.3 0-64 28.7-64 64v96c0 17.7 14.3 32 32 32H64v64c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V384zm-16-88c-13.3 0-24-10.7-24-24s10.7-24 24-24s24 10.7 24 24s-10.7 24-24 24z',
    ],
  };
  var faTurkishLiraSign = {
    prefix: 'fas',
    iconName: 'turkish-lira-sign',
    icon: [
      448,
      512,
      ['try', 'turkish-lira'],
      'e2bb',
      'M128 32c17.7 0 32 14.3 32 32V99.3L279.2 65.2c17-4.9 34.7 5 39.6 22s-5 34.7-22 39.6L160 165.9v29.4l119.2-34.1c17-4.9 34.7 5 39.6 22s-5 34.7-22 39.6L160 261.9V416h63.8c68.2 0 124.4-53.5 127.8-121.6l.4-8c.9-17.7 15.9-31.2 33.6-30.4s31.2 15.9 30.4 33.6l-.4 8C410.5 399.8 326.1 480 223.8 480H128c-17.7 0-32-14.3-32-32V280.1l-23.2 6.6c-17 4.9-34.7-5-39.6-22s5-34.7 22-39.6L96 213.6V184.1l-23.2 6.6c-17 4.9-34.7-5-39.6-22s5-34.7 22-39.6L96 117.6V64c0-17.7 14.3-32 32-32z',
    ],
  };
  var faTry = faTurkishLiraSign;
  var faTurkishLira = faTurkishLiraSign;
  var faDollarSign = {
    prefix: 'fas',
    iconName: 'dollar-sign',
    icon: [
      320,
      512,
      [128178, 61781, 'dollar', 'usd'],
      '24',
      'M160 0c17.7 0 32 14.3 32 32V67.7c1.6 .2 3.1 .4 4.7 .7c10.6 1.6 42.1 6.7 55.1 10c17.1 4.3 27.5 21.7 23.2 38.9s-21.7 27.5-38.9 23.2c-9.3-2.4-37.6-7-48.9-8.7c-32.1-4.8-59.6-2.4-78.5 4.9c-18.3 7-25.9 16.9-27.9 28c-1.9 10.7-.5 16.8 1.3 20.6c1.9 4 5.6 8.5 12.9 13.4c16.2 10.8 41.1 17.9 73.3 26.7l2.8 .8c28.4 7.7 63.2 17.2 89 34.3c14.1 9.4 27.3 22.1 35.5 39.7c8.3 17.8 10.1 37.8 6.3 59.1c-6.9 38-33.1 63.4-65.6 76.7c-13.7 5.6-28.6 9.2-44.4 11V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V445.1c-.4-.1-.9-.1-1.3-.2l-.2 0 0 0c-24.4-3.8-64.5-14.3-91.5-26.3c-16.2-7.2-23.4-26.1-16.2-42.2s26.1-23.4 42.2-16.2c20.9 9.3 55.3 18.4 75.2 21.6c31.9 4.7 58.2 2 76-5.3c16.9-6.9 24.6-16.9 26.8-28.9c1.9-10.7 .5-16.8-1.3-20.6c-1.9-4-5.6-8.5-12.9-13.4c-16.2-10.8-41.1-17.9-73.3-26.7l-2.8-.8c-28.4-7.7-63.2-17.2-89-34.3c-14.1-9.4-27.3-22.1-35.5-39.7c-8.3-17.8-10.1-37.8-6.3-59.1C25 114.1 53 89.3 86 76.7c13-5 27.2-8.2 42-10V32c0-17.7 14.3-32 32-32z',
    ],
  };
  var faDollar = faDollarSign;
  var faUsd = faDollarSign;
  var faX = {
    prefix: 'fas',
    iconName: 'x',
    icon: [
      384,
      512,
      [120],
      '58',
      'M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z',
    ],
  };
  var faMagnifyingGlassDollar = {
    prefix: 'fas',
    iconName: 'magnifying-glass-dollar',
    icon: [
      512,
      512,
      ['search-dollar'],
      'f688',
      'M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM228 104c0-11-9-20-20-20s-20 9-20 20v14c-7.6 1.7-15.2 4.4-22.2 8.5c-13.9 8.3-25.9 22.8-25.8 43.9c.1 20.3 12 33.1 24.7 40.7c11 6.6 24.7 10.8 35.6 14l1.7 .5c12.6 3.8 21.8 6.8 28 10.7c5.1 3.2 5.8 5.4 5.9 8.2c.1 5-1.8 8-5.9 10.5c-5 3.1-12.9 5-21.4 4.7c-11.1-.4-21.5-3.9-35.1-8.5c-2.3-.8-4.7-1.6-7.2-2.4c-10.5-3.5-21.8 2.2-25.3 12.6s2.2 21.8 12.6 25.3c1.9 .6 4 1.3 6.1 2.1l0 0 0 0c8.3 2.9 17.9 6.2 28.2 8.4V312c0 11 9 20 20 20s20-9 20-20V298.2c8-1.7 16-4.5 23.2-9c14.3-8.9 25.1-24.1 24.8-45c-.3-20.3-11.7-33.4-24.6-41.6c-11.5-7.2-25.9-11.6-37.1-15l-.7-.2c-12.8-3.9-21.9-6.7-28.3-10.5c-5.2-3.1-5.3-4.9-5.3-6.7c0-3.7 1.4-6.5 6.2-9.3c5.4-3.2 13.6-5.1 21.5-5c9.6 .1 20.2 2.2 31.2 5.2c10.7 2.8 21.6-3.5 24.5-14.2s-3.5-21.6-14.2-24.5c-6.5-1.7-13.7-3.4-21.1-4.7V104z',
    ],
  };
  var faSearchDollar = faMagnifyingGlassDollar;
  var faUsersGear = {
    prefix: 'fas',
    iconName: 'users-gear',
    icon: [
      640,
      512,
      ['users-cog'],
      'f509',
      'M144 160c44.2 0 80-35.8 80-80s-35.8-80-80-80S64 35.8 64 80s35.8 80 80 80zm368 0c44.2 0 80-35.8 80-80s-35.8-80-80-80s-80 35.8-80 80s35.8 80 80 80zM0 298.7C0 310.4 9.6 320 21.3 320H234.7c.2 0 .4 0 .7 0c-26.6-23.5-43.3-57.8-43.3-96c0-7.6 .7-15 1.9-22.3c-13.6-6.3-28.7-9.7-44.6-9.7H106.7C47.8 192 0 239.8 0 298.7zM320 320c24 0 45.9-8.8 62.7-23.3c2.5-3.7 5.2-7.3 8-10.7c2.7-3.3 5.7-6.1 9-8.3C410 262.3 416 243.9 416 224c0-53-43-96-96-96s-96 43-96 96s43 96 96 96zm65.4 60.2c-10.3-5.9-18.1-16.2-20.8-28.2H261.3C187.7 352 128 411.7 128 485.3c0 14.7 11.9 26.7 26.7 26.7H455.2c-2.1-5.2-3.2-10.9-3.2-16.4v-3c-1.3-.7-2.7-1.5-4-2.3l-2.6 1.5c-16.8 9.7-40.5 8-54.7-9.7c-4.5-5.6-8.6-11.5-12.4-17.6l-.1-.2-.1-.2-2.4-4.1-.1-.2-.1-.2c-3.4-6.2-6.4-12.6-9-19.3c-8.2-21.2 2.2-42.6 19-52.3l2.7-1.5c0-.8 0-1.5 0-2.3s0-1.5 0-2.3l-2.7-1.5zM533.3 192H490.7c-15.9 0-31 3.5-44.6 9.7c1.3 7.2 1.9 14.7 1.9 22.3c0 17.4-3.5 33.9-9.7 49c2.5 .9 4.9 2 7.1 3.3l2.6 1.5c1.3-.8 2.6-1.6 4-2.3v-3c0-19.4 13.3-39.1 35.8-42.6c7.9-1.2 16-1.9 24.2-1.9s16.3 .6 24.2 1.9c22.5 3.5 35.8 23.2 35.8 42.6v3c1.3 .7 2.7 1.5 4 2.3l2.6-1.5c16.8-9.7 40.5-8 54.7 9.7c2.3 2.8 4.5 5.8 6.6 8.7c-2.1-57.1-49-102.7-106.6-102.7zm91.3 163.9c6.3-3.6 9.5-11.1 6.8-18c-2.1-5.5-4.6-10.8-7.4-15.9l-2.3-4c-3.1-5.1-6.5-9.9-10.2-14.5c-4.6-5.7-12.7-6.7-19-3L574.4 311c-8.9-7.6-19.1-13.6-30.4-17.6v-21c0-7.3-4.9-13.8-12.1-14.9c-6.5-1-13.1-1.5-19.9-1.5s-13.4 .5-19.9 1.5c-7.2 1.1-12.1 7.6-12.1 14.9v21c-11.2 4-21.5 10-30.4 17.6l-18.2-10.5c-6.3-3.6-14.4-2.6-19 3c-3.7 4.6-7.1 9.5-10.2 14.6l-2.3 3.9c-2.8 5.1-5.3 10.4-7.4 15.9c-2.6 6.8 .5 14.3 6.8 17.9l18.2 10.5c-1 5.7-1.6 11.6-1.6 17.6s.6 11.9 1.6 17.5l-18.2 10.5c-6.3 3.6-9.5 11.1-6.8 17.9c2.1 5.5 4.6 10.7 7.4 15.8l2.4 4.1c3 5.1 6.4 9.9 10.1 14.5c4.6 5.7 12.7 6.7 19 3L449.6 457c8.9 7.6 19.2 13.6 30.4 17.6v21c0 7.3 4.9 13.8 12.1 14.9c6.5 1 13.1 1.5 19.9 1.5s13.4-.5 19.9-1.5c7.2-1.1 12.1-7.6 12.1-14.9v-21c11.2-4 21.5-10 30.4-17.6l18.2 10.5c6.3 3.6 14.4 2.6 19-3c3.7-4.6 7.1-9.4 10.1-14.5l2.4-4.2c2.8-5.1 5.3-10.3 7.4-15.8c2.6-6.8-.5-14.3-6.8-17.9l-18.2-10.5c1-5.7 1.6-11.6 1.6-17.5s-.6-11.9-1.6-17.6l18.2-10.5zM552 384c0 22.1-17.9 40-40 40s-40-17.9-40-40s17.9-40 40-40s40 17.9 40 40z',
    ],
  };
  var faUsersCog = faUsersGear;
  var faPersonMilitaryPointing = {
    prefix: 'fas',
    iconName: 'person-military-pointing',
    icon: [
      576,
      512,
      [],
      'e54a',
      'M246.9 14.1C234 15.2 224 26 224 39c0 13.8 11.2 25 25 25H400c8.8 0 16-7.2 16-16V17.4C416 8 408 .7 398.7 1.4L246.9 14.1zM240 112c0 44.2 35.8 80 80 80s80-35.8 80-80c0-5.5-.6-10.8-1.6-16H241.6c-1 5.2-1.6 10.5-1.6 16zM72 224c-22.1 0-40 17.9-40 40s17.9 40 40 40H224v89.4L386.8 230.5c-13.3-4.3-27.3-6.5-41.6-6.5H240 72zm345.7 20.9L246.6 416H416V369.7l53.6 90.6c11.2 19 35.8 25.3 54.8 14.1s25.3-35.8 14.1-54.8L462.3 290.8c-11.2-18.9-26.6-34.5-44.6-45.9zM224 448v32c0 17.7 14.3 32 32 32H384c17.7 0 32-14.3 32-32V448H224z',
    ],
  };
  var faBuildingColumns = {
    prefix: 'fas',
    iconName: 'building-columns',
    icon: [
      512,
      512,
      ['bank', 'institution', 'museum', 'university'],
      'f19c',
      'M243.4 2.6l-224 96c-14 6-21.8 21-18.7 35.8S16.8 160 32 160v8c0 13.3 10.7 24 24 24H456c13.3 0 24-10.7 24-24v-8c15.2 0 28.3-10.7 31.3-25.6s-4.8-29.9-18.7-35.8l-224-96c-8.1-3.4-17.2-3.4-25.2 0zM128 224H64V420.3c-.6 .3-1.2 .7-1.8 1.1l-48 32c-11.7 7.8-17 22.4-12.9 35.9S17.9 512 32 512H480c14.1 0 26.5-9.2 30.6-22.7s-1.1-28.1-12.9-35.9l-48-32c-.6-.4-1.2-.7-1.8-1.1V224H384V416H344V224H280V416H232V224H168V416H128V224zm128-96c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z',
    ],
  };
  var faBank = faBuildingColumns;
  var faInstitution = faBuildingColumns;
  var faMuseum = faBuildingColumns;
  var faUniversity = faBuildingColumns;
  var faUmbrella = {
    prefix: 'fas',
    iconName: 'umbrella',
    icon: [
      640,
      512,
      [],
      'f0e9',
      'M320 0c17.7 0 32 14.3 32 32V49.7C483.8 63.4 589.7 161 605.9 285.9c2 15.6-17.3 24.4-27.8 12.7C564.1 283 536.8 272 512 272c-38.7 0-71 27.5-78.4 64.1c-1.7 8.7-8.7 15.9-17.6 15.9s-15.8-7.2-17.6-15.9C391 299.5 358.7 272 320 272s-71 27.5-78.4 64.1c-1.7 8.7-8.7 15.9-17.6 15.9s-15.8-7.2-17.6-15.9C199 299.5 166.7 272 128 272c-24.8 0-52.1 11-66.1 26.7c-10.5 11.7-29.8 2.9-27.8-12.7C50.3 161 156.2 63.4 288 49.7V32c0-17.7 14.3-32 32-32zm0 304c12.3 0 23.5 4.6 32 12.2V430.6c0 45-36.5 81.4-81.4 81.4c-30.8 0-59-17.4-72.8-45l-2.3-4.7c-7.9-15.8-1.5-35 14.3-42.9s35-1.5 42.9 14.3l2.3 4.7c3 5.9 9 9.6 15.6 9.6c9.6 0 17.4-7.8 17.4-17.4V316.2c8.5-7.6 19.7-12.2 32-12.2z',
    ],
  };
  var faTrowel = {
    prefix: 'fas',
    iconName: 'trowel',
    icon: [
      512,
      512,
      [],
      'e589',
      'M343.9 213.4L245.3 312l65.4 65.4c7.9 7.9 11.1 19.4 8.4 30.3s-10.8 19.6-21.5 22.9l-256 80c-11.4 3.5-23.8 .5-32.2-7.9S-2.1 481.8 1.5 470.5l80-256c3.3-10.7 12-18.9 22.9-21.5s22.4 .5 30.3 8.4L200 266.7l98.6-98.6c-14.3-14.6-14.2-38 .3-52.5l95.4-95.4c26.9-26.9 70.5-26.9 97.5 0s26.9 70.5 0 97.5l-95.4 95.4c-14.5 14.5-37.9 14.6-52.5 .3z',
    ],
  };
  var faD = {
    prefix: 'fas',
    iconName: 'd',
    icon: [
      384,
      512,
      [100],
      '44',
      'M0 64C0 46.3 14.3 32 32 32H160c123.7 0 224 100.3 224 224s-100.3 224-224 224H32c-17.7 0-32-14.3-32-32V64zM64 96V416h96c88.4 0 160-71.6 160-160s-71.6-160-160-160H64z',
    ],
  };
  var faStapler = {
    prefix: 'fas',
    iconName: 'stapler',
    icon: [
      640,
      512,
      [],
      'e5af',
      'M640 299.3V304 432c0 26.5-21.5 48-48 48H512 448 64c-17.7 0-32-14.3-32-32s14.3-32 32-32H448V368H96c-17.7 0-32-14.3-32-32V219.4L33.8 214C14.2 210.5 0 193.5 0 173.7c0-8.9 2.9-17.5 8.2-24.6l35.6-47.5C76.7 57.8 128.2 32 182.9 32c27 0 53.6 6.3 77.8 18.4L586.9 213.5C619.5 229.7 640 263 640 299.3zM448 304V288L128 230.9V304H448z',
    ],
  };
  var faMasksTheater = {
    prefix: 'fas',
    iconName: 'masks-theater',
    icon: [
      640,
      512,
      [127917, 'theater-masks'],
      'f630',
      'M399.3 509.7c-58.2-8.8-108.2-72.8-137.6-119.7c-20-31.9-25.1-70.3-19.6-107.7L266.3 118c1.4-9.8 5.1-19.2 12.9-25.2c20.2-15.6 72.4-41.5 185.1-24.5s155.2 57.4 170 78.3c5.7 8 6.5 18.1 5.1 27.9L615.2 338.8c-5.5 37.3-21.5 72.6-49.8 97.2c-41.7 36.1-108 82.5-166.1 73.7zm17.1-277.7c.1-.5 .2-1.1 .3-1.6c3.2-21.8-11.6-42-33.1-45.3s-41.5 11.8-44.7 33.5c-.1 .5-.1 1.1-.2 1.6c-.6 5.4 5.2 8.4 10.3 6.7c9-3 18.8-3.9 28.7-2.4s19.1 5.3 26.8 10.8c4.4 3.1 10.8 2 11.8-3.3zm112.6 22.2c4.4 3.1 10.8 2 11.8-3.3c.1-.5 .2-1.1 .3-1.6c3.2-21.8-11.6-42-33.1-45.3s-41.5 11.8-44.7 33.5c-.1 .5-.1 1.1-.2 1.6c-.6 5.4 5.2 8.4 10.3 6.7c9-3 18.8-3.9 28.7-2.4s19.1 5.3 26.8 10.8zm-11.5 85.2c-28.8 12.8-61.4 17.8-94.9 12.8s-63.2-19.5-87-40.3c-6.3-5.5-16.2-1.7-15.2 6.7c5.9 48.5 43 89.1 93 96.7s97.2-20.2 116.8-64.9c3.4-7.7-5-14.3-12.6-10.9zM240.7 446.9c-58.2 8.8-124.5-37.5-166.1-73.7c-28.3-24.5-44.3-59.8-49.8-97.2L.6 111.8C-.8 102 0 91.9 5.7 83.9C20.5 63 63 22.7 175.7 5.6s164.9 8.9 185.1 24.5c.9 .7 1.7 1.4 2.4 2.1c-52.8 4.8-85.1 21-103.6 35.3c-17 13.1-23 32-25 45.9L215.3 244.7c-2.6 .1-5.2 .4-7.9 .8c-35.2 5.3-61.8 32.7-68.2 66.3c-1.6 8.2 8.3 12.2 14.8 7c15.6-12.4 34.1-21.3 54.7-25.4c-3 38.4 4 78.7 25.9 113.6c6.9 11 15 23.1 24.2 35.4c-5.9 2.1-11.9 3.6-18 4.5zM174.1 157c-1-5.3-7.4-6.4-11.8-3.3c-7.7 5.5-16.8 9.3-26.8 10.8s-19.8 .6-28.7-2.4c-5.1-1.7-10.9 1.3-10.3 6.7c.1 .5 .1 1.1 .2 1.6c3.2 21.8 23.2 36.8 44.7 33.5s36.3-23.5 33.1-45.3c-.1-.5-.2-1.1-.3-1.6z',
    ],
  };
  var faTheaterMasks = faMasksTheater;
  var faKipSign = {
    prefix: 'fas',
    iconName: 'kip-sign',
    icon: [
      384,
      512,
      [],
      'e1c4',
      'M340.8 88.3c13.4-11.5 15-31.7 3.5-45.1s-31.7-15-45.1-3.5L128 186.4V64c0-17.7-14.3-32-32-32S64 46.3 64 64V224H32c-17.7 0-32 14.3-32 32s14.3 32 32 32H64V448c0 17.7 14.3 32 32 32s32-14.3 32-32V325.6L299.2 472.3c13.4 11.5 33.6 9.9 45.1-3.5s9.9-33.6-3.5-45.1L182.5 288H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H182.5L340.8 88.3z',
    ],
  };
  var faHandPointLeft = {
    prefix: 'fas',
    iconName: 'hand-point-left',
    icon: [
      512,
      512,
      [],
      'f0a5',
      'M32 96C14.3 96 0 110.3 0 128s14.3 32 32 32l208 0V96L32 96zM192 288c-17.7 0-32 14.3-32 32s14.3 32 32 32h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H192zm-64-64c0 17.7 14.3 32 32 32h48c17.7 0 32-14.3 32-32s-14.3-32-32-32H160c-17.7 0-32 14.3-32 32zm96 160c-17.7 0-32 14.3-32 32s14.3 32 32 32h64c17.7 0 32-14.3 32-32s-14.3-32-32-32H224zm88-96l-.6 0c5.4 9.4 8.6 20.3 8.6 32c0 13.2-4 25.4-10.8 35.6c24.9 8.7 42.8 32.5 42.8 60.4c0 11.7-3.1 22.6-8.6 32H352c88.4 0 160-71.6 160-160V226.3c0-42.4-16.9-83.1-46.9-113.1l-11.6-11.6C429.5 77.5 396.9 64 363 64l-27 0c-35.3 0-64 28.7-64 64v88c0 22.1 17.9 40 40 40s40-17.9 40-40V160c0-8.8 7.2-16 16-16s16 7.2 16 16v56c0 39.8-32.2 72-72 72z',
    ],
  };
  var faHandshakeSimple = {
    prefix: 'fas',
    iconName: 'handshake-simple',
    icon: [
      640,
      512,
      [129309, 'handshake-alt'],
      'f4c6',
      'M323.4 85.2l-96.8 78.4c-16.1 13-19.2 36.4-7 53.1c12.9 17.8 38 21.3 55.3 7.8l99.3-77.2c7-5.4 17-4.2 22.5 2.8s4.2 17-2.8 22.5l-20.9 16.2L550.2 352H592c26.5 0 48-21.5 48-48V176c0-26.5-21.5-48-48-48H516h-4-.7l-3.9-2.5L434.8 79c-15.3-9.8-33.2-15-51.4-15c-21.8 0-43 7.5-60 21.2zm22.8 124.4l-51.7 40.2C263 274.4 217.3 268 193.7 235.6c-22.2-30.5-16.6-73.1 12.7-96.8l83.2-67.3c-11.6-4.9-24.1-7.4-36.8-7.4C234 64 215.7 69.6 200 80l-72 48H48c-26.5 0-48 21.5-48 48V304c0 26.5 21.5 48 48 48H156.2l91.4 83.4c19.6 17.9 49.9 16.5 67.8-3.1c5.5-6.1 9.2-13.2 11.1-20.6l17 15.6c19.5 17.9 49.9 16.6 67.8-2.9c4.5-4.9 7.8-10.6 9.9-16.5c19.4 13 45.8 10.3 62.1-7.5c17.9-19.5 16.6-49.9-2.9-67.8l-134.2-123z',
    ],
  };
  var faHandshakeAlt = faHandshakeSimple;
  var faJetFighter = {
    prefix: 'fas',
    iconName: 'jet-fighter',
    icon: [
      640,
      512,
      ['fighter-jet'],
      'f0fb',
      'M160 24c0-13.3 10.7-24 24-24H296c13.3 0 24 10.7 24 24s-10.7 24-24 24H280L384 192H500.4c7.7 0 15.3 1.4 22.5 4.1L625 234.4c9 3.4 15 12 15 21.6s-6 18.2-15 21.6L522.9 315.9c-7.2 2.7-14.8 4.1-22.5 4.1H384L280 464h16c13.3 0 24 10.7 24 24s-10.7 24-24 24H184c-13.3 0-24-10.7-24-24s10.7-24 24-24h8V320H160l-54.6 54.6c-6 6-14.1 9.4-22.6 9.4H64c-17.7 0-32-14.3-32-32V288c-17.7 0-32-14.3-32-32s14.3-32 32-32V160c0-17.7 14.3-32 32-32H82.7c8.5 0 16.6 3.4 22.6 9.4L160 192h32V48h-8c-13.3 0-24-10.7-24-24zM80 240c-8.8 0-16 7.2-16 16s7.2 16 16 16h64c8.8 0 16-7.2 16-16s-7.2-16-16-16H80z',
    ],
  };
  var faFighterJet = faJetFighter;
  var faSquareShareNodes = {
    prefix: 'fas',
    iconName: 'square-share-nodes',
    icon: [
      448,
      512,
      ['share-alt-square'],
      'f1e1',
      'M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zM384 160c0 35.3-28.7 64-64 64c-15.4 0-29.5-5.4-40.6-14.5L194.1 256l85.3 46.5c11-9.1 25.2-14.5 40.6-14.5c35.3 0 64 28.7 64 64s-28.7 64-64 64s-64-28.7-64-64c0-2.5 .1-4.9 .4-7.3L174.5 300c-11.7 12.3-28.2 20-46.5 20c-35.3 0-64-28.7-64-64s28.7-64 64-64c18.3 0 34.8 7.7 46.5 20l81.9-44.7c-.3-2.4-.4-4.9-.4-7.3c0-35.3 28.7-64 64-64s64 28.7 64 64z',
    ],
  };
  var faShareAltSquare = faSquareShareNodes;
  var faBarcode = {
    prefix: 'fas',
    iconName: 'barcode',
    icon: [
      512,
      512,
      [],
      'f02a',
      'M24 32C10.7 32 0 42.7 0 56V456c0 13.3 10.7 24 24 24H40c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24H24zm88 0c-8.8 0-16 7.2-16 16V464c0 8.8 7.2 16 16 16s16-7.2 16-16V48c0-8.8-7.2-16-16-16zm72 0c-13.3 0-24 10.7-24 24V456c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24H184zm96 0c-13.3 0-24 10.7-24 24V456c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24H280zM448 56V456c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V56c0-13.3-10.7-24-24-24H472c-13.3 0-24 10.7-24 24zm-64-8V464c0 8.8 7.2 16 16 16s16-7.2 16-16V48c0-8.8-7.2-16-16-16s-16 7.2-16 16z',
    ],
  };
  var faPlusMinus = {
    prefix: 'fas',
    iconName: 'plus-minus',
    icon: [
      384,
      512,
      [],
      'e43c',
      'M224 32c0-17.7-14.3-32-32-32s-32 14.3-32 32V144H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H160V320c0 17.7 14.3 32 32 32s32-14.3 32-32V208H336c17.7 0 32-14.3 32-32s-14.3-32-32-32H224V32zM0 480c0 17.7 14.3 32 32 32H352c17.7 0 32-14.3 32-32s-14.3-32-32-32H32c-17.7 0-32 14.3-32 32z',
    ],
  };
  var faVideo = {
    prefix: 'fas',
    iconName: 'video',
    icon: [
      576,
      512,
      ['video-camera'],
      'f03d',
      'M0 128C0 92.7 28.7 64 64 64H320c35.3 0 64 28.7 64 64V384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V128zM559.1 99.8c10.4 5.6 16.9 16.4 16.9 28.2V384c0 11.8-6.5 22.6-16.9 28.2s-23 5-32.9-1.6l-96-64L416 337.1V320 192 174.9l14.2-9.5 96-64c9.8-6.5 22.4-7.2 32.9-1.6z',
    ],
  };
  var faVideoCamera = faVideo;
  var faGraduationCap = {
    prefix: 'fas',
    iconName: 'graduation-cap',
    icon: [
      640,
      512,
      [127891, 'mortar-board'],
      'f19d',
      'M320 32c-8.1 0-16.1 1.4-23.7 4.1L15.8 137.4C6.3 140.9 0 149.9 0 160s6.3 19.1 15.8 22.6l57.9 20.9C57.3 229.3 48 259.8 48 291.9v28.1c0 28.4-10.8 57.7-22.3 80.8c-6.5 13-13.9 25.8-22.5 37.6C0 442.7-.9 448.3 .9 453.4s6 8.9 11.2 10.2l64 16c4.2 1.1 8.7 .3 12.4-2s6.3-6.1 7.1-10.4c8.6-42.8 4.3-81.2-2.1-108.7C90.3 344.3 86 329.8 80 316.5V291.9c0-30.2 10.2-58.7 27.9-81.5c12.9-15.5 29.6-28 49.2-35.7l157-61.7c8.2-3.2 17.5 .8 20.7 9s-.8 17.5-9 20.7l-157 61.7c-12.4 4.9-23.3 12.4-32.2 21.6l159.6 57.6c7.6 2.7 15.6 4.1 23.7 4.1s16.1-1.4 23.7-4.1L624.2 182.6c9.5-3.4 15.8-12.5 15.8-22.6s-6.3-19.1-15.8-22.6L343.7 36.1C336.1 33.4 328.1 32 320 32zM128 408c0 35.3 86 72 192 72s192-36.7 192-72L496.7 262.6 354.5 314c-11.1 4-22.8 6-34.5 6s-23.5-2-34.5-6L143.3 262.6 128 408z',
    ],
  };
  var faMortarBoard = faGraduationCap;
  var faHandHoldingMedical = {
    prefix: 'fas',
    iconName: 'hand-holding-medical',
    icon: [
      576,
      512,
      [],
      'e05c',
      'M224 24V80H168c-13.3 0-24 10.7-24 24v48c0 13.3 10.7 24 24 24h56v56c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24V176h56c13.3 0 24-10.7 24-24V104c0-13.3-10.7-24-24-24H320V24c0-13.3-10.7-24-24-24H248c-13.3 0-24 10.7-24 24zM559.7 392.2c17.8-13.1 21.6-38.1 8.5-55.9s-38.1-21.6-55.9-8.5L392.6 416H272c-8.8 0-16-7.2-16-16s7.2-16 16-16h16 64c17.7 0 32-14.3 32-32s-14.3-32-32-32H288 272 193.7c-29.1 0-57.3 9.9-80 28L68.8 384H32c-17.7 0-32 14.3-32 32v64c0 17.7 14.3 32 32 32H192 352.5c29 0 57.3-9.3 80.7-26.5l126.6-93.3zm-367-8.2l.9 0 0 0c-.3 0-.6 0-.9 0z',
    ],
  };
  var faPersonCircleCheck = {
    prefix: 'fas',
    iconName: 'person-circle-check',
    icon: [
      576,
      512,
      [],
      'e53e',
      'M208 48c0 26.5-21.5 48-48 48s-48-21.5-48-48s21.5-48 48-48s48 21.5 48 48zM152 352V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V256.9L59.4 304.5c-9.1 15.1-28.8 20-43.9 10.9s-20-28.8-10.9-43.9l58.3-97c17.4-28.9 48.6-46.6 82.3-46.6h29.7c33.7 0 64.9 17.7 82.3 46.6l44.9 74.7c-16.1 17.6-28.6 38.5-36.6 61.5c-1.9-1.8-3.5-3.9-4.9-6.3L232 256.9V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V352H152zm424 16c0 79.5-64.5 144-144 144s-144-64.5-144-144s64.5-144 144-144s144 64.5 144 144zm-76.7-43.3c-6.2-6.2-16.4-6.2-22.6 0L416 385.4l-28.7-28.7c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6l40 40c6.2 6.2 16.4 6.2 22.6 0l72-72c6.2-6.2 6.2-16.4 0-22.6z',
    ],
  };
  var faTurnUp = {
    prefix: 'fas',
    iconName: 'turn-up',
    icon: [
      384,
      512,
      [10548, 'level-up-alt'],
      'f3bf',
      'M178.3 5.7L40.3 143.7C35 149 32 156.2 32 163.7C32 179.3 44.7 192 60.3 192H144V400c0 8.8-7.2 16-16 16H32c-17.7 0-32 14.3-32 32v32c0 17.7 14.3 32 32 32h96c61.9 0 112-50.1 112-112V192h83.7c15.6 0 28.3-12.7 28.3-28.3c0-7.5-3-14.7-8.3-20L205.7 5.7C202 2 197.1 0 192 0s-10 2-13.7 5.7z',
    ],
  };
  var faLevelUpAlt = faTurnUp;

  exports.fa0 = fa0;
  exports.fa1 = fa1;
  exports.fa2 = fa2;
  exports.fa3 = fa3;
  exports.fa4 = fa4;
  exports.fa5 = fa5;
  exports.fa6 = fa6;
  exports.fa7 = fa7;
  exports.fa8 = fa8;
  exports.fa9 = fa9;
  exports.faA = faA;
  exports.faAd = faAd;
  exports.faAdd = faAdd;
  exports.faAddressBook = faAddressBook;
  exports.faAddressCard = faAddressCard;
  exports.faAdjust = faAdjust;
  exports.faAirFreshener = faAirFreshener;
  exports.faAlignCenter = faAlignCenter;
  exports.faAlignJustify = faAlignJustify;
  exports.faAlignLeft = faAlignLeft;
  exports.faAlignRight = faAlignRight;
  exports.faAllergies = faAllergies;
  exports.faAmbulance = faAmbulance;
  exports.faAmericanSignLanguageInterpreting = faAmericanSignLanguageInterpreting;
  exports.faAnchor = faAnchor;
  exports.faAnchorCircleCheck = faAnchorCircleCheck;
  exports.faAnchorCircleExclamation = faAnchorCircleExclamation;
  exports.faAnchorCircleXmark = faAnchorCircleXmark;
  exports.faAnchorLock = faAnchorLock;
  exports.faAngleDoubleDown = faAngleDoubleDown;
  exports.faAngleDoubleLeft = faAngleDoubleLeft;
  exports.faAngleDoubleRight = faAngleDoubleRight;
  exports.faAngleDoubleUp = faAngleDoubleUp;
  exports.faAngleDown = faAngleDown;
  exports.faAngleLeft = faAngleLeft;
  exports.faAngleRight = faAngleRight;
  exports.faAngleUp = faAngleUp;
  exports.faAnglesDown = faAnglesDown;
  exports.faAnglesLeft = faAnglesLeft;
  exports.faAnglesRight = faAnglesRight;
  exports.faAnglesUp = faAnglesUp;
  exports.faAngry = faAngry;
  exports.faAnkh = faAnkh;
  exports.faAppleAlt = faAppleAlt;
  exports.faAppleWhole = faAppleWhole;
  exports.faArchive = faArchive;
  exports.faArchway = faArchway;
  exports.faAreaChart = faAreaChart;
  exports.faArrowAltCircleDown = faArrowAltCircleDown;
  exports.faArrowAltCircleLeft = faArrowAltCircleLeft;
  exports.faArrowAltCircleRight = faArrowAltCircleRight;
  exports.faArrowAltCircleUp = faArrowAltCircleUp;
  exports.faArrowCircleDown = faArrowCircleDown;
  exports.faArrowCircleLeft = faArrowCircleLeft;
  exports.faArrowCircleRight = faArrowCircleRight;
  exports.faArrowCircleUp = faArrowCircleUp;
  exports.faArrowDown = faArrowDown;
  exports.faArrowDown19 = faArrowDown19;
  exports.faArrowDown91 = faArrowDown91;
  exports.faArrowDownAZ = faArrowDownAZ;
  exports.faArrowDownLong = faArrowDownLong;
  exports.faArrowDownShortWide = faArrowDownShortWide;
  exports.faArrowDownUpAcrossLine = faArrowDownUpAcrossLine;
  exports.faArrowDownUpLock = faArrowDownUpLock;
  exports.faArrowDownWideShort = faArrowDownWideShort;
  exports.faArrowDownZA = faArrowDownZA;
  exports.faArrowLeft = faArrowLeft;
  exports.faArrowLeftLong = faArrowLeftLong;
  exports.faArrowLeftRotate = faArrowLeftRotate;
  exports.faArrowPointer = faArrowPointer;
  exports.faArrowRight = faArrowRight;
  exports.faArrowRightArrowLeft = faArrowRightArrowLeft;
  exports.faArrowRightFromBracket = faArrowRightFromBracket;
  exports.faArrowRightFromFile = faArrowRightFromFile;
  exports.faArrowRightLong = faArrowRightLong;
  exports.faArrowRightRotate = faArrowRightRotate;
  exports.faArrowRightToBracket = faArrowRightToBracket;
  exports.faArrowRightToCity = faArrowRightToCity;
  exports.faArrowRightToFile = faArrowRightToFile;
  exports.faArrowRotateBack = faArrowRotateBack;
  exports.faArrowRotateBackward = faArrowRotateBackward;
  exports.faArrowRotateForward = faArrowRotateForward;
  exports.faArrowRotateLeft = faArrowRotateLeft;
  exports.faArrowRotateRight = faArrowRotateRight;
  exports.faArrowTrendDown = faArrowTrendDown;
  exports.faArrowTrendUp = faArrowTrendUp;
  exports.faArrowTurnDown = faArrowTurnDown;
  exports.faArrowTurnRight = faArrowTurnRight;
  exports.faArrowTurnUp = faArrowTurnUp;
  exports.faArrowUp = faArrowUp;
  exports.faArrowUp19 = faArrowUp19;
  exports.faArrowUp91 = faArrowUp91;
  exports.faArrowUpAZ = faArrowUpAZ;
  exports.faArrowUpFromBracket = faArrowUpFromBracket;
  exports.faArrowUpFromGroundWater = faArrowUpFromGroundWater;
  exports.faArrowUpFromWaterPump = faArrowUpFromWaterPump;
  exports.faArrowUpLong = faArrowUpLong;
  exports.faArrowUpRightDots = faArrowUpRightDots;
  exports.faArrowUpRightFromSquare = faArrowUpRightFromSquare;
  exports.faArrowUpShortWide = faArrowUpShortWide;
  exports.faArrowUpWideShort = faArrowUpWideShort;
  exports.faArrowUpZA = faArrowUpZA;
  exports.faArrows = faArrows;
  exports.faArrowsAlt = faArrowsAlt;
  exports.faArrowsAltH = faArrowsAltH;
  exports.faArrowsAltV = faArrowsAltV;
  exports.faArrowsDownToLine = faArrowsDownToLine;
  exports.faArrowsDownToPeople = faArrowsDownToPeople;
  exports.faArrowsH = faArrowsH;
  exports.faArrowsLeftRight = faArrowsLeftRight;
  exports.faArrowsLeftRightToLine = faArrowsLeftRightToLine;
  exports.faArrowsRotate = faArrowsRotate;
  exports.faArrowsSpin = faArrowsSpin;
  exports.faArrowsSplitUpAndLeft = faArrowsSplitUpAndLeft;
  exports.faArrowsToCircle = faArrowsToCircle;
  exports.faArrowsToDot = faArrowsToDot;
  exports.faArrowsToEye = faArrowsToEye;
  exports.faArrowsTurnRight = faArrowsTurnRight;
  exports.faArrowsTurnToDots = faArrowsTurnToDots;
  exports.faArrowsUpDown = faArrowsUpDown;
  exports.faArrowsUpDownLeftRight = faArrowsUpDownLeftRight;
  exports.faArrowsUpToLine = faArrowsUpToLine;
  exports.faArrowsV = faArrowsV;
  exports.faAslInterpreting = faAslInterpreting;
  exports.faAssistiveListeningSystems = faAssistiveListeningSystems;
  exports.faAsterisk = faAsterisk;
  exports.faAt = faAt;
  exports.faAtlas = faAtlas;
  exports.faAtom = faAtom;
  exports.faAudioDescription = faAudioDescription;
  exports.faAustralSign = faAustralSign;
  exports.faAutomobile = faAutomobile;
  exports.faAward = faAward;
  exports.faB = faB;
  exports.faBaby = faBaby;
  exports.faBabyCarriage = faBabyCarriage;
  exports.faBackspace = faBackspace;
  exports.faBackward = faBackward;
  exports.faBackwardFast = faBackwardFast;
  exports.faBackwardStep = faBackwardStep;
  exports.faBacon = faBacon;
  exports.faBacteria = faBacteria;
  exports.faBacterium = faBacterium;
  exports.faBagShopping = faBagShopping;
  exports.faBahai = faBahai;
  exports.faBahtSign = faBahtSign;
  exports.faBalanceScale = faBalanceScale;
  exports.faBalanceScaleLeft = faBalanceScaleLeft;
  exports.faBalanceScaleRight = faBalanceScaleRight;
  exports.faBan = faBan;
  exports.faBanSmoking = faBanSmoking;
  exports.faBandAid = faBandAid;
  exports.faBandage = faBandage;
  exports.faBank = faBank;
  exports.faBarChart = faBarChart;
  exports.faBarcode = faBarcode;
  exports.faBars = faBars;
  exports.faBarsProgress = faBarsProgress;
  exports.faBarsStaggered = faBarsStaggered;
  exports.faBaseball = faBaseball;
  exports.faBaseballBall = faBaseballBall;
  exports.faBaseballBatBall = faBaseballBatBall;
  exports.faBasketShopping = faBasketShopping;
  exports.faBasketball = faBasketball;
  exports.faBasketballBall = faBasketballBall;
  exports.faBath = faBath;
  exports.faBathtub = faBathtub;
  exports.faBattery = faBattery;
  exports.faBattery0 = faBattery0;
  exports.faBattery2 = faBattery2;
  exports.faBattery3 = faBattery3;
  exports.faBattery4 = faBattery4;
  exports.faBattery5 = faBattery5;
  exports.faBatteryCar = faBatteryCar;
  exports.faBatteryEmpty = faBatteryEmpty;
  exports.faBatteryFull = faBatteryFull;
  exports.faBatteryHalf = faBatteryHalf;
  exports.faBatteryQuarter = faBatteryQuarter;
  exports.faBatteryThreeQuarters = faBatteryThreeQuarters;
  exports.faBed = faBed;
  exports.faBedPulse = faBedPulse;
  exports.faBeer = faBeer;
  exports.faBeerMugEmpty = faBeerMugEmpty;
  exports.faBell = faBell;
  exports.faBellConcierge = faBellConcierge;
  exports.faBellSlash = faBellSlash;
  exports.faBezierCurve = faBezierCurve;
  exports.faBible = faBible;
  exports.faBicycle = faBicycle;
  exports.faBiking = faBiking;
  exports.faBinoculars = faBinoculars;
  exports.faBiohazard = faBiohazard;
  exports.faBirthdayCake = faBirthdayCake;
  exports.faBitcoinSign = faBitcoinSign;
  exports.faBlackboard = faBlackboard;
  exports.faBlender = faBlender;
  exports.faBlenderPhone = faBlenderPhone;
  exports.faBlind = faBlind;
  exports.faBlog = faBlog;
  exports.faBold = faBold;
  exports.faBolt = faBolt;
  exports.faBoltLightning = faBoltLightning;
  exports.faBomb = faBomb;
  exports.faBone = faBone;
  exports.faBong = faBong;
  exports.faBook = faBook;
  exports.faBookAtlas = faBookAtlas;
  exports.faBookBible = faBookBible;
  exports.faBookBookmark = faBookBookmark;
  exports.faBookDead = faBookDead;
  exports.faBookJournalWhills = faBookJournalWhills;
  exports.faBookMedical = faBookMedical;
  exports.faBookOpen = faBookOpen;
  exports.faBookOpenReader = faBookOpenReader;
  exports.faBookQuran = faBookQuran;
  exports.faBookReader = faBookReader;
  exports.faBookSkull = faBookSkull;
  exports.faBookTanakh = faBookTanakh;
  exports.faBookmark = faBookmark;
  exports.faBorderAll = faBorderAll;
  exports.faBorderNone = faBorderNone;
  exports.faBorderStyle = faBorderStyle;
  exports.faBorderTopLeft = faBorderTopLeft;
  exports.faBoreHole = faBoreHole;
  exports.faBottleDroplet = faBottleDroplet;
  exports.faBottleWater = faBottleWater;
  exports.faBowlFood = faBowlFood;
  exports.faBowlRice = faBowlRice;
  exports.faBowlingBall = faBowlingBall;
  exports.faBox = faBox;
  exports.faBoxArchive = faBoxArchive;
  exports.faBoxOpen = faBoxOpen;
  exports.faBoxTissue = faBoxTissue;
  exports.faBoxes = faBoxes;
  exports.faBoxesAlt = faBoxesAlt;
  exports.faBoxesPacking = faBoxesPacking;
  exports.faBoxesStacked = faBoxesStacked;
  exports.faBraille = faBraille;
  exports.faBrain = faBrain;
  exports.faBrazilianRealSign = faBrazilianRealSign;
  exports.faBreadSlice = faBreadSlice;
  exports.faBridge = faBridge;
  exports.faBridgeCircleCheck = faBridgeCircleCheck;
  exports.faBridgeCircleExclamation = faBridgeCircleExclamation;
  exports.faBridgeCircleXmark = faBridgeCircleXmark;
  exports.faBridgeLock = faBridgeLock;
  exports.faBridgeWater = faBridgeWater;
  exports.faBriefcase = faBriefcase;
  exports.faBriefcaseClock = faBriefcaseClock;
  exports.faBriefcaseMedical = faBriefcaseMedical;
  exports.faBroadcastTower = faBroadcastTower;
  exports.faBroom = faBroom;
  exports.faBroomBall = faBroomBall;
  exports.faBrush = faBrush;
  exports.faBucket = faBucket;
  exports.faBug = faBug;
  exports.faBugSlash = faBugSlash;
  exports.faBugs = faBugs;
  exports.faBuilding = faBuilding;
  exports.faBuildingCircleArrowRight = faBuildingCircleArrowRight;
  exports.faBuildingCircleCheck = faBuildingCircleCheck;
  exports.faBuildingCircleExclamation = faBuildingCircleExclamation;
  exports.faBuildingCircleXmark = faBuildingCircleXmark;
  exports.faBuildingColumns = faBuildingColumns;
  exports.faBuildingFlag = faBuildingFlag;
  exports.faBuildingLock = faBuildingLock;
  exports.faBuildingNgo = faBuildingNgo;
  exports.faBuildingShield = faBuildingShield;
  exports.faBuildingUn = faBuildingUn;
  exports.faBuildingUser = faBuildingUser;
  exports.faBuildingWheat = faBuildingWheat;
  exports.faBullhorn = faBullhorn;
  exports.faBullseye = faBullseye;
  exports.faBurger = faBurger;
  exports.faBurn = faBurn;
  exports.faBurst = faBurst;
  exports.faBus = faBus;
  exports.faBusAlt = faBusAlt;
  exports.faBusSimple = faBusSimple;
  exports.faBusinessTime = faBusinessTime;
  exports.faC = faC;
  exports.faCab = faCab;
  exports.faCableCar = faCableCar;
  exports.faCake = faCake;
  exports.faCakeCandles = faCakeCandles;
  exports.faCalculator = faCalculator;
  exports.faCalendar = faCalendar;
  exports.faCalendarAlt = faCalendarAlt;
  exports.faCalendarCheck = faCalendarCheck;
  exports.faCalendarDay = faCalendarDay;
  exports.faCalendarDays = faCalendarDays;
  exports.faCalendarMinus = faCalendarMinus;
  exports.faCalendarPlus = faCalendarPlus;
  exports.faCalendarTimes = faCalendarTimes;
  exports.faCalendarWeek = faCalendarWeek;
  exports.faCalendarXmark = faCalendarXmark;
  exports.faCamera = faCamera;
  exports.faCameraAlt = faCameraAlt;
  exports.faCameraRetro = faCameraRetro;
  exports.faCameraRotate = faCameraRotate;
  exports.faCampground = faCampground;
  exports.faCancel = faCancel;
  exports.faCandyCane = faCandyCane;
  exports.faCannabis = faCannabis;
  exports.faCapsules = faCapsules;
  exports.faCar = faCar;
  exports.faCarAlt = faCarAlt;
  exports.faCarBattery = faCarBattery;
  exports.faCarBurst = faCarBurst;
  exports.faCarCrash = faCarCrash;
  exports.faCarOn = faCarOn;
  exports.faCarRear = faCarRear;
  exports.faCarSide = faCarSide;
  exports.faCarTunnel = faCarTunnel;
  exports.faCaravan = faCaravan;
  exports.faCaretDown = faCaretDown;
  exports.faCaretLeft = faCaretLeft;
  exports.faCaretRight = faCaretRight;
  exports.faCaretSquareDown = faCaretSquareDown;
  exports.faCaretSquareLeft = faCaretSquareLeft;
  exports.faCaretSquareRight = faCaretSquareRight;
  exports.faCaretSquareUp = faCaretSquareUp;
  exports.faCaretUp = faCaretUp;
  exports.faCarriageBaby = faCarriageBaby;
  exports.faCarrot = faCarrot;
  exports.faCartArrowDown = faCartArrowDown;
  exports.faCartFlatbed = faCartFlatbed;
  exports.faCartFlatbedSuitcase = faCartFlatbedSuitcase;
  exports.faCartPlus = faCartPlus;
  exports.faCartShopping = faCartShopping;
  exports.faCashRegister = faCashRegister;
  exports.faCat = faCat;
  exports.faCediSign = faCediSign;
  exports.faCentSign = faCentSign;
  exports.faCertificate = faCertificate;
  exports.faChain = faChain;
  exports.faChainBroken = faChainBroken;
  exports.faChainSlash = faChainSlash;
  exports.faChair = faChair;
  exports.faChalkboard = faChalkboard;
  exports.faChalkboardTeacher = faChalkboardTeacher;
  exports.faChalkboardUser = faChalkboardUser;
  exports.faChampagneGlasses = faChampagneGlasses;
  exports.faChargingStation = faChargingStation;
  exports.faChartArea = faChartArea;
  exports.faChartBar = faChartBar;
  exports.faChartColumn = faChartColumn;
  exports.faChartGantt = faChartGantt;
  exports.faChartLine = faChartLine;
  exports.faChartPie = faChartPie;
  exports.faChartSimple = faChartSimple;
  exports.faCheck = faCheck;
  exports.faCheckCircle = faCheckCircle;
  exports.faCheckDouble = faCheckDouble;
  exports.faCheckSquare = faCheckSquare;
  exports.faCheckToSlot = faCheckToSlot;
  exports.faCheese = faCheese;
  exports.faChess = faChess;
  exports.faChessBishop = faChessBishop;
  exports.faChessBoard = faChessBoard;
  exports.faChessKing = faChessKing;
  exports.faChessKnight = faChessKnight;
  exports.faChessPawn = faChessPawn;
  exports.faChessQueen = faChessQueen;
  exports.faChessRook = faChessRook;
  exports.faChevronCircleDown = faChevronCircleDown;
  exports.faChevronCircleLeft = faChevronCircleLeft;
  exports.faChevronCircleRight = faChevronCircleRight;
  exports.faChevronCircleUp = faChevronCircleUp;
  exports.faChevronDown = faChevronDown;
  exports.faChevronLeft = faChevronLeft;
  exports.faChevronRight = faChevronRight;
  exports.faChevronUp = faChevronUp;
  exports.faChild = faChild;
  exports.faChildDress = faChildDress;
  exports.faChildReaching = faChildReaching;
  exports.faChildRifle = faChildRifle;
  exports.faChildren = faChildren;
  exports.faChurch = faChurch;
  exports.faCircle = faCircle;
  exports.faCircleArrowDown = faCircleArrowDown;
  exports.faCircleArrowLeft = faCircleArrowLeft;
  exports.faCircleArrowRight = faCircleArrowRight;
  exports.faCircleArrowUp = faCircleArrowUp;
  exports.faCircleCheck = faCircleCheck;
  exports.faCircleChevronDown = faCircleChevronDown;
  exports.faCircleChevronLeft = faCircleChevronLeft;
  exports.faCircleChevronRight = faCircleChevronRight;
  exports.faCircleChevronUp = faCircleChevronUp;
  exports.faCircleDollarToSlot = faCircleDollarToSlot;
  exports.faCircleDot = faCircleDot;
  exports.faCircleDown = faCircleDown;
  exports.faCircleExclamation = faCircleExclamation;
  exports.faCircleH = faCircleH;
  exports.faCircleHalfStroke = faCircleHalfStroke;
  exports.faCircleInfo = faCircleInfo;
  exports.faCircleLeft = faCircleLeft;
  exports.faCircleMinus = faCircleMinus;
  exports.faCircleNodes = faCircleNodes;
  exports.faCircleNotch = faCircleNotch;
  exports.faCirclePause = faCirclePause;
  exports.faCirclePlay = faCirclePlay;
  exports.faCirclePlus = faCirclePlus;
  exports.faCircleQuestion = faCircleQuestion;
  exports.faCircleRadiation = faCircleRadiation;
  exports.faCircleRight = faCircleRight;
  exports.faCircleStop = faCircleStop;
  exports.faCircleUp = faCircleUp;
  exports.faCircleUser = faCircleUser;
  exports.faCircleXmark = faCircleXmark;
  exports.faCity = faCity;
  exports.faClapperboard = faClapperboard;
  exports.faClinicMedical = faClinicMedical;
  exports.faClipboard = faClipboard;
  exports.faClipboardCheck = faClipboardCheck;
  exports.faClipboardList = faClipboardList;
  exports.faClipboardQuestion = faClipboardQuestion;
  exports.faClipboardUser = faClipboardUser;
  exports.faClock = faClock;
  exports.faClockFour = faClockFour;
  exports.faClockRotateLeft = faClockRotateLeft;
  exports.faClone = faClone;
  exports.faClose = faClose;
  exports.faClosedCaptioning = faClosedCaptioning;
  exports.faCloud = faCloud;
  exports.faCloudArrowDown = faCloudArrowDown;
  exports.faCloudArrowUp = faCloudArrowUp;
  exports.faCloudBolt = faCloudBolt;
  exports.faCloudDownload = faCloudDownload;
  exports.faCloudDownloadAlt = faCloudDownloadAlt;
  exports.faCloudMeatball = faCloudMeatball;
  exports.faCloudMoon = faCloudMoon;
  exports.faCloudMoonRain = faCloudMoonRain;
  exports.faCloudRain = faCloudRain;
  exports.faCloudShowersHeavy = faCloudShowersHeavy;
  exports.faCloudShowersWater = faCloudShowersWater;
  exports.faCloudSun = faCloudSun;
  exports.faCloudSunRain = faCloudSunRain;
  exports.faCloudUpload = faCloudUpload;
  exports.faCloudUploadAlt = faCloudUploadAlt;
  exports.faClover = faClover;
  exports.faCny = faCny;
  exports.faCocktail = faCocktail;
  exports.faCode = faCode;
  exports.faCodeBranch = faCodeBranch;
  exports.faCodeCommit = faCodeCommit;
  exports.faCodeCompare = faCodeCompare;
  exports.faCodeFork = faCodeFork;
  exports.faCodeMerge = faCodeMerge;
  exports.faCodePullRequest = faCodePullRequest;
  exports.faCoffee = faCoffee;
  exports.faCog = faCog;
  exports.faCogs = faCogs;
  exports.faCoins = faCoins;
  exports.faColonSign = faColonSign;
  exports.faColumns = faColumns;
  exports.faComment = faComment;
  exports.faCommentAlt = faCommentAlt;
  exports.faCommentDollar = faCommentDollar;
  exports.faCommentDots = faCommentDots;
  exports.faCommentMedical = faCommentMedical;
  exports.faCommentSlash = faCommentSlash;
  exports.faCommentSms = faCommentSms;
  exports.faCommenting = faCommenting;
  exports.faComments = faComments;
  exports.faCommentsDollar = faCommentsDollar;
  exports.faCompactDisc = faCompactDisc;
  exports.faCompass = faCompass;
  exports.faCompassDrafting = faCompassDrafting;
  exports.faCompress = faCompress;
  exports.faCompressAlt = faCompressAlt;
  exports.faCompressArrowsAlt = faCompressArrowsAlt;
  exports.faComputer = faComputer;
  exports.faComputerMouse = faComputerMouse;
  exports.faConciergeBell = faConciergeBell;
  exports.faContactBook = faContactBook;
  exports.faContactCard = faContactCard;
  exports.faCookie = faCookie;
  exports.faCookieBite = faCookieBite;
  exports.faCopy = faCopy;
  exports.faCopyright = faCopyright;
  exports.faCouch = faCouch;
  exports.faCow = faCow;
  exports.faCreditCard = faCreditCard;
  exports.faCreditCardAlt = faCreditCardAlt;
  exports.faCrop = faCrop;
  exports.faCropAlt = faCropAlt;
  exports.faCropSimple = faCropSimple;
  exports.faCross = faCross;
  exports.faCrosshairs = faCrosshairs;
  exports.faCrow = faCrow;
  exports.faCrown = faCrown;
  exports.faCrutch = faCrutch;
  exports.faCruzeiroSign = faCruzeiroSign;
  exports.faCube = faCube;
  exports.faCubes = faCubes;
  exports.faCubesStacked = faCubesStacked;
  exports.faCut = faCut;
  exports.faCutlery = faCutlery;
  exports.faD = faD;
  exports.faDashboard = faDashboard;
  exports.faDatabase = faDatabase;
  exports.faDeaf = faDeaf;
  exports.faDeafness = faDeafness;
  exports.faDedent = faDedent;
  exports.faDeleteLeft = faDeleteLeft;
  exports.faDemocrat = faDemocrat;
  exports.faDesktop = faDesktop;
  exports.faDesktopAlt = faDesktopAlt;
  exports.faDharmachakra = faDharmachakra;
  exports.faDiagnoses = faDiagnoses;
  exports.faDiagramNext = faDiagramNext;
  exports.faDiagramPredecessor = faDiagramPredecessor;
  exports.faDiagramProject = faDiagramProject;
  exports.faDiagramSuccessor = faDiagramSuccessor;
  exports.faDiamond = faDiamond;
  exports.faDiamondTurnRight = faDiamondTurnRight;
  exports.faDice = faDice;
  exports.faDiceD20 = faDiceD20;
  exports.faDiceD6 = faDiceD6;
  exports.faDiceFive = faDiceFive;
  exports.faDiceFour = faDiceFour;
  exports.faDiceOne = faDiceOne;
  exports.faDiceSix = faDiceSix;
  exports.faDiceThree = faDiceThree;
  exports.faDiceTwo = faDiceTwo;
  exports.faDigging = faDigging;
  exports.faDigitalTachograph = faDigitalTachograph;
  exports.faDirections = faDirections;
  exports.faDisease = faDisease;
  exports.faDisplay = faDisplay;
  exports.faDivide = faDivide;
  exports.faDizzy = faDizzy;
  exports.faDna = faDna;
  exports.faDog = faDog;
  exports.faDollar = faDollar;
  exports.faDollarSign = faDollarSign;
  exports.faDolly = faDolly;
  exports.faDollyBox = faDollyBox;
  exports.faDollyFlatbed = faDollyFlatbed;
  exports.faDonate = faDonate;
  exports.faDongSign = faDongSign;
  exports.faDoorClosed = faDoorClosed;
  exports.faDoorOpen = faDoorOpen;
  exports.faDotCircle = faDotCircle;
  exports.faDove = faDove;
  exports.faDownLeftAndUpRightToCenter = faDownLeftAndUpRightToCenter;
  exports.faDownLong = faDownLong;
  exports.faDownload = faDownload;
  exports.faDraftingCompass = faDraftingCompass;
  exports.faDragon = faDragon;
  exports.faDrawPolygon = faDrawPolygon;
  exports.faDriversLicense = faDriversLicense;
  exports.faDroplet = faDroplet;
  exports.faDropletSlash = faDropletSlash;
  exports.faDrum = faDrum;
  exports.faDrumSteelpan = faDrumSteelpan;
  exports.faDrumstickBite = faDrumstickBite;
  exports.faDumbbell = faDumbbell;
  exports.faDumpster = faDumpster;
  exports.faDumpsterFire = faDumpsterFire;
  exports.faDungeon = faDungeon;
  exports.faE = faE;
  exports.faEarDeaf = faEarDeaf;
  exports.faEarListen = faEarListen;
  exports.faEarth = faEarth;
  exports.faEarthAfrica = faEarthAfrica;
  exports.faEarthAmerica = faEarthAmerica;
  exports.faEarthAmericas = faEarthAmericas;
  exports.faEarthAsia = faEarthAsia;
  exports.faEarthEurope = faEarthEurope;
  exports.faEarthOceania = faEarthOceania;
  exports.faEdit = faEdit;
  exports.faEgg = faEgg;
  exports.faEject = faEject;
  exports.faElevator = faElevator;
  exports.faEllipsis = faEllipsis;
  exports.faEllipsisH = faEllipsisH;
  exports.faEllipsisV = faEllipsisV;
  exports.faEllipsisVertical = faEllipsisVertical;
  exports.faEnvelope = faEnvelope;
  exports.faEnvelopeCircleCheck = faEnvelopeCircleCheck;
  exports.faEnvelopeOpen = faEnvelopeOpen;
  exports.faEnvelopeOpenText = faEnvelopeOpenText;
  exports.faEnvelopeSquare = faEnvelopeSquare;
  exports.faEnvelopesBulk = faEnvelopesBulk;
  exports.faEquals = faEquals;
  exports.faEraser = faEraser;
  exports.faEthernet = faEthernet;
  exports.faEur = faEur;
  exports.faEuro = faEuro;
  exports.faEuroSign = faEuroSign;
  exports.faExchange = faExchange;
  exports.faExchangeAlt = faExchangeAlt;
  exports.faExclamation = faExclamation;
  exports.faExclamationCircle = faExclamationCircle;
  exports.faExclamationTriangle = faExclamationTriangle;
  exports.faExpand = faExpand;
  exports.faExpandAlt = faExpandAlt;
  exports.faExpandArrowsAlt = faExpandArrowsAlt;
  exports.faExplosion = faExplosion;
  exports.faExternalLink = faExternalLink;
  exports.faExternalLinkAlt = faExternalLinkAlt;
  exports.faExternalLinkSquare = faExternalLinkSquare;
  exports.faExternalLinkSquareAlt = faExternalLinkSquareAlt;
  exports.faEye = faEye;
  exports.faEyeDropper = faEyeDropper;
  exports.faEyeDropperEmpty = faEyeDropperEmpty;
  exports.faEyeLowVision = faEyeLowVision;
  exports.faEyeSlash = faEyeSlash;
  exports.faEyedropper = faEyedropper;
  exports.faF = faF;
  exports.faFaceAngry = faFaceAngry;
  exports.faFaceDizzy = faFaceDizzy;
  exports.faFaceFlushed = faFaceFlushed;
  exports.faFaceFrown = faFaceFrown;
  exports.faFaceFrownOpen = faFaceFrownOpen;
  exports.faFaceGrimace = faFaceGrimace;
  exports.faFaceGrin = faFaceGrin;
  exports.faFaceGrinBeam = faFaceGrinBeam;
  exports.faFaceGrinBeamSweat = faFaceGrinBeamSweat;
  exports.faFaceGrinHearts = faFaceGrinHearts;
  exports.faFaceGrinSquint = faFaceGrinSquint;
  exports.faFaceGrinSquintTears = faFaceGrinSquintTears;
  exports.faFaceGrinStars = faFaceGrinStars;
  exports.faFaceGrinTears = faFaceGrinTears;
  exports.faFaceGrinTongue = faFaceGrinTongue;
  exports.faFaceGrinTongueSquint = faFaceGrinTongueSquint;
  exports.faFaceGrinTongueWink = faFaceGrinTongueWink;
  exports.faFaceGrinWide = faFaceGrinWide;
  exports.faFaceGrinWink = faFaceGrinWink;
  exports.faFaceKiss = faFaceKiss;
  exports.faFaceKissBeam = faFaceKissBeam;
  exports.faFaceKissWinkHeart = faFaceKissWinkHeart;
  exports.faFaceLaugh = faFaceLaugh;
  exports.faFaceLaughBeam = faFaceLaughBeam;
  exports.faFaceLaughSquint = faFaceLaughSquint;
  exports.faFaceLaughWink = faFaceLaughWink;
  exports.faFaceMeh = faFaceMeh;
  exports.faFaceMehBlank = faFaceMehBlank;
  exports.faFaceRollingEyes = faFaceRollingEyes;
  exports.faFaceSadCry = faFaceSadCry;
  exports.faFaceSadTear = faFaceSadTear;
  exports.faFaceSmile = faFaceSmile;
  exports.faFaceSmileBeam = faFaceSmileBeam;
  exports.faFaceSmileWink = faFaceSmileWink;
  exports.faFaceSurprise = faFaceSurprise;
  exports.faFaceTired = faFaceTired;
  exports.faFan = faFan;
  exports.faFastBackward = faFastBackward;
  exports.faFastForward = faFastForward;
  exports.faFaucet = faFaucet;
  exports.faFaucetDrip = faFaucetDrip;
  exports.faFax = faFax;
  exports.faFeather = faFeather;
  exports.faFeatherAlt = faFeatherAlt;
  exports.faFeatherPointed = faFeatherPointed;
  exports.faFeed = faFeed;
  exports.faFemale = faFemale;
  exports.faFerry = faFerry;
  exports.faFighterJet = faFighterJet;
  exports.faFile = faFile;
  exports.faFileAlt = faFileAlt;
  exports.faFileArchive = faFileArchive;
  exports.faFileArrowDown = faFileArrowDown;
  exports.faFileArrowUp = faFileArrowUp;
  exports.faFileAudio = faFileAudio;
  exports.faFileCircleCheck = faFileCircleCheck;
  exports.faFileCircleExclamation = faFileCircleExclamation;
  exports.faFileCircleMinus = faFileCircleMinus;
  exports.faFileCirclePlus = faFileCirclePlus;
  exports.faFileCircleQuestion = faFileCircleQuestion;
  exports.faFileCircleXmark = faFileCircleXmark;
  exports.faFileClipboard = faFileClipboard;
  exports.faFileCode = faFileCode;
  exports.faFileContract = faFileContract;
  exports.faFileCsv = faFileCsv;
  exports.faFileDownload = faFileDownload;
  exports.faFileEdit = faFileEdit;
  exports.faFileExcel = faFileExcel;
  exports.faFileExport = faFileExport;
  exports.faFileImage = faFileImage;
  exports.faFileImport = faFileImport;
  exports.faFileInvoice = faFileInvoice;
  exports.faFileInvoiceDollar = faFileInvoiceDollar;
  exports.faFileLines = faFileLines;
  exports.faFileMedical = faFileMedical;
  exports.faFileMedicalAlt = faFileMedicalAlt;
  exports.faFilePdf = faFilePdf;
  exports.faFilePen = faFilePen;
  exports.faFilePowerpoint = faFilePowerpoint;
  exports.faFilePrescription = faFilePrescription;
  exports.faFileShield = faFileShield;
  exports.faFileSignature = faFileSignature;
  exports.faFileText = faFileText;
  exports.faFileUpload = faFileUpload;
  exports.faFileVideo = faFileVideo;
  exports.faFileWaveform = faFileWaveform;
  exports.faFileWord = faFileWord;
  exports.faFileZipper = faFileZipper;
  exports.faFill = faFill;
  exports.faFillDrip = faFillDrip;
  exports.faFilm = faFilm;
  exports.faFilter = faFilter;
  exports.faFilterCircleDollar = faFilterCircleDollar;
  exports.faFilterCircleXmark = faFilterCircleXmark;
  exports.faFingerprint = faFingerprint;
  exports.faFire = faFire;
  exports.faFireAlt = faFireAlt;
  exports.faFireBurner = faFireBurner;
  exports.faFireExtinguisher = faFireExtinguisher;
  exports.faFireFlameCurved = faFireFlameCurved;
  exports.faFireFlameSimple = faFireFlameSimple;
  exports.faFirstAid = faFirstAid;
  exports.faFish = faFish;
  exports.faFishFins = faFishFins;
  exports.faFistRaised = faFistRaised;
  exports.faFlag = faFlag;
  exports.faFlagCheckered = faFlagCheckered;
  exports.faFlagUsa = faFlagUsa;
  exports.faFlask = faFlask;
  exports.faFlaskVial = faFlaskVial;
  exports.faFloppyDisk = faFloppyDisk;
  exports.faFlorinSign = faFlorinSign;
  exports.faFlushed = faFlushed;
  exports.faFolder = faFolder;
  exports.faFolderBlank = faFolderBlank;
  exports.faFolderClosed = faFolderClosed;
  exports.faFolderMinus = faFolderMinus;
  exports.faFolderOpen = faFolderOpen;
  exports.faFolderPlus = faFolderPlus;
  exports.faFolderTree = faFolderTree;
  exports.faFont = faFont;
  exports.faFontAwesome = faFontAwesome;
  exports.faFontAwesomeFlag = faFontAwesomeFlag;
  exports.faFontAwesomeLogoFull = faFontAwesomeLogoFull;
  exports.faFootball = faFootball;
  exports.faFootballBall = faFootballBall;
  exports.faForward = faForward;
  exports.faForwardFast = faForwardFast;
  exports.faForwardStep = faForwardStep;
  exports.faFrancSign = faFrancSign;
  exports.faFrog = faFrog;
  exports.faFrown = faFrown;
  exports.faFrownOpen = faFrownOpen;
  exports.faFunnelDollar = faFunnelDollar;
  exports.faFutbol = faFutbol;
  exports.faFutbolBall = faFutbolBall;
  exports.faG = faG;
  exports.faGamepad = faGamepad;
  exports.faGasPump = faGasPump;
  exports.faGauge = faGauge;
  exports.faGaugeHigh = faGaugeHigh;
  exports.faGaugeMed = faGaugeMed;
  exports.faGaugeSimple = faGaugeSimple;
  exports.faGaugeSimpleHigh = faGaugeSimpleHigh;
  exports.faGaugeSimpleMed = faGaugeSimpleMed;
  exports.faGavel = faGavel;
  exports.faGbp = faGbp;
  exports.faGear = faGear;
  exports.faGears = faGears;
  exports.faGem = faGem;
  exports.faGenderless = faGenderless;
  exports.faGhost = faGhost;
  exports.faGift = faGift;
  exports.faGifts = faGifts;
  exports.faGlassCheers = faGlassCheers;
  exports.faGlassMartini = faGlassMartini;
  exports.faGlassMartiniAlt = faGlassMartiniAlt;
  exports.faGlassWater = faGlassWater;
  exports.faGlassWaterDroplet = faGlassWaterDroplet;
  exports.faGlassWhiskey = faGlassWhiskey;
  exports.faGlasses = faGlasses;
  exports.faGlobe = faGlobe;
  exports.faGlobeAfrica = faGlobeAfrica;
  exports.faGlobeAmericas = faGlobeAmericas;
  exports.faGlobeAsia = faGlobeAsia;
  exports.faGlobeEurope = faGlobeEurope;
  exports.faGlobeOceania = faGlobeOceania;
  exports.faGolfBall = faGolfBall;
  exports.faGolfBallTee = faGolfBallTee;
  exports.faGopuram = faGopuram;
  exports.faGraduationCap = faGraduationCap;
  exports.faGreaterThan = faGreaterThan;
  exports.faGreaterThanEqual = faGreaterThanEqual;
  exports.faGrimace = faGrimace;
  exports.faGrin = faGrin;
  exports.faGrinAlt = faGrinAlt;
  exports.faGrinBeam = faGrinBeam;
  exports.faGrinBeamSweat = faGrinBeamSweat;
  exports.faGrinHearts = faGrinHearts;
  exports.faGrinSquint = faGrinSquint;
  exports.faGrinSquintTears = faGrinSquintTears;
  exports.faGrinStars = faGrinStars;
  exports.faGrinTears = faGrinTears;
  exports.faGrinTongue = faGrinTongue;
  exports.faGrinTongueSquint = faGrinTongueSquint;
  exports.faGrinTongueWink = faGrinTongueWink;
  exports.faGrinWink = faGrinWink;
  exports.faGrip = faGrip;
  exports.faGripHorizontal = faGripHorizontal;
  exports.faGripLines = faGripLines;
  exports.faGripLinesVertical = faGripLinesVertical;
  exports.faGripVertical = faGripVertical;
  exports.faGroupArrowsRotate = faGroupArrowsRotate;
  exports.faGuaraniSign = faGuaraniSign;
  exports.faGuitar = faGuitar;
  exports.faGun = faGun;
  exports.faH = faH;
  exports.faHSquare = faHSquare;
  exports.faHamburger = faHamburger;
  exports.faHammer = faHammer;
  exports.faHamsa = faHamsa;
  exports.faHand = faHand;
  exports.faHandBackFist = faHandBackFist;
  exports.faHandDots = faHandDots;
  exports.faHandFist = faHandFist;
  exports.faHandHolding = faHandHolding;
  exports.faHandHoldingDollar = faHandHoldingDollar;
  exports.faHandHoldingDroplet = faHandHoldingDroplet;
  exports.faHandHoldingHand = faHandHoldingHand;
  exports.faHandHoldingHeart = faHandHoldingHeart;
  exports.faHandHoldingMedical = faHandHoldingMedical;
  exports.faHandHoldingUsd = faHandHoldingUsd;
  exports.faHandHoldingWater = faHandHoldingWater;
  exports.faHandLizard = faHandLizard;
  exports.faHandMiddleFinger = faHandMiddleFinger;
  exports.faHandPaper = faHandPaper;
  exports.faHandPeace = faHandPeace;
  exports.faHandPointDown = faHandPointDown;
  exports.faHandPointLeft = faHandPointLeft;
  exports.faHandPointRight = faHandPointRight;
  exports.faHandPointUp = faHandPointUp;
  exports.faHandPointer = faHandPointer;
  exports.faHandRock = faHandRock;
  exports.faHandScissors = faHandScissors;
  exports.faHandSparkles = faHandSparkles;
  exports.faHandSpock = faHandSpock;
  exports.faHandcuffs = faHandcuffs;
  exports.faHands = faHands;
  exports.faHandsAmericanSignLanguageInterpreting = faHandsAmericanSignLanguageInterpreting;
  exports.faHandsAslInterpreting = faHandsAslInterpreting;
  exports.faHandsBound = faHandsBound;
  exports.faHandsBubbles = faHandsBubbles;
  exports.faHandsClapping = faHandsClapping;
  exports.faHandsHelping = faHandsHelping;
  exports.faHandsHolding = faHandsHolding;
  exports.faHandsHoldingChild = faHandsHoldingChild;
  exports.faHandsHoldingCircle = faHandsHoldingCircle;
  exports.faHandsPraying = faHandsPraying;
  exports.faHandsWash = faHandsWash;
  exports.faHandshake = faHandshake;
  exports.faHandshakeAlt = faHandshakeAlt;
  exports.faHandshakeAltSlash = faHandshakeAltSlash;
  exports.faHandshakeAngle = faHandshakeAngle;
  exports.faHandshakeSimple = faHandshakeSimple;
  exports.faHandshakeSimpleSlash = faHandshakeSimpleSlash;
  exports.faHandshakeSlash = faHandshakeSlash;
  exports.faHanukiah = faHanukiah;
  exports.faHardDrive = faHardDrive;
  exports.faHardHat = faHardHat;
  exports.faHardOfHearing = faHardOfHearing;
  exports.faHashtag = faHashtag;
  exports.faHatCowboy = faHatCowboy;
  exports.faHatCowboySide = faHatCowboySide;
  exports.faHatHard = faHatHard;
  exports.faHatWizard = faHatWizard;
  exports.faHaykal = faHaykal;
  exports.faHdd = faHdd;
  exports.faHeadSideCough = faHeadSideCough;
  exports.faHeadSideCoughSlash = faHeadSideCoughSlash;
  exports.faHeadSideMask = faHeadSideMask;
  exports.faHeadSideVirus = faHeadSideVirus;
  exports.faHeader = faHeader;
  exports.faHeading = faHeading;
  exports.faHeadphones = faHeadphones;
  exports.faHeadphonesAlt = faHeadphonesAlt;
  exports.faHeadphonesSimple = faHeadphonesSimple;
  exports.faHeadset = faHeadset;
  exports.faHeart = faHeart;
  exports.faHeartBroken = faHeartBroken;
  exports.faHeartCircleBolt = faHeartCircleBolt;
  exports.faHeartCircleCheck = faHeartCircleCheck;
  exports.faHeartCircleExclamation = faHeartCircleExclamation;
  exports.faHeartCircleMinus = faHeartCircleMinus;
  exports.faHeartCirclePlus = faHeartCirclePlus;
  exports.faHeartCircleXmark = faHeartCircleXmark;
  exports.faHeartCrack = faHeartCrack;
  exports.faHeartMusicCameraBolt = faHeartMusicCameraBolt;
  exports.faHeartPulse = faHeartPulse;
  exports.faHeartbeat = faHeartbeat;
  exports.faHelicopter = faHelicopter;
  exports.faHelicopterSymbol = faHelicopterSymbol;
  exports.faHelmetSafety = faHelmetSafety;
  exports.faHelmetUn = faHelmetUn;
  exports.faHighlighter = faHighlighter;
  exports.faHiking = faHiking;
  exports.faHillAvalanche = faHillAvalanche;
  exports.faHillRockslide = faHillRockslide;
  exports.faHippo = faHippo;
  exports.faHistory = faHistory;
  exports.faHockeyPuck = faHockeyPuck;
  exports.faHollyBerry = faHollyBerry;
  exports.faHome = faHome;
  exports.faHomeAlt = faHomeAlt;
  exports.faHomeLg = faHomeLg;
  exports.faHomeLgAlt = faHomeLgAlt;
  exports.faHomeUser = faHomeUser;
  exports.faHorse = faHorse;
  exports.faHorseHead = faHorseHead;
  exports.faHospital = faHospital;
  exports.faHospitalAlt = faHospitalAlt;
  exports.faHospitalSymbol = faHospitalSymbol;
  exports.faHospitalUser = faHospitalUser;
  exports.faHospitalWide = faHospitalWide;
  exports.faHotTub = faHotTub;
  exports.faHotTubPerson = faHotTubPerson;
  exports.faHotdog = faHotdog;
  exports.faHotel = faHotel;
  exports.faHourglass = faHourglass;
  exports.faHourglass1 = faHourglass1;
  exports.faHourglass2 = faHourglass2;
  exports.faHourglass3 = faHourglass3;
  exports.faHourglassEmpty = faHourglassEmpty;
  exports.faHourglassEnd = faHourglassEnd;
  exports.faHourglassHalf = faHourglassHalf;
  exports.faHourglassStart = faHourglassStart;
  exports.faHouse = faHouse;
  exports.faHouseChimney = faHouseChimney;
  exports.faHouseChimneyCrack = faHouseChimneyCrack;
  exports.faHouseChimneyMedical = faHouseChimneyMedical;
  exports.faHouseChimneyUser = faHouseChimneyUser;
  exports.faHouseChimneyWindow = faHouseChimneyWindow;
  exports.faHouseCircleCheck = faHouseCircleCheck;
  exports.faHouseCircleExclamation = faHouseCircleExclamation;
  exports.faHouseCircleXmark = faHouseCircleXmark;
  exports.faHouseCrack = faHouseCrack;
  exports.faHouseDamage = faHouseDamage;
  exports.faHouseFire = faHouseFire;
  exports.faHouseFlag = faHouseFlag;
  exports.faHouseFloodWater = faHouseFloodWater;
  exports.faHouseFloodWaterCircleArrowRight = faHouseFloodWaterCircleArrowRight;
  exports.faHouseLaptop = faHouseLaptop;
  exports.faHouseLock = faHouseLock;
  exports.faHouseMedical = faHouseMedical;
  exports.faHouseMedicalCircleCheck = faHouseMedicalCircleCheck;
  exports.faHouseMedicalCircleExclamation = faHouseMedicalCircleExclamation;
  exports.faHouseMedicalCircleXmark = faHouseMedicalCircleXmark;
  exports.faHouseMedicalFlag = faHouseMedicalFlag;
  exports.faHouseSignal = faHouseSignal;
  exports.faHouseTsunami = faHouseTsunami;
  exports.faHouseUser = faHouseUser;
  exports.faHryvnia = faHryvnia;
  exports.faHryvniaSign = faHryvniaSign;
  exports.faHurricane = faHurricane;
  exports.faI = faI;
  exports.faICursor = faICursor;
  exports.faIceCream = faIceCream;
  exports.faIcicles = faIcicles;
  exports.faIcons = faIcons;
  exports.faIdBadge = faIdBadge;
  exports.faIdCard = faIdCard;
  exports.faIdCardAlt = faIdCardAlt;
  exports.faIdCardClip = faIdCardClip;
  exports.faIgloo = faIgloo;
  exports.faIls = faIls;
  exports.faImage = faImage;
  exports.faImagePortrait = faImagePortrait;
  exports.faImages = faImages;
  exports.faInbox = faInbox;
  exports.faIndent = faIndent;
  exports.faIndianRupee = faIndianRupee;
  exports.faIndianRupeeSign = faIndianRupeeSign;
  exports.faIndustry = faIndustry;
  exports.faInfinity = faInfinity;
  exports.faInfo = faInfo;
  exports.faInfoCircle = faInfoCircle;
  exports.faInr = faInr;
  exports.faInstitution = faInstitution;
  exports.faItalic = faItalic;
  exports.faJ = faJ;
  exports.faJar = faJar;
  exports.faJarWheat = faJarWheat;
  exports.faJedi = faJedi;
  exports.faJetFighter = faJetFighter;
  exports.faJetFighterUp = faJetFighterUp;
  exports.faJoint = faJoint;
  exports.faJournalWhills = faJournalWhills;
  exports.faJpy = faJpy;
  exports.faJugDetergent = faJugDetergent;
  exports.faK = faK;
  exports.faKaaba = faKaaba;
  exports.faKey = faKey;
  exports.faKeyboard = faKeyboard;
  exports.faKhanda = faKhanda;
  exports.faKipSign = faKipSign;
  exports.faKiss = faKiss;
  exports.faKissBeam = faKissBeam;
  exports.faKissWinkHeart = faKissWinkHeart;
  exports.faKitMedical = faKitMedical;
  exports.faKitchenSet = faKitchenSet;
  exports.faKiwiBird = faKiwiBird;
  exports.faKrw = faKrw;
  exports.faL = faL;
  exports.faLadderWater = faLadderWater;
  exports.faLandMineOn = faLandMineOn;
  exports.faLandmark = faLandmark;
  exports.faLandmarkAlt = faLandmarkAlt;
  exports.faLandmarkDome = faLandmarkDome;
  exports.faLandmarkFlag = faLandmarkFlag;
  exports.faLanguage = faLanguage;
  exports.faLaptop = faLaptop;
  exports.faLaptopCode = faLaptopCode;
  exports.faLaptopFile = faLaptopFile;
  exports.faLaptopHouse = faLaptopHouse;
  exports.faLaptopMedical = faLaptopMedical;
  exports.faLariSign = faLariSign;
  exports.faLaugh = faLaugh;
  exports.faLaughBeam = faLaughBeam;
  exports.faLaughSquint = faLaughSquint;
  exports.faLaughWink = faLaughWink;
  exports.faLayerGroup = faLayerGroup;
  exports.faLeaf = faLeaf;
  exports.faLeftLong = faLeftLong;
  exports.faLeftRight = faLeftRight;
  exports.faLegal = faLegal;
  exports.faLemon = faLemon;
  exports.faLessThan = faLessThan;
  exports.faLessThanEqual = faLessThanEqual;
  exports.faLevelDown = faLevelDown;
  exports.faLevelDownAlt = faLevelDownAlt;
  exports.faLevelUp = faLevelUp;
  exports.faLevelUpAlt = faLevelUpAlt;
  exports.faLifeRing = faLifeRing;
  exports.faLightbulb = faLightbulb;
  exports.faLineChart = faLineChart;
  exports.faLinesLeaning = faLinesLeaning;
  exports.faLink = faLink;
  exports.faLinkSlash = faLinkSlash;
  exports.faLiraSign = faLiraSign;
  exports.faList = faList;
  exports.faList12 = faList12;
  exports.faListAlt = faListAlt;
  exports.faListCheck = faListCheck;
  exports.faListDots = faListDots;
  exports.faListNumeric = faListNumeric;
  exports.faListOl = faListOl;
  exports.faListSquares = faListSquares;
  exports.faListUl = faListUl;
  exports.faLitecoinSign = faLitecoinSign;
  exports.faLocation = faLocation;
  exports.faLocationArrow = faLocationArrow;
  exports.faLocationCrosshairs = faLocationCrosshairs;
  exports.faLocationDot = faLocationDot;
  exports.faLocationPin = faLocationPin;
  exports.faLocationPinLock = faLocationPinLock;
  exports.faLock = faLock;
  exports.faLockOpen = faLockOpen;
  exports.faLocust = faLocust;
  exports.faLongArrowAltDown = faLongArrowAltDown;
  exports.faLongArrowAltLeft = faLongArrowAltLeft;
  exports.faLongArrowAltRight = faLongArrowAltRight;
  exports.faLongArrowAltUp = faLongArrowAltUp;
  exports.faLongArrowDown = faLongArrowDown;
  exports.faLongArrowLeft = faLongArrowLeft;
  exports.faLongArrowRight = faLongArrowRight;
  exports.faLongArrowUp = faLongArrowUp;
  exports.faLowVision = faLowVision;
  exports.faLuggageCart = faLuggageCart;
  exports.faLungs = faLungs;
  exports.faLungsVirus = faLungsVirus;
  exports.faM = faM;
  exports.faMagic = faMagic;
  exports.faMagicWandSparkles = faMagicWandSparkles;
  exports.faMagnet = faMagnet;
  exports.faMagnifyingGlass = faMagnifyingGlass;
  exports.faMagnifyingGlassArrowRight = faMagnifyingGlassArrowRight;
  exports.faMagnifyingGlassChart = faMagnifyingGlassChart;
  exports.faMagnifyingGlassDollar = faMagnifyingGlassDollar;
  exports.faMagnifyingGlassLocation = faMagnifyingGlassLocation;
  exports.faMagnifyingGlassMinus = faMagnifyingGlassMinus;
  exports.faMagnifyingGlassPlus = faMagnifyingGlassPlus;
  exports.faMailBulk = faMailBulk;
  exports.faMailForward = faMailForward;
  exports.faMailReply = faMailReply;
  exports.faMailReplyAll = faMailReplyAll;
  exports.faMale = faMale;
  exports.faManatSign = faManatSign;
  exports.faMap = faMap;
  exports.faMapLocation = faMapLocation;
  exports.faMapLocationDot = faMapLocationDot;
  exports.faMapMarked = faMapMarked;
  exports.faMapMarkedAlt = faMapMarkedAlt;
  exports.faMapMarker = faMapMarker;
  exports.faMapMarkerAlt = faMapMarkerAlt;
  exports.faMapPin = faMapPin;
  exports.faMapSigns = faMapSigns;
  exports.faMarker = faMarker;
  exports.faMars = faMars;
  exports.faMarsAndVenus = faMarsAndVenus;
  exports.faMarsAndVenusBurst = faMarsAndVenusBurst;
  exports.faMarsDouble = faMarsDouble;
  exports.faMarsStroke = faMarsStroke;
  exports.faMarsStrokeH = faMarsStrokeH;
  exports.faMarsStrokeRight = faMarsStrokeRight;
  exports.faMarsStrokeUp = faMarsStrokeUp;
  exports.faMarsStrokeV = faMarsStrokeV;
  exports.faMartiniGlass = faMartiniGlass;
  exports.faMartiniGlassCitrus = faMartiniGlassCitrus;
  exports.faMartiniGlassEmpty = faMartiniGlassEmpty;
  exports.faMask = faMask;
  exports.faMaskFace = faMaskFace;
  exports.faMaskVentilator = faMaskVentilator;
  exports.faMasksTheater = faMasksTheater;
  exports.faMattressPillow = faMattressPillow;
  exports.faMaximize = faMaximize;
  exports.faMedal = faMedal;
  exports.faMedkit = faMedkit;
  exports.faMeh = faMeh;
  exports.faMehBlank = faMehBlank;
  exports.faMehRollingEyes = faMehRollingEyes;
  exports.faMemory = faMemory;
  exports.faMenorah = faMenorah;
  exports.faMercury = faMercury;
  exports.faMessage = faMessage;
  exports.faMeteor = faMeteor;
  exports.faMicrochip = faMicrochip;
  exports.faMicrophone = faMicrophone;
  exports.faMicrophoneAlt = faMicrophoneAlt;
  exports.faMicrophoneAltSlash = faMicrophoneAltSlash;
  exports.faMicrophoneLines = faMicrophoneLines;
  exports.faMicrophoneLinesSlash = faMicrophoneLinesSlash;
  exports.faMicrophoneSlash = faMicrophoneSlash;
  exports.faMicroscope = faMicroscope;
  exports.faMillSign = faMillSign;
  exports.faMinimize = faMinimize;
  exports.faMinus = faMinus;
  exports.faMinusCircle = faMinusCircle;
  exports.faMinusSquare = faMinusSquare;
  exports.faMitten = faMitten;
  exports.faMobile = faMobile;
  exports.faMobileAlt = faMobileAlt;
  exports.faMobileAndroid = faMobileAndroid;
  exports.faMobileAndroidAlt = faMobileAndroidAlt;
  exports.faMobileButton = faMobileButton;
  exports.faMobilePhone = faMobilePhone;
  exports.faMobileRetro = faMobileRetro;
  exports.faMobileScreen = faMobileScreen;
  exports.faMobileScreenButton = faMobileScreenButton;
  exports.faMoneyBill = faMoneyBill;
  exports.faMoneyBill1 = faMoneyBill1;
  exports.faMoneyBill1Wave = faMoneyBill1Wave;
  exports.faMoneyBillAlt = faMoneyBillAlt;
  exports.faMoneyBillTransfer = faMoneyBillTransfer;
  exports.faMoneyBillTrendUp = faMoneyBillTrendUp;
  exports.faMoneyBillWave = faMoneyBillWave;
  exports.faMoneyBillWaveAlt = faMoneyBillWaveAlt;
  exports.faMoneyBillWheat = faMoneyBillWheat;
  exports.faMoneyBills = faMoneyBills;
  exports.faMoneyCheck = faMoneyCheck;
  exports.faMoneyCheckAlt = faMoneyCheckAlt;
  exports.faMoneyCheckDollar = faMoneyCheckDollar;
  exports.faMonument = faMonument;
  exports.faMoon = faMoon;
  exports.faMortarBoard = faMortarBoard;
  exports.faMortarPestle = faMortarPestle;
  exports.faMosque = faMosque;
  exports.faMosquito = faMosquito;
  exports.faMosquitoNet = faMosquitoNet;
  exports.faMotorcycle = faMotorcycle;
  exports.faMound = faMound;
  exports.faMountain = faMountain;
  exports.faMountainCity = faMountainCity;
  exports.faMountainSun = faMountainSun;
  exports.faMouse = faMouse;
  exports.faMousePointer = faMousePointer;
  exports.faMugHot = faMugHot;
  exports.faMugSaucer = faMugSaucer;
  exports.faMultiply = faMultiply;
  exports.faMuseum = faMuseum;
  exports.faMusic = faMusic;
  exports.faN = faN;
  exports.faNairaSign = faNairaSign;
  exports.faNavicon = faNavicon;
  exports.faNetworkWired = faNetworkWired;
  exports.faNeuter = faNeuter;
  exports.faNewspaper = faNewspaper;
  exports.faNotEqual = faNotEqual;
  exports.faNoteSticky = faNoteSticky;
  exports.faNotesMedical = faNotesMedical;
  exports.faO = faO;
  exports.faObjectGroup = faObjectGroup;
  exports.faObjectUngroup = faObjectUngroup;
  exports.faOilCan = faOilCan;
  exports.faOilWell = faOilWell;
  exports.faOm = faOm;
  exports.faOtter = faOtter;
  exports.faOutdent = faOutdent;
  exports.faP = faP;
  exports.faPager = faPager;
  exports.faPaintBrush = faPaintBrush;
  exports.faPaintRoller = faPaintRoller;
  exports.faPaintbrush = faPaintbrush;
  exports.faPalette = faPalette;
  exports.faPallet = faPallet;
  exports.faPanorama = faPanorama;
  exports.faPaperPlane = faPaperPlane;
  exports.faPaperclip = faPaperclip;
  exports.faParachuteBox = faParachuteBox;
  exports.faParagraph = faParagraph;
  exports.faParking = faParking;
  exports.faPassport = faPassport;
  exports.faPastafarianism = faPastafarianism;
  exports.faPaste = faPaste;
  exports.faPause = faPause;
  exports.faPauseCircle = faPauseCircle;
  exports.faPaw = faPaw;
  exports.faPeace = faPeace;
  exports.faPen = faPen;
  exports.faPenAlt = faPenAlt;
  exports.faPenClip = faPenClip;
  exports.faPenFancy = faPenFancy;
  exports.faPenNib = faPenNib;
  exports.faPenRuler = faPenRuler;
  exports.faPenSquare = faPenSquare;
  exports.faPenToSquare = faPenToSquare;
  exports.faPencil = faPencil;
  exports.faPencilAlt = faPencilAlt;
  exports.faPencilRuler = faPencilRuler;
  exports.faPencilSquare = faPencilSquare;
  exports.faPeopleArrows = faPeopleArrows;
  exports.faPeopleArrowsLeftRight = faPeopleArrowsLeftRight;
  exports.faPeopleCarry = faPeopleCarry;
  exports.faPeopleCarryBox = faPeopleCarryBox;
  exports.faPeopleGroup = faPeopleGroup;
  exports.faPeopleLine = faPeopleLine;
  exports.faPeoplePulling = faPeoplePulling;
  exports.faPeopleRobbery = faPeopleRobbery;
  exports.faPeopleRoof = faPeopleRoof;
  exports.faPepperHot = faPepperHot;
  exports.faPercent = faPercent;
  exports.faPercentage = faPercentage;
  exports.faPerson = faPerson;
  exports.faPersonArrowDownToLine = faPersonArrowDownToLine;
  exports.faPersonArrowUpFromLine = faPersonArrowUpFromLine;
  exports.faPersonBiking = faPersonBiking;
  exports.faPersonBooth = faPersonBooth;
  exports.faPersonBreastfeeding = faPersonBreastfeeding;
  exports.faPersonBurst = faPersonBurst;
  exports.faPersonCane = faPersonCane;
  exports.faPersonChalkboard = faPersonChalkboard;
  exports.faPersonCircleCheck = faPersonCircleCheck;
  exports.faPersonCircleExclamation = faPersonCircleExclamation;
  exports.faPersonCircleMinus = faPersonCircleMinus;
  exports.faPersonCirclePlus = faPersonCirclePlus;
  exports.faPersonCircleQuestion = faPersonCircleQuestion;
  exports.faPersonCircleXmark = faPersonCircleXmark;
  exports.faPersonDigging = faPersonDigging;
  exports.faPersonDotsFromLine = faPersonDotsFromLine;
  exports.faPersonDress = faPersonDress;
  exports.faPersonDressBurst = faPersonDressBurst;
  exports.faPersonDrowning = faPersonDrowning;
  exports.faPersonFalling = faPersonFalling;
  exports.faPersonFallingBurst = faPersonFallingBurst;
  exports.faPersonHalfDress = faPersonHalfDress;
  exports.faPersonHarassing = faPersonHarassing;
  exports.faPersonHiking = faPersonHiking;
  exports.faPersonMilitaryPointing = faPersonMilitaryPointing;
  exports.faPersonMilitaryRifle = faPersonMilitaryRifle;
  exports.faPersonMilitaryToPerson = faPersonMilitaryToPerson;
  exports.faPersonPraying = faPersonPraying;
  exports.faPersonPregnant = faPersonPregnant;
  exports.faPersonRays = faPersonRays;
  exports.faPersonRifle = faPersonRifle;
  exports.faPersonRunning = faPersonRunning;
  exports.faPersonShelter = faPersonShelter;
  exports.faPersonSkating = faPersonSkating;
  exports.faPersonSkiing = faPersonSkiing;
  exports.faPersonSkiingNordic = faPersonSkiingNordic;
  exports.faPersonSnowboarding = faPersonSnowboarding;
  exports.faPersonSwimming = faPersonSwimming;
  exports.faPersonThroughWindow = faPersonThroughWindow;
  exports.faPersonWalking = faPersonWalking;
  exports.faPersonWalkingArrowLoopLeft = faPersonWalkingArrowLoopLeft;
  exports.faPersonWalkingArrowRight = faPersonWalkingArrowRight;
  exports.faPersonWalkingDashedLineArrowRight = faPersonWalkingDashedLineArrowRight;
  exports.faPersonWalkingLuggage = faPersonWalkingLuggage;
  exports.faPersonWalkingWithCane = faPersonWalkingWithCane;
  exports.faPesetaSign = faPesetaSign;
  exports.faPesoSign = faPesoSign;
  exports.faPhone = faPhone;
  exports.faPhoneAlt = faPhoneAlt;
  exports.faPhoneFlip = faPhoneFlip;
  exports.faPhoneSlash = faPhoneSlash;
  exports.faPhoneSquare = faPhoneSquare;
  exports.faPhoneSquareAlt = faPhoneSquareAlt;
  exports.faPhoneVolume = faPhoneVolume;
  exports.faPhotoFilm = faPhotoFilm;
  exports.faPhotoVideo = faPhotoVideo;
  exports.faPieChart = faPieChart;
  exports.faPiggyBank = faPiggyBank;
  exports.faPills = faPills;
  exports.faPingPongPaddleBall = faPingPongPaddleBall;
  exports.faPizzaSlice = faPizzaSlice;
  exports.faPlaceOfWorship = faPlaceOfWorship;
  exports.faPlane = faPlane;
  exports.faPlaneArrival = faPlaneArrival;
  exports.faPlaneCircleCheck = faPlaneCircleCheck;
  exports.faPlaneCircleExclamation = faPlaneCircleExclamation;
  exports.faPlaneCircleXmark = faPlaneCircleXmark;
  exports.faPlaneDeparture = faPlaneDeparture;
  exports.faPlaneLock = faPlaneLock;
  exports.faPlaneSlash = faPlaneSlash;
  exports.faPlaneUp = faPlaneUp;
  exports.faPlantWilt = faPlantWilt;
  exports.faPlateWheat = faPlateWheat;
  exports.faPlay = faPlay;
  exports.faPlayCircle = faPlayCircle;
  exports.faPlug = faPlug;
  exports.faPlugCircleBolt = faPlugCircleBolt;
  exports.faPlugCircleCheck = faPlugCircleCheck;
  exports.faPlugCircleExclamation = faPlugCircleExclamation;
  exports.faPlugCircleMinus = faPlugCircleMinus;
  exports.faPlugCirclePlus = faPlugCirclePlus;
  exports.faPlugCircleXmark = faPlugCircleXmark;
  exports.faPlus = faPlus;
  exports.faPlusCircle = faPlusCircle;
  exports.faPlusMinus = faPlusMinus;
  exports.faPlusSquare = faPlusSquare;
  exports.faPodcast = faPodcast;
  exports.faPoll = faPoll;
  exports.faPollH = faPollH;
  exports.faPoo = faPoo;
  exports.faPooBolt = faPooBolt;
  exports.faPooStorm = faPooStorm;
  exports.faPoop = faPoop;
  exports.faPortrait = faPortrait;
  exports.faPoundSign = faPoundSign;
  exports.faPowerOff = faPowerOff;
  exports.faPray = faPray;
  exports.faPrayingHands = faPrayingHands;
  exports.faPrescription = faPrescription;
  exports.faPrescriptionBottle = faPrescriptionBottle;
  exports.faPrescriptionBottleAlt = faPrescriptionBottleAlt;
  exports.faPrescriptionBottleMedical = faPrescriptionBottleMedical;
  exports.faPrint = faPrint;
  exports.faProcedures = faProcedures;
  exports.faProjectDiagram = faProjectDiagram;
  exports.faPumpMedical = faPumpMedical;
  exports.faPumpSoap = faPumpSoap;
  exports.faPuzzlePiece = faPuzzlePiece;
  exports.faQ = faQ;
  exports.faQrcode = faQrcode;
  exports.faQuestion = faQuestion;
  exports.faQuestionCircle = faQuestionCircle;
  exports.faQuidditch = faQuidditch;
  exports.faQuidditchBroomBall = faQuidditchBroomBall;
  exports.faQuoteLeft = faQuoteLeft;
  exports.faQuoteLeftAlt = faQuoteLeftAlt;
  exports.faQuoteRight = faQuoteRight;
  exports.faQuoteRightAlt = faQuoteRightAlt;
  exports.faQuran = faQuran;
  exports.faR = faR;
  exports.faRadiation = faRadiation;
  exports.faRadiationAlt = faRadiationAlt;
  exports.faRadio = faRadio;
  exports.faRainbow = faRainbow;
  exports.faRandom = faRandom;
  exports.faRankingStar = faRankingStar;
  exports.faReceipt = faReceipt;
  exports.faRecordVinyl = faRecordVinyl;
  exports.faRectangleAd = faRectangleAd;
  exports.faRectangleList = faRectangleList;
  exports.faRectangleTimes = faRectangleTimes;
  exports.faRectangleXmark = faRectangleXmark;
  exports.faRecycle = faRecycle;
  exports.faRedo = faRedo;
  exports.faRedoAlt = faRedoAlt;
  exports.faRefresh = faRefresh;
  exports.faRegistered = faRegistered;
  exports.faRemove = faRemove;
  exports.faRemoveFormat = faRemoveFormat;
  exports.faReorder = faReorder;
  exports.faRepeat = faRepeat;
  exports.faReply = faReply;
  exports.faReplyAll = faReplyAll;
  exports.faRepublican = faRepublican;
  exports.faRestroom = faRestroom;
  exports.faRetweet = faRetweet;
  exports.faRibbon = faRibbon;
  exports.faRightFromBracket = faRightFromBracket;
  exports.faRightLeft = faRightLeft;
  exports.faRightLong = faRightLong;
  exports.faRightToBracket = faRightToBracket;
  exports.faRing = faRing;
  exports.faRmb = faRmb;
  exports.faRoad = faRoad;
  exports.faRoadBarrier = faRoadBarrier;
  exports.faRoadBridge = faRoadBridge;
  exports.faRoadCircleCheck = faRoadCircleCheck;
  exports.faRoadCircleExclamation = faRoadCircleExclamation;
  exports.faRoadCircleXmark = faRoadCircleXmark;
  exports.faRoadLock = faRoadLock;
  exports.faRoadSpikes = faRoadSpikes;
  exports.faRobot = faRobot;
  exports.faRocket = faRocket;
  exports.faRodAsclepius = faRodAsclepius;
  exports.faRodSnake = faRodSnake;
  exports.faRotate = faRotate;
  exports.faRotateBack = faRotateBack;
  exports.faRotateBackward = faRotateBackward;
  exports.faRotateForward = faRotateForward;
  exports.faRotateLeft = faRotateLeft;
  exports.faRotateRight = faRotateRight;
  exports.faRouble = faRouble;
  exports.faRoute = faRoute;
  exports.faRss = faRss;
  exports.faRssSquare = faRssSquare;
  exports.faRub = faRub;
  exports.faRuble = faRuble;
  exports.faRubleSign = faRubleSign;
  exports.faRug = faRug;
  exports.faRuler = faRuler;
  exports.faRulerCombined = faRulerCombined;
  exports.faRulerHorizontal = faRulerHorizontal;
  exports.faRulerVertical = faRulerVertical;
  exports.faRunning = faRunning;
  exports.faRupee = faRupee;
  exports.faRupeeSign = faRupeeSign;
  exports.faRupiahSign = faRupiahSign;
  exports.faS = faS;
  exports.faSackDollar = faSackDollar;
  exports.faSackXmark = faSackXmark;
  exports.faSadCry = faSadCry;
  exports.faSadTear = faSadTear;
  exports.faSailboat = faSailboat;
  exports.faSatellite = faSatellite;
  exports.faSatelliteDish = faSatelliteDish;
  exports.faSave = faSave;
  exports.faScaleBalanced = faScaleBalanced;
  exports.faScaleUnbalanced = faScaleUnbalanced;
  exports.faScaleUnbalancedFlip = faScaleUnbalancedFlip;
  exports.faSchool = faSchool;
  exports.faSchoolCircleCheck = faSchoolCircleCheck;
  exports.faSchoolCircleExclamation = faSchoolCircleExclamation;
  exports.faSchoolCircleXmark = faSchoolCircleXmark;
  exports.faSchoolFlag = faSchoolFlag;
  exports.faSchoolLock = faSchoolLock;
  exports.faScissors = faScissors;
  exports.faScrewdriver = faScrewdriver;
  exports.faScrewdriverWrench = faScrewdriverWrench;
  exports.faScroll = faScroll;
  exports.faScrollTorah = faScrollTorah;
  exports.faSdCard = faSdCard;
  exports.faSearch = faSearch;
  exports.faSearchDollar = faSearchDollar;
  exports.faSearchLocation = faSearchLocation;
  exports.faSearchMinus = faSearchMinus;
  exports.faSearchPlus = faSearchPlus;
  exports.faSection = faSection;
  exports.faSeedling = faSeedling;
  exports.faServer = faServer;
  exports.faShapes = faShapes;
  exports.faShare = faShare;
  exports.faShareAlt = faShareAlt;
  exports.faShareAltSquare = faShareAltSquare;
  exports.faShareFromSquare = faShareFromSquare;
  exports.faShareNodes = faShareNodes;
  exports.faShareSquare = faShareSquare;
  exports.faSheetPlastic = faSheetPlastic;
  exports.faShekel = faShekel;
  exports.faShekelSign = faShekelSign;
  exports.faSheqel = faSheqel;
  exports.faSheqelSign = faSheqelSign;
  exports.faShield = faShield;
  exports.faShieldAlt = faShieldAlt;
  exports.faShieldBlank = faShieldBlank;
  exports.faShieldCat = faShieldCat;
  exports.faShieldDog = faShieldDog;
  exports.faShieldHalved = faShieldHalved;
  exports.faShieldHeart = faShieldHeart;
  exports.faShieldVirus = faShieldVirus;
  exports.faShip = faShip;
  exports.faShippingFast = faShippingFast;
  exports.faShirt = faShirt;
  exports.faShoePrints = faShoePrints;
  exports.faShop = faShop;
  exports.faShopLock = faShopLock;
  exports.faShopSlash = faShopSlash;
  exports.faShoppingBag = faShoppingBag;
  exports.faShoppingBasket = faShoppingBasket;
  exports.faShoppingCart = faShoppingCart;
  exports.faShower = faShower;
  exports.faShrimp = faShrimp;
  exports.faShuffle = faShuffle;
  exports.faShuttleSpace = faShuttleSpace;
  exports.faShuttleVan = faShuttleVan;
  exports.faSign = faSign;
  exports.faSignHanging = faSignHanging;
  exports.faSignIn = faSignIn;
  exports.faSignInAlt = faSignInAlt;
  exports.faSignLanguage = faSignLanguage;
  exports.faSignOut = faSignOut;
  exports.faSignOutAlt = faSignOutAlt;
  exports.faSignal = faSignal;
  exports.faSignal5 = faSignal5;
  exports.faSignalPerfect = faSignalPerfect;
  exports.faSignature = faSignature;
  exports.faSigning = faSigning;
  exports.faSignsPost = faSignsPost;
  exports.faSimCard = faSimCard;
  exports.faSink = faSink;
  exports.faSitemap = faSitemap;
  exports.faSkating = faSkating;
  exports.faSkiing = faSkiing;
  exports.faSkiingNordic = faSkiingNordic;
  exports.faSkull = faSkull;
  exports.faSkullCrossbones = faSkullCrossbones;
  exports.faSlash = faSlash;
  exports.faSleigh = faSleigh;
  exports.faSliders = faSliders;
  exports.faSlidersH = faSlidersH;
  exports.faSmile = faSmile;
  exports.faSmileBeam = faSmileBeam;
  exports.faSmileWink = faSmileWink;
  exports.faSmog = faSmog;
  exports.faSmoking = faSmoking;
  exports.faSmokingBan = faSmokingBan;
  exports.faSms = faSms;
  exports.faSnowboarding = faSnowboarding;
  exports.faSnowflake = faSnowflake;
  exports.faSnowman = faSnowman;
  exports.faSnowplow = faSnowplow;
  exports.faSoap = faSoap;
  exports.faSoccerBall = faSoccerBall;
  exports.faSocks = faSocks;
  exports.faSolarPanel = faSolarPanel;
  exports.faSort = faSort;
  exports.faSortAlphaAsc = faSortAlphaAsc;
  exports.faSortAlphaDesc = faSortAlphaDesc;
  exports.faSortAlphaDown = faSortAlphaDown;
  exports.faSortAlphaDownAlt = faSortAlphaDownAlt;
  exports.faSortAlphaUp = faSortAlphaUp;
  exports.faSortAlphaUpAlt = faSortAlphaUpAlt;
  exports.faSortAmountAsc = faSortAmountAsc;
  exports.faSortAmountDesc = faSortAmountDesc;
  exports.faSortAmountDown = faSortAmountDown;
  exports.faSortAmountDownAlt = faSortAmountDownAlt;
  exports.faSortAmountUp = faSortAmountUp;
  exports.faSortAmountUpAlt = faSortAmountUpAlt;
  exports.faSortAsc = faSortAsc;
  exports.faSortDesc = faSortDesc;
  exports.faSortDown = faSortDown;
  exports.faSortNumericAsc = faSortNumericAsc;
  exports.faSortNumericDesc = faSortNumericDesc;
  exports.faSortNumericDown = faSortNumericDown;
  exports.faSortNumericDownAlt = faSortNumericDownAlt;
  exports.faSortNumericUp = faSortNumericUp;
  exports.faSortNumericUpAlt = faSortNumericUpAlt;
  exports.faSortUp = faSortUp;
  exports.faSpa = faSpa;
  exports.faSpaceShuttle = faSpaceShuttle;
  exports.faSpaghettiMonsterFlying = faSpaghettiMonsterFlying;
  exports.faSpellCheck = faSpellCheck;
  exports.faSpider = faSpider;
  exports.faSpinner = faSpinner;
  exports.faSplotch = faSplotch;
  exports.faSpoon = faSpoon;
  exports.faSprayCan = faSprayCan;
  exports.faSprayCanSparkles = faSprayCanSparkles;
  exports.faSprout = faSprout;
  exports.faSquare = faSquare;
  exports.faSquareArrowUpRight = faSquareArrowUpRight;
  exports.faSquareCaretDown = faSquareCaretDown;
  exports.faSquareCaretLeft = faSquareCaretLeft;
  exports.faSquareCaretRight = faSquareCaretRight;
  exports.faSquareCaretUp = faSquareCaretUp;
  exports.faSquareCheck = faSquareCheck;
  exports.faSquareEnvelope = faSquareEnvelope;
  exports.faSquareFull = faSquareFull;
  exports.faSquareH = faSquareH;
  exports.faSquareMinus = faSquareMinus;
  exports.faSquareNfi = faSquareNfi;
  exports.faSquareParking = faSquareParking;
  exports.faSquarePen = faSquarePen;
  exports.faSquarePersonConfined = faSquarePersonConfined;
  exports.faSquarePhone = faSquarePhone;
  exports.faSquarePhoneFlip = faSquarePhoneFlip;
  exports.faSquarePlus = faSquarePlus;
  exports.faSquarePollHorizontal = faSquarePollHorizontal;
  exports.faSquarePollVertical = faSquarePollVertical;
  exports.faSquareRootAlt = faSquareRootAlt;
  exports.faSquareRootVariable = faSquareRootVariable;
  exports.faSquareRss = faSquareRss;
  exports.faSquareShareNodes = faSquareShareNodes;
  exports.faSquareUpRight = faSquareUpRight;
  exports.faSquareVirus = faSquareVirus;
  exports.faSquareXmark = faSquareXmark;
  exports.faStaffAesculapius = faStaffAesculapius;
  exports.faStaffSnake = faStaffSnake;
  exports.faStairs = faStairs;
  exports.faStamp = faStamp;
  exports.faStapler = faStapler;
  exports.faStar = faStar;
  exports.faStarAndCrescent = faStarAndCrescent;
  exports.faStarHalf = faStarHalf;
  exports.faStarHalfAlt = faStarHalfAlt;
  exports.faStarHalfStroke = faStarHalfStroke;
  exports.faStarOfDavid = faStarOfDavid;
  exports.faStarOfLife = faStarOfLife;
  exports.faStepBackward = faStepBackward;
  exports.faStepForward = faStepForward;
  exports.faSterlingSign = faSterlingSign;
  exports.faStethoscope = faStethoscope;
  exports.faStickyNote = faStickyNote;
  exports.faStop = faStop;
  exports.faStopCircle = faStopCircle;
  exports.faStopwatch = faStopwatch;
  exports.faStopwatch20 = faStopwatch20;
  exports.faStore = faStore;
  exports.faStoreAlt = faStoreAlt;
  exports.faStoreAltSlash = faStoreAltSlash;
  exports.faStoreSlash = faStoreSlash;
  exports.faStream = faStream;
  exports.faStreetView = faStreetView;
  exports.faStrikethrough = faStrikethrough;
  exports.faStroopwafel = faStroopwafel;
  exports.faSubscript = faSubscript;
  exports.faSubtract = faSubtract;
  exports.faSubway = faSubway;
  exports.faSuitcase = faSuitcase;
  exports.faSuitcaseMedical = faSuitcaseMedical;
  exports.faSuitcaseRolling = faSuitcaseRolling;
  exports.faSun = faSun;
  exports.faSunPlantWilt = faSunPlantWilt;
  exports.faSuperscript = faSuperscript;
  exports.faSurprise = faSurprise;
  exports.faSwatchbook = faSwatchbook;
  exports.faSwimmer = faSwimmer;
  exports.faSwimmingPool = faSwimmingPool;
  exports.faSynagogue = faSynagogue;
  exports.faSync = faSync;
  exports.faSyncAlt = faSyncAlt;
  exports.faSyringe = faSyringe;
  exports.faT = faT;
  exports.faTShirt = faTShirt;
  exports.faTable = faTable;
  exports.faTableCells = faTableCells;
  exports.faTableCellsLarge = faTableCellsLarge;
  exports.faTableColumns = faTableColumns;
  exports.faTableList = faTableList;
  exports.faTableTennis = faTableTennis;
  exports.faTableTennisPaddleBall = faTableTennisPaddleBall;
  exports.faTablet = faTablet;
  exports.faTabletAlt = faTabletAlt;
  exports.faTabletAndroid = faTabletAndroid;
  exports.faTabletButton = faTabletButton;
  exports.faTabletScreenButton = faTabletScreenButton;
  exports.faTablets = faTablets;
  exports.faTachographDigital = faTachographDigital;
  exports.faTachometer = faTachometer;
  exports.faTachometerAlt = faTachometerAlt;
  exports.faTachometerAltAverage = faTachometerAltAverage;
  exports.faTachometerAltFast = faTachometerAltFast;
  exports.faTachometerAverage = faTachometerAverage;
  exports.faTachometerFast = faTachometerFast;
  exports.faTag = faTag;
  exports.faTags = faTags;
  exports.faTanakh = faTanakh;
  exports.faTape = faTape;
  exports.faTarp = faTarp;
  exports.faTarpDroplet = faTarpDroplet;
  exports.faTasks = faTasks;
  exports.faTasksAlt = faTasksAlt;
  exports.faTaxi = faTaxi;
  exports.faTeeth = faTeeth;
  exports.faTeethOpen = faTeethOpen;
  exports.faTeletype = faTeletype;
  exports.faTelevision = faTelevision;
  exports.faTemperature0 = faTemperature0;
  exports.faTemperature1 = faTemperature1;
  exports.faTemperature2 = faTemperature2;
  exports.faTemperature3 = faTemperature3;
  exports.faTemperature4 = faTemperature4;
  exports.faTemperatureArrowDown = faTemperatureArrowDown;
  exports.faTemperatureArrowUp = faTemperatureArrowUp;
  exports.faTemperatureDown = faTemperatureDown;
  exports.faTemperatureEmpty = faTemperatureEmpty;
  exports.faTemperatureFull = faTemperatureFull;
  exports.faTemperatureHalf = faTemperatureHalf;
  exports.faTemperatureHigh = faTemperatureHigh;
  exports.faTemperatureLow = faTemperatureLow;
  exports.faTemperatureQuarter = faTemperatureQuarter;
  exports.faTemperatureThreeQuarters = faTemperatureThreeQuarters;
  exports.faTemperatureUp = faTemperatureUp;
  exports.faTenge = faTenge;
  exports.faTengeSign = faTengeSign;
  exports.faTent = faTent;
  exports.faTentArrowDownToLine = faTentArrowDownToLine;
  exports.faTentArrowLeftRight = faTentArrowLeftRight;
  exports.faTentArrowTurnLeft = faTentArrowTurnLeft;
  exports.faTentArrowsDown = faTentArrowsDown;
  exports.faTents = faTents;
  exports.faTerminal = faTerminal;
  exports.faTextHeight = faTextHeight;
  exports.faTextSlash = faTextSlash;
  exports.faTextWidth = faTextWidth;
  exports.faTh = faTh;
  exports.faThLarge = faThLarge;
  exports.faThList = faThList;
  exports.faTheaterMasks = faTheaterMasks;
  exports.faThermometer = faThermometer;
  exports.faThermometer0 = faThermometer0;
  exports.faThermometer1 = faThermometer1;
  exports.faThermometer2 = faThermometer2;
  exports.faThermometer3 = faThermometer3;
  exports.faThermometer4 = faThermometer4;
  exports.faThermometerEmpty = faThermometerEmpty;
  exports.faThermometerFull = faThermometerFull;
  exports.faThermometerHalf = faThermometerHalf;
  exports.faThermometerQuarter = faThermometerQuarter;
  exports.faThermometerThreeQuarters = faThermometerThreeQuarters;
  exports.faThumbTack = faThumbTack;
  exports.faThumbsDown = faThumbsDown;
  exports.faThumbsUp = faThumbsUp;
  exports.faThumbtack = faThumbtack;
  exports.faThunderstorm = faThunderstorm;
  exports.faTicket = faTicket;
  exports.faTicketAlt = faTicketAlt;
  exports.faTicketSimple = faTicketSimple;
  exports.faTimeline = faTimeline;
  exports.faTimes = faTimes;
  exports.faTimesCircle = faTimesCircle;
  exports.faTimesRectangle = faTimesRectangle;
  exports.faTimesSquare = faTimesSquare;
  exports.faTint = faTint;
  exports.faTintSlash = faTintSlash;
  exports.faTired = faTired;
  exports.faToggleOff = faToggleOff;
  exports.faToggleOn = faToggleOn;
  exports.faToilet = faToilet;
  exports.faToiletPaper = faToiletPaper;
  exports.faToiletPaperSlash = faToiletPaperSlash;
  exports.faToiletPortable = faToiletPortable;
  exports.faToiletsPortable = faToiletsPortable;
  exports.faToolbox = faToolbox;
  exports.faTools = faTools;
  exports.faTooth = faTooth;
  exports.faTorah = faTorah;
  exports.faToriiGate = faToriiGate;
  exports.faTornado = faTornado;
  exports.faTowerBroadcast = faTowerBroadcast;
  exports.faTowerCell = faTowerCell;
  exports.faTowerObservation = faTowerObservation;
  exports.faTractor = faTractor;
  exports.faTrademark = faTrademark;
  exports.faTrafficLight = faTrafficLight;
  exports.faTrailer = faTrailer;
  exports.faTrain = faTrain;
  exports.faTrainSubway = faTrainSubway;
  exports.faTrainTram = faTrainTram;
  exports.faTram = faTram;
  exports.faTransgender = faTransgender;
  exports.faTransgenderAlt = faTransgenderAlt;
  exports.faTrash = faTrash;
  exports.faTrashAlt = faTrashAlt;
  exports.faTrashArrowUp = faTrashArrowUp;
  exports.faTrashCan = faTrashCan;
  exports.faTrashCanArrowUp = faTrashCanArrowUp;
  exports.faTrashRestore = faTrashRestore;
  exports.faTrashRestoreAlt = faTrashRestoreAlt;
  exports.faTree = faTree;
  exports.faTreeCity = faTreeCity;
  exports.faTriangleCircleSquare = faTriangleCircleSquare;
  exports.faTriangleExclamation = faTriangleExclamation;
  exports.faTrophy = faTrophy;
  exports.faTrowel = faTrowel;
  exports.faTrowelBricks = faTrowelBricks;
  exports.faTruck = faTruck;
  exports.faTruckArrowRight = faTruckArrowRight;
  exports.faTruckDroplet = faTruckDroplet;
  exports.faTruckFast = faTruckFast;
  exports.faTruckField = faTruckField;
  exports.faTruckFieldUn = faTruckFieldUn;
  exports.faTruckFront = faTruckFront;
  exports.faTruckLoading = faTruckLoading;
  exports.faTruckMedical = faTruckMedical;
  exports.faTruckMonster = faTruckMonster;
  exports.faTruckMoving = faTruckMoving;
  exports.faTruckPickup = faTruckPickup;
  exports.faTruckPlane = faTruckPlane;
  exports.faTruckRampBox = faTruckRampBox;
  exports.faTry = faTry;
  exports.faTshirt = faTshirt;
  exports.faTty = faTty;
  exports.faTurkishLira = faTurkishLira;
  exports.faTurkishLiraSign = faTurkishLiraSign;
  exports.faTurnDown = faTurnDown;
  exports.faTurnUp = faTurnUp;
  exports.faTv = faTv;
  exports.faTvAlt = faTvAlt;
  exports.faU = faU;
  exports.faUmbrella = faUmbrella;
  exports.faUmbrellaBeach = faUmbrellaBeach;
  exports.faUnderline = faUnderline;
  exports.faUndo = faUndo;
  exports.faUndoAlt = faUndoAlt;
  exports.faUniversalAccess = faUniversalAccess;
  exports.faUniversity = faUniversity;
  exports.faUnlink = faUnlink;
  exports.faUnlock = faUnlock;
  exports.faUnlockAlt = faUnlockAlt;
  exports.faUnlockKeyhole = faUnlockKeyhole;
  exports.faUnsorted = faUnsorted;
  exports.faUpDown = faUpDown;
  exports.faUpDownLeftRight = faUpDownLeftRight;
  exports.faUpLong = faUpLong;
  exports.faUpRightAndDownLeftFromCenter = faUpRightAndDownLeftFromCenter;
  exports.faUpRightFromSquare = faUpRightFromSquare;
  exports.faUpload = faUpload;
  exports.faUsd = faUsd;
  exports.faUser = faUser;
  exports.faUserAlt = faUserAlt;
  exports.faUserAltSlash = faUserAltSlash;
  exports.faUserAstronaut = faUserAstronaut;
  exports.faUserCheck = faUserCheck;
  exports.faUserCircle = faUserCircle;
  exports.faUserClock = faUserClock;
  exports.faUserCog = faUserCog;
  exports.faUserDoctor = faUserDoctor;
  exports.faUserEdit = faUserEdit;
  exports.faUserFriends = faUserFriends;
  exports.faUserGear = faUserGear;
  exports.faUserGraduate = faUserGraduate;
  exports.faUserGroup = faUserGroup;
  exports.faUserInjured = faUserInjured;
  exports.faUserLarge = faUserLarge;
  exports.faUserLargeSlash = faUserLargeSlash;
  exports.faUserLock = faUserLock;
  exports.faUserMd = faUserMd;
  exports.faUserMinus = faUserMinus;
  exports.faUserNinja = faUserNinja;
  exports.faUserNurse = faUserNurse;
  exports.faUserPen = faUserPen;
  exports.faUserPlus = faUserPlus;
  exports.faUserSecret = faUserSecret;
  exports.faUserShield = faUserShield;
  exports.faUserSlash = faUserSlash;
  exports.faUserTag = faUserTag;
  exports.faUserTie = faUserTie;
  exports.faUserTimes = faUserTimes;
  exports.faUserXmark = faUserXmark;
  exports.faUsers = faUsers;
  exports.faUsersBetweenLines = faUsersBetweenLines;
  exports.faUsersCog = faUsersCog;
  exports.faUsersGear = faUsersGear;
  exports.faUsersLine = faUsersLine;
  exports.faUsersRays = faUsersRays;
  exports.faUsersRectangle = faUsersRectangle;
  exports.faUsersSlash = faUsersSlash;
  exports.faUsersViewfinder = faUsersViewfinder;
  exports.faUtensilSpoon = faUtensilSpoon;
  exports.faUtensils = faUtensils;
  exports.faV = faV;
  exports.faVanShuttle = faVanShuttle;
  exports.faVault = faVault;
  exports.faVcard = faVcard;
  exports.faVectorSquare = faVectorSquare;
  exports.faVenus = faVenus;
  exports.faVenusDouble = faVenusDouble;
  exports.faVenusMars = faVenusMars;
  exports.faVest = faVest;
  exports.faVestPatches = faVestPatches;
  exports.faVial = faVial;
  exports.faVialCircleCheck = faVialCircleCheck;
  exports.faVialVirus = faVialVirus;
  exports.faVials = faVials;
  exports.faVideo = faVideo;
  exports.faVideoCamera = faVideoCamera;
  exports.faVideoSlash = faVideoSlash;
  exports.faVihara = faVihara;
  exports.faVirus = faVirus;
  exports.faVirusCovid = faVirusCovid;
  exports.faVirusCovidSlash = faVirusCovidSlash;
  exports.faVirusSlash = faVirusSlash;
  exports.faViruses = faViruses;
  exports.faVoicemail = faVoicemail;
  exports.faVolcano = faVolcano;
  exports.faVolleyball = faVolleyball;
  exports.faVolleyballBall = faVolleyballBall;
  exports.faVolumeControlPhone = faVolumeControlPhone;
  exports.faVolumeDown = faVolumeDown;
  exports.faVolumeHigh = faVolumeHigh;
  exports.faVolumeLow = faVolumeLow;
  exports.faVolumeMute = faVolumeMute;
  exports.faVolumeOff = faVolumeOff;
  exports.faVolumeTimes = faVolumeTimes;
  exports.faVolumeUp = faVolumeUp;
  exports.faVolumeXmark = faVolumeXmark;
  exports.faVoteYea = faVoteYea;
  exports.faVrCardboard = faVrCardboard;
  exports.faW = faW;
  exports.faWalkieTalkie = faWalkieTalkie;
  exports.faWalking = faWalking;
  exports.faWallet = faWallet;
  exports.faWandMagic = faWandMagic;
  exports.faWandMagicSparkles = faWandMagicSparkles;
  exports.faWandSparkles = faWandSparkles;
  exports.faWarehouse = faWarehouse;
  exports.faWarning = faWarning;
  exports.faWater = faWater;
  exports.faWaterLadder = faWaterLadder;
  exports.faWaveSquare = faWaveSquare;
  exports.faWeight = faWeight;
  exports.faWeightHanging = faWeightHanging;
  exports.faWeightScale = faWeightScale;
  exports.faWheatAlt = faWheatAlt;
  exports.faWheatAwn = faWheatAwn;
  exports.faWheatAwnCircleExclamation = faWheatAwnCircleExclamation;
  exports.faWheelchair = faWheelchair;
  exports.faWheelchairAlt = faWheelchairAlt;
  exports.faWheelchairMove = faWheelchairMove;
  exports.faWhiskeyGlass = faWhiskeyGlass;
  exports.faWifi = faWifi;
  exports.faWifi3 = faWifi3;
  exports.faWifiStrong = faWifiStrong;
  exports.faWind = faWind;
  exports.faWindowClose = faWindowClose;
  exports.faWindowMaximize = faWindowMaximize;
  exports.faWindowMinimize = faWindowMinimize;
  exports.faWindowRestore = faWindowRestore;
  exports.faWineBottle = faWineBottle;
  exports.faWineGlass = faWineGlass;
  exports.faWineGlassAlt = faWineGlassAlt;
  exports.faWineGlassEmpty = faWineGlassEmpty;
  exports.faWon = faWon;
  exports.faWonSign = faWonSign;
  exports.faWorm = faWorm;
  exports.faWrench = faWrench;
  exports.faX = faX;
  exports.faXRay = faXRay;
  exports.faXmark = faXmark;
  exports.faXmarkCircle = faXmarkCircle;
  exports.faXmarkSquare = faXmarkSquare;
  exports.faXmarksLines = faXmarksLines;
  exports.faY = faY;
  exports.faYen = faYen;
  exports.faYenSign = faYenSign;
  exports.faYinYang = faYinYang;
  exports.faZ = faZ;
  exports.faZap = faZap;

  Object.defineProperty(exports, '__esModule', { value: true });
});

(function () {
  var _fontawesome = require('@fortawesome/fontawesome-svg-core');
  var pack;

  pack = require('@fortawesome/free-solid-svg-icons');
  delete pack['default'];
  _fontawesome.library.add(pack);
})();
('use strict');

var fontawesomeSvgCore = require('@fortawesome/fontawesome-svg-core');

// turn off adding styles to the app's HTML as these styles are included in the build already
fontawesomeSvgCore.config.autoAddCss = false;
if (typeof FastBoot === 'undefined') {
  var preferNative = false;
  (function (originalGlobal) {
    define('fetch', ['exports', 'ember', 'rsvp'], function (
      exports,
      Ember__module,
      RSVP__module,
    ) {
      'use strict';

      var Ember =
        'default' in Ember__module ? Ember__module['default'] : Ember__module;
      var RSVP =
        'default' in RSVP__module ? RSVP__module['default'] : RSVP__module;
      var Promise = RSVP.Promise;
      var supportProps = [
        'FormData',
        'FileReader',
        'Blob',
        'URLSearchParams',
        'Symbol',
        'ArrayBuffer',
      ];
      var polyfillProps = [
        'fetch',
        'Headers',
        'Request',
        'Response',
        'AbortController',
      ];
      var combinedProps = supportProps;

      if (preferNative) {
        combinedProps = supportProps.concat(polyfillProps);
      }

      combinedProps.forEach(function (prop) {
        if (originalGlobal[prop]) {
          Object.defineProperty(exports, prop, {
            configurable: true,
            get: function () {
              return originalGlobal[prop];
            },
            set: function (v) {
              originalGlobal[prop] = v;
            },
          });
        }
      }); // shadow github/fetch global object
      // https://github.com/github/fetch/blob/v3.4.0/fetch.js

      var globalThis = exports; // shadow mo/abortcontroller-polyfill global object
      // https://github.com/mo/abortcontroller-polyfill/blob/v1.4.0/src/abortcontroller-polyfill.js

      var self = exports;

      (function () {
        'use strict';

        class Emitter {
          constructor() {
            Object.defineProperty(this, 'listeners', {
              value: {},
              writable: true,
              configurable: true,
            });
          }

          addEventListener(type, callback, options) {
            if (!(type in this.listeners)) {
              this.listeners[type] = [];
            }

            this.listeners[type].push({
              callback,
              options,
            });
          }

          removeEventListener(type, callback) {
            if (!(type in this.listeners)) {
              return;
            }

            const stack = this.listeners[type];

            for (let i = 0, l = stack.length; i < l; i++) {
              if (stack[i].callback === callback) {
                stack.splice(i, 1);
                return;
              }
            }
          }

          dispatchEvent(event) {
            if (!(event.type in this.listeners)) {
              return;
            }

            const stack = this.listeners[event.type];
            const stackToCall = stack.slice();

            for (let i = 0, l = stackToCall.length; i < l; i++) {
              const listener = stackToCall[i];

              try {
                listener.callback.call(this, event);
              } catch (e) {
                Promise.resolve().then(() => {
                  throw e;
                });
              }

              if (listener.options && listener.options.once) {
                this.removeEventListener(event.type, listener.callback);
              }
            }

            return !event.defaultPrevented;
          }
        }

        class AbortSignal extends Emitter {
          constructor() {
            super(); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
            // constructor has failed to run, then "this.listeners" will still be undefined and then we call
            // the parent constructor directly instead as a workaround. For general details, see babel bug:
            // https://github.com/babel/babel/issues/3041
            // This hack was added as a fix for the issue described here:
            // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

            if (!this.listeners) {
              Emitter.call(this);
            } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl

            Object.defineProperty(this, 'aborted', {
              value: false,
              writable: true,
              configurable: true,
            });
            Object.defineProperty(this, 'onabort', {
              value: null,
              writable: true,
              configurable: true,
            });
          }

          toString() {
            return '[object AbortSignal]';
          }

          dispatchEvent(event) {
            if (event.type === 'abort') {
              this.aborted = true;

              if (typeof this.onabort === 'function') {
                this.onabort.call(this, event);
              }
            }

            super.dispatchEvent(event);
          }
        }

        class AbortController {
          constructor() {
            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController()) to be [] for compat with the native impl
            Object.defineProperty(this, 'signal', {
              value: new AbortSignal(),
              writable: true,
              configurable: true,
            });
          }

          abort() {
            let event;

            try {
              event = new Event('abort');
            } catch (e) {
              if (typeof document !== 'undefined') {
                if (!document.createEvent) {
                  // For Internet Explorer 8:
                  event = document.createEventObject();
                  event.type = 'abort';
                } else {
                  // For Internet Explorer 11:
                  event = document.createEvent('Event');
                  event.initEvent('abort', false, false);
                }
              } else {
                // Fallback where document isn't available:
                event = {
                  type: 'abort',
                  bubbles: false,
                  cancelable: false,
                };
              }
            }

            this.signal.dispatchEvent(event);
          }

          toString() {
            return '[object AbortController]';
          }
        }

        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
          // These are necessary to make sure that we get correct output for:
          // Object.prototype.toString.call(new AbortController())
          AbortController.prototype[Symbol.toStringTag] = 'AbortController';
          AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
        }

        function polyfillNeeded(self) {
          if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
            console.log(
              '__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill',
            );
            return true;
          } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
          // defining window.Request, and this polyfill need to work on top of unfetch
          // so the below feature detection needs the !self.AbortController part.
          // The Request.prototype check is also needed because Safari versions 11.1.2
          // up to and including 12.1.x has a window.AbortController present but still
          // does NOT correctly implement abortable fetch:
          // https://bugs.webkit.org/show_bug.cgi?id=174980#c2

          return (
            (typeof self.Request === 'function' &&
              !self.Request.prototype.hasOwnProperty('signal')) ||
            !self.AbortController
          );
        }

        (function (self) {
          if (!polyfillNeeded(self)) {
            return;
          }

          self.AbortController = AbortController;
          self.AbortSignal = AbortSignal;
        })(typeof self !== 'undefined' ? self : global);
      })();

      var WHATWGFetch = (function (exports) {
        'use strict';

        var global =
          (typeof globalThis !== 'undefined' && globalThis) ||
          (typeof self !== 'undefined' && self) ||
          (typeof global !== 'undefined' && global);
        var support = {
          searchParams: 'URLSearchParams' in global,
          iterable: 'Symbol' in global && 'iterator' in Symbol,
          blob:
            'FileReader' in global &&
            'Blob' in global &&
            (function () {
              try {
                new Blob();
                return true;
              } catch (e) {
                return false;
              }
            })(),
          formData: 'FormData' in global,
          arrayBuffer: 'ArrayBuffer' in global,
        };

        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }

        if (support.arrayBuffer) {
          var viewClasses = [
            '[object Int8Array]',
            '[object Uint8Array]',
            '[object Uint8ClampedArray]',
            '[object Int16Array]',
            '[object Uint16Array]',
            '[object Int32Array]',
            '[object Uint32Array]',
            '[object Float32Array]',
            '[object Float64Array]',
          ];

          var isArrayBufferView =
            ArrayBuffer.isView ||
            function (obj) {
              return (
                obj &&
                viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
              );
            };
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name);
          }

          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError(
              'Invalid character in header field name: "' + name + '"',
            );
          }

          return name.toLowerCase();
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value);
          }

          return value;
        } // Build a destructive iterator for the value list

        function iteratorFor(items) {
          var iterator = {
            next: function () {
              var value = items.shift();
              return {
                done: value === undefined,
                value: value,
              };
            },
          };

          if (support.iterable) {
            iterator[Symbol.iterator] = function () {
              return iterator;
            };
          }

          return iterator;
        }

        function Headers(headers) {
          this.map = {};

          if (headers instanceof Headers) {
            headers.forEach(function (value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function (header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function (name) {
              this.append(name, headers[name]);
            }, this);
          }
        }

        Headers.prototype.append = function (name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ', ' + value : value;
        };

        Headers.prototype['delete'] = function (name) {
          delete this.map[normalizeName(name)];
        };

        Headers.prototype.get = function (name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };

        Headers.prototype.has = function (name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };

        Headers.prototype.set = function (name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };

        Headers.prototype.forEach = function (callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };

        Headers.prototype.keys = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };

        Headers.prototype.values = function () {
          var items = [];
          this.forEach(function (value) {
            items.push(value);
          });
          return iteratorFor(items);
        };

        Headers.prototype.entries = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
          }

          body.bodyUsed = true;
        }

        function fileReaderReady(reader) {
          return new Promise(function (resolve, reject) {
            reader.onload = function () {
              resolve(reader.result);
            };

            reader.onerror = function () {
              reject(reader.error);
            };
          });
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }

        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }

          return chars.join('');
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }

        function Body() {
          this.bodyUsed = false;

          this._initBody = function (body) {
            /*
            fetch-mock wraps the Response object in an ES6 Proxy to
            provide useful test harness features such as flush. However, on
            ES5 browsers without fetch or Proxy support pollyfills must be used;
            the proxy-pollyfill is unable to proxy an attribute unless it exists
            on the object before the Proxy is created. This change ensures
            Response.bodyUsed exists on the instance, while maintaining the
            semantic of setting Request.bodyUsed in the constructor before
            _initBody is called.
          */
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;

            if (!body) {
              this._bodyText = '';
            } else if (typeof body === 'string') {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (
              support.formData &&
              FormData.prototype.isPrototypeOf(body)
            ) {
              this._bodyFormData = body;
            } else if (
              support.searchParams &&
              URLSearchParams.prototype.isPrototypeOf(body)
            ) {
              this._bodyText = body.toString();
            } else if (
              support.arrayBuffer &&
              support.blob &&
              isDataView(body)
            ) {
              this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (
              support.arrayBuffer &&
              (ArrayBuffer.prototype.isPrototypeOf(body) ||
                isArrayBufferView(body))
            ) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8');
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type);
              } else if (
                support.searchParams &&
                URLSearchParams.prototype.isPrototypeOf(body)
              ) {
                this.headers.set(
                  'content-type',
                  'application/x-www-form-urlencoded;charset=UTF-8',
                );
              }
            }
          };

          if (support.blob) {
            this.blob = function () {
              var rejected = consumed(this);

              if (rejected) {
                return rejected;
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob');
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };

            this.arrayBuffer = function () {
              if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);

                if (isConsumed) {
                  return isConsumed;
                }

                if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                  return Promise.resolve(
                    this._bodyArrayBuffer.buffer.slice(
                      this._bodyArrayBuffer.byteOffset,
                      this._bodyArrayBuffer.byteOffset +
                        this._bodyArrayBuffer.byteLength,
                    ),
                  );
                } else {
                  return Promise.resolve(this._bodyArrayBuffer);
                }
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }

          this.text = function () {
            var rejected = consumed(this);

            if (rejected) {
              return rejected;
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(
                readArrayBufferAsText(this._bodyArrayBuffer),
              );
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text');
            } else {
              return Promise.resolve(this._bodyText);
            }
          };

          if (support.formData) {
            this.formData = function () {
              return this.text().then(decode);
            };
          }

          this.json = function () {
            return this.text().then(JSON.parse);
          };

          return this;
        } // HTTP methods whose capitalization should be normalized

        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }

        function Request(input, options) {
          if (!(this instanceof Request)) {
            throw new TypeError(
              'Please use the "new" operator, this DOM object constructor cannot be called as a function.',
            );
          }

          options = options || {};
          var body = options.body;

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read');
            }

            this.url = input.url;
            this.credentials = input.credentials;

            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }

            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;

            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }

          this.credentials =
            options.credentials || this.credentials || 'same-origin';

          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }

          this.method = normalizeMethod(options.method || this.method || 'GET');
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
          }

          this._initBody(body);

          if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
              // Search for a '_' parameter in the query string
              var reParamSearch = /([?&])_=[^&]*/;

              if (reParamSearch.test(this.url)) {
                // If it already exists then set the value with the current time
                this.url = this.url.replace(
                  reParamSearch,
                  '$1_=' + new Date().getTime(),
                );
              } else {
                // Otherwise add a new '_' parameter to the end with the current time
                var reQueryString = /\?/;
                this.url +=
                  (reQueryString.test(this.url) ? '&' : '?') +
                  '_=' +
                  new Date().getTime();
              }
            }
          }
        }

        Request.prototype.clone = function () {
          return new Request(this, {
            body: this._bodyInit,
          });
        };

        function decode(body) {
          var form = new FormData();
          body
            .trim()
            .split('&')
            .forEach(function (bytes) {
              if (bytes) {
                var split = bytes.split('=');
                var name = split.shift().replace(/\+/g, ' ');
                var value = split.join('=').replace(/\+/g, ' ');
                form.append(
                  decodeURIComponent(name),
                  decodeURIComponent(value),
                );
              }
            });
          return form;
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
          // https://tools.ietf.org/html/rfc7230#section-3.2

          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' '); // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
          // https://github.com/github/fetch/issues/748
          // https://github.com/zloirock/core-js/issues/751

          preProcessedHeaders
            .split('\r')
            .map(function (header) {
              return header.indexOf('\n') === 0
                ? header.substr(1, header.length)
                : header;
            })
            .forEach(function (line) {
              var parts = line.split(':');
              var key = parts.shift().trim();

              if (key) {
                var value = parts.join(':').trim();
                headers.append(key, value);
              }
            });
          return headers;
        }

        Body.call(Request.prototype);

        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError(
              'Please use the "new" operator, this DOM object constructor cannot be called as a function.',
            );
          }

          if (!options) {
            options = {};
          }

          this.type = 'default';
          this.status = options.status === undefined ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText =
            options.statusText === undefined ? '' : '' + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || '';

          this._initBody(bodyInit);
        }

        Body.call(Response.prototype);

        Response.prototype.clone = function () {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url,
          });
        };

        Response.error = function () {
          var response = new Response(null, {
            status: 0,
            statusText: '',
          });
          response.type = 'error';
          return response;
        };

        var redirectStatuses = [301, 302, 303, 307, 308];

        Response.redirect = function (url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
          }

          return new Response(null, {
            status: status,
            headers: {
              location: url,
            },
          });
        };

        exports.DOMException = global.DOMException;

        try {
          new exports.DOMException();
        } catch (err) {
          exports.DOMException = function (message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };

          exports.DOMException.prototype = Object.create(Error.prototype);
          exports.DOMException.prototype.constructor = exports.DOMException;
        }

        function fetch(input, init) {
          return new Promise(function (resolve, reject) {
            var request = new Request(input, init);

            if (request.signal && request.signal.aborted) {
              return reject(new exports.DOMException('Aborted', 'AbortError'));
            }

            var xhr = new XMLHttpRequest();

            function abortXhr() {
              xhr.abort();
            }

            xhr.onload = function () {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || ''),
              };
              options.url =
                'responseURL' in xhr
                  ? xhr.responseURL
                  : options.headers.get('X-Request-URL');
              var body = 'response' in xhr ? xhr.response : xhr.responseText;
              setTimeout(function () {
                resolve(new Response(body, options));
              }, 0);
            };

            xhr.onerror = function () {
              setTimeout(function () {
                reject(new TypeError('Network request failed'));
              }, 0);
            };

            xhr.ontimeout = function () {
              setTimeout(function () {
                reject(new TypeError('Network request failed'));
              }, 0);
            };

            xhr.onabort = function () {
              setTimeout(function () {
                reject(new exports.DOMException('Aborted', 'AbortError'));
              }, 0);
            };

            function fixUrl(url) {
              try {
                return url === '' && global.location.href
                  ? global.location.href
                  : url;
              } catch (e) {
                return url;
              }
            }

            xhr.open(request.method, fixUrl(request.url), true);

            if (request.credentials === 'include') {
              xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
              xhr.withCredentials = false;
            }

            if ('responseType' in xhr) {
              if (support.blob) {
                xhr.responseType = 'blob';
              } else if (
                support.arrayBuffer &&
                request.headers.get('Content-Type') &&
                request.headers
                  .get('Content-Type')
                  .indexOf('application/octet-stream') !== -1
              ) {
                xhr.responseType = 'arraybuffer';
              }
            }

            if (
              init &&
              typeof init.headers === 'object' &&
              !(init.headers instanceof Headers)
            ) {
              Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
            } else {
              request.headers.forEach(function (value, name) {
                xhr.setRequestHeader(name, value);
              });
            }

            if (request.signal) {
              request.signal.addEventListener('abort', abortXhr);

              xhr.onreadystatechange = function () {
                // DONE (success or failure)
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener('abort', abortXhr);
                }
              };
            }

            xhr.send(
              typeof request._bodyInit === 'undefined'
                ? null
                : request._bodyInit,
            );
          });
        }

        fetch.polyfill = true;

        if (!global.fetch) {
          global.fetch = fetch;
          global.Headers = Headers;
          global.Request = Request;
          global.Response = Response;
        }

        exports.Headers = Headers;
        exports.Request = Request;
        exports.Response = Response;
        exports.fetch = fetch;
        return exports;
      })({});

      if (!globalThis.fetch) {
        throw new Error(
          'fetch is not defined - maybe your browser targets are not covering everything you need?',
        );
      }

      var pending = 0;

      function decrement(result) {
        pending--;
        return result;
      }

      if (Ember.Test) {
        Ember.Test.registerWaiter(function () {
          return pending === 0;
        });

        exports['default'] = function () {
          pending++;
          return exports.fetch.apply(originalGlobal, arguments).then(
            function (response) {
              response.clone().blob().then(decrement, decrement);
              return response;
            },
            function (reason) {
              decrement(reason);
              throw reason;
            },
          );
        };
      } else {
        exports['default'] = exports.fetch;
      }

      supportProps.forEach(function (prop) {
        delete exports[prop];
      });
    });
  })(
    (typeof window !== 'undefined' && window) ||
      (typeof globalThis !== 'undefined' && globalThis) ||
      (typeof self !== 'undefined' && self) ||
      (typeof global !== 'undefined' && global),
  );
}
if (typeof FastBoot === 'undefined') {
  /*
   * Toastr
   * Copyright 2012-2015
   * Authors: John Papa, Hans Fjällemark, and Tim Ferrell.
   * All Rights Reserved.
   * Use, reproduction, distribution, and modification of this code is subject to the terms and
   * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
   *
   * ARIA Support: Greta Krafsig
   *
   * Project: https://github.com/CodeSeven/toastr
   */
  /* global define */
  (function (define) {
    define(['jquery'], function ($) {
      return (function () {
        var $container;
        var listener;
        var toastId = 0;
        var toastType = {
          error: 'error',
          info: 'info',
          success: 'success',
          warning: 'warning',
        };

        var toastr = {
          clear: clear,
          remove: remove,
          error: error,
          getContainer: getContainer,
          info: info,
          options: {},
          subscribe: subscribe,
          success: success,
          version: '2.1.4',
          warning: warning,
        };

        var previousToast;

        return toastr;

        ////////////////

        function error(message, title, optionsOverride) {
          return notify({
            type: toastType.error,
            iconClass: getOptions().iconClasses.error,
            message: message,
            optionsOverride: optionsOverride,
            title: title,
          });
        }

        function getContainer(options, create) {
          if (!options) {
            options = getOptions();
          }
          $container = $('#' + options.containerId);
          if ($container.length) {
            return $container;
          }
          if (create) {
            $container = createContainer(options);
          }
          return $container;
        }

        function info(message, title, optionsOverride) {
          return notify({
            type: toastType.info,
            iconClass: getOptions().iconClasses.info,
            message: message,
            optionsOverride: optionsOverride,
            title: title,
          });
        }

        function subscribe(callback) {
          listener = callback;
        }

        function success(message, title, optionsOverride) {
          return notify({
            type: toastType.success,
            iconClass: getOptions().iconClasses.success,
            message: message,
            optionsOverride: optionsOverride,
            title: title,
          });
        }

        function warning(message, title, optionsOverride) {
          return notify({
            type: toastType.warning,
            iconClass: getOptions().iconClasses.warning,
            message: message,
            optionsOverride: optionsOverride,
            title: title,
          });
        }

        function clear($toastElement, clearOptions) {
          var options = getOptions();
          if (!$container) {
            getContainer(options);
          }
          if (!clearToast($toastElement, options, clearOptions)) {
            clearContainer(options);
          }
        }

        function remove($toastElement) {
          var options = getOptions();
          if (!$container) {
            getContainer(options);
          }
          if ($toastElement && $(':focus', $toastElement).length === 0) {
            removeToast($toastElement);
            return;
          }
          if ($container.children().length) {
            $container.remove();
          }
        }

        // internal functions

        function clearContainer(options) {
          var toastsToClear = $container.children();
          for (var i = toastsToClear.length - 1; i >= 0; i--) {
            clearToast($(toastsToClear[i]), options);
          }
        }

        function clearToast($toastElement, options, clearOptions) {
          var force =
            clearOptions && clearOptions.force ? clearOptions.force : false;
          if (
            $toastElement &&
            (force || $(':focus', $toastElement).length === 0)
          ) {
            $toastElement[options.hideMethod]({
              duration: options.hideDuration,
              easing: options.hideEasing,
              complete: function () {
                removeToast($toastElement);
              },
            });
            return true;
          }
          return false;
        }

        function createContainer(options) {
          $container = $('<div/>')
            .attr('id', options.containerId)
            .addClass(options.positionClass);

          $container.appendTo($(options.target));
          return $container;
        }

        function getDefaults() {
          return {
            tapToDismiss: true,
            toastClass: 'toast',
            containerId: 'toast-container',
            debug: false,

            showMethod: 'fadeIn', //fadeIn, slideDown, and show are built into jQuery
            showDuration: 300,
            showEasing: 'swing', //swing and linear are built into jQuery
            onShown: undefined,
            hideMethod: 'fadeOut',
            hideDuration: 1000,
            hideEasing: 'swing',
            onHidden: undefined,
            closeMethod: false,
            closeDuration: false,
            closeEasing: false,
            closeOnHover: true,

            extendedTimeOut: 1000,
            iconClasses: {
              error: 'toast-error',
              info: 'toast-info',
              success: 'toast-success',
              warning: 'toast-warning',
            },
            iconClass: 'toast-info',
            positionClass: 'toast-top-right',
            timeOut: 5000, // Set timeOut and extendedTimeOut to 0 to make it sticky
            titleClass: 'toast-title',
            messageClass: 'toast-message',
            escapeHtml: false,
            target: 'body',
            closeHtml: '<button type="button">&times;</button>',
            closeClass: 'toast-close-button',
            newestOnTop: true,
            preventDuplicates: false,
            progressBar: false,
            progressClass: 'toast-progress',
            rtl: false,
          };
        }

        function publish(args) {
          if (!listener) {
            return;
          }
          listener(args);
        }

        function notify(map) {
          var options = getOptions();
          var iconClass = map.iconClass || options.iconClass;

          if (typeof map.optionsOverride !== 'undefined') {
            options = $.extend(options, map.optionsOverride);
            iconClass = map.optionsOverride.iconClass || iconClass;
          }

          if (shouldExit(options, map)) {
            return;
          }

          toastId++;

          $container = getContainer(options, true);

          var intervalId = null;
          var $toastElement = $('<div/>');
          var $titleElement = $('<div/>');
          var $messageElement = $('<div/>');
          var $progressElement = $('<div/>');
          var $closeElement = $(options.closeHtml);
          var progressBar = {
            intervalId: null,
            hideEta: null,
            maxHideTime: null,
          };
          var response = {
            toastId: toastId,
            state: 'visible',
            startTime: new Date(),
            options: options,
            map: map,
          };

          personalizeToast();

          displayToast();

          handleEvents();

          publish(response);

          if (options.debug && console) {
            console.log(response);
          }

          return $toastElement;

          function escapeHtml(source) {
            if (source == null) {
              source = '';
            }

            return source
              .replace(/&/g, '&amp;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&#39;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');
          }

          function personalizeToast() {
            setIcon();
            setTitle();
            setMessage();
            setCloseButton();
            setProgressBar();
            setRTL();
            setSequence();
            setAria();
          }

          function setAria() {
            var ariaValue = '';
            switch (map.iconClass) {
              case 'toast-success':
              case 'toast-info':
                ariaValue = 'polite';
                break;
              default:
                ariaValue = 'assertive';
            }
            $toastElement.attr('aria-live', ariaValue);
          }

          function handleEvents() {
            if (options.closeOnHover) {
              $toastElement.hover(stickAround, delayedHideToast);
            }

            if (!options.onclick && options.tapToDismiss) {
              $toastElement.click(hideToast);
            }

            if (options.closeButton && $closeElement) {
              $closeElement.click(function (event) {
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (
                  event.cancelBubble !== undefined &&
                  event.cancelBubble !== true
                ) {
                  event.cancelBubble = true;
                }

                if (options.onCloseClick) {
                  options.onCloseClick(event);
                }

                hideToast(true);
              });
            }

            if (options.onclick) {
              $toastElement.click(function (event) {
                options.onclick(event);
                hideToast();
              });
            }
          }

          function displayToast() {
            $toastElement.hide();

            $toastElement[options.showMethod]({
              duration: options.showDuration,
              easing: options.showEasing,
              complete: options.onShown,
            });

            if (options.timeOut > 0) {
              intervalId = setTimeout(hideToast, options.timeOut);
              progressBar.maxHideTime = parseFloat(options.timeOut);
              progressBar.hideEta =
                new Date().getTime() + progressBar.maxHideTime;
              if (options.progressBar) {
                progressBar.intervalId = setInterval(updateProgress, 10);
              }
            }
          }

          function setIcon() {
            if (map.iconClass) {
              $toastElement.addClass(options.toastClass).addClass(iconClass);
            }
          }

          function setSequence() {
            if (options.newestOnTop) {
              $container.prepend($toastElement);
            } else {
              $container.append($toastElement);
            }
          }

          function setTitle() {
            if (map.title) {
              var suffix = map.title;
              if (options.escapeHtml) {
                suffix = escapeHtml(map.title);
              }
              $titleElement.append(suffix).addClass(options.titleClass);
              $toastElement.append($titleElement);
            }
          }

          function setMessage() {
            if (map.message) {
              var suffix = map.message;
              if (options.escapeHtml) {
                suffix = escapeHtml(map.message);
              }
              $messageElement.append(suffix).addClass(options.messageClass);
              $toastElement.append($messageElement);
            }
          }

          function setCloseButton() {
            if (options.closeButton) {
              $closeElement.addClass(options.closeClass).attr('role', 'button');
              $toastElement.prepend($closeElement);
            }
          }

          function setProgressBar() {
            if (options.progressBar) {
              $progressElement.addClass(options.progressClass);
              $toastElement.prepend($progressElement);
            }
          }

          function setRTL() {
            if (options.rtl) {
              $toastElement.addClass('rtl');
            }
          }

          function shouldExit(options, map) {
            if (options.preventDuplicates) {
              if (map.message === previousToast) {
                return true;
              } else {
                previousToast = map.message;
              }
            }
            return false;
          }

          function hideToast(override) {
            var method =
              override && options.closeMethod !== false
                ? options.closeMethod
                : options.hideMethod;
            var duration =
              override && options.closeDuration !== false
                ? options.closeDuration
                : options.hideDuration;
            var easing =
              override && options.closeEasing !== false
                ? options.closeEasing
                : options.hideEasing;
            if ($(':focus', $toastElement).length && !override) {
              return;
            }
            clearTimeout(progressBar.intervalId);
            return $toastElement[method]({
              duration: duration,
              easing: easing,
              complete: function () {
                removeToast($toastElement);
                clearTimeout(intervalId);
                if (options.onHidden && response.state !== 'hidden') {
                  options.onHidden();
                }
                response.state = 'hidden';
                response.endTime = new Date();
                publish(response);
              },
            });
          }

          function delayedHideToast() {
            if (options.timeOut > 0 || options.extendedTimeOut > 0) {
              intervalId = setTimeout(hideToast, options.extendedTimeOut);
              progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
              progressBar.hideEta =
                new Date().getTime() + progressBar.maxHideTime;
            }
          }

          function stickAround() {
            clearTimeout(intervalId);
            progressBar.hideEta = 0;
            $toastElement.stop(true, true)[options.showMethod]({
              duration: options.showDuration,
              easing: options.showEasing,
            });
          }

          function updateProgress() {
            var percentage =
              ((progressBar.hideEta - new Date().getTime()) /
                progressBar.maxHideTime) *
              100;
            $progressElement.width(percentage + '%');
          }
        }

        function getOptions() {
          return $.extend({}, getDefaults(), toastr.options);
        }

        function removeToast($toastElement) {
          if (!$container) {
            $container = getContainer();
          }
          if ($toastElement.is(':visible')) {
            return;
          }
          $toastElement.remove();
          $toastElement = null;
          if ($container.children().length === 0) {
            $container.remove();
            previousToast = undefined;
          }
        }
      })();
    });
  })(
    typeof define === 'function' && define.amd
      ? define
      : function (deps, factory) {
          if (typeof module !== 'undefined' && module.exports) {
            //Node
            module.exports = factory(require('jquery'));
          } else {
            window.toastr = factory(window.jQuery);
          }
        },
  );
}
loader.makeDefaultExport = false; //# sourceMappingURL=vendor.map
